digraph G {
00[label="compilationUnit\n Bud1%@@@@E%DSDB@@@ "]
01[label="compilationUnit\n publicclassDemoWord2Vec{privatestaticfinalStringTRAIN_FILE_NAME=\"data/test/123.txt\";privatestaticfinalStringMODEL_FILE_NAME=\"data/test/word2vec.txt\";publicstaticvoidmain(String[]args)throwsIOException{WordVectorModelwordVectorModel=trainOrLoadModel();printNearest(\"12\",wordVectorModel);DocVectorModeldocVectorModel=newDocVectorModel(wordVectorModel);String[]documents=newString[]{\"233\",};System.out.println(docVectorModel.similarity(documents[0],documents[1]));System.out.println(docVectorModel.similarity(documents[0],documents[4]));for(inti=0;i<documents.length;i++){docVectorModel.addDocument(i,documents[i]);}printNearestDocument(\"344\",documents,docVectorModel);}staticvoidprintNearest(Stringword,WordVectorModelmodel){System.out.printf(\"\n                                                Word     Cosine\n------------------------------------------------------------------------\n\");for(Map.Entry<String,Float>entry:model.nearest(word)){System.out.printf(\"%50s\t\t%f\n\",entry.getKey(),entry.getValue());}}staticvoidprintNearestDocument(Stringdocument,String[]documents,DocVectorModelmodel){printHeader(document);for(Map.Entry<Integer,Float>entry:model.nearest(document)){System.out.printf(\"%50s\t\t%f\n\",documents[entry.getKey()],entry.getValue());}}privatestaticvoidprintHeader(Stringquery){System.out.printf(\"\n%50s          Cosine\n------------------------------------------------------------------------\n\",query);}staticWordVectorModeltrainOrLoadModel()throwsIOException{if(!IOUtil.isFileExisted(MODEL_FILE_NAME)){if(!IOUtil.isFileExisted(TRAIN_FILE_NAME)){System.err.println(\"github.com/hankcs/HanLP/wiki/word2vec\");System.exit(1);}Word2VecTrainertrainerBuilder=newWord2VecTrainer();returntrainerBuilder.train(TRAIN_FILE_NAME,MODEL_FILE_NAME);}returnloadModel();}staticWordVectorModelloadModel()throwsIOException{returnnewWordVectorModel(MODEL_FILE_NAME);}}<EOF> "]
12[label="normalClassDeclaration\n publicclassDemoWord2Vec{privatestaticfinalStringTRAIN_FILE_NAME=\"data/test/123.txt\";privatestaticfinalStringMODEL_FILE_NAME=\"data/test/word2vec.txt\";publicstaticvoidmain(String[]args)throwsIOException{WordVectorModelwordVectorModel=trainOrLoadModel();printNearest(\"12\",wordVectorModel);DocVectorModeldocVectorModel=newDocVectorModel(wordVectorModel);String[]documents=newString[]{\"233\",};System.out.println(docVectorModel.similarity(documents[0],documents[1]));System.out.println(docVectorModel.similarity(documents[0],documents[4]));for(inti=0;i<documents.length;i++){docVectorModel.addDocument(i,documents[i]);}printNearestDocument(\"344\",documents,docVectorModel);}staticvoidprintNearest(Stringword,WordVectorModelmodel){System.out.printf(\"\n                                                Word     Cosine\n------------------------------------------------------------------------\n\");for(Map.Entry<String,Float>entry:model.nearest(word)){System.out.printf(\"%50s\t\t%f\n\",entry.getKey(),entry.getValue());}}staticvoidprintNearestDocument(Stringdocument,String[]documents,DocVectorModelmodel){printHeader(document);for(Map.Entry<Integer,Float>entry:model.nearest(document)){System.out.printf(\"%50s\t\t%f\n\",documents[entry.getKey()],entry.getValue());}}privatestaticvoidprintHeader(Stringquery){System.out.printf(\"\n%50s          Cosine\n------------------------------------------------------------------------\n\",query);}staticWordVectorModeltrainOrLoadModel()throwsIOException{if(!IOUtil.isFileExisted(MODEL_FILE_NAME)){if(!IOUtil.isFileExisted(TRAIN_FILE_NAME)){System.err.println(\"github.com/hankcs/HanLP/wiki/word2vec\");System.exit(1);}Word2VecTrainertrainerBuilder=newWord2VecTrainer();returntrainerBuilder.train(TRAIN_FILE_NAME,MODEL_FILE_NAME);}returnloadModel();}staticWordVectorModelloadModel()throwsIOException{returnnewWordVectorModel(MODEL_FILE_NAME);}} "]
23[label="classModifier\n public "]
24[label="classBody\n {privatestaticfinalStringTRAIN_FILE_NAME=\"data/test/123.txt\";privatestaticfinalStringMODEL_FILE_NAME=\"data/test/word2vec.txt\";publicstaticvoidmain(String[]args)throwsIOException{WordVectorModelwordVectorModel=trainOrLoadModel();printNearest(\"12\",wordVectorModel);DocVectorModeldocVectorModel=newDocVectorModel(wordVectorModel);String[]documents=newString[]{\"233\",};System.out.println(docVectorModel.similarity(documents[0],documents[1]));System.out.println(docVectorModel.similarity(documents[0],documents[4]));for(inti=0;i<documents.length;i++){docVectorModel.addDocument(i,documents[i]);}printNearestDocument(\"344\",documents,docVectorModel);}staticvoidprintNearest(Stringword,WordVectorModelmodel){System.out.printf(\"\n                                                Word     Cosine\n------------------------------------------------------------------------\n\");for(Map.Entry<String,Float>entry:model.nearest(word)){System.out.printf(\"%50s\t\t%f\n\",entry.getKey(),entry.getValue());}}staticvoidprintNearestDocument(Stringdocument,String[]documents,DocVectorModelmodel){printHeader(document);for(Map.Entry<Integer,Float>entry:model.nearest(document)){System.out.printf(\"%50s\t\t%f\n\",documents[entry.getKey()],entry.getValue());}}privatestaticvoidprintHeader(Stringquery){System.out.printf(\"\n%50s          Cosine\n------------------------------------------------------------------------\n\",query);}staticWordVectorModeltrainOrLoadModel()throwsIOException{if(!IOUtil.isFileExisted(MODEL_FILE_NAME)){if(!IOUtil.isFileExisted(TRAIN_FILE_NAME)){System.err.println(\"github.com/hankcs/HanLP/wiki/word2vec\");System.exit(1);}Word2VecTrainertrainerBuilder=newWord2VecTrainer();returntrainerBuilder.train(TRAIN_FILE_NAME,MODEL_FILE_NAME);}returnloadModel();}staticWordVectorModelloadModel()throwsIOException{returnnewWordVectorModel(MODEL_FILE_NAME);}} "]
35[label="fieldDeclaration\n privatestaticfinalStringTRAIN_FILE_NAME=\"data/test/123.txt\"; "]
46[label="fieldModifier\n private "]
47[label="fieldModifier\n static "]
48[label="fieldModifier\n final "]
49[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
410[label="variableDeclarator\n TRAIN_FILE_NAME=\"data/test/123.txt\" "]
511[label="variableDeclaratorId\n TRAIN_FILE_NAME "]
512[label="literal\n \"data/test/123.txt\" "]
313[label="fieldDeclaration\n privatestaticfinalStringMODEL_FILE_NAME=\"data/test/word2vec.txt\"; "]
414[label="fieldModifier\n private "]
415[label="fieldModifier\n static "]
416[label="fieldModifier\n final "]
417[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
418[label="variableDeclarator\n MODEL_FILE_NAME=\"data/test/word2vec.txt\" "]
519[label="variableDeclaratorId\n MODEL_FILE_NAME "]
520[label="literal\n \"data/test/word2vec.txt\" "]
321[label="methodDeclaration\n publicstaticvoidmain(String[]args)throwsIOException{WordVectorModelwordVectorModel=trainOrLoadModel();printNearest(\"12\",wordVectorModel);DocVectorModeldocVectorModel=newDocVectorModel(wordVectorModel);String[]documents=newString[]{\"233\",};System.out.println(docVectorModel.similarity(documents[0],documents[1]));System.out.println(docVectorModel.similarity(documents[0],documents[4]));for(inti=0;i<documents.length;i++){docVectorModel.addDocument(i,documents[i]);}printNearestDocument(\"344\",documents,docVectorModel);} "]
422[label="methodModifier\n public "]
423[label="methodModifier\n static "]
424[label="methodHeader\n voidmain(String[]args)throwsIOException "]
525[label="result\n void "]
526[label="methodDeclarator\n main(String[]args) "]
627[label="formalParameter\n String[]args "]
728[label="unannArrayType\n String[] "]
829[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
830[label="dims\n [] "]
731[label="variableDeclaratorId\n args "]
532[label="throws_\n throwsIOException "]
633[label="classType\n IOException "]
434[label="block\n {WordVectorModelwordVectorModel=trainOrLoadModel();printNearest(\"12\",wordVectorModel);DocVectorModeldocVectorModel=newDocVectorModel(wordVectorModel);String[]documents=newString[]{\"233\",};System.out.println(docVectorModel.similarity(documents[0],documents[1]));System.out.println(docVectorModel.similarity(documents[0],documents[4]));for(inti=0;i<documents.length;i++){docVectorModel.addDocument(i,documents[i]);}printNearestDocument(\"344\",documents,docVectorModel);} "]
535[label="blockStatements\n WordVectorModelwordVectorModel=trainOrLoadModel();printNearest(\"12\",wordVectorModel);DocVectorModeldocVectorModel=newDocVectorModel(wordVectorModel);String[]documents=newString[]{\"233\",};System.out.println(docVectorModel.similarity(documents[0],documents[1]));System.out.println(docVectorModel.similarity(documents[0],documents[4]));for(inti=0;i<documents.length;i++){docVectorModel.addDocument(i,documents[i]);}printNearestDocument(\"344\",documents,docVectorModel); "]
636[label="localVariableDeclarationStatement\n WordVectorModelwordVectorModel=trainOrLoadModel(); "]
737[label="localVariableDeclaration\n WordVectorModelwordVectorModel=trainOrLoadModel() "]
838[label="unannClassType_lfno_unannClassOrInterfaceType\n WordVectorModel "]
839[label="variableDeclarator\n wordVectorModel=trainOrLoadModel() "]
940[label="variableDeclaratorId\n wordVectorModel "]
941[label="methodInvocation_lfno_primary\n trainOrLoadModel() "]
1042[label="methodName\n trainOrLoadModel "]
643[label="expressionStatement\n printNearest(\"12\",wordVectorModel); "]
744[label="methodInvocation\n printNearest(\"12\",wordVectorModel) "]
845[label="methodName\n printNearest "]
846[label="argumentList\n \"12\",wordVectorModel "]
947[label="literal\n \"12\" "]
948[label="expressionName\n wordVectorModel "]
649[label="localVariableDeclarationStatement\n DocVectorModeldocVectorModel=newDocVectorModel(wordVectorModel); "]
750[label="localVariableDeclaration\n DocVectorModeldocVectorModel=newDocVectorModel(wordVectorModel) "]
851[label="unannClassType_lfno_unannClassOrInterfaceType\n DocVectorModel "]
852[label="variableDeclarator\n docVectorModel=newDocVectorModel(wordVectorModel) "]
953[label="variableDeclaratorId\n docVectorModel "]
954[label="classInstanceCreationExpression_lfno_primary\n newDocVectorModel(wordVectorModel) "]
1055[label="expressionName\n wordVectorModel "]
656[label="localVariableDeclarationStatement\n String[]documents=newString[]{\"233\",}; "]
757[label="localVariableDeclaration\n String[]documents=newString[]{\"233\",} "]
858[label="unannArrayType\n String[] "]
959[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
960[label="dims\n [] "]
861[label="variableDeclarator\n documents=newString[]{\"233\",} "]
962[label="variableDeclaratorId\n documents "]
963[label="arrayCreationExpression\n newString[]{\"233\",} "]
1064[label="classType_lfno_classOrInterfaceType\n String "]
1065[label="dims\n [] "]
1066[label="arrayInitializer\n {\"233\",} "]
1167[label="literal\n \"233\" "]
668[label="expressionStatement\n System.out.println(docVectorModel.similarity(documents[0],documents[1])); "]
769[label="methodInvocation\n System.out.println(docVectorModel.similarity(documents[0],documents[1])) "]
870[label="typeName\n System.out "]
971[label="packageOrTypeName\n System "]
872[label="methodInvocation_lfno_primary\n docVectorModel.similarity(documents[0],documents[1]) "]
973[label="typeName\n docVectorModel "]
974[label="argumentList\n documents[0],documents[1] "]
1075[label="arrayAccess_lfno_primary\n documents[0] "]
1176[label="expressionName\n documents "]
1177[label="literal\n 0 "]
1078[label="arrayAccess_lfno_primary\n documents[1] "]
1179[label="expressionName\n documents "]
1180[label="literal\n 1 "]
681[label="expressionStatement\n System.out.println(docVectorModel.similarity(documents[0],documents[4])); "]
782[label="methodInvocation\n System.out.println(docVectorModel.similarity(documents[0],documents[4])) "]
883[label="typeName\n System.out "]
984[label="packageOrTypeName\n System "]
885[label="methodInvocation_lfno_primary\n docVectorModel.similarity(documents[0],documents[4]) "]
986[label="typeName\n docVectorModel "]
987[label="argumentList\n documents[0],documents[4] "]
1088[label="arrayAccess_lfno_primary\n documents[0] "]
1189[label="expressionName\n documents "]
1190[label="literal\n 0 "]
1091[label="arrayAccess_lfno_primary\n documents[4] "]
1192[label="expressionName\n documents "]
1193[label="literal\n 4 "]
694[label="basicForStatement\n for(inti=0;i<documents.length;i++){docVectorModel.addDocument(i,documents[i]);} "]
795[label="localVariableDeclaration\n inti=0 "]
896[label="integralType\n int "]
897[label="variableDeclarator\n i=0 "]
998[label="variableDeclaratorId\n i "]
999[label="literal\n 0 "]
7100[label="relationalExpression\n i<documents.length "]
8101[label="expressionName\n i "]
8102[label="expressionName\n documents.length "]
9103[label="ambiguousName\n documents "]
7104[label="postIncrementExpression\n i++ "]
8105[label="expressionName\n i "]
7106[label="block\n {docVectorModel.addDocument(i,documents[i]);} "]
8107[label="expressionStatement\n docVectorModel.addDocument(i,documents[i]); "]
9108[label="methodInvocation\n docVectorModel.addDocument(i,documents[i]) "]
10109[label="typeName\n docVectorModel "]
10110[label="argumentList\n i,documents[i] "]
11111[label="expressionName\n i "]
11112[label="arrayAccess_lfno_primary\n documents[i] "]
12113[label="expressionName\n documents "]
12114[label="expressionName\n i "]
6115[label="expressionStatement\n printNearestDocument(\"344\",documents,docVectorModel); "]
7116[label="methodInvocation\n printNearestDocument(\"344\",documents,docVectorModel) "]
8117[label="methodName\n printNearestDocument "]
8118[label="argumentList\n \"344\",documents,docVectorModel "]
9119[label="literal\n \"344\" "]
9120[label="expressionName\n documents "]
9121[label="expressionName\n docVectorModel "]
3122[label="methodDeclaration\n staticvoidprintNearest(Stringword,WordVectorModelmodel){System.out.printf(\"\n                                                Word     Cosine\n------------------------------------------------------------------------\n\");for(Map.Entry<String,Float>entry:model.nearest(word)){System.out.printf(\"%50s\t\t%f\n\",entry.getKey(),entry.getValue());}} "]
4123[label="methodModifier\n static "]
4124[label="methodHeader\n voidprintNearest(Stringword,WordVectorModelmodel) "]
5125[label="result\n void "]
5126[label="methodDeclarator\n printNearest(Stringword,WordVectorModelmodel) "]
6127[label="formalParameterList\n Stringword,WordVectorModelmodel "]
7128[label="formalParameter\n Stringword "]
8129[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8130[label="variableDeclaratorId\n word "]
7131[label="formalParameter\n WordVectorModelmodel "]
8132[label="unannClassType_lfno_unannClassOrInterfaceType\n WordVectorModel "]
8133[label="variableDeclaratorId\n model "]
4134[label="block\n {System.out.printf(\"\n                                                Word     Cosine\n------------------------------------------------------------------------\n\");for(Map.Entry<String,Float>entry:model.nearest(word)){System.out.printf(\"%50s\t\t%f\n\",entry.getKey(),entry.getValue());}} "]
5135[label="blockStatements\n System.out.printf(\"\n                                                Word     Cosine\n------------------------------------------------------------------------\n\");for(Map.Entry<String,Float>entry:model.nearest(word)){System.out.printf(\"%50s\t\t%f\n\",entry.getKey(),entry.getValue());} "]
6136[label="expressionStatement\n System.out.printf(\"\n                                                Word     Cosine\n------------------------------------------------------------------------\n\"); "]
7137[label="methodInvocation\n System.out.printf(\"\n                                                Word     Cosine\n------------------------------------------------------------------------\n\") "]
8138[label="typeName\n System.out "]
9139[label="packageOrTypeName\n System "]
8140[label="literal\n \"\n                                                Word     Cosine\n------------------------------------------------------------------------\n\" "]
6141[label="enhancedForStatement\n for(Map.Entry<String,Float>entry:model.nearest(word)){System.out.printf(\"%50s\t\t%f\n\",entry.getKey(),entry.getValue());} "]
7142[label="unannClassOrInterfaceType\n Map.Entry<String,Float> "]
8143[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
8144[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,Float> "]
9145[label="typeArguments\n <String,Float> "]
10146[label="typeArgumentList\n String,Float "]
11147[label="classType_lfno_classOrInterfaceType\n String "]
11148[label="classType_lfno_classOrInterfaceType\n Float "]
7149[label="variableDeclaratorId\n entry "]
7150[label="methodInvocation_lfno_primary\n model.nearest(word) "]
8151[label="typeName\n model "]
8152[label="expressionName\n word "]
7153[label="block\n {System.out.printf(\"%50s\t\t%f\n\",entry.getKey(),entry.getValue());} "]
8154[label="expressionStatement\n System.out.printf(\"%50s\t\t%f\n\",entry.getKey(),entry.getValue()); "]
9155[label="methodInvocation\n System.out.printf(\"%50s\t\t%f\n\",entry.getKey(),entry.getValue()) "]
10156[label="typeName\n System.out "]
11157[label="packageOrTypeName\n System "]
10158[label="argumentList\n \"%50s\t\t%f\n\",entry.getKey(),entry.getValue() "]
11159[label="literal\n \"%50s\t\t%f\n\" "]
11160[label="methodInvocation_lfno_primary\n entry.getKey() "]
12161[label="typeName\n entry "]
11162[label="methodInvocation_lfno_primary\n entry.getValue() "]
12163[label="typeName\n entry "]
3164[label="methodDeclaration\n staticvoidprintNearestDocument(Stringdocument,String[]documents,DocVectorModelmodel){printHeader(document);for(Map.Entry<Integer,Float>entry:model.nearest(document)){System.out.printf(\"%50s\t\t%f\n\",documents[entry.getKey()],entry.getValue());}} "]
4165[label="methodModifier\n static "]
4166[label="methodHeader\n voidprintNearestDocument(Stringdocument,String[]documents,DocVectorModelmodel) "]
5167[label="result\n void "]
5168[label="methodDeclarator\n printNearestDocument(Stringdocument,String[]documents,DocVectorModelmodel) "]
6169[label="formalParameterList\n Stringdocument,String[]documents,DocVectorModelmodel "]
7170[label="formalParameters\n Stringdocument,String[]documents "]
8171[label="formalParameter\n Stringdocument "]
9172[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
9173[label="variableDeclaratorId\n document "]
8174[label="formalParameter\n String[]documents "]
9175[label="unannArrayType\n String[] "]
10176[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
10177[label="dims\n [] "]
9178[label="variableDeclaratorId\n documents "]
7179[label="formalParameter\n DocVectorModelmodel "]
8180[label="unannClassType_lfno_unannClassOrInterfaceType\n DocVectorModel "]
8181[label="variableDeclaratorId\n model "]
4182[label="block\n {printHeader(document);for(Map.Entry<Integer,Float>entry:model.nearest(document)){System.out.printf(\"%50s\t\t%f\n\",documents[entry.getKey()],entry.getValue());}} "]
5183[label="blockStatements\n printHeader(document);for(Map.Entry<Integer,Float>entry:model.nearest(document)){System.out.printf(\"%50s\t\t%f\n\",documents[entry.getKey()],entry.getValue());} "]
6184[label="expressionStatement\n printHeader(document); "]
7185[label="methodInvocation\n printHeader(document) "]
8186[label="methodName\n printHeader "]
8187[label="expressionName\n document "]
6188[label="enhancedForStatement\n for(Map.Entry<Integer,Float>entry:model.nearest(document)){System.out.printf(\"%50s\t\t%f\n\",documents[entry.getKey()],entry.getValue());} "]
7189[label="unannClassOrInterfaceType\n Map.Entry<Integer,Float> "]
8190[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
8191[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<Integer,Float> "]
9192[label="typeArguments\n <Integer,Float> "]
10193[label="typeArgumentList\n Integer,Float "]
11194[label="classType_lfno_classOrInterfaceType\n Integer "]
11195[label="classType_lfno_classOrInterfaceType\n Float "]
7196[label="variableDeclaratorId\n entry "]
7197[label="methodInvocation_lfno_primary\n model.nearest(document) "]
8198[label="typeName\n model "]
8199[label="expressionName\n document "]
7200[label="block\n {System.out.printf(\"%50s\t\t%f\n\",documents[entry.getKey()],entry.getValue());} "]
8201[label="expressionStatement\n System.out.printf(\"%50s\t\t%f\n\",documents[entry.getKey()],entry.getValue()); "]
9202[label="methodInvocation\n System.out.printf(\"%50s\t\t%f\n\",documents[entry.getKey()],entry.getValue()) "]
10203[label="typeName\n System.out "]
11204[label="packageOrTypeName\n System "]
10205[label="argumentList\n \"%50s\t\t%f\n\",documents[entry.getKey()],entry.getValue() "]
11206[label="literal\n \"%50s\t\t%f\n\" "]
11207[label="arrayAccess_lfno_primary\n documents[entry.getKey()] "]
12208[label="expressionName\n documents "]
12209[label="methodInvocation_lfno_primary\n entry.getKey() "]
13210[label="typeName\n entry "]
11211[label="methodInvocation_lfno_primary\n entry.getValue() "]
12212[label="typeName\n entry "]
3213[label="methodDeclaration\n privatestaticvoidprintHeader(Stringquery){System.out.printf(\"\n%50s          Cosine\n------------------------------------------------------------------------\n\",query);} "]
4214[label="methodModifier\n private "]
4215[label="methodModifier\n static "]
4216[label="methodHeader\n voidprintHeader(Stringquery) "]
5217[label="result\n void "]
5218[label="methodDeclarator\n printHeader(Stringquery) "]
6219[label="formalParameter\n Stringquery "]
7220[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
7221[label="variableDeclaratorId\n query "]
4222[label="block\n {System.out.printf(\"\n%50s          Cosine\n------------------------------------------------------------------------\n\",query);} "]
5223[label="expressionStatement\n System.out.printf(\"\n%50s          Cosine\n------------------------------------------------------------------------\n\",query); "]
6224[label="methodInvocation\n System.out.printf(\"\n%50s          Cosine\n------------------------------------------------------------------------\n\",query) "]
7225[label="typeName\n System.out "]
8226[label="packageOrTypeName\n System "]
7227[label="argumentList\n \"\n%50s          Cosine\n------------------------------------------------------------------------\n\",query "]
8228[label="literal\n \"\n%50s          Cosine\n------------------------------------------------------------------------\n\" "]
8229[label="expressionName\n query "]
3230[label="methodDeclaration\n staticWordVectorModeltrainOrLoadModel()throwsIOException{if(!IOUtil.isFileExisted(MODEL_FILE_NAME)){if(!IOUtil.isFileExisted(TRAIN_FILE_NAME)){System.err.println(\"github.com/hankcs/HanLP/wiki/word2vec\");System.exit(1);}Word2VecTrainertrainerBuilder=newWord2VecTrainer();returntrainerBuilder.train(TRAIN_FILE_NAME,MODEL_FILE_NAME);}returnloadModel();} "]
4231[label="methodModifier\n static "]
4232[label="methodHeader\n WordVectorModeltrainOrLoadModel()throwsIOException "]
5233[label="unannClassType_lfno_unannClassOrInterfaceType\n WordVectorModel "]
5234[label="methodDeclarator\n trainOrLoadModel() "]
5235[label="throws_\n throwsIOException "]
6236[label="classType\n IOException "]
4237[label="block\n {if(!IOUtil.isFileExisted(MODEL_FILE_NAME)){if(!IOUtil.isFileExisted(TRAIN_FILE_NAME)){System.err.println(\"github.com/hankcs/HanLP/wiki/word2vec\");System.exit(1);}Word2VecTrainertrainerBuilder=newWord2VecTrainer();returntrainerBuilder.train(TRAIN_FILE_NAME,MODEL_FILE_NAME);}returnloadModel();} "]
5238[label="blockStatements\n if(!IOUtil.isFileExisted(MODEL_FILE_NAME)){if(!IOUtil.isFileExisted(TRAIN_FILE_NAME)){System.err.println(\"github.com/hankcs/HanLP/wiki/word2vec\");System.exit(1);}Word2VecTrainertrainerBuilder=newWord2VecTrainer();returntrainerBuilder.train(TRAIN_FILE_NAME,MODEL_FILE_NAME);}returnloadModel(); "]
6239[label="ifThenStatement\n if(!IOUtil.isFileExisted(MODEL_FILE_NAME)){if(!IOUtil.isFileExisted(TRAIN_FILE_NAME)){System.err.println(\"github.com/hankcs/HanLP/wiki/word2vec\");System.exit(1);}Word2VecTrainertrainerBuilder=newWord2VecTrainer();returntrainerBuilder.train(TRAIN_FILE_NAME,MODEL_FILE_NAME);} "]
7240[label="unaryExpressionNotPlusMinus\n !IOUtil.isFileExisted(MODEL_FILE_NAME) "]
8241[label="methodInvocation_lfno_primary\n IOUtil.isFileExisted(MODEL_FILE_NAME) "]
9242[label="typeName\n IOUtil "]
9243[label="expressionName\n MODEL_FILE_NAME "]
7244[label="block\n {if(!IOUtil.isFileExisted(TRAIN_FILE_NAME)){System.err.println(\"github.com/hankcs/HanLP/wiki/word2vec\");System.exit(1);}Word2VecTrainertrainerBuilder=newWord2VecTrainer();returntrainerBuilder.train(TRAIN_FILE_NAME,MODEL_FILE_NAME);} "]
8245[label="blockStatements\n if(!IOUtil.isFileExisted(TRAIN_FILE_NAME)){System.err.println(\"github.com/hankcs/HanLP/wiki/word2vec\");System.exit(1);}Word2VecTrainertrainerBuilder=newWord2VecTrainer();returntrainerBuilder.train(TRAIN_FILE_NAME,MODEL_FILE_NAME); "]
9246[label="ifThenStatement\n if(!IOUtil.isFileExisted(TRAIN_FILE_NAME)){System.err.println(\"github.com/hankcs/HanLP/wiki/word2vec\");System.exit(1);} "]
10247[label="unaryExpressionNotPlusMinus\n !IOUtil.isFileExisted(TRAIN_FILE_NAME) "]
11248[label="methodInvocation_lfno_primary\n IOUtil.isFileExisted(TRAIN_FILE_NAME) "]
12249[label="typeName\n IOUtil "]
12250[label="expressionName\n TRAIN_FILE_NAME "]
10251[label="block\n {System.err.println(\"github.com/hankcs/HanLP/wiki/word2vec\");System.exit(1);} "]
11252[label="blockStatements\n System.err.println(\"github.com/hankcs/HanLP/wiki/word2vec\");System.exit(1); "]
12253[label="expressionStatement\n System.err.println(\"github.com/hankcs/HanLP/wiki/word2vec\"); "]
13254[label="methodInvocation\n System.err.println(\"github.com/hankcs/HanLP/wiki/word2vec\") "]
14255[label="typeName\n System.err "]
15256[label="packageOrTypeName\n System "]
14257[label="literal\n \"github.com/hankcs/HanLP/wiki/word2vec\" "]
12258[label="expressionStatement\n System.exit(1); "]
13259[label="methodInvocation\n System.exit(1) "]
14260[label="typeName\n System "]
14261[label="literal\n 1 "]
9262[label="localVariableDeclarationStatement\n Word2VecTrainertrainerBuilder=newWord2VecTrainer(); "]
10263[label="localVariableDeclaration\n Word2VecTrainertrainerBuilder=newWord2VecTrainer() "]
11264[label="unannClassType_lfno_unannClassOrInterfaceType\n Word2VecTrainer "]
11265[label="variableDeclarator\n trainerBuilder=newWord2VecTrainer() "]
12266[label="variableDeclaratorId\n trainerBuilder "]
12267[label="classInstanceCreationExpression_lfno_primary\n newWord2VecTrainer() "]
9268[label="returnStatement\n returntrainerBuilder.train(TRAIN_FILE_NAME,MODEL_FILE_NAME); "]
10269[label="methodInvocation_lfno_primary\n trainerBuilder.train(TRAIN_FILE_NAME,MODEL_FILE_NAME) "]
11270[label="typeName\n trainerBuilder "]
11271[label="argumentList\n TRAIN_FILE_NAME,MODEL_FILE_NAME "]
12272[label="expressionName\n TRAIN_FILE_NAME "]
12273[label="expressionName\n MODEL_FILE_NAME "]
6274[label="returnStatement\n returnloadModel(); "]
7275[label="methodInvocation_lfno_primary\n loadModel() "]
8276[label="methodName\n loadModel "]
3277[label="methodDeclaration\n staticWordVectorModelloadModel()throwsIOException{returnnewWordVectorModel(MODEL_FILE_NAME);} "]
4278[label="methodModifier\n static "]
4279[label="methodHeader\n WordVectorModelloadModel()throwsIOException "]
5280[label="unannClassType_lfno_unannClassOrInterfaceType\n WordVectorModel "]
5281[label="methodDeclarator\n loadModel() "]
5282[label="throws_\n throwsIOException "]
6283[label="classType\n IOException "]
4284[label="block\n {returnnewWordVectorModel(MODEL_FILE_NAME);} "]
5285[label="returnStatement\n returnnewWordVectorModel(MODEL_FILE_NAME); "]
6286[label="classInstanceCreationExpression_lfno_primary\n newWordVectorModel(MODEL_FILE_NAME) "]
7287[label="expressionName\n MODEL_FILE_NAME "]
-10->01
01->12
12->23
12->24
24->35
35->46
35->47
35->48
35->49
35->410
410->511
410->512
24->313
313->414
313->415
313->416
313->417
313->418
418->519
418->520
24->321
321->422
321->423
321->424
424->525
424->526
526->627
627->728
728->829
728->830
627->731
424->532
532->633
321->434
434->535
535->636
636->737
737->838
737->839
839->940
839->941
941->1042
535->643
643->744
744->845
744->846
846->947
846->948
535->649
649->750
750->851
750->852
852->953
852->954
954->1055
535->656
656->757
757->858
858->959
858->960
757->861
861->962
861->963
963->1064
963->1065
963->1066
1066->1167
535->668
668->769
769->870
870->971
769->872
872->973
872->974
974->1075
1075->1176
1075->1177
974->1078
1078->1179
1078->1180
535->681
681->782
782->883
883->984
782->885
885->986
885->987
987->1088
1088->1189
1088->1190
987->1091
1091->1192
1091->1193
535->694
694->795
795->896
795->897
897->998
897->999
694->7100
7100->8101
7100->8102
8102->9103
694->7104
7104->8105
694->7106
7106->8107
8107->9108
9108->10109
9108->10110
10110->11111
10110->11112
11112->12113
11112->12114
535->6115
6115->7116
7116->8117
7116->8118
8118->9119
8118->9120
8118->9121
24->3122
3122->4123
3122->4124
4124->5125
4124->5126
5126->6127
6127->7128
7128->8129
7128->8130
6127->7131
7131->8132
7131->8133
3122->4134
4134->5135
5135->6136
6136->7137
7137->8138
8138->9139
7137->8140
5135->6141
6141->7142
7142->8143
7142->8144
8144->9145
9145->10146
10146->11147
10146->11148
6141->7149
6141->7150
7150->8151
7150->8152
6141->7153
7153->8154
8154->9155
9155->10156
10156->11157
9155->10158
10158->11159
10158->11160
11160->12161
10158->11162
11162->12163
24->3164
3164->4165
3164->4166
4166->5167
4166->5168
5168->6169
6169->7170
7170->8171
8171->9172
8171->9173
7170->8174
8174->9175
9175->10176
9175->10177
8174->9178
6169->7179
7179->8180
7179->8181
3164->4182
4182->5183
5183->6184
6184->7185
7185->8186
7185->8187
5183->6188
6188->7189
7189->8190
7189->8191
8191->9192
9192->10193
10193->11194
10193->11195
6188->7196
6188->7197
7197->8198
7197->8199
6188->7200
7200->8201
8201->9202
9202->10203
10203->11204
9202->10205
10205->11206
10205->11207
11207->12208
11207->12209
12209->13210
10205->11211
11211->12212
24->3213
3213->4214
3213->4215
3213->4216
4216->5217
4216->5218
5218->6219
6219->7220
6219->7221
3213->4222
4222->5223
5223->6224
6224->7225
7225->8226
6224->7227
7227->8228
7227->8229
24->3230
3230->4231
3230->4232
4232->5233
4232->5234
4232->5235
5235->6236
3230->4237
4237->5238
5238->6239
6239->7240
7240->8241
8241->9242
8241->9243
6239->7244
7244->8245
8245->9246
9246->10247
10247->11248
11248->12249
11248->12250
9246->10251
10251->11252
11252->12253
12253->13254
13254->14255
14255->15256
13254->14257
11252->12258
12258->13259
13259->14260
13259->14261
8245->9262
9262->10263
10263->11264
10263->11265
11265->12266
11265->12267
8245->9268
9268->10269
10269->11270
10269->11271
11271->12272
11271->12273
5238->6274
6274->7275
7275->8276
24->3277
3277->4278
3277->4279
4279->5280
4279->5281
4279->5282
5282->6283
3277->4284
4284->5285
5285->6286
6286->7287
}


>nextValue()

>nextValue()

>setValue(V[]value)

>enableProbability(booleanenable)

>classify(Stringtext)
predict
CollectionUtility.max

>classify(Documentdocument)
predict
CollectionUtility.max

>train(StringfolderPath,StringcharsetName)
dataSet.load
train

>train(Map<String,String[]>trainingDataSet)
logger.start
trainingDataSet.size
trainingDataSet.entrySet
entry.getKey
logger.out
entry.getValue
dataSet.add
logger.out
MathUtility.percentage
logger.finish
train

>train(StringfolderPath)
train

>predict(Documentdocument)
getModel
categorize
scoreMap.put

>label(Documentdocument)
getModel
categorize

>nextWords(intn,Stringmsg)
nextWord

>nextWord()
scanner.next
word.length
word.equals

>getTargetVector()

>execute()
vectorsReader.readVectorFile
vectorsReader.getNumWords
vectorsReader.getSize
getTargetVector
vectorsReader.getMatrixElement
vectorsReader.getWord
scanner.close

>setTokenizer(ITokenizertokenizer)

>convert(Stringcategory,Stringtext)
tokenizer.segment

>getTokenizer()

>getCatalog()

>getLexicon()

>load(StringfolderPath,StringcharsetName)
load

>load(StringfolderPath)
load

>isTestingDataSet()

>load(StringfolderPath,StringcharsetName,doublepercentage)
root.exists
String.format
root.getAbsolutePath
root.isDirectory
String.format
root.getAbsolutePath
root.listFiles
logger.start
folder.isFile
folder.listFiles
folder.getName
logger.out
Math.ceil
add
folder.getName
TextProcessUtility.readTxt
logger.out
MathUtility.percentage
logger.out
logger.finish
getCatalog
.size
size

>load(StringfolderPath,doublerate)

>add(Map<String,String[]>testingDataSet)
testingDataSet.entrySet
entry.getValue
add
entry.getKey
HanLP.newSegment
.enablePartOfSpeechTagging

>parse(Stringsentence)
parse
segment.seg
sentence.toCharArray
deprelTranslater.get

>getSegment()

>setSegment(Segmentsegment)

>getDeprelTranslator()

>setDeprelTranslator(Map<String,String>deprelTranslator)

>setDeprelTranslater(StringdeprelTranslatorPath)
GlobalObjectPool.get
iterator.hasNext
iterator.next
.split
deprelTranslater.put
deprelTranslater.size
GlobalObjectPool.put

>enableDeprelTranslator(booleanenable)

>compareTo(AbstractInexactActiono)
.compareTo

>equals(Objectobj)

>name()

>rel()

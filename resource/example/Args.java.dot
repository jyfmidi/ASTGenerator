digraph G {
00[label="compilationUnit\n Bud1%@@@@E%DSDB@@@ "]
01[label="compilationUnit\n digraphG{00[label=\"compilationUnit\n Bud1%@@@@E%DSDB@@@ \"]} "]
02[label="compilationUnit\n digraphG{00[label=\"compilationUnit\n Bud1%@@@@E%DSDB@@@ \"]01[label=\"compilationUnit\n digraphG{00[label=\\"compilationUnit\n Bud1%@@@@E%DSDB@@@ \\"]} \"]-10->01} "]
03[label="compilationUnit\n <EOF> "]
04[label="compilationUnit\n <EOF> "]
05[label="compilationUnit\n digraphG{00[label=\"compilationUnit\n Bud1%@@@@E%DSDB@@@ \"]01[label=\"compilationUnit\n digraphG{00[label=\\"compilationUnit\n Bud1%@@@@E%DSDB@@@ \\"]} \"]02[label=\"compilationUnit\n digraphG{00[label=\\"compilationUnit\n Bud1%@@@@E%DSDB@@@ \\"]01[label=\\"compilationUnit\n digraphG{00[label=\\\"compilationUnitnBud1%@@@@E%DSDB@@@\"]} \\"]-10->01} \"]03[label=\"compilationUnit\n <EOF> \"]04[label=\"compilationUnit\n <EOF> \"]-10->01-10->02-10->03-10->04} "]
06[label="compilationUnit\n <EOF> "]
07[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.bintrie;publicclass_EmptyValueArray<V>extends_ValueArray<V>{public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}}<EOF> "]
18[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.bintrie; "]
29[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie "]
310[label="packageName\n com.hankcs.hanlp.collection.trie "]
411[label="packageName\n com.hankcs.hanlp.collection "]
512[label="packageName\n com.hankcs.hanlp "]
613[label="packageName\n com.hankcs "]
714[label="packageName\n com "]
115[label="normalClassDeclaration\n publicclass_EmptyValueArray<V>extends_ValueArray<V>{public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}} "]
216[label="classModifier\n public "]
217[label="typeParameters\n <V> "]
318[label="typeParameter\n V "]
219[label="superclass\n extends_ValueArray<V> "]
320[label="classType\n _ValueArray<V> "]
421[label="typeArguments\n <V> "]
522[label="classType_lfno_classOrInterfaceType\n V "]
223[label="classBody\n {public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}} "]
324[label="constructorDeclaration\n public_EmptyValueArray(){} "]
425[label="constructorModifier\n public "]
426[label="constructorDeclarator\n _EmptyValueArray() "]
527[label="simpleTypeName\n _EmptyValueArray "]
428[label="constructorBody\n {} "]
329[label="methodDeclaration\n @OverridepublicVnextValue(){returnnull;} "]
430[label="markerAnnotation\n @Override "]
531[label="typeName\n Override "]
432[label="methodModifier\n public "]
433[label="methodHeader\n VnextValue() "]
534[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
535[label="methodDeclarator\n nextValue() "]
436[label="block\n {returnnull;} "]
537[label="returnStatement\n returnnull; "]
638[label="literal\n null "]
039[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.bintrie;publicclass_ValueArray<V>{V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}}<EOF> "]
140[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.bintrie; "]
241[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie "]
342[label="packageName\n com.hankcs.hanlp.collection.trie "]
443[label="packageName\n com.hankcs.hanlp.collection "]
544[label="packageName\n com.hankcs.hanlp "]
645[label="packageName\n com.hankcs "]
746[label="packageName\n com "]
147[label="normalClassDeclaration\n publicclass_ValueArray<V>{V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}} "]
248[label="classModifier\n public "]
249[label="typeParameters\n <V> "]
350[label="typeParameter\n V "]
251[label="classBody\n {V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}} "]
352[label="fieldDeclaration\n V[]value; "]
453[label="unannArrayType\n V[] "]
554[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
555[label="dims\n [] "]
456[label="variableDeclaratorId\n value "]
357[label="fieldDeclaration\n intoffset; "]
458[label="integralType\n int "]
459[label="variableDeclaratorId\n offset "]
360[label="constructorDeclaration\n public_ValueArray(V[]value){this.value=value;} "]
461[label="constructorModifier\n public "]
462[label="constructorDeclarator\n _ValueArray(V[]value) "]
563[label="simpleTypeName\n _ValueArray "]
564[label="formalParameter\n V[]value "]
665[label="unannArrayType\n V[] "]
766[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
767[label="dims\n [] "]
668[label="variableDeclaratorId\n value "]
469[label="constructorBody\n {this.value=value;} "]
570[label="expressionStatement\n this.value=value; "]
671[label="assignment\n this.value=value "]
772[label="fieldAccess\n this.value "]
873[label="primaryNoNewArray_lfno_primary\n this "]
774[label="assignmentOperator\n = "]
775[label="expressionName\n value "]
376[label="methodDeclaration\n publicVnextValue(){returnvalue[offset++];} "]
477[label="methodModifier\n public "]
478[label="methodHeader\n VnextValue() "]
579[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
580[label="methodDeclarator\n nextValue() "]
481[label="block\n {returnvalue[offset++];} "]
582[label="returnStatement\n returnvalue[offset++]; "]
683[label="arrayAccess_lfno_primary\n value[offset++] "]
784[label="expressionName\n value "]
785[label="postfixExpression\n offset++ "]
886[label="expressionName\n offset "]
887[label="postIncrementExpression_lf_postfixExpression\n ++ "]
388[label="constructorDeclaration\n protected_ValueArray(){} "]
489[label="constructorModifier\n protected "]
490[label="constructorDeclarator\n _ValueArray() "]
591[label="simpleTypeName\n _ValueArray "]
492[label="constructorBody\n {} "]
393[label="methodDeclaration\n public_ValueArraysetValue(V[]value){this.value=value;returnthis;} "]
494[label="methodModifier\n public "]
495[label="methodHeader\n _ValueArraysetValue(V[]value) "]
596[label="unannClassType_lfno_unannClassOrInterfaceType\n _ValueArray "]
597[label="methodDeclarator\n setValue(V[]value) "]
698[label="formalParameter\n V[]value "]
799[label="unannArrayType\n V[] "]
8100[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
8101[label="dims\n [] "]
7102[label="variableDeclaratorId\n value "]
4103[label="block\n {this.value=value;returnthis;} "]
5104[label="blockStatements\n this.value=value;returnthis; "]
6105[label="expressionStatement\n this.value=value; "]
7106[label="assignment\n this.value=value "]
8107[label="fieldAccess\n this.value "]
9108[label="primaryNoNewArray_lfno_primary\n this "]
8109[label="assignmentOperator\n = "]
8110[label="expressionName\n value "]
6111[label="returnStatement\n returnthis; "]
7112[label="primaryNoNewArray_lfno_primary\n this "]
0113[label="compilationUnit\n packagecom.hankcs.hanlp.classification.classifiers;importcom.hankcs.hanlp.classification.corpus.Document;importcom.hankcs.hanlp.classification.corpus.IDataSet;importcom.hankcs.hanlp.classification.corpus.MemoryDataSet;importcom.hankcs.hanlp.classification.models.AbstractModel;importcom.hankcs.hanlp.classification.utilities.CollectionUtility;importcom.hankcs.hanlp.classification.utilities.MathUtility;importjava.io.IOException;importjava.util.Map;importjava.util.TreeMap;importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger;publicabstractclassAbstractClassifierimplementsIClassifier{@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}}<EOF> "]
1114[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.classifiers; "]
2115[label="packageName\n com.hankcs.hanlp.classification.classifiers "]
3116[label="packageName\n com.hankcs.hanlp.classification "]
4117[label="packageName\n com.hankcs.hanlp "]
5118[label="packageName\n com.hankcs "]
6119[label="packageName\n com "]
1120[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.Document; "]
2121[label="typeName\n com.hankcs.hanlp.classification.corpus.Document "]
3122[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4123[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5124[label="packageOrTypeName\n com.hankcs.hanlp "]
6125[label="packageOrTypeName\n com.hankcs "]
7126[label="packageOrTypeName\n com "]
1127[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.IDataSet; "]
2128[label="typeName\n com.hankcs.hanlp.classification.corpus.IDataSet "]
3129[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4130[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5131[label="packageOrTypeName\n com.hankcs.hanlp "]
6132[label="packageOrTypeName\n com.hankcs "]
7133[label="packageOrTypeName\n com "]
1134[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.MemoryDataSet; "]
2135[label="typeName\n com.hankcs.hanlp.classification.corpus.MemoryDataSet "]
3136[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4137[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5138[label="packageOrTypeName\n com.hankcs.hanlp "]
6139[label="packageOrTypeName\n com.hankcs "]
7140[label="packageOrTypeName\n com "]
1141[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.models.AbstractModel; "]
2142[label="typeName\n com.hankcs.hanlp.classification.models.AbstractModel "]
3143[label="packageOrTypeName\n com.hankcs.hanlp.classification.models "]
4144[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5145[label="packageOrTypeName\n com.hankcs.hanlp "]
6146[label="packageOrTypeName\n com.hankcs "]
7147[label="packageOrTypeName\n com "]
1148[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.CollectionUtility; "]
2149[label="typeName\n com.hankcs.hanlp.classification.utilities.CollectionUtility "]
3150[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4151[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5152[label="packageOrTypeName\n com.hankcs.hanlp "]
6153[label="packageOrTypeName\n com.hankcs "]
7154[label="packageOrTypeName\n com "]
1155[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.MathUtility; "]
2156[label="typeName\n com.hankcs.hanlp.classification.utilities.MathUtility "]
3157[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4158[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5159[label="packageOrTypeName\n com.hankcs.hanlp "]
6160[label="packageOrTypeName\n com.hankcs "]
7161[label="packageOrTypeName\n com "]
1162[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
2163[label="typeName\n java.io.IOException "]
3164[label="packageOrTypeName\n java.io "]
4165[label="packageOrTypeName\n java "]
1166[label="singleTypeImportDeclaration\n importjava.util.Map; "]
2167[label="typeName\n java.util.Map "]
3168[label="packageOrTypeName\n java.util "]
4169[label="packageOrTypeName\n java "]
1170[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
2171[label="typeName\n java.util.TreeMap "]
3172[label="packageOrTypeName\n java.util "]
4173[label="packageOrTypeName\n java "]
1174[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger; "]
2175[label="typeName\n com.hankcs.hanlp.classification.utilities.Predefine "]
3176[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4177[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5178[label="packageOrTypeName\n com.hankcs.hanlp "]
6179[label="packageOrTypeName\n com.hankcs "]
7180[label="packageOrTypeName\n com "]
1181[label="normalClassDeclaration\n publicabstractclassAbstractClassifierimplementsIClassifier{@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}} "]
2182[label="classModifier\n public "]
2183[label="classModifier\n abstract "]
2184[label="superinterfaces\n implementsIClassifier "]
3185[label="classType\n IClassifier "]
2186[label="classBody\n {@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}} "]
3187[label="methodDeclaration\n @OverridepublicIClassifierenableProbability(booleanenable){returnthis;} "]
4188[label="markerAnnotation\n @Override "]
5189[label="typeName\n Override "]
4190[label="methodModifier\n public "]
4191[label="methodHeader\n IClassifierenableProbability(booleanenable) "]
5192[label="unannClassType_lfno_unannClassOrInterfaceType\n IClassifier "]
5193[label="methodDeclarator\n enableProbability(booleanenable) "]
6194[label="formalParameter\n booleanenable "]
7195[label="unannPrimitiveType\n boolean "]
7196[label="variableDeclaratorId\n enable "]
4197[label="block\n {returnthis;} "]
5198[label="returnStatement\n returnthis; "]
6199[label="primaryNoNewArray_lfno_primary\n this "]
3200[label="fieldDeclaration\n booleanconfigProbabilityEnabled=true; "]
4201[label="unannPrimitiveType\n boolean "]
4202[label="variableDeclarator\n configProbabilityEnabled=true "]
5203[label="variableDeclaratorId\n configProbabilityEnabled "]
5204[label="literal\n true "]
3205[label="methodDeclaration\n @OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);} "]
4206[label="markerAnnotation\n @Override "]
5207[label="typeName\n Override "]
4208[label="methodModifier\n public "]
4209[label="methodHeader\n Stringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException "]
5210[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
5211[label="methodDeclarator\n classify(Stringtext) "]
6212[label="formalParameter\n Stringtext "]
7213[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
7214[label="variableDeclaratorId\n text "]
5215[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6216[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7217[label="classType\n IllegalArgumentException "]
7218[label="classType\n IllegalStateException "]
4219[label="block\n {Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);} "]
5220[label="blockStatements\n Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap); "]
6221[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=predict(text); "]
7222[label="localVariableDeclaration\n Map<String,Double>scoreMap=predict(text) "]
8223[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9224[label="typeArguments\n <String,Double> "]
10225[label="typeArgumentList\n String,Double "]
11226[label="classType_lfno_classOrInterfaceType\n String "]
11227[label="classType_lfno_classOrInterfaceType\n Double "]
8228[label="variableDeclarator\n scoreMap=predict(text) "]
9229[label="variableDeclaratorId\n scoreMap "]
9230[label="methodInvocation_lfno_primary\n predict(text) "]
10231[label="methodName\n predict "]
10232[label="expressionName\n text "]
6233[label="returnStatement\n returnCollectionUtility.max(scoreMap); "]
7234[label="methodInvocation_lfno_primary\n CollectionUtility.max(scoreMap) "]
8235[label="typeName\n CollectionUtility "]
8236[label="expressionName\n scoreMap "]
3237[label="methodDeclaration\n @OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);} "]
4238[label="markerAnnotation\n @Override "]
5239[label="typeName\n Override "]
4240[label="methodModifier\n public "]
4241[label="methodHeader\n Stringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException "]
5242[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
5243[label="methodDeclarator\n classify(Documentdocument) "]
6244[label="formalParameter\n Documentdocument "]
7245[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7246[label="variableDeclaratorId\n document "]
5247[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6248[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7249[label="classType\n IllegalArgumentException "]
7250[label="classType\n IllegalStateException "]
4251[label="block\n {Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);} "]
5252[label="blockStatements\n Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap); "]
6253[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=predict(document); "]
7254[label="localVariableDeclaration\n Map<String,Double>scoreMap=predict(document) "]
8255[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9256[label="typeArguments\n <String,Double> "]
10257[label="typeArgumentList\n String,Double "]
11258[label="classType_lfno_classOrInterfaceType\n String "]
11259[label="classType_lfno_classOrInterfaceType\n Double "]
8260[label="variableDeclarator\n scoreMap=predict(document) "]
9261[label="variableDeclaratorId\n scoreMap "]
9262[label="methodInvocation_lfno_primary\n predict(document) "]
10263[label="methodName\n predict "]
10264[label="expressionName\n document "]
6265[label="returnStatement\n returnCollectionUtility.max(scoreMap); "]
7266[label="methodInvocation_lfno_primary\n CollectionUtility.max(scoreMap) "]
8267[label="typeName\n CollectionUtility "]
8268[label="expressionName\n scoreMap "]
3269[label="methodDeclaration\n @Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);} "]
4270[label="markerAnnotation\n @Override "]
5271[label="typeName\n Override "]
4272[label="methodModifier\n public "]
4273[label="methodHeader\n voidtrain(StringfolderPath,StringcharsetName)throwsIOException "]
5274[label="result\n void "]
5275[label="methodDeclarator\n train(StringfolderPath,StringcharsetName) "]
6276[label="formalParameterList\n StringfolderPath,StringcharsetName "]
7277[label="formalParameter\n StringfolderPath "]
8278[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8279[label="variableDeclaratorId\n folderPath "]
7280[label="formalParameter\n StringcharsetName "]
8281[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8282[label="variableDeclaratorId\n charsetName "]
5283[label="throws_\n throwsIOException "]
6284[label="classType\n IOException "]
4285[label="block\n {IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);} "]
5286[label="blockStatements\n IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet); "]
6287[label="localVariableDeclarationStatement\n IDataSetdataSet=newMemoryDataSet(); "]
7288[label="localVariableDeclaration\n IDataSetdataSet=newMemoryDataSet() "]
8289[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
8290[label="variableDeclarator\n dataSet=newMemoryDataSet() "]
9291[label="variableDeclaratorId\n dataSet "]
9292[label="classInstanceCreationExpression_lfno_primary\n newMemoryDataSet() "]
6293[label="expressionStatement\n dataSet.load(folderPath,charsetName); "]
7294[label="methodInvocation\n dataSet.load(folderPath,charsetName) "]
8295[label="typeName\n dataSet "]
8296[label="argumentList\n folderPath,charsetName "]
9297[label="expressionName\n folderPath "]
9298[label="expressionName\n charsetName "]
6299[label="expressionStatement\n train(dataSet); "]
7300[label="methodInvocation\n train(dataSet) "]
8301[label="methodName\n train "]
8302[label="expressionName\n dataSet "]
3303[label="methodDeclaration\n @Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);} "]
4304[label="markerAnnotation\n @Override "]
5305[label="typeName\n Override "]
4306[label="methodModifier\n public "]
4307[label="methodHeader\n voidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException "]
5308[label="result\n void "]
5309[label="methodDeclarator\n train(Map<String,String[]>trainingDataSet) "]
6310[label="formalParameter\n Map<String,String[]>trainingDataSet "]
7311[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String[]> "]
8312[label="typeArguments\n <String,String[]> "]
9313[label="typeArgumentList\n String,String[] "]
10314[label="classType_lfno_classOrInterfaceType\n String "]
10315[label="arrayType\n String[] "]
11316[label="classType_lfno_classOrInterfaceType\n String "]
11317[label="dims\n [] "]
7318[label="variableDeclaratorId\n trainingDataSet "]
5319[label="throws_\n throwsIllegalArgumentException "]
6320[label="classType\n IllegalArgumentException "]
4321[label="block\n {IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);} "]
5322[label="blockStatements\n IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet); "]
6323[label="localVariableDeclarationStatement\n IDataSetdataSet=newMemoryDataSet(); "]
7324[label="localVariableDeclaration\n IDataSetdataSet=newMemoryDataSet() "]
8325[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
8326[label="variableDeclarator\n dataSet=newMemoryDataSet() "]
9327[label="variableDeclaratorId\n dataSet "]
9328[label="classInstanceCreationExpression_lfno_primary\n newMemoryDataSet() "]
6329[label="expressionStatement\n logger.start(\"正在构造训练数据集...\"); "]
7330[label="methodInvocation\n logger.start(\"正在构造训练数据集...\") "]
8331[label="typeName\n logger "]
8332[label="literal\n \"正在构造训练数据集...\" "]
6333[label="localVariableDeclarationStatement\n inttotal=trainingDataSet.size(); "]
7334[label="localVariableDeclaration\n inttotal=trainingDataSet.size() "]
8335[label="integralType\n int "]
8336[label="variableDeclarator\n total=trainingDataSet.size() "]
9337[label="variableDeclaratorId\n total "]
9338[label="methodInvocation_lfno_primary\n trainingDataSet.size() "]
10339[label="typeName\n trainingDataSet "]
6340[label="localVariableDeclarationStatement\n intcur=0; "]
7341[label="localVariableDeclaration\n intcur=0 "]
8342[label="integralType\n int "]
8343[label="variableDeclarator\n cur=0 "]
9344[label="variableDeclaratorId\n cur "]
9345[label="literal\n 0 "]
6346[label="enhancedForStatement\n for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));} "]
7347[label="unannClassOrInterfaceType\n Map.Entry<String,String[]> "]
8348[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
8349[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String[]> "]
9350[label="typeArguments\n <String,String[]> "]
10351[label="typeArgumentList\n String,String[] "]
11352[label="classType_lfno_classOrInterfaceType\n String "]
11353[label="arrayType\n String[] "]
12354[label="classType_lfno_classOrInterfaceType\n String "]
12355[label="dims\n [] "]
7356[label="variableDeclaratorId\n entry "]
7357[label="methodInvocation_lfno_primary\n trainingDataSet.entrySet() "]
8358[label="typeName\n trainingDataSet "]
7359[label="block\n {Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));} "]
8360[label="blockStatements\n Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)); "]
9361[label="localVariableDeclarationStatement\n Stringcategory=entry.getKey(); "]
10362[label="localVariableDeclaration\n Stringcategory=entry.getKey() "]
11363[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
11364[label="variableDeclarator\n category=entry.getKey() "]
12365[label="variableDeclaratorId\n category "]
12366[label="methodInvocation_lfno_primary\n entry.getKey() "]
13367[label="typeName\n entry "]
9368[label="expressionStatement\n logger.out(\"[%s]...\",category); "]
10369[label="methodInvocation\n logger.out(\"[%s]...\",category) "]
11370[label="typeName\n logger "]
11371[label="argumentList\n \"[%s]...\",category "]
12372[label="literal\n \"[%s]...\" "]
12373[label="expressionName\n category "]
9374[label="enhancedForStatement\n for(Stringdoc:entry.getValue()){dataSet.add(category,doc);} "]
10375[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
10376[label="variableDeclaratorId\n doc "]
10377[label="methodInvocation_lfno_primary\n entry.getValue() "]
11378[label="typeName\n entry "]
10379[label="block\n {dataSet.add(category,doc);} "]
11380[label="expressionStatement\n dataSet.add(category,doc); "]
12381[label="methodInvocation\n dataSet.add(category,doc) "]
13382[label="typeName\n dataSet "]
13383[label="argumentList\n category,doc "]
14384[label="expressionName\n category "]
14385[label="expressionName\n doc "]
9386[label="expressionStatement\n ++cur; "]
10387[label="preIncrementExpression\n ++cur "]
11388[label="expressionName\n cur "]
9389[label="expressionStatement\n logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)); "]
10390[label="methodInvocation\n logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)) "]
11391[label="typeName\n logger "]
11392[label="argumentList\n \"%.2f%%...\",MathUtility.percentage(cur,total) "]
12393[label="literal\n \"%.2f%%...\" "]
12394[label="methodInvocation_lfno_primary\n MathUtility.percentage(cur,total) "]
13395[label="typeName\n MathUtility "]
13396[label="argumentList\n cur,total "]
14397[label="expressionName\n cur "]
14398[label="expressionName\n total "]
6399[label="expressionStatement\n logger.finish(\" 加载完毕\n\"); "]
7400[label="methodInvocation\n logger.finish(\" 加载完毕\n\") "]
8401[label="typeName\n logger "]
8402[label="literal\n \" 加载完毕\n\" "]
6403[label="expressionStatement\n train(dataSet); "]
7404[label="methodInvocation\n train(dataSet) "]
8405[label="methodName\n train "]
8406[label="expressionName\n dataSet "]
3407[label="methodDeclaration\n @Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");} "]
4408[label="markerAnnotation\n @Override "]
5409[label="typeName\n Override "]
4410[label="methodModifier\n public "]
4411[label="methodHeader\n voidtrain(StringfolderPath)throwsIOException "]
5412[label="result\n void "]
5413[label="methodDeclarator\n train(StringfolderPath) "]
6414[label="formalParameter\n StringfolderPath "]
7415[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
7416[label="variableDeclaratorId\n folderPath "]
5417[label="throws_\n throwsIOException "]
6418[label="classType\n IOException "]
4419[label="block\n {train(folderPath,\"UTF-8\");} "]
5420[label="expressionStatement\n train(folderPath,\"UTF-8\"); "]
6421[label="methodInvocation\n train(folderPath,\"UTF-8\") "]
7422[label="methodName\n train "]
7423[label="argumentList\n folderPath,\"UTF-8\" "]
8424[label="expressionName\n folderPath "]
8425[label="literal\n \"UTF-8\" "]
3426[label="methodDeclaration\n @OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;} "]
4427[label="markerAnnotation\n @Override "]
5428[label="typeName\n Override "]
4429[label="methodModifier\n public "]
4430[label="methodHeader\n Map<String,Double>predict(Documentdocument) "]
5431[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
6432[label="typeArguments\n <String,Double> "]
7433[label="typeArgumentList\n String,Double "]
8434[label="classType_lfno_classOrInterfaceType\n String "]
8435[label="classType_lfno_classOrInterfaceType\n Double "]
5436[label="methodDeclarator\n predict(Documentdocument) "]
6437[label="formalParameter\n Documentdocument "]
7438[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7439[label="variableDeclaratorId\n document "]
4440[label="block\n {AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;} "]
5441[label="blockStatements\n AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap; "]
6442[label="localVariableDeclarationStatement\n AbstractModelmodel=getModel(); "]
7443[label="localVariableDeclaration\n AbstractModelmodel=getModel() "]
8444[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractModel "]
8445[label="variableDeclarator\n model=getModel() "]
9446[label="variableDeclaratorId\n model "]
9447[label="methodInvocation_lfno_primary\n getModel() "]
10448[label="methodName\n getModel "]
6449[label="ifThenStatement\n if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
7450[label="equalityExpression\n model==null "]
8451[label="expressionName\n model "]
8452[label="literal\n null "]
7453[label="block\n {thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
8454[label="throwStatement\n thrownewIllegalStateException(\"未训练模型！无法执行预测！\"); "]
9455[label="classInstanceCreationExpression_lfno_primary\n newIllegalStateException(\"未训练模型！无法执行预测！\") "]
10456[label="literal\n \"未训练模型！无法执行预测！\" "]
6457[label="ifThenStatement\n if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");} "]
7458[label="equalityExpression\n document==null "]
8459[label="expressionName\n document "]
8460[label="literal\n null "]
7461[label="block\n {thrownewIllegalArgumentException(\"参数 text == null\");} "]
8462[label="throwStatement\n thrownewIllegalArgumentException(\"参数 text == null\"); "]
9463[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"参数 text == null\") "]
10464[label="literal\n \"参数 text == null\" "]
6465[label="localVariableDeclarationStatement\n double[]probs=categorize(document); "]
7466[label="localVariableDeclaration\n double[]probs=categorize(document) "]
8467[label="unannArrayType\n double[] "]
9468[label="floatingPointType\n double "]
9469[label="dims\n [] "]
8470[label="variableDeclarator\n probs=categorize(document) "]
9471[label="variableDeclaratorId\n probs "]
9472[label="methodInvocation_lfno_primary\n categorize(document) "]
10473[label="methodName\n categorize "]
10474[label="expressionName\n document "]
6475[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=newTreeMap<String,Double>(); "]
7476[label="localVariableDeclaration\n Map<String,Double>scoreMap=newTreeMap<String,Double>() "]
8477[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9478[label="typeArguments\n <String,Double> "]
10479[label="typeArgumentList\n String,Double "]
11480[label="classType_lfno_classOrInterfaceType\n String "]
11481[label="classType_lfno_classOrInterfaceType\n Double "]
8482[label="variableDeclarator\n scoreMap=newTreeMap<String,Double>() "]
9483[label="variableDeclaratorId\n scoreMap "]
9484[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,Double>() "]
10485[label="typeArguments\n <String,Double> "]
11486[label="typeArgumentList\n String,Double "]
12487[label="classType_lfno_classOrInterfaceType\n String "]
12488[label="classType_lfno_classOrInterfaceType\n Double "]
6489[label="basicForStatement\n for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);} "]
7490[label="localVariableDeclaration\n inti=0 "]
8491[label="integralType\n int "]
8492[label="variableDeclarator\n i=0 "]
9493[label="variableDeclaratorId\n i "]
9494[label="literal\n 0 "]
7495[label="relationalExpression\n i<probs.length "]
8496[label="expressionName\n i "]
8497[label="expressionName\n probs.length "]
9498[label="ambiguousName\n probs "]
7499[label="postIncrementExpression\n i++ "]
8500[label="expressionName\n i "]
7501[label="block\n {scoreMap.put(model.catalog[i],probs[i]);} "]
8502[label="expressionStatement\n scoreMap.put(model.catalog[i],probs[i]); "]
9503[label="methodInvocation\n scoreMap.put(model.catalog[i],probs[i]) "]
10504[label="typeName\n scoreMap "]
10505[label="argumentList\n model.catalog[i],probs[i] "]
11506[label="arrayAccess_lfno_primary\n model.catalog[i] "]
12507[label="expressionName\n model.catalog "]
13508[label="ambiguousName\n model "]
12509[label="expressionName\n i "]
11510[label="arrayAccess_lfno_primary\n probs[i] "]
12511[label="expressionName\n probs "]
12512[label="expressionName\n i "]
6513[label="returnStatement\n returnscoreMap; "]
7514[label="expressionName\n scoreMap "]
3515[label="methodDeclaration\n @Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;} "]
4516[label="markerAnnotation\n @Override "]
5517[label="typeName\n Override "]
4518[label="methodModifier\n public "]
4519[label="methodHeader\n intlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException "]
5520[label="integralType\n int "]
5521[label="methodDeclarator\n label(Documentdocument) "]
6522[label="formalParameter\n Documentdocument "]
7523[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7524[label="variableDeclaratorId\n document "]
5525[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6526[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7527[label="classType\n IllegalArgumentException "]
7528[label="classType\n IllegalStateException "]
4529[label="block\n {AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;} "]
5530[label="blockStatements\n AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest; "]
6531[label="localVariableDeclarationStatement\n AbstractModelmodel=getModel(); "]
7532[label="localVariableDeclaration\n AbstractModelmodel=getModel() "]
8533[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractModel "]
8534[label="variableDeclarator\n model=getModel() "]
9535[label="variableDeclaratorId\n model "]
9536[label="methodInvocation_lfno_primary\n getModel() "]
10537[label="methodName\n getModel "]
6538[label="ifThenStatement\n if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
7539[label="equalityExpression\n model==null "]
8540[label="expressionName\n model "]
8541[label="literal\n null "]
7542[label="block\n {thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
8543[label="throwStatement\n thrownewIllegalStateException(\"未训练模型！无法执行预测！\"); "]
9544[label="classInstanceCreationExpression_lfno_primary\n newIllegalStateException(\"未训练模型！无法执行预测！\") "]
10545[label="literal\n \"未训练模型！无法执行预测！\" "]
6546[label="ifThenStatement\n if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");} "]
7547[label="equalityExpression\n document==null "]
8548[label="expressionName\n document "]
8549[label="literal\n null "]
7550[label="block\n {thrownewIllegalArgumentException(\"参数 text == null\");} "]
8551[label="throwStatement\n thrownewIllegalArgumentException(\"参数 text == null\"); "]
9552[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"参数 text == null\") "]
10553[label="literal\n \"参数 text == null\" "]
6554[label="localVariableDeclarationStatement\n double[]probs=categorize(document); "]
7555[label="localVariableDeclaration\n double[]probs=categorize(document) "]
8556[label="unannArrayType\n double[] "]
9557[label="floatingPointType\n double "]
9558[label="dims\n [] "]
8559[label="variableDeclarator\n probs=categorize(document) "]
9560[label="variableDeclaratorId\n probs "]
9561[label="methodInvocation_lfno_primary\n categorize(document) "]
10562[label="methodName\n categorize "]
10563[label="expressionName\n document "]
6564[label="localVariableDeclarationStatement\n doublemax=Double.NEGATIVE_INFINITY; "]
7565[label="localVariableDeclaration\n doublemax=Double.NEGATIVE_INFINITY "]
8566[label="floatingPointType\n double "]
8567[label="variableDeclarator\n max=Double.NEGATIVE_INFINITY "]
9568[label="variableDeclaratorId\n max "]
9569[label="expressionName\n Double.NEGATIVE_INFINITY "]
10570[label="ambiguousName\n Double "]
6571[label="localVariableDeclarationStatement\n intbest=-1; "]
7572[label="localVariableDeclaration\n intbest=-1 "]
8573[label="integralType\n int "]
8574[label="variableDeclarator\n best=-1 "]
9575[label="variableDeclaratorId\n best "]
9576[label="unaryExpression\n -1 "]
10577[label="literal\n 1 "]
6578[label="basicForStatement\n for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}} "]
7579[label="localVariableDeclaration\n inti=0 "]
8580[label="integralType\n int "]
8581[label="variableDeclarator\n i=0 "]
9582[label="variableDeclaratorId\n i "]
9583[label="literal\n 0 "]
7584[label="relationalExpression\n i<probs.length "]
8585[label="expressionName\n i "]
8586[label="expressionName\n probs.length "]
9587[label="ambiguousName\n probs "]
7588[label="postIncrementExpression\n i++ "]
8589[label="expressionName\n i "]
7590[label="block\n {if(probs[i]>max){max=probs[i];best=i;}} "]
8591[label="ifThenStatement\n if(probs[i]>max){max=probs[i];best=i;} "]
9592[label="relationalExpression\n probs[i]>max "]
10593[label="arrayAccess_lfno_primary\n probs[i] "]
11594[label="expressionName\n probs "]
11595[label="expressionName\n i "]
10596[label="expressionName\n max "]
9597[label="block\n {max=probs[i];best=i;} "]
10598[label="blockStatements\n max=probs[i];best=i; "]
11599[label="expressionStatement\n max=probs[i]; "]
12600[label="assignment\n max=probs[i] "]
13601[label="expressionName\n max "]
13602[label="assignmentOperator\n = "]
13603[label="arrayAccess_lfno_primary\n probs[i] "]
14604[label="expressionName\n probs "]
14605[label="expressionName\n i "]
11606[label="expressionStatement\n best=i; "]
12607[label="assignment\n best=i "]
13608[label="expressionName\n best "]
13609[label="assignmentOperator\n = "]
13610[label="expressionName\n i "]
6611[label="returnStatement\n returnbest; "]
7612[label="expressionName\n best "]
0613[label="compilationUnit\n packagecom.hankcs.hanlp.mining.word2vec;importjava.io.IOException;importjava.util.Scanner;publicabstractclassAbstractClosestVectors{staticfinalintN=40;protectedScannerscanner;protectedfinalVectorsReadervectorsReader;protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);}protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;}protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;}protectedabstractResultgetTargetVector();finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}}protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}}}<EOF> "]
1614[label="packageDeclaration\n packagecom.hankcs.hanlp.mining.word2vec; "]
2615[label="packageName\n com.hankcs.hanlp.mining.word2vec "]
3616[label="packageName\n com.hankcs.hanlp.mining "]
4617[label="packageName\n com.hankcs.hanlp "]
5618[label="packageName\n com.hankcs "]
6619[label="packageName\n com "]
1620[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
2621[label="typeName\n java.io.IOException "]
3622[label="packageOrTypeName\n java.io "]
4623[label="packageOrTypeName\n java "]
1624[label="singleTypeImportDeclaration\n importjava.util.Scanner; "]
2625[label="typeName\n java.util.Scanner "]
3626[label="packageOrTypeName\n java.util "]
4627[label="packageOrTypeName\n java "]
1628[label="normalClassDeclaration\n publicabstractclassAbstractClosestVectors{staticfinalintN=40;protectedScannerscanner;protectedfinalVectorsReadervectorsReader;protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);}protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;}protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;}protectedabstractResultgetTargetVector();finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}}protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}}} "]
2629[label="classModifier\n public "]
2630[label="classModifier\n abstract "]
2631[label="classBody\n {staticfinalintN=40;protectedScannerscanner;protectedfinalVectorsReadervectorsReader;protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);}protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;}protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;}protectedabstractResultgetTargetVector();finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}}protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}}} "]
3632[label="fieldDeclaration\n staticfinalintN=40; "]
4633[label="fieldModifier\n static "]
4634[label="fieldModifier\n final "]
4635[label="integralType\n int "]
4636[label="variableDeclarator\n N=40 "]
5637[label="variableDeclaratorId\n N "]
5638[label="literal\n 40 "]
3639[label="fieldDeclaration\n protectedScannerscanner; "]
4640[label="fieldModifier\n protected "]
4641[label="unannClassType_lfno_unannClassOrInterfaceType\n Scanner "]
4642[label="variableDeclaratorId\n scanner "]
3643[label="fieldDeclaration\n protectedfinalVectorsReadervectorsReader; "]
4644[label="fieldModifier\n protected "]
4645[label="fieldModifier\n final "]
4646[label="unannClassType_lfno_unannClassOrInterfaceType\n VectorsReader "]
4647[label="variableDeclaratorId\n vectorsReader "]
3648[label="constructorDeclaration\n protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);} "]
4649[label="constructorModifier\n protected "]
4650[label="constructorDeclarator\n AbstractClosestVectors(Stringfile) "]
5651[label="simpleTypeName\n AbstractClosestVectors "]
5652[label="formalParameter\n Stringfile "]
6653[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
6654[label="variableDeclaratorId\n file "]
4655[label="constructorBody\n {vectorsReader=newVectorsReader(file);} "]
5656[label="expressionStatement\n vectorsReader=newVectorsReader(file); "]
6657[label="assignment\n vectorsReader=newVectorsReader(file) "]
7658[label="expressionName\n vectorsReader "]
7659[label="assignmentOperator\n = "]
7660[label="classInstanceCreationExpression_lfno_primary\n newVectorsReader(file) "]
8661[label="expressionName\n file "]
3662[label="methodDeclaration\n protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;} "]
4663[label="methodModifier\n protected "]
4664[label="methodHeader\n String[]nextWords(intn,Stringmsg) "]
5665[label="unannArrayType\n String[] "]
6666[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
6667[label="dims\n [] "]
5668[label="methodDeclarator\n nextWords(intn,Stringmsg) "]
6669[label="formalParameterList\n intn,Stringmsg "]
7670[label="formalParameter\n intn "]
8671[label="integralType\n int "]
8672[label="variableDeclaratorId\n n "]
7673[label="formalParameter\n Stringmsg "]
8674[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8675[label="variableDeclaratorId\n msg "]
4676[label="block\n {System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;} "]
5677[label="blockStatements\n System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords; "]
6678[label="expressionStatement\n System.out.println(msg+\" ('q' to break): \"); "]
7679[label="methodInvocation\n System.out.println(msg+\" ('q' to break): \") "]
8680[label="typeName\n System.out "]
9681[label="packageOrTypeName\n System "]
8682[label="additiveExpression\n msg+\" ('q' to break): \" "]
9683[label="expressionName\n msg "]
9684[label="literal\n \" ('q' to break): \" "]
6685[label="localVariableDeclarationStatement\n String[]words=newString[n]; "]
7686[label="localVariableDeclaration\n String[]words=newString[n] "]
8687[label="unannArrayType\n String[] "]
9688[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
9689[label="dims\n [] "]
8690[label="variableDeclarator\n words=newString[n] "]
9691[label="variableDeclaratorId\n words "]
9692[label="arrayCreationExpression\n newString[n] "]
10693[label="classType_lfno_classOrInterfaceType\n String "]
10694[label="dimExpr\n [n] "]
11695[label="expressionName\n n "]
6696[label="basicForStatement\n for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;} "]
7697[label="localVariableDeclaration\n inti=0 "]
8698[label="integralType\n int "]
8699[label="variableDeclarator\n i=0 "]
9700[label="variableDeclaratorId\n i "]
9701[label="literal\n 0 "]
7702[label="relationalExpression\n i<n "]
8703[label="expressionName\n i "]
8704[label="expressionName\n n "]
7705[label="postIncrementExpression\n i++ "]
8706[label="expressionName\n i "]
7707[label="block\n {Stringword=nextWord();if(word==null)returnnull;words[i]=word;} "]
8708[label="blockStatements\n Stringword=nextWord();if(word==null)returnnull;words[i]=word; "]
9709[label="localVariableDeclarationStatement\n Stringword=nextWord(); "]
10710[label="localVariableDeclaration\n Stringword=nextWord() "]
11711[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
11712[label="variableDeclarator\n word=nextWord() "]
12713[label="variableDeclaratorId\n word "]
12714[label="methodInvocation_lfno_primary\n nextWord() "]
13715[label="methodName\n nextWord "]
9716[label="ifThenStatement\n if(word==null)returnnull; "]
10717[label="equalityExpression\n word==null "]
11718[label="expressionName\n word "]
11719[label="literal\n null "]
10720[label="returnStatement\n returnnull; "]
11721[label="literal\n null "]
9722[label="expressionStatement\n words[i]=word; "]
10723[label="assignment\n words[i]=word "]
11724[label="arrayAccess\n words[i] "]
12725[label="expressionName\n words "]
12726[label="expressionName\n i "]
11727[label="assignmentOperator\n = "]
11728[label="expressionName\n word "]
6729[label="returnStatement\n returnwords; "]
7730[label="expressionName\n words "]
3731[label="methodDeclaration\n protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;} "]
4732[label="methodModifier\n protected "]
4733[label="methodHeader\n StringnextWord() "]
5734[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
5735[label="methodDeclarator\n nextWord() "]
4736[label="block\n {Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;} "]
5737[label="blockStatements\n Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word; "]
6738[label="localVariableDeclarationStatement\n Stringword=scanner.next(); "]
7739[label="localVariableDeclaration\n Stringword=scanner.next() "]
8740[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8741[label="variableDeclarator\n word=scanner.next() "]
9742[label="variableDeclaratorId\n word "]
9743[label="methodInvocation_lfno_primary\n scanner.next() "]
10744[label="typeName\n scanner "]
6745[label="returnStatement\n returnword==null||word.length()==0||word.equals(\"q\")?null:word; "]
7746[label="conditionalExpression\n word==null||word.length()==0||word.equals(\"q\")?null:word "]
8747[label="conditionalOrExpression\n word==null||word.length()==0||word.equals(\"q\") "]
9748[label="conditionalOrExpression\n word==null||word.length()==0 "]
10749[label="equalityExpression\n word==null "]
11750[label="expressionName\n word "]
11751[label="literal\n null "]
10752[label="equalityExpression\n word.length()==0 "]
11753[label="methodInvocation_lfno_primary\n word.length() "]
12754[label="typeName\n word "]
11755[label="literal\n 0 "]
9756[label="methodInvocation_lfno_primary\n word.equals(\"q\") "]
10757[label="typeName\n word "]
10758[label="literal\n \"q\" "]
8759[label="literal\n null "]
8760[label="expressionName\n word "]
3761[label="methodDeclaration\n protectedabstractResultgetTargetVector(); "]
4762[label="methodModifier\n protected "]
4763[label="methodModifier\n abstract "]
4764[label="methodHeader\n ResultgetTargetVector() "]
5765[label="unannClassType_lfno_unannClassOrInterfaceType\n Result "]
5766[label="methodDeclarator\n getTargetVector() "]
4767[label="methodBody\n ; "]
3768[label="methodDeclaration\n finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}} "]
4769[label="methodModifier\n final "]
4770[label="methodModifier\n protected "]
4771[label="methodHeader\n voidexecute()throwsIOException "]
5772[label="result\n void "]
5773[label="methodDeclarator\n execute() "]
5774[label="throws_\n throwsIOException "]
6775[label="classType\n IOException "]
4776[label="block\n {vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}} "]
5777[label="blockStatements\n vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();} "]
6778[label="expressionStatement\n vectorsReader.readVectorFile(); "]
7779[label="methodInvocation\n vectorsReader.readVectorFile() "]
8780[label="typeName\n vectorsReader "]
6781[label="localVariableDeclarationStatement\n finalintwords=vectorsReader.getNumWords(); "]
7782[label="localVariableDeclaration\n finalintwords=vectorsReader.getNumWords() "]
8783[label="variableModifier\n final "]
8784[label="integralType\n int "]
8785[label="variableDeclarator\n words=vectorsReader.getNumWords() "]
9786[label="variableDeclaratorId\n words "]
9787[label="methodInvocation_lfno_primary\n vectorsReader.getNumWords() "]
10788[label="typeName\n vectorsReader "]
6789[label="localVariableDeclarationStatement\n finalintsize=vectorsReader.getSize(); "]
7790[label="localVariableDeclaration\n finalintsize=vectorsReader.getSize() "]
8791[label="variableModifier\n final "]
8792[label="integralType\n int "]
8793[label="variableDeclarator\n size=vectorsReader.getSize() "]
9794[label="variableDeclaratorId\n size "]
9795[label="methodInvocation_lfno_primary\n vectorsReader.getSize() "]
10796[label="typeName\n vectorsReader "]
6797[label="tryStatement\n try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();} "]
7798[label="block\n {scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}} "]
8799[label="blockStatements\n scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);} "]
9800[label="expressionStatement\n scanner=newScanner(System.in); "]
10801[label="assignment\n scanner=newScanner(System.in) "]
11802[label="expressionName\n scanner "]
11803[label="assignmentOperator\n = "]
11804[label="classInstanceCreationExpression_lfno_primary\n newScanner(System.in) "]
12805[label="expressionName\n System.in "]
13806[label="ambiguousName\n System "]
9807[label="localVariableDeclarationStatement\n Resultresult=null; "]
10808[label="localVariableDeclaration\n Resultresult=null "]
11809[label="unannClassType_lfno_unannClassOrInterfaceType\n Result "]
11810[label="variableDeclarator\n result=null "]
12811[label="variableDeclaratorId\n result "]
12812[label="literal\n null "]
9813[label="whileStatement\n while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);} "]
10814[label="equalityExpression\n (result=getTargetVector())!=null "]
11815[label="primaryNoNewArray_lfno_primary\n (result=getTargetVector()) "]
12816[label="assignment\n result=getTargetVector() "]
13817[label="expressionName\n result "]
13818[label="assignmentOperator\n = "]
13819[label="methodInvocation_lfno_primary\n getTargetVector() "]
14820[label="methodName\n getTargetVector "]
11821[label="literal\n null "]
10822[label="block\n {double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);} "]
11823[label="blockStatements\n double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]); "]
12824[label="localVariableDeclarationStatement\n double[]bestd=newdouble[N]; "]
13825[label="localVariableDeclaration\n double[]bestd=newdouble[N] "]
14826[label="unannArrayType\n double[] "]
15827[label="floatingPointType\n double "]
15828[label="dims\n [] "]
14829[label="variableDeclarator\n bestd=newdouble[N] "]
15830[label="variableDeclaratorId\n bestd "]
15831[label="arrayCreationExpression\n newdouble[N] "]
16832[label="floatingPointType\n double "]
16833[label="dimExpr\n [N] "]
17834[label="expressionName\n N "]
12835[label="localVariableDeclarationStatement\n String[]bestw=newString[N]; "]
13836[label="localVariableDeclaration\n String[]bestw=newString[N] "]
14837[label="unannArrayType\n String[] "]
15838[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
15839[label="dims\n [] "]
14840[label="variableDeclarator\n bestw=newString[N] "]
15841[label="variableDeclaratorId\n bestw "]
15842[label="arrayCreationExpression\n newString[N] "]
16843[label="classType_lfno_classOrInterfaceType\n String "]
16844[label="dimExpr\n [N] "]
17845[label="expressionName\n N "]
12846[label="labeledStatement\n next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}} "]
13847[label="basicForStatement\n for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}} "]
14848[label="localVariableDeclaration\n inti=0 "]
15849[label="integralType\n int "]
15850[label="variableDeclarator\n i=0 "]
16851[label="variableDeclaratorId\n i "]
16852[label="literal\n 0 "]
14853[label="relationalExpression\n i<words "]
15854[label="expressionName\n i "]
15855[label="expressionName\n words "]
14856[label="postIncrementExpression\n i++ "]
15857[label="expressionName\n i "]
14858[label="block\n {for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}} "]
15859[label="blockStatements\n for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}} "]
16860[label="enhancedForStatement\n for(intbi:result.bi){if(i==bi)continuenext_word;} "]
17861[label="integralType\n int "]
17862[label="variableDeclaratorId\n bi "]
17863[label="expressionName\n result.bi "]
18864[label="ambiguousName\n result "]
17865[label="block\n {if(i==bi)continuenext_word;} "]
18866[label="ifThenStatement\n if(i==bi)continuenext_word; "]
19867[label="equalityExpression\n i==bi "]
20868[label="expressionName\n i "]
20869[label="expressionName\n bi "]
19870[label="continueStatement\n continuenext_word; "]
16871[label="localVariableDeclarationStatement\n doubledist=0; "]
17872[label="localVariableDeclaration\n doubledist=0 "]
18873[label="floatingPointType\n double "]
18874[label="variableDeclarator\n dist=0 "]
19875[label="variableDeclaratorId\n dist "]
19876[label="literal\n 0 "]
16877[label="basicForStatement\n for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);} "]
17878[label="localVariableDeclaration\n intj=0 "]
18879[label="integralType\n int "]
18880[label="variableDeclarator\n j=0 "]
19881[label="variableDeclaratorId\n j "]
19882[label="literal\n 0 "]
17883[label="relationalExpression\n j<size "]
18884[label="expressionName\n j "]
18885[label="expressionName\n size "]
17886[label="postIncrementExpression\n j++ "]
18887[label="expressionName\n j "]
17888[label="block\n {dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);} "]
18889[label="expressionStatement\n dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j); "]
19890[label="assignment\n dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j) "]
20891[label="expressionName\n dist "]
20892[label="assignmentOperator\n += "]
20893[label="multiplicativeExpression\n result.vec[j]*vectorsReader.getMatrixElement(i,j) "]
21894[label="arrayAccess_lfno_primary\n result.vec[j] "]
22895[label="expressionName\n result.vec "]
23896[label="ambiguousName\n result "]
22897[label="expressionName\n j "]
21898[label="methodInvocation_lfno_primary\n vectorsReader.getMatrixElement(i,j) "]
22899[label="typeName\n vectorsReader "]
22900[label="argumentList\n i,j "]
23901[label="expressionName\n i "]
23902[label="expressionName\n j "]
16903[label="basicForStatement\n for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}} "]
17904[label="localVariableDeclaration\n intj=0 "]
18905[label="integralType\n int "]
18906[label="variableDeclarator\n j=0 "]
19907[label="variableDeclaratorId\n j "]
19908[label="literal\n 0 "]
17909[label="relationalExpression\n j<N "]
18910[label="expressionName\n j "]
18911[label="expressionName\n N "]
17912[label="postIncrementExpression\n j++ "]
18913[label="expressionName\n j "]
17914[label="block\n {if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}} "]
18915[label="ifThenStatement\n if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;} "]
19916[label="relationalExpression\n dist>bestd[j] "]
20917[label="expressionName\n dist "]
20918[label="arrayAccess_lfno_primary\n bestd[j] "]
21919[label="expressionName\n bestd "]
21920[label="expressionName\n j "]
19921[label="block\n {for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;} "]
20922[label="blockStatements\n for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break; "]
21923[label="basicForStatement\n for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];} "]
22924[label="localVariableDeclaration\n intk=N-1 "]
23925[label="integralType\n int "]
23926[label="variableDeclarator\n k=N-1 "]
24927[label="variableDeclaratorId\n k "]
24928[label="additiveExpression\n N-1 "]
25929[label="expressionName\n N "]
25930[label="literal\n 1 "]
22931[label="relationalExpression\n k>j "]
23932[label="expressionName\n k "]
23933[label="expressionName\n j "]
22934[label="postDecrementExpression\n k-- "]
23935[label="expressionName\n k "]
22936[label="block\n {bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];} "]
23937[label="blockStatements\n bestd[k]=bestd[k-1];bestw[k]=bestw[k-1]; "]
24938[label="expressionStatement\n bestd[k]=bestd[k-1]; "]
25939[label="assignment\n bestd[k]=bestd[k-1] "]
26940[label="arrayAccess\n bestd[k] "]
27941[label="expressionName\n bestd "]
27942[label="expressionName\n k "]
26943[label="assignmentOperator\n = "]
26944[label="arrayAccess_lfno_primary\n bestd[k-1] "]
27945[label="expressionName\n bestd "]
27946[label="additiveExpression\n k-1 "]
28947[label="expressionName\n k "]
28948[label="literal\n 1 "]
24949[label="expressionStatement\n bestw[k]=bestw[k-1]; "]
25950[label="assignment\n bestw[k]=bestw[k-1] "]
26951[label="arrayAccess\n bestw[k] "]
27952[label="expressionName\n bestw "]
27953[label="expressionName\n k "]
26954[label="assignmentOperator\n = "]
26955[label="arrayAccess_lfno_primary\n bestw[k-1] "]
27956[label="expressionName\n bestw "]
27957[label="additiveExpression\n k-1 "]
28958[label="expressionName\n k "]
28959[label="literal\n 1 "]
21960[label="expressionStatement\n bestd[j]=dist; "]
22961[label="assignment\n bestd[j]=dist "]
23962[label="arrayAccess\n bestd[j] "]
24963[label="expressionName\n bestd "]
24964[label="expressionName\n j "]
23965[label="assignmentOperator\n = "]
23966[label="expressionName\n dist "]
21967[label="expressionStatement\n bestw[j]=vectorsReader.getWord(i); "]
22968[label="assignment\n bestw[j]=vectorsReader.getWord(i) "]
23969[label="arrayAccess\n bestw[j] "]
24970[label="expressionName\n bestw "]
24971[label="expressionName\n j "]
23972[label="assignmentOperator\n = "]
23973[label="methodInvocation_lfno_primary\n vectorsReader.getWord(i) "]
24974[label="typeName\n vectorsReader "]
24975[label="expressionName\n i "]
21976[label="breakStatement\n break; "]
12977[label="expressionStatement\n System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\"); "]
13978[label="methodInvocation\n System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\") "]
14979[label="typeName\n System.out "]
15980[label="packageOrTypeName\n System "]
14981[label="literal\n \"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\" "]
12982[label="basicForStatement\n for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]); "]
13983[label="localVariableDeclaration\n intj=0 "]
14984[label="integralType\n int "]
14985[label="variableDeclarator\n j=0 "]
15986[label="variableDeclaratorId\n j "]
15987[label="literal\n 0 "]
13988[label="relationalExpression\n j<N "]
14989[label="expressionName\n j "]
14990[label="expressionName\n N "]
13991[label="postIncrementExpression\n j++ "]
14992[label="expressionName\n j "]
13993[label="expressionStatement\n System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]); "]
14994[label="methodInvocation\n System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]) "]
15995[label="typeName\n System.out "]
16996[label="packageOrTypeName\n System "]
15997[label="argumentList\n \"%50s\t\t%f\n\",bestw[j],bestd[j] "]
16998[label="literal\n \"%50s\t\t%f\n\" "]
16999[label="arrayAccess_lfno_primary\n bestw[j] "]
171000[label="expressionName\n bestw "]
171001[label="expressionName\n j "]
161002[label="arrayAccess_lfno_primary\n bestd[j] "]
171003[label="expressionName\n bestd "]
171004[label="expressionName\n j "]
71005[label="finally_\n finally{scanner.close();} "]
81006[label="block\n {scanner.close();} "]
91007[label="expressionStatement\n scanner.close(); "]
101008[label="methodInvocation\n scanner.close() "]
111009[label="typeName\n scanner "]
31010[label="normalClassDeclaration\n protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}} "]
41011[label="classModifier\n protected "]
41012[label="classModifier\n static "]
41013[label="classBody\n {float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}} "]
51014[label="fieldDeclaration\n float[]vec; "]
61015[label="unannArrayType\n float[] "]
71016[label="floatingPointType\n float "]
71017[label="dims\n [] "]
61018[label="variableDeclaratorId\n vec "]
51019[label="fieldDeclaration\n int[]bi; "]
61020[label="unannArrayType\n int[] "]
71021[label="integralType\n int "]
71022[label="dims\n [] "]
61023[label="variableDeclaratorId\n bi "]
51024[label="constructorDeclaration\n publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;} "]
61025[label="constructorModifier\n public "]
61026[label="constructorDeclarator\n Result(float[]vec,int[]bi) "]
71027[label="simpleTypeName\n Result "]
71028[label="formalParameterList\n float[]vec,int[]bi "]
81029[label="formalParameter\n float[]vec "]
91030[label="unannArrayType\n float[] "]
101031[label="floatingPointType\n float "]
101032[label="dims\n [] "]
91033[label="variableDeclaratorId\n vec "]
81034[label="formalParameter\n int[]bi "]
91035[label="unannArrayType\n int[] "]
101036[label="integralType\n int "]
101037[label="dims\n [] "]
91038[label="variableDeclaratorId\n bi "]
61039[label="constructorBody\n {this.vec=vec;this.bi=bi;} "]
71040[label="blockStatements\n this.vec=vec;this.bi=bi; "]
81041[label="expressionStatement\n this.vec=vec; "]
91042[label="assignment\n this.vec=vec "]
101043[label="fieldAccess\n this.vec "]
111044[label="primaryNoNewArray_lfno_primary\n this "]
101045[label="assignmentOperator\n = "]
101046[label="expressionName\n vec "]
81047[label="expressionStatement\n this.bi=bi; "]
91048[label="assignment\n this.bi=bi "]
101049[label="fieldAccess\n this.bi "]
111050[label="primaryNoNewArray_lfno_primary\n this "]
101051[label="assignmentOperator\n = "]
101052[label="expressionName\n bi "]
01053[label="compilationUnit\n packagecom.hankcs.hanlp.classification.corpus;importcom.hankcs.hanlp.classification.models.AbstractModel;importcom.hankcs.hanlp.classification.tokenizers.BigramTokenizer;importcom.hankcs.hanlp.classification.tokenizers.HanLPTokenizer;importcom.hankcs.hanlp.classification.tokenizers.ITokenizer;importcom.hankcs.hanlp.classification.utilities.MathUtility;importcom.hankcs.hanlp.classification.utilities.TextProcessUtility;importjava.io.File;importjava.io.IOException;importjava.util.Map;importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger;publicabstractclassAbstractDataSetimplementsIDataSet{protectedITokenizertokenizer;protectedCatalogcatalog;protectedLexiconlexicon;protectedbooleantestingDataSet;publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;}publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();}publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;}publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);}publicITokenizergetTokenizer(){returntokenizer;}publicCataloggetCatalog(){returncatalog;}publicLexicongetLexicon(){returnlexicon;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);}@OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");}@OverridepublicbooleanisTestingDataSet(){returntestingDataSet;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;}@OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;}@OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;}}<EOF> "]
11054[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.corpus; "]
21055[label="packageName\n com.hankcs.hanlp.classification.corpus "]
31056[label="packageName\n com.hankcs.hanlp.classification "]
41057[label="packageName\n com.hankcs.hanlp "]
51058[label="packageName\n com.hankcs "]
61059[label="packageName\n com "]
11060[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.models.AbstractModel; "]
21061[label="typeName\n com.hankcs.hanlp.classification.models.AbstractModel "]
31062[label="packageOrTypeName\n com.hankcs.hanlp.classification.models "]
41063[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51064[label="packageOrTypeName\n com.hankcs.hanlp "]
61065[label="packageOrTypeName\n com.hankcs "]
71066[label="packageOrTypeName\n com "]
11067[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.BigramTokenizer; "]
21068[label="typeName\n com.hankcs.hanlp.classification.tokenizers.BigramTokenizer "]
31069[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
41070[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51071[label="packageOrTypeName\n com.hankcs.hanlp "]
61072[label="packageOrTypeName\n com.hankcs "]
71073[label="packageOrTypeName\n com "]
11074[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.HanLPTokenizer; "]
21075[label="typeName\n com.hankcs.hanlp.classification.tokenizers.HanLPTokenizer "]
31076[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
41077[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51078[label="packageOrTypeName\n com.hankcs.hanlp "]
61079[label="packageOrTypeName\n com.hankcs "]
71080[label="packageOrTypeName\n com "]
11081[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.ITokenizer; "]
21082[label="typeName\n com.hankcs.hanlp.classification.tokenizers.ITokenizer "]
31083[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
41084[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51085[label="packageOrTypeName\n com.hankcs.hanlp "]
61086[label="packageOrTypeName\n com.hankcs "]
71087[label="packageOrTypeName\n com "]
11088[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.MathUtility; "]
21089[label="typeName\n com.hankcs.hanlp.classification.utilities.MathUtility "]
31090[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
41091[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51092[label="packageOrTypeName\n com.hankcs.hanlp "]
61093[label="packageOrTypeName\n com.hankcs "]
71094[label="packageOrTypeName\n com "]
11095[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.TextProcessUtility; "]
21096[label="typeName\n com.hankcs.hanlp.classification.utilities.TextProcessUtility "]
31097[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
41098[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51099[label="packageOrTypeName\n com.hankcs.hanlp "]
61100[label="packageOrTypeName\n com.hankcs "]
71101[label="packageOrTypeName\n com "]
11102[label="singleTypeImportDeclaration\n importjava.io.File; "]
21103[label="typeName\n java.io.File "]
31104[label="packageOrTypeName\n java.io "]
41105[label="packageOrTypeName\n java "]
11106[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
21107[label="typeName\n java.io.IOException "]
31108[label="packageOrTypeName\n java.io "]
41109[label="packageOrTypeName\n java "]
11110[label="singleTypeImportDeclaration\n importjava.util.Map; "]
21111[label="typeName\n java.util.Map "]
31112[label="packageOrTypeName\n java.util "]
41113[label="packageOrTypeName\n java "]
11114[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger; "]
21115[label="typeName\n com.hankcs.hanlp.classification.utilities.Predefine "]
31116[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
41117[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51118[label="packageOrTypeName\n com.hankcs.hanlp "]
61119[label="packageOrTypeName\n com.hankcs "]
71120[label="packageOrTypeName\n com "]
11121[label="normalClassDeclaration\n publicabstractclassAbstractDataSetimplementsIDataSet{protectedITokenizertokenizer;protectedCatalogcatalog;protectedLexiconlexicon;protectedbooleantestingDataSet;publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;}publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();}publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;}publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);}publicITokenizergetTokenizer(){returntokenizer;}publicCataloggetCatalog(){returncatalog;}publicLexicongetLexicon(){returnlexicon;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);}@OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");}@OverridepublicbooleanisTestingDataSet(){returntestingDataSet;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;}@OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;}@OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;}} "]
21122[label="classModifier\n public "]
21123[label="classModifier\n abstract "]
21124[label="superinterfaces\n implementsIDataSet "]
31125[label="classType\n IDataSet "]
21126[label="classBody\n {protectedITokenizertokenizer;protectedCatalogcatalog;protectedLexiconlexicon;protectedbooleantestingDataSet;publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;}publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();}publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;}publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);}publicITokenizergetTokenizer(){returntokenizer;}publicCataloggetCatalog(){returncatalog;}publicLexicongetLexicon(){returnlexicon;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);}@OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");}@OverridepublicbooleanisTestingDataSet(){returntestingDataSet;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;}@OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;}@OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;}} "]
31127[label="fieldDeclaration\n protectedITokenizertokenizer; "]
41128[label="fieldModifier\n protected "]
41129[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
41130[label="variableDeclaratorId\n tokenizer "]
31131[label="fieldDeclaration\n protectedCatalogcatalog; "]
41132[label="fieldModifier\n protected "]
41133[label="unannClassType_lfno_unannClassOrInterfaceType\n Catalog "]
41134[label="variableDeclaratorId\n catalog "]
31135[label="fieldDeclaration\n protectedLexiconlexicon; "]
41136[label="fieldModifier\n protected "]
41137[label="unannClassType_lfno_unannClassOrInterfaceType\n Lexicon "]
41138[label="variableDeclaratorId\n lexicon "]
31139[label="fieldDeclaration\n protectedbooleantestingDataSet; "]
41140[label="fieldModifier\n protected "]
41141[label="unannPrimitiveType\n boolean "]
41142[label="variableDeclaratorId\n testingDataSet "]
31143[label="constructorDeclaration\n publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;} "]
41144[label="constructorModifier\n public "]
41145[label="constructorDeclarator\n AbstractDataSet(AbstractModelmodel) "]
51146[label="simpleTypeName\n AbstractDataSet "]
51147[label="formalParameter\n AbstractModelmodel "]
61148[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractModel "]
61149[label="variableDeclaratorId\n model "]
41150[label="constructorBody\n {lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;} "]
51151[label="blockStatements\n lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true; "]
61152[label="expressionStatement\n lexicon=newLexicon(model.wordIdTrie); "]
71153[label="assignment\n lexicon=newLexicon(model.wordIdTrie) "]
81154[label="expressionName\n lexicon "]
81155[label="assignmentOperator\n = "]
81156[label="classInstanceCreationExpression_lfno_primary\n newLexicon(model.wordIdTrie) "]
91157[label="expressionName\n model.wordIdTrie "]
101158[label="ambiguousName\n model "]
61159[label="expressionStatement\n tokenizer=model.tokenizer; "]
71160[label="assignment\n tokenizer=model.tokenizer "]
81161[label="expressionName\n tokenizer "]
81162[label="assignmentOperator\n = "]
81163[label="expressionName\n model.tokenizer "]
91164[label="ambiguousName\n model "]
61165[label="expressionStatement\n catalog=newCatalog(model.catalog); "]
71166[label="assignment\n catalog=newCatalog(model.catalog) "]
81167[label="expressionName\n catalog "]
81168[label="assignmentOperator\n = "]
81169[label="classInstanceCreationExpression_lfno_primary\n newCatalog(model.catalog) "]
91170[label="expressionName\n model.catalog "]
101171[label="ambiguousName\n model "]
61172[label="expressionStatement\n testingDataSet=true; "]
71173[label="assignment\n testingDataSet=true "]
81174[label="expressionName\n testingDataSet "]
81175[label="assignmentOperator\n = "]
81176[label="literal\n true "]
31177[label="constructorDeclaration\n publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();} "]
41178[label="constructorModifier\n public "]
41179[label="constructorDeclarator\n AbstractDataSet() "]
51180[label="simpleTypeName\n AbstractDataSet "]
41181[label="constructorBody\n {tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();} "]
51182[label="blockStatements\n tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon(); "]
61183[label="expressionStatement\n tokenizer=newHanLPTokenizer(); "]
71184[label="assignment\n tokenizer=newHanLPTokenizer() "]
81185[label="expressionName\n tokenizer "]
81186[label="assignmentOperator\n = "]
81187[label="classInstanceCreationExpression_lfno_primary\n newHanLPTokenizer() "]
61188[label="expressionStatement\n catalog=newCatalog(); "]
71189[label="assignment\n catalog=newCatalog() "]
81190[label="expressionName\n catalog "]
81191[label="assignmentOperator\n = "]
81192[label="classInstanceCreationExpression_lfno_primary\n newCatalog() "]
61193[label="expressionStatement\n lexicon=newLexicon(); "]
71194[label="assignment\n lexicon=newLexicon() "]
81195[label="expressionName\n lexicon "]
81196[label="assignmentOperator\n = "]
81197[label="classInstanceCreationExpression_lfno_primary\n newLexicon() "]
31198[label="methodDeclaration\n publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;} "]
41199[label="methodModifier\n public "]
41200[label="methodHeader\n IDataSetsetTokenizer(ITokenizertokenizer) "]
51201[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51202[label="methodDeclarator\n setTokenizer(ITokenizertokenizer) "]
61203[label="formalParameter\n ITokenizertokenizer "]
71204[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
71205[label="variableDeclaratorId\n tokenizer "]
41206[label="block\n {this.tokenizer=tokenizer;returnthis;} "]
51207[label="blockStatements\n this.tokenizer=tokenizer;returnthis; "]
61208[label="expressionStatement\n this.tokenizer=tokenizer; "]
71209[label="assignment\n this.tokenizer=tokenizer "]
81210[label="fieldAccess\n this.tokenizer "]
91211[label="primaryNoNewArray_lfno_primary\n this "]
81212[label="assignmentOperator\n = "]
81213[label="expressionName\n tokenizer "]
61214[label="returnStatement\n returnthis; "]
71215[label="primaryNoNewArray_lfno_primary\n this "]
31216[label="methodDeclaration\n publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);} "]
41217[label="methodModifier\n public "]
41218[label="methodHeader\n Documentconvert(Stringcategory,Stringtext) "]
51219[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
51220[label="methodDeclarator\n convert(Stringcategory,Stringtext) "]
61221[label="formalParameterList\n Stringcategory,Stringtext "]
71222[label="formalParameter\n Stringcategory "]
81223[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81224[label="variableDeclaratorId\n category "]
71225[label="formalParameter\n Stringtext "]
81226[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81227[label="variableDeclaratorId\n text "]
41228[label="block\n {String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);} "]
51229[label="blockStatements\n String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray); "]
61230[label="localVariableDeclarationStatement\n String[]tokenArray=tokenizer.segment(text); "]
71231[label="localVariableDeclaration\n String[]tokenArray=tokenizer.segment(text) "]
81232[label="unannArrayType\n String[] "]
91233[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91234[label="dims\n [] "]
81235[label="variableDeclarator\n tokenArray=tokenizer.segment(text) "]
91236[label="variableDeclaratorId\n tokenArray "]
91237[label="methodInvocation_lfno_primary\n tokenizer.segment(text) "]
101238[label="typeName\n tokenizer "]
101239[label="expressionName\n text "]
61240[label="returnStatement\n returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray); "]
71241[label="conditionalExpression\n testingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray) "]
81242[label="expressionName\n testingDataSet "]
81243[label="classInstanceCreationExpression_lfno_primary\n newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray) "]
91244[label="argumentList\n catalog.categoryId,lexicon.wordId,category,tokenArray "]
101245[label="expressionName\n catalog.categoryId "]
111246[label="ambiguousName\n catalog "]
101247[label="expressionName\n lexicon.wordId "]
111248[label="ambiguousName\n lexicon "]
101249[label="expressionName\n category "]
101250[label="expressionName\n tokenArray "]
81251[label="classInstanceCreationExpression_lfno_primary\n newDocument(catalog,lexicon,category,tokenArray) "]
91252[label="argumentList\n catalog,lexicon,category,tokenArray "]
101253[label="expressionName\n catalog "]
101254[label="expressionName\n lexicon "]
101255[label="expressionName\n category "]
101256[label="expressionName\n tokenArray "]
31257[label="methodDeclaration\n publicITokenizergetTokenizer(){returntokenizer;} "]
41258[label="methodModifier\n public "]
41259[label="methodHeader\n ITokenizergetTokenizer() "]
51260[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
51261[label="methodDeclarator\n getTokenizer() "]
41262[label="block\n {returntokenizer;} "]
51263[label="returnStatement\n returntokenizer; "]
61264[label="expressionName\n tokenizer "]
31265[label="methodDeclaration\n publicCataloggetCatalog(){returncatalog;} "]
41266[label="methodModifier\n public "]
41267[label="methodHeader\n CataloggetCatalog() "]
51268[label="unannClassType_lfno_unannClassOrInterfaceType\n Catalog "]
51269[label="methodDeclarator\n getCatalog() "]
41270[label="block\n {returncatalog;} "]
51271[label="returnStatement\n returncatalog; "]
61272[label="expressionName\n catalog "]
31273[label="methodDeclaration\n publicLexicongetLexicon(){returnlexicon;} "]
41274[label="methodModifier\n public "]
41275[label="methodHeader\n LexicongetLexicon() "]
51276[label="unannClassType_lfno_unannClassOrInterfaceType\n Lexicon "]
51277[label="methodDeclarator\n getLexicon() "]
41278[label="block\n {returnlexicon;} "]
51279[label="returnStatement\n returnlexicon; "]
61280[label="expressionName\n lexicon "]
31281[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);} "]
41282[label="markerAnnotation\n @Override "]
51283[label="typeName\n Override "]
41284[label="methodModifier\n public "]
41285[label="methodHeader\n IDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException "]
51286[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51287[label="methodDeclarator\n load(StringfolderPath,StringcharsetName) "]
61288[label="formalParameterList\n StringfolderPath,StringcharsetName "]
71289[label="formalParameter\n StringfolderPath "]
81290[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81291[label="variableDeclaratorId\n folderPath "]
71292[label="formalParameter\n StringcharsetName "]
81293[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81294[label="variableDeclaratorId\n charsetName "]
51295[label="throws_\n throwsIllegalArgumentException,IOException "]
61296[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71297[label="classType\n IllegalArgumentException "]
71298[label="classType\n IOException "]
41299[label="block\n {returnload(folderPath,charsetName,1.);} "]
51300[label="returnStatement\n returnload(folderPath,charsetName,1.); "]
61301[label="methodInvocation_lfno_primary\n load(folderPath,charsetName,1.) "]
71302[label="methodName\n load "]
71303[label="argumentList\n folderPath,charsetName,1. "]
81304[label="expressionName\n folderPath "]
81305[label="expressionName\n charsetName "]
81306[label="literal\n 1. "]
31307[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");} "]
41308[label="markerAnnotation\n @Override "]
51309[label="typeName\n Override "]
41310[label="methodModifier\n public "]
41311[label="methodHeader\n IDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException "]
51312[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51313[label="methodDeclarator\n load(StringfolderPath) "]
61314[label="formalParameter\n StringfolderPath "]
71315[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
71316[label="variableDeclaratorId\n folderPath "]
51317[label="throws_\n throwsIllegalArgumentException,IOException "]
61318[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71319[label="classType\n IllegalArgumentException "]
71320[label="classType\n IOException "]
41321[label="block\n {returnload(folderPath,\"UTF-8\");} "]
51322[label="returnStatement\n returnload(folderPath,\"UTF-8\"); "]
61323[label="methodInvocation_lfno_primary\n load(folderPath,\"UTF-8\") "]
71324[label="methodName\n load "]
71325[label="argumentList\n folderPath,\"UTF-8\" "]
81326[label="expressionName\n folderPath "]
81327[label="literal\n \"UTF-8\" "]
31328[label="methodDeclaration\n @OverridepublicbooleanisTestingDataSet(){returntestingDataSet;} "]
41329[label="markerAnnotation\n @Override "]
51330[label="typeName\n Override "]
41331[label="methodModifier\n public "]
41332[label="methodHeader\n booleanisTestingDataSet() "]
51333[label="unannPrimitiveType\n boolean "]
51334[label="methodDeclarator\n isTestingDataSet() "]
41335[label="block\n {returntestingDataSet;} "]
51336[label="returnStatement\n returntestingDataSet; "]
61337[label="expressionName\n testingDataSet "]
31338[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;} "]
41339[label="markerAnnotation\n @Override "]
51340[label="typeName\n Override "]
41341[label="methodModifier\n public "]
41342[label="methodHeader\n IDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException "]
51343[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51344[label="methodDeclarator\n load(StringfolderPath,StringcharsetName,doublepercentage) "]
61345[label="formalParameterList\n StringfolderPath,StringcharsetName,doublepercentage "]
71346[label="formalParameters\n StringfolderPath,StringcharsetName "]
81347[label="formalParameter\n StringfolderPath "]
91348[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91349[label="variableDeclaratorId\n folderPath "]
81350[label="formalParameter\n StringcharsetName "]
91351[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91352[label="variableDeclaratorId\n charsetName "]
71353[label="formalParameter\n doublepercentage "]
81354[label="floatingPointType\n double "]
81355[label="variableDeclaratorId\n percentage "]
51356[label="throws_\n throwsIllegalArgumentException,IOException "]
61357[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71358[label="classType\n IllegalArgumentException "]
71359[label="classType\n IOException "]
41360[label="block\n {if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;} "]
51361[label="blockStatements\n if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis; "]
61362[label="ifThenStatement\n if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\"); "]
71363[label="equalityExpression\n folderPath==null "]
81364[label="expressionName\n folderPath "]
81365[label="literal\n null "]
71366[label="throwStatement\n thrownewIllegalArgumentException(\"参数 folderPath == null\"); "]
81367[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"参数 folderPath == null\") "]
91368[label="literal\n \"参数 folderPath == null\" "]
61369[label="localVariableDeclarationStatement\n Fileroot=newFile(folderPath); "]
71370[label="localVariableDeclaration\n Fileroot=newFile(folderPath) "]
81371[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
81372[label="variableDeclarator\n root=newFile(folderPath) "]
91373[label="variableDeclaratorId\n root "]
91374[label="classInstanceCreationExpression_lfno_primary\n newFile(folderPath) "]
101375[label="expressionName\n folderPath "]
61376[label="ifThenStatement\n if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath())); "]
71377[label="unaryExpressionNotPlusMinus\n !root.exists() "]
81378[label="methodInvocation_lfno_primary\n root.exists() "]
91379[label="typeName\n root "]
71380[label="throwStatement\n thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath())); "]
81381[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath())) "]
91382[label="methodInvocation_lfno_primary\n String.format(\"目录 %s 不存在\",root.getAbsolutePath()) "]
101383[label="typeName\n String "]
101384[label="argumentList\n \"目录 %s 不存在\",root.getAbsolutePath() "]
111385[label="literal\n \"目录 %s 不存在\" "]
111386[label="methodInvocation_lfno_primary\n root.getAbsolutePath() "]
121387[label="typeName\n root "]
61388[label="ifThenStatement\n if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath())); "]
71389[label="unaryExpressionNotPlusMinus\n !root.isDirectory() "]
81390[label="methodInvocation_lfno_primary\n root.isDirectory() "]
91391[label="typeName\n root "]
71392[label="throwStatement\n thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath())); "]
81393[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath())) "]
91394[label="methodInvocation_lfno_primary\n String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()) "]
101395[label="typeName\n String "]
101396[label="argumentList\n \"目录 %s 不是一个目录\",root.getAbsolutePath() "]
111397[label="literal\n \"目录 %s 不是一个目录\" "]
111398[label="methodInvocation_lfno_primary\n root.getAbsolutePath() "]
121399[label="typeName\n root "]
61400[label="ifThenStatement\n if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\"); "]
71401[label="conditionalOrExpression\n percentage>1.0||percentage<-1.0 "]
81402[label="relationalExpression\n percentage>1.0 "]
91403[label="expressionName\n percentage "]
91404[label="literal\n 1.0 "]
81405[label="relationalExpression\n percentage<-1.0 "]
91406[label="expressionName\n percentage "]
91407[label="unaryExpression\n -1.0 "]
101408[label="literal\n 1.0 "]
71409[label="throwStatement\n thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\"); "]
81410[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\") "]
91411[label="literal\n \"percentage 的绝对值必须介于[0, 1]之间\" "]
61412[label="localVariableDeclarationStatement\n File[]folders=root.listFiles(); "]
71413[label="localVariableDeclaration\n File[]folders=root.listFiles() "]
81414[label="unannArrayType\n File[] "]
91415[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
91416[label="dims\n [] "]
81417[label="variableDeclarator\n folders=root.listFiles() "]
91418[label="variableDeclaratorId\n folders "]
91419[label="methodInvocation_lfno_primary\n root.listFiles() "]
101420[label="typeName\n root "]
61421[label="ifThenStatement\n if(folders==null)returnnull; "]
71422[label="equalityExpression\n folders==null "]
81423[label="expressionName\n folders "]
81424[label="literal\n null "]
71425[label="returnStatement\n returnnull; "]
81426[label="literal\n null "]
61427[label="expressionStatement\n logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath); "]
71428[label="methodInvocation\n logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath) "]
81429[label="typeName\n logger "]
81430[label="argumentList\n \"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath "]
91431[label="literal\n \"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\" "]
91432[label="conditionalExpression\n testingDataSet?\"测试集\":\"训练集\" "]
101433[label="expressionName\n testingDataSet "]
101434[label="literal\n \"测试集\" "]
101435[label="literal\n \"训练集\" "]
91436[label="expressionName\n charsetName "]
91437[label="expressionName\n folderPath "]
61438[label="enhancedForStatement\n for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);} "]
71439[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
71440[label="variableDeclaratorId\n folder "]
71441[label="expressionName\n folders "]
71442[label="block\n {if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);} "]
81443[label="blockStatements\n if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b); "]
91444[label="ifThenStatement\n if(folder.isFile())continue; "]
101445[label="methodInvocation_lfno_primary\n folder.isFile() "]
111446[label="typeName\n folder "]
101447[label="continueStatement\n continue; "]
91448[label="localVariableDeclarationStatement\n File[]files=folder.listFiles(); "]
101449[label="localVariableDeclaration\n File[]files=folder.listFiles() "]
111450[label="unannArrayType\n File[] "]
121451[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
121452[label="dims\n [] "]
111453[label="variableDeclarator\n files=folder.listFiles() "]
121454[label="variableDeclaratorId\n files "]
121455[label="methodInvocation_lfno_primary\n folder.listFiles() "]
131456[label="typeName\n folder "]
91457[label="ifThenStatement\n if(files==null)continue; "]
101458[label="equalityExpression\n files==null "]
111459[label="expressionName\n files "]
111460[label="literal\n null "]
101461[label="continueStatement\n continue; "]
91462[label="localVariableDeclarationStatement\n Stringcategory=folder.getName(); "]
101463[label="localVariableDeclaration\n Stringcategory=folder.getName() "]
111464[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
111465[label="variableDeclarator\n category=folder.getName() "]
121466[label="variableDeclaratorId\n category "]
121467[label="methodInvocation_lfno_primary\n folder.getName() "]
131468[label="typeName\n folder "]
91469[label="expressionStatement\n logger.out(\"[%s]...\",category); "]
101470[label="methodInvocation\n logger.out(\"[%s]...\",category) "]
111471[label="typeName\n logger "]
111472[label="argumentList\n \"[%s]...\",category "]
121473[label="literal\n \"[%s]...\" "]
121474[label="expressionName\n category "]
91475[label="localVariableDeclarationStatement\n intb,e; "]
101476[label="localVariableDeclaration\n intb,e "]
111477[label="integralType\n int "]
111478[label="variableDeclaratorList\n b,e "]
121479[label="variableDeclaratorId\n b "]
121480[label="variableDeclaratorId\n e "]
91481[label="ifThenElseStatement\n if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;} "]
101482[label="relationalExpression\n percentage>0 "]
111483[label="expressionName\n percentage "]
111484[label="literal\n 0 "]
101485[label="block\n {b=0;e=(int)(files.length*percentage);} "]
111486[label="blockStatements\n b=0;e=(int)(files.length*percentage); "]
121487[label="expressionStatement\n b=0; "]
131488[label="assignment\n b=0 "]
141489[label="expressionName\n b "]
141490[label="assignmentOperator\n = "]
141491[label="literal\n 0 "]
121492[label="expressionStatement\n e=(int)(files.length*percentage); "]
131493[label="assignment\n e=(int)(files.length*percentage) "]
141494[label="expressionName\n e "]
141495[label="assignmentOperator\n = "]
141496[label="castExpression\n (int)(files.length*percentage) "]
151497[label="integralType\n int "]
151498[label="primaryNoNewArray_lfno_primary\n (files.length*percentage) "]
161499[label="multiplicativeExpression\n files.length*percentage "]
171500[label="expressionName\n files.length "]
181501[label="ambiguousName\n files "]
171502[label="expressionName\n percentage "]
101503[label="block\n {b=(int)(files.length*(1+percentage));e=files.length;} "]
111504[label="blockStatements\n b=(int)(files.length*(1+percentage));e=files.length; "]
121505[label="expressionStatement\n b=(int)(files.length*(1+percentage)); "]
131506[label="assignment\n b=(int)(files.length*(1+percentage)) "]
141507[label="expressionName\n b "]
141508[label="assignmentOperator\n = "]
141509[label="castExpression\n (int)(files.length*(1+percentage)) "]
151510[label="integralType\n int "]
151511[label="primaryNoNewArray_lfno_primary\n (files.length*(1+percentage)) "]
161512[label="multiplicativeExpression\n files.length*(1+percentage) "]
171513[label="expressionName\n files.length "]
181514[label="ambiguousName\n files "]
171515[label="primaryNoNewArray_lfno_primary\n (1+percentage) "]
181516[label="additiveExpression\n 1+percentage "]
191517[label="literal\n 1 "]
191518[label="expressionName\n percentage "]
121519[label="expressionStatement\n e=files.length; "]
131520[label="assignment\n e=files.length "]
141521[label="expressionName\n e "]
141522[label="assignmentOperator\n = "]
141523[label="expressionName\n files.length "]
151524[label="ambiguousName\n files "]
91525[label="localVariableDeclarationStatement\n intlogEvery=(int)Math.ceil((e-b)/10000f); "]
101526[label="localVariableDeclaration\n intlogEvery=(int)Math.ceil((e-b)/10000f) "]
111527[label="integralType\n int "]
111528[label="variableDeclarator\n logEvery=(int)Math.ceil((e-b)/10000f) "]
121529[label="variableDeclaratorId\n logEvery "]
121530[label="castExpression\n (int)Math.ceil((e-b)/10000f) "]
131531[label="integralType\n int "]
131532[label="methodInvocation_lfno_primary\n Math.ceil((e-b)/10000f) "]
141533[label="typeName\n Math "]
141534[label="multiplicativeExpression\n (e-b)/10000f "]
151535[label="primaryNoNewArray_lfno_primary\n (e-b) "]
161536[label="additiveExpression\n e-b "]
171537[label="expressionName\n e "]
171538[label="expressionName\n b "]
151539[label="literal\n 10000f "]
91540[label="basicForStatement\n for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}} "]
101541[label="localVariableDeclaration\n inti=b "]
111542[label="integralType\n int "]
111543[label="variableDeclarator\n i=b "]
121544[label="variableDeclaratorId\n i "]
121545[label="expressionName\n b "]
101546[label="relationalExpression\n i<e "]
111547[label="expressionName\n i "]
111548[label="expressionName\n e "]
101549[label="postIncrementExpression\n i++ "]
111550[label="expressionName\n i "]
101551[label="block\n {add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}} "]
111552[label="blockStatements\n add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));} "]
121553[label="expressionStatement\n add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName)); "]
131554[label="methodInvocation\n add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName)) "]
141555[label="methodName\n add "]
141556[label="argumentList\n folder.getName(),TextProcessUtility.readTxt(files[i],charsetName) "]
151557[label="methodInvocation_lfno_primary\n folder.getName() "]
161558[label="typeName\n folder "]
151559[label="methodInvocation_lfno_primary\n TextProcessUtility.readTxt(files[i],charsetName) "]
161560[label="typeName\n TextProcessUtility "]
161561[label="argumentList\n files[i],charsetName "]
171562[label="arrayAccess_lfno_primary\n files[i] "]
181563[label="expressionName\n files "]
181564[label="expressionName\n i "]
171565[label="expressionName\n charsetName "]
121566[label="ifThenStatement\n if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));} "]
131567[label="equalityExpression\n i%logEvery==0 "]
141568[label="multiplicativeExpression\n i%logEvery "]
151569[label="expressionName\n i "]
151570[label="expressionName\n logEvery "]
141571[label="literal\n 0 "]
131572[label="block\n {logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));} "]
141573[label="expressionStatement\n logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b)); "]
151574[label="methodInvocation\n logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b)) "]
161575[label="typeName\n logger "]
161576[label="argumentList\n \"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b) "]
171577[label="literal\n \"%c[%s]...%.2f%%\" "]
171578[label="literal\n 13 "]
171579[label="expressionName\n category "]
171580[label="methodInvocation_lfno_primary\n MathUtility.percentage(i-b+1,e-b) "]
181581[label="typeName\n MathUtility "]
181582[label="argumentList\n i-b+1,e-b "]
191583[label="additiveExpression\n i-b+1 "]
201584[label="additiveExpression\n i-b "]
211585[label="expressionName\n i "]
211586[label="expressionName\n b "]
201587[label="literal\n 1 "]
191588[label="additiveExpression\n e-b "]
201589[label="expressionName\n e "]
201590[label="expressionName\n b "]
91591[label="expressionStatement\n logger.out(\" %d 篇文档\n\",e-b); "]
101592[label="methodInvocation\n logger.out(\" %d 篇文档\n\",e-b) "]
111593[label="typeName\n logger "]
111594[label="argumentList\n \" %d 篇文档\n\",e-b "]
121595[label="literal\n \" %d 篇文档\n\" "]
121596[label="additiveExpression\n e-b "]
131597[label="expressionName\n e "]
131598[label="expressionName\n b "]
61599[label="expressionStatement\n logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size()); "]
71600[label="methodInvocation\n logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size()) "]
81601[label="typeName\n logger "]
81602[label="argumentList\n \" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size() "]
91603[label="literal\n \" 加载了 %d 个类目,共 %d 篇文档\n\" "]
91604[label="primary\n getCatalog().size() "]
101605[label="methodInvocation_lfno_primary\n getCatalog() "]
111606[label="methodName\n getCatalog "]
101607[label="methodInvocation_lf_primary\n .size() "]
91608[label="methodInvocation_lfno_primary\n size() "]
101609[label="methodName\n size "]
61610[label="returnStatement\n returnthis; "]
71611[label="primaryNoNewArray_lfno_primary\n this "]
31612[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;} "]
41613[label="markerAnnotation\n @Override "]
51614[label="typeName\n Override "]
41615[label="methodModifier\n public "]
41616[label="methodHeader\n IDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException "]
51617[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51618[label="methodDeclarator\n load(StringfolderPath,doublerate) "]
61619[label="formalParameterList\n StringfolderPath,doublerate "]
71620[label="formalParameter\n StringfolderPath "]
81621[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81622[label="variableDeclaratorId\n folderPath "]
71623[label="formalParameter\n doublerate "]
81624[label="floatingPointType\n double "]
81625[label="variableDeclaratorId\n rate "]
51626[label="throws_\n throwsIllegalArgumentException,IOException "]
61627[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71628[label="classType\n IllegalArgumentException "]
71629[label="classType\n IOException "]
41630[label="block\n {returnnull;} "]
51631[label="returnStatement\n returnnull; "]
61632[label="literal\n null "]
31633[label="methodDeclaration\n @OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;} "]
41634[label="markerAnnotation\n @Override "]
51635[label="typeName\n Override "]
41636[label="methodModifier\n public "]
41637[label="methodHeader\n IDataSetadd(Map<String,String[]>testingDataSet) "]
51638[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51639[label="methodDeclarator\n add(Map<String,String[]>testingDataSet) "]
61640[label="formalParameter\n Map<String,String[]>testingDataSet "]
71641[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String[]> "]
81642[label="typeArguments\n <String,String[]> "]
91643[label="typeArgumentList\n String,String[] "]
101644[label="classType_lfno_classOrInterfaceType\n String "]
101645[label="arrayType\n String[] "]
111646[label="classType_lfno_classOrInterfaceType\n String "]
111647[label="dims\n [] "]
71648[label="variableDeclaratorId\n testingDataSet "]
41649[label="block\n {for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;} "]
51650[label="blockStatements\n for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis; "]
61651[label="enhancedForStatement\n for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}} "]
71652[label="unannClassOrInterfaceType\n Map.Entry<String,String[]> "]
81653[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
81654[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String[]> "]
91655[label="typeArguments\n <String,String[]> "]
101656[label="typeArgumentList\n String,String[] "]
111657[label="classType_lfno_classOrInterfaceType\n String "]
111658[label="arrayType\n String[] "]
121659[label="classType_lfno_classOrInterfaceType\n String "]
121660[label="dims\n [] "]
71661[label="variableDeclaratorId\n entry "]
71662[label="methodInvocation_lfno_primary\n testingDataSet.entrySet() "]
81663[label="typeName\n testingDataSet "]
71664[label="block\n {for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}} "]
81665[label="enhancedForStatement\n for(Stringdocument:entry.getValue()){add(entry.getKey(),document);} "]
91666[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91667[label="variableDeclaratorId\n document "]
91668[label="methodInvocation_lfno_primary\n entry.getValue() "]
101669[label="typeName\n entry "]
91670[label="block\n {add(entry.getKey(),document);} "]
101671[label="expressionStatement\n add(entry.getKey(),document); "]
111672[label="methodInvocation\n add(entry.getKey(),document) "]
121673[label="methodName\n add "]
121674[label="argumentList\n entry.getKey(),document "]
131675[label="methodInvocation_lfno_primary\n entry.getKey() "]
141676[label="typeName\n entry "]
131677[label="expressionName\n document "]
61678[label="returnStatement\n returnthis; "]
71679[label="primaryNoNewArray_lfno_primary\n this "]
01680[label="compilationUnit\n packagecom.hankcs.hanlp.dependency;importcom.hankcs.hanlp.HanLP;importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLSentence;importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLWord;importcom.hankcs.hanlp.corpus.io.IOUtil;importcom.hankcs.hanlp.seg.Segment;importcom.hankcs.hanlp.tokenizer.NLPTokenizer;importcom.hankcs.hanlp.utility.GlobalObjectPool;importjava.util.Map;importjava.util.TreeMap;publicabstractclassAbstractDependencyParserimplementsIDependencyParser{privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true);privateMap<String,String>deprelTranslater;privatebooleanenableDeprelTranslater;@OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;}@OverridepublicSegmentgetSegment(){returnsegment;}@OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;}@OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;}@OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;}publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;}@OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;}}<EOF> "]
11681[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency; "]
21682[label="packageName\n com.hankcs.hanlp.dependency "]
31683[label="packageName\n com.hankcs.hanlp "]
41684[label="packageName\n com.hankcs "]
51685[label="packageName\n com "]
11686[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.HanLP; "]
21687[label="typeName\n com.hankcs.hanlp.HanLP "]
31688[label="packageOrTypeName\n com.hankcs.hanlp "]
41689[label="packageOrTypeName\n com.hankcs "]
51690[label="packageOrTypeName\n com "]
11691[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLSentence; "]
21692[label="typeName\n com.hankcs.hanlp.corpus.dependency.CoNll.CoNLLSentence "]
31693[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency.CoNll "]
41694[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency "]
51695[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
61696[label="packageOrTypeName\n com.hankcs.hanlp "]
71697[label="packageOrTypeName\n com.hankcs "]
81698[label="packageOrTypeName\n com "]
11699[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLWord; "]
21700[label="typeName\n com.hankcs.hanlp.corpus.dependency.CoNll.CoNLLWord "]
31701[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency.CoNll "]
41702[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency "]
51703[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
61704[label="packageOrTypeName\n com.hankcs.hanlp "]
71705[label="packageOrTypeName\n com.hankcs "]
81706[label="packageOrTypeName\n com "]
11707[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
21708[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
31709[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
41710[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
51711[label="packageOrTypeName\n com.hankcs.hanlp "]
61712[label="packageOrTypeName\n com.hankcs "]
71713[label="packageOrTypeName\n com "]
11714[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.Segment; "]
21715[label="typeName\n com.hankcs.hanlp.seg.Segment "]
31716[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
41717[label="packageOrTypeName\n com.hankcs.hanlp "]
51718[label="packageOrTypeName\n com.hankcs "]
61719[label="packageOrTypeName\n com "]
11720[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.tokenizer.NLPTokenizer; "]
21721[label="typeName\n com.hankcs.hanlp.tokenizer.NLPTokenizer "]
31722[label="packageOrTypeName\n com.hankcs.hanlp.tokenizer "]
41723[label="packageOrTypeName\n com.hankcs.hanlp "]
51724[label="packageOrTypeName\n com.hankcs "]
61725[label="packageOrTypeName\n com "]
11726[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.GlobalObjectPool; "]
21727[label="typeName\n com.hankcs.hanlp.utility.GlobalObjectPool "]
31728[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
41729[label="packageOrTypeName\n com.hankcs.hanlp "]
51730[label="packageOrTypeName\n com.hankcs "]
61731[label="packageOrTypeName\n com "]
11732[label="singleTypeImportDeclaration\n importjava.util.Map; "]
21733[label="typeName\n java.util.Map "]
31734[label="packageOrTypeName\n java.util "]
41735[label="packageOrTypeName\n java "]
11736[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
21737[label="typeName\n java.util.TreeMap "]
31738[label="packageOrTypeName\n java.util "]
41739[label="packageOrTypeName\n java "]
11740[label="normalClassDeclaration\n publicabstractclassAbstractDependencyParserimplementsIDependencyParser{privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true);privateMap<String,String>deprelTranslater;privatebooleanenableDeprelTranslater;@OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;}@OverridepublicSegmentgetSegment(){returnsegment;}@OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;}@OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;}@OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;}publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;}@OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;}} "]
21741[label="classModifier\n public "]
21742[label="classModifier\n abstract "]
21743[label="superinterfaces\n implementsIDependencyParser "]
31744[label="classType\n IDependencyParser "]
21745[label="classBody\n {privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true);privateMap<String,String>deprelTranslater;privatebooleanenableDeprelTranslater;@OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;}@OverridepublicSegmentgetSegment(){returnsegment;}@OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;}@OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;}@OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;}publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;}@OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;}} "]
31746[label="fieldDeclaration\n privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true); "]
41747[label="fieldModifier\n private "]
41748[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
41749[label="variableDeclarator\n segment=HanLP.newSegment().enablePartOfSpeechTagging(true) "]
51750[label="variableDeclaratorId\n segment "]
51751[label="primary\n HanLP.newSegment().enablePartOfSpeechTagging(true) "]
61752[label="methodInvocation_lfno_primary\n HanLP.newSegment() "]
71753[label="typeName\n HanLP "]
61754[label="methodInvocation_lf_primary\n .enablePartOfSpeechTagging(true) "]
71755[label="literal\n true "]
31756[label="fieldDeclaration\n privateMap<String,String>deprelTranslater; "]
41757[label="fieldModifier\n private "]
41758[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
51759[label="typeArguments\n <String,String> "]
61760[label="typeArgumentList\n String,String "]
71761[label="classType_lfno_classOrInterfaceType\n String "]
71762[label="classType_lfno_classOrInterfaceType\n String "]
41763[label="variableDeclaratorId\n deprelTranslater "]
31764[label="fieldDeclaration\n privatebooleanenableDeprelTranslater; "]
41765[label="fieldModifier\n private "]
41766[label="unannPrimitiveType\n boolean "]
41767[label="variableDeclaratorId\n enableDeprelTranslater "]
31768[label="methodDeclaration\n @OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;} "]
41769[label="markerAnnotation\n @Override "]
51770[label="typeName\n Override "]
41771[label="methodModifier\n public "]
41772[label="methodHeader\n CoNLLSentenceparse(Stringsentence) "]
51773[label="unannClassType_lfno_unannClassOrInterfaceType\n CoNLLSentence "]
51774[label="methodDeclarator\n parse(Stringsentence) "]
61775[label="formalParameter\n Stringsentence "]
71776[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
71777[label="variableDeclaratorId\n sentence "]
41778[label="block\n {assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;} "]
51779[label="blockStatements\n assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput; "]
61780[label="assertStatement\n assertsentence!=null; "]
71781[label="equalityExpression\n sentence!=null "]
81782[label="expressionName\n sentence "]
81783[label="literal\n null "]
61784[label="localVariableDeclarationStatement\n CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray())); "]
71785[label="localVariableDeclaration\n CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray())) "]
81786[label="unannClassType_lfno_unannClassOrInterfaceType\n CoNLLSentence "]
81787[label="variableDeclarator\n output=parse(segment.seg(sentence.toCharArray())) "]
91788[label="variableDeclaratorId\n output "]
91789[label="methodInvocation_lfno_primary\n parse(segment.seg(sentence.toCharArray())) "]
101790[label="methodName\n parse "]
101791[label="methodInvocation_lfno_primary\n segment.seg(sentence.toCharArray()) "]
111792[label="typeName\n segment "]
111793[label="methodInvocation_lfno_primary\n sentence.toCharArray() "]
121794[label="typeName\n sentence "]
61795[label="ifThenStatement\n if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}} "]
71796[label="conditionalAndExpression\n enableDeprelTranslater&&deprelTranslater!=null "]
81797[label="expressionName\n enableDeprelTranslater "]
81798[label="equalityExpression\n deprelTranslater!=null "]
91799[label="expressionName\n deprelTranslater "]
91800[label="literal\n null "]
71801[label="block\n {for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}} "]
81802[label="enhancedForStatement\n for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;} "]
91803[label="unannClassType_lfno_unannClassOrInterfaceType\n CoNLLWord "]
91804[label="variableDeclaratorId\n word "]
91805[label="expressionName\n output "]
91806[label="block\n {StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;} "]
101807[label="blockStatements\n StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel; "]
111808[label="localVariableDeclarationStatement\n StringtranslatedDeprel=deprelTranslater.get(word.DEPREL); "]
121809[label="localVariableDeclaration\n StringtranslatedDeprel=deprelTranslater.get(word.DEPREL) "]
131810[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
131811[label="variableDeclarator\n translatedDeprel=deprelTranslater.get(word.DEPREL) "]
141812[label="variableDeclaratorId\n translatedDeprel "]
141813[label="methodInvocation_lfno_primary\n deprelTranslater.get(word.DEPREL) "]
151814[label="typeName\n deprelTranslater "]
151815[label="expressionName\n word.DEPREL "]
161816[label="ambiguousName\n word "]
111817[label="expressionStatement\n word.DEPREL=translatedDeprel; "]
121818[label="assignment\n word.DEPREL=translatedDeprel "]
131819[label="expressionName\n word.DEPREL "]
141820[label="ambiguousName\n word "]
131821[label="assignmentOperator\n = "]
131822[label="expressionName\n translatedDeprel "]
61823[label="returnStatement\n returnoutput; "]
71824[label="expressionName\n output "]
31825[label="methodDeclaration\n @OverridepublicSegmentgetSegment(){returnsegment;} "]
41826[label="markerAnnotation\n @Override "]
51827[label="typeName\n Override "]
41828[label="methodModifier\n public "]
41829[label="methodHeader\n SegmentgetSegment() "]
51830[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
51831[label="methodDeclarator\n getSegment() "]
41832[label="block\n {returnsegment;} "]
51833[label="returnStatement\n returnsegment; "]
61834[label="expressionName\n segment "]
31835[label="methodDeclaration\n @OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;} "]
41836[label="markerAnnotation\n @Override "]
51837[label="typeName\n Override "]
41838[label="methodModifier\n public "]
41839[label="methodHeader\n IDependencyParsersetSegment(Segmentsegment) "]
51840[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51841[label="methodDeclarator\n setSegment(Segmentsegment) "]
61842[label="formalParameter\n Segmentsegment "]
71843[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
71844[label="variableDeclaratorId\n segment "]
41845[label="block\n {this.segment=segment;returnthis;} "]
51846[label="blockStatements\n this.segment=segment;returnthis; "]
61847[label="expressionStatement\n this.segment=segment; "]
71848[label="assignment\n this.segment=segment "]
81849[label="fieldAccess\n this.segment "]
91850[label="primaryNoNewArray_lfno_primary\n this "]
81851[label="assignmentOperator\n = "]
81852[label="expressionName\n segment "]
61853[label="returnStatement\n returnthis; "]
71854[label="primaryNoNewArray_lfno_primary\n this "]
31855[label="methodDeclaration\n @OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;} "]
41856[label="markerAnnotation\n @Override "]
51857[label="typeName\n Override "]
41858[label="methodModifier\n public "]
41859[label="methodHeader\n Map<String,String>getDeprelTranslator() "]
51860[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
61861[label="typeArguments\n <String,String> "]
71862[label="typeArgumentList\n String,String "]
81863[label="classType_lfno_classOrInterfaceType\n String "]
81864[label="classType_lfno_classOrInterfaceType\n String "]
51865[label="methodDeclarator\n getDeprelTranslator() "]
41866[label="block\n {returndeprelTranslater;} "]
51867[label="returnStatement\n returndeprelTranslater; "]
61868[label="expressionName\n deprelTranslater "]
31869[label="methodDeclaration\n @OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;} "]
41870[label="markerAnnotation\n @Override "]
51871[label="typeName\n Override "]
41872[label="methodModifier\n public "]
41873[label="methodHeader\n IDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator) "]
51874[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51875[label="methodDeclarator\n setDeprelTranslator(Map<String,String>deprelTranslator) "]
61876[label="formalParameter\n Map<String,String>deprelTranslator "]
71877[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
81878[label="typeArguments\n <String,String> "]
91879[label="typeArgumentList\n String,String "]
101880[label="classType_lfno_classOrInterfaceType\n String "]
101881[label="classType_lfno_classOrInterfaceType\n String "]
71882[label="variableDeclaratorId\n deprelTranslator "]
41883[label="block\n {this.deprelTranslater=deprelTranslator;returnthis;} "]
51884[label="blockStatements\n this.deprelTranslater=deprelTranslator;returnthis; "]
61885[label="expressionStatement\n this.deprelTranslater=deprelTranslator; "]
71886[label="assignment\n this.deprelTranslater=deprelTranslator "]
81887[label="fieldAccess\n this.deprelTranslater "]
91888[label="primaryNoNewArray_lfno_primary\n this "]
81889[label="assignmentOperator\n = "]
81890[label="expressionName\n deprelTranslator "]
61891[label="returnStatement\n returnthis; "]
71892[label="primaryNoNewArray_lfno_primary\n this "]
31893[label="methodDeclaration\n publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;} "]
41894[label="methodModifier\n public "]
41895[label="methodHeader\n IDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath) "]
51896[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51897[label="methodDeclarator\n setDeprelTranslater(StringdeprelTranslatorPath) "]
61898[label="formalParameter\n StringdeprelTranslatorPath "]
71899[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
71900[label="variableDeclaratorId\n deprelTranslatorPath "]
41901[label="block\n {deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;} "]
51902[label="blockStatements\n deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis; "]
61903[label="expressionStatement\n deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath); "]
71904[label="assignment\n deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath) "]
81905[label="expressionName\n deprelTranslater "]
81906[label="assignmentOperator\n = "]
81907[label="methodInvocation_lfno_primary\n GlobalObjectPool.get(deprelTranslatorPath) "]
91908[label="typeName\n GlobalObjectPool "]
91909[label="expressionName\n deprelTranslatorPath "]
61910[label="ifThenStatement\n if(deprelTranslater!=null)returnthis; "]
71911[label="equalityExpression\n deprelTranslater!=null "]
81912[label="expressionName\n deprelTranslater "]
81913[label="literal\n null "]
71914[label="returnStatement\n returnthis; "]
81915[label="primaryNoNewArray_lfno_primary\n this "]
61916[label="localVariableDeclarationStatement\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath); "]
71917[label="localVariableDeclaration\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath) "]
81918[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
91919[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
91920[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
81921[label="variableDeclarator\n iterator=newIOUtil.LineIterator(deprelTranslatorPath) "]
91922[label="variableDeclaratorId\n iterator "]
91923[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(deprelTranslatorPath) "]
101924[label="expressionName\n deprelTranslatorPath "]
61925[label="expressionStatement\n deprelTranslater=newTreeMap<String,String>(); "]
71926[label="assignment\n deprelTranslater=newTreeMap<String,String>() "]
81927[label="expressionName\n deprelTranslater "]
81928[label="assignmentOperator\n = "]
81929[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
91930[label="typeArguments\n <String,String> "]
101931[label="typeArgumentList\n String,String "]
111932[label="classType_lfno_classOrInterfaceType\n String "]
111933[label="classType_lfno_classOrInterfaceType\n String "]
61934[label="whileStatement\n while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);} "]
71935[label="methodInvocation_lfno_primary\n iterator.hasNext() "]
81936[label="typeName\n iterator "]
71937[label="block\n {String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);} "]
81938[label="blockStatements\n String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]); "]
91939[label="localVariableDeclarationStatement\n String[]args=iterator.next().split(\"\\s\"); "]
101940[label="localVariableDeclaration\n String[]args=iterator.next().split(\"\\s\") "]
111941[label="unannArrayType\n String[] "]
121942[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
121943[label="dims\n [] "]
111944[label="variableDeclarator\n args=iterator.next().split(\"\\s\") "]
121945[label="variableDeclaratorId\n args "]
121946[label="primary\n iterator.next().split(\"\\s\") "]
131947[label="methodInvocation_lfno_primary\n iterator.next() "]
141948[label="typeName\n iterator "]
131949[label="methodInvocation_lf_primary\n .split(\"\\s\") "]
141950[label="literal\n \"\\s\" "]
91951[label="expressionStatement\n deprelTranslater.put(args[0],args[1]); "]
101952[label="methodInvocation\n deprelTranslater.put(args[0],args[1]) "]
111953[label="typeName\n deprelTranslater "]
111954[label="argumentList\n args[0],args[1] "]
121955[label="arrayAccess_lfno_primary\n args[0] "]
131956[label="expressionName\n args "]
131957[label="literal\n 0 "]
121958[label="arrayAccess_lfno_primary\n args[1] "]
131959[label="expressionName\n args "]
131960[label="literal\n 1 "]
61961[label="ifThenStatement\n if(deprelTranslater.size()==0){deprelTranslater=null;} "]
71962[label="equalityExpression\n deprelTranslater.size()==0 "]
81963[label="methodInvocation_lfno_primary\n deprelTranslater.size() "]
91964[label="typeName\n deprelTranslater "]
81965[label="literal\n 0 "]
71966[label="block\n {deprelTranslater=null;} "]
81967[label="expressionStatement\n deprelTranslater=null; "]
91968[label="assignment\n deprelTranslater=null "]
101969[label="expressionName\n deprelTranslater "]
101970[label="assignmentOperator\n = "]
101971[label="literal\n null "]
61972[label="expressionStatement\n GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater); "]
71973[label="methodInvocation\n GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater) "]
81974[label="typeName\n GlobalObjectPool "]
81975[label="argumentList\n deprelTranslatorPath,deprelTranslater "]
91976[label="expressionName\n deprelTranslatorPath "]
91977[label="expressionName\n deprelTranslater "]
61978[label="returnStatement\n returnthis; "]
71979[label="primaryNoNewArray_lfno_primary\n this "]
31980[label="methodDeclaration\n @OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;} "]
41981[label="markerAnnotation\n @Override "]
51982[label="typeName\n Override "]
41983[label="methodModifier\n public "]
41984[label="methodHeader\n IDependencyParserenableDeprelTranslator(booleanenable) "]
51985[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51986[label="methodDeclarator\n enableDeprelTranslator(booleanenable) "]
61987[label="formalParameter\n booleanenable "]
71988[label="unannPrimitiveType\n boolean "]
71989[label="variableDeclaratorId\n enable "]
41990[label="block\n {enableDeprelTranslater=enable;returnthis;} "]
51991[label="blockStatements\n enableDeprelTranslater=enable;returnthis; "]
61992[label="expressionStatement\n enableDeprelTranslater=enable; "]
71993[label="assignment\n enableDeprelTranslater=enable "]
81994[label="expressionName\n enableDeprelTranslater "]
81995[label="assignmentOperator\n = "]
81996[label="expressionName\n enable "]
61997[label="returnStatement\n returnthis; "]
71998[label="primaryNoNewArray_lfno_primary\n this "]
01999[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;publicclassAbstractInexactActionimplementsComparable<AbstractInexactAction>{intseed;publicAbstractInexactAction(){}AbstractInexactAction(intname,intrel){seed=rel<<6|name;}publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);}@Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;}publicintname(){return(seed&0x3f);}publicintrel(){return(seed>>6);}}<EOF> "]
12000[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
22001[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
32002[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
42003[label="packageName\n com.hankcs.hanlp.dependency "]
52004[label="packageName\n com.hankcs.hanlp "]
62005[label="packageName\n com.hankcs "]
72006[label="packageName\n com "]
12007[label="normalClassDeclaration\n publicclassAbstractInexactActionimplementsComparable<AbstractInexactAction>{intseed;publicAbstractInexactAction(){}AbstractInexactAction(intname,intrel){seed=rel<<6|name;}publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);}@Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;}publicintname(){return(seed&0x3f);}publicintrel(){return(seed>>6);}} "]
22008[label="classModifier\n public "]
22009[label="superinterfaces\n implementsComparable<AbstractInexactAction> "]
32010[label="classType\n Comparable<AbstractInexactAction> "]
42011[label="typeArguments\n <AbstractInexactAction> "]
52012[label="classType_lfno_classOrInterfaceType\n AbstractInexactAction "]
22013[label="classBody\n {intseed;publicAbstractInexactAction(){}AbstractInexactAction(intname,intrel){seed=rel<<6|name;}publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);}@Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;}publicintname(){return(seed&0x3f);}publicintrel(){return(seed>>6);}} "]
32014[label="fieldDeclaration\n intseed; "]
42015[label="integralType\n int "]
42016[label="variableDeclaratorId\n seed "]
32017[label="constructorDeclaration\n publicAbstractInexactAction(){} "]
42018[label="constructorModifier\n public "]
42019[label="constructorDeclarator\n AbstractInexactAction() "]
52020[label="simpleTypeName\n AbstractInexactAction "]
42021[label="constructorBody\n {} "]
32022[label="constructorDeclaration\n AbstractInexactAction(intname,intrel){seed=rel<<6|name;} "]
42023[label="constructorDeclarator\n AbstractInexactAction(intname,intrel) "]
52024[label="simpleTypeName\n AbstractInexactAction "]
52025[label="formalParameterList\n intname,intrel "]
62026[label="formalParameter\n intname "]
72027[label="integralType\n int "]
72028[label="variableDeclaratorId\n name "]
62029[label="formalParameter\n intrel "]
72030[label="integralType\n int "]
72031[label="variableDeclaratorId\n rel "]
42032[label="constructorBody\n {seed=rel<<6|name;} "]
52033[label="expressionStatement\n seed=rel<<6|name; "]
62034[label="assignment\n seed=rel<<6|name "]
72035[label="expressionName\n seed "]
72036[label="assignmentOperator\n = "]
72037[label="inclusiveOrExpression\n rel<<6|name "]
82038[label="shiftExpression\n rel<<6 "]
92039[label="expressionName\n rel "]
92040[label="literal\n 6 "]
82041[label="expressionName\n name "]
32042[label="methodDeclaration\n publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);} "]
42043[label="methodModifier\n public "]
42044[label="methodHeader\n intcompareTo(AbstractInexactActiono) "]
52045[label="integralType\n int "]
52046[label="methodDeclarator\n compareTo(AbstractInexactActiono) "]
62047[label="formalParameter\n AbstractInexactActiono "]
72048[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractInexactAction "]
72049[label="variableDeclaratorId\n o "]
42050[label="block\n {returnnewInteger(seed).compareTo(o.seed);} "]
52051[label="returnStatement\n returnnewInteger(seed).compareTo(o.seed); "]
62052[label="primary\n newInteger(seed).compareTo(o.seed) "]
72053[label="classInstanceCreationExpression_lfno_primary\n newInteger(seed) "]
82054[label="expressionName\n seed "]
72055[label="methodInvocation_lf_primary\n .compareTo(o.seed) "]
82056[label="expressionName\n o.seed "]
92057[label="ambiguousName\n o "]
32058[label="methodDeclaration\n @Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;} "]
42059[label="markerAnnotation\n @Override "]
52060[label="typeName\n Override "]
42061[label="methodModifier\n public "]
42062[label="methodHeader\n booleanequals(Objectobj) "]
52063[label="unannPrimitiveType\n boolean "]
52064[label="methodDeclarator\n equals(Objectobj) "]
62065[label="formalParameter\n Objectobj "]
72066[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
72067[label="variableDeclaratorId\n obj "]
42068[label="block\n {if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;} "]
52069[label="blockStatements\n if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed; "]
62070[label="ifThenStatement\n if(!(objinstanceofAbstractInexactAction))returnfalse; "]
72071[label="unaryExpressionNotPlusMinus\n !(objinstanceofAbstractInexactAction) "]
82072[label="primaryNoNewArray_lfno_primary\n (objinstanceofAbstractInexactAction) "]
92073[label="relationalExpression\n objinstanceofAbstractInexactAction "]
102074[label="expressionName\n obj "]
102075[label="classType_lfno_classOrInterfaceType\n AbstractInexactAction "]
72076[label="returnStatement\n returnfalse; "]
82077[label="literal\n false "]
62078[label="localVariableDeclarationStatement\n AbstractInexactActiono=(AbstractInexactAction)obj; "]
72079[label="localVariableDeclaration\n AbstractInexactActiono=(AbstractInexactAction)obj "]
82080[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractInexactAction "]
82081[label="variableDeclarator\n o=(AbstractInexactAction)obj "]
92082[label="variableDeclaratorId\n o "]
92083[label="castExpression\n (AbstractInexactAction)obj "]
102084[label="classType_lfno_classOrInterfaceType\n AbstractInexactAction "]
102085[label="expressionName\n obj "]
62086[label="returnStatement\n returnseed==o.seed; "]
72087[label="equalityExpression\n seed==o.seed "]
82088[label="expressionName\n seed "]
82089[label="expressionName\n o.seed "]
92090[label="ambiguousName\n o "]
32091[label="methodDeclaration\n publicintname(){return(seed&0x3f);} "]
42092[label="methodModifier\n public "]
42093[label="methodHeader\n intname() "]
52094[label="integralType\n int "]
52095[label="methodDeclarator\n name() "]
42096[label="block\n {return(seed&0x3f);} "]
52097[label="returnStatement\n return(seed&0x3f); "]
62098[label="primaryNoNewArray_lfno_primary\n (seed&0x3f) "]
72099[label="andExpression\n seed&0x3f "]
82100[label="expressionName\n seed "]
82101[label="literal\n 0x3f "]
32102[label="methodDeclaration\n publicintrel(){return(seed>>6);} "]
42103[label="methodModifier\n public "]
42104[label="methodHeader\n intrel() "]
52105[label="integralType\n int "]
52106[label="methodDeclarator\n rel() "]
42107[label="block\n {return(seed>>6);} "]
52108[label="returnStatement\n return(seed>>6); "]
62109[label="primaryNoNewArray_lfno_primary\n (seed>>6) "]
72110[label="shiftExpression\n seed>>6 "]
82111[label="expressionName\n seed "]
82112[label="literal\n 6 "]
02113[label="compilationUnit\n packagecom.hankcs.hanlp.classification.models;importcom.hankcs.hanlp.collection.trie.bintrie.BinTrie;importcom.hankcs.hanlp.classification.tokenizers.ITokenizer;importjava.io.*;publicclassAbstractModelimplementsSerializable{publicString[]catalog;publicITokenizertokenizer;publicBinTrie<Integer>wordIdTrie;}<EOF> "]
12114[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.models; "]
22115[label="packageName\n com.hankcs.hanlp.classification.models "]
32116[label="packageName\n com.hankcs.hanlp.classification "]
42117[label="packageName\n com.hankcs.hanlp "]
52118[label="packageName\n com.hankcs "]
62119[label="packageName\n com "]
12120[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.bintrie.BinTrie; "]
22121[label="typeName\n com.hankcs.hanlp.collection.trie.bintrie.BinTrie "]
32122[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie.bintrie "]
42123[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
52124[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
62125[label="packageOrTypeName\n com.hankcs.hanlp "]
72126[label="packageOrTypeName\n com.hankcs "]
82127[label="packageOrTypeName\n com "]
12128[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.ITokenizer; "]
22129[label="typeName\n com.hankcs.hanlp.classification.tokenizers.ITokenizer "]
32130[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
42131[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
52132[label="packageOrTypeName\n com.hankcs.hanlp "]
62133[label="packageOrTypeName\n com.hankcs "]
72134[label="packageOrTypeName\n com "]
12135[label="typeImportOnDemandDeclaration\n importjava.io.*; "]
22136[label="packageOrTypeName\n java.io "]
32137[label="packageOrTypeName\n java "]
12138[label="normalClassDeclaration\n publicclassAbstractModelimplementsSerializable{publicString[]catalog;publicITokenizertokenizer;publicBinTrie<Integer>wordIdTrie;} "]
22139[label="classModifier\n public "]
22140[label="superinterfaces\n implementsSerializable "]
32141[label="classType\n Serializable "]
22142[label="classBody\n {publicString[]catalog;publicITokenizertokenizer;publicBinTrie<Integer>wordIdTrie;} "]
32143[label="fieldDeclaration\n publicString[]catalog; "]
42144[label="fieldModifier\n public "]
42145[label="unannArrayType\n String[] "]
52146[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
52147[label="dims\n [] "]
42148[label="variableDeclaratorId\n catalog "]
32149[label="fieldDeclaration\n publicITokenizertokenizer; "]
42150[label="fieldModifier\n public "]
42151[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
42152[label="variableDeclaratorId\n tokenizer "]
32153[label="fieldDeclaration\n publicBinTrie<Integer>wordIdTrie; "]
42154[label="fieldModifier\n public "]
42155[label="unannClassType_lfno_unannClassOrInterfaceType\n BinTrie<Integer> "]
52156[label="typeArguments\n <Integer> "]
62157[label="classType_lfno_classOrInterfaceType\n Integer "]
42158[label="variableDeclaratorId\n wordIdTrie "]
02159[label="compilationUnit\n packagecom.hankcs.hanlp.mining.word2vec;publicabstractclassAbstractTrainer{protectedabstractvoidlocalUsage();protectedvoidparamDesc(Stringparam,Stringdesc){System.err.printf(\"\t%s\n\t\t%s\n\",param,desc);}protectedvoidusage(){System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0);}protectedintargPos(Stringparam,String[]args){returnargPos(param,args,true);}protectedintargPos(Stringparam,String[]args,booleancheckArgNum){for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1;}protectedvoidsetConfig(String[]args,Configconfig){inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1]));}}<EOF> "]
12160[label="packageDeclaration\n packagecom.hankcs.hanlp.mining.word2vec; "]
22161[label="packageName\n com.hankcs.hanlp.mining.word2vec "]
32162[label="packageName\n com.hankcs.hanlp.mining "]
42163[label="packageName\n com.hankcs.hanlp "]
52164[label="packageName\n com.hankcs "]
62165[label="packageName\n com "]
12166[label="normalClassDeclaration\n publicabstractclassAbstractTrainer{protectedabstractvoidlocalUsage();protectedvoidparamDesc(Stringparam,Stringdesc){System.err.printf(\"\t%s\n\t\t%s\n\",param,desc);}protectedvoidusage(){System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0);}protectedintargPos(Stringparam,String[]args){returnargPos(param,args,true);}protectedintargPos(Stringparam,String[]args,booleancheckArgNum){for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1;}protectedvoidsetConfig(String[]args,Configconfig){inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1]));}} "]
22167[label="classModifier\n public "]
22168[label="classModifier\n abstract "]
22169[label="classBody\n {protectedabstractvoidlocalUsage();protectedvoidparamDesc(Stringparam,Stringdesc){System.err.printf(\"\t%s\n\t\t%s\n\",param,desc);}protectedvoidusage(){System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0);}protectedintargPos(Stringparam,String[]args){returnargPos(param,args,true);}protectedintargPos(Stringparam,String[]args,booleancheckArgNum){for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1;}protectedvoidsetConfig(String[]args,Configconfig){inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1]));}} "]
32170[label="methodDeclaration\n protectedabstractvoidlocalUsage(); "]
42171[label="methodModifier\n protected "]
42172[label="methodModifier\n abstract "]
42173[label="methodHeader\n voidlocalUsage() "]
52174[label="result\n void "]
52175[label="methodDeclarator\n localUsage() "]
42176[label="methodBody\n ; "]
32177[label="methodDeclaration\n protectedvoidparamDesc(Stringparam,Stringdesc){System.err.printf(\"\t%s\n\t\t%s\n\",param,desc);} "]
42178[label="methodModifier\n protected "]
42179[label="methodHeader\n voidparamDesc(Stringparam,Stringdesc) "]
52180[label="result\n void "]
52181[label="methodDeclarator\n paramDesc(Stringparam,Stringdesc) "]
62182[label="formalParameterList\n Stringparam,Stringdesc "]
72183[label="formalParameter\n Stringparam "]
82184[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
82185[label="variableDeclaratorId\n param "]
72186[label="formalParameter\n Stringdesc "]
82187[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
82188[label="variableDeclaratorId\n desc "]
42189[label="block\n {System.err.printf(\"\t%s\n\t\t%s\n\",param,desc);} "]
52190[label="expressionStatement\n System.err.printf(\"\t%s\n\t\t%s\n\",param,desc); "]
62191[label="methodInvocation\n System.err.printf(\"\t%s\n\t\t%s\n\",param,desc) "]
72192[label="typeName\n System.err "]
82193[label="packageOrTypeName\n System "]
72194[label="argumentList\n \"\t%s\n\t\t%s\n\",param,desc "]
82195[label="literal\n \"\t%s\n\t\t%s\n\" "]
82196[label="expressionName\n param "]
82197[label="expressionName\n desc "]
32198[label="methodDeclaration\n protectedvoidusage(){System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0);} "]
42199[label="methodModifier\n protected "]
42200[label="methodHeader\n voidusage() "]
52201[label="result\n void "]
52202[label="methodDeclarator\n usage() "]
42203[label="block\n {System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0);} "]
52204[label="blockStatements\n System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0); "]
62205[label="expressionStatement\n System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\"); "]
72206[label="methodInvocation\n System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\") "]
82207[label="typeName\n System.err "]
92208[label="packageOrTypeName\n System "]
82209[label="literal\n \"word2vec Java toolkit v 0.1c\n\n\" "]
62210[label="expressionStatement\n System.err.printf(\"Options:\n\"); "]
72211[label="methodInvocation\n System.err.printf(\"Options:\n\") "]
82212[label="typeName\n System.err "]
92213[label="packageOrTypeName\n System "]
82214[label="literal\n \"Options:\n\" "]
62215[label="expressionStatement\n System.err.printf(\"Parameters for training:\n\"); "]
72216[label="methodInvocation\n System.err.printf(\"Parameters for training:\n\") "]
82217[label="typeName\n System.err "]
92218[label="packageOrTypeName\n System "]
82219[label="literal\n \"Parameters for training:\n\" "]
62220[label="expressionStatement\n paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\"); "]
72221[label="methodInvocation\n paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\") "]
82222[label="methodName\n paramDesc "]
82223[label="argumentList\n \"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\" "]
92224[label="literal\n \"-output <file>\" "]
92225[label="literal\n \"Use <file> to save the resulting word vectors / word clusters\" "]
62226[label="expressionStatement\n paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\"); "]
72227[label="methodInvocation\n paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\") "]
82228[label="methodName\n paramDesc "]
82229[label="argumentList\n \"-size <int>\",\"Set size of word vectors; default is 100\" "]
92230[label="literal\n \"-size <int>\" "]
92231[label="literal\n \"Set size of word vectors; default is 100\" "]
62232[label="expressionStatement\n paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\"); "]
72233[label="methodInvocation\n paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\") "]
82234[label="methodName\n paramDesc "]
82235[label="argumentList\n \"-window <int>\",\"Set max skip length between words; default is 5\" "]
92236[label="literal\n \"-window <int>\" "]
92237[label="literal\n \"Set max skip length between words; default is 5\" "]
62238[label="expressionStatement\n paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\"); "]
72239[label="methodInvocation\n paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\") "]
82240[label="methodName\n paramDesc "]
82241[label="argumentList\n \"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\" "]
92242[label="literal\n \"-sample <float>\" "]
92243[label="additiveExpression\n \"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\" "]
102244[label="literal\n \"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\" "]
102245[label="literal\n \" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\" "]
62246[label="expressionStatement\n paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\"); "]
72247[label="methodInvocation\n paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\") "]
82248[label="methodName\n paramDesc "]
82249[label="argumentList\n \"-hs\",\"Use Hierarchical Softmax; default is not used\" "]
92250[label="literal\n \"-hs\" "]
92251[label="literal\n \"Use Hierarchical Softmax; default is not used\" "]
62252[label="expressionStatement\n paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\"); "]
72253[label="methodInvocation\n paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\") "]
82254[label="methodName\n paramDesc "]
82255[label="argumentList\n \"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\" "]
92256[label="literal\n \"-negative <int>\" "]
92257[label="literal\n \"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\" "]
62258[label="expressionStatement\n paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\"); "]
72259[label="methodInvocation\n paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\") "]
82260[label="methodName\n paramDesc "]
82261[label="argumentList\n \"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\" "]
92262[label="literal\n \"-threads <int>\" "]
92263[label="literal\n \"Use <int> threads (default is the cores of local machine)\" "]
62264[label="expressionStatement\n paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\"); "]
72265[label="methodInvocation\n paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\") "]
82266[label="methodName\n paramDesc "]
82267[label="argumentList\n \"-iter <int>\",\"Run more training iterations (default 5)\" "]
92268[label="literal\n \"-iter <int>\" "]
92269[label="literal\n \"Run more training iterations (default 5)\" "]
62270[label="expressionStatement\n paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\"); "]
72271[label="methodInvocation\n paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\") "]
82272[label="methodName\n paramDesc "]
82273[label="argumentList\n \"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\" "]
92274[label="literal\n \"-min-count <int>\" "]
92275[label="literal\n \"This will discard words that appear less than <int> times; default is 5\" "]
62276[label="expressionStatement\n paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\"); "]
72277[label="methodInvocation\n paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\") "]
82278[label="methodName\n paramDesc "]
82279[label="argumentList\n \"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\" "]
92280[label="literal\n \"-alpha <float>\" "]
92281[label="literal\n \"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\" "]
62282[label="expressionStatement\n paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\"); "]
72283[label="methodInvocation\n paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\") "]
82284[label="methodName\n paramDesc "]
82285[label="argumentList\n \"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\" "]
92286[label="literal\n \"-cbow\" "]
92287[label="literal\n \"Use the continuous bag of words model; default is skip-gram model\" "]
62288[label="expressionStatement\n localUsage(); "]
72289[label="methodInvocation\n localUsage() "]
82290[label="methodName\n localUsage "]
62291[label="expressionStatement\n System.exit(0); "]
72292[label="methodInvocation\n System.exit(0) "]
82293[label="typeName\n System "]
82294[label="literal\n 0 "]
32295[label="methodDeclaration\n protectedintargPos(Stringparam,String[]args){returnargPos(param,args,true);} "]
42296[label="methodModifier\n protected "]
42297[label="methodHeader\n intargPos(Stringparam,String[]args) "]
52298[label="integralType\n int "]
52299[label="methodDeclarator\n argPos(Stringparam,String[]args) "]
62300[label="formalParameterList\n Stringparam,String[]args "]
72301[label="formalParameter\n Stringparam "]
82302[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
82303[label="variableDeclaratorId\n param "]
72304[label="formalParameter\n String[]args "]
82305[label="unannArrayType\n String[] "]
92306[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
92307[label="dims\n [] "]
82308[label="variableDeclaratorId\n args "]
42309[label="block\n {returnargPos(param,args,true);} "]
52310[label="returnStatement\n returnargPos(param,args,true); "]
62311[label="methodInvocation_lfno_primary\n argPos(param,args,true) "]
72312[label="methodName\n argPos "]
72313[label="argumentList\n param,args,true "]
82314[label="expressionName\n param "]
82315[label="expressionName\n args "]
82316[label="literal\n true "]
32317[label="methodDeclaration\n protectedintargPos(Stringparam,String[]args,booleancheckArgNum){for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1;} "]
42318[label="methodModifier\n protected "]
42319[label="methodHeader\n intargPos(Stringparam,String[]args,booleancheckArgNum) "]
52320[label="integralType\n int "]
52321[label="methodDeclarator\n argPos(Stringparam,String[]args,booleancheckArgNum) "]
62322[label="formalParameterList\n Stringparam,String[]args,booleancheckArgNum "]
72323[label="formalParameters\n Stringparam,String[]args "]
82324[label="formalParameter\n Stringparam "]
92325[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
92326[label="variableDeclaratorId\n param "]
82327[label="formalParameter\n String[]args "]
92328[label="unannArrayType\n String[] "]
102329[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
102330[label="dims\n [] "]
92331[label="variableDeclaratorId\n args "]
72332[label="formalParameter\n booleancheckArgNum "]
82333[label="unannPrimitiveType\n boolean "]
82334[label="variableDeclaratorId\n checkArgNum "]
42335[label="block\n {for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1;} "]
52336[label="blockStatements\n for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1; "]
62337[label="basicForStatement\n for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}} "]
72338[label="localVariableDeclaration\n inti=0 "]
82339[label="integralType\n int "]
82340[label="variableDeclarator\n i=0 "]
92341[label="variableDeclaratorId\n i "]
92342[label="literal\n 0 "]
72343[label="relationalExpression\n i<args.length "]
82344[label="expressionName\n i "]
82345[label="expressionName\n args.length "]
92346[label="ambiguousName\n args "]
72347[label="postIncrementExpression\n i++ "]
82348[label="expressionName\n i "]
72349[label="block\n {if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}} "]
82350[label="ifThenStatement\n if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;} "]
92351[label="methodInvocation_lfno_primary\n param.equals(args[i]) "]
102352[label="typeName\n param "]
102353[label="arrayAccess_lfno_primary\n args[i] "]
112354[label="expressionName\n args "]
112355[label="expressionName\n i "]
92356[label="block\n {if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;} "]
102357[label="blockStatements\n if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni; "]
112358[label="ifThenStatement\n if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param)); "]
122359[label="conditionalAndExpression\n checkArgNum&&(i==args.length-1) "]
132360[label="expressionName\n checkArgNum "]
132361[label="primaryNoNewArray_lfno_primary\n (i==args.length-1) "]
142362[label="equalityExpression\n i==args.length-1 "]
152363[label="expressionName\n i "]
152364[label="additiveExpression\n args.length-1 "]
162365[label="expressionName\n args.length "]
172366[label="ambiguousName\n args "]
162367[label="literal\n 1 "]
122368[label="throwStatement\n thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param)); "]
132369[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(String.format(\"Argument missing for %s\",param)) "]
142370[label="methodInvocation_lfno_primary\n String.format(\"Argument missing for %s\",param) "]
152371[label="typeName\n String "]
152372[label="argumentList\n \"Argument missing for %s\",param "]
162373[label="literal\n \"Argument missing for %s\" "]
162374[label="expressionName\n param "]
112375[label="returnStatement\n returni; "]
122376[label="expressionName\n i "]
62377[label="returnStatement\n return-1; "]
72378[label="unaryExpression\n -1 "]
82379[label="literal\n 1 "]
32380[label="methodDeclaration\n protectedvoidsetConfig(String[]args,Configconfig){inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1]));} "]
42381[label="methodModifier\n protected "]
42382[label="methodHeader\n voidsetConfig(String[]args,Configconfig) "]
52383[label="result\n void "]
52384[label="methodDeclarator\n setConfig(String[]args,Configconfig) "]
62385[label="formalParameterList\n String[]args,Configconfig "]
72386[label="formalParameter\n String[]args "]
82387[label="unannArrayType\n String[] "]
92388[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
92389[label="dims\n [] "]
82390[label="variableDeclaratorId\n args "]
72391[label="formalParameter\n Configconfig "]
82392[label="unannClassType_lfno_unannClassOrInterfaceType\n Config "]
82393[label="variableDeclaratorId\n config "]
42394[label="block\n {inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1]));} "]
52395[label="blockStatements\n inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1])); "]
62396[label="localVariableDeclarationStatement\n inti; "]
72397[label="localVariableDeclaration\n inti "]
82398[label="integralType\n int "]
82399[label="variableDeclaratorId\n i "]
62400[label="ifThenStatement\n if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1])); "]
72401[label="relationalExpression\n (i=argPos(\"-size\",args))>=0 "]
82402[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-size\",args)) "]
92403[label="assignment\n i=argPos(\"-size\",args) "]
102404[label="expressionName\n i "]
102405[label="assignmentOperator\n = "]
102406[label="methodInvocation_lfno_primary\n argPos(\"-size\",args) "]
112407[label="methodName\n argPos "]
112408[label="argumentList\n \"-size\",args "]
122409[label="literal\n \"-size\" "]
122410[label="expressionName\n args "]
82411[label="literal\n 0 "]
72412[label="expressionStatement\n config.setLayer1Size(Integer.parseInt(args[i+1])); "]
82413[label="methodInvocation\n config.setLayer1Size(Integer.parseInt(args[i+1])) "]
92414[label="typeName\n config "]
92415[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102416[label="typeName\n Integer "]
102417[label="arrayAccess_lfno_primary\n args[i+1] "]
112418[label="expressionName\n args "]
112419[label="additiveExpression\n i+1 "]
122420[label="expressionName\n i "]
122421[label="literal\n 1 "]
62422[label="ifThenStatement\n if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]); "]
72423[label="relationalExpression\n (i=argPos(\"-output\",args))>=0 "]
82424[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-output\",args)) "]
92425[label="assignment\n i=argPos(\"-output\",args) "]
102426[label="expressionName\n i "]
102427[label="assignmentOperator\n = "]
102428[label="methodInvocation_lfno_primary\n argPos(\"-output\",args) "]
112429[label="methodName\n argPos "]
112430[label="argumentList\n \"-output\",args "]
122431[label="literal\n \"-output\" "]
122432[label="expressionName\n args "]
82433[label="literal\n 0 "]
72434[label="expressionStatement\n config.setOutputFile(args[i+1]); "]
82435[label="methodInvocation\n config.setOutputFile(args[i+1]) "]
92436[label="typeName\n config "]
92437[label="arrayAccess_lfno_primary\n args[i+1] "]
102438[label="expressionName\n args "]
102439[label="additiveExpression\n i+1 "]
112440[label="expressionName\n i "]
112441[label="literal\n 1 "]
62442[label="ifThenStatement\n if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1); "]
72443[label="relationalExpression\n (i=argPos(\"-cbow\",args))>=0 "]
82444[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-cbow\",args)) "]
92445[label="assignment\n i=argPos(\"-cbow\",args) "]
102446[label="expressionName\n i "]
102447[label="assignmentOperator\n = "]
102448[label="methodInvocation_lfno_primary\n argPos(\"-cbow\",args) "]
112449[label="methodName\n argPos "]
112450[label="argumentList\n \"-cbow\",args "]
122451[label="literal\n \"-cbow\" "]
122452[label="expressionName\n args "]
82453[label="literal\n 0 "]
72454[label="expressionStatement\n config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1); "]
82455[label="methodInvocation\n config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1) "]
92456[label="typeName\n config "]
92457[label="equalityExpression\n Integer.parseInt(args[i+1])==1 "]
102458[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
112459[label="typeName\n Integer "]
112460[label="arrayAccess_lfno_primary\n args[i+1] "]
122461[label="expressionName\n args "]
122462[label="additiveExpression\n i+1 "]
132463[label="expressionName\n i "]
132464[label="literal\n 1 "]
102465[label="literal\n 1 "]
62466[label="ifThenStatement\n if(config.useContinuousBagOfWords())config.setAlpha(0.05f); "]
72467[label="methodInvocation_lfno_primary\n config.useContinuousBagOfWords() "]
82468[label="typeName\n config "]
72469[label="expressionStatement\n config.setAlpha(0.05f); "]
82470[label="methodInvocation\n config.setAlpha(0.05f) "]
92471[label="typeName\n config "]
92472[label="literal\n 0.05f "]
62473[label="ifThenStatement\n if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1])); "]
72474[label="relationalExpression\n (i=argPos(\"-alpha\",args))>=0 "]
82475[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-alpha\",args)) "]
92476[label="assignment\n i=argPos(\"-alpha\",args) "]
102477[label="expressionName\n i "]
102478[label="assignmentOperator\n = "]
102479[label="methodInvocation_lfno_primary\n argPos(\"-alpha\",args) "]
112480[label="methodName\n argPos "]
112481[label="argumentList\n \"-alpha\",args "]
122482[label="literal\n \"-alpha\" "]
122483[label="expressionName\n args "]
82484[label="literal\n 0 "]
72485[label="expressionStatement\n config.setAlpha(Float.parseFloat(args[i+1])); "]
82486[label="methodInvocation\n config.setAlpha(Float.parseFloat(args[i+1])) "]
92487[label="typeName\n config "]
92488[label="methodInvocation_lfno_primary\n Float.parseFloat(args[i+1]) "]
102489[label="typeName\n Float "]
102490[label="arrayAccess_lfno_primary\n args[i+1] "]
112491[label="expressionName\n args "]
112492[label="additiveExpression\n i+1 "]
122493[label="expressionName\n i "]
122494[label="literal\n 1 "]
62495[label="ifThenStatement\n if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1])); "]
72496[label="relationalExpression\n (i=argPos(\"-window\",args))>=0 "]
82497[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-window\",args)) "]
92498[label="assignment\n i=argPos(\"-window\",args) "]
102499[label="expressionName\n i "]
102500[label="assignmentOperator\n = "]
102501[label="methodInvocation_lfno_primary\n argPos(\"-window\",args) "]
112502[label="methodName\n argPos "]
112503[label="argumentList\n \"-window\",args "]
122504[label="literal\n \"-window\" "]
122505[label="expressionName\n args "]
82506[label="literal\n 0 "]
72507[label="expressionStatement\n config.setWindow(Integer.parseInt(args[i+1])); "]
82508[label="methodInvocation\n config.setWindow(Integer.parseInt(args[i+1])) "]
92509[label="typeName\n config "]
92510[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102511[label="typeName\n Integer "]
102512[label="arrayAccess_lfno_primary\n args[i+1] "]
112513[label="expressionName\n args "]
112514[label="additiveExpression\n i+1 "]
122515[label="expressionName\n i "]
122516[label="literal\n 1 "]
62517[label="ifThenStatement\n if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1])); "]
72518[label="relationalExpression\n (i=argPos(\"-sample\",args))>=0 "]
82519[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-sample\",args)) "]
92520[label="assignment\n i=argPos(\"-sample\",args) "]
102521[label="expressionName\n i "]
102522[label="assignmentOperator\n = "]
102523[label="methodInvocation_lfno_primary\n argPos(\"-sample\",args) "]
112524[label="methodName\n argPos "]
112525[label="argumentList\n \"-sample\",args "]
122526[label="literal\n \"-sample\" "]
122527[label="expressionName\n args "]
82528[label="literal\n 0 "]
72529[label="expressionStatement\n config.setSample(Float.parseFloat(args[i+1])); "]
82530[label="methodInvocation\n config.setSample(Float.parseFloat(args[i+1])) "]
92531[label="typeName\n config "]
92532[label="methodInvocation_lfno_primary\n Float.parseFloat(args[i+1]) "]
102533[label="typeName\n Float "]
102534[label="arrayAccess_lfno_primary\n args[i+1] "]
112535[label="expressionName\n args "]
112536[label="additiveExpression\n i+1 "]
122537[label="expressionName\n i "]
122538[label="literal\n 1 "]
62539[label="ifThenStatement\n if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1); "]
72540[label="relationalExpression\n (i=argPos(\"-hs\",args))>=0 "]
82541[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-hs\",args)) "]
92542[label="assignment\n i=argPos(\"-hs\",args) "]
102543[label="expressionName\n i "]
102544[label="assignmentOperator\n = "]
102545[label="methodInvocation_lfno_primary\n argPos(\"-hs\",args) "]
112546[label="methodName\n argPos "]
112547[label="argumentList\n \"-hs\",args "]
122548[label="literal\n \"-hs\" "]
122549[label="expressionName\n args "]
82550[label="literal\n 0 "]
72551[label="expressionStatement\n config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1); "]
82552[label="methodInvocation\n config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1) "]
92553[label="typeName\n config "]
92554[label="equalityExpression\n Integer.parseInt(args[i+1])==1 "]
102555[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
112556[label="typeName\n Integer "]
112557[label="arrayAccess_lfno_primary\n args[i+1] "]
122558[label="expressionName\n args "]
122559[label="additiveExpression\n i+1 "]
132560[label="expressionName\n i "]
132561[label="literal\n 1 "]
102562[label="literal\n 1 "]
62563[label="ifThenStatement\n if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1])); "]
72564[label="relationalExpression\n (i=argPos(\"-negative\",args))>=0 "]
82565[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-negative\",args)) "]
92566[label="assignment\n i=argPos(\"-negative\",args) "]
102567[label="expressionName\n i "]
102568[label="assignmentOperator\n = "]
102569[label="methodInvocation_lfno_primary\n argPos(\"-negative\",args) "]
112570[label="methodName\n argPos "]
112571[label="argumentList\n \"-negative\",args "]
122572[label="literal\n \"-negative\" "]
122573[label="expressionName\n args "]
82574[label="literal\n 0 "]
72575[label="expressionStatement\n config.setNegative(Integer.parseInt(args[i+1])); "]
82576[label="methodInvocation\n config.setNegative(Integer.parseInt(args[i+1])) "]
92577[label="typeName\n config "]
92578[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102579[label="typeName\n Integer "]
102580[label="arrayAccess_lfno_primary\n args[i+1] "]
112581[label="expressionName\n args "]
112582[label="additiveExpression\n i+1 "]
122583[label="expressionName\n i "]
122584[label="literal\n 1 "]
62585[label="ifThenStatement\n if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1])); "]
72586[label="relationalExpression\n (i=argPos(\"-threads\",args))>=0 "]
82587[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-threads\",args)) "]
92588[label="assignment\n i=argPos(\"-threads\",args) "]
102589[label="expressionName\n i "]
102590[label="assignmentOperator\n = "]
102591[label="methodInvocation_lfno_primary\n argPos(\"-threads\",args) "]
112592[label="methodName\n argPos "]
112593[label="argumentList\n \"-threads\",args "]
122594[label="literal\n \"-threads\" "]
122595[label="expressionName\n args "]
82596[label="literal\n 0 "]
72597[label="expressionStatement\n config.setNumThreads(Integer.parseInt(args[i+1])); "]
82598[label="methodInvocation\n config.setNumThreads(Integer.parseInt(args[i+1])) "]
92599[label="typeName\n config "]
92600[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102601[label="typeName\n Integer "]
102602[label="arrayAccess_lfno_primary\n args[i+1] "]
112603[label="expressionName\n args "]
112604[label="additiveExpression\n i+1 "]
122605[label="expressionName\n i "]
122606[label="literal\n 1 "]
62607[label="ifThenStatement\n if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1])); "]
72608[label="relationalExpression\n (i=argPos(\"-iter\",args))>=0 "]
82609[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-iter\",args)) "]
92610[label="assignment\n i=argPos(\"-iter\",args) "]
102611[label="expressionName\n i "]
102612[label="assignmentOperator\n = "]
102613[label="methodInvocation_lfno_primary\n argPos(\"-iter\",args) "]
112614[label="methodName\n argPos "]
112615[label="argumentList\n \"-iter\",args "]
122616[label="literal\n \"-iter\" "]
122617[label="expressionName\n args "]
82618[label="literal\n 0 "]
72619[label="expressionStatement\n config.setIter(Integer.parseInt(args[i+1])); "]
82620[label="methodInvocation\n config.setIter(Integer.parseInt(args[i+1])) "]
92621[label="typeName\n config "]
92622[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102623[label="typeName\n Integer "]
102624[label="arrayAccess_lfno_primary\n args[i+1] "]
112625[label="expressionName\n args "]
112626[label="additiveExpression\n i+1 "]
122627[label="expressionName\n i "]
122628[label="literal\n 1 "]
62629[label="ifThenStatement\n if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1])); "]
72630[label="relationalExpression\n (i=argPos(\"-min-count\",args))>=0 "]
82631[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-min-count\",args)) "]
92632[label="assignment\n i=argPos(\"-min-count\",args) "]
102633[label="expressionName\n i "]
102634[label="assignmentOperator\n = "]
102635[label="methodInvocation_lfno_primary\n argPos(\"-min-count\",args) "]
112636[label="methodName\n argPos "]
112637[label="argumentList\n \"-min-count\",args "]
122638[label="literal\n \"-min-count\" "]
122639[label="expressionName\n args "]
82640[label="literal\n 0 "]
72641[label="expressionStatement\n config.setMinCount(Integer.parseInt(args[i+1])); "]
82642[label="methodInvocation\n config.setMinCount(Integer.parseInt(args[i+1])) "]
92643[label="typeName\n config "]
92644[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102645[label="typeName\n Integer "]
102646[label="arrayAccess_lfno_primary\n args[i+1] "]
112647[label="expressionName\n args "]
112648[label="additiveExpression\n i+1 "]
122649[label="expressionName\n i "]
122650[label="literal\n 1 "]
02651[label="compilationUnit\n packagecom.hankcs.hanlp.mining.word2vec;importcom.hankcs.hanlp.algorithm.MaxHeap;importjava.util.*;publicabstractclassAbstractVectorModel<K>{Map<K,Vector>storage;publicAbstractVectorModel(Map<K,Vector>storage){this.storage=storage;}publicAbstractVectorModel(){storage=newTreeMap<K,Vector>();}finalpublicVectorvector(Kkey){Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector;}publicfloatsimilarity(Kwhat,Kwith){VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith);}publicList<Map.Entry<K,Float>>nearest(Kkey,intsize){Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size);}privateList<Map.Entry<K,Float>>nearest(Kkey,Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector){returnnearest(vector,10);}publicList<Map.Entry<K,Float>>nearest(Kkey){returnnearest(key,10);}finalList<Map.Entry<K,Float>>queryNearest(Stringquery,intsize){if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();}}publicabstractVectorquery(Stringquery);publicintsize(){returnstorage.size();}publicintdimension(){if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size();}publicVectorremove(Kkey){returnstorage.remove(key);}}<EOF> "]
12652[label="packageDeclaration\n packagecom.hankcs.hanlp.mining.word2vec; "]
22653[label="packageName\n com.hankcs.hanlp.mining.word2vec "]
32654[label="packageName\n com.hankcs.hanlp.mining "]
42655[label="packageName\n com.hankcs.hanlp "]
52656[label="packageName\n com.hankcs "]
62657[label="packageName\n com "]
12658[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.algorithm.MaxHeap; "]
22659[label="typeName\n com.hankcs.hanlp.algorithm.MaxHeap "]
32660[label="packageOrTypeName\n com.hankcs.hanlp.algorithm "]
42661[label="packageOrTypeName\n com.hankcs.hanlp "]
52662[label="packageOrTypeName\n com.hankcs "]
62663[label="packageOrTypeName\n com "]
12664[label="typeImportOnDemandDeclaration\n importjava.util.*; "]
22665[label="packageOrTypeName\n java.util "]
32666[label="packageOrTypeName\n java "]
12667[label="normalClassDeclaration\n publicabstractclassAbstractVectorModel<K>{Map<K,Vector>storage;publicAbstractVectorModel(Map<K,Vector>storage){this.storage=storage;}publicAbstractVectorModel(){storage=newTreeMap<K,Vector>();}finalpublicVectorvector(Kkey){Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector;}publicfloatsimilarity(Kwhat,Kwith){VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith);}publicList<Map.Entry<K,Float>>nearest(Kkey,intsize){Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size);}privateList<Map.Entry<K,Float>>nearest(Kkey,Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector){returnnearest(vector,10);}publicList<Map.Entry<K,Float>>nearest(Kkey){returnnearest(key,10);}finalList<Map.Entry<K,Float>>queryNearest(Stringquery,intsize){if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();}}publicabstractVectorquery(Stringquery);publicintsize(){returnstorage.size();}publicintdimension(){if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size();}publicVectorremove(Kkey){returnstorage.remove(key);}} "]
22668[label="classModifier\n public "]
22669[label="classModifier\n abstract "]
22670[label="typeParameters\n <K> "]
32671[label="typeParameter\n K "]
22672[label="classBody\n {Map<K,Vector>storage;publicAbstractVectorModel(Map<K,Vector>storage){this.storage=storage;}publicAbstractVectorModel(){storage=newTreeMap<K,Vector>();}finalpublicVectorvector(Kkey){Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector;}publicfloatsimilarity(Kwhat,Kwith){VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith);}publicList<Map.Entry<K,Float>>nearest(Kkey,intsize){Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size);}privateList<Map.Entry<K,Float>>nearest(Kkey,Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector){returnnearest(vector,10);}publicList<Map.Entry<K,Float>>nearest(Kkey){returnnearest(key,10);}finalList<Map.Entry<K,Float>>queryNearest(Stringquery,intsize){if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();}}publicabstractVectorquery(Stringquery);publicintsize(){returnstorage.size();}publicintdimension(){if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size();}publicVectorremove(Kkey){returnstorage.remove(key);}} "]
32673[label="fieldDeclaration\n Map<K,Vector>storage; "]
42674[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<K,Vector> "]
52675[label="typeArguments\n <K,Vector> "]
62676[label="typeArgumentList\n K,Vector "]
72677[label="classType_lfno_classOrInterfaceType\n K "]
72678[label="classType_lfno_classOrInterfaceType\n Vector "]
42679[label="variableDeclaratorId\n storage "]
32680[label="constructorDeclaration\n publicAbstractVectorModel(Map<K,Vector>storage){this.storage=storage;} "]
42681[label="constructorModifier\n public "]
42682[label="constructorDeclarator\n AbstractVectorModel(Map<K,Vector>storage) "]
52683[label="simpleTypeName\n AbstractVectorModel "]
52684[label="formalParameter\n Map<K,Vector>storage "]
62685[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<K,Vector> "]
72686[label="typeArguments\n <K,Vector> "]
82687[label="typeArgumentList\n K,Vector "]
92688[label="classType_lfno_classOrInterfaceType\n K "]
92689[label="classType_lfno_classOrInterfaceType\n Vector "]
62690[label="variableDeclaratorId\n storage "]
42691[label="constructorBody\n {this.storage=storage;} "]
52692[label="expressionStatement\n this.storage=storage; "]
62693[label="assignment\n this.storage=storage "]
72694[label="fieldAccess\n this.storage "]
82695[label="primaryNoNewArray_lfno_primary\n this "]
72696[label="assignmentOperator\n = "]
72697[label="expressionName\n storage "]
32698[label="constructorDeclaration\n publicAbstractVectorModel(){storage=newTreeMap<K,Vector>();} "]
42699[label="constructorModifier\n public "]
42700[label="constructorDeclarator\n AbstractVectorModel() "]
52701[label="simpleTypeName\n AbstractVectorModel "]
42702[label="constructorBody\n {storage=newTreeMap<K,Vector>();} "]
52703[label="expressionStatement\n storage=newTreeMap<K,Vector>(); "]
62704[label="assignment\n storage=newTreeMap<K,Vector>() "]
72705[label="expressionName\n storage "]
72706[label="assignmentOperator\n = "]
72707[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<K,Vector>() "]
82708[label="typeArguments\n <K,Vector> "]
92709[label="typeArgumentList\n K,Vector "]
102710[label="classType_lfno_classOrInterfaceType\n K "]
102711[label="classType_lfno_classOrInterfaceType\n Vector "]
32712[label="methodDeclaration\n finalpublicVectorvector(Kkey){Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector;} "]
42713[label="methodModifier\n final "]
42714[label="methodModifier\n public "]
42715[label="methodHeader\n Vectorvector(Kkey) "]
52716[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
52717[label="methodDeclarator\n vector(Kkey) "]
62718[label="formalParameter\n Kkey "]
72719[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
72720[label="variableDeclaratorId\n key "]
42721[label="block\n {Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector;} "]
52722[label="blockStatements\n Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector; "]
62723[label="localVariableDeclarationStatement\n Vectorvector=storage.get(key); "]
72724[label="localVariableDeclaration\n Vectorvector=storage.get(key) "]
82725[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
82726[label="variableDeclarator\n vector=storage.get(key) "]
92727[label="variableDeclaratorId\n vector "]
92728[label="methodInvocation_lfno_primary\n storage.get(key) "]
102729[label="typeName\n storage "]
102730[label="expressionName\n key "]
62731[label="ifThenStatement\n if(vector==null)returnnull; "]
72732[label="equalityExpression\n vector==null "]
82733[label="expressionName\n vector "]
82734[label="literal\n null "]
72735[label="returnStatement\n returnnull; "]
82736[label="literal\n null "]
62737[label="returnStatement\n returnvector; "]
72738[label="expressionName\n vector "]
32739[label="methodDeclaration\n publicfloatsimilarity(Kwhat,Kwith){VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith);} "]
42740[label="methodModifier\n public "]
42741[label="methodHeader\n floatsimilarity(Kwhat,Kwith) "]
52742[label="floatingPointType\n float "]
52743[label="methodDeclarator\n similarity(Kwhat,Kwith) "]
62744[label="formalParameterList\n Kwhat,Kwith "]
72745[label="formalParameter\n Kwhat "]
82746[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
82747[label="variableDeclaratorId\n what "]
72748[label="formalParameter\n Kwith "]
82749[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
82750[label="variableDeclaratorId\n with "]
42751[label="block\n {VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith);} "]
52752[label="blockStatements\n VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith); "]
62753[label="localVariableDeclarationStatement\n VectorvectorWhat=storage.get(what); "]
72754[label="localVariableDeclaration\n VectorvectorWhat=storage.get(what) "]
82755[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
82756[label="variableDeclarator\n vectorWhat=storage.get(what) "]
92757[label="variableDeclaratorId\n vectorWhat "]
92758[label="methodInvocation_lfno_primary\n storage.get(what) "]
102759[label="typeName\n storage "]
102760[label="expressionName\n what "]
62761[label="ifThenStatement\n if(vectorWhat==null){return-1f;} "]
72762[label="equalityExpression\n vectorWhat==null "]
82763[label="expressionName\n vectorWhat "]
82764[label="literal\n null "]
72765[label="block\n {return-1f;} "]
82766[label="returnStatement\n return-1f; "]
92767[label="unaryExpression\n -1f "]
102768[label="literal\n 1f "]
62769[label="localVariableDeclarationStatement\n VectorvectorWith=storage.get(with); "]
72770[label="localVariableDeclaration\n VectorvectorWith=storage.get(with) "]
82771[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
82772[label="variableDeclarator\n vectorWith=storage.get(with) "]
92773[label="variableDeclaratorId\n vectorWith "]
92774[label="methodInvocation_lfno_primary\n storage.get(with) "]
102775[label="typeName\n storage "]
102776[label="expressionName\n with "]
62777[label="ifThenStatement\n if(vectorWith==null){return-1f;} "]
72778[label="equalityExpression\n vectorWith==null "]
82779[label="expressionName\n vectorWith "]
82780[label="literal\n null "]
72781[label="block\n {return-1f;} "]
82782[label="returnStatement\n return-1f; "]
92783[label="unaryExpression\n -1f "]
102784[label="literal\n 1f "]
62785[label="returnStatement\n returnvectorWhat.cosineForUnitVector(vectorWith); "]
72786[label="methodInvocation_lfno_primary\n vectorWhat.cosineForUnitVector(vectorWith) "]
82787[label="typeName\n vectorWhat "]
82788[label="expressionName\n vectorWith "]
32789[label="methodDeclaration\n publicList<Map.Entry<K,Float>>nearest(Kkey,intsize){Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size);} "]
42790[label="methodModifier\n public "]
42791[label="methodHeader\n List<Map.Entry<K,Float>>nearest(Kkey,intsize) "]
52792[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
62793[label="typeArguments\n <Map.Entry<K,Float>> "]
72794[label="classOrInterfaceType\n Map.Entry<K,Float> "]
82795[label="classType_lfno_classOrInterfaceType\n Map "]
82796[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
92797[label="typeArguments\n <K,Float> "]
102798[label="typeArgumentList\n K,Float "]
112799[label="classType_lfno_classOrInterfaceType\n K "]
112800[label="classType_lfno_classOrInterfaceType\n Float "]
52801[label="methodDeclarator\n nearest(Kkey,intsize) "]
62802[label="formalParameterList\n Kkey,intsize "]
72803[label="formalParameter\n Kkey "]
82804[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
82805[label="variableDeclaratorId\n key "]
72806[label="formalParameter\n intsize "]
82807[label="integralType\n int "]
82808[label="variableDeclaratorId\n size "]
42809[label="block\n {Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size);} "]
52810[label="blockStatements\n Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size); "]
62811[label="localVariableDeclarationStatement\n Vectorvector=storage.get(key); "]
72812[label="localVariableDeclaration\n Vectorvector=storage.get(key) "]
82813[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
82814[label="variableDeclarator\n vector=storage.get(key) "]
92815[label="variableDeclaratorId\n vector "]
92816[label="methodInvocation_lfno_primary\n storage.get(key) "]
102817[label="typeName\n storage "]
102818[label="expressionName\n key "]
62819[label="ifThenStatement\n if(vector==null){returnCollections.emptyList();} "]
72820[label="equalityExpression\n vector==null "]
82821[label="expressionName\n vector "]
82822[label="literal\n null "]
72823[label="block\n {returnCollections.emptyList();} "]
82824[label="returnStatement\n returnCollections.emptyList(); "]
92825[label="methodInvocation_lfno_primary\n Collections.emptyList() "]
102826[label="typeName\n Collections "]
62827[label="returnStatement\n returnnearest(key,vector,size); "]
72828[label="methodInvocation_lfno_primary\n nearest(key,vector,size) "]
82829[label="methodName\n nearest "]
82830[label="argumentList\n key,vector,size "]
92831[label="expressionName\n key "]
92832[label="expressionName\n vector "]
92833[label="expressionName\n size "]
32834[label="methodDeclaration\n privateList<Map.Entry<K,Float>>nearest(Kkey,Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();} "]
42835[label="methodModifier\n private "]
42836[label="methodHeader\n List<Map.Entry<K,Float>>nearest(Kkey,Vectorvector,intsize) "]
52837[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
62838[label="typeArguments\n <Map.Entry<K,Float>> "]
72839[label="classOrInterfaceType\n Map.Entry<K,Float> "]
82840[label="classType_lfno_classOrInterfaceType\n Map "]
82841[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
92842[label="typeArguments\n <K,Float> "]
102843[label="typeArgumentList\n K,Float "]
112844[label="classType_lfno_classOrInterfaceType\n K "]
112845[label="classType_lfno_classOrInterfaceType\n Float "]
52846[label="methodDeclarator\n nearest(Kkey,Vectorvector,intsize) "]
62847[label="formalParameterList\n Kkey,Vectorvector,intsize "]
72848[label="formalParameters\n Kkey,Vectorvector "]
82849[label="formalParameter\n Kkey "]
92850[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
92851[label="variableDeclaratorId\n key "]
82852[label="formalParameter\n Vectorvector "]
92853[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
92854[label="variableDeclaratorId\n vector "]
72855[label="formalParameter\n intsize "]
82856[label="integralType\n int "]
82857[label="variableDeclaratorId\n size "]
42858[label="block\n {MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();} "]
52859[label="blockStatements\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList(); "]
62860[label="localVariableDeclarationStatement\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}); "]
72861[label="localVariableDeclaration\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
82862[label="unannClassType_lfno_unannClassOrInterfaceType\n MaxHeap<Map.Entry<K,Float>> "]
92863[label="typeArguments\n <Map.Entry<K,Float>> "]
102864[label="classOrInterfaceType\n Map.Entry<K,Float> "]
112865[label="classType_lfno_classOrInterfaceType\n Map "]
112866[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
122867[label="typeArguments\n <K,Float> "]
132868[label="typeArgumentList\n K,Float "]
142869[label="classType_lfno_classOrInterfaceType\n K "]
142870[label="classType_lfno_classOrInterfaceType\n Float "]
82871[label="variableDeclarator\n maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
92872[label="variableDeclaratorId\n maxHeap "]
92873[label="classInstanceCreationExpression_lfno_primary\n newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
102874[label="typeArguments\n <Map.Entry<K,Float>> "]
112875[label="classOrInterfaceType\n Map.Entry<K,Float> "]
122876[label="classType_lfno_classOrInterfaceType\n Map "]
122877[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
132878[label="typeArguments\n <K,Float> "]
142879[label="typeArgumentList\n K,Float "]
152880[label="classType_lfno_classOrInterfaceType\n K "]
152881[label="classType_lfno_classOrInterfaceType\n Float "]
102882[label="argumentList\n size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
112883[label="expressionName\n size "]
112884[label="classInstanceCreationExpression_lfno_primary\n newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
122885[label="typeArguments\n <Map.Entry<K,Float>> "]
132886[label="classOrInterfaceType\n Map.Entry<K,Float> "]
142887[label="classType_lfno_classOrInterfaceType\n Map "]
142888[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
152889[label="typeArguments\n <K,Float> "]
162890[label="typeArgumentList\n K,Float "]
172891[label="classType_lfno_classOrInterfaceType\n K "]
172892[label="classType_lfno_classOrInterfaceType\n Float "]
122893[label="classBody\n {@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
132894[label="methodDeclaration\n @Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());} "]
142895[label="markerAnnotation\n @Override "]
152896[label="typeName\n Override "]
142897[label="methodModifier\n public "]
142898[label="methodHeader\n intcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2) "]
152899[label="integralType\n int "]
152900[label="methodDeclarator\n compare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2) "]
162901[label="formalParameterList\n Map.Entry<K,Float>o1,Map.Entry<K,Float>o2 "]
172902[label="formalParameter\n Map.Entry<K,Float>o1 "]
182903[label="unannClassOrInterfaceType\n Map.Entry<K,Float> "]
192904[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
192905[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Float> "]
202906[label="typeArguments\n <K,Float> "]
212907[label="typeArgumentList\n K,Float "]
222908[label="classType_lfno_classOrInterfaceType\n K "]
222909[label="classType_lfno_classOrInterfaceType\n Float "]
182910[label="variableDeclaratorId\n o1 "]
172911[label="formalParameter\n Map.Entry<K,Float>o2 "]
182912[label="unannClassOrInterfaceType\n Map.Entry<K,Float> "]
192913[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
192914[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Float> "]
202915[label="typeArguments\n <K,Float> "]
212916[label="typeArgumentList\n K,Float "]
222917[label="classType_lfno_classOrInterfaceType\n K "]
222918[label="classType_lfno_classOrInterfaceType\n Float "]
182919[label="variableDeclaratorId\n o2 "]
142920[label="block\n {returno1.getValue().compareTo(o2.getValue());} "]
152921[label="returnStatement\n returno1.getValue().compareTo(o2.getValue()); "]
162922[label="primary\n o1.getValue().compareTo(o2.getValue()) "]
172923[label="methodInvocation_lfno_primary\n o1.getValue() "]
182924[label="typeName\n o1 "]
172925[label="methodInvocation_lf_primary\n .compareTo(o2.getValue()) "]
182926[label="methodInvocation_lfno_primary\n o2.getValue() "]
192927[label="typeName\n o2 "]
62928[label="enhancedForStatement\n for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));} "]
72929[label="unannClassOrInterfaceType\n Map.Entry<K,Vector> "]
82930[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
82931[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Vector> "]
92932[label="typeArguments\n <K,Vector> "]
102933[label="typeArgumentList\n K,Vector "]
112934[label="classType_lfno_classOrInterfaceType\n K "]
112935[label="classType_lfno_classOrInterfaceType\n Vector "]
72936[label="variableDeclaratorId\n entry "]
72937[label="methodInvocation_lfno_primary\n storage.entrySet() "]
82938[label="typeName\n storage "]
72939[label="block\n {if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));} "]
82940[label="blockStatements\n if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector))); "]
92941[label="ifThenStatement\n if(entry.getKey().equals(key)){continue;} "]
102942[label="primary\n entry.getKey().equals(key) "]
112943[label="methodInvocation_lfno_primary\n entry.getKey() "]
122944[label="typeName\n entry "]
112945[label="methodInvocation_lf_primary\n .equals(key) "]
122946[label="expressionName\n key "]
102947[label="block\n {continue;} "]
112948[label="continueStatement\n continue; "]
92949[label="expressionStatement\n maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector))); "]
102950[label="methodInvocation\n maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector))) "]
112951[label="typeName\n maxHeap "]
112952[label="classInstanceCreationExpression_lfno_primary\n newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)) "]
122953[label="typeArguments\n <K,Float> "]
132954[label="typeArgumentList\n K,Float "]
142955[label="classType_lfno_classOrInterfaceType\n K "]
142956[label="classType_lfno_classOrInterfaceType\n Float "]
122957[label="argumentList\n entry.getKey(),entry.getValue().cosineForUnitVector(vector) "]
132958[label="methodInvocation_lfno_primary\n entry.getKey() "]
142959[label="typeName\n entry "]
132960[label="primary\n entry.getValue().cosineForUnitVector(vector) "]
142961[label="methodInvocation_lfno_primary\n entry.getValue() "]
152962[label="typeName\n entry "]
142963[label="methodInvocation_lf_primary\n .cosineForUnitVector(vector) "]
152964[label="expressionName\n vector "]
62965[label="returnStatement\n returnmaxHeap.toList(); "]
72966[label="methodInvocation_lfno_primary\n maxHeap.toList() "]
82967[label="typeName\n maxHeap "]
32968[label="methodDeclaration\n publicList<Map.Entry<K,Float>>nearest(Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();} "]
42969[label="methodModifier\n public "]
42970[label="methodHeader\n List<Map.Entry<K,Float>>nearest(Vectorvector,intsize) "]
52971[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
62972[label="typeArguments\n <Map.Entry<K,Float>> "]
72973[label="classOrInterfaceType\n Map.Entry<K,Float> "]
82974[label="classType_lfno_classOrInterfaceType\n Map "]
82975[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
92976[label="typeArguments\n <K,Float> "]
102977[label="typeArgumentList\n K,Float "]
112978[label="classType_lfno_classOrInterfaceType\n K "]
112979[label="classType_lfno_classOrInterfaceType\n Float "]
52980[label="methodDeclarator\n nearest(Vectorvector,intsize) "]
62981[label="formalParameterList\n Vectorvector,intsize "]
72982[label="formalParameter\n Vectorvector "]
82983[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
82984[label="variableDeclaratorId\n vector "]
72985[label="formalParameter\n intsize "]
82986[label="integralType\n int "]
82987[label="variableDeclaratorId\n size "]
42988[label="block\n {MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();} "]
52989[label="blockStatements\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList(); "]
62990[label="localVariableDeclarationStatement\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}); "]
72991[label="localVariableDeclaration\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
82992[label="unannClassType_lfno_unannClassOrInterfaceType\n MaxHeap<Map.Entry<K,Float>> "]
92993[label="typeArguments\n <Map.Entry<K,Float>> "]
102994[label="classOrInterfaceType\n Map.Entry<K,Float> "]
112995[label="classType_lfno_classOrInterfaceType\n Map "]
112996[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
122997[label="typeArguments\n <K,Float> "]
132998[label="typeArgumentList\n K,Float "]
142999[label="classType_lfno_classOrInterfaceType\n K "]
143000[label="classType_lfno_classOrInterfaceType\n Float "]
83001[label="variableDeclarator\n maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
93002[label="variableDeclaratorId\n maxHeap "]
93003[label="classInstanceCreationExpression_lfno_primary\n newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
103004[label="typeArguments\n <Map.Entry<K,Float>> "]
113005[label="classOrInterfaceType\n Map.Entry<K,Float> "]
123006[label="classType_lfno_classOrInterfaceType\n Map "]
123007[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
133008[label="typeArguments\n <K,Float> "]
143009[label="typeArgumentList\n K,Float "]
153010[label="classType_lfno_classOrInterfaceType\n K "]
153011[label="classType_lfno_classOrInterfaceType\n Float "]
103012[label="argumentList\n size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
113013[label="expressionName\n size "]
113014[label="classInstanceCreationExpression_lfno_primary\n newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
123015[label="typeArguments\n <Map.Entry<K,Float>> "]
133016[label="classOrInterfaceType\n Map.Entry<K,Float> "]
143017[label="classType_lfno_classOrInterfaceType\n Map "]
143018[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
153019[label="typeArguments\n <K,Float> "]
163020[label="typeArgumentList\n K,Float "]
173021[label="classType_lfno_classOrInterfaceType\n K "]
173022[label="classType_lfno_classOrInterfaceType\n Float "]
123023[label="classBody\n {@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
133024[label="methodDeclaration\n @Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());} "]
143025[label="markerAnnotation\n @Override "]
153026[label="typeName\n Override "]
143027[label="methodModifier\n public "]
143028[label="methodHeader\n intcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2) "]
153029[label="integralType\n int "]
153030[label="methodDeclarator\n compare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2) "]
163031[label="formalParameterList\n Map.Entry<K,Float>o1,Map.Entry<K,Float>o2 "]
173032[label="formalParameter\n Map.Entry<K,Float>o1 "]
183033[label="unannClassOrInterfaceType\n Map.Entry<K,Float> "]
193034[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
193035[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Float> "]
203036[label="typeArguments\n <K,Float> "]
213037[label="typeArgumentList\n K,Float "]
223038[label="classType_lfno_classOrInterfaceType\n K "]
223039[label="classType_lfno_classOrInterfaceType\n Float "]
183040[label="variableDeclaratorId\n o1 "]
173041[label="formalParameter\n Map.Entry<K,Float>o2 "]
183042[label="unannClassOrInterfaceType\n Map.Entry<K,Float> "]
193043[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
193044[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Float> "]
203045[label="typeArguments\n <K,Float> "]
213046[label="typeArgumentList\n K,Float "]
223047[label="classType_lfno_classOrInterfaceType\n K "]
223048[label="classType_lfno_classOrInterfaceType\n Float "]
183049[label="variableDeclaratorId\n o2 "]
143050[label="block\n {returno1.getValue().compareTo(o2.getValue());} "]
153051[label="returnStatement\n returno1.getValue().compareTo(o2.getValue()); "]
163052[label="primary\n o1.getValue().compareTo(o2.getValue()) "]
173053[label="methodInvocation_lfno_primary\n o1.getValue() "]
183054[label="typeName\n o1 "]
173055[label="methodInvocation_lf_primary\n .compareTo(o2.getValue()) "]
183056[label="methodInvocation_lfno_primary\n o2.getValue() "]
193057[label="typeName\n o2 "]
63058[label="enhancedForStatement\n for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));} "]
73059[label="unannClassOrInterfaceType\n Map.Entry<K,Vector> "]
83060[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
83061[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Vector> "]
93062[label="typeArguments\n <K,Vector> "]
103063[label="typeArgumentList\n K,Vector "]
113064[label="classType_lfno_classOrInterfaceType\n K "]
113065[label="classType_lfno_classOrInterfaceType\n Vector "]
73066[label="variableDeclaratorId\n entry "]
73067[label="methodInvocation_lfno_primary\n storage.entrySet() "]
83068[label="typeName\n storage "]
73069[label="block\n {maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));} "]
83070[label="expressionStatement\n maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector))); "]
93071[label="methodInvocation\n maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector))) "]
103072[label="typeName\n maxHeap "]
103073[label="classInstanceCreationExpression_lfno_primary\n newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)) "]
113074[label="typeArguments\n <K,Float> "]
123075[label="typeArgumentList\n K,Float "]
133076[label="classType_lfno_classOrInterfaceType\n K "]
133077[label="classType_lfno_classOrInterfaceType\n Float "]
113078[label="argumentList\n entry.getKey(),entry.getValue().cosineForUnitVector(vector) "]
123079[label="methodInvocation_lfno_primary\n entry.getKey() "]
133080[label="typeName\n entry "]
123081[label="primary\n entry.getValue().cosineForUnitVector(vector) "]
133082[label="methodInvocation_lfno_primary\n entry.getValue() "]
143083[label="typeName\n entry "]
133084[label="methodInvocation_lf_primary\n .cosineForUnitVector(vector) "]
143085[label="expressionName\n vector "]
63086[label="returnStatement\n returnmaxHeap.toList(); "]
73087[label="methodInvocation_lfno_primary\n maxHeap.toList() "]
83088[label="typeName\n maxHeap "]
33089[label="methodDeclaration\n publicList<Map.Entry<K,Float>>nearest(Vectorvector){returnnearest(vector,10);} "]
43090[label="methodModifier\n public "]
43091[label="methodHeader\n List<Map.Entry<K,Float>>nearest(Vectorvector) "]
53092[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
63093[label="typeArguments\n <Map.Entry<K,Float>> "]
73094[label="classOrInterfaceType\n Map.Entry<K,Float> "]
83095[label="classType_lfno_classOrInterfaceType\n Map "]
83096[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
93097[label="typeArguments\n <K,Float> "]
103098[label="typeArgumentList\n K,Float "]
113099[label="classType_lfno_classOrInterfaceType\n K "]
113100[label="classType_lfno_classOrInterfaceType\n Float "]
53101[label="methodDeclarator\n nearest(Vectorvector) "]
63102[label="formalParameter\n Vectorvector "]
73103[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
73104[label="variableDeclaratorId\n vector "]
43105[label="block\n {returnnearest(vector,10);} "]
53106[label="returnStatement\n returnnearest(vector,10); "]
63107[label="methodInvocation_lfno_primary\n nearest(vector,10) "]
73108[label="methodName\n nearest "]
73109[label="argumentList\n vector,10 "]
83110[label="expressionName\n vector "]
83111[label="literal\n 10 "]
33112[label="methodDeclaration\n publicList<Map.Entry<K,Float>>nearest(Kkey){returnnearest(key,10);} "]
43113[label="methodModifier\n public "]
43114[label="methodHeader\n List<Map.Entry<K,Float>>nearest(Kkey) "]
53115[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
63116[label="typeArguments\n <Map.Entry<K,Float>> "]
73117[label="classOrInterfaceType\n Map.Entry<K,Float> "]
83118[label="classType_lfno_classOrInterfaceType\n Map "]
83119[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
93120[label="typeArguments\n <K,Float> "]
103121[label="typeArgumentList\n K,Float "]
113122[label="classType_lfno_classOrInterfaceType\n K "]
113123[label="classType_lfno_classOrInterfaceType\n Float "]
53124[label="methodDeclarator\n nearest(Kkey) "]
63125[label="formalParameter\n Kkey "]
73126[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
73127[label="variableDeclaratorId\n key "]
43128[label="block\n {returnnearest(key,10);} "]
53129[label="returnStatement\n returnnearest(key,10); "]
63130[label="methodInvocation_lfno_primary\n nearest(key,10) "]
73131[label="methodName\n nearest "]
73132[label="argumentList\n key,10 "]
83133[label="expressionName\n key "]
83134[label="literal\n 10 "]
33135[label="methodDeclaration\n finalList<Map.Entry<K,Float>>queryNearest(Stringquery,intsize){if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();}} "]
43136[label="methodModifier\n final "]
43137[label="methodHeader\n List<Map.Entry<K,Float>>queryNearest(Stringquery,intsize) "]
53138[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
63139[label="typeArguments\n <Map.Entry<K,Float>> "]
73140[label="classOrInterfaceType\n Map.Entry<K,Float> "]
83141[label="classType_lfno_classOrInterfaceType\n Map "]
83142[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
93143[label="typeArguments\n <K,Float> "]
103144[label="typeArgumentList\n K,Float "]
113145[label="classType_lfno_classOrInterfaceType\n K "]
113146[label="classType_lfno_classOrInterfaceType\n Float "]
53147[label="methodDeclarator\n queryNearest(Stringquery,intsize) "]
63148[label="formalParameterList\n Stringquery,intsize "]
73149[label="formalParameter\n Stringquery "]
83150[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
83151[label="variableDeclaratorId\n query "]
73152[label="formalParameter\n intsize "]
83153[label="integralType\n int "]
83154[label="variableDeclaratorId\n size "]
43155[label="block\n {if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();}} "]
53156[label="blockStatements\n if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();} "]
63157[label="ifThenStatement\n if(query==null||query.length()==0){returnCollections.emptyList();} "]
73158[label="conditionalOrExpression\n query==null||query.length()==0 "]
83159[label="equalityExpression\n query==null "]
93160[label="expressionName\n query "]
93161[label="literal\n null "]
83162[label="equalityExpression\n query.length()==0 "]
93163[label="methodInvocation_lfno_primary\n query.length() "]
103164[label="typeName\n query "]
93165[label="literal\n 0 "]
73166[label="block\n {returnCollections.emptyList();} "]
83167[label="returnStatement\n returnCollections.emptyList(); "]
93168[label="methodInvocation_lfno_primary\n Collections.emptyList() "]
103169[label="typeName\n Collections "]
63170[label="tryStatement\n try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();} "]
73171[label="block\n {returnnearest(query(query),size);} "]
83172[label="returnStatement\n returnnearest(query(query),size); "]
93173[label="methodInvocation_lfno_primary\n nearest(query(query),size) "]
103174[label="methodName\n nearest "]
103175[label="argumentList\n query(query),size "]
113176[label="methodInvocation_lfno_primary\n query(query) "]
123177[label="methodName\n query "]
123178[label="expressionName\n query "]
113179[label="expressionName\n size "]
73180[label="catchClause\n catch(Exceptione){returnCollections.emptyList();} "]
83181[label="catchFormalParameter\n Exceptione "]
93182[label="unannClassType\n Exception "]
93183[label="variableDeclaratorId\n e "]
83184[label="block\n {returnCollections.emptyList();} "]
93185[label="returnStatement\n returnCollections.emptyList(); "]
103186[label="methodInvocation_lfno_primary\n Collections.emptyList() "]
113187[label="typeName\n Collections "]
33188[label="methodDeclaration\n publicabstractVectorquery(Stringquery); "]
43189[label="methodModifier\n public "]
43190[label="methodModifier\n abstract "]
43191[label="methodHeader\n Vectorquery(Stringquery) "]
53192[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
53193[label="methodDeclarator\n query(Stringquery) "]
63194[label="formalParameter\n Stringquery "]
73195[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
73196[label="variableDeclaratorId\n query "]
43197[label="methodBody\n ; "]
33198[label="methodDeclaration\n publicintsize(){returnstorage.size();} "]
43199[label="methodModifier\n public "]
43200[label="methodHeader\n intsize() "]
53201[label="integralType\n int "]
53202[label="methodDeclarator\n size() "]
43203[label="block\n {returnstorage.size();} "]
53204[label="returnStatement\n returnstorage.size(); "]
63205[label="methodInvocation_lfno_primary\n storage.size() "]
73206[label="typeName\n storage "]
33207[label="methodDeclaration\n publicintdimension(){if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size();} "]
43208[label="methodModifier\n public "]
43209[label="methodHeader\n intdimension() "]
53210[label="integralType\n int "]
53211[label="methodDeclarator\n dimension() "]
43212[label="block\n {if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size();} "]
53213[label="blockStatements\n if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size(); "]
63214[label="ifThenStatement\n if(storage==null||storage.isEmpty()){return0;} "]
73215[label="conditionalOrExpression\n storage==null||storage.isEmpty() "]
83216[label="equalityExpression\n storage==null "]
93217[label="expressionName\n storage "]
93218[label="literal\n null "]
83219[label="methodInvocation_lfno_primary\n storage.isEmpty() "]
93220[label="typeName\n storage "]
73221[label="block\n {return0;} "]
83222[label="returnStatement\n return0; "]
93223[label="literal\n 0 "]
63224[label="returnStatement\n returnstorage.values().iterator().next().size(); "]
73225[label="primary\n storage.values().iterator().next().size() "]
83226[label="methodInvocation_lfno_primary\n storage.values() "]
93227[label="typeName\n storage "]
83228[label="methodInvocation_lf_primary\n .iterator() "]
83229[label="methodInvocation_lf_primary\n .next() "]
83230[label="methodInvocation_lf_primary\n .size() "]
33231[label="methodDeclaration\n publicVectorremove(Kkey){returnstorage.remove(key);} "]
43232[label="methodModifier\n public "]
43233[label="methodHeader\n Vectorremove(Kkey) "]
53234[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
53235[label="methodDeclarator\n remove(Kkey) "]
63236[label="formalParameter\n Kkey "]
73237[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
73238[label="variableDeclaratorId\n key "]
43239[label="block\n {returnstorage.remove(key);} "]
53240[label="returnStatement\n returnstorage.remove(key); "]
63241[label="methodInvocation_lfno_primary\n storage.remove(key) "]
73242[label="typeName\n storage "]
73243[label="expressionName\n key "]
03244[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;publicclassActionextendsAbstractInexactActionimplementsActionType{publicAction(){}publicAction(intname,intrel){super(name,rel);}}<EOF> "]
13245[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
23246[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
33247[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
43248[label="packageName\n com.hankcs.hanlp.dependency "]
53249[label="packageName\n com.hankcs.hanlp "]
63250[label="packageName\n com.hankcs "]
73251[label="packageName\n com "]
13252[label="normalClassDeclaration\n publicclassActionextendsAbstractInexactActionimplementsActionType{publicAction(){}publicAction(intname,intrel){super(name,rel);}} "]
23253[label="classModifier\n public "]
23254[label="superclass\n extendsAbstractInexactAction "]
33255[label="classType\n AbstractInexactAction "]
23256[label="superinterfaces\n implementsActionType "]
33257[label="classType\n ActionType "]
23258[label="classBody\n {publicAction(){}publicAction(intname,intrel){super(name,rel);}} "]
33259[label="constructorDeclaration\n publicAction(){} "]
43260[label="constructorModifier\n public "]
43261[label="constructorDeclarator\n Action() "]
53262[label="simpleTypeName\n Action "]
43263[label="constructorBody\n {} "]
33264[label="constructorDeclaration\n publicAction(intname,intrel){super(name,rel);} "]
43265[label="constructorModifier\n public "]
43266[label="constructorDeclarator\n Action(intname,intrel) "]
53267[label="simpleTypeName\n Action "]
53268[label="formalParameterList\n intname,intrel "]
63269[label="formalParameter\n intname "]
73270[label="integralType\n int "]
73271[label="variableDeclaratorId\n name "]
63272[label="formalParameter\n intrel "]
73273[label="integralType\n int "]
73274[label="variableDeclaratorId\n rel "]
43275[label="constructorBody\n {super(name,rel);} "]
53276[label="explicitConstructorInvocation\n super(name,rel); "]
63277[label="argumentList\n name,rel "]
73278[label="expressionName\n name "]
73279[label="expressionName\n rel "]
03280[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;publicclassActionFactoryimplementsActionType{publicstaticActionmake_shift(){returnnewAction(kShift,0);}publicstaticActionmake_left_arc(finalintrel){returnnewAction(kLeftArc,rel);}publicstaticActionmake_right_arc(finalintrel){returnnewAction(kRightArc,rel);}}<EOF> "]
13281[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
23282[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
33283[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
43284[label="packageName\n com.hankcs.hanlp.dependency "]
53285[label="packageName\n com.hankcs.hanlp "]
63286[label="packageName\n com.hankcs "]
73287[label="packageName\n com "]
13288[label="normalClassDeclaration\n publicclassActionFactoryimplementsActionType{publicstaticActionmake_shift(){returnnewAction(kShift,0);}publicstaticActionmake_left_arc(finalintrel){returnnewAction(kLeftArc,rel);}publicstaticActionmake_right_arc(finalintrel){returnnewAction(kRightArc,rel);}} "]
23289[label="classModifier\n public "]
23290[label="superinterfaces\n implementsActionType "]
33291[label="classType\n ActionType "]
23292[label="classBody\n {publicstaticActionmake_shift(){returnnewAction(kShift,0);}publicstaticActionmake_left_arc(finalintrel){returnnewAction(kLeftArc,rel);}publicstaticActionmake_right_arc(finalintrel){returnnewAction(kRightArc,rel);}} "]
33293[label="methodDeclaration\n publicstaticActionmake_shift(){returnnewAction(kShift,0);} "]
43294[label="methodModifier\n public "]
43295[label="methodModifier\n static "]
43296[label="methodHeader\n Actionmake_shift() "]
53297[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
53298[label="methodDeclarator\n make_shift() "]
43299[label="block\n {returnnewAction(kShift,0);} "]
53300[label="returnStatement\n returnnewAction(kShift,0); "]
63301[label="classInstanceCreationExpression_lfno_primary\n newAction(kShift,0) "]
73302[label="argumentList\n kShift,0 "]
83303[label="expressionName\n kShift "]
83304[label="literal\n 0 "]
33305[label="methodDeclaration\n publicstaticActionmake_left_arc(finalintrel){returnnewAction(kLeftArc,rel);} "]
43306[label="methodModifier\n public "]
43307[label="methodModifier\n static "]
43308[label="methodHeader\n Actionmake_left_arc(finalintrel) "]
53309[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
53310[label="methodDeclarator\n make_left_arc(finalintrel) "]
63311[label="formalParameter\n finalintrel "]
73312[label="variableModifier\n final "]
73313[label="integralType\n int "]
73314[label="variableDeclaratorId\n rel "]
43315[label="block\n {returnnewAction(kLeftArc,rel);} "]
53316[label="returnStatement\n returnnewAction(kLeftArc,rel); "]
63317[label="classInstanceCreationExpression_lfno_primary\n newAction(kLeftArc,rel) "]
73318[label="argumentList\n kLeftArc,rel "]
83319[label="expressionName\n kLeftArc "]
83320[label="expressionName\n rel "]
33321[label="methodDeclaration\n publicstaticActionmake_right_arc(finalintrel){returnnewAction(kRightArc,rel);} "]
43322[label="methodModifier\n public "]
43323[label="methodModifier\n static "]
43324[label="methodHeader\n Actionmake_right_arc(finalintrel) "]
53325[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
53326[label="methodDeclarator\n make_right_arc(finalintrel) "]
63327[label="formalParameter\n finalintrel "]
73328[label="variableModifier\n final "]
73329[label="integralType\n int "]
73330[label="variableDeclaratorId\n rel "]
43331[label="block\n {returnnewAction(kRightArc,rel);} "]
53332[label="returnStatement\n returnnewAction(kRightArc,rel); "]
63333[label="classInstanceCreationExpression_lfno_primary\n newAction(kRightArc,rel) "]
73334[label="argumentList\n kRightArc,rel "]
83335[label="expressionName\n kRightArc "]
83336[label="expressionName\n rel "]
03337[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;publicinterfaceActionType{intkNone=0;intkShift=1;intkLeftArc=2;intkRightArc=3;}<EOF> "]
13338[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
23339[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
33340[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
43341[label="packageName\n com.hankcs.hanlp.dependency "]
53342[label="packageName\n com.hankcs.hanlp "]
63343[label="packageName\n com.hankcs "]
73344[label="packageName\n com "]
13345[label="normalInterfaceDeclaration\n publicinterfaceActionType{intkNone=0;intkShift=1;intkLeftArc=2;intkRightArc=3;} "]
23346[label="interfaceModifier\n public "]
23347[label="interfaceBody\n {intkNone=0;intkShift=1;intkLeftArc=2;intkRightArc=3;} "]
33348[label="constantDeclaration\n intkNone=0; "]
43349[label="integralType\n int "]
43350[label="variableDeclarator\n kNone=0 "]
53351[label="variableDeclaratorId\n kNone "]
53352[label="literal\n 0 "]
33353[label="constantDeclaration\n intkShift=1; "]
43354[label="integralType\n int "]
43355[label="variableDeclarator\n kShift=1 "]
53356[label="variableDeclaratorId\n kShift "]
53357[label="literal\n 1 "]
33358[label="constantDeclaration\n intkLeftArc=2; "]
43359[label="integralType\n int "]
43360[label="variableDeclarator\n kLeftArc=2 "]
53361[label="variableDeclaratorId\n kLeftArc "]
53362[label="literal\n 2 "]
33363[label="constantDeclaration\n intkRightArc=3; "]
43364[label="integralType\n int "]
43365[label="variableDeclarator\n kRightArc=3 "]
53366[label="variableDeclaratorId\n kRightArc "]
53367[label="literal\n 3 "]
03368[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;importcom.hankcs.hanlp.dependency.nnparser.Dependency;importjava.util.ArrayList;importjava.util.List;publicclassActionUtilsimplementsActionType{publicstaticbooleanis_shift(finalActionact){return(act.name()==kShift);}publicstaticbooleanis_left_arc(finalActionact,int[]deprel){if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}publicstaticbooleanis_right_arc(finalActionact,int[]deprel){if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}voidget_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions){intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions);}voidget_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions){List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));}}voidget_oracle_actions2(Dependencyinstance,List<Action>actions){get_oracle_actions2(instance.heads,instance.deprels,actions);}voidget_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions){actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];}}voidget_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions){inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];}}}<EOF> "]
13369[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
23370[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
33371[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
43372[label="packageName\n com.hankcs.hanlp.dependency "]
53373[label="packageName\n com.hankcs.hanlp "]
63374[label="packageName\n com.hankcs "]
73375[label="packageName\n com "]
13376[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dependency.nnparser.Dependency; "]
23377[label="typeName\n com.hankcs.hanlp.dependency.nnparser.Dependency "]
33378[label="packageOrTypeName\n com.hankcs.hanlp.dependency.nnparser "]
43379[label="packageOrTypeName\n com.hankcs.hanlp.dependency "]
53380[label="packageOrTypeName\n com.hankcs.hanlp "]
63381[label="packageOrTypeName\n com.hankcs "]
73382[label="packageOrTypeName\n com "]
13383[label="singleTypeImportDeclaration\n importjava.util.ArrayList; "]
23384[label="typeName\n java.util.ArrayList "]
33385[label="packageOrTypeName\n java.util "]
43386[label="packageOrTypeName\n java "]
13387[label="singleTypeImportDeclaration\n importjava.util.List; "]
23388[label="typeName\n java.util.List "]
33389[label="packageOrTypeName\n java.util "]
43390[label="packageOrTypeName\n java "]
13391[label="normalClassDeclaration\n publicclassActionUtilsimplementsActionType{publicstaticbooleanis_shift(finalActionact){return(act.name()==kShift);}publicstaticbooleanis_left_arc(finalActionact,int[]deprel){if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}publicstaticbooleanis_right_arc(finalActionact,int[]deprel){if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}voidget_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions){intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions);}voidget_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions){List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));}}voidget_oracle_actions2(Dependencyinstance,List<Action>actions){get_oracle_actions2(instance.heads,instance.deprels,actions);}voidget_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions){actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];}}voidget_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions){inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];}}} "]
23392[label="classModifier\n public "]
23393[label="superinterfaces\n implementsActionType "]
33394[label="classType\n ActionType "]
23395[label="classBody\n {publicstaticbooleanis_shift(finalActionact){return(act.name()==kShift);}publicstaticbooleanis_left_arc(finalActionact,int[]deprel){if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}publicstaticbooleanis_right_arc(finalActionact,int[]deprel){if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}voidget_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions){intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions);}voidget_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions){List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));}}voidget_oracle_actions2(Dependencyinstance,List<Action>actions){get_oracle_actions2(instance.heads,instance.deprels,actions);}voidget_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions){actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];}}voidget_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions){inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];}}} "]
33396[label="methodDeclaration\n publicstaticbooleanis_shift(finalActionact){return(act.name()==kShift);} "]
43397[label="methodModifier\n public "]
43398[label="methodModifier\n static "]
43399[label="methodHeader\n booleanis_shift(finalActionact) "]
53400[label="unannPrimitiveType\n boolean "]
53401[label="methodDeclarator\n is_shift(finalActionact) "]
63402[label="formalParameter\n finalActionact "]
73403[label="variableModifier\n final "]
73404[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
73405[label="variableDeclaratorId\n act "]
43406[label="block\n {return(act.name()==kShift);} "]
53407[label="returnStatement\n return(act.name()==kShift); "]
63408[label="primaryNoNewArray_lfno_primary\n (act.name()==kShift) "]
73409[label="equalityExpression\n act.name()==kShift "]
83410[label="methodInvocation_lfno_primary\n act.name() "]
93411[label="typeName\n act "]
83412[label="expressionName\n kShift "]
33413[label="methodDeclaration\n publicstaticbooleanis_left_arc(finalActionact,int[]deprel){if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;} "]
43414[label="methodModifier\n public "]
43415[label="methodModifier\n static "]
43416[label="methodHeader\n booleanis_left_arc(finalActionact,int[]deprel) "]
53417[label="unannPrimitiveType\n boolean "]
53418[label="methodDeclarator\n is_left_arc(finalActionact,int[]deprel) "]
63419[label="formalParameterList\n finalActionact,int[]deprel "]
73420[label="formalParameter\n finalActionact "]
83421[label="variableModifier\n final "]
83422[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
83423[label="variableDeclaratorId\n act "]
73424[label="formalParameter\n int[]deprel "]
83425[label="unannArrayType\n int[] "]
93426[label="integralType\n int "]
93427[label="dims\n [] "]
83428[label="variableDeclaratorId\n deprel "]
43429[label="block\n {if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;} "]
53430[label="blockStatements\n if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse; "]
63431[label="ifThenStatement\n if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;} "]
73432[label="equalityExpression\n act.name()==kLeftArc "]
83433[label="methodInvocation_lfno_primary\n act.name() "]
93434[label="typeName\n act "]
83435[label="expressionName\n kLeftArc "]
73436[label="block\n {deprel[0]=act.rel();returntrue;} "]
83437[label="blockStatements\n deprel[0]=act.rel();returntrue; "]
93438[label="expressionStatement\n deprel[0]=act.rel(); "]
103439[label="assignment\n deprel[0]=act.rel() "]
113440[label="arrayAccess\n deprel[0] "]
123441[label="expressionName\n deprel "]
123442[label="literal\n 0 "]
113443[label="assignmentOperator\n = "]
113444[label="methodInvocation_lfno_primary\n act.rel() "]
123445[label="typeName\n act "]
93446[label="returnStatement\n returntrue; "]
103447[label="literal\n true "]
63448[label="expressionStatement\n deprel[0]=0; "]
73449[label="assignment\n deprel[0]=0 "]
83450[label="arrayAccess\n deprel[0] "]
93451[label="expressionName\n deprel "]
93452[label="literal\n 0 "]
83453[label="assignmentOperator\n = "]
83454[label="literal\n 0 "]
63455[label="returnStatement\n returnfalse; "]
73456[label="literal\n false "]
33457[label="methodDeclaration\n publicstaticbooleanis_right_arc(finalActionact,int[]deprel){if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;} "]
43458[label="methodModifier\n public "]
43459[label="methodModifier\n static "]
43460[label="methodHeader\n booleanis_right_arc(finalActionact,int[]deprel) "]
53461[label="unannPrimitiveType\n boolean "]
53462[label="methodDeclarator\n is_right_arc(finalActionact,int[]deprel) "]
63463[label="formalParameterList\n finalActionact,int[]deprel "]
73464[label="formalParameter\n finalActionact "]
83465[label="variableModifier\n final "]
83466[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
83467[label="variableDeclaratorId\n act "]
73468[label="formalParameter\n int[]deprel "]
83469[label="unannArrayType\n int[] "]
93470[label="integralType\n int "]
93471[label="dims\n [] "]
83472[label="variableDeclaratorId\n deprel "]
43473[label="block\n {if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;} "]
53474[label="blockStatements\n if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse; "]
63475[label="ifThenStatement\n if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;} "]
73476[label="equalityExpression\n act.name()==kRightArc "]
83477[label="methodInvocation_lfno_primary\n act.name() "]
93478[label="typeName\n act "]
83479[label="expressionName\n kRightArc "]
73480[label="block\n {deprel[0]=act.rel();returntrue;} "]
83481[label="blockStatements\n deprel[0]=act.rel();returntrue; "]
93482[label="expressionStatement\n deprel[0]=act.rel(); "]
103483[label="assignment\n deprel[0]=act.rel() "]
113484[label="arrayAccess\n deprel[0] "]
123485[label="expressionName\n deprel "]
123486[label="literal\n 0 "]
113487[label="assignmentOperator\n = "]
113488[label="methodInvocation_lfno_primary\n act.rel() "]
123489[label="typeName\n act "]
93490[label="returnStatement\n returntrue; "]
103491[label="literal\n true "]
63492[label="expressionStatement\n deprel[0]=0; "]
73493[label="assignment\n deprel[0]=0 "]
83494[label="arrayAccess\n deprel[0] "]
93495[label="expressionName\n deprel "]
93496[label="literal\n 0 "]
83497[label="assignmentOperator\n = "]
83498[label="literal\n 0 "]
63499[label="returnStatement\n returnfalse; "]
73500[label="literal\n false "]
33501[label="methodDeclaration\n voidget_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions){intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions);} "]
43502[label="methodHeader\n voidget_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions) "]
53503[label="result\n void "]
53504[label="methodDeclarator\n get_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions) "]
63505[label="formalParameterList\n List<Integer>heads,List<Integer>deprels,List<Action>actions "]
73506[label="formalParameters\n List<Integer>heads,List<Integer>deprels "]
83507[label="formalParameter\n List<Integer>heads "]
93508[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103509[label="typeArguments\n <Integer> "]
113510[label="classType_lfno_classOrInterfaceType\n Integer "]
93511[label="variableDeclaratorId\n heads "]
83512[label="formalParameter\n List<Integer>deprels "]
93513[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103514[label="typeArguments\n <Integer> "]
113515[label="classType_lfno_classOrInterfaceType\n Integer "]
93516[label="variableDeclaratorId\n deprels "]
73517[label="formalParameter\n List<Action>actions "]
83518[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Action> "]
93519[label="typeArguments\n <Action> "]
103520[label="classType_lfno_classOrInterfaceType\n Action "]
83521[label="variableDeclaratorId\n actions "]
43522[label="block\n {intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions);} "]
53523[label="blockStatements\n intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions); "]
63524[label="localVariableDeclarationStatement\n intN=heads.size(); "]
73525[label="localVariableDeclaration\n intN=heads.size() "]
83526[label="integralType\n int "]
83527[label="variableDeclarator\n N=heads.size() "]
93528[label="variableDeclaratorId\n N "]
93529[label="methodInvocation_lfno_primary\n heads.size() "]
103530[label="typeName\n heads "]
63531[label="localVariableDeclarationStatement\n introot=-1; "]
73532[label="localVariableDeclaration\n introot=-1 "]
83533[label="integralType\n int "]
83534[label="variableDeclarator\n root=-1 "]
93535[label="variableDeclaratorId\n root "]
93536[label="unaryExpression\n -1 "]
103537[label="literal\n 1 "]
63538[label="localVariableDeclarationStatement\n List<List<Integer>>tree=newArrayList<List<Integer>>(N); "]
73539[label="localVariableDeclaration\n List<List<Integer>>tree=newArrayList<List<Integer>>(N) "]
83540[label="unannClassType_lfno_unannClassOrInterfaceType\n List<List<Integer>> "]
93541[label="typeArguments\n <List<Integer>> "]
103542[label="classType_lfno_classOrInterfaceType\n List<Integer> "]
113543[label="typeArguments\n <Integer> "]
123544[label="classType_lfno_classOrInterfaceType\n Integer "]
83545[label="variableDeclarator\n tree=newArrayList<List<Integer>>(N) "]
93546[label="variableDeclaratorId\n tree "]
93547[label="classInstanceCreationExpression_lfno_primary\n newArrayList<List<Integer>>(N) "]
103548[label="typeArguments\n <List<Integer>> "]
113549[label="classType_lfno_classOrInterfaceType\n List<Integer> "]
123550[label="typeArguments\n <Integer> "]
133551[label="classType_lfno_classOrInterfaceType\n Integer "]
103552[label="expressionName\n N "]
63553[label="expressionStatement\n actions.clear(); "]
73554[label="methodInvocation\n actions.clear() "]
83555[label="typeName\n actions "]
63556[label="basicForStatement\n for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}} "]
73557[label="localVariableDeclaration\n inti=0 "]
83558[label="integralType\n int "]
83559[label="variableDeclarator\n i=0 "]
93560[label="variableDeclaratorId\n i "]
93561[label="literal\n 0 "]
73562[label="relationalExpression\n i<N "]
83563[label="expressionName\n i "]
83564[label="expressionName\n N "]
73565[label="preIncrementExpression\n ++i "]
83566[label="expressionName\n i "]
73567[label="block\n {inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}} "]
83568[label="blockStatements\n inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);} "]
93569[label="localVariableDeclarationStatement\n inthead=heads.get(i); "]
103570[label="localVariableDeclaration\n inthead=heads.get(i) "]
113571[label="integralType\n int "]
113572[label="variableDeclarator\n head=heads.get(i) "]
123573[label="variableDeclaratorId\n head "]
123574[label="methodInvocation_lfno_primary\n heads.get(i) "]
133575[label="typeName\n heads "]
133576[label="expressionName\n i "]
93577[label="ifThenElseStatement\n if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);} "]
103578[label="equalityExpression\n head==-1 "]
113579[label="expressionName\n head "]
113580[label="unaryExpression\n -1 "]
123581[label="literal\n 1 "]
103582[label="block\n {if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;} "]
113583[label="blockStatements\n if(root==-1)System.err.println(\"error: there should be only one root.\");root=i; "]
123584[label="ifThenStatement\n if(root==-1)System.err.println(\"error: there should be only one root.\"); "]
133585[label="equalityExpression\n root==-1 "]
143586[label="expressionName\n root "]
143587[label="unaryExpression\n -1 "]
153588[label="literal\n 1 "]
133589[label="expressionStatement\n System.err.println(\"error: there should be only one root.\"); "]
143590[label="methodInvocation\n System.err.println(\"error: there should be only one root.\") "]
153591[label="typeName\n System.err "]
163592[label="packageOrTypeName\n System "]
153593[label="literal\n \"error: there should be only one root.\" "]
123594[label="expressionStatement\n root=i; "]
133595[label="assignment\n root=i "]
143596[label="expressionName\n root "]
143597[label="assignmentOperator\n = "]
143598[label="expressionName\n i "]
103599[label="block\n {tree.get(head).add(i);} "]
113600[label="expressionStatement\n tree.get(head).add(i); "]
123601[label="methodInvocation\n tree.get(head).add(i) "]
133602[label="methodInvocation_lfno_primary\n tree.get(head) "]
143603[label="typeName\n tree "]
143604[label="expressionName\n head "]
133605[label="expressionName\n i "]
63606[label="expressionStatement\n get_oracle_actions_travel(root,heads,deprels,tree,actions); "]
73607[label="methodInvocation\n get_oracle_actions_travel(root,heads,deprels,tree,actions) "]
83608[label="methodName\n get_oracle_actions_travel "]
83609[label="argumentList\n root,heads,deprels,tree,actions "]
93610[label="expressionName\n root "]
93611[label="expressionName\n heads "]
93612[label="expressionName\n deprels "]
93613[label="expressionName\n tree "]
93614[label="expressionName\n actions "]
33615[label="methodDeclaration\n voidget_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions){List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));}} "]
43616[label="methodHeader\n voidget_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions) "]
53617[label="result\n void "]
53618[label="methodDeclarator\n get_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions) "]
63619[label="formalParameterList\n introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions "]
73620[label="formalParameters\n introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree "]
83621[label="formalParameter\n introot "]
93622[label="integralType\n int "]
93623[label="variableDeclaratorId\n root "]
83624[label="formalParameter\n List<Integer>heads "]
93625[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103626[label="typeArguments\n <Integer> "]
113627[label="classType_lfno_classOrInterfaceType\n Integer "]
93628[label="variableDeclaratorId\n heads "]
83629[label="formalParameter\n List<Integer>deprels "]
93630[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103631[label="typeArguments\n <Integer> "]
113632[label="classType_lfno_classOrInterfaceType\n Integer "]
93633[label="variableDeclaratorId\n deprels "]
83634[label="formalParameter\n List<List<Integer>>tree "]
93635[label="unannClassType_lfno_unannClassOrInterfaceType\n List<List<Integer>> "]
103636[label="typeArguments\n <List<Integer>> "]
113637[label="classType_lfno_classOrInterfaceType\n List<Integer> "]
123638[label="typeArguments\n <Integer> "]
133639[label="classType_lfno_classOrInterfaceType\n Integer "]
93640[label="variableDeclaratorId\n tree "]
73641[label="formalParameter\n List<Action>actions "]
83642[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Action> "]
93643[label="typeArguments\n <Action> "]
103644[label="classType_lfno_classOrInterfaceType\n Action "]
83645[label="variableDeclaratorId\n actions "]
43646[label="block\n {List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));}} "]
53647[label="blockStatements\n List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));} "]
63648[label="localVariableDeclarationStatement\n List<Integer>children=tree.get(root); "]
73649[label="localVariableDeclaration\n List<Integer>children=tree.get(root) "]
83650[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
93651[label="typeArguments\n <Integer> "]
103652[label="classType_lfno_classOrInterfaceType\n Integer "]
83653[label="variableDeclarator\n children=tree.get(root) "]
93654[label="variableDeclaratorId\n children "]
93655[label="methodInvocation_lfno_primary\n tree.get(root) "]
103656[label="typeName\n tree "]
103657[label="expressionName\n root "]
63658[label="localVariableDeclarationStatement\n inti; "]
73659[label="localVariableDeclaration\n inti "]
83660[label="integralType\n int "]
83661[label="variableDeclaratorId\n i "]
63662[label="basicForStatement\n for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);} "]
73663[label="assignment\n i=0 "]
83664[label="expressionName\n i "]
83665[label="assignmentOperator\n = "]
83666[label="literal\n 0 "]
73667[label="conditionalAndExpression\n i<children.size()&&children.get(i)<root "]
83668[label="relationalExpression\n i<children.size() "]
93669[label="expressionName\n i "]
93670[label="methodInvocation_lfno_primary\n children.size() "]
103671[label="typeName\n children "]
83672[label="relationalExpression\n children.get(i)<root "]
93673[label="methodInvocation_lfno_primary\n children.get(i) "]
103674[label="typeName\n children "]
103675[label="expressionName\n i "]
93676[label="expressionName\n root "]
73677[label="preIncrementExpression\n ++i "]
83678[label="expressionName\n i "]
73679[label="block\n {get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);} "]
83680[label="expressionStatement\n get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions); "]
93681[label="methodInvocation\n get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions) "]
103682[label="methodName\n get_oracle_actions_travel "]
103683[label="argumentList\n children.get(i),heads,deprels,tree,actions "]
113684[label="methodInvocation_lfno_primary\n children.get(i) "]
123685[label="typeName\n children "]
123686[label="expressionName\n i "]
113687[label="expressionName\n heads "]
113688[label="expressionName\n deprels "]
113689[label="expressionName\n tree "]
113690[label="expressionName\n actions "]
63691[label="expressionStatement\n actions.add(ActionFactory.make_shift()); "]
73692[label="methodInvocation\n actions.add(ActionFactory.make_shift()) "]
83693[label="typeName\n actions "]
83694[label="methodInvocation_lfno_primary\n ActionFactory.make_shift() "]
93695[label="typeName\n ActionFactory "]
63696[label="basicForStatement\n for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));} "]
73697[label="localVariableDeclaration\n intj=i "]
83698[label="integralType\n int "]
83699[label="variableDeclarator\n j=i "]
93700[label="variableDeclaratorId\n j "]
93701[label="expressionName\n i "]
73702[label="relationalExpression\n j<children.size() "]
83703[label="expressionName\n j "]
83704[label="methodInvocation_lfno_primary\n children.size() "]
93705[label="typeName\n children "]
73706[label="preIncrementExpression\n ++j "]
83707[label="expressionName\n j "]
73708[label="block\n {intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));} "]
83709[label="blockStatements\n intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child))); "]
93710[label="localVariableDeclarationStatement\n intchild=children.get(j); "]
103711[label="localVariableDeclaration\n intchild=children.get(j) "]
113712[label="integralType\n int "]
113713[label="variableDeclarator\n child=children.get(j) "]
123714[label="variableDeclaratorId\n child "]
123715[label="methodInvocation_lfno_primary\n children.get(j) "]
133716[label="typeName\n children "]
133717[label="expressionName\n j "]
93718[label="expressionStatement\n get_oracle_actions_travel(child,heads,deprels,tree,actions); "]
103719[label="methodInvocation\n get_oracle_actions_travel(child,heads,deprels,tree,actions) "]
113720[label="methodName\n get_oracle_actions_travel "]
113721[label="argumentList\n child,heads,deprels,tree,actions "]
123722[label="expressionName\n child "]
123723[label="expressionName\n heads "]
123724[label="expressionName\n deprels "]
123725[label="expressionName\n tree "]
123726[label="expressionName\n actions "]
93727[label="expressionStatement\n actions.add(ActionFactory.make_right_arc(deprels.get(child))); "]
103728[label="methodInvocation\n actions.add(ActionFactory.make_right_arc(deprels.get(child))) "]
113729[label="typeName\n actions "]
113730[label="methodInvocation_lfno_primary\n ActionFactory.make_right_arc(deprels.get(child)) "]
123731[label="typeName\n ActionFactory "]
123732[label="methodInvocation_lfno_primary\n deprels.get(child) "]
133733[label="typeName\n deprels "]
133734[label="expressionName\n child "]
63735[label="basicForStatement\n for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));} "]
73736[label="localVariableDeclaration\n intj=i-1 "]
83737[label="integralType\n int "]
83738[label="variableDeclarator\n j=i-1 "]
93739[label="variableDeclaratorId\n j "]
93740[label="additiveExpression\n i-1 "]
103741[label="expressionName\n i "]
103742[label="literal\n 1 "]
73743[label="relationalExpression\n j>=0 "]
83744[label="expressionName\n j "]
83745[label="literal\n 0 "]
73746[label="preDecrementExpression\n --j "]
83747[label="expressionName\n j "]
73748[label="block\n {intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));} "]
83749[label="blockStatements\n intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child))); "]
93750[label="localVariableDeclarationStatement\n intchild=children.get(j); "]
103751[label="localVariableDeclaration\n intchild=children.get(j) "]
113752[label="integralType\n int "]
113753[label="variableDeclarator\n child=children.get(j) "]
123754[label="variableDeclaratorId\n child "]
123755[label="methodInvocation_lfno_primary\n children.get(j) "]
133756[label="typeName\n children "]
133757[label="expressionName\n j "]
93758[label="expressionStatement\n actions.add(ActionFactory.make_left_arc(deprels.get(child))); "]
103759[label="methodInvocation\n actions.add(ActionFactory.make_left_arc(deprels.get(child))) "]
113760[label="typeName\n actions "]
113761[label="methodInvocation_lfno_primary\n ActionFactory.make_left_arc(deprels.get(child)) "]
123762[label="typeName\n ActionFactory "]
123763[label="methodInvocation_lfno_primary\n deprels.get(child) "]
133764[label="typeName\n deprels "]
133765[label="expressionName\n child "]
33766[label="methodDeclaration\n voidget_oracle_actions2(Dependencyinstance,List<Action>actions){get_oracle_actions2(instance.heads,instance.deprels,actions);} "]
43767[label="methodHeader\n voidget_oracle_actions2(Dependencyinstance,List<Action>actions) "]
53768[label="result\n void "]
53769[label="methodDeclarator\n get_oracle_actions2(Dependencyinstance,List<Action>actions) "]
63770[label="formalParameterList\n Dependencyinstance,List<Action>actions "]
73771[label="formalParameter\n Dependencyinstance "]
83772[label="unannClassType_lfno_unannClassOrInterfaceType\n Dependency "]
83773[label="variableDeclaratorId\n instance "]
73774[label="formalParameter\n List<Action>actions "]
83775[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Action> "]
93776[label="typeArguments\n <Action> "]
103777[label="classType_lfno_classOrInterfaceType\n Action "]
83778[label="variableDeclaratorId\n actions "]
43779[label="block\n {get_oracle_actions2(instance.heads,instance.deprels,actions);} "]
53780[label="expressionStatement\n get_oracle_actions2(instance.heads,instance.deprels,actions); "]
63781[label="methodInvocation\n get_oracle_actions2(instance.heads,instance.deprels,actions) "]
73782[label="methodName\n get_oracle_actions2 "]
73783[label="argumentList\n instance.heads,instance.deprels,actions "]
83784[label="expressionName\n instance.heads "]
93785[label="ambiguousName\n instance "]
83786[label="expressionName\n instance.deprels "]
93787[label="ambiguousName\n instance "]
83788[label="expressionName\n actions "]
33789[label="methodDeclaration\n voidget_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions){actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];}} "]
43790[label="methodHeader\n voidget_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions) "]
53791[label="result\n void "]
53792[label="methodDeclarator\n get_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions) "]
63793[label="formalParameterList\n List<Integer>heads,List<Integer>deprels,List<Action>actions "]
73794[label="formalParameters\n List<Integer>heads,List<Integer>deprels "]
83795[label="formalParameter\n List<Integer>heads "]
93796[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103797[label="typeArguments\n <Integer> "]
113798[label="classType_lfno_classOrInterfaceType\n Integer "]
93799[label="variableDeclaratorId\n heads "]
83800[label="formalParameter\n List<Integer>deprels "]
93801[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103802[label="typeArguments\n <Integer> "]
113803[label="classType_lfno_classOrInterfaceType\n Integer "]
93804[label="variableDeclaratorId\n deprels "]
73805[label="formalParameter\n List<Action>actions "]
83806[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Action> "]
93807[label="typeArguments\n <Action> "]
103808[label="classType_lfno_classOrInterfaceType\n Action "]
83809[label="variableDeclaratorId\n actions "]
43810[label="block\n {actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];}} "]
53811[label="blockStatements\n actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];} "]
63812[label="expressionStatement\n actions.clear(); "]
73813[label="methodInvocation\n actions.clear() "]
83814[label="typeName\n actions "]
63815[label="localVariableDeclarationStatement\n intlen=heads.size(); "]
73816[label="localVariableDeclaration\n intlen=heads.size() "]
83817[label="integralType\n int "]
83818[label="variableDeclarator\n len=heads.size() "]
93819[label="variableDeclaratorId\n len "]
93820[label="methodInvocation_lfno_primary\n heads.size() "]
103821[label="typeName\n heads "]
63822[label="localVariableDeclarationStatement\n List<Integer>sigma=newArrayList<Integer>(); "]
73823[label="localVariableDeclaration\n List<Integer>sigma=newArrayList<Integer>() "]
83824[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
93825[label="typeArguments\n <Integer> "]
103826[label="classType_lfno_classOrInterfaceType\n Integer "]
83827[label="variableDeclarator\n sigma=newArrayList<Integer>() "]
93828[label="variableDeclaratorId\n sigma "]
93829[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Integer>() "]
103830[label="typeArguments\n <Integer> "]
113831[label="classType_lfno_classOrInterfaceType\n Integer "]
63832[label="localVariableDeclarationStatement\n intbeta=0; "]
73833[label="localVariableDeclaration\n intbeta=0 "]
83834[label="integralType\n int "]
83835[label="variableDeclarator\n beta=0 "]
93836[label="variableDeclaratorId\n beta "]
93837[label="literal\n 0 "]
63838[label="localVariableDeclarationStatement\n List<Integer>output=newArrayList<Integer>(len); "]
73839[label="localVariableDeclaration\n List<Integer>output=newArrayList<Integer>(len) "]
83840[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
93841[label="typeArguments\n <Integer> "]
103842[label="classType_lfno_classOrInterfaceType\n Integer "]
83843[label="variableDeclarator\n output=newArrayList<Integer>(len) "]
93844[label="variableDeclaratorId\n output "]
93845[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Integer>(len) "]
103846[label="typeArguments\n <Integer> "]
113847[label="classType_lfno_classOrInterfaceType\n Integer "]
103848[label="expressionName\n len "]
63849[label="basicForStatement\n for(inti=0;i<len;i++){output.add(-1);} "]
73850[label="localVariableDeclaration\n inti=0 "]
83851[label="integralType\n int "]
83852[label="variableDeclarator\n i=0 "]
93853[label="variableDeclaratorId\n i "]
93854[label="literal\n 0 "]
73855[label="relationalExpression\n i<len "]
83856[label="expressionName\n i "]
83857[label="expressionName\n len "]
73858[label="postIncrementExpression\n i++ "]
83859[label="expressionName\n i "]
73860[label="block\n {output.add(-1);} "]
83861[label="expressionStatement\n output.add(-1); "]
93862[label="methodInvocation\n output.add(-1) "]
103863[label="typeName\n output "]
103864[label="unaryExpression\n -1 "]
113865[label="literal\n 1 "]
63866[label="localVariableDeclarationStatement\n intstep=0; "]
73867[label="localVariableDeclaration\n intstep=0 "]
83868[label="integralType\n int "]
83869[label="variableDeclarator\n step=0 "]
93870[label="variableDeclaratorId\n step "]
93871[label="literal\n 0 "]
63872[label="whileStatement\n while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];} "]
73873[label="unaryExpressionNotPlusMinus\n !(sigma.size()==1&&beta==len) "]
83874[label="primaryNoNewArray_lfno_primary\n (sigma.size()==1&&beta==len) "]
93875[label="conditionalAndExpression\n sigma.size()==1&&beta==len "]
103876[label="equalityExpression\n sigma.size()==1 "]
113877[label="methodInvocation_lfno_primary\n sigma.size() "]
123878[label="typeName\n sigma "]
113879[label="literal\n 1 "]
103880[label="equalityExpression\n beta==len "]
113881[label="expressionName\n beta "]
113882[label="expressionName\n len "]
73883[label="block\n {int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];} "]
83884[label="blockStatements\n int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0]; "]
93885[label="localVariableDeclarationStatement\n int[]beta_reference=newint[]{beta}; "]
103886[label="localVariableDeclaration\n int[]beta_reference=newint[]{beta} "]
113887[label="unannArrayType\n int[] "]
123888[label="integralType\n int "]
123889[label="dims\n [] "]
113890[label="variableDeclarator\n beta_reference=newint[]{beta} "]
123891[label="variableDeclaratorId\n beta_reference "]
123892[label="arrayCreationExpression\n newint[]{beta} "]
133893[label="integralType\n int "]
133894[label="dims\n [] "]
133895[label="arrayInitializer\n {beta} "]
143896[label="expressionName\n beta "]
93897[label="expressionStatement\n get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions); "]
103898[label="methodInvocation\n get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions) "]
113899[label="methodName\n get_oracle_actions_onestep "]
113900[label="argumentList\n heads,deprels,sigma,beta_reference,output,actions "]
123901[label="expressionName\n heads "]
123902[label="expressionName\n deprels "]
123903[label="expressionName\n sigma "]
123904[label="expressionName\n beta_reference "]
123905[label="expressionName\n output "]
123906[label="expressionName\n actions "]
93907[label="expressionStatement\n beta=beta_reference[0]; "]
103908[label="assignment\n beta=beta_reference[0] "]
113909[label="expressionName\n beta "]
113910[label="assignmentOperator\n = "]
113911[label="arrayAccess_lfno_primary\n beta_reference[0] "]
123912[label="expressionName\n beta_reference "]
123913[label="literal\n 0 "]
33914[label="methodDeclaration\n voidget_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions){inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];}} "]
43915[label="methodHeader\n voidget_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions) "]
53916[label="result\n void "]
53917[label="methodDeclarator\n get_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions) "]
63918[label="formalParameterList\n List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions "]
73919[label="formalParameters\n List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output "]
83920[label="formalParameter\n List<Integer>heads "]
93921[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103922[label="typeArguments\n <Integer> "]
113923[label="classType_lfno_classOrInterfaceType\n Integer "]
93924[label="variableDeclaratorId\n heads "]
83925[label="formalParameter\n List<Integer>deprels "]
93926[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103927[label="typeArguments\n <Integer> "]
113928[label="classType_lfno_classOrInterfaceType\n Integer "]
93929[label="variableDeclaratorId\n deprels "]
83930[label="formalParameter\n List<Integer>sigma "]
93931[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103932[label="typeArguments\n <Integer> "]
113933[label="classType_lfno_classOrInterfaceType\n Integer "]
93934[label="variableDeclaratorId\n sigma "]
83935[label="formalParameter\n int[]beta "]
93936[label="unannArrayType\n int[] "]
103937[label="integralType\n int "]
103938[label="dims\n [] "]
93939[label="variableDeclaratorId\n beta "]
83940[label="formalParameter\n List<Integer>output "]
93941[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103942[label="typeArguments\n <Integer> "]
113943[label="classType_lfno_classOrInterfaceType\n Integer "]
93944[label="variableDeclaratorId\n output "]
73945[label="formalParameter\n List<Action>actions "]
83946[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Action> "]
93947[label="typeArguments\n <Action> "]
103948[label="classType_lfno_classOrInterfaceType\n Action "]
83949[label="variableDeclaratorId\n actions "]
43950[label="block\n {inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];}} "]
53951[label="blockStatements\n inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];} "]
63952[label="localVariableDeclarationStatement\n inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1); "]
73953[label="localVariableDeclaration\n inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1) "]
83954[label="integralType\n int "]
83955[label="variableDeclarator\n top0=(sigma.size()>0?sigma.get(sigma.size()-1):-1) "]
93956[label="variableDeclaratorId\n top0 "]
93957[label="primaryNoNewArray_lfno_primary\n (sigma.size()>0?sigma.get(sigma.size()-1):-1) "]
103958[label="conditionalExpression\n sigma.size()>0?sigma.get(sigma.size()-1):-1 "]
113959[label="relationalExpression\n sigma.size()>0 "]
123960[label="methodInvocation_lfno_primary\n sigma.size() "]
133961[label="typeName\n sigma "]
123962[label="literal\n 0 "]
113963[label="methodInvocation_lfno_primary\n sigma.get(sigma.size()-1) "]
123964[label="typeName\n sigma "]
123965[label="additiveExpression\n sigma.size()-1 "]
133966[label="methodInvocation_lfno_primary\n sigma.size() "]
143967[label="typeName\n sigma "]
133968[label="literal\n 1 "]
113969[label="unaryExpression\n -1 "]
123970[label="literal\n 1 "]
63971[label="localVariableDeclarationStatement\n inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1); "]
73972[label="localVariableDeclaration\n inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1) "]
83973[label="integralType\n int "]
83974[label="variableDeclarator\n top1=(sigma.size()>1?sigma.get(sigma.size()-2):-1) "]
93975[label="variableDeclaratorId\n top1 "]
93976[label="primaryNoNewArray_lfno_primary\n (sigma.size()>1?sigma.get(sigma.size()-2):-1) "]
103977[label="conditionalExpression\n sigma.size()>1?sigma.get(sigma.size()-2):-1 "]
113978[label="relationalExpression\n sigma.size()>1 "]
123979[label="methodInvocation_lfno_primary\n sigma.size() "]
133980[label="typeName\n sigma "]
123981[label="literal\n 1 "]
113982[label="methodInvocation_lfno_primary\n sigma.get(sigma.size()-2) "]
123983[label="typeName\n sigma "]
123984[label="additiveExpression\n sigma.size()-2 "]
133985[label="methodInvocation_lfno_primary\n sigma.size() "]
143986[label="typeName\n sigma "]
133987[label="literal\n 2 "]
113988[label="unaryExpression\n -1 "]
123989[label="literal\n 1 "]
63990[label="localVariableDeclarationStatement\n booleanall_descendents_reduced=true; "]
73991[label="localVariableDeclaration\n booleanall_descendents_reduced=true "]
83992[label="unannPrimitiveType\n boolean "]
83993[label="variableDeclarator\n all_descendents_reduced=true "]
93994[label="variableDeclaratorId\n all_descendents_reduced "]
93995[label="literal\n true "]
63996[label="ifThenStatement\n if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}} "]
73997[label="relationalExpression\n top0>=0 "]
83998[label="expressionName\n top0 "]
83999[label="literal\n 0 "]
74000[label="block\n {for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}} "]
84001[label="basicForStatement\n for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}} "]
94002[label="localVariableDeclaration\n inti=0 "]
104003[label="integralType\n int "]
104004[label="variableDeclarator\n i=0 "]
114005[label="variableDeclaratorId\n i "]
114006[label="literal\n 0 "]
94007[label="relationalExpression\n i<heads.size() "]
104008[label="expressionName\n i "]
104009[label="methodInvocation_lfno_primary\n heads.size() "]
114010[label="typeName\n heads "]
94011[label="preIncrementExpression\n ++i "]
104012[label="expressionName\n i "]
94013[label="block\n {if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}} "]
104014[label="ifThenStatement\n if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;} "]
114015[label="conditionalAndExpression\n heads.get(i)==top0&&output.get(i)!=top0 "]
124016[label="equalityExpression\n heads.get(i)==top0 "]
134017[label="methodInvocation_lfno_primary\n heads.get(i) "]
144018[label="typeName\n heads "]
144019[label="expressionName\n i "]
134020[label="expressionName\n top0 "]
124021[label="equalityExpression\n output.get(i)!=top0 "]
134022[label="methodInvocation_lfno_primary\n output.get(i) "]
144023[label="typeName\n output "]
144024[label="expressionName\n i "]
134025[label="expressionName\n top0 "]
114026[label="block\n {all_descendents_reduced=false;break;} "]
124027[label="blockStatements\n all_descendents_reduced=false;break; "]
134028[label="expressionStatement\n all_descendents_reduced=false; "]
144029[label="assignment\n all_descendents_reduced=false "]
154030[label="expressionName\n all_descendents_reduced "]
154031[label="assignmentOperator\n = "]
154032[label="literal\n false "]
134033[label="breakStatement\n break; "]
64034[label="ifThenElseStatement\n if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];} "]
74035[label="conditionalAndExpression\n top1>=0&&heads.get(top1)==top0 "]
84036[label="relationalExpression\n top1>=0 "]
94037[label="expressionName\n top1 "]
94038[label="literal\n 0 "]
84039[label="equalityExpression\n heads.get(top1)==top0 "]
94040[label="methodInvocation_lfno_primary\n heads.get(top1) "]
104041[label="typeName\n heads "]
104042[label="expressionName\n top1 "]
94043[label="expressionName\n top0 "]
74044[label="block\n {actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);} "]
84045[label="blockStatements\n actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0); "]
94046[label="expressionStatement\n actions.add(ActionFactory.make_left_arc(deprels.get(top1))); "]
104047[label="methodInvocation\n actions.add(ActionFactory.make_left_arc(deprels.get(top1))) "]
114048[label="typeName\n actions "]
114049[label="methodInvocation_lfno_primary\n ActionFactory.make_left_arc(deprels.get(top1)) "]
124050[label="typeName\n ActionFactory "]
124051[label="methodInvocation_lfno_primary\n deprels.get(top1) "]
134052[label="typeName\n deprels "]
134053[label="expressionName\n top1 "]
94054[label="expressionStatement\n output.set(top1,top0); "]
104055[label="methodInvocation\n output.set(top1,top0) "]
114056[label="typeName\n output "]
114057[label="argumentList\n top1,top0 "]
124058[label="expressionName\n top1 "]
124059[label="expressionName\n top0 "]
94060[label="expressionStatement\n sigma.remove(sigma.size()-1); "]
104061[label="methodInvocation\n sigma.remove(sigma.size()-1) "]
114062[label="typeName\n sigma "]
114063[label="additiveExpression\n sigma.size()-1 "]
124064[label="methodInvocation_lfno_primary\n sigma.size() "]
134065[label="typeName\n sigma "]
124066[label="literal\n 1 "]
94067[label="expressionStatement\n sigma.set(sigma.size()-1,top0); "]
104068[label="methodInvocation\n sigma.set(sigma.size()-1,top0) "]
114069[label="typeName\n sigma "]
114070[label="argumentList\n sigma.size()-1,top0 "]
124071[label="additiveExpression\n sigma.size()-1 "]
134072[label="methodInvocation_lfno_primary\n sigma.size() "]
144073[label="typeName\n sigma "]
134074[label="literal\n 1 "]
124075[label="expressionName\n top0 "]
74076[label="ifThenElseStatement\n if(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];} "]
84077[label="conditionalAndExpression\n top1>=0&&heads.get(top0)==top1&&all_descendents_reduced "]
94078[label="conditionalAndExpression\n top1>=0&&heads.get(top0)==top1 "]
104079[label="relationalExpression\n top1>=0 "]
114080[label="expressionName\n top1 "]
114081[label="literal\n 0 "]
104082[label="equalityExpression\n heads.get(top0)==top1 "]
114083[label="methodInvocation_lfno_primary\n heads.get(top0) "]
124084[label="typeName\n heads "]
124085[label="expressionName\n top0 "]
114086[label="expressionName\n top1 "]
94087[label="expressionName\n all_descendents_reduced "]
84088[label="block\n {actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);} "]
94089[label="blockStatements\n actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1); "]
104090[label="expressionStatement\n actions.add(ActionFactory.make_right_arc(deprels.get(top0))); "]
114091[label="methodInvocation\n actions.add(ActionFactory.make_right_arc(deprels.get(top0))) "]
124092[label="typeName\n actions "]
124093[label="methodInvocation_lfno_primary\n ActionFactory.make_right_arc(deprels.get(top0)) "]
134094[label="typeName\n ActionFactory "]
134095[label="methodInvocation_lfno_primary\n deprels.get(top0) "]
144096[label="typeName\n deprels "]
144097[label="expressionName\n top0 "]
104098[label="expressionStatement\n output.set(top0,top1); "]
114099[label="methodInvocation\n output.set(top0,top1) "]
124100[label="typeName\n output "]
124101[label="argumentList\n top0,top1 "]
134102[label="expressionName\n top0 "]
134103[label="expressionName\n top1 "]
104104[label="expressionStatement\n sigma.remove(sigma.size()-1); "]
114105[label="methodInvocation\n sigma.remove(sigma.size()-1) "]
124106[label="typeName\n sigma "]
124107[label="additiveExpression\n sigma.size()-1 "]
134108[label="methodInvocation_lfno_primary\n sigma.size() "]
144109[label="typeName\n sigma "]
134110[label="literal\n 1 "]
84111[label="ifThenStatement\n if(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];} "]
94112[label="relationalExpression\n beta[0]<heads.size() "]
104113[label="arrayAccess_lfno_primary\n beta[0] "]
114114[label="expressionName\n beta "]
114115[label="literal\n 0 "]
104116[label="methodInvocation_lfno_primary\n heads.size() "]
114117[label="typeName\n heads "]
94118[label="block\n {actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];} "]
104119[label="blockStatements\n actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0]; "]
114120[label="expressionStatement\n actions.add(ActionFactory.make_shift()); "]
124121[label="methodInvocation\n actions.add(ActionFactory.make_shift()) "]
134122[label="typeName\n actions "]
134123[label="methodInvocation_lfno_primary\n ActionFactory.make_shift() "]
144124[label="typeName\n ActionFactory "]
114125[label="expressionStatement\n sigma.add(beta[0]); "]
124126[label="methodInvocation\n sigma.add(beta[0]) "]
134127[label="typeName\n sigma "]
134128[label="arrayAccess_lfno_primary\n beta[0] "]
144129[label="expressionName\n beta "]
144130[label="literal\n 0 "]
114131[label="expressionStatement\n ++beta[0]; "]
124132[label="preIncrementExpression\n ++beta[0] "]
134133[label="arrayAccess_lfno_primary\n beta[0] "]
144134[label="expressionName\n beta "]
144135[label="literal\n 0 "]
04136[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.option;publicclassAdaOption{doubleada_eps;doubleada_alpha;doublelambda;doubledropout_probability;}<EOF> "]
14137[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.option; "]
24138[label="packageName\n com.hankcs.hanlp.dependency.nnparser.option "]
34139[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
44140[label="packageName\n com.hankcs.hanlp.dependency "]
54141[label="packageName\n com.hankcs.hanlp "]
64142[label="packageName\n com.hankcs "]
74143[label="packageName\n com "]
14144[label="normalClassDeclaration\n publicclassAdaOption{doubleada_eps;doubleada_alpha;doublelambda;doubledropout_probability;} "]
24145[label="classModifier\n public "]
24146[label="classBody\n {doubleada_eps;doubleada_alpha;doublelambda;doubledropout_probability;} "]
34147[label="fieldDeclaration\n doubleada_eps; "]
44148[label="floatingPointType\n double "]
44149[label="variableDeclaratorId\n ada_eps "]
34150[label="fieldDeclaration\n doubleada_alpha; "]
44151[label="floatingPointType\n double "]
44152[label="variableDeclaratorId\n ada_alpha "]
34153[label="fieldDeclaration\n doublelambda; "]
44154[label="floatingPointType\n double "]
44155[label="variableDeclaratorId\n lambda "]
34156[label="fieldDeclaration\n doubledropout_probability; "]
44157[label="floatingPointType\n double "]
44158[label="variableDeclaratorId\n dropout_probability "]
04159[label="compilationUnit\n packagecom.hankcs.test.corpus;importcom.hankcs.hanlp.HanLP;importcom.hankcs.hanlp.corpus.dictionary.DictionaryMaker;importcom.hankcs.hanlp.corpus.dictionary.EasyDictionary;importcom.hankcs.hanlp.corpus.dictionary.TFDictionary;importcom.hankcs.hanlp.corpus.dictionary.item.Item;importcom.hankcs.hanlp.corpus.document.CorpusLoader;importcom.hankcs.hanlp.corpus.document.Document;importcom.hankcs.hanlp.corpus.document.sentence.word.CompoundWord;importcom.hankcs.hanlp.corpus.document.sentence.word.IWord;importcom.hankcs.hanlp.corpus.io.FolderWalker;importcom.hankcs.hanlp.corpus.io.IOUtil;importcom.hankcs.hanlp.corpus.occurrence.TermFrequency;importcom.hankcs.hanlp.dictionary.CoreBiGramTableDictionary;importcom.hankcs.hanlp.dictionary.CoreDictionary;importcom.hankcs.hanlp.utility.Predefine;importjunit.framework.TestCase;importjava.io.*;importjava.util.List;importjava.util.Map;importjava.util.Set;importjava.util.TreeSet;publicclassAdjustCorpusextendsTestCase{publicvoidtestAdjust()throwsException{List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\");for(Filefile:fileList){handle(file);}}privatestaticvoidhandle(Filefile){try{Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}}catch(Exceptione){e.printStackTrace();}}privatestaticStringaddW(Stringtext,Stringc){text=text.replaceAll(\"\\\"+c+\"/w \",c);returntext.replaceAll(\"\\\"+c,c+\"/w \");}publicvoidtestPlay()throwsException{finalTFDictionarytfDictionary=newTFDictionary();CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}});tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\");}publicvoidtestAdjustNGram()throwsException{IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\"));while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();}bw.close();}publicvoidtestRemoveLabelD()throwsException{Set<String>nameFollowers=newTreeSet<String>();IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}}DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath);for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}}dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath);}}<EOF> "]
14160[label="packageDeclaration\n packagecom.hankcs.test.corpus; "]
24161[label="packageName\n com.hankcs.test.corpus "]
34162[label="packageName\n com.hankcs.test "]
44163[label="packageName\n com.hankcs "]
54164[label="packageName\n com "]
14165[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.HanLP; "]
24166[label="typeName\n com.hankcs.hanlp.HanLP "]
34167[label="packageOrTypeName\n com.hankcs.hanlp "]
44168[label="packageOrTypeName\n com.hankcs "]
54169[label="packageOrTypeName\n com "]
14170[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dictionary.DictionaryMaker; "]
24171[label="typeName\n com.hankcs.hanlp.corpus.dictionary.DictionaryMaker "]
34172[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dictionary "]
44173[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54174[label="packageOrTypeName\n com.hankcs.hanlp "]
64175[label="packageOrTypeName\n com.hankcs "]
74176[label="packageOrTypeName\n com "]
14177[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dictionary.EasyDictionary; "]
24178[label="typeName\n com.hankcs.hanlp.corpus.dictionary.EasyDictionary "]
34179[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dictionary "]
44180[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54181[label="packageOrTypeName\n com.hankcs.hanlp "]
64182[label="packageOrTypeName\n com.hankcs "]
74183[label="packageOrTypeName\n com "]
14184[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dictionary.TFDictionary; "]
24185[label="typeName\n com.hankcs.hanlp.corpus.dictionary.TFDictionary "]
34186[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dictionary "]
44187[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54188[label="packageOrTypeName\n com.hankcs.hanlp "]
64189[label="packageOrTypeName\n com.hankcs "]
74190[label="packageOrTypeName\n com "]
14191[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dictionary.item.Item; "]
24192[label="typeName\n com.hankcs.hanlp.corpus.dictionary.item.Item "]
34193[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dictionary.item "]
44194[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dictionary "]
54195[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
64196[label="packageOrTypeName\n com.hankcs.hanlp "]
74197[label="packageOrTypeName\n com.hankcs "]
84198[label="packageOrTypeName\n com "]
14199[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.document.CorpusLoader; "]
24200[label="typeName\n com.hankcs.hanlp.corpus.document.CorpusLoader "]
34201[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document "]
44202[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54203[label="packageOrTypeName\n com.hankcs.hanlp "]
64204[label="packageOrTypeName\n com.hankcs "]
74205[label="packageOrTypeName\n com "]
14206[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.document.Document; "]
24207[label="typeName\n com.hankcs.hanlp.corpus.document.Document "]
34208[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document "]
44209[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54210[label="packageOrTypeName\n com.hankcs.hanlp "]
64211[label="packageOrTypeName\n com.hankcs "]
74212[label="packageOrTypeName\n com "]
14213[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.document.sentence.word.CompoundWord; "]
24214[label="typeName\n com.hankcs.hanlp.corpus.document.sentence.word.CompoundWord "]
34215[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document.sentence.word "]
44216[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document.sentence "]
54217[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document "]
64218[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
74219[label="packageOrTypeName\n com.hankcs.hanlp "]
84220[label="packageOrTypeName\n com.hankcs "]
94221[label="packageOrTypeName\n com "]
14222[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.document.sentence.word.IWord; "]
24223[label="typeName\n com.hankcs.hanlp.corpus.document.sentence.word.IWord "]
34224[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document.sentence.word "]
44225[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document.sentence "]
54226[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document "]
64227[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
74228[label="packageOrTypeName\n com.hankcs.hanlp "]
84229[label="packageOrTypeName\n com.hankcs "]
94230[label="packageOrTypeName\n com "]
14231[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.FolderWalker; "]
24232[label="typeName\n com.hankcs.hanlp.corpus.io.FolderWalker "]
34233[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
44234[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54235[label="packageOrTypeName\n com.hankcs.hanlp "]
64236[label="packageOrTypeName\n com.hankcs "]
74237[label="packageOrTypeName\n com "]
14238[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
24239[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
34240[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
44241[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54242[label="packageOrTypeName\n com.hankcs.hanlp "]
64243[label="packageOrTypeName\n com.hankcs "]
74244[label="packageOrTypeName\n com "]
14245[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.occurrence.TermFrequency; "]
24246[label="typeName\n com.hankcs.hanlp.corpus.occurrence.TermFrequency "]
34247[label="packageOrTypeName\n com.hankcs.hanlp.corpus.occurrence "]
44248[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54249[label="packageOrTypeName\n com.hankcs.hanlp "]
64250[label="packageOrTypeName\n com.hankcs "]
74251[label="packageOrTypeName\n com "]
14252[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dictionary.CoreBiGramTableDictionary; "]
24253[label="typeName\n com.hankcs.hanlp.dictionary.CoreBiGramTableDictionary "]
34254[label="packageOrTypeName\n com.hankcs.hanlp.dictionary "]
44255[label="packageOrTypeName\n com.hankcs.hanlp "]
54256[label="packageOrTypeName\n com.hankcs "]
64257[label="packageOrTypeName\n com "]
14258[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dictionary.CoreDictionary; "]
24259[label="typeName\n com.hankcs.hanlp.dictionary.CoreDictionary "]
34260[label="packageOrTypeName\n com.hankcs.hanlp.dictionary "]
44261[label="packageOrTypeName\n com.hankcs.hanlp "]
54262[label="packageOrTypeName\n com.hankcs "]
64263[label="packageOrTypeName\n com "]
14264[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.Predefine; "]
24265[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
34266[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
44267[label="packageOrTypeName\n com.hankcs.hanlp "]
54268[label="packageOrTypeName\n com.hankcs "]
64269[label="packageOrTypeName\n com "]
14270[label="singleTypeImportDeclaration\n importjunit.framework.TestCase; "]
24271[label="typeName\n junit.framework.TestCase "]
34272[label="packageOrTypeName\n junit.framework "]
44273[label="packageOrTypeName\n junit "]
14274[label="typeImportOnDemandDeclaration\n importjava.io.*; "]
24275[label="packageOrTypeName\n java.io "]
34276[label="packageOrTypeName\n java "]
14277[label="singleTypeImportDeclaration\n importjava.util.List; "]
24278[label="typeName\n java.util.List "]
34279[label="packageOrTypeName\n java.util "]
44280[label="packageOrTypeName\n java "]
14281[label="singleTypeImportDeclaration\n importjava.util.Map; "]
24282[label="typeName\n java.util.Map "]
34283[label="packageOrTypeName\n java.util "]
44284[label="packageOrTypeName\n java "]
14285[label="singleTypeImportDeclaration\n importjava.util.Set; "]
24286[label="typeName\n java.util.Set "]
34287[label="packageOrTypeName\n java.util "]
44288[label="packageOrTypeName\n java "]
14289[label="singleTypeImportDeclaration\n importjava.util.TreeSet; "]
24290[label="typeName\n java.util.TreeSet "]
34291[label="packageOrTypeName\n java.util "]
44292[label="packageOrTypeName\n java "]
14293[label="normalClassDeclaration\n publicclassAdjustCorpusextendsTestCase{publicvoidtestAdjust()throwsException{List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\");for(Filefile:fileList){handle(file);}}privatestaticvoidhandle(Filefile){try{Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}}catch(Exceptione){e.printStackTrace();}}privatestaticStringaddW(Stringtext,Stringc){text=text.replaceAll(\"\\\"+c+\"/w \",c);returntext.replaceAll(\"\\\"+c,c+\"/w \");}publicvoidtestPlay()throwsException{finalTFDictionarytfDictionary=newTFDictionary();CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}});tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\");}publicvoidtestAdjustNGram()throwsException{IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\"));while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();}bw.close();}publicvoidtestRemoveLabelD()throwsException{Set<String>nameFollowers=newTreeSet<String>();IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}}DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath);for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}}dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath);}} "]
24294[label="classModifier\n public "]
24295[label="superclass\n extendsTestCase "]
34296[label="classType\n TestCase "]
24297[label="classBody\n {publicvoidtestAdjust()throwsException{List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\");for(Filefile:fileList){handle(file);}}privatestaticvoidhandle(Filefile){try{Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}}catch(Exceptione){e.printStackTrace();}}privatestaticStringaddW(Stringtext,Stringc){text=text.replaceAll(\"\\\"+c+\"/w \",c);returntext.replaceAll(\"\\\"+c,c+\"/w \");}publicvoidtestPlay()throwsException{finalTFDictionarytfDictionary=newTFDictionary();CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}});tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\");}publicvoidtestAdjustNGram()throwsException{IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\"));while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();}bw.close();}publicvoidtestRemoveLabelD()throwsException{Set<String>nameFollowers=newTreeSet<String>();IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}}DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath);for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}}dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath);}} "]
34298[label="methodDeclaration\n publicvoidtestAdjust()throwsException{List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\");for(Filefile:fileList){handle(file);}} "]
44299[label="methodModifier\n public "]
44300[label="methodHeader\n voidtestAdjust()throwsException "]
54301[label="result\n void "]
54302[label="methodDeclarator\n testAdjust() "]
54303[label="throws_\n throwsException "]
64304[label="classType\n Exception "]
44305[label="block\n {List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\");for(Filefile:fileList){handle(file);}} "]
54306[label="blockStatements\n List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\");for(Filefile:fileList){handle(file);} "]
64307[label="localVariableDeclarationStatement\n List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\"); "]
74308[label="localVariableDeclaration\n List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\") "]
84309[label="unannClassType_lfno_unannClassOrInterfaceType\n List<File> "]
94310[label="typeArguments\n <File> "]
104311[label="classType_lfno_classOrInterfaceType\n File "]
84312[label="variableDeclarator\n fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\") "]
94313[label="variableDeclaratorId\n fileList "]
94314[label="methodInvocation_lfno_primary\n FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\") "]
104315[label="typeName\n FolderWalker "]
104316[label="literal\n \"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\" "]
64317[label="enhancedForStatement\n for(Filefile:fileList){handle(file);} "]
74318[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
74319[label="variableDeclaratorId\n file "]
74320[label="expressionName\n fileList "]
74321[label="block\n {handle(file);} "]
84322[label="expressionStatement\n handle(file); "]
94323[label="methodInvocation\n handle(file) "]
104324[label="methodName\n handle "]
104325[label="expressionName\n file "]
34326[label="methodDeclaration\n privatestaticvoidhandle(Filefile){try{Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}}catch(Exceptione){e.printStackTrace();}} "]
44327[label="methodModifier\n private "]
44328[label="methodModifier\n static "]
44329[label="methodHeader\n voidhandle(Filefile) "]
54330[label="result\n void "]
54331[label="methodDeclarator\n handle(Filefile) "]
64332[label="formalParameter\n Filefile "]
74333[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
74334[label="variableDeclaratorId\n file "]
44335[label="block\n {try{Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}}catch(Exceptione){e.printStackTrace();}} "]
54336[label="tryStatement\n try{Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}}catch(Exceptione){e.printStackTrace();} "]
64337[label="block\n {Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}} "]
74338[label="blockStatements\n Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);} "]
84339[label="localVariableDeclarationStatement\n Stringtext=IOUtil.readTxt(file.getPath()); "]
94340[label="localVariableDeclaration\n Stringtext=IOUtil.readTxt(file.getPath()) "]
104341[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
104342[label="variableDeclarator\n text=IOUtil.readTxt(file.getPath()) "]
114343[label="variableDeclaratorId\n text "]
114344[label="methodInvocation_lfno_primary\n IOUtil.readTxt(file.getPath()) "]
124345[label="typeName\n IOUtil "]
124346[label="methodInvocation_lfno_primary\n file.getPath() "]
134347[label="typeName\n file "]
84348[label="localVariableDeclarationStatement\n intlength=text.length(); "]
94349[label="localVariableDeclaration\n intlength=text.length() "]
104350[label="integralType\n int "]
104351[label="variableDeclarator\n length=text.length() "]
114352[label="variableDeclaratorId\n length "]
114353[label="methodInvocation_lfno_primary\n text.length() "]
124354[label="typeName\n text "]
84355[label="expressionStatement\n text=addW(text,\"：\"); "]
94356[label="assignment\n text=addW(text,\"：\") "]
104357[label="expressionName\n text "]
104358[label="assignmentOperator\n = "]
104359[label="methodInvocation_lfno_primary\n addW(text,\"：\") "]
114360[label="methodName\n addW "]
114361[label="argumentList\n text,\"：\" "]
124362[label="expressionName\n text "]
124363[label="literal\n \"：\" "]
84364[label="expressionStatement\n text=addW(text,\"？\"); "]
94365[label="assignment\n text=addW(text,\"？\") "]
104366[label="expressionName\n text "]
104367[label="assignmentOperator\n = "]
104368[label="methodInvocation_lfno_primary\n addW(text,\"？\") "]
114369[label="methodName\n addW "]
114370[label="argumentList\n text,\"？\" "]
124371[label="expressionName\n text "]
124372[label="literal\n \"？\" "]
84373[label="expressionStatement\n text=addW(text,\"，\"); "]
94374[label="assignment\n text=addW(text,\"，\") "]
104375[label="expressionName\n text "]
104376[label="assignmentOperator\n = "]
104377[label="methodInvocation_lfno_primary\n addW(text,\"，\") "]
114378[label="methodName\n addW "]
114379[label="argumentList\n text,\"，\" "]
124380[label="expressionName\n text "]
124381[label="literal\n \"，\" "]
84382[label="expressionStatement\n text=addW(text,\"）\"); "]
94383[label="assignment\n text=addW(text,\"）\") "]
104384[label="expressionName\n text "]
104385[label="assignmentOperator\n = "]
104386[label="methodInvocation_lfno_primary\n addW(text,\"）\") "]
114387[label="methodName\n addW "]
114388[label="argumentList\n text,\"）\" "]
124389[label="expressionName\n text "]
124390[label="literal\n \"）\" "]
84391[label="expressionStatement\n text=addW(text,\"（\"); "]
94392[label="assignment\n text=addW(text,\"（\") "]
104393[label="expressionName\n text "]
104394[label="assignmentOperator\n = "]
104395[label="methodInvocation_lfno_primary\n addW(text,\"（\") "]
114396[label="methodName\n addW "]
114397[label="argumentList\n text,\"（\" "]
124398[label="expressionName\n text "]
124399[label="literal\n \"（\" "]
84400[label="expressionStatement\n text=addW(text,\"！\"); "]
94401[label="assignment\n text=addW(text,\"！\") "]
104402[label="expressionName\n text "]
104403[label="assignmentOperator\n = "]
104404[label="methodInvocation_lfno_primary\n addW(text,\"！\") "]
114405[label="methodName\n addW "]
114406[label="argumentList\n text,\"！\" "]
124407[label="expressionName\n text "]
124408[label="literal\n \"！\" "]
84409[label="expressionStatement\n text=addW(text,\"(\"); "]
94410[label="assignment\n text=addW(text,\"(\") "]
104411[label="expressionName\n text "]
104412[label="assignmentOperator\n = "]
104413[label="methodInvocation_lfno_primary\n addW(text,\"(\") "]
114414[label="methodName\n addW "]
114415[label="argumentList\n text,\"(\" "]
124416[label="expressionName\n text "]
124417[label="literal\n \"(\" "]
84418[label="expressionStatement\n text=addW(text,\")\"); "]
94419[label="assignment\n text=addW(text,\")\") "]
104420[label="expressionName\n text "]
104421[label="assignmentOperator\n = "]
104422[label="methodInvocation_lfno_primary\n addW(text,\")\") "]
114423[label="methodName\n addW "]
114424[label="argumentList\n text,\")\" "]
124425[label="expressionName\n text "]
124426[label="literal\n \")\" "]
84427[label="expressionStatement\n text=addW(text,\",\"); "]
94428[label="assignment\n text=addW(text,\",\") "]
104429[label="expressionName\n text "]
104430[label="assignmentOperator\n = "]
104431[label="methodInvocation_lfno_primary\n addW(text,\",\") "]
114432[label="methodName\n addW "]
114433[label="argumentList\n text,\",\" "]
124434[label="expressionName\n text "]
124435[label="literal\n \",\" "]
84436[label="expressionStatement\n text=addW(text,\"‘\"); "]
94437[label="assignment\n text=addW(text,\"‘\") "]
104438[label="expressionName\n text "]
104439[label="assignmentOperator\n = "]
104440[label="methodInvocation_lfno_primary\n addW(text,\"‘\") "]
114441[label="methodName\n addW "]
114442[label="argumentList\n text,\"‘\" "]
124443[label="expressionName\n text "]
124444[label="literal\n \"‘\" "]
84445[label="expressionStatement\n text=addW(text,\"’\"); "]
94446[label="assignment\n text=addW(text,\"’\") "]
104447[label="expressionName\n text "]
104448[label="assignmentOperator\n = "]
104449[label="methodInvocation_lfno_primary\n addW(text,\"’\") "]
114450[label="methodName\n addW "]
114451[label="argumentList\n text,\"’\" "]
124452[label="expressionName\n text "]
124453[label="literal\n \"’\" "]
84454[label="expressionStatement\n text=addW(text,\"“\"); "]
94455[label="assignment\n text=addW(text,\"“\") "]
104456[label="expressionName\n text "]
104457[label="assignmentOperator\n = "]
104458[label="methodInvocation_lfno_primary\n addW(text,\"“\") "]
114459[label="methodName\n addW "]
114460[label="argumentList\n text,\"“\" "]
124461[label="expressionName\n text "]
124462[label="literal\n \"“\" "]
84463[label="expressionStatement\n text=addW(text,\"”\"); "]
94464[label="assignment\n text=addW(text,\"”\") "]
104465[label="expressionName\n text "]
104466[label="assignmentOperator\n = "]
104467[label="methodInvocation_lfno_primary\n addW(text,\"”\") "]
114468[label="methodName\n addW "]
114469[label="argumentList\n text,\"”\" "]
124470[label="expressionName\n text "]
124471[label="literal\n \"”\" "]
84472[label="expressionStatement\n text=addW(text,\";\"); "]
94473[label="assignment\n text=addW(text,\";\") "]
104474[label="expressionName\n text "]
104475[label="assignmentOperator\n = "]
104476[label="methodInvocation_lfno_primary\n addW(text,\";\") "]
114477[label="methodName\n addW "]
114478[label="argumentList\n text,\";\" "]
124479[label="expressionName\n text "]
124480[label="literal\n \";\" "]
84481[label="expressionStatement\n text=addW(text,\"……\"); "]
94482[label="assignment\n text=addW(text,\"……\") "]
104483[label="expressionName\n text "]
104484[label="assignmentOperator\n = "]
104485[label="methodInvocation_lfno_primary\n addW(text,\"……\") "]
114486[label="methodName\n addW "]
114487[label="argumentList\n text,\"……\" "]
124488[label="expressionName\n text "]
124489[label="literal\n \"……\" "]
84490[label="expressionStatement\n text=addW(text,\"。\"); "]
94491[label="assignment\n text=addW(text,\"。\") "]
104492[label="expressionName\n text "]
104493[label="assignmentOperator\n = "]
104494[label="methodInvocation_lfno_primary\n addW(text,\"。\") "]
114495[label="methodName\n addW "]
114496[label="argumentList\n text,\"。\" "]
124497[label="expressionName\n text "]
124498[label="literal\n \"。\" "]
84499[label="expressionStatement\n text=addW(text,\"、\"); "]
94500[label="assignment\n text=addW(text,\"、\") "]
104501[label="expressionName\n text "]
104502[label="assignmentOperator\n = "]
104503[label="methodInvocation_lfno_primary\n addW(text,\"、\") "]
114504[label="methodName\n addW "]
114505[label="argumentList\n text,\"、\" "]
124506[label="expressionName\n text "]
124507[label="literal\n \"、\" "]
84508[label="expressionStatement\n text=addW(text,\"《\"); "]
94509[label="assignment\n text=addW(text,\"《\") "]
104510[label="expressionName\n text "]
104511[label="assignmentOperator\n = "]
104512[label="methodInvocation_lfno_primary\n addW(text,\"《\") "]
114513[label="methodName\n addW "]
114514[label="argumentList\n text,\"《\" "]
124515[label="expressionName\n text "]
124516[label="literal\n \"《\" "]
84517[label="expressionStatement\n text=addW(text,\"》\"); "]
94518[label="assignment\n text=addW(text,\"》\") "]
104519[label="expressionName\n text "]
104520[label="assignmentOperator\n = "]
104521[label="methodInvocation_lfno_primary\n addW(text,\"》\") "]
114522[label="methodName\n addW "]
114523[label="argumentList\n text,\"》\" "]
124524[label="expressionName\n text "]
124525[label="literal\n \"》\" "]
84526[label="ifThenStatement\n if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);} "]
94527[label="equalityExpression\n text.length()!=length "]
104528[label="methodInvocation_lfno_primary\n text.length() "]
114529[label="typeName\n text "]
104530[label="expressionName\n length "]
94531[label="block\n {BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);} "]
104532[label="blockStatements\n BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file); "]
114533[label="localVariableDeclarationStatement\n BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file))); "]
124534[label="localVariableDeclaration\n BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file))) "]
134535[label="unannClassType_lfno_unannClassOrInterfaceType\n BufferedWriter "]
134536[label="variableDeclarator\n bw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file))) "]
144537[label="variableDeclaratorId\n bw "]
144538[label="classInstanceCreationExpression_lfno_primary\n newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file))) "]
154539[label="classInstanceCreationExpression_lfno_primary\n newOutputStreamWriter(newFileOutputStream(file)) "]
164540[label="classInstanceCreationExpression_lfno_primary\n newFileOutputStream(file) "]
174541[label="expressionName\n file "]
114542[label="expressionStatement\n bw.write(text); "]
124543[label="methodInvocation\n bw.write(text) "]
134544[label="typeName\n bw "]
134545[label="expressionName\n text "]
114546[label="expressionStatement\n bw.close(); "]
124547[label="methodInvocation\n bw.close() "]
134548[label="typeName\n bw "]
114549[label="expressionStatement\n System.out.println(\"修正了\"+file); "]
124550[label="methodInvocation\n System.out.println(\"修正了\"+file) "]
134551[label="typeName\n System.out "]
144552[label="packageOrTypeName\n System "]
134553[label="additiveExpression\n \"修正了\"+file "]
144554[label="literal\n \"修正了\" "]
144555[label="expressionName\n file "]
64556[label="catchClause\n catch(Exceptione){e.printStackTrace();} "]
74557[label="catchFormalParameter\n Exceptione "]
84558[label="unannClassType\n Exception "]
84559[label="variableDeclaratorId\n e "]
74560[label="block\n {e.printStackTrace();} "]
84561[label="expressionStatement\n e.printStackTrace(); "]
94562[label="methodInvocation\n e.printStackTrace() "]
104563[label="typeName\n e "]
34564[label="methodDeclaration\n privatestaticStringaddW(Stringtext,Stringc){text=text.replaceAll(\"\\\"+c+\"/w \",c);returntext.replaceAll(\"\\\"+c,c+\"/w \");} "]
44565[label="methodModifier\n private "]
44566[label="methodModifier\n static "]
44567[label="methodHeader\n StringaddW(Stringtext,Stringc) "]
54568[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
54569[label="methodDeclarator\n addW(Stringtext,Stringc) "]
64570[label="formalParameterList\n Stringtext,Stringc "]
74571[label="formalParameter\n Stringtext "]
84572[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
84573[label="variableDeclaratorId\n text "]
74574[label="formalParameter\n Stringc "]
84575[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
84576[label="variableDeclaratorId\n c "]
44577[label="block\n {text=text.replaceAll(\"\\\"+c+\"/w \",c);returntext.replaceAll(\"\\\"+c,c+\"/w \");} "]
54578[label="blockStatements\n text=text.replaceAll(\"\\\"+c+\"/w \",c);returntext.replaceAll(\"\\\"+c,c+\"/w \"); "]
64579[label="expressionStatement\n text=text.replaceAll(\"\\\"+c+\"/w \",c); "]
74580[label="assignment\n text=text.replaceAll(\"\\\"+c+\"/w \",c) "]
84581[label="expressionName\n text "]
84582[label="assignmentOperator\n = "]
84583[label="methodInvocation_lfno_primary\n text.replaceAll(\"\\\"+c+\"/w \",c) "]
94584[label="typeName\n text "]
94585[label="argumentList\n \"\\\"+c+\"/w \",c "]
104586[label="additiveExpression\n \"\\\"+c+\"/w \" "]
114587[label="additiveExpression\n \"\\\"+c "]
124588[label="literal\n \"\\\" "]
124589[label="expressionName\n c "]
114590[label="literal\n \"/w \" "]
104591[label="expressionName\n c "]
64592[label="returnStatement\n returntext.replaceAll(\"\\\"+c,c+\"/w \"); "]
74593[label="methodInvocation_lfno_primary\n text.replaceAll(\"\\\"+c,c+\"/w \") "]
84594[label="typeName\n text "]
84595[label="argumentList\n \"\\\"+c,c+\"/w \" "]
94596[label="additiveExpression\n \"\\\"+c "]
104597[label="literal\n \"\\\" "]
104598[label="expressionName\n c "]
94599[label="additiveExpression\n c+\"/w \" "]
104600[label="expressionName\n c "]
104601[label="literal\n \"/w \" "]
34602[label="methodDeclaration\n publicvoidtestPlay()throwsException{finalTFDictionarytfDictionary=newTFDictionary();CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}});tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\");} "]
44603[label="methodModifier\n public "]
44604[label="methodHeader\n voidtestPlay()throwsException "]
54605[label="result\n void "]
54606[label="methodDeclarator\n testPlay() "]
54607[label="throws_\n throwsException "]
64608[label="classType\n Exception "]
44609[label="block\n {finalTFDictionarytfDictionary=newTFDictionary();CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}});tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\");} "]
54610[label="blockStatements\n finalTFDictionarytfDictionary=newTFDictionary();CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}});tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\"); "]
64611[label="localVariableDeclarationStatement\n finalTFDictionarytfDictionary=newTFDictionary(); "]
74612[label="localVariableDeclaration\n finalTFDictionarytfDictionary=newTFDictionary() "]
84613[label="variableModifier\n final "]
84614[label="unannClassType_lfno_unannClassOrInterfaceType\n TFDictionary "]
84615[label="variableDeclarator\n tfDictionary=newTFDictionary() "]
94616[label="variableDeclaratorId\n tfDictionary "]
94617[label="classInstanceCreationExpression_lfno_primary\n newTFDictionary() "]
64618[label="expressionStatement\n CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}}); "]
74619[label="methodInvocation\n CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}}) "]
84620[label="typeName\n CorpusLoader "]
84621[label="argumentList\n \"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}} "]
94622[label="literal\n \"D:\\JavaProjects\\CorpusToolBox\\data\\2014\" "]
94623[label="classInstanceCreationExpression_lfno_primary\n newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}} "]
104624[label="classBody\n {@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}} "]
114625[label="methodDeclaration\n @Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}} "]
124626[label="markerAnnotation\n @Override "]
134627[label="typeName\n Override "]
124628[label="methodModifier\n public "]
124629[label="methodHeader\n voidhandle(Documentdocument) "]
134630[label="result\n void "]
134631[label="methodDeclarator\n handle(Documentdocument) "]
144632[label="formalParameter\n Documentdocument "]
154633[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
154634[label="variableDeclaratorId\n document "]
124635[label="block\n {for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}} "]
134636[label="enhancedForStatement\n for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}} "]
144637[label="unannClassType_lfno_unannClassOrInterfaceType\n List<IWord> "]
154638[label="typeArguments\n <IWord> "]
164639[label="classType_lfno_classOrInterfaceType\n IWord "]
144640[label="variableDeclaratorId\n wordList "]
144641[label="methodInvocation_lfno_primary\n document.getComplexSentenceList() "]
154642[label="typeName\n document "]
144643[label="block\n {for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}} "]
154644[label="enhancedForStatement\n for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}} "]
164645[label="unannClassType_lfno_unannClassOrInterfaceType\n IWord "]
164646[label="variableDeclaratorId\n word "]
164647[label="expressionName\n wordList "]
164648[label="block\n {if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}} "]
174649[label="ifThenStatement\n if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());} "]
184650[label="conditionalAndExpression\n wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\") "]
194651[label="relationalExpression\n wordinstanceofCompoundWord "]
204652[label="expressionName\n word "]
204653[label="classType_lfno_classOrInterfaceType\n CompoundWord "]
194654[label="primary\n word.getLabel().equals(\"ns\") "]
204655[label="methodInvocation_lfno_primary\n word.getLabel() "]
214656[label="typeName\n word "]
204657[label="methodInvocation_lf_primary\n .equals(\"ns\") "]
214658[label="literal\n \"ns\" "]
184659[label="block\n {tfDictionary.add(word.toString());} "]
194660[label="expressionStatement\n tfDictionary.add(word.toString()); "]
204661[label="methodInvocation\n tfDictionary.add(word.toString()) "]
214662[label="typeName\n tfDictionary "]
214663[label="methodInvocation_lfno_primary\n word.toString() "]
224664[label="typeName\n word "]
64665[label="expressionStatement\n tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\"); "]
74666[label="methodInvocation\n tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\") "]
84667[label="typeName\n tfDictionary "]
84668[label="literal\n \"data/test/complex_ns.txt\" "]
34669[label="methodDeclaration\n publicvoidtestAdjustNGram()throwsException{IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\"));while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();}bw.close();} "]
44670[label="methodModifier\n public "]
44671[label="methodHeader\n voidtestAdjustNGram()throwsException "]
54672[label="result\n void "]
54673[label="methodDeclarator\n testAdjustNGram() "]
54674[label="throws_\n throwsException "]
64675[label="classType\n Exception "]
44676[label="block\n {IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\"));while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();}bw.close();} "]
54677[label="blockStatements\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\"));while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();}bw.close(); "]
64678[label="localVariableDeclarationStatement\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath); "]
74679[label="localVariableDeclaration\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath) "]
84680[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
94681[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
94682[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
84683[label="variableDeclarator\n iterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath) "]
94684[label="variableDeclaratorId\n iterator "]
94685[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath) "]
104686[label="expressionName\n HanLP.Config.BiGramDictionaryPath "]
114687[label="ambiguousName\n HanLP.Config "]
124688[label="ambiguousName\n HanLP "]
64689[label="localVariableDeclarationStatement\n BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\")); "]
74690[label="localVariableDeclaration\n BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\")) "]
84691[label="unannClassType_lfno_unannClassOrInterfaceType\n BufferedWriter "]
84692[label="variableDeclarator\n bw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\")) "]
94693[label="variableDeclaratorId\n bw "]
94694[label="classInstanceCreationExpression_lfno_primary\n newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\")) "]
104695[label="classInstanceCreationExpression_lfno_primary\n newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\") "]
114696[label="argumentList\n newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\" "]
124697[label="classInstanceCreationExpression_lfno_primary\n newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\") "]
134698[label="additiveExpression\n HanLP.Config.BiGramDictionaryPath+\"adjust.txt\" "]
144699[label="expressionName\n HanLP.Config.BiGramDictionaryPath "]
154700[label="ambiguousName\n HanLP.Config "]
164701[label="ambiguousName\n HanLP "]
144702[label="literal\n \"adjust.txt\" "]
124703[label="literal\n \"UTF-8\" "]
64704[label="whileStatement\n while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();} "]
74705[label="methodInvocation_lfno_primary\n iterator.hasNext() "]
84706[label="typeName\n iterator "]
74707[label="block\n {Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();} "]
84708[label="blockStatements\n Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine(); "]
94709[label="localVariableDeclarationStatement\n Stringline=iterator.next(); "]
104710[label="localVariableDeclaration\n Stringline=iterator.next() "]
114711[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
114712[label="variableDeclarator\n line=iterator.next() "]
124713[label="variableDeclaratorId\n line "]
124714[label="methodInvocation_lfno_primary\n iterator.next() "]
134715[label="typeName\n iterator "]
94716[label="localVariableDeclarationStatement\n String[]params=line.split(\" \"); "]
104717[label="localVariableDeclaration\n String[]params=line.split(\" \") "]
114718[label="unannArrayType\n String[] "]
124719[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
124720[label="dims\n [] "]
114721[label="variableDeclarator\n params=line.split(\" \") "]
124722[label="variableDeclaratorId\n params "]
124723[label="methodInvocation_lfno_primary\n line.split(\" \") "]
134724[label="typeName\n line "]
134725[label="literal\n \" \" "]
94726[label="localVariableDeclarationStatement\n Stringfirst=params[0].split(\"@\",2)[0]; "]
104727[label="localVariableDeclaration\n Stringfirst=params[0].split(\"@\",2)[0] "]
114728[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
114729[label="variableDeclarator\n first=params[0].split(\"@\",2)[0] "]
124730[label="variableDeclaratorId\n first "]
124731[label="primary\n params[0].split(\"@\",2)[0] "]
134732[label="arrayAccess_lfno_primary\n params[0] "]
144733[label="expressionName\n params "]
144734[label="literal\n 0 "]
134735[label="arrayAccess_lf_primary\n .split(\"@\",2)[0] "]
144736[label="methodInvocation_lf_primary\n .split(\"@\",2) "]
154737[label="argumentList\n \"@\",2 "]
164738[label="literal\n \"@\" "]
164739[label="literal\n 2 "]
144740[label="literal\n 0 "]
94741[label="localVariableDeclarationStatement\n Stringsecond=params[0].split(\"@\",2)[1]; "]
104742[label="localVariableDeclaration\n Stringsecond=params[0].split(\"@\",2)[1] "]
114743[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
114744[label="variableDeclarator\n second=params[0].split(\"@\",2)[1] "]
124745[label="variableDeclaratorId\n second "]
124746[label="primary\n params[0].split(\"@\",2)[1] "]
134747[label="arrayAccess_lfno_primary\n params[0] "]
144748[label="expressionName\n params "]
144749[label="literal\n 0 "]
134750[label="arrayAccess_lf_primary\n .split(\"@\",2)[1] "]
144751[label="methodInvocation_lf_primary\n .split(\"@\",2) "]
154752[label="argumentList\n \"@\",2 "]
164753[label="literal\n \"@\" "]
164754[label="literal\n 2 "]
144755[label="literal\n 1 "]
94756[label="localVariableDeclarationStatement\n intbiFrequency=Integer.parseInt(params[1]); "]
104757[label="localVariableDeclaration\n intbiFrequency=Integer.parseInt(params[1]) "]
114758[label="integralType\n int "]
114759[label="variableDeclarator\n biFrequency=Integer.parseInt(params[1]) "]
124760[label="variableDeclaratorId\n biFrequency "]
124761[label="methodInvocation_lfno_primary\n Integer.parseInt(params[1]) "]
134762[label="typeName\n Integer "]
134763[label="arrayAccess_lfno_primary\n params[1] "]
144764[label="expressionName\n params "]
144765[label="literal\n 1 "]
94766[label="localVariableDeclarationStatement\n CoreDictionary.Attributeattribute=CoreDictionary.get(first+second); "]
104767[label="localVariableDeclaration\n CoreDictionary.Attributeattribute=CoreDictionary.get(first+second) "]
114768[label="unannClassOrInterfaceType\n CoreDictionary.Attribute "]
124769[label="unannClassType_lfno_unannClassOrInterfaceType\n CoreDictionary "]
124770[label="unannClassType_lf_unannClassOrInterfaceType\n .Attribute "]
114771[label="variableDeclarator\n attribute=CoreDictionary.get(first+second) "]
124772[label="variableDeclaratorId\n attribute "]
124773[label="methodInvocation_lfno_primary\n CoreDictionary.get(first+second) "]
134774[label="typeName\n CoreDictionary "]
134775[label="additiveExpression\n first+second "]
144776[label="expressionName\n first "]
144777[label="expressionName\n second "]
94778[label="ifThenStatement\n if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;} "]
104779[label="conditionalAndExpression\n attribute!=null&&(first.length()==1||second.length()==1) "]
114780[label="equalityExpression\n attribute!=null "]
124781[label="expressionName\n attribute "]
124782[label="literal\n null "]
114783[label="primaryNoNewArray_lfno_primary\n (first.length()==1||second.length()==1) "]
124784[label="conditionalOrExpression\n first.length()==1||second.length()==1 "]
134785[label="equalityExpression\n first.length()==1 "]
144786[label="methodInvocation_lfno_primary\n first.length() "]
154787[label="typeName\n first "]
144788[label="literal\n 1 "]
134789[label="equalityExpression\n second.length()==1 "]
144790[label="methodInvocation_lfno_primary\n second.length() "]
154791[label="typeName\n second "]
144792[label="literal\n 1 "]
104793[label="block\n {System.out.println(line);continue;} "]
114794[label="blockStatements\n System.out.println(line);continue; "]
124795[label="expressionStatement\n System.out.println(line); "]
134796[label="methodInvocation\n System.out.println(line) "]
144797[label="typeName\n System.out "]
154798[label="packageOrTypeName\n System "]
144799[label="expressionName\n line "]
124800[label="continueStatement\n continue; "]
94801[label="expressionStatement\n bw.write(line); "]
104802[label="methodInvocation\n bw.write(line) "]
114803[label="typeName\n bw "]
114804[label="expressionName\n line "]
94805[label="expressionStatement\n bw.newLine(); "]
104806[label="methodInvocation\n bw.newLine() "]
114807[label="typeName\n bw "]
64808[label="expressionStatement\n bw.close(); "]
74809[label="methodInvocation\n bw.close() "]
84810[label="typeName\n bw "]
34811[label="methodDeclaration\n publicvoidtestRemoveLabelD()throwsException{Set<String>nameFollowers=newTreeSet<String>();IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}}DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath);for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}}dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath);} "]
44812[label="methodModifier\n public "]
44813[label="methodHeader\n voidtestRemoveLabelD()throwsException "]
54814[label="result\n void "]
54815[label="methodDeclarator\n testRemoveLabelD() "]
54816[label="throws_\n throwsException "]
64817[label="classType\n Exception "]
44818[label="block\n {Set<String>nameFollowers=newTreeSet<String>();IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}}DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath);for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}}dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath);} "]
54819[label="blockStatements\n Set<String>nameFollowers=newTreeSet<String>();IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}}DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath);for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}}dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath); "]
64820[label="localVariableDeclarationStatement\n Set<String>nameFollowers=newTreeSet<String>(); "]
74821[label="localVariableDeclaration\n Set<String>nameFollowers=newTreeSet<String>() "]
84822[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
94823[label="typeArguments\n <String> "]
104824[label="classType_lfno_classOrInterfaceType\n String "]
84825[label="variableDeclarator\n nameFollowers=newTreeSet<String>() "]
94826[label="variableDeclaratorId\n nameFollowers "]
94827[label="classInstanceCreationExpression_lfno_primary\n newTreeSet<String>() "]
104828[label="typeArguments\n <String> "]
114829[label="classType_lfno_classOrInterfaceType\n String "]
64830[label="localVariableDeclarationStatement\n IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath); "]
74831[label="localVariableDeclaration\n IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath) "]
84832[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
94833[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
94834[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
84835[label="variableDeclarator\n lineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath) "]
94836[label="variableDeclaratorId\n lineIterator "]
94837[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath) "]
104838[label="expressionName\n HanLP.Config.BiGramDictionaryPath "]
114839[label="ambiguousName\n HanLP.Config "]
124840[label="ambiguousName\n HanLP "]
64841[label="whileStatement\n while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}} "]
74842[label="methodInvocation_lfno_primary\n lineIterator.hasNext() "]
84843[label="typeName\n lineIterator "]
74844[label="block\n {Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}} "]
84845[label="blockStatements\n Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);} "]
94846[label="localVariableDeclarationStatement\n Stringline=lineIterator.next(); "]
104847[label="localVariableDeclaration\n Stringline=lineIterator.next() "]
114848[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
114849[label="variableDeclarator\n line=lineIterator.next() "]
124850[label="variableDeclaratorId\n line "]
124851[label="methodInvocation_lfno_primary\n lineIterator.next() "]
134852[label="typeName\n lineIterator "]
94853[label="localVariableDeclarationStatement\n String[]words=line.split(\"\\s\")[0].split(\"@\"); "]
104854[label="localVariableDeclaration\n String[]words=line.split(\"\\s\")[0].split(\"@\") "]
114855[label="unannArrayType\n String[] "]
124856[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
124857[label="dims\n [] "]
114858[label="variableDeclarator\n words=line.split(\"\\s\")[0].split(\"@\") "]
124859[label="variableDeclaratorId\n words "]
124860[label="primary\n line.split(\"\\s\")[0].split(\"@\") "]
134861[label="arrayAccess_lfno_primary\n line.split(\"\\s\")[0] "]
144862[label="methodInvocation_lfno_primary\n line.split(\"\\s\") "]
154863[label="typeName\n line "]
154864[label="literal\n \"\\s\" "]
144865[label="literal\n 0 "]
134866[label="methodInvocation_lf_primary\n .split(\"@\") "]
144867[label="literal\n \"@\" "]
94868[label="ifThenStatement\n if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);} "]
104869[label="primary\n words[0].equals(Predefine.TAG_PEOPLE) "]
114870[label="arrayAccess_lfno_primary\n words[0] "]
124871[label="expressionName\n words "]
124872[label="literal\n 0 "]
114873[label="methodInvocation_lf_primary\n .equals(Predefine.TAG_PEOPLE) "]
124874[label="expressionName\n Predefine.TAG_PEOPLE "]
134875[label="ambiguousName\n Predefine "]
104876[label="block\n {nameFollowers.add(words[1]);} "]
114877[label="expressionStatement\n nameFollowers.add(words[1]); "]
124878[label="methodInvocation\n nameFollowers.add(words[1]) "]
134879[label="typeName\n nameFollowers "]
134880[label="arrayAccess_lfno_primary\n words[1] "]
144881[label="expressionName\n words "]
144882[label="literal\n 1 "]
64883[label="localVariableDeclarationStatement\n DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath); "]
74884[label="localVariableDeclaration\n DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath) "]
84885[label="unannClassType_lfno_unannClassOrInterfaceType\n DictionaryMaker "]
84886[label="variableDeclarator\n dictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath) "]
94887[label="variableDeclaratorId\n dictionary "]
94888[label="methodInvocation_lfno_primary\n DictionaryMaker.load(HanLP.Config.PersonDictionaryPath) "]
104889[label="typeName\n DictionaryMaker "]
104890[label="expressionName\n HanLP.Config.PersonDictionaryPath "]
114891[label="ambiguousName\n HanLP.Config "]
124892[label="ambiguousName\n HanLP "]
64893[label="enhancedForStatement\n for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}} "]
74894[label="unannClassOrInterfaceType\n Map.Entry<String,Item> "]
84895[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
84896[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,Item> "]
94897[label="typeArguments\n <String,Item> "]
104898[label="typeArgumentList\n String,Item "]
114899[label="classType_lfno_classOrInterfaceType\n String "]
114900[label="classType_lfno_classOrInterfaceType\n Item "]
74901[label="variableDeclaratorId\n entry "]
74902[label="methodInvocation_lfno_primary\n dictionary.entrySet() "]
84903[label="typeName\n dictionary "]
74904[label="block\n {Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}} "]
84905[label="blockStatements\n Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}} "]
94906[label="localVariableDeclarationStatement\n Stringkey=entry.getKey(); "]
104907[label="localVariableDeclaration\n Stringkey=entry.getKey() "]
114908[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
114909[label="variableDeclarator\n key=entry.getKey() "]
124910[label="variableDeclaratorId\n key "]
124911[label="methodInvocation_lfno_primary\n entry.getKey() "]
134912[label="typeName\n entry "]
94913[label="localVariableDeclarationStatement\n intdF=entry.getValue().getFrequency(\"D\"); "]
104914[label="localVariableDeclaration\n intdF=entry.getValue().getFrequency(\"D\") "]
114915[label="integralType\n int "]
114916[label="variableDeclarator\n dF=entry.getValue().getFrequency(\"D\") "]
124917[label="variableDeclaratorId\n dF "]
124918[label="primary\n entry.getValue().getFrequency(\"D\") "]
134919[label="methodInvocation_lfno_primary\n entry.getValue() "]
144920[label="typeName\n entry "]
134921[label="methodInvocation_lf_primary\n .getFrequency(\"D\") "]
144922[label="literal\n \"D\" "]
94923[label="ifThenStatement\n if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}} "]
104924[label="conditionalAndExpression\n key.length()==1&&0<dF&&dF<100 "]
114925[label="conditionalAndExpression\n key.length()==1&&0<dF "]
124926[label="equalityExpression\n key.length()==1 "]
134927[label="methodInvocation_lfno_primary\n key.length() "]
144928[label="typeName\n key "]
134929[label="literal\n 1 "]
124930[label="relationalExpression\n 0<dF "]
134931[label="literal\n 0 "]
134932[label="expressionName\n dF "]
114933[label="relationalExpression\n dF<100 "]
124934[label="expressionName\n dF "]
124935[label="literal\n 100 "]
104936[label="block\n {CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}} "]
114937[label="blockStatements\n CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");} "]
124938[label="localVariableDeclarationStatement\n CoreDictionary.Attributeattribute=CoreDictionary.get(key); "]
134939[label="localVariableDeclaration\n CoreDictionary.Attributeattribute=CoreDictionary.get(key) "]
144940[label="unannClassOrInterfaceType\n CoreDictionary.Attribute "]
154941[label="unannClassType_lfno_unannClassOrInterfaceType\n CoreDictionary "]
154942[label="unannClassType_lf_unannClassOrInterfaceType\n .Attribute "]
144943[label="variableDeclarator\n attribute=CoreDictionary.get(key) "]
154944[label="variableDeclaratorId\n attribute "]
154945[label="methodInvocation_lfno_primary\n CoreDictionary.get(key) "]
164946[label="typeName\n CoreDictionary "]
164947[label="expressionName\n key "]
124948[label="ifThenStatement\n if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");} "]
134949[label="conditionalOrExpression\n nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000) "]
144950[label="methodInvocation_lfno_primary\n nameFollowers.contains(key) "]
154951[label="typeName\n nameFollowers "]
154952[label="expressionName\n key "]
144953[label="primaryNoNewArray_lfno_primary\n (attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000) "]
154954[label="conditionalAndExpression\n attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000 "]
164955[label="conditionalAndExpression\n attribute!=null&&attribute.hasNatureStartsWith(\"v\") "]
174956[label="equalityExpression\n attribute!=null "]
184957[label="expressionName\n attribute "]
184958[label="literal\n null "]
174959[label="methodInvocation_lfno_primary\n attribute.hasNatureStartsWith(\"v\") "]
184960[label="typeName\n attribute "]
184961[label="literal\n \"v\" "]
164962[label="relationalExpression\n attribute.totalFrequency>1000 "]
174963[label="expressionName\n attribute.totalFrequency "]
184964[label="ambiguousName\n attribute "]
174965[label="literal\n 1000 "]
134966[label="block\n {System.out.println(key);entry.getValue().removeLabel(\"D\");} "]
144967[label="blockStatements\n System.out.println(key);entry.getValue().removeLabel(\"D\"); "]
154968[label="expressionStatement\n System.out.println(key); "]
164969[label="methodInvocation\n System.out.println(key) "]
174970[label="typeName\n System.out "]
184971[label="packageOrTypeName\n System "]
174972[label="expressionName\n key "]
154973[label="expressionStatement\n entry.getValue().removeLabel(\"D\"); "]
164974[label="methodInvocation\n entry.getValue().removeLabel(\"D\") "]
174975[label="methodInvocation_lfno_primary\n entry.getValue() "]
184976[label="typeName\n entry "]
174977[label="literal\n \"D\" "]
64978[label="expressionStatement\n dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath); "]
74979[label="methodInvocation\n dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath) "]
84980[label="typeName\n dictionary "]
84981[label="expressionName\n HanLP.Config.PersonDictionaryPath "]
94982[label="ambiguousName\n HanLP.Config "]
104983[label="ambiguousName\n HanLP "]
04984[label="compilationUnit\n packagecom.hankcs.hanlp.collection.AhoCorasick;importcom.hankcs.hanlp.corpus.io.ByteArray;importjava.io.DataOutputStream;importjava.io.IOException;importjava.io.ObjectInputStream;importjava.io.ObjectOutputStream;importjava.util.*;importjava.util.concurrent.LinkedBlockingDeque;publicclassAhoCorasickDoubleArrayTrie<V>{protectedintcheck[];protectedintbase[];intfail[];int[][]output;protectedV[]v;protectedint[]l;protectedintsize;publicAhoCorasickDoubleArrayTrie(){}publicAhoCorasickDoubleArrayTrie(TreeMap<String,V>dictionary){build(dictionary);}publicList<Hit<V>>parseText(Stringtext){intposition=1;intcurrentState=0;List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>();for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;}returncollectedEmits;}publicvoidparseText(Stringtext,IHit<V>processor){intposition=1;intcurrentState=0;for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}}publicvoidparseText(char[]text,IHit<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}}publicvoidparseText(char[]text,IHitFull<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;}}publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(size);for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}}out.writeInt(l.length);for(intlength:l){out.writeInt(length);}}publicvoidsave(ObjectOutputStreamout)throwsIOException{out.writeObject(base);out.writeObject(check);out.writeObject(fail);out.writeObject(output);out.writeObject(l);}publicvoidload(ObjectInputStreamin,V[]value)throwsIOException,ClassNotFoundException{base=(int[])in.readObject();check=(int[])in.readObject();fail=(int[])in.readObject();output=(int[][])in.readObject();l=(int[])in.readObject();v=value;}publicbooleanload(ByteArraybyteArray,V[]value){if(byteArray==null)returnfalse;size=byteArray.nextInt();base=newint[size+65535];check=newint[size+65535];fail=newint[size+65535];output=newint[size+65535][];intlength;for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}}length=byteArray.nextInt();l=newint[length];for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();}v=value;returntrue;}publicVget(Stringkey){intindex=exactMatchSearch(key);if(index>=0){returnv[index];}returnnull;}publicbooleanset(Stringkey,Vvalue){intindex=exactMatchSearch(key);if(index>=0){v[index]=value;returntrue;}returnfalse;}publicVget(intindex){returnv[index];}publicinterfaceIHit<V>{voidhit(intbegin,intend,Vvalue);}publicinterfaceIHitFull<V>{voidhit(intbegin,intend,Vvalue,intindex);}publicclassHit<V>{publicfinalintbegin;publicfinalintend;publicfinalVvalue;publicHit(intbegin,intend,Vvalue){this.begin=begin;this.end=end;this.value=value;}@OverridepublicStringtoString(){returnString.format(\"[%d:%d]=%s\",begin,end,value);}}privateintgetState(intcurrentState,charcharacter){intnewCurrentState=transitionWithRoot(currentState,character);while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);}returnnewCurrentState;}privatevoidstoreEmits(intposition,intcurrentState,List<Hit<V>>collectedEmits){int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}}}protectedinttransition(intcurrent,charc){intb=current;intp;p=b+c+1;if(b==check[p])b=base[p];elsereturn-1;p=b;returnp;}protectedinttransitionWithRoot(intnodePos,charc){intb=base[nodePos];intp;p=b+c+1;if(b!=check[p]){if(nodePos==0)return0;return-1;}returnp;}publicvoidbuild(TreeMap<String,V>map){newBuilder().build(map);}privateintfetch(Stateparent,List<Map.Entry<Integer,State>>siblings){if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));}for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));}returnsiblings.size();}publicintexactMatchSearch(Stringkey){returnexactMatchSearch(key,0,0,0);}privateintexactMatchSearch(Stringkey,intpos,intlen,intnodePos){if(len<=0)len=key.length();if(nodePos<=0)nodePos=0;intresult=-1;char[]keyChars=key.toCharArray();intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;}privateintexactMatchSearch(char[]keyChars,intpos,intlen,intnodePos){intresult=-1;intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;}privatestaticclassDebugArray{Map<String,String>nameValueMap=newLinkedHashMap<String,String>();publicvoidadd(Stringname,intvalue){StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);}@OverridepublicStringtoString(){Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;}publicvoidprintln(){System.out.print(this);}}publicintsize(){returnv==null?0:v.length;}privateclassBuilder{privateStaterootState=newState();privatebooleanused[];privateintallocSize;privateintprogress;privateintnextCheckPos;privateintkeySize;@SuppressWarnings(\"unchecked\")publicvoidbuild(TreeMap<String,V>map){v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();}privatevoidaddKeyword(Stringkeyword,intindex){StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();}privatevoidaddAllKeyword(Collection<String>keywordSet){inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}}privatevoidconstructFailureStates(){fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}}privatevoidconstructOutput(StatetargetState){Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;}privatevoidbuildDoubleArrayTrie(Set<String>keySet){progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);}privateintresize(intnewSize){int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;}privateintinsert(List<Map.Entry<Integer,State>>siblings){intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;}privatevoidloseWeight(){intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;}}}<EOF> "]
14985[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.AhoCorasick; "]
24986[label="packageName\n com.hankcs.hanlp.collection.AhoCorasick "]
34987[label="packageName\n com.hankcs.hanlp.collection "]
44988[label="packageName\n com.hankcs.hanlp "]
54989[label="packageName\n com.hankcs "]
64990[label="packageName\n com "]
14991[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.ByteArray; "]
24992[label="typeName\n com.hankcs.hanlp.corpus.io.ByteArray "]
34993[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
44994[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54995[label="packageOrTypeName\n com.hankcs.hanlp "]
64996[label="packageOrTypeName\n com.hankcs "]
74997[label="packageOrTypeName\n com "]
14998[label="singleTypeImportDeclaration\n importjava.io.DataOutputStream; "]
24999[label="typeName\n java.io.DataOutputStream "]
35000[label="packageOrTypeName\n java.io "]
45001[label="packageOrTypeName\n java "]
15002[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
25003[label="typeName\n java.io.IOException "]
35004[label="packageOrTypeName\n java.io "]
45005[label="packageOrTypeName\n java "]
15006[label="singleTypeImportDeclaration\n importjava.io.ObjectInputStream; "]
25007[label="typeName\n java.io.ObjectInputStream "]
35008[label="packageOrTypeName\n java.io "]
45009[label="packageOrTypeName\n java "]
15010[label="singleTypeImportDeclaration\n importjava.io.ObjectOutputStream; "]
25011[label="typeName\n java.io.ObjectOutputStream "]
35012[label="packageOrTypeName\n java.io "]
45013[label="packageOrTypeName\n java "]
15014[label="typeImportOnDemandDeclaration\n importjava.util.*; "]
25015[label="packageOrTypeName\n java.util "]
35016[label="packageOrTypeName\n java "]
15017[label="singleTypeImportDeclaration\n importjava.util.concurrent.LinkedBlockingDeque; "]
25018[label="typeName\n java.util.concurrent.LinkedBlockingDeque "]
35019[label="packageOrTypeName\n java.util.concurrent "]
45020[label="packageOrTypeName\n java.util "]
55021[label="packageOrTypeName\n java "]
15022[label="normalClassDeclaration\n publicclassAhoCorasickDoubleArrayTrie<V>{protectedintcheck[];protectedintbase[];intfail[];int[][]output;protectedV[]v;protectedint[]l;protectedintsize;publicAhoCorasickDoubleArrayTrie(){}publicAhoCorasickDoubleArrayTrie(TreeMap<String,V>dictionary){build(dictionary);}publicList<Hit<V>>parseText(Stringtext){intposition=1;intcurrentState=0;List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>();for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;}returncollectedEmits;}publicvoidparseText(Stringtext,IHit<V>processor){intposition=1;intcurrentState=0;for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}}publicvoidparseText(char[]text,IHit<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}}publicvoidparseText(char[]text,IHitFull<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;}}publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(size);for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}}out.writeInt(l.length);for(intlength:l){out.writeInt(length);}}publicvoidsave(ObjectOutputStreamout)throwsIOException{out.writeObject(base);out.writeObject(check);out.writeObject(fail);out.writeObject(output);out.writeObject(l);}publicvoidload(ObjectInputStreamin,V[]value)throwsIOException,ClassNotFoundException{base=(int[])in.readObject();check=(int[])in.readObject();fail=(int[])in.readObject();output=(int[][])in.readObject();l=(int[])in.readObject();v=value;}publicbooleanload(ByteArraybyteArray,V[]value){if(byteArray==null)returnfalse;size=byteArray.nextInt();base=newint[size+65535];check=newint[size+65535];fail=newint[size+65535];output=newint[size+65535][];intlength;for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}}length=byteArray.nextInt();l=newint[length];for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();}v=value;returntrue;}publicVget(Stringkey){intindex=exactMatchSearch(key);if(index>=0){returnv[index];}returnnull;}publicbooleanset(Stringkey,Vvalue){intindex=exactMatchSearch(key);if(index>=0){v[index]=value;returntrue;}returnfalse;}publicVget(intindex){returnv[index];}publicinterfaceIHit<V>{voidhit(intbegin,intend,Vvalue);}publicinterfaceIHitFull<V>{voidhit(intbegin,intend,Vvalue,intindex);}publicclassHit<V>{publicfinalintbegin;publicfinalintend;publicfinalVvalue;publicHit(intbegin,intend,Vvalue){this.begin=begin;this.end=end;this.value=value;}@OverridepublicStringtoString(){returnString.format(\"[%d:%d]=%s\",begin,end,value);}}privateintgetState(intcurrentState,charcharacter){intnewCurrentState=transitionWithRoot(currentState,character);while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);}returnnewCurrentState;}privatevoidstoreEmits(intposition,intcurrentState,List<Hit<V>>collectedEmits){int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}}}protectedinttransition(intcurrent,charc){intb=current;intp;p=b+c+1;if(b==check[p])b=base[p];elsereturn-1;p=b;returnp;}protectedinttransitionWithRoot(intnodePos,charc){intb=base[nodePos];intp;p=b+c+1;if(b!=check[p]){if(nodePos==0)return0;return-1;}returnp;}publicvoidbuild(TreeMap<String,V>map){newBuilder().build(map);}privateintfetch(Stateparent,List<Map.Entry<Integer,State>>siblings){if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));}for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));}returnsiblings.size();}publicintexactMatchSearch(Stringkey){returnexactMatchSearch(key,0,0,0);}privateintexactMatchSearch(Stringkey,intpos,intlen,intnodePos){if(len<=0)len=key.length();if(nodePos<=0)nodePos=0;intresult=-1;char[]keyChars=key.toCharArray();intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;}privateintexactMatchSearch(char[]keyChars,intpos,intlen,intnodePos){intresult=-1;intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;}privatestaticclassDebugArray{Map<String,String>nameValueMap=newLinkedHashMap<String,String>();publicvoidadd(Stringname,intvalue){StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);}@OverridepublicStringtoString(){Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;}publicvoidprintln(){System.out.print(this);}}publicintsize(){returnv==null?0:v.length;}privateclassBuilder{privateStaterootState=newState();privatebooleanused[];privateintallocSize;privateintprogress;privateintnextCheckPos;privateintkeySize;@SuppressWarnings(\"unchecked\")publicvoidbuild(TreeMap<String,V>map){v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();}privatevoidaddKeyword(Stringkeyword,intindex){StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();}privatevoidaddAllKeyword(Collection<String>keywordSet){inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}}privatevoidconstructFailureStates(){fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}}privatevoidconstructOutput(StatetargetState){Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;}privatevoidbuildDoubleArrayTrie(Set<String>keySet){progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);}privateintresize(intnewSize){int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;}privateintinsert(List<Map.Entry<Integer,State>>siblings){intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;}privatevoidloseWeight(){intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;}}} "]
25023[label="classModifier\n public "]
25024[label="typeParameters\n <V> "]
35025[label="typeParameter\n V "]
25026[label="classBody\n {protectedintcheck[];protectedintbase[];intfail[];int[][]output;protectedV[]v;protectedint[]l;protectedintsize;publicAhoCorasickDoubleArrayTrie(){}publicAhoCorasickDoubleArrayTrie(TreeMap<String,V>dictionary){build(dictionary);}publicList<Hit<V>>parseText(Stringtext){intposition=1;intcurrentState=0;List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>();for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;}returncollectedEmits;}publicvoidparseText(Stringtext,IHit<V>processor){intposition=1;intcurrentState=0;for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}}publicvoidparseText(char[]text,IHit<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}}publicvoidparseText(char[]text,IHitFull<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;}}publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(size);for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}}out.writeInt(l.length);for(intlength:l){out.writeInt(length);}}publicvoidsave(ObjectOutputStreamout)throwsIOException{out.writeObject(base);out.writeObject(check);out.writeObject(fail);out.writeObject(output);out.writeObject(l);}publicvoidload(ObjectInputStreamin,V[]value)throwsIOException,ClassNotFoundException{base=(int[])in.readObject();check=(int[])in.readObject();fail=(int[])in.readObject();output=(int[][])in.readObject();l=(int[])in.readObject();v=value;}publicbooleanload(ByteArraybyteArray,V[]value){if(byteArray==null)returnfalse;size=byteArray.nextInt();base=newint[size+65535];check=newint[size+65535];fail=newint[size+65535];output=newint[size+65535][];intlength;for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}}length=byteArray.nextInt();l=newint[length];for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();}v=value;returntrue;}publicVget(Stringkey){intindex=exactMatchSearch(key);if(index>=0){returnv[index];}returnnull;}publicbooleanset(Stringkey,Vvalue){intindex=exactMatchSearch(key);if(index>=0){v[index]=value;returntrue;}returnfalse;}publicVget(intindex){returnv[index];}publicinterfaceIHit<V>{voidhit(intbegin,intend,Vvalue);}publicinterfaceIHitFull<V>{voidhit(intbegin,intend,Vvalue,intindex);}publicclassHit<V>{publicfinalintbegin;publicfinalintend;publicfinalVvalue;publicHit(intbegin,intend,Vvalue){this.begin=begin;this.end=end;this.value=value;}@OverridepublicStringtoString(){returnString.format(\"[%d:%d]=%s\",begin,end,value);}}privateintgetState(intcurrentState,charcharacter){intnewCurrentState=transitionWithRoot(currentState,character);while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);}returnnewCurrentState;}privatevoidstoreEmits(intposition,intcurrentState,List<Hit<V>>collectedEmits){int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}}}protectedinttransition(intcurrent,charc){intb=current;intp;p=b+c+1;if(b==check[p])b=base[p];elsereturn-1;p=b;returnp;}protectedinttransitionWithRoot(intnodePos,charc){intb=base[nodePos];intp;p=b+c+1;if(b!=check[p]){if(nodePos==0)return0;return-1;}returnp;}publicvoidbuild(TreeMap<String,V>map){newBuilder().build(map);}privateintfetch(Stateparent,List<Map.Entry<Integer,State>>siblings){if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));}for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));}returnsiblings.size();}publicintexactMatchSearch(Stringkey){returnexactMatchSearch(key,0,0,0);}privateintexactMatchSearch(Stringkey,intpos,intlen,intnodePos){if(len<=0)len=key.length();if(nodePos<=0)nodePos=0;intresult=-1;char[]keyChars=key.toCharArray();intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;}privateintexactMatchSearch(char[]keyChars,intpos,intlen,intnodePos){intresult=-1;intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;}privatestaticclassDebugArray{Map<String,String>nameValueMap=newLinkedHashMap<String,String>();publicvoidadd(Stringname,intvalue){StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);}@OverridepublicStringtoString(){Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;}publicvoidprintln(){System.out.print(this);}}publicintsize(){returnv==null?0:v.length;}privateclassBuilder{privateStaterootState=newState();privatebooleanused[];privateintallocSize;privateintprogress;privateintnextCheckPos;privateintkeySize;@SuppressWarnings(\"unchecked\")publicvoidbuild(TreeMap<String,V>map){v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();}privatevoidaddKeyword(Stringkeyword,intindex){StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();}privatevoidaddAllKeyword(Collection<String>keywordSet){inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}}privatevoidconstructFailureStates(){fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}}privatevoidconstructOutput(StatetargetState){Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;}privatevoidbuildDoubleArrayTrie(Set<String>keySet){progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);}privateintresize(intnewSize){int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;}privateintinsert(List<Map.Entry<Integer,State>>siblings){intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;}privatevoidloseWeight(){intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;}}} "]
35027[label="fieldDeclaration\n protectedintcheck[]; "]
45028[label="fieldModifier\n protected "]
45029[label="integralType\n int "]
45030[label="variableDeclaratorId\n check[] "]
55031[label="dims\n [] "]
35032[label="fieldDeclaration\n protectedintbase[]; "]
45033[label="fieldModifier\n protected "]
45034[label="integralType\n int "]
45035[label="variableDeclaratorId\n base[] "]
55036[label="dims\n [] "]
35037[label="fieldDeclaration\n intfail[]; "]
45038[label="integralType\n int "]
45039[label="variableDeclaratorId\n fail[] "]
55040[label="dims\n [] "]
35041[label="fieldDeclaration\n int[][]output; "]
45042[label="unannArrayType\n int[][] "]
55043[label="integralType\n int "]
55044[label="dims\n [][] "]
45045[label="variableDeclaratorId\n output "]
35046[label="fieldDeclaration\n protectedV[]v; "]
45047[label="fieldModifier\n protected "]
45048[label="unannArrayType\n V[] "]
55049[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
55050[label="dims\n [] "]
45051[label="variableDeclaratorId\n v "]
35052[label="fieldDeclaration\n protectedint[]l; "]
45053[label="fieldModifier\n protected "]
45054[label="unannArrayType\n int[] "]
55055[label="integralType\n int "]
55056[label="dims\n [] "]
45057[label="variableDeclaratorId\n l "]
35058[label="fieldDeclaration\n protectedintsize; "]
45059[label="fieldModifier\n protected "]
45060[label="integralType\n int "]
45061[label="variableDeclaratorId\n size "]
35062[label="constructorDeclaration\n publicAhoCorasickDoubleArrayTrie(){} "]
45063[label="constructorModifier\n public "]
45064[label="constructorDeclarator\n AhoCorasickDoubleArrayTrie() "]
55065[label="simpleTypeName\n AhoCorasickDoubleArrayTrie "]
45066[label="constructorBody\n {} "]
35067[label="constructorDeclaration\n publicAhoCorasickDoubleArrayTrie(TreeMap<String,V>dictionary){build(dictionary);} "]
45068[label="constructorModifier\n public "]
45069[label="constructorDeclarator\n AhoCorasickDoubleArrayTrie(TreeMap<String,V>dictionary) "]
55070[label="simpleTypeName\n AhoCorasickDoubleArrayTrie "]
55071[label="formalParameter\n TreeMap<String,V>dictionary "]
65072[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,V> "]
75073[label="typeArguments\n <String,V> "]
85074[label="typeArgumentList\n String,V "]
95075[label="classType_lfno_classOrInterfaceType\n String "]
95076[label="classType_lfno_classOrInterfaceType\n V "]
65077[label="variableDeclaratorId\n dictionary "]
45078[label="constructorBody\n {build(dictionary);} "]
55079[label="expressionStatement\n build(dictionary); "]
65080[label="methodInvocation\n build(dictionary) "]
75081[label="methodName\n build "]
75082[label="expressionName\n dictionary "]
35083[label="methodDeclaration\n publicList<Hit<V>>parseText(Stringtext){intposition=1;intcurrentState=0;List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>();for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;}returncollectedEmits;} "]
45084[label="methodModifier\n public "]
45085[label="methodHeader\n List<Hit<V>>parseText(Stringtext) "]
55086[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Hit<V>> "]
65087[label="typeArguments\n <Hit<V>> "]
75088[label="classType_lfno_classOrInterfaceType\n Hit<V> "]
85089[label="typeArguments\n <V> "]
95090[label="classType_lfno_classOrInterfaceType\n V "]
55091[label="methodDeclarator\n parseText(Stringtext) "]
65092[label="formalParameter\n Stringtext "]
75093[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
75094[label="variableDeclaratorId\n text "]
45095[label="block\n {intposition=1;intcurrentState=0;List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>();for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;}returncollectedEmits;} "]
55096[label="blockStatements\n intposition=1;intcurrentState=0;List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>();for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;}returncollectedEmits; "]
65097[label="localVariableDeclarationStatement\n intposition=1; "]
75098[label="localVariableDeclaration\n intposition=1 "]
85099[label="integralType\n int "]
85100[label="variableDeclarator\n position=1 "]
95101[label="variableDeclaratorId\n position "]
95102[label="literal\n 1 "]
65103[label="localVariableDeclarationStatement\n intcurrentState=0; "]
75104[label="localVariableDeclaration\n intcurrentState=0 "]
85105[label="integralType\n int "]
85106[label="variableDeclarator\n currentState=0 "]
95107[label="variableDeclaratorId\n currentState "]
95108[label="literal\n 0 "]
65109[label="localVariableDeclarationStatement\n List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>(); "]
75110[label="localVariableDeclaration\n List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>() "]
85111[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Hit<V>> "]
95112[label="typeArguments\n <Hit<V>> "]
105113[label="classType_lfno_classOrInterfaceType\n Hit<V> "]
115114[label="typeArguments\n <V> "]
125115[label="classType_lfno_classOrInterfaceType\n V "]
85116[label="variableDeclarator\n collectedEmits=newLinkedList<Hit<V>>() "]
95117[label="variableDeclaratorId\n collectedEmits "]
95118[label="classInstanceCreationExpression_lfno_primary\n newLinkedList<Hit<V>>() "]
105119[label="typeArguments\n <Hit<V>> "]
115120[label="classType_lfno_classOrInterfaceType\n Hit<V> "]
125121[label="typeArguments\n <V> "]
135122[label="classType_lfno_classOrInterfaceType\n V "]
65123[label="basicForStatement\n for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;} "]
75124[label="localVariableDeclaration\n inti=0 "]
85125[label="integralType\n int "]
85126[label="variableDeclarator\n i=0 "]
95127[label="variableDeclaratorId\n i "]
95128[label="literal\n 0 "]
75129[label="relationalExpression\n i<text.length() "]
85130[label="expressionName\n i "]
85131[label="methodInvocation_lfno_primary\n text.length() "]
95132[label="typeName\n text "]
75133[label="preIncrementExpression\n ++i "]
85134[label="expressionName\n i "]
75135[label="block\n {currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;} "]
85136[label="blockStatements\n currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position; "]
95137[label="expressionStatement\n currentState=getState(currentState,text.charAt(i)); "]
105138[label="assignment\n currentState=getState(currentState,text.charAt(i)) "]
115139[label="expressionName\n currentState "]
115140[label="assignmentOperator\n = "]
115141[label="methodInvocation_lfno_primary\n getState(currentState,text.charAt(i)) "]
125142[label="methodName\n getState "]
125143[label="argumentList\n currentState,text.charAt(i) "]
135144[label="expressionName\n currentState "]
135145[label="methodInvocation_lfno_primary\n text.charAt(i) "]
145146[label="typeName\n text "]
145147[label="expressionName\n i "]
95148[label="expressionStatement\n storeEmits(position,currentState,collectedEmits); "]
105149[label="methodInvocation\n storeEmits(position,currentState,collectedEmits) "]
115150[label="methodName\n storeEmits "]
115151[label="argumentList\n position,currentState,collectedEmits "]
125152[label="expressionName\n position "]
125153[label="expressionName\n currentState "]
125154[label="expressionName\n collectedEmits "]
95155[label="expressionStatement\n ++position; "]
105156[label="preIncrementExpression\n ++position "]
115157[label="expressionName\n position "]
65158[label="returnStatement\n returncollectedEmits; "]
75159[label="expressionName\n collectedEmits "]
35160[label="methodDeclaration\n publicvoidparseText(Stringtext,IHit<V>processor){intposition=1;intcurrentState=0;for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}} "]
45161[label="methodModifier\n public "]
45162[label="methodHeader\n voidparseText(Stringtext,IHit<V>processor) "]
55163[label="result\n void "]
55164[label="methodDeclarator\n parseText(Stringtext,IHit<V>processor) "]
65165[label="formalParameterList\n Stringtext,IHit<V>processor "]
75166[label="formalParameter\n Stringtext "]
85167[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
85168[label="variableDeclaratorId\n text "]
75169[label="formalParameter\n IHit<V>processor "]
85170[label="unannClassType_lfno_unannClassOrInterfaceType\n IHit<V> "]
95171[label="typeArguments\n <V> "]
105172[label="classType_lfno_classOrInterfaceType\n V "]
85173[label="variableDeclaratorId\n processor "]
45174[label="block\n {intposition=1;intcurrentState=0;for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}} "]
55175[label="blockStatements\n intposition=1;intcurrentState=0;for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;} "]
65176[label="localVariableDeclarationStatement\n intposition=1; "]
75177[label="localVariableDeclaration\n intposition=1 "]
85178[label="integralType\n int "]
85179[label="variableDeclarator\n position=1 "]
95180[label="variableDeclaratorId\n position "]
95181[label="literal\n 1 "]
65182[label="localVariableDeclarationStatement\n intcurrentState=0; "]
75183[label="localVariableDeclaration\n intcurrentState=0 "]
85184[label="integralType\n int "]
85185[label="variableDeclarator\n currentState=0 "]
95186[label="variableDeclaratorId\n currentState "]
95187[label="literal\n 0 "]
65188[label="basicForStatement\n for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;} "]
75189[label="localVariableDeclaration\n inti=0 "]
85190[label="integralType\n int "]
85191[label="variableDeclarator\n i=0 "]
95192[label="variableDeclaratorId\n i "]
95193[label="literal\n 0 "]
75194[label="relationalExpression\n i<text.length() "]
85195[label="expressionName\n i "]
85196[label="methodInvocation_lfno_primary\n text.length() "]
95197[label="typeName\n text "]
75198[label="preIncrementExpression\n ++i "]
85199[label="expressionName\n i "]
75200[label="block\n {currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;} "]
85201[label="blockStatements\n currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position; "]
95202[label="expressionStatement\n currentState=getState(currentState,text.charAt(i)); "]
105203[label="assignment\n currentState=getState(currentState,text.charAt(i)) "]
115204[label="expressionName\n currentState "]
115205[label="assignmentOperator\n = "]
115206[label="methodInvocation_lfno_primary\n getState(currentState,text.charAt(i)) "]
125207[label="methodName\n getState "]
125208[label="argumentList\n currentState,text.charAt(i) "]
135209[label="expressionName\n currentState "]
135210[label="methodInvocation_lfno_primary\n text.charAt(i) "]
145211[label="typeName\n text "]
145212[label="expressionName\n i "]
95213[label="localVariableDeclarationStatement\n int[]hitArray=output[currentState]; "]
105214[label="localVariableDeclaration\n int[]hitArray=output[currentState] "]
115215[label="unannArrayType\n int[] "]
125216[label="integralType\n int "]
125217[label="dims\n [] "]
115218[label="variableDeclarator\n hitArray=output[currentState] "]
125219[label="variableDeclaratorId\n hitArray "]
125220[label="arrayAccess_lfno_primary\n output[currentState] "]
135221[label="expressionName\n output "]
135222[label="expressionName\n currentState "]
95223[label="ifThenStatement\n if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}} "]
105224[label="equalityExpression\n hitArray!=null "]
115225[label="expressionName\n hitArray "]
115226[label="literal\n null "]
105227[label="block\n {for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}} "]
115228[label="enhancedForStatement\n for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);} "]
125229[label="integralType\n int "]
125230[label="variableDeclaratorId\n hit "]
125231[label="expressionName\n hitArray "]
125232[label="block\n {processor.hit(position-l[hit],position,v[hit]);} "]
135233[label="expressionStatement\n processor.hit(position-l[hit],position,v[hit]); "]
145234[label="methodInvocation\n processor.hit(position-l[hit],position,v[hit]) "]
155235[label="typeName\n processor "]
155236[label="argumentList\n position-l[hit],position,v[hit] "]
165237[label="additiveExpression\n position-l[hit] "]
175238[label="expressionName\n position "]
175239[label="arrayAccess_lfno_primary\n l[hit] "]
185240[label="expressionName\n l "]
185241[label="expressionName\n hit "]
165242[label="expressionName\n position "]
165243[label="arrayAccess_lfno_primary\n v[hit] "]
175244[label="expressionName\n v "]
175245[label="expressionName\n hit "]
95246[label="expressionStatement\n ++position; "]
105247[label="preIncrementExpression\n ++position "]
115248[label="expressionName\n position "]
35249[label="methodDeclaration\n publicvoidparseText(char[]text,IHit<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}} "]
45250[label="methodModifier\n public "]
45251[label="methodHeader\n voidparseText(char[]text,IHit<V>processor) "]
55252[label="result\n void "]
55253[label="methodDeclarator\n parseText(char[]text,IHit<V>processor) "]
65254[label="formalParameterList\n char[]text,IHit<V>processor "]
75255[label="formalParameter\n char[]text "]
85256[label="unannArrayType\n char[] "]
95257[label="integralType\n char "]
95258[label="dims\n [] "]
85259[label="variableDeclaratorId\n text "]
75260[label="formalParameter\n IHit<V>processor "]
85261[label="unannClassType_lfno_unannClassOrInterfaceType\n IHit<V> "]
95262[label="typeArguments\n <V> "]
105263[label="classType_lfno_classOrInterfaceType\n V "]
85264[label="variableDeclaratorId\n processor "]
45265[label="block\n {intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}} "]
55266[label="blockStatements\n intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;} "]
65267[label="localVariableDeclarationStatement\n intposition=1; "]
75268[label="localVariableDeclaration\n intposition=1 "]
85269[label="integralType\n int "]
85270[label="variableDeclarator\n position=1 "]
95271[label="variableDeclaratorId\n position "]
95272[label="literal\n 1 "]
65273[label="localVariableDeclarationStatement\n intcurrentState=0; "]
75274[label="localVariableDeclaration\n intcurrentState=0 "]
85275[label="integralType\n int "]
85276[label="variableDeclarator\n currentState=0 "]
95277[label="variableDeclaratorId\n currentState "]
95278[label="literal\n 0 "]
65279[label="enhancedForStatement\n for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;} "]
75280[label="integralType\n char "]
75281[label="variableDeclaratorId\n c "]
75282[label="expressionName\n text "]
75283[label="block\n {currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;} "]
85284[label="blockStatements\n currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position; "]
95285[label="expressionStatement\n currentState=getState(currentState,c); "]
105286[label="assignment\n currentState=getState(currentState,c) "]
115287[label="expressionName\n currentState "]
115288[label="assignmentOperator\n = "]
115289[label="methodInvocation_lfno_primary\n getState(currentState,c) "]
125290[label="methodName\n getState "]
125291[label="argumentList\n currentState,c "]
135292[label="expressionName\n currentState "]
135293[label="expressionName\n c "]
95294[label="localVariableDeclarationStatement\n int[]hitArray=output[currentState]; "]
105295[label="localVariableDeclaration\n int[]hitArray=output[currentState] "]
115296[label="unannArrayType\n int[] "]
125297[label="integralType\n int "]
125298[label="dims\n [] "]
115299[label="variableDeclarator\n hitArray=output[currentState] "]
125300[label="variableDeclaratorId\n hitArray "]
125301[label="arrayAccess_lfno_primary\n output[currentState] "]
135302[label="expressionName\n output "]
135303[label="expressionName\n currentState "]
95304[label="ifThenStatement\n if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}} "]
105305[label="equalityExpression\n hitArray!=null "]
115306[label="expressionName\n hitArray "]
115307[label="literal\n null "]
105308[label="block\n {for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}} "]
115309[label="enhancedForStatement\n for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);} "]
125310[label="integralType\n int "]
125311[label="variableDeclaratorId\n hit "]
125312[label="expressionName\n hitArray "]
125313[label="block\n {processor.hit(position-l[hit],position,v[hit]);} "]
135314[label="expressionStatement\n processor.hit(position-l[hit],position,v[hit]); "]
145315[label="methodInvocation\n processor.hit(position-l[hit],position,v[hit]) "]
155316[label="typeName\n processor "]
155317[label="argumentList\n position-l[hit],position,v[hit] "]
165318[label="additiveExpression\n position-l[hit] "]
175319[label="expressionName\n position "]
175320[label="arrayAccess_lfno_primary\n l[hit] "]
185321[label="expressionName\n l "]
185322[label="expressionName\n hit "]
165323[label="expressionName\n position "]
165324[label="arrayAccess_lfno_primary\n v[hit] "]
175325[label="expressionName\n v "]
175326[label="expressionName\n hit "]
95327[label="expressionStatement\n ++position; "]
105328[label="preIncrementExpression\n ++position "]
115329[label="expressionName\n position "]
35330[label="methodDeclaration\n publicvoidparseText(char[]text,IHitFull<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;}} "]
45331[label="methodModifier\n public "]
45332[label="methodHeader\n voidparseText(char[]text,IHitFull<V>processor) "]
55333[label="result\n void "]
55334[label="methodDeclarator\n parseText(char[]text,IHitFull<V>processor) "]
65335[label="formalParameterList\n char[]text,IHitFull<V>processor "]
75336[label="formalParameter\n char[]text "]
85337[label="unannArrayType\n char[] "]
95338[label="integralType\n char "]
95339[label="dims\n [] "]
85340[label="variableDeclaratorId\n text "]
75341[label="formalParameter\n IHitFull<V>processor "]
85342[label="unannClassType_lfno_unannClassOrInterfaceType\n IHitFull<V> "]
95343[label="typeArguments\n <V> "]
105344[label="classType_lfno_classOrInterfaceType\n V "]
85345[label="variableDeclaratorId\n processor "]
45346[label="block\n {intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;}} "]
55347[label="blockStatements\n intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;} "]
65348[label="localVariableDeclarationStatement\n intposition=1; "]
75349[label="localVariableDeclaration\n intposition=1 "]
85350[label="integralType\n int "]
85351[label="variableDeclarator\n position=1 "]
95352[label="variableDeclaratorId\n position "]
95353[label="literal\n 1 "]
65354[label="localVariableDeclarationStatement\n intcurrentState=0; "]
75355[label="localVariableDeclaration\n intcurrentState=0 "]
85356[label="integralType\n int "]
85357[label="variableDeclarator\n currentState=0 "]
95358[label="variableDeclaratorId\n currentState "]
95359[label="literal\n 0 "]
65360[label="enhancedForStatement\n for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;} "]
75361[label="integralType\n char "]
75362[label="variableDeclaratorId\n c "]
75363[label="expressionName\n text "]
75364[label="block\n {currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;} "]
85365[label="blockStatements\n currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position; "]
95366[label="expressionStatement\n currentState=getState(currentState,c); "]
105367[label="assignment\n currentState=getState(currentState,c) "]
115368[label="expressionName\n currentState "]
115369[label="assignmentOperator\n = "]
115370[label="methodInvocation_lfno_primary\n getState(currentState,c) "]
125371[label="methodName\n getState "]
125372[label="argumentList\n currentState,c "]
135373[label="expressionName\n currentState "]
135374[label="expressionName\n c "]
95375[label="localVariableDeclarationStatement\n int[]hitArray=output[currentState]; "]
105376[label="localVariableDeclaration\n int[]hitArray=output[currentState] "]
115377[label="unannArrayType\n int[] "]
125378[label="integralType\n int "]
125379[label="dims\n [] "]
115380[label="variableDeclarator\n hitArray=output[currentState] "]
125381[label="variableDeclaratorId\n hitArray "]
125382[label="arrayAccess_lfno_primary\n output[currentState] "]
135383[label="expressionName\n output "]
135384[label="expressionName\n currentState "]
95385[label="ifThenStatement\n if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}} "]
105386[label="equalityExpression\n hitArray!=null "]
115387[label="expressionName\n hitArray "]
115388[label="literal\n null "]
105389[label="block\n {for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}} "]
115390[label="enhancedForStatement\n for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);} "]
125391[label="integralType\n int "]
125392[label="variableDeclaratorId\n hit "]
125393[label="expressionName\n hitArray "]
125394[label="block\n {processor.hit(position-l[hit],position,v[hit],hit);} "]
135395[label="expressionStatement\n processor.hit(position-l[hit],position,v[hit],hit); "]
145396[label="methodInvocation\n processor.hit(position-l[hit],position,v[hit],hit) "]
155397[label="typeName\n processor "]
155398[label="argumentList\n position-l[hit],position,v[hit],hit "]
165399[label="additiveExpression\n position-l[hit] "]
175400[label="expressionName\n position "]
175401[label="arrayAccess_lfno_primary\n l[hit] "]
185402[label="expressionName\n l "]
185403[label="expressionName\n hit "]
165404[label="expressionName\n position "]
165405[label="arrayAccess_lfno_primary\n v[hit] "]
175406[label="expressionName\n v "]
175407[label="expressionName\n hit "]
165408[label="expressionName\n hit "]
95409[label="expressionStatement\n ++position; "]
105410[label="preIncrementExpression\n ++position "]
115411[label="expressionName\n position "]
35412[label="methodDeclaration\n publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(size);for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}}out.writeInt(l.length);for(intlength:l){out.writeInt(length);}} "]
45413[label="methodModifier\n public "]
45414[label="methodHeader\n voidsave(DataOutputStreamout)throwsException "]
55415[label="result\n void "]
55416[label="methodDeclarator\n save(DataOutputStreamout) "]
65417[label="formalParameter\n DataOutputStreamout "]
75418[label="unannClassType_lfno_unannClassOrInterfaceType\n DataOutputStream "]
75419[label="variableDeclaratorId\n out "]
55420[label="throws_\n throwsException "]
65421[label="classType\n Exception "]
45422[label="block\n {out.writeInt(size);for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}}out.writeInt(l.length);for(intlength:l){out.writeInt(length);}} "]
55423[label="blockStatements\n out.writeInt(size);for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}}out.writeInt(l.length);for(intlength:l){out.writeInt(length);} "]
65424[label="expressionStatement\n out.writeInt(size); "]
75425[label="methodInvocation\n out.writeInt(size) "]
85426[label="typeName\n out "]
85427[label="expressionName\n size "]
65428[label="basicForStatement\n for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}} "]
75429[label="localVariableDeclaration\n inti=0 "]
85430[label="integralType\n int "]
85431[label="variableDeclarator\n i=0 "]
95432[label="variableDeclaratorId\n i "]
95433[label="literal\n 0 "]
75434[label="relationalExpression\n i<size "]
85435[label="expressionName\n i "]
85436[label="expressionName\n size "]
75437[label="postIncrementExpression\n i++ "]
85438[label="expressionName\n i "]
75439[label="block\n {out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}} "]
85440[label="blockStatements\n out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}} "]
95441[label="expressionStatement\n out.writeInt(base[i]); "]
105442[label="methodInvocation\n out.writeInt(base[i]) "]
115443[label="typeName\n out "]
115444[label="arrayAccess_lfno_primary\n base[i] "]
125445[label="expressionName\n base "]
125446[label="expressionName\n i "]
95447[label="expressionStatement\n out.writeInt(check[i]); "]
105448[label="methodInvocation\n out.writeInt(check[i]) "]
115449[label="typeName\n out "]
115450[label="arrayAccess_lfno_primary\n check[i] "]
125451[label="expressionName\n check "]
125452[label="expressionName\n i "]
95453[label="expressionStatement\n out.writeInt(fail[i]); "]
105454[label="methodInvocation\n out.writeInt(fail[i]) "]
115455[label="typeName\n out "]
115456[label="arrayAccess_lfno_primary\n fail[i] "]
125457[label="expressionName\n fail "]
125458[label="expressionName\n i "]
95459[label="localVariableDeclarationStatement\n intoutput[]=this.output[i]; "]
105460[label="localVariableDeclaration\n intoutput[]=this.output[i] "]
115461[label="integralType\n int "]
115462[label="variableDeclarator\n output[]=this.output[i] "]
125463[label="variableDeclaratorId\n output[] "]
135464[label="dims\n [] "]
125465[label="primary\n this.output[i] "]
135466[label="primaryNoNewArray_lfno_primary\n this "]
135467[label="arrayAccess_lf_primary\n .output[i] "]
145468[label="fieldAccess_lf_primary\n .output "]
145469[label="expressionName\n i "]
95470[label="ifThenElseStatement\n if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}} "]
105471[label="equalityExpression\n output==null "]
115472[label="expressionName\n output "]
115473[label="literal\n null "]
105474[label="block\n {out.writeInt(0);} "]
115475[label="expressionStatement\n out.writeInt(0); "]
125476[label="methodInvocation\n out.writeInt(0) "]
135477[label="typeName\n out "]
135478[label="literal\n 0 "]
105479[label="block\n {out.writeInt(output.length);for(into:output){out.writeInt(o);}} "]
115480[label="blockStatements\n out.writeInt(output.length);for(into:output){out.writeInt(o);} "]
125481[label="expressionStatement\n out.writeInt(output.length); "]
135482[label="methodInvocation\n out.writeInt(output.length) "]
145483[label="typeName\n out "]
145484[label="expressionName\n output.length "]
155485[label="ambiguousName\n output "]
125486[label="enhancedForStatement\n for(into:output){out.writeInt(o);} "]
135487[label="integralType\n int "]
135488[label="variableDeclaratorId\n o "]
135489[label="expressionName\n output "]
135490[label="block\n {out.writeInt(o);} "]
145491[label="expressionStatement\n out.writeInt(o); "]
155492[label="methodInvocation\n out.writeInt(o) "]
165493[label="typeName\n out "]
165494[label="expressionName\n o "]
65495[label="expressionStatement\n out.writeInt(l.length); "]
75496[label="methodInvocation\n out.writeInt(l.length) "]
85497[label="typeName\n out "]
85498[label="expressionName\n l.length "]
95499[label="ambiguousName\n l "]
65500[label="enhancedForStatement\n for(intlength:l){out.writeInt(length);} "]
75501[label="integralType\n int "]
75502[label="variableDeclaratorId\n length "]
75503[label="expressionName\n l "]
75504[label="block\n {out.writeInt(length);} "]
85505[label="expressionStatement\n out.writeInt(length); "]
95506[label="methodInvocation\n out.writeInt(length) "]
105507[label="typeName\n out "]
105508[label="expressionName\n length "]
35509[label="methodDeclaration\n publicvoidsave(ObjectOutputStreamout)throwsIOException{out.writeObject(base);out.writeObject(check);out.writeObject(fail);out.writeObject(output);out.writeObject(l);} "]
45510[label="methodModifier\n public "]
45511[label="methodHeader\n voidsave(ObjectOutputStreamout)throwsIOException "]
55512[label="result\n void "]
55513[label="methodDeclarator\n save(ObjectOutputStreamout) "]
65514[label="formalParameter\n ObjectOutputStreamout "]
75515[label="unannClassType_lfno_unannClassOrInterfaceType\n ObjectOutputStream "]
75516[label="variableDeclaratorId\n out "]
55517[label="throws_\n throwsIOException "]
65518[label="classType\n IOException "]
45519[label="block\n {out.writeObject(base);out.writeObject(check);out.writeObject(fail);out.writeObject(output);out.writeObject(l);} "]
55520[label="blockStatements\n out.writeObject(base);out.writeObject(check);out.writeObject(fail);out.writeObject(output);out.writeObject(l); "]
65521[label="expressionStatement\n out.writeObject(base); "]
75522[label="methodInvocation\n out.writeObject(base) "]
85523[label="typeName\n out "]
85524[label="expressionName\n base "]
65525[label="expressionStatement\n out.writeObject(check); "]
75526[label="methodInvocation\n out.writeObject(check) "]
85527[label="typeName\n out "]
85528[label="expressionName\n check "]
65529[label="expressionStatement\n out.writeObject(fail); "]
75530[label="methodInvocation\n out.writeObject(fail) "]
85531[label="typeName\n out "]
85532[label="expressionName\n fail "]
65533[label="expressionStatement\n out.writeObject(output); "]
75534[label="methodInvocation\n out.writeObject(output) "]
85535[label="typeName\n out "]
85536[label="expressionName\n output "]
65537[label="expressionStatement\n out.writeObject(l); "]
75538[label="methodInvocation\n out.writeObject(l) "]
85539[label="typeName\n out "]
85540[label="expressionName\n l "]
35541[label="methodDeclaration\n publicvoidload(ObjectInputStreamin,V[]value)throwsIOException,ClassNotFoundException{base=(int[])in.readObject();check=(int[])in.readObject();fail=(int[])in.readObject();output=(int[][])in.readObject();l=(int[])in.readObject();v=value;} "]
45542[label="methodModifier\n public "]
45543[label="methodHeader\n voidload(ObjectInputStreamin,V[]value)throwsIOException,ClassNotFoundException "]
55544[label="result\n void "]
55545[label="methodDeclarator\n load(ObjectInputStreamin,V[]value) "]
65546[label="formalParameterList\n ObjectInputStreamin,V[]value "]
75547[label="formalParameter\n ObjectInputStreamin "]
85548[label="unannClassType_lfno_unannClassOrInterfaceType\n ObjectInputStream "]
85549[label="variableDeclaratorId\n in "]
75550[label="formalParameter\n V[]value "]
85551[label="unannArrayType\n V[] "]
95552[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
95553[label="dims\n [] "]
85554[label="variableDeclaratorId\n value "]
55555[label="throws_\n throwsIOException,ClassNotFoundException "]
65556[label="exceptionTypeList\n IOException,ClassNotFoundException "]
75557[label="classType\n IOException "]
75558[label="classType\n ClassNotFoundException "]
45559[label="block\n {base=(int[])in.readObject();check=(int[])in.readObject();fail=(int[])in.readObject();output=(int[][])in.readObject();l=(int[])in.readObject();v=value;} "]
55560[label="blockStatements\n base=(int[])in.readObject();check=(int[])in.readObject();fail=(int[])in.readObject();output=(int[][])in.readObject();l=(int[])in.readObject();v=value; "]
65561[label="expressionStatement\n base=(int[])in.readObject(); "]
75562[label="assignment\n base=(int[])in.readObject() "]
85563[label="expressionName\n base "]
85564[label="assignmentOperator\n = "]
85565[label="castExpression\n (int[])in.readObject() "]
95566[label="arrayType\n int[] "]
105567[label="integralType\n int "]
105568[label="dims\n [] "]
95569[label="methodInvocation_lfno_primary\n in.readObject() "]
105570[label="typeName\n in "]
65571[label="expressionStatement\n check=(int[])in.readObject(); "]
75572[label="assignment\n check=(int[])in.readObject() "]
85573[label="expressionName\n check "]
85574[label="assignmentOperator\n = "]
85575[label="castExpression\n (int[])in.readObject() "]
95576[label="arrayType\n int[] "]
105577[label="integralType\n int "]
105578[label="dims\n [] "]
95579[label="methodInvocation_lfno_primary\n in.readObject() "]
105580[label="typeName\n in "]
65581[label="expressionStatement\n fail=(int[])in.readObject(); "]
75582[label="assignment\n fail=(int[])in.readObject() "]
85583[label="expressionName\n fail "]
85584[label="assignmentOperator\n = "]
85585[label="castExpression\n (int[])in.readObject() "]
95586[label="arrayType\n int[] "]
105587[label="integralType\n int "]
105588[label="dims\n [] "]
95589[label="methodInvocation_lfno_primary\n in.readObject() "]
105590[label="typeName\n in "]
65591[label="expressionStatement\n output=(int[][])in.readObject(); "]
75592[label="assignment\n output=(int[][])in.readObject() "]
85593[label="expressionName\n output "]
85594[label="assignmentOperator\n = "]
85595[label="castExpression\n (int[][])in.readObject() "]
95596[label="arrayType\n int[][] "]
105597[label="integralType\n int "]
105598[label="dims\n [][] "]
95599[label="methodInvocation_lfno_primary\n in.readObject() "]
105600[label="typeName\n in "]
65601[label="expressionStatement\n l=(int[])in.readObject(); "]
75602[label="assignment\n l=(int[])in.readObject() "]
85603[label="expressionName\n l "]
85604[label="assignmentOperator\n = "]
85605[label="castExpression\n (int[])in.readObject() "]
95606[label="arrayType\n int[] "]
105607[label="integralType\n int "]
105608[label="dims\n [] "]
95609[label="methodInvocation_lfno_primary\n in.readObject() "]
105610[label="typeName\n in "]
65611[label="expressionStatement\n v=value; "]
75612[label="assignment\n v=value "]
85613[label="expressionName\n v "]
85614[label="assignmentOperator\n = "]
85615[label="expressionName\n value "]
35616[label="methodDeclaration\n publicbooleanload(ByteArraybyteArray,V[]value){if(byteArray==null)returnfalse;size=byteArray.nextInt();base=newint[size+65535];check=newint[size+65535];fail=newint[size+65535];output=newint[size+65535][];intlength;for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}}length=byteArray.nextInt();l=newint[length];for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();}v=value;returntrue;} "]
45617[label="methodModifier\n public "]
45618[label="methodHeader\n booleanload(ByteArraybyteArray,V[]value) "]
55619[label="unannPrimitiveType\n boolean "]
55620[label="methodDeclarator\n load(ByteArraybyteArray,V[]value) "]
65621[label="formalParameterList\n ByteArraybyteArray,V[]value "]
75622[label="formalParameter\n ByteArraybyteArray "]
85623[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
85624[label="variableDeclaratorId\n byteArray "]
75625[label="formalParameter\n V[]value "]
85626[label="unannArrayType\n V[] "]
95627[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
95628[label="dims\n [] "]
85629[label="variableDeclaratorId\n value "]
45630[label="block\n {if(byteArray==null)returnfalse;size=byteArray.nextInt();base=newint[size+65535];check=newint[size+65535];fail=newint[size+65535];output=newint[size+65535][];intlength;for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}}length=byteArray.nextInt();l=newint[length];for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();}v=value;returntrue;} "]
55631[label="blockStatements\n if(byteArray==null)returnfalse;size=byteArray.nextInt();base=newint[size+65535];check=newint[size+65535];fail=newint[size+65535];output=newint[size+65535][];intlength;for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}}length=byteArray.nextInt();l=newint[length];for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();}v=value;returntrue; "]
65632[label="ifThenStatement\n if(byteArray==null)returnfalse; "]
75633[label="equalityExpression\n byteArray==null "]
85634[label="expressionName\n byteArray "]
85635[label="literal\n null "]
75636[label="returnStatement\n returnfalse; "]
85637[label="literal\n false "]
65638[label="expressionStatement\n size=byteArray.nextInt(); "]
75639[label="assignment\n size=byteArray.nextInt() "]
85640[label="expressionName\n size "]
85641[label="assignmentOperator\n = "]
85642[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
95643[label="typeName\n byteArray "]
65644[label="expressionStatement\n base=newint[size+65535]; "]
75645[label="assignment\n base=newint[size+65535] "]
85646[label="expressionName\n base "]
85647[label="assignmentOperator\n = "]
85648[label="arrayCreationExpression\n newint[size+65535] "]
95649[label="integralType\n int "]
95650[label="dimExpr\n [size+65535] "]
105651[label="additiveExpression\n size+65535 "]
115652[label="expressionName\n size "]
115653[label="literal\n 65535 "]
65654[label="expressionStatement\n check=newint[size+65535]; "]
75655[label="assignment\n check=newint[size+65535] "]
85656[label="expressionName\n check "]
85657[label="assignmentOperator\n = "]
85658[label="arrayCreationExpression\n newint[size+65535] "]
95659[label="integralType\n int "]
95660[label="dimExpr\n [size+65535] "]
105661[label="additiveExpression\n size+65535 "]
115662[label="expressionName\n size "]
115663[label="literal\n 65535 "]
65664[label="expressionStatement\n fail=newint[size+65535]; "]
75665[label="assignment\n fail=newint[size+65535] "]
85666[label="expressionName\n fail "]
85667[label="assignmentOperator\n = "]
85668[label="arrayCreationExpression\n newint[size+65535] "]
95669[label="integralType\n int "]
95670[label="dimExpr\n [size+65535] "]
105671[label="additiveExpression\n size+65535 "]
115672[label="expressionName\n size "]
115673[label="literal\n 65535 "]
65674[label="expressionStatement\n output=newint[size+65535][]; "]
75675[label="assignment\n output=newint[size+65535][] "]
85676[label="expressionName\n output "]
85677[label="assignmentOperator\n = "]
85678[label="arrayCreationExpression\n newint[size+65535][] "]
95679[label="integralType\n int "]
95680[label="dimExpr\n [size+65535] "]
105681[label="additiveExpression\n size+65535 "]
115682[label="expressionName\n size "]
115683[label="literal\n 65535 "]
95684[label="dims\n [] "]
65685[label="localVariableDeclarationStatement\n intlength; "]
75686[label="localVariableDeclaration\n intlength "]
85687[label="integralType\n int "]
85688[label="variableDeclaratorId\n length "]
65689[label="basicForStatement\n for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}} "]
75690[label="localVariableDeclaration\n inti=0 "]
85691[label="integralType\n int "]
85692[label="variableDeclarator\n i=0 "]
95693[label="variableDeclaratorId\n i "]
95694[label="literal\n 0 "]
75695[label="relationalExpression\n i<size "]
85696[label="expressionName\n i "]
85697[label="expressionName\n size "]
75698[label="preIncrementExpression\n ++i "]
85699[label="expressionName\n i "]
75700[label="block\n {base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}} "]
85701[label="blockStatements\n base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();} "]
95702[label="expressionStatement\n base[i]=byteArray.nextInt(); "]
105703[label="assignment\n base[i]=byteArray.nextInt() "]
115704[label="arrayAccess\n base[i] "]
125705[label="expressionName\n base "]
125706[label="expressionName\n i "]
115707[label="assignmentOperator\n = "]
115708[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
125709[label="typeName\n byteArray "]
95710[label="expressionStatement\n check[i]=byteArray.nextInt(); "]
105711[label="assignment\n check[i]=byteArray.nextInt() "]
115712[label="arrayAccess\n check[i] "]
125713[label="expressionName\n check "]
125714[label="expressionName\n i "]
115715[label="assignmentOperator\n = "]
115716[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
125717[label="typeName\n byteArray "]
95718[label="expressionStatement\n fail[i]=byteArray.nextInt(); "]
105719[label="assignment\n fail[i]=byteArray.nextInt() "]
115720[label="arrayAccess\n fail[i] "]
125721[label="expressionName\n fail "]
125722[label="expressionName\n i "]
115723[label="assignmentOperator\n = "]
115724[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
125725[label="typeName\n byteArray "]
95726[label="expressionStatement\n length=byteArray.nextInt(); "]
105727[label="assignment\n length=byteArray.nextInt() "]
115728[label="expressionName\n length "]
115729[label="assignmentOperator\n = "]
115730[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
125731[label="typeName\n byteArray "]
95732[label="ifThenStatement\n if(length==0)continue; "]
105733[label="equalityExpression\n length==0 "]
115734[label="expressionName\n length "]
115735[label="literal\n 0 "]
105736[label="continueStatement\n continue; "]
95737[label="expressionStatement\n output[i]=newint[length]; "]
105738[label="assignment\n output[i]=newint[length] "]
115739[label="arrayAccess\n output[i] "]
125740[label="expressionName\n output "]
125741[label="expressionName\n i "]
115742[label="assignmentOperator\n = "]
115743[label="arrayCreationExpression\n newint[length] "]
125744[label="integralType\n int "]
125745[label="dimExpr\n [length] "]
135746[label="expressionName\n length "]
95747[label="basicForStatement\n for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();} "]
105748[label="localVariableDeclaration\n intj=0 "]
115749[label="integralType\n int "]
115750[label="variableDeclarator\n j=0 "]
125751[label="variableDeclaratorId\n j "]
125752[label="literal\n 0 "]
105753[label="relationalExpression\n j<output[i].length "]
115754[label="expressionName\n j "]
115755[label="primary\n output[i].length "]
125756[label="arrayAccess_lfno_primary\n output[i] "]
135757[label="expressionName\n output "]
135758[label="expressionName\n i "]
125759[label="fieldAccess_lf_primary\n .length "]
105760[label="preIncrementExpression\n ++j "]
115761[label="expressionName\n j "]
105762[label="block\n {output[i][j]=byteArray.nextInt();} "]
115763[label="expressionStatement\n output[i][j]=byteArray.nextInt(); "]
125764[label="assignment\n output[i][j]=byteArray.nextInt() "]
135765[label="arrayAccess\n output[i][j] "]
145766[label="expressionName\n output "]
145767[label="expressionName\n i "]
145768[label="primaryNoNewArray_lf_arrayAccess\n  "]
145769[label="expressionName\n j "]
135770[label="assignmentOperator\n = "]
135771[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
145772[label="typeName\n byteArray "]
65773[label="expressionStatement\n length=byteArray.nextInt(); "]
75774[label="assignment\n length=byteArray.nextInt() "]
85775[label="expressionName\n length "]
85776[label="assignmentOperator\n = "]
85777[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
95778[label="typeName\n byteArray "]
65779[label="expressionStatement\n l=newint[length]; "]
75780[label="assignment\n l=newint[length] "]
85781[label="expressionName\n l "]
85782[label="assignmentOperator\n = "]
85783[label="arrayCreationExpression\n newint[length] "]
95784[label="integralType\n int "]
95785[label="dimExpr\n [length] "]
105786[label="expressionName\n length "]
65787[label="basicForStatement\n for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();} "]
75788[label="localVariableDeclaration\n inti=0 "]
85789[label="integralType\n int "]
85790[label="variableDeclarator\n i=0 "]
95791[label="variableDeclaratorId\n i "]
95792[label="literal\n 0 "]
75793[label="relationalExpression\n i<l.length "]
85794[label="expressionName\n i "]
85795[label="expressionName\n l.length "]
95796[label="ambiguousName\n l "]
75797[label="preIncrementExpression\n ++i "]
85798[label="expressionName\n i "]
75799[label="block\n {l[i]=byteArray.nextInt();} "]
85800[label="expressionStatement\n l[i]=byteArray.nextInt(); "]
95801[label="assignment\n l[i]=byteArray.nextInt() "]
105802[label="arrayAccess\n l[i] "]
115803[label="expressionName\n l "]
115804[label="expressionName\n i "]
105805[label="assignmentOperator\n = "]
105806[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
115807[label="typeName\n byteArray "]
65808[label="expressionStatement\n v=value; "]
75809[label="assignment\n v=value "]
85810[label="expressionName\n v "]
85811[label="assignmentOperator\n = "]
85812[label="expressionName\n value "]
65813[label="returnStatement\n returntrue; "]
75814[label="literal\n true "]
35815[label="methodDeclaration\n publicVget(Stringkey){intindex=exactMatchSearch(key);if(index>=0){returnv[index];}returnnull;} "]
45816[label="methodModifier\n public "]
45817[label="methodHeader\n Vget(Stringkey) "]
55818[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
55819[label="methodDeclarator\n get(Stringkey) "]
65820[label="formalParameter\n Stringkey "]
75821[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
75822[label="variableDeclaratorId\n key "]
45823[label="block\n {intindex=exactMatchSearch(key);if(index>=0){returnv[index];}returnnull;} "]
55824[label="blockStatements\n intindex=exactMatchSearch(key);if(index>=0){returnv[index];}returnnull; "]
65825[label="localVariableDeclarationStatement\n intindex=exactMatchSearch(key); "]
75826[label="localVariableDeclaration\n intindex=exactMatchSearch(key) "]
85827[label="integralType\n int "]
85828[label="variableDeclarator\n index=exactMatchSearch(key) "]
95829[label="variableDeclaratorId\n index "]
95830[label="methodInvocation_lfno_primary\n exactMatchSearch(key) "]
105831[label="methodName\n exactMatchSearch "]
105832[label="expressionName\n key "]
65833[label="ifThenStatement\n if(index>=0){returnv[index];} "]
75834[label="relationalExpression\n index>=0 "]
85835[label="expressionName\n index "]
85836[label="literal\n 0 "]
75837[label="block\n {returnv[index];} "]
85838[label="returnStatement\n returnv[index]; "]
95839[label="arrayAccess_lfno_primary\n v[index] "]
105840[label="expressionName\n v "]
105841[label="expressionName\n index "]
65842[label="returnStatement\n returnnull; "]
75843[label="literal\n null "]
35844[label="methodDeclaration\n publicbooleanset(Stringkey,Vvalue){intindex=exactMatchSearch(key);if(index>=0){v[index]=value;returntrue;}returnfalse;} "]
45845[label="methodModifier\n public "]
45846[label="methodHeader\n booleanset(Stringkey,Vvalue) "]
55847[label="unannPrimitiveType\n boolean "]
55848[label="methodDeclarator\n set(Stringkey,Vvalue) "]
65849[label="formalParameterList\n Stringkey,Vvalue "]
75850[label="formalParameter\n Stringkey "]
85851[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
85852[label="variableDeclaratorId\n key "]
75853[label="formalParameter\n Vvalue "]
85854[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
85855[label="variableDeclaratorId\n value "]
45856[label="block\n {intindex=exactMatchSearch(key);if(index>=0){v[index]=value;returntrue;}returnfalse;} "]
55857[label="blockStatements\n intindex=exactMatchSearch(key);if(index>=0){v[index]=value;returntrue;}returnfalse; "]
65858[label="localVariableDeclarationStatement\n intindex=exactMatchSearch(key); "]
75859[label="localVariableDeclaration\n intindex=exactMatchSearch(key) "]
85860[label="integralType\n int "]
85861[label="variableDeclarator\n index=exactMatchSearch(key) "]
95862[label="variableDeclaratorId\n index "]
95863[label="methodInvocation_lfno_primary\n exactMatchSearch(key) "]
105864[label="methodName\n exactMatchSearch "]
105865[label="expressionName\n key "]
65866[label="ifThenStatement\n if(index>=0){v[index]=value;returntrue;} "]
75867[label="relationalExpression\n index>=0 "]
85868[label="expressionName\n index "]
85869[label="literal\n 0 "]
75870[label="block\n {v[index]=value;returntrue;} "]
85871[label="blockStatements\n v[index]=value;returntrue; "]
95872[label="expressionStatement\n v[index]=value; "]
105873[label="assignment\n v[index]=value "]
115874[label="arrayAccess\n v[index] "]
125875[label="expressionName\n v "]
125876[label="expressionName\n index "]
115877[label="assignmentOperator\n = "]
115878[label="expressionName\n value "]
95879[label="returnStatement\n returntrue; "]
105880[label="literal\n true "]
65881[label="returnStatement\n returnfalse; "]
75882[label="literal\n false "]
35883[label="methodDeclaration\n publicVget(intindex){returnv[index];} "]
45884[label="methodModifier\n public "]
45885[label="methodHeader\n Vget(intindex) "]
55886[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
55887[label="methodDeclarator\n get(intindex) "]
65888[label="formalParameter\n intindex "]
75889[label="integralType\n int "]
75890[label="variableDeclaratorId\n index "]
45891[label="block\n {returnv[index];} "]
55892[label="returnStatement\n returnv[index]; "]
65893[label="arrayAccess_lfno_primary\n v[index] "]
75894[label="expressionName\n v "]
75895[label="expressionName\n index "]
35896[label="normalInterfaceDeclaration\n publicinterfaceIHit<V>{voidhit(intbegin,intend,Vvalue);} "]
45897[label="interfaceModifier\n public "]
45898[label="typeParameters\n <V> "]
55899[label="typeParameter\n V "]
45900[label="interfaceBody\n {voidhit(intbegin,intend,Vvalue);} "]
55901[label="interfaceMethodDeclaration\n voidhit(intbegin,intend,Vvalue); "]
65902[label="methodHeader\n voidhit(intbegin,intend,Vvalue) "]
75903[label="result\n void "]
75904[label="methodDeclarator\n hit(intbegin,intend,Vvalue) "]
85905[label="formalParameterList\n intbegin,intend,Vvalue "]
95906[label="formalParameters\n intbegin,intend "]
105907[label="formalParameter\n intbegin "]
115908[label="integralType\n int "]
115909[label="variableDeclaratorId\n begin "]
105910[label="formalParameter\n intend "]
115911[label="integralType\n int "]
115912[label="variableDeclaratorId\n end "]
95913[label="formalParameter\n Vvalue "]
105914[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
105915[label="variableDeclaratorId\n value "]
65916[label="methodBody\n ; "]
35917[label="normalInterfaceDeclaration\n publicinterfaceIHitFull<V>{voidhit(intbegin,intend,Vvalue,intindex);} "]
45918[label="interfaceModifier\n public "]
45919[label="typeParameters\n <V> "]
55920[label="typeParameter\n V "]
45921[label="interfaceBody\n {voidhit(intbegin,intend,Vvalue,intindex);} "]
55922[label="interfaceMethodDeclaration\n voidhit(intbegin,intend,Vvalue,intindex); "]
65923[label="methodHeader\n voidhit(intbegin,intend,Vvalue,intindex) "]
75924[label="result\n void "]
75925[label="methodDeclarator\n hit(intbegin,intend,Vvalue,intindex) "]
85926[label="formalParameterList\n intbegin,intend,Vvalue,intindex "]
95927[label="formalParameters\n intbegin,intend,Vvalue "]
105928[label="formalParameter\n intbegin "]
115929[label="integralType\n int "]
115930[label="variableDeclaratorId\n begin "]
105931[label="formalParameter\n intend "]
115932[label="integralType\n int "]
115933[label="variableDeclaratorId\n end "]
105934[label="formalParameter\n Vvalue "]
115935[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
115936[label="variableDeclaratorId\n value "]
95937[label="formalParameter\n intindex "]
105938[label="integralType\n int "]
105939[label="variableDeclaratorId\n index "]
65940[label="methodBody\n ; "]
35941[label="normalClassDeclaration\n publicclassHit<V>{publicfinalintbegin;publicfinalintend;publicfinalVvalue;publicHit(intbegin,intend,Vvalue){this.begin=begin;this.end=end;this.value=value;}@OverridepublicStringtoString(){returnString.format(\"[%d:%d]=%s\",begin,end,value);}} "]
45942[label="classModifier\n public "]
45943[label="typeParameters\n <V> "]
55944[label="typeParameter\n V "]
45945[label="classBody\n {publicfinalintbegin;publicfinalintend;publicfinalVvalue;publicHit(intbegin,intend,Vvalue){this.begin=begin;this.end=end;this.value=value;}@OverridepublicStringtoString(){returnString.format(\"[%d:%d]=%s\",begin,end,value);}} "]
55946[label="fieldDeclaration\n publicfinalintbegin; "]
65947[label="fieldModifier\n public "]
65948[label="fieldModifier\n final "]
65949[label="integralType\n int "]
65950[label="variableDeclaratorId\n begin "]
55951[label="fieldDeclaration\n publicfinalintend; "]
65952[label="fieldModifier\n public "]
65953[label="fieldModifier\n final "]
65954[label="integralType\n int "]
65955[label="variableDeclaratorId\n end "]
55956[label="fieldDeclaration\n publicfinalVvalue; "]
65957[label="fieldModifier\n public "]
65958[label="fieldModifier\n final "]
65959[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
65960[label="variableDeclaratorId\n value "]
55961[label="constructorDeclaration\n publicHit(intbegin,intend,Vvalue){this.begin=begin;this.end=end;this.value=value;} "]
65962[label="constructorModifier\n public "]
65963[label="constructorDeclarator\n Hit(intbegin,intend,Vvalue) "]
75964[label="simpleTypeName\n Hit "]
75965[label="formalParameterList\n intbegin,intend,Vvalue "]
85966[label="formalParameters\n intbegin,intend "]
95967[label="formalParameter\n intbegin "]
105968[label="integralType\n int "]
105969[label="variableDeclaratorId\n begin "]
95970[label="formalParameter\n intend "]
105971[label="integralType\n int "]
105972[label="variableDeclaratorId\n end "]
85973[label="formalParameter\n Vvalue "]
95974[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
95975[label="variableDeclaratorId\n value "]
65976[label="constructorBody\n {this.begin=begin;this.end=end;this.value=value;} "]
75977[label="blockStatements\n this.begin=begin;this.end=end;this.value=value; "]
85978[label="expressionStatement\n this.begin=begin; "]
95979[label="assignment\n this.begin=begin "]
105980[label="fieldAccess\n this.begin "]
115981[label="primaryNoNewArray_lfno_primary\n this "]
105982[label="assignmentOperator\n = "]
105983[label="expressionName\n begin "]
85984[label="expressionStatement\n this.end=end; "]
95985[label="assignment\n this.end=end "]
105986[label="fieldAccess\n this.end "]
115987[label="primaryNoNewArray_lfno_primary\n this "]
105988[label="assignmentOperator\n = "]
105989[label="expressionName\n end "]
85990[label="expressionStatement\n this.value=value; "]
95991[label="assignment\n this.value=value "]
105992[label="fieldAccess\n this.value "]
115993[label="primaryNoNewArray_lfno_primary\n this "]
105994[label="assignmentOperator\n = "]
105995[label="expressionName\n value "]
55996[label="methodDeclaration\n @OverridepublicStringtoString(){returnString.format(\"[%d:%d]=%s\",begin,end,value);} "]
65997[label="markerAnnotation\n @Override "]
75998[label="typeName\n Override "]
65999[label="methodModifier\n public "]
66000[label="methodHeader\n StringtoString() "]
76001[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
76002[label="methodDeclarator\n toString() "]
66003[label="block\n {returnString.format(\"[%d:%d]=%s\",begin,end,value);} "]
76004[label="returnStatement\n returnString.format(\"[%d:%d]=%s\",begin,end,value); "]
86005[label="methodInvocation_lfno_primary\n String.format(\"[%d:%d]=%s\",begin,end,value) "]
96006[label="typeName\n String "]
96007[label="argumentList\n \"[%d:%d]=%s\",begin,end,value "]
106008[label="literal\n \"[%d:%d]=%s\" "]
106009[label="expressionName\n begin "]
106010[label="expressionName\n end "]
106011[label="expressionName\n value "]
36012[label="methodDeclaration\n privateintgetState(intcurrentState,charcharacter){intnewCurrentState=transitionWithRoot(currentState,character);while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);}returnnewCurrentState;} "]
46013[label="methodModifier\n private "]
46014[label="methodHeader\n intgetState(intcurrentState,charcharacter) "]
56015[label="integralType\n int "]
56016[label="methodDeclarator\n getState(intcurrentState,charcharacter) "]
66017[label="formalParameterList\n intcurrentState,charcharacter "]
76018[label="formalParameter\n intcurrentState "]
86019[label="integralType\n int "]
86020[label="variableDeclaratorId\n currentState "]
76021[label="formalParameter\n charcharacter "]
86022[label="integralType\n char "]
86023[label="variableDeclaratorId\n character "]
46024[label="block\n {intnewCurrentState=transitionWithRoot(currentState,character);while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);}returnnewCurrentState;} "]
56025[label="blockStatements\n intnewCurrentState=transitionWithRoot(currentState,character);while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);}returnnewCurrentState; "]
66026[label="localVariableDeclarationStatement\n intnewCurrentState=transitionWithRoot(currentState,character); "]
76027[label="localVariableDeclaration\n intnewCurrentState=transitionWithRoot(currentState,character) "]
86028[label="integralType\n int "]
86029[label="variableDeclarator\n newCurrentState=transitionWithRoot(currentState,character) "]
96030[label="variableDeclaratorId\n newCurrentState "]
96031[label="methodInvocation_lfno_primary\n transitionWithRoot(currentState,character) "]
106032[label="methodName\n transitionWithRoot "]
106033[label="argumentList\n currentState,character "]
116034[label="expressionName\n currentState "]
116035[label="expressionName\n character "]
66036[label="whileStatement\n while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);} "]
76037[label="equalityExpression\n newCurrentState==-1 "]
86038[label="expressionName\n newCurrentState "]
86039[label="unaryExpression\n -1 "]
96040[label="literal\n 1 "]
76041[label="block\n {currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);} "]
86042[label="blockStatements\n currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character); "]
96043[label="expressionStatement\n currentState=fail[currentState]; "]
106044[label="assignment\n currentState=fail[currentState] "]
116045[label="expressionName\n currentState "]
116046[label="assignmentOperator\n = "]
116047[label="arrayAccess_lfno_primary\n fail[currentState] "]
126048[label="expressionName\n fail "]
126049[label="expressionName\n currentState "]
96050[label="expressionStatement\n newCurrentState=transitionWithRoot(currentState,character); "]
106051[label="assignment\n newCurrentState=transitionWithRoot(currentState,character) "]
116052[label="expressionName\n newCurrentState "]
116053[label="assignmentOperator\n = "]
116054[label="methodInvocation_lfno_primary\n transitionWithRoot(currentState,character) "]
126055[label="methodName\n transitionWithRoot "]
126056[label="argumentList\n currentState,character "]
136057[label="expressionName\n currentState "]
136058[label="expressionName\n character "]
66059[label="returnStatement\n returnnewCurrentState; "]
76060[label="expressionName\n newCurrentState "]
36061[label="methodDeclaration\n privatevoidstoreEmits(intposition,intcurrentState,List<Hit<V>>collectedEmits){int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}}} "]
46062[label="methodModifier\n private "]
46063[label="methodHeader\n voidstoreEmits(intposition,intcurrentState,List<Hit<V>>collectedEmits) "]
56064[label="result\n void "]
56065[label="methodDeclarator\n storeEmits(intposition,intcurrentState,List<Hit<V>>collectedEmits) "]
66066[label="formalParameterList\n intposition,intcurrentState,List<Hit<V>>collectedEmits "]
76067[label="formalParameters\n intposition,intcurrentState "]
86068[label="formalParameter\n intposition "]
96069[label="integralType\n int "]
96070[label="variableDeclaratorId\n position "]
86071[label="formalParameter\n intcurrentState "]
96072[label="integralType\n int "]
96073[label="variableDeclaratorId\n currentState "]
76074[label="formalParameter\n List<Hit<V>>collectedEmits "]
86075[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Hit<V>> "]
96076[label="typeArguments\n <Hit<V>> "]
106077[label="classType_lfno_classOrInterfaceType\n Hit<V> "]
116078[label="typeArguments\n <V> "]
126079[label="classType_lfno_classOrInterfaceType\n V "]
86080[label="variableDeclaratorId\n collectedEmits "]
46081[label="block\n {int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}}} "]
56082[label="blockStatements\n int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}} "]
66083[label="localVariableDeclarationStatement\n int[]hitArray=output[currentState]; "]
76084[label="localVariableDeclaration\n int[]hitArray=output[currentState] "]
86085[label="unannArrayType\n int[] "]
96086[label="integralType\n int "]
96087[label="dims\n [] "]
86088[label="variableDeclarator\n hitArray=output[currentState] "]
96089[label="variableDeclaratorId\n hitArray "]
96090[label="arrayAccess_lfno_primary\n output[currentState] "]
106091[label="expressionName\n output "]
106092[label="expressionName\n currentState "]
66093[label="ifThenStatement\n if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}} "]
76094[label="equalityExpression\n hitArray!=null "]
86095[label="expressionName\n hitArray "]
86096[label="literal\n null "]
76097[label="block\n {for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}} "]
86098[label="enhancedForStatement\n for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));} "]
96099[label="integralType\n int "]
96100[label="variableDeclaratorId\n hit "]
96101[label="expressionName\n hitArray "]
96102[label="block\n {collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));} "]
106103[label="expressionStatement\n collectedEmits.add(newHit<V>(position-l[hit],position,v[hit])); "]
116104[label="methodInvocation\n collectedEmits.add(newHit<V>(position-l[hit],position,v[hit])) "]
126105[label="typeName\n collectedEmits "]
126106[label="classInstanceCreationExpression_lfno_primary\n newHit<V>(position-l[hit],position,v[hit]) "]
136107[label="typeArguments\n <V> "]
146108[label="classType_lfno_classOrInterfaceType\n V "]
136109[label="argumentList\n position-l[hit],position,v[hit] "]
146110[label="additiveExpression\n position-l[hit] "]
156111[label="expressionName\n position "]
156112[label="arrayAccess_lfno_primary\n l[hit] "]
166113[label="expressionName\n l "]
166114[label="expressionName\n hit "]
146115[label="expressionName\n position "]
146116[label="arrayAccess_lfno_primary\n v[hit] "]
156117[label="expressionName\n v "]
156118[label="expressionName\n hit "]
36119[label="methodDeclaration\n protectedinttransition(intcurrent,charc){intb=current;intp;p=b+c+1;if(b==check[p])b=base[p];elsereturn-1;p=b;returnp;} "]
46120[label="methodModifier\n protected "]
46121[label="methodHeader\n inttransition(intcurrent,charc) "]
56122[label="integralType\n int "]
56123[label="methodDeclarator\n transition(intcurrent,charc) "]
66124[label="formalParameterList\n intcurrent,charc "]
76125[label="formalParameter\n intcurrent "]
86126[label="integralType\n int "]
86127[label="variableDeclaratorId\n current "]
76128[label="formalParameter\n charc "]
86129[label="integralType\n char "]
86130[label="variableDeclaratorId\n c "]
46131[label="block\n {intb=current;intp;p=b+c+1;if(b==check[p])b=base[p];elsereturn-1;p=b;returnp;} "]
56132[label="blockStatements\n intb=current;intp;p=b+c+1;if(b==check[p])b=base[p];elsereturn-1;p=b;returnp; "]
66133[label="localVariableDeclarationStatement\n intb=current; "]
76134[label="localVariableDeclaration\n intb=current "]
86135[label="integralType\n int "]
86136[label="variableDeclarator\n b=current "]
96137[label="variableDeclaratorId\n b "]
96138[label="expressionName\n current "]
66139[label="localVariableDeclarationStatement\n intp; "]
76140[label="localVariableDeclaration\n intp "]
86141[label="integralType\n int "]
86142[label="variableDeclaratorId\n p "]
66143[label="expressionStatement\n p=b+c+1; "]
76144[label="assignment\n p=b+c+1 "]
86145[label="expressionName\n p "]
86146[label="assignmentOperator\n = "]
86147[label="additiveExpression\n b+c+1 "]
96148[label="additiveExpression\n b+c "]
106149[label="expressionName\n b "]
106150[label="expressionName\n c "]
96151[label="literal\n 1 "]
66152[label="ifThenElseStatement\n if(b==check[p])b=base[p];elsereturn-1; "]
76153[label="equalityExpression\n b==check[p] "]
86154[label="expressionName\n b "]
86155[label="arrayAccess_lfno_primary\n check[p] "]
96156[label="expressionName\n check "]
96157[label="expressionName\n p "]
76158[label="expressionStatement\n b=base[p]; "]
86159[label="assignment\n b=base[p] "]
96160[label="expressionName\n b "]
96161[label="assignmentOperator\n = "]
96162[label="arrayAccess_lfno_primary\n base[p] "]
106163[label="expressionName\n base "]
106164[label="expressionName\n p "]
76165[label="returnStatement\n return-1; "]
86166[label="unaryExpression\n -1 "]
96167[label="literal\n 1 "]
66168[label="expressionStatement\n p=b; "]
76169[label="assignment\n p=b "]
86170[label="expressionName\n p "]
86171[label="assignmentOperator\n = "]
86172[label="expressionName\n b "]
66173[label="returnStatement\n returnp; "]
76174[label="expressionName\n p "]
36175[label="methodDeclaration\n protectedinttransitionWithRoot(intnodePos,charc){intb=base[nodePos];intp;p=b+c+1;if(b!=check[p]){if(nodePos==0)return0;return-1;}returnp;} "]
46176[label="methodModifier\n protected "]
46177[label="methodHeader\n inttransitionWithRoot(intnodePos,charc) "]
56178[label="integralType\n int "]
56179[label="methodDeclarator\n transitionWithRoot(intnodePos,charc) "]
66180[label="formalParameterList\n intnodePos,charc "]
76181[label="formalParameter\n intnodePos "]
86182[label="integralType\n int "]
86183[label="variableDeclaratorId\n nodePos "]
76184[label="formalParameter\n charc "]
86185[label="integralType\n char "]
86186[label="variableDeclaratorId\n c "]
46187[label="block\n {intb=base[nodePos];intp;p=b+c+1;if(b!=check[p]){if(nodePos==0)return0;return-1;}returnp;} "]
56188[label="blockStatements\n intb=base[nodePos];intp;p=b+c+1;if(b!=check[p]){if(nodePos==0)return0;return-1;}returnp; "]
66189[label="localVariableDeclarationStatement\n intb=base[nodePos]; "]
76190[label="localVariableDeclaration\n intb=base[nodePos] "]
86191[label="integralType\n int "]
86192[label="variableDeclarator\n b=base[nodePos] "]
96193[label="variableDeclaratorId\n b "]
96194[label="arrayAccess_lfno_primary\n base[nodePos] "]
106195[label="expressionName\n base "]
106196[label="expressionName\n nodePos "]
66197[label="localVariableDeclarationStatement\n intp; "]
76198[label="localVariableDeclaration\n intp "]
86199[label="integralType\n int "]
86200[label="variableDeclaratorId\n p "]
66201[label="expressionStatement\n p=b+c+1; "]
76202[label="assignment\n p=b+c+1 "]
86203[label="expressionName\n p "]
86204[label="assignmentOperator\n = "]
86205[label="additiveExpression\n b+c+1 "]
96206[label="additiveExpression\n b+c "]
106207[label="expressionName\n b "]
106208[label="expressionName\n c "]
96209[label="literal\n 1 "]
66210[label="ifThenStatement\n if(b!=check[p]){if(nodePos==0)return0;return-1;} "]
76211[label="equalityExpression\n b!=check[p] "]
86212[label="expressionName\n b "]
86213[label="arrayAccess_lfno_primary\n check[p] "]
96214[label="expressionName\n check "]
96215[label="expressionName\n p "]
76216[label="block\n {if(nodePos==0)return0;return-1;} "]
86217[label="blockStatements\n if(nodePos==0)return0;return-1; "]
96218[label="ifThenStatement\n if(nodePos==0)return0; "]
106219[label="equalityExpression\n nodePos==0 "]
116220[label="expressionName\n nodePos "]
116221[label="literal\n 0 "]
106222[label="returnStatement\n return0; "]
116223[label="literal\n 0 "]
96224[label="returnStatement\n return-1; "]
106225[label="unaryExpression\n -1 "]
116226[label="literal\n 1 "]
66227[label="returnStatement\n returnp; "]
76228[label="expressionName\n p "]
36229[label="methodDeclaration\n publicvoidbuild(TreeMap<String,V>map){newBuilder().build(map);} "]
46230[label="methodModifier\n public "]
46231[label="methodHeader\n voidbuild(TreeMap<String,V>map) "]
56232[label="result\n void "]
56233[label="methodDeclarator\n build(TreeMap<String,V>map) "]
66234[label="formalParameter\n TreeMap<String,V>map "]
76235[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,V> "]
86236[label="typeArguments\n <String,V> "]
96237[label="typeArgumentList\n String,V "]
106238[label="classType_lfno_classOrInterfaceType\n String "]
106239[label="classType_lfno_classOrInterfaceType\n V "]
76240[label="variableDeclaratorId\n map "]
46241[label="block\n {newBuilder().build(map);} "]
56242[label="expressionStatement\n newBuilder().build(map); "]
66243[label="methodInvocation\n newBuilder().build(map) "]
76244[label="classInstanceCreationExpression_lfno_primary\n newBuilder() "]
76245[label="expressionName\n map "]
36246[label="methodDeclaration\n privateintfetch(Stateparent,List<Map.Entry<Integer,State>>siblings){if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));}for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));}returnsiblings.size();} "]
46247[label="methodModifier\n private "]
46248[label="methodHeader\n intfetch(Stateparent,List<Map.Entry<Integer,State>>siblings) "]
56249[label="integralType\n int "]
56250[label="methodDeclarator\n fetch(Stateparent,List<Map.Entry<Integer,State>>siblings) "]
66251[label="formalParameterList\n Stateparent,List<Map.Entry<Integer,State>>siblings "]
76252[label="formalParameter\n Stateparent "]
86253[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
86254[label="variableDeclaratorId\n parent "]
76255[label="formalParameter\n List<Map.Entry<Integer,State>>siblings "]
86256[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<Integer,State>> "]
96257[label="typeArguments\n <Map.Entry<Integer,State>> "]
106258[label="classOrInterfaceType\n Map.Entry<Integer,State> "]
116259[label="classType_lfno_classOrInterfaceType\n Map "]
116260[label="classType_lf_classOrInterfaceType\n .Entry<Integer,State> "]
126261[label="typeArguments\n <Integer,State> "]
136262[label="typeArgumentList\n Integer,State "]
146263[label="classType_lfno_classOrInterfaceType\n Integer "]
146264[label="classType_lfno_classOrInterfaceType\n State "]
86265[label="variableDeclaratorId\n siblings "]
46266[label="block\n {if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));}for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));}returnsiblings.size();} "]
56267[label="blockStatements\n if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));}for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));}returnsiblings.size(); "]
66268[label="ifThenStatement\n if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));} "]
76269[label="methodInvocation_lfno_primary\n parent.isAcceptable() "]
86270[label="typeName\n parent "]
76271[label="block\n {StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));} "]
86272[label="blockStatements\n StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode)); "]
96273[label="localVariableDeclarationStatement\n StatefakeNode=newState(-(parent.getDepth()+1)); "]
106274[label="localVariableDeclaration\n StatefakeNode=newState(-(parent.getDepth()+1)) "]
116275[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
116276[label="variableDeclarator\n fakeNode=newState(-(parent.getDepth()+1)) "]
126277[label="variableDeclaratorId\n fakeNode "]
126278[label="classInstanceCreationExpression_lfno_primary\n newState(-(parent.getDepth()+1)) "]
136279[label="unaryExpression\n -(parent.getDepth()+1) "]
146280[label="primaryNoNewArray_lfno_primary\n (parent.getDepth()+1) "]
156281[label="additiveExpression\n parent.getDepth()+1 "]
166282[label="methodInvocation_lfno_primary\n parent.getDepth() "]
176283[label="typeName\n parent "]
166284[label="literal\n 1 "]
96285[label="expressionStatement\n fakeNode.addEmit(parent.getLargestValueId()); "]
106286[label="methodInvocation\n fakeNode.addEmit(parent.getLargestValueId()) "]
116287[label="typeName\n fakeNode "]
116288[label="methodInvocation_lfno_primary\n parent.getLargestValueId() "]
126289[label="typeName\n parent "]
96290[label="expressionStatement\n siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode)); "]
106291[label="methodInvocation\n siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode)) "]
116292[label="typeName\n siblings "]
116293[label="classInstanceCreationExpression_lfno_primary\n newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode) "]
126294[label="typeArguments\n <Integer,State> "]
136295[label="typeArgumentList\n Integer,State "]
146296[label="classType_lfno_classOrInterfaceType\n Integer "]
146297[label="classType_lfno_classOrInterfaceType\n State "]
126298[label="argumentList\n 0,fakeNode "]
136299[label="literal\n 0 "]
136300[label="expressionName\n fakeNode "]
66301[label="enhancedForStatement\n for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));} "]
76302[label="unannClassOrInterfaceType\n Map.Entry<Character,State> "]
86303[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
86304[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<Character,State> "]
96305[label="typeArguments\n <Character,State> "]
106306[label="typeArgumentList\n Character,State "]
116307[label="classType_lfno_classOrInterfaceType\n Character "]
116308[label="classType_lfno_classOrInterfaceType\n State "]
76309[label="variableDeclaratorId\n entry "]
76310[label="primary\n parent.getSuccess().entrySet() "]
86311[label="methodInvocation_lfno_primary\n parent.getSuccess() "]
96312[label="typeName\n parent "]
86313[label="methodInvocation_lf_primary\n .entrySet() "]
76314[label="block\n {siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));} "]
86315[label="expressionStatement\n siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue())); "]
96316[label="methodInvocation\n siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue())) "]
106317[label="typeName\n siblings "]
106318[label="classInstanceCreationExpression_lfno_primary\n newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()) "]
116319[label="typeArguments\n <Integer,State> "]
126320[label="typeArgumentList\n Integer,State "]
136321[label="classType_lfno_classOrInterfaceType\n Integer "]
136322[label="classType_lfno_classOrInterfaceType\n State "]
116323[label="argumentList\n entry.getKey()+1,entry.getValue() "]
126324[label="additiveExpression\n entry.getKey()+1 "]
136325[label="methodInvocation_lfno_primary\n entry.getKey() "]
146326[label="typeName\n entry "]
136327[label="literal\n 1 "]
126328[label="methodInvocation_lfno_primary\n entry.getValue() "]
136329[label="typeName\n entry "]
66330[label="returnStatement\n returnsiblings.size(); "]
76331[label="methodInvocation_lfno_primary\n siblings.size() "]
86332[label="typeName\n siblings "]
36333[label="methodDeclaration\n publicintexactMatchSearch(Stringkey){returnexactMatchSearch(key,0,0,0);} "]
46334[label="methodModifier\n public "]
46335[label="methodHeader\n intexactMatchSearch(Stringkey) "]
56336[label="integralType\n int "]
56337[label="methodDeclarator\n exactMatchSearch(Stringkey) "]
66338[label="formalParameter\n Stringkey "]
76339[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
76340[label="variableDeclaratorId\n key "]
46341[label="block\n {returnexactMatchSearch(key,0,0,0);} "]
56342[label="returnStatement\n returnexactMatchSearch(key,0,0,0); "]
66343[label="methodInvocation_lfno_primary\n exactMatchSearch(key,0,0,0) "]
76344[label="methodName\n exactMatchSearch "]
76345[label="argumentList\n key,0,0,0 "]
86346[label="expressionName\n key "]
86347[label="literal\n 0 "]
86348[label="literal\n 0 "]
86349[label="literal\n 0 "]
36350[label="methodDeclaration\n privateintexactMatchSearch(Stringkey,intpos,intlen,intnodePos){if(len<=0)len=key.length();if(nodePos<=0)nodePos=0;intresult=-1;char[]keyChars=key.toCharArray();intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;} "]
46351[label="methodModifier\n private "]
46352[label="methodHeader\n intexactMatchSearch(Stringkey,intpos,intlen,intnodePos) "]
56353[label="integralType\n int "]
56354[label="methodDeclarator\n exactMatchSearch(Stringkey,intpos,intlen,intnodePos) "]
66355[label="formalParameterList\n Stringkey,intpos,intlen,intnodePos "]
76356[label="formalParameters\n Stringkey,intpos,intlen "]
86357[label="formalParameter\n Stringkey "]
96358[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
96359[label="variableDeclaratorId\n key "]
86360[label="formalParameter\n intpos "]
96361[label="integralType\n int "]
96362[label="variableDeclaratorId\n pos "]
86363[label="formalParameter\n intlen "]
96364[label="integralType\n int "]
96365[label="variableDeclaratorId\n len "]
76366[label="formalParameter\n intnodePos "]
86367[label="integralType\n int "]
86368[label="variableDeclaratorId\n nodePos "]
46369[label="block\n {if(len<=0)len=key.length();if(nodePos<=0)nodePos=0;intresult=-1;char[]keyChars=key.toCharArray();intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;} "]
56370[label="blockStatements\n if(len<=0)len=key.length();if(nodePos<=0)nodePos=0;intresult=-1;char[]keyChars=key.toCharArray();intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult; "]
66371[label="ifThenStatement\n if(len<=0)len=key.length(); "]
76372[label="relationalExpression\n len<=0 "]
86373[label="expressionName\n len "]
86374[label="literal\n 0 "]
76375[label="expressionStatement\n len=key.length(); "]
86376[label="assignment\n len=key.length() "]
96377[label="expressionName\n len "]
96378[label="assignmentOperator\n = "]
96379[label="methodInvocation_lfno_primary\n key.length() "]
106380[label="typeName\n key "]
66381[label="ifThenStatement\n if(nodePos<=0)nodePos=0; "]
76382[label="relationalExpression\n nodePos<=0 "]
86383[label="expressionName\n nodePos "]
86384[label="literal\n 0 "]
76385[label="expressionStatement\n nodePos=0; "]
86386[label="assignment\n nodePos=0 "]
96387[label="expressionName\n nodePos "]
96388[label="assignmentOperator\n = "]
96389[label="literal\n 0 "]
66390[label="localVariableDeclarationStatement\n intresult=-1; "]
76391[label="localVariableDeclaration\n intresult=-1 "]
86392[label="integralType\n int "]
86393[label="variableDeclarator\n result=-1 "]
96394[label="variableDeclaratorId\n result "]
96395[label="unaryExpression\n -1 "]
106396[label="literal\n 1 "]
66397[label="localVariableDeclarationStatement\n char[]keyChars=key.toCharArray(); "]
76398[label="localVariableDeclaration\n char[]keyChars=key.toCharArray() "]
86399[label="unannArrayType\n char[] "]
96400[label="integralType\n char "]
96401[label="dims\n [] "]
86402[label="variableDeclarator\n keyChars=key.toCharArray() "]
96403[label="variableDeclaratorId\n keyChars "]
96404[label="methodInvocation_lfno_primary\n key.toCharArray() "]
106405[label="typeName\n key "]
66406[label="localVariableDeclarationStatement\n intb=base[nodePos]; "]
76407[label="localVariableDeclaration\n intb=base[nodePos] "]
86408[label="integralType\n int "]
86409[label="variableDeclarator\n b=base[nodePos] "]
96410[label="variableDeclaratorId\n b "]
96411[label="arrayAccess_lfno_primary\n base[nodePos] "]
106412[label="expressionName\n base "]
106413[label="expressionName\n nodePos "]
66414[label="localVariableDeclarationStatement\n intp; "]
76415[label="localVariableDeclaration\n intp "]
86416[label="integralType\n int "]
86417[label="variableDeclaratorId\n p "]
66418[label="basicForStatement\n for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;} "]
76419[label="localVariableDeclaration\n inti=pos "]
86420[label="integralType\n int "]
86421[label="variableDeclarator\n i=pos "]
96422[label="variableDeclaratorId\n i "]
96423[label="expressionName\n pos "]
76424[label="relationalExpression\n i<len "]
86425[label="expressionName\n i "]
86426[label="expressionName\n len "]
76427[label="postIncrementExpression\n i++ "]
86428[label="expressionName\n i "]
76429[label="block\n {p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;} "]
86430[label="blockStatements\n p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult; "]
96431[label="expressionStatement\n p=b+(int)(keyChars[i])+1; "]
106432[label="assignment\n p=b+(int)(keyChars[i])+1 "]
116433[label="expressionName\n p "]
116434[label="assignmentOperator\n = "]
116435[label="additiveExpression\n b+(int)(keyChars[i])+1 "]
126436[label="additiveExpression\n b+(int)(keyChars[i]) "]
136437[label="expressionName\n b "]
136438[label="castExpression\n (int)(keyChars[i]) "]
146439[label="integralType\n int "]
146440[label="primaryNoNewArray_lfno_primary\n (keyChars[i]) "]
156441[label="arrayAccess_lfno_primary\n keyChars[i] "]
166442[label="expressionName\n keyChars "]
166443[label="expressionName\n i "]
126444[label="literal\n 1 "]
96445[label="ifThenElseStatement\n if(b==check[p])b=base[p];elsereturnresult; "]
106446[label="equalityExpression\n b==check[p] "]
116447[label="expressionName\n b "]
116448[label="arrayAccess_lfno_primary\n check[p] "]
126449[label="expressionName\n check "]
126450[label="expressionName\n p "]
106451[label="expressionStatement\n b=base[p]; "]
116452[label="assignment\n b=base[p] "]
126453[label="expressionName\n b "]
126454[label="assignmentOperator\n = "]
126455[label="arrayAccess_lfno_primary\n base[p] "]
136456[label="expressionName\n base "]
136457[label="expressionName\n p "]
106458[label="returnStatement\n returnresult; "]
116459[label="expressionName\n result "]
66460[label="expressionStatement\n p=b; "]
76461[label="assignment\n p=b "]
86462[label="expressionName\n p "]
86463[label="assignmentOperator\n = "]
86464[label="expressionName\n b "]
66465[label="localVariableDeclarationStatement\n intn=base[p]; "]
76466[label="localVariableDeclaration\n intn=base[p] "]
86467[label="integralType\n int "]
86468[label="variableDeclarator\n n=base[p] "]
96469[label="variableDeclaratorId\n n "]
96470[label="arrayAccess_lfno_primary\n base[p] "]
106471[label="expressionName\n base "]
106472[label="expressionName\n p "]
66473[label="ifThenStatement\n if(b==check[p]&&n<0){result=-n-1;} "]
76474[label="conditionalAndExpression\n b==check[p]&&n<0 "]
86475[label="equalityExpression\n b==check[p] "]
96476[label="expressionName\n b "]
96477[label="arrayAccess_lfno_primary\n check[p] "]
106478[label="expressionName\n check "]
106479[label="expressionName\n p "]
86480[label="relationalExpression\n n<0 "]
96481[label="expressionName\n n "]
96482[label="literal\n 0 "]
76483[label="block\n {result=-n-1;} "]
86484[label="expressionStatement\n result=-n-1; "]
96485[label="assignment\n result=-n-1 "]
106486[label="expressionName\n result "]
106487[label="assignmentOperator\n = "]
106488[label="additiveExpression\n -n-1 "]
116489[label="unaryExpression\n -n "]
126490[label="expressionName\n n "]
116491[label="literal\n 1 "]
66492[label="returnStatement\n returnresult; "]
76493[label="expressionName\n result "]
36494[label="methodDeclaration\n privateintexactMatchSearch(char[]keyChars,intpos,intlen,intnodePos){intresult=-1;intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;} "]
46495[label="methodModifier\n private "]
46496[label="methodHeader\n intexactMatchSearch(char[]keyChars,intpos,intlen,intnodePos) "]
56497[label="integralType\n int "]
56498[label="methodDeclarator\n exactMatchSearch(char[]keyChars,intpos,intlen,intnodePos) "]
66499[label="formalParameterList\n char[]keyChars,intpos,intlen,intnodePos "]
76500[label="formalParameters\n char[]keyChars,intpos,intlen "]
86501[label="formalParameter\n char[]keyChars "]
96502[label="unannArrayType\n char[] "]
106503[label="integralType\n char "]
106504[label="dims\n [] "]
96505[label="variableDeclaratorId\n keyChars "]
86506[label="formalParameter\n intpos "]
96507[label="integralType\n int "]
96508[label="variableDeclaratorId\n pos "]
86509[label="formalParameter\n intlen "]
96510[label="integralType\n int "]
96511[label="variableDeclaratorId\n len "]
76512[label="formalParameter\n intnodePos "]
86513[label="integralType\n int "]
86514[label="variableDeclaratorId\n nodePos "]
46515[label="block\n {intresult=-1;intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;} "]
56516[label="blockStatements\n intresult=-1;intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult; "]
66517[label="localVariableDeclarationStatement\n intresult=-1; "]
76518[label="localVariableDeclaration\n intresult=-1 "]
86519[label="integralType\n int "]
86520[label="variableDeclarator\n result=-1 "]
96521[label="variableDeclaratorId\n result "]
96522[label="unaryExpression\n -1 "]
106523[label="literal\n 1 "]
66524[label="localVariableDeclarationStatement\n intb=base[nodePos]; "]
76525[label="localVariableDeclaration\n intb=base[nodePos] "]
86526[label="integralType\n int "]
86527[label="variableDeclarator\n b=base[nodePos] "]
96528[label="variableDeclaratorId\n b "]
96529[label="arrayAccess_lfno_primary\n base[nodePos] "]
106530[label="expressionName\n base "]
106531[label="expressionName\n nodePos "]
66532[label="localVariableDeclarationStatement\n intp; "]
76533[label="localVariableDeclaration\n intp "]
86534[label="integralType\n int "]
86535[label="variableDeclaratorId\n p "]
66536[label="basicForStatement\n for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;} "]
76537[label="localVariableDeclaration\n inti=pos "]
86538[label="integralType\n int "]
86539[label="variableDeclarator\n i=pos "]
96540[label="variableDeclaratorId\n i "]
96541[label="expressionName\n pos "]
76542[label="relationalExpression\n i<len "]
86543[label="expressionName\n i "]
86544[label="expressionName\n len "]
76545[label="postIncrementExpression\n i++ "]
86546[label="expressionName\n i "]
76547[label="block\n {p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;} "]
86548[label="blockStatements\n p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult; "]
96549[label="expressionStatement\n p=b+(int)(keyChars[i])+1; "]
106550[label="assignment\n p=b+(int)(keyChars[i])+1 "]
116551[label="expressionName\n p "]
116552[label="assignmentOperator\n = "]
116553[label="additiveExpression\n b+(int)(keyChars[i])+1 "]
126554[label="additiveExpression\n b+(int)(keyChars[i]) "]
136555[label="expressionName\n b "]
136556[label="castExpression\n (int)(keyChars[i]) "]
146557[label="integralType\n int "]
146558[label="primaryNoNewArray_lfno_primary\n (keyChars[i]) "]
156559[label="arrayAccess_lfno_primary\n keyChars[i] "]
166560[label="expressionName\n keyChars "]
166561[label="expressionName\n i "]
126562[label="literal\n 1 "]
96563[label="ifThenElseStatement\n if(b==check[p])b=base[p];elsereturnresult; "]
106564[label="equalityExpression\n b==check[p] "]
116565[label="expressionName\n b "]
116566[label="arrayAccess_lfno_primary\n check[p] "]
126567[label="expressionName\n check "]
126568[label="expressionName\n p "]
106569[label="expressionStatement\n b=base[p]; "]
116570[label="assignment\n b=base[p] "]
126571[label="expressionName\n b "]
126572[label="assignmentOperator\n = "]
126573[label="arrayAccess_lfno_primary\n base[p] "]
136574[label="expressionName\n base "]
136575[label="expressionName\n p "]
106576[label="returnStatement\n returnresult; "]
116577[label="expressionName\n result "]
66578[label="expressionStatement\n p=b; "]
76579[label="assignment\n p=b "]
86580[label="expressionName\n p "]
86581[label="assignmentOperator\n = "]
86582[label="expressionName\n b "]
66583[label="localVariableDeclarationStatement\n intn=base[p]; "]
76584[label="localVariableDeclaration\n intn=base[p] "]
86585[label="integralType\n int "]
86586[label="variableDeclarator\n n=base[p] "]
96587[label="variableDeclaratorId\n n "]
96588[label="arrayAccess_lfno_primary\n base[p] "]
106589[label="expressionName\n base "]
106590[label="expressionName\n p "]
66591[label="ifThenStatement\n if(b==check[p]&&n<0){result=-n-1;} "]
76592[label="conditionalAndExpression\n b==check[p]&&n<0 "]
86593[label="equalityExpression\n b==check[p] "]
96594[label="expressionName\n b "]
96595[label="arrayAccess_lfno_primary\n check[p] "]
106596[label="expressionName\n check "]
106597[label="expressionName\n p "]
86598[label="relationalExpression\n n<0 "]
96599[label="expressionName\n n "]
96600[label="literal\n 0 "]
76601[label="block\n {result=-n-1;} "]
86602[label="expressionStatement\n result=-n-1; "]
96603[label="assignment\n result=-n-1 "]
106604[label="expressionName\n result "]
106605[label="assignmentOperator\n = "]
106606[label="additiveExpression\n -n-1 "]
116607[label="unaryExpression\n -n "]
126608[label="expressionName\n n "]
116609[label="literal\n 1 "]
66610[label="returnStatement\n returnresult; "]
76611[label="expressionName\n result "]
36612[label="normalClassDeclaration\n privatestaticclassDebugArray{Map<String,String>nameValueMap=newLinkedHashMap<String,String>();publicvoidadd(Stringname,intvalue){StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);}@OverridepublicStringtoString(){Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;}publicvoidprintln(){System.out.print(this);}} "]
46613[label="classModifier\n private "]
46614[label="classModifier\n static "]
46615[label="classBody\n {Map<String,String>nameValueMap=newLinkedHashMap<String,String>();publicvoidadd(Stringname,intvalue){StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);}@OverridepublicStringtoString(){Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;}publicvoidprintln(){System.out.print(this);}} "]
56616[label="fieldDeclaration\n Map<String,String>nameValueMap=newLinkedHashMap<String,String>(); "]
66617[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
76618[label="typeArguments\n <String,String> "]
86619[label="typeArgumentList\n String,String "]
96620[label="classType_lfno_classOrInterfaceType\n String "]
96621[label="classType_lfno_classOrInterfaceType\n String "]
66622[label="variableDeclarator\n nameValueMap=newLinkedHashMap<String,String>() "]
76623[label="variableDeclaratorId\n nameValueMap "]
76624[label="classInstanceCreationExpression_lfno_primary\n newLinkedHashMap<String,String>() "]
86625[label="typeArguments\n <String,String> "]
96626[label="typeArgumentList\n String,String "]
106627[label="classType_lfno_classOrInterfaceType\n String "]
106628[label="classType_lfno_classOrInterfaceType\n String "]
56629[label="methodDeclaration\n publicvoidadd(Stringname,intvalue){StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);} "]
66630[label="methodModifier\n public "]
66631[label="methodHeader\n voidadd(Stringname,intvalue) "]
76632[label="result\n void "]
76633[label="methodDeclarator\n add(Stringname,intvalue) "]
86634[label="formalParameterList\n Stringname,intvalue "]
96635[label="formalParameter\n Stringname "]
106636[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
106637[label="variableDeclaratorId\n name "]
96638[label="formalParameter\n intvalue "]
106639[label="integralType\n int "]
106640[label="variableDeclaratorId\n value "]
66641[label="block\n {StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);} "]
76642[label="blockStatements\n StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap); "]
86643[label="localVariableDeclarationStatement\n StringvalueInMap=nameValueMap.get(name); "]
96644[label="localVariableDeclaration\n StringvalueInMap=nameValueMap.get(name) "]
106645[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
106646[label="variableDeclarator\n valueInMap=nameValueMap.get(name) "]
116647[label="variableDeclaratorId\n valueInMap "]
116648[label="methodInvocation_lfno_primary\n nameValueMap.get(name) "]
126649[label="typeName\n nameValueMap "]
126650[label="expressionName\n name "]
86651[label="ifThenStatement\n if(valueInMap==null){valueInMap=\"\";} "]
96652[label="equalityExpression\n valueInMap==null "]
106653[label="expressionName\n valueInMap "]
106654[label="literal\n null "]
96655[label="block\n {valueInMap=\"\";} "]
106656[label="expressionStatement\n valueInMap=\"\"; "]
116657[label="assignment\n valueInMap=\"\" "]
126658[label="expressionName\n valueInMap "]
126659[label="assignmentOperator\n = "]
126660[label="literal\n \"\" "]
86661[label="expressionStatement\n valueInMap+=\" \"+String.format(\"%5d\",value); "]
96662[label="assignment\n valueInMap+=\" \"+String.format(\"%5d\",value) "]
106663[label="expressionName\n valueInMap "]
106664[label="assignmentOperator\n += "]
106665[label="additiveExpression\n \" \"+String.format(\"%5d\",value) "]
116666[label="literal\n \" \" "]
116667[label="methodInvocation_lfno_primary\n String.format(\"%5d\",value) "]
126668[label="typeName\n String "]
126669[label="argumentList\n \"%5d\",value "]
136670[label="literal\n \"%5d\" "]
136671[label="expressionName\n value "]
86672[label="expressionStatement\n nameValueMap.put(name,valueInMap); "]
96673[label="methodInvocation\n nameValueMap.put(name,valueInMap) "]
106674[label="typeName\n nameValueMap "]
106675[label="argumentList\n name,valueInMap "]
116676[label="expressionName\n name "]
116677[label="expressionName\n valueInMap "]
56678[label="methodDeclaration\n @OverridepublicStringtoString(){Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;} "]
66679[label="markerAnnotation\n @Override "]
76680[label="typeName\n Override "]
66681[label="methodModifier\n public "]
66682[label="methodHeader\n StringtoString() "]
76683[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
76684[label="methodDeclarator\n toString() "]
66685[label="block\n {Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;} "]
76686[label="blockStatements\n Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext; "]
86687[label="localVariableDeclarationStatement\n Stringtext=\"\"; "]
96688[label="localVariableDeclaration\n Stringtext=\"\" "]
106689[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
106690[label="variableDeclarator\n text=\"\" "]
116691[label="variableDeclaratorId\n text "]
116692[label="literal\n \"\" "]
86693[label="enhancedForStatement\n for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';} "]
96694[label="unannClassOrInterfaceType\n Map.Entry<String,String> "]
106695[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
106696[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String> "]
116697[label="typeArguments\n <String,String> "]
126698[label="typeArgumentList\n String,String "]
136699[label="classType_lfno_classOrInterfaceType\n String "]
136700[label="classType_lfno_classOrInterfaceType\n String "]
96701[label="variableDeclaratorId\n entry "]
96702[label="methodInvocation_lfno_primary\n nameValueMap.entrySet() "]
106703[label="typeName\n nameValueMap "]
96704[label="block\n {Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';} "]
106705[label="blockStatements\n Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n'; "]
116706[label="localVariableDeclarationStatement\n Stringname=entry.getKey(); "]
126707[label="localVariableDeclaration\n Stringname=entry.getKey() "]
136708[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
136709[label="variableDeclarator\n name=entry.getKey() "]
146710[label="variableDeclaratorId\n name "]
146711[label="methodInvocation_lfno_primary\n entry.getKey() "]
156712[label="typeName\n entry "]
116713[label="localVariableDeclarationStatement\n Stringvalue=entry.getValue(); "]
126714[label="localVariableDeclaration\n Stringvalue=entry.getValue() "]
136715[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
136716[label="variableDeclarator\n value=entry.getValue() "]
146717[label="variableDeclaratorId\n value "]
146718[label="methodInvocation_lfno_primary\n entry.getValue() "]
156719[label="typeName\n entry "]
116720[label="expressionStatement\n text+=String.format(\"%-5s\",name)+\"= \"+value+'\n'; "]
126721[label="assignment\n text+=String.format(\"%-5s\",name)+\"= \"+value+'\n' "]
136722[label="expressionName\n text "]
136723[label="assignmentOperator\n += "]
136724[label="additiveExpression\n String.format(\"%-5s\",name)+\"= \"+value+'\n' "]
146725[label="additiveExpression\n String.format(\"%-5s\",name)+\"= \"+value "]
156726[label="additiveExpression\n String.format(\"%-5s\",name)+\"= \" "]
166727[label="methodInvocation_lfno_primary\n String.format(\"%-5s\",name) "]
176728[label="typeName\n String "]
176729[label="argumentList\n \"%-5s\",name "]
186730[label="literal\n \"%-5s\" "]
186731[label="expressionName\n name "]
166732[label="literal\n \"= \" "]
156733[label="expressionName\n value "]
146734[label="literal\n '\n' "]
86735[label="returnStatement\n returntext; "]
96736[label="expressionName\n text "]
56737[label="methodDeclaration\n publicvoidprintln(){System.out.print(this);} "]
66738[label="methodModifier\n public "]
66739[label="methodHeader\n voidprintln() "]
76740[label="result\n void "]
76741[label="methodDeclarator\n println() "]
66742[label="block\n {System.out.print(this);} "]
76743[label="expressionStatement\n System.out.print(this); "]
86744[label="methodInvocation\n System.out.print(this) "]
96745[label="typeName\n System.out "]
106746[label="packageOrTypeName\n System "]
96747[label="primaryNoNewArray_lfno_primary\n this "]
36748[label="methodDeclaration\n publicintsize(){returnv==null?0:v.length;} "]
46749[label="methodModifier\n public "]
46750[label="methodHeader\n intsize() "]
56751[label="integralType\n int "]
56752[label="methodDeclarator\n size() "]
46753[label="block\n {returnv==null?0:v.length;} "]
56754[label="returnStatement\n returnv==null?0:v.length; "]
66755[label="conditionalExpression\n v==null?0:v.length "]
76756[label="equalityExpression\n v==null "]
86757[label="expressionName\n v "]
86758[label="literal\n null "]
76759[label="literal\n 0 "]
76760[label="expressionName\n v.length "]
86761[label="ambiguousName\n v "]
36762[label="normalClassDeclaration\n privateclassBuilder{privateStaterootState=newState();privatebooleanused[];privateintallocSize;privateintprogress;privateintnextCheckPos;privateintkeySize;@SuppressWarnings(\"unchecked\")publicvoidbuild(TreeMap<String,V>map){v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();}privatevoidaddKeyword(Stringkeyword,intindex){StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();}privatevoidaddAllKeyword(Collection<String>keywordSet){inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}}privatevoidconstructFailureStates(){fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}}privatevoidconstructOutput(StatetargetState){Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;}privatevoidbuildDoubleArrayTrie(Set<String>keySet){progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);}privateintresize(intnewSize){int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;}privateintinsert(List<Map.Entry<Integer,State>>siblings){intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;}privatevoidloseWeight(){intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;}} "]
46763[label="classModifier\n private "]
46764[label="classBody\n {privateStaterootState=newState();privatebooleanused[];privateintallocSize;privateintprogress;privateintnextCheckPos;privateintkeySize;@SuppressWarnings(\"unchecked\")publicvoidbuild(TreeMap<String,V>map){v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();}privatevoidaddKeyword(Stringkeyword,intindex){StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();}privatevoidaddAllKeyword(Collection<String>keywordSet){inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}}privatevoidconstructFailureStates(){fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}}privatevoidconstructOutput(StatetargetState){Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;}privatevoidbuildDoubleArrayTrie(Set<String>keySet){progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);}privateintresize(intnewSize){int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;}privateintinsert(List<Map.Entry<Integer,State>>siblings){intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;}privatevoidloseWeight(){intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;}} "]
56765[label="fieldDeclaration\n privateStaterootState=newState(); "]
66766[label="fieldModifier\n private "]
66767[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
66768[label="variableDeclarator\n rootState=newState() "]
76769[label="variableDeclaratorId\n rootState "]
76770[label="classInstanceCreationExpression_lfno_primary\n newState() "]
56771[label="fieldDeclaration\n privatebooleanused[]; "]
66772[label="fieldModifier\n private "]
66773[label="unannPrimitiveType\n boolean "]
66774[label="variableDeclaratorId\n used[] "]
76775[label="dims\n [] "]
56776[label="fieldDeclaration\n privateintallocSize; "]
66777[label="fieldModifier\n private "]
66778[label="integralType\n int "]
66779[label="variableDeclaratorId\n allocSize "]
56780[label="fieldDeclaration\n privateintprogress; "]
66781[label="fieldModifier\n private "]
66782[label="integralType\n int "]
66783[label="variableDeclaratorId\n progress "]
56784[label="fieldDeclaration\n privateintnextCheckPos; "]
66785[label="fieldModifier\n private "]
66786[label="integralType\n int "]
66787[label="variableDeclaratorId\n nextCheckPos "]
56788[label="fieldDeclaration\n privateintkeySize; "]
66789[label="fieldModifier\n private "]
66790[label="integralType\n int "]
66791[label="variableDeclaratorId\n keySize "]
56792[label="methodDeclaration\n @SuppressWarnings(\"unchecked\")publicvoidbuild(TreeMap<String,V>map){v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();} "]
66793[label="singleElementAnnotation\n @SuppressWarnings(\"unchecked\") "]
76794[label="typeName\n SuppressWarnings "]
76795[label="literal\n \"unchecked\" "]
66796[label="methodModifier\n public "]
66797[label="methodHeader\n voidbuild(TreeMap<String,V>map) "]
76798[label="result\n void "]
76799[label="methodDeclarator\n build(TreeMap<String,V>map) "]
86800[label="formalParameter\n TreeMap<String,V>map "]
96801[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,V> "]
106802[label="typeArguments\n <String,V> "]
116803[label="typeArgumentList\n String,V "]
126804[label="classType_lfno_classOrInterfaceType\n String "]
126805[label="classType_lfno_classOrInterfaceType\n V "]
96806[label="variableDeclaratorId\n map "]
66807[label="block\n {v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();} "]
76808[label="blockStatements\n v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight(); "]
86809[label="expressionStatement\n v=(V[])map.values().toArray(); "]
96810[label="assignment\n v=(V[])map.values().toArray() "]
106811[label="expressionName\n v "]
106812[label="assignmentOperator\n = "]
106813[label="castExpression\n (V[])map.values().toArray() "]
116814[label="arrayType\n V[] "]
126815[label="classType_lfno_classOrInterfaceType\n V "]
126816[label="dims\n [] "]
116817[label="primary\n map.values().toArray() "]
126818[label="methodInvocation_lfno_primary\n map.values() "]
136819[label="typeName\n map "]
126820[label="methodInvocation_lf_primary\n .toArray() "]
86821[label="expressionStatement\n l=newint[v.length]; "]
96822[label="assignment\n l=newint[v.length] "]
106823[label="expressionName\n l "]
106824[label="assignmentOperator\n = "]
106825[label="arrayCreationExpression\n newint[v.length] "]
116826[label="integralType\n int "]
116827[label="dimExpr\n [v.length] "]
126828[label="expressionName\n v.length "]
136829[label="ambiguousName\n v "]
86830[label="localVariableDeclarationStatement\n Set<String>keySet=map.keySet(); "]
96831[label="localVariableDeclaration\n Set<String>keySet=map.keySet() "]
106832[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
116833[label="typeArguments\n <String> "]
126834[label="classType_lfno_classOrInterfaceType\n String "]
106835[label="variableDeclarator\n keySet=map.keySet() "]
116836[label="variableDeclaratorId\n keySet "]
116837[label="methodInvocation_lfno_primary\n map.keySet() "]
126838[label="typeName\n map "]
86839[label="expressionStatement\n addAllKeyword(keySet); "]
96840[label="methodInvocation\n addAllKeyword(keySet) "]
106841[label="methodName\n addAllKeyword "]
106842[label="expressionName\n keySet "]
86843[label="expressionStatement\n buildDoubleArrayTrie(keySet); "]
96844[label="methodInvocation\n buildDoubleArrayTrie(keySet) "]
106845[label="methodName\n buildDoubleArrayTrie "]
106846[label="expressionName\n keySet "]
86847[label="expressionStatement\n used=null; "]
96848[label="assignment\n used=null "]
106849[label="expressionName\n used "]
106850[label="assignmentOperator\n = "]
106851[label="literal\n null "]
86852[label="expressionStatement\n constructFailureStates(); "]
96853[label="methodInvocation\n constructFailureStates() "]
106854[label="methodName\n constructFailureStates "]
86855[label="expressionStatement\n rootState=null; "]
96856[label="assignment\n rootState=null "]
106857[label="expressionName\n rootState "]
106858[label="assignmentOperator\n = "]
106859[label="literal\n null "]
86860[label="expressionStatement\n loseWeight(); "]
96861[label="methodInvocation\n loseWeight() "]
106862[label="methodName\n loseWeight "]
56863[label="methodDeclaration\n privatevoidaddKeyword(Stringkeyword,intindex){StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();} "]
66864[label="methodModifier\n private "]
66865[label="methodHeader\n voidaddKeyword(Stringkeyword,intindex) "]
76866[label="result\n void "]
76867[label="methodDeclarator\n addKeyword(Stringkeyword,intindex) "]
86868[label="formalParameterList\n Stringkeyword,intindex "]
96869[label="formalParameter\n Stringkeyword "]
106870[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
106871[label="variableDeclaratorId\n keyword "]
96872[label="formalParameter\n intindex "]
106873[label="integralType\n int "]
106874[label="variableDeclaratorId\n index "]
66875[label="block\n {StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();} "]
76876[label="blockStatements\n StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length(); "]
86877[label="localVariableDeclarationStatement\n StatecurrentState=this.rootState; "]
96878[label="localVariableDeclaration\n StatecurrentState=this.rootState "]
106879[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
106880[label="variableDeclarator\n currentState=this.rootState "]
116881[label="variableDeclaratorId\n currentState "]
116882[label="primary\n this.rootState "]
126883[label="primaryNoNewArray_lfno_primary\n this "]
126884[label="fieldAccess_lf_primary\n .rootState "]
86885[label="enhancedForStatement\n for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);} "]
96886[label="unannClassType_lfno_unannClassOrInterfaceType\n Character "]
96887[label="variableDeclaratorId\n character "]
96888[label="methodInvocation_lfno_primary\n keyword.toCharArray() "]
106889[label="typeName\n keyword "]
96890[label="block\n {currentState=currentState.addState(character);} "]
106891[label="expressionStatement\n currentState=currentState.addState(character); "]
116892[label="assignment\n currentState=currentState.addState(character) "]
126893[label="expressionName\n currentState "]
126894[label="assignmentOperator\n = "]
126895[label="methodInvocation_lfno_primary\n currentState.addState(character) "]
136896[label="typeName\n currentState "]
136897[label="expressionName\n character "]
86898[label="expressionStatement\n currentState.addEmit(index); "]
96899[label="methodInvocation\n currentState.addEmit(index) "]
106900[label="typeName\n currentState "]
106901[label="expressionName\n index "]
86902[label="expressionStatement\n l[index]=keyword.length(); "]
96903[label="assignment\n l[index]=keyword.length() "]
106904[label="arrayAccess\n l[index] "]
116905[label="expressionName\n l "]
116906[label="expressionName\n index "]
106907[label="assignmentOperator\n = "]
106908[label="methodInvocation_lfno_primary\n keyword.length() "]
116909[label="typeName\n keyword "]
56910[label="methodDeclaration\n privatevoidaddAllKeyword(Collection<String>keywordSet){inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}} "]
66911[label="methodModifier\n private "]
66912[label="methodHeader\n voidaddAllKeyword(Collection<String>keywordSet) "]
76913[label="result\n void "]
76914[label="methodDeclarator\n addAllKeyword(Collection<String>keywordSet) "]
86915[label="formalParameter\n Collection<String>keywordSet "]
96916[label="unannClassType_lfno_unannClassOrInterfaceType\n Collection<String> "]
106917[label="typeArguments\n <String> "]
116918[label="classType_lfno_classOrInterfaceType\n String "]
96919[label="variableDeclaratorId\n keywordSet "]
66920[label="block\n {inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}} "]
76921[label="blockStatements\n inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);} "]
86922[label="localVariableDeclarationStatement\n inti=0; "]
96923[label="localVariableDeclaration\n inti=0 "]
106924[label="integralType\n int "]
106925[label="variableDeclarator\n i=0 "]
116926[label="variableDeclaratorId\n i "]
116927[label="literal\n 0 "]
86928[label="enhancedForStatement\n for(Stringkeyword:keywordSet){addKeyword(keyword,i++);} "]
96929[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
96930[label="variableDeclaratorId\n keyword "]
96931[label="expressionName\n keywordSet "]
96932[label="block\n {addKeyword(keyword,i++);} "]
106933[label="expressionStatement\n addKeyword(keyword,i++); "]
116934[label="methodInvocation\n addKeyword(keyword,i++) "]
126935[label="methodName\n addKeyword "]
126936[label="argumentList\n keyword,i++ "]
136937[label="expressionName\n keyword "]
136938[label="postfixExpression\n i++ "]
146939[label="expressionName\n i "]
146940[label="postIncrementExpression_lf_postfixExpression\n ++ "]
56941[label="methodDeclaration\n privatevoidconstructFailureStates(){fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}} "]
66942[label="methodModifier\n private "]
66943[label="methodHeader\n voidconstructFailureStates() "]
76944[label="result\n void "]
76945[label="methodDeclarator\n constructFailureStates() "]
66946[label="block\n {fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}} "]
76947[label="blockStatements\n fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}} "]
86948[label="expressionStatement\n fail=newint[size+1]; "]
96949[label="assignment\n fail=newint[size+1] "]
106950[label="expressionName\n fail "]
106951[label="assignmentOperator\n = "]
106952[label="arrayCreationExpression\n newint[size+1] "]
116953[label="integralType\n int "]
116954[label="dimExpr\n [size+1] "]
126955[label="additiveExpression\n size+1 "]
136956[label="expressionName\n size "]
136957[label="literal\n 1 "]
86958[label="expressionStatement\n fail[1]=base[0]; "]
96959[label="assignment\n fail[1]=base[0] "]
106960[label="arrayAccess\n fail[1] "]
116961[label="expressionName\n fail "]
116962[label="literal\n 1 "]
106963[label="assignmentOperator\n = "]
106964[label="arrayAccess_lfno_primary\n base[0] "]
116965[label="expressionName\n base "]
116966[label="literal\n 0 "]
86967[label="expressionStatement\n output=newint[size+1][]; "]
96968[label="assignment\n output=newint[size+1][] "]
106969[label="expressionName\n output "]
106970[label="assignmentOperator\n = "]
106971[label="arrayCreationExpression\n newint[size+1][] "]
116972[label="integralType\n int "]
116973[label="dimExpr\n [size+1] "]
126974[label="additiveExpression\n size+1 "]
136975[label="expressionName\n size "]
136976[label="literal\n 1 "]
116977[label="dims\n [] "]
86978[label="localVariableDeclarationStatement\n Queue<State>queue=newLinkedBlockingDeque<State>(); "]
96979[label="localVariableDeclaration\n Queue<State>queue=newLinkedBlockingDeque<State>() "]
106980[label="unannClassType_lfno_unannClassOrInterfaceType\n Queue<State> "]
116981[label="typeArguments\n <State> "]
126982[label="classType_lfno_classOrInterfaceType\n State "]
106983[label="variableDeclarator\n queue=newLinkedBlockingDeque<State>() "]
116984[label="variableDeclaratorId\n queue "]
116985[label="classInstanceCreationExpression_lfno_primary\n newLinkedBlockingDeque<State>() "]
126986[label="typeArguments\n <State> "]
136987[label="classType_lfno_classOrInterfaceType\n State "]
86988[label="enhancedForStatement\n for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);} "]
96989[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
96990[label="variableDeclaratorId\n depthOneState "]
96991[label="primary\n this.rootState.getStates() "]
106992[label="primaryNoNewArray_lfno_primary\n this "]
106993[label="fieldAccess_lf_primary\n .rootState "]
106994[label="methodInvocation_lf_primary\n .getStates() "]
96995[label="block\n {depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);} "]
106996[label="blockStatements\n depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState); "]
116997[label="expressionStatement\n depthOneState.setFailure(this.rootState,fail); "]
126998[label="methodInvocation\n depthOneState.setFailure(this.rootState,fail) "]
136999[label="typeName\n depthOneState "]
137000[label="argumentList\n this.rootState,fail "]
147001[label="primary\n this.rootState "]
157002[label="primaryNoNewArray_lfno_primary\n this "]
157003[label="fieldAccess_lf_primary\n .rootState "]
147004[label="expressionName\n fail "]
117005[label="expressionStatement\n queue.add(depthOneState); "]
127006[label="methodInvocation\n queue.add(depthOneState) "]
137007[label="typeName\n queue "]
137008[label="expressionName\n depthOneState "]
117009[label="expressionStatement\n constructOutput(depthOneState); "]
127010[label="methodInvocation\n constructOutput(depthOneState) "]
137011[label="methodName\n constructOutput "]
137012[label="expressionName\n depthOneState "]
87013[label="whileStatement\n while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}} "]
97014[label="unaryExpressionNotPlusMinus\n !queue.isEmpty() "]
107015[label="methodInvocation_lfno_primary\n queue.isEmpty() "]
117016[label="typeName\n queue "]
97017[label="block\n {StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}} "]
107018[label="blockStatements\n StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);} "]
117019[label="localVariableDeclarationStatement\n StatecurrentState=queue.remove(); "]
127020[label="localVariableDeclaration\n StatecurrentState=queue.remove() "]
137021[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
137022[label="variableDeclarator\n currentState=queue.remove() "]
147023[label="variableDeclaratorId\n currentState "]
147024[label="methodInvocation_lfno_primary\n queue.remove() "]
157025[label="typeName\n queue "]
117026[label="enhancedForStatement\n for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);} "]
127027[label="unannClassType_lfno_unannClassOrInterfaceType\n Character "]
127028[label="variableDeclaratorId\n transition "]
127029[label="methodInvocation_lfno_primary\n currentState.getTransitions() "]
137030[label="typeName\n currentState "]
127031[label="block\n {StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);} "]
137032[label="blockStatements\n StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState); "]
147033[label="localVariableDeclarationStatement\n StatetargetState=currentState.nextState(transition); "]
157034[label="localVariableDeclaration\n StatetargetState=currentState.nextState(transition) "]
167035[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
167036[label="variableDeclarator\n targetState=currentState.nextState(transition) "]
177037[label="variableDeclaratorId\n targetState "]
177038[label="methodInvocation_lfno_primary\n currentState.nextState(transition) "]
187039[label="typeName\n currentState "]
187040[label="expressionName\n transition "]
147041[label="expressionStatement\n queue.add(targetState); "]
157042[label="methodInvocation\n queue.add(targetState) "]
167043[label="typeName\n queue "]
167044[label="expressionName\n targetState "]
147045[label="localVariableDeclarationStatement\n StatetraceFailureState=currentState.failure(); "]
157046[label="localVariableDeclaration\n StatetraceFailureState=currentState.failure() "]
167047[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
167048[label="variableDeclarator\n traceFailureState=currentState.failure() "]
177049[label="variableDeclaratorId\n traceFailureState "]
177050[label="methodInvocation_lfno_primary\n currentState.failure() "]
187051[label="typeName\n currentState "]
147052[label="whileStatement\n while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();} "]
157053[label="equalityExpression\n traceFailureState.nextState(transition)==null "]
167054[label="methodInvocation_lfno_primary\n traceFailureState.nextState(transition) "]
177055[label="typeName\n traceFailureState "]
177056[label="expressionName\n transition "]
167057[label="literal\n null "]
157058[label="block\n {traceFailureState=traceFailureState.failure();} "]
167059[label="expressionStatement\n traceFailureState=traceFailureState.failure(); "]
177060[label="assignment\n traceFailureState=traceFailureState.failure() "]
187061[label="expressionName\n traceFailureState "]
187062[label="assignmentOperator\n = "]
187063[label="methodInvocation_lfno_primary\n traceFailureState.failure() "]
197064[label="typeName\n traceFailureState "]
147065[label="localVariableDeclarationStatement\n StatenewFailureState=traceFailureState.nextState(transition); "]
157066[label="localVariableDeclaration\n StatenewFailureState=traceFailureState.nextState(transition) "]
167067[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
167068[label="variableDeclarator\n newFailureState=traceFailureState.nextState(transition) "]
177069[label="variableDeclaratorId\n newFailureState "]
177070[label="methodInvocation_lfno_primary\n traceFailureState.nextState(transition) "]
187071[label="typeName\n traceFailureState "]
187072[label="expressionName\n transition "]
147073[label="expressionStatement\n targetState.setFailure(newFailureState,fail); "]
157074[label="methodInvocation\n targetState.setFailure(newFailureState,fail) "]
167075[label="typeName\n targetState "]
167076[label="argumentList\n newFailureState,fail "]
177077[label="expressionName\n newFailureState "]
177078[label="expressionName\n fail "]
147079[label="expressionStatement\n targetState.addEmit(newFailureState.emit()); "]
157080[label="methodInvocation\n targetState.addEmit(newFailureState.emit()) "]
167081[label="typeName\n targetState "]
167082[label="methodInvocation_lfno_primary\n newFailureState.emit() "]
177083[label="typeName\n newFailureState "]
147084[label="expressionStatement\n constructOutput(targetState); "]
157085[label="methodInvocation\n constructOutput(targetState) "]
167086[label="methodName\n constructOutput "]
167087[label="expressionName\n targetState "]
57088[label="methodDeclaration\n privatevoidconstructOutput(StatetargetState){Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;} "]
67089[label="methodModifier\n private "]
67090[label="methodHeader\n voidconstructOutput(StatetargetState) "]
77091[label="result\n void "]
77092[label="methodDeclarator\n constructOutput(StatetargetState) "]
87093[label="formalParameter\n StatetargetState "]
97094[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
97095[label="variableDeclaratorId\n targetState "]
67096[label="block\n {Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;} "]
77097[label="blockStatements\n Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output; "]
87098[label="localVariableDeclarationStatement\n Collection<Integer>emit=targetState.emit(); "]
97099[label="localVariableDeclaration\n Collection<Integer>emit=targetState.emit() "]
107100[label="unannClassType_lfno_unannClassOrInterfaceType\n Collection<Integer> "]
117101[label="typeArguments\n <Integer> "]
127102[label="classType_lfno_classOrInterfaceType\n Integer "]
107103[label="variableDeclarator\n emit=targetState.emit() "]
117104[label="variableDeclaratorId\n emit "]
117105[label="methodInvocation_lfno_primary\n targetState.emit() "]
127106[label="typeName\n targetState "]
87107[label="ifThenStatement\n if(emit==null||emit.size()==0)return; "]
97108[label="conditionalOrExpression\n emit==null||emit.size()==0 "]
107109[label="equalityExpression\n emit==null "]
117110[label="expressionName\n emit "]
117111[label="literal\n null "]
107112[label="equalityExpression\n emit.size()==0 "]
117113[label="methodInvocation_lfno_primary\n emit.size() "]
127114[label="typeName\n emit "]
117115[label="literal\n 0 "]
97116[label="returnStatement\n return; "]
87117[label="localVariableDeclarationStatement\n intoutput[]=newint[emit.size()]; "]
97118[label="localVariableDeclaration\n intoutput[]=newint[emit.size()] "]
107119[label="integralType\n int "]
107120[label="variableDeclarator\n output[]=newint[emit.size()] "]
117121[label="variableDeclaratorId\n output[] "]
127122[label="dims\n [] "]
117123[label="arrayCreationExpression\n newint[emit.size()] "]
127124[label="integralType\n int "]
127125[label="dimExpr\n [emit.size()] "]
137126[label="methodInvocation_lfno_primary\n emit.size() "]
147127[label="typeName\n emit "]
87128[label="localVariableDeclarationStatement\n Iterator<Integer>it=emit.iterator(); "]
97129[label="localVariableDeclaration\n Iterator<Integer>it=emit.iterator() "]
107130[label="unannClassType_lfno_unannClassOrInterfaceType\n Iterator<Integer> "]
117131[label="typeArguments\n <Integer> "]
127132[label="classType_lfno_classOrInterfaceType\n Integer "]
107133[label="variableDeclarator\n it=emit.iterator() "]
117134[label="variableDeclaratorId\n it "]
117135[label="methodInvocation_lfno_primary\n emit.iterator() "]
127136[label="typeName\n emit "]
87137[label="basicForStatement\n for(inti=0;i<output.length;++i){output[i]=it.next();} "]
97138[label="localVariableDeclaration\n inti=0 "]
107139[label="integralType\n int "]
107140[label="variableDeclarator\n i=0 "]
117141[label="variableDeclaratorId\n i "]
117142[label="literal\n 0 "]
97143[label="relationalExpression\n i<output.length "]
107144[label="expressionName\n i "]
107145[label="expressionName\n output.length "]
117146[label="ambiguousName\n output "]
97147[label="preIncrementExpression\n ++i "]
107148[label="expressionName\n i "]
97149[label="block\n {output[i]=it.next();} "]
107150[label="expressionStatement\n output[i]=it.next(); "]
117151[label="assignment\n output[i]=it.next() "]
127152[label="arrayAccess\n output[i] "]
137153[label="expressionName\n output "]
137154[label="expressionName\n i "]
127155[label="assignmentOperator\n = "]
127156[label="methodInvocation_lfno_primary\n it.next() "]
137157[label="typeName\n it "]
87158[label="expressionStatement\n AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output; "]
97159[label="assignment\n AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output "]
107160[label="arrayAccess\n AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()] "]
117161[label="fieldAccess\n AhoCorasickDoubleArrayTrie.this.output "]
127162[label="primaryNoNewArray_lfno_primary\n AhoCorasickDoubleArrayTrie.this "]
137163[label="typeName\n AhoCorasickDoubleArrayTrie "]
117164[label="methodInvocation_lfno_primary\n targetState.getIndex() "]
127165[label="typeName\n targetState "]
107166[label="assignmentOperator\n = "]
107167[label="expressionName\n output "]
57168[label="methodDeclaration\n privatevoidbuildDoubleArrayTrie(Set<String>keySet){progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);} "]
67169[label="methodModifier\n private "]
67170[label="methodHeader\n voidbuildDoubleArrayTrie(Set<String>keySet) "]
77171[label="result\n void "]
77172[label="methodDeclarator\n buildDoubleArrayTrie(Set<String>keySet) "]
87173[label="formalParameter\n Set<String>keySet "]
97174[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
107175[label="typeArguments\n <String> "]
117176[label="classType_lfno_classOrInterfaceType\n String "]
97177[label="variableDeclaratorId\n keySet "]
67178[label="block\n {progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);} "]
77179[label="blockStatements\n progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings); "]
87180[label="expressionStatement\n progress=0; "]
97181[label="assignment\n progress=0 "]
107182[label="expressionName\n progress "]
107183[label="assignmentOperator\n = "]
107184[label="literal\n 0 "]
87185[label="expressionStatement\n keySize=keySet.size(); "]
97186[label="assignment\n keySize=keySet.size() "]
107187[label="expressionName\n keySize "]
107188[label="assignmentOperator\n = "]
107189[label="methodInvocation_lfno_primary\n keySet.size() "]
117190[label="typeName\n keySet "]
87191[label="expressionStatement\n resize(65536*32); "]
97192[label="methodInvocation\n resize(65536*32) "]
107193[label="methodName\n resize "]
107194[label="multiplicativeExpression\n 65536*32 "]
117195[label="literal\n 65536 "]
117196[label="literal\n 32 "]
87197[label="expressionStatement\n base[0]=1; "]
97198[label="assignment\n base[0]=1 "]
107199[label="arrayAccess\n base[0] "]
117200[label="expressionName\n base "]
117201[label="literal\n 0 "]
107202[label="assignmentOperator\n = "]
107203[label="literal\n 1 "]
87204[label="expressionStatement\n nextCheckPos=0; "]
97205[label="assignment\n nextCheckPos=0 "]
107206[label="expressionName\n nextCheckPos "]
107207[label="assignmentOperator\n = "]
107208[label="literal\n 0 "]
87209[label="localVariableDeclarationStatement\n Stateroot_node=this.rootState; "]
97210[label="localVariableDeclaration\n Stateroot_node=this.rootState "]
107211[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
107212[label="variableDeclarator\n root_node=this.rootState "]
117213[label="variableDeclaratorId\n root_node "]
117214[label="primary\n this.rootState "]
127215[label="primaryNoNewArray_lfno_primary\n this "]
127216[label="fieldAccess_lf_primary\n .rootState "]
87217[label="localVariableDeclarationStatement\n List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size()); "]
97218[label="localVariableDeclaration\n List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size()) "]
107219[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<Integer,State>> "]
117220[label="typeArguments\n <Map.Entry<Integer,State>> "]
127221[label="classOrInterfaceType\n Map.Entry<Integer,State> "]
137222[label="classType_lfno_classOrInterfaceType\n Map "]
137223[label="classType_lf_classOrInterfaceType\n .Entry<Integer,State> "]
147224[label="typeArguments\n <Integer,State> "]
157225[label="typeArgumentList\n Integer,State "]
167226[label="classType_lfno_classOrInterfaceType\n Integer "]
167227[label="classType_lfno_classOrInterfaceType\n State "]
107228[label="variableDeclarator\n siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size()) "]
117229[label="variableDeclaratorId\n siblings "]
117230[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size()) "]
127231[label="typeArguments\n <Map.Entry<Integer,State>> "]
137232[label="classOrInterfaceType\n Map.Entry<Integer,State> "]
147233[label="classType_lfno_classOrInterfaceType\n Map "]
147234[label="classType_lf_classOrInterfaceType\n .Entry<Integer,State> "]
157235[label="typeArguments\n <Integer,State> "]
167236[label="typeArgumentList\n Integer,State "]
177237[label="classType_lfno_classOrInterfaceType\n Integer "]
177238[label="classType_lfno_classOrInterfaceType\n State "]
127239[label="primary\n root_node.getSuccess().entrySet().size() "]
137240[label="methodInvocation_lfno_primary\n root_node.getSuccess() "]
147241[label="typeName\n root_node "]
137242[label="methodInvocation_lf_primary\n .entrySet() "]
137243[label="methodInvocation_lf_primary\n .size() "]
87244[label="expressionStatement\n fetch(root_node,siblings); "]
97245[label="methodInvocation\n fetch(root_node,siblings) "]
107246[label="methodName\n fetch "]
107247[label="argumentList\n root_node,siblings "]
117248[label="expressionName\n root_node "]
117249[label="expressionName\n siblings "]
87250[label="expressionStatement\n insert(siblings); "]
97251[label="methodInvocation\n insert(siblings) "]
107252[label="methodName\n insert "]
107253[label="expressionName\n siblings "]
57254[label="methodDeclaration\n privateintresize(intnewSize){int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;} "]
67255[label="methodModifier\n private "]
67256[label="methodHeader\n intresize(intnewSize) "]
77257[label="integralType\n int "]
77258[label="methodDeclarator\n resize(intnewSize) "]
87259[label="formalParameter\n intnewSize "]
97260[label="integralType\n int "]
97261[label="variableDeclaratorId\n newSize "]
67262[label="block\n {int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;} "]
77263[label="blockStatements\n int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize; "]
87264[label="localVariableDeclarationStatement\n int[]base2=newint[newSize]; "]
97265[label="localVariableDeclaration\n int[]base2=newint[newSize] "]
107266[label="unannArrayType\n int[] "]
117267[label="integralType\n int "]
117268[label="dims\n [] "]
107269[label="variableDeclarator\n base2=newint[newSize] "]
117270[label="variableDeclaratorId\n base2 "]
117271[label="arrayCreationExpression\n newint[newSize] "]
127272[label="integralType\n int "]
127273[label="dimExpr\n [newSize] "]
137274[label="expressionName\n newSize "]
87275[label="localVariableDeclarationStatement\n int[]check2=newint[newSize]; "]
97276[label="localVariableDeclaration\n int[]check2=newint[newSize] "]
107277[label="unannArrayType\n int[] "]
117278[label="integralType\n int "]
117279[label="dims\n [] "]
107280[label="variableDeclarator\n check2=newint[newSize] "]
117281[label="variableDeclaratorId\n check2 "]
117282[label="arrayCreationExpression\n newint[newSize] "]
127283[label="integralType\n int "]
127284[label="dimExpr\n [newSize] "]
137285[label="expressionName\n newSize "]
87286[label="localVariableDeclarationStatement\n booleanused2[]=newboolean[newSize]; "]
97287[label="localVariableDeclaration\n booleanused2[]=newboolean[newSize] "]
107288[label="unannPrimitiveType\n boolean "]
107289[label="variableDeclarator\n used2[]=newboolean[newSize] "]
117290[label="variableDeclaratorId\n used2[] "]
127291[label="dims\n [] "]
117292[label="arrayCreationExpression\n newboolean[newSize] "]
127293[label="primitiveType\n boolean "]
127294[label="dimExpr\n [newSize] "]
137295[label="expressionName\n newSize "]
87296[label="ifThenStatement\n if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);} "]
97297[label="relationalExpression\n allocSize>0 "]
107298[label="expressionName\n allocSize "]
107299[label="literal\n 0 "]
97300[label="block\n {System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);} "]
107301[label="blockStatements\n System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize); "]
117302[label="expressionStatement\n System.arraycopy(base,0,base2,0,allocSize); "]
127303[label="methodInvocation\n System.arraycopy(base,0,base2,0,allocSize) "]
137304[label="typeName\n System "]
137305[label="argumentList\n base,0,base2,0,allocSize "]
147306[label="expressionName\n base "]
147307[label="literal\n 0 "]
147308[label="expressionName\n base2 "]
147309[label="literal\n 0 "]
147310[label="expressionName\n allocSize "]
117311[label="expressionStatement\n System.arraycopy(check,0,check2,0,allocSize); "]
127312[label="methodInvocation\n System.arraycopy(check,0,check2,0,allocSize) "]
137313[label="typeName\n System "]
137314[label="argumentList\n check,0,check2,0,allocSize "]
147315[label="expressionName\n check "]
147316[label="literal\n 0 "]
147317[label="expressionName\n check2 "]
147318[label="literal\n 0 "]
147319[label="expressionName\n allocSize "]
117320[label="expressionStatement\n System.arraycopy(used,0,used2,0,allocSize); "]
127321[label="methodInvocation\n System.arraycopy(used,0,used2,0,allocSize) "]
137322[label="typeName\n System "]
137323[label="argumentList\n used,0,used2,0,allocSize "]
147324[label="expressionName\n used "]
147325[label="literal\n 0 "]
147326[label="expressionName\n used2 "]
147327[label="literal\n 0 "]
147328[label="expressionName\n allocSize "]
87329[label="expressionStatement\n base=base2; "]
97330[label="assignment\n base=base2 "]
107331[label="expressionName\n base "]
107332[label="assignmentOperator\n = "]
107333[label="expressionName\n base2 "]
87334[label="expressionStatement\n check=check2; "]
97335[label="assignment\n check=check2 "]
107336[label="expressionName\n check "]
107337[label="assignmentOperator\n = "]
107338[label="expressionName\n check2 "]
87339[label="expressionStatement\n used=used2; "]
97340[label="assignment\n used=used2 "]
107341[label="expressionName\n used "]
107342[label="assignmentOperator\n = "]
107343[label="expressionName\n used2 "]
87344[label="returnStatement\n returnallocSize=newSize; "]
97345[label="assignment\n allocSize=newSize "]
107346[label="expressionName\n allocSize "]
107347[label="assignmentOperator\n = "]
107348[label="expressionName\n newSize "]
57349[label="methodDeclaration\n privateintinsert(List<Map.Entry<Integer,State>>siblings){intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;} "]
67350[label="methodModifier\n private "]
67351[label="methodHeader\n intinsert(List<Map.Entry<Integer,State>>siblings) "]
77352[label="integralType\n int "]
77353[label="methodDeclarator\n insert(List<Map.Entry<Integer,State>>siblings) "]
87354[label="formalParameter\n List<Map.Entry<Integer,State>>siblings "]
97355[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<Integer,State>> "]
107356[label="typeArguments\n <Map.Entry<Integer,State>> "]
117357[label="classOrInterfaceType\n Map.Entry<Integer,State> "]
127358[label="classType_lfno_classOrInterfaceType\n Map "]
127359[label="classType_lf_classOrInterfaceType\n .Entry<Integer,State> "]
137360[label="typeArguments\n <Integer,State> "]
147361[label="typeArgumentList\n Integer,State "]
157362[label="classType_lfno_classOrInterfaceType\n Integer "]
157363[label="classType_lfno_classOrInterfaceType\n State "]
97364[label="variableDeclaratorId\n siblings "]
67365[label="block\n {intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;} "]
77366[label="blockStatements\n intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin; "]
87367[label="localVariableDeclarationStatement\n intbegin=0; "]
97368[label="localVariableDeclaration\n intbegin=0 "]
107369[label="integralType\n int "]
107370[label="variableDeclarator\n begin=0 "]
117371[label="variableDeclaratorId\n begin "]
117372[label="literal\n 0 "]
87373[label="localVariableDeclarationStatement\n intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1; "]
97374[label="localVariableDeclaration\n intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1 "]
107375[label="integralType\n int "]
107376[label="variableDeclarator\n pos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1 "]
117377[label="variableDeclaratorId\n pos "]
117378[label="additiveExpression\n Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1 "]
127379[label="methodInvocation_lfno_primary\n Math.max(siblings.get(0).getKey()+1,nextCheckPos) "]
137380[label="typeName\n Math "]
137381[label="argumentList\n siblings.get(0).getKey()+1,nextCheckPos "]
147382[label="additiveExpression\n siblings.get(0).getKey()+1 "]
157383[label="primary\n siblings.get(0).getKey() "]
167384[label="methodInvocation_lfno_primary\n siblings.get(0) "]
177385[label="typeName\n siblings "]
177386[label="literal\n 0 "]
167387[label="methodInvocation_lf_primary\n .getKey() "]
157388[label="literal\n 1 "]
147389[label="expressionName\n nextCheckPos "]
127390[label="literal\n 1 "]
87391[label="localVariableDeclarationStatement\n intnonzero_num=0; "]
97392[label="localVariableDeclaration\n intnonzero_num=0 "]
107393[label="integralType\n int "]
107394[label="variableDeclarator\n nonzero_num=0 "]
117395[label="variableDeclaratorId\n nonzero_num "]
117396[label="literal\n 0 "]
87397[label="localVariableDeclarationStatement\n intfirst=0; "]
97398[label="localVariableDeclaration\n intfirst=0 "]
107399[label="integralType\n int "]
107400[label="variableDeclarator\n first=0 "]
117401[label="variableDeclaratorId\n first "]
117402[label="literal\n 0 "]
87403[label="ifThenStatement\n if(allocSize<=pos)resize(pos+1); "]
97404[label="relationalExpression\n allocSize<=pos "]
107405[label="expressionName\n allocSize "]
107406[label="expressionName\n pos "]
97407[label="expressionStatement\n resize(pos+1); "]
107408[label="methodInvocation\n resize(pos+1) "]
117409[label="methodName\n resize "]
117410[label="additiveExpression\n pos+1 "]
127411[label="expressionName\n pos "]
127412[label="literal\n 1 "]
87413[label="labeledStatement\n outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;} "]
97414[label="whileStatement\n while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;} "]
107415[label="literal\n true "]
107416[label="block\n {pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;} "]
117417[label="blockStatements\n pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break; "]
127418[label="expressionStatement\n pos++; "]
137419[label="postIncrementExpression\n pos++ "]
147420[label="expressionName\n pos "]
127421[label="ifThenStatement\n if(allocSize<=pos)resize(pos+1); "]
137422[label="relationalExpression\n allocSize<=pos "]
147423[label="expressionName\n allocSize "]
147424[label="expressionName\n pos "]
137425[label="expressionStatement\n resize(pos+1); "]
147426[label="methodInvocation\n resize(pos+1) "]
157427[label="methodName\n resize "]
157428[label="additiveExpression\n pos+1 "]
167429[label="expressionName\n pos "]
167430[label="literal\n 1 "]
127431[label="ifThenElseStatement\n if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;} "]
137432[label="equalityExpression\n check[pos]!=0 "]
147433[label="arrayAccess_lfno_primary\n check[pos] "]
157434[label="expressionName\n check "]
157435[label="expressionName\n pos "]
147436[label="literal\n 0 "]
137437[label="block\n {nonzero_num++;continue;} "]
147438[label="blockStatements\n nonzero_num++;continue; "]
157439[label="expressionStatement\n nonzero_num++; "]
167440[label="postIncrementExpression\n nonzero_num++ "]
177441[label="expressionName\n nonzero_num "]
157442[label="continueStatement\n continue; "]
137443[label="ifThenStatement\n if(first==0){nextCheckPos=pos;first=1;} "]
147444[label="equalityExpression\n first==0 "]
157445[label="expressionName\n first "]
157446[label="literal\n 0 "]
147447[label="block\n {nextCheckPos=pos;first=1;} "]
157448[label="blockStatements\n nextCheckPos=pos;first=1; "]
167449[label="expressionStatement\n nextCheckPos=pos; "]
177450[label="assignment\n nextCheckPos=pos "]
187451[label="expressionName\n nextCheckPos "]
187452[label="assignmentOperator\n = "]
187453[label="expressionName\n pos "]
167454[label="expressionStatement\n first=1; "]
177455[label="assignment\n first=1 "]
187456[label="expressionName\n first "]
187457[label="assignmentOperator\n = "]
187458[label="literal\n 1 "]
127459[label="expressionStatement\n begin=pos-siblings.get(0).getKey(); "]
137460[label="assignment\n begin=pos-siblings.get(0).getKey() "]
147461[label="expressionName\n begin "]
147462[label="assignmentOperator\n = "]
147463[label="additiveExpression\n pos-siblings.get(0).getKey() "]
157464[label="expressionName\n pos "]
157465[label="primary\n siblings.get(0).getKey() "]
167466[label="methodInvocation_lfno_primary\n siblings.get(0) "]
177467[label="typeName\n siblings "]
177468[label="literal\n 0 "]
167469[label="methodInvocation_lf_primary\n .getKey() "]
127470[label="ifThenStatement\n if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));} "]
137471[label="relationalExpression\n allocSize<=(begin+siblings.get(siblings.size()-1).getKey()) "]
147472[label="expressionName\n allocSize "]
147473[label="primaryNoNewArray_lfno_primary\n (begin+siblings.get(siblings.size()-1).getKey()) "]
157474[label="additiveExpression\n begin+siblings.get(siblings.size()-1).getKey() "]
167475[label="expressionName\n begin "]
167476[label="primary\n siblings.get(siblings.size()-1).getKey() "]
177477[label="methodInvocation_lfno_primary\n siblings.get(siblings.size()-1) "]
187478[label="typeName\n siblings "]
187479[label="additiveExpression\n siblings.size()-1 "]
197480[label="methodInvocation_lfno_primary\n siblings.size() "]
207481[label="typeName\n siblings "]
197482[label="literal\n 1 "]
177483[label="methodInvocation_lf_primary\n .getKey() "]
137484[label="block\n {doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));} "]
147485[label="blockStatements\n doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l)); "]
157486[label="localVariableDeclarationStatement\n doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1); "]
167487[label="localVariableDeclaration\n doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1) "]
177488[label="floatingPointType\n double "]
177489[label="variableDeclarator\n l=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1) "]
187490[label="variableDeclaratorId\n l "]
187491[label="conditionalExpression\n (1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1) "]
197492[label="primaryNoNewArray_lfno_primary\n (1.05>1.0*keySize/(progress+1)) "]
207493[label="relationalExpression\n 1.05>1.0*keySize/(progress+1) "]
217494[label="literal\n 1.05 "]
217495[label="multiplicativeExpression\n 1.0*keySize/(progress+1) "]
227496[label="multiplicativeExpression\n 1.0*keySize "]
237497[label="literal\n 1.0 "]
237498[label="expressionName\n keySize "]
227499[label="primaryNoNewArray_lfno_primary\n (progress+1) "]
237500[label="additiveExpression\n progress+1 "]
247501[label="expressionName\n progress "]
247502[label="literal\n 1 "]
197503[label="literal\n 1.05 "]
197504[label="multiplicativeExpression\n 1.0*keySize/(progress+1) "]
207505[label="multiplicativeExpression\n 1.0*keySize "]
217506[label="literal\n 1.0 "]
217507[label="expressionName\n keySize "]
207508[label="primaryNoNewArray_lfno_primary\n (progress+1) "]
217509[label="additiveExpression\n progress+1 "]
227510[label="expressionName\n progress "]
227511[label="literal\n 1 "]
157512[label="expressionStatement\n resize((int)(allocSize*l)); "]
167513[label="methodInvocation\n resize((int)(allocSize*l)) "]
177514[label="methodName\n resize "]
177515[label="castExpression\n (int)(allocSize*l) "]
187516[label="integralType\n int "]
187517[label="primaryNoNewArray_lfno_primary\n (allocSize*l) "]
197518[label="multiplicativeExpression\n allocSize*l "]
207519[label="expressionName\n allocSize "]
207520[label="expressionName\n l "]
127521[label="ifThenStatement\n if(used[begin])continue; "]
137522[label="arrayAccess_lfno_primary\n used[begin] "]
147523[label="expressionName\n used "]
147524[label="expressionName\n begin "]
137525[label="continueStatement\n continue; "]
127526[label="basicForStatement\n for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter; "]
137527[label="localVariableDeclaration\n inti=1 "]
147528[label="integralType\n int "]
147529[label="variableDeclarator\n i=1 "]
157530[label="variableDeclaratorId\n i "]
157531[label="literal\n 1 "]
137532[label="relationalExpression\n i<siblings.size() "]
147533[label="expressionName\n i "]
147534[label="methodInvocation_lfno_primary\n siblings.size() "]
157535[label="typeName\n siblings "]
137536[label="postIncrementExpression\n i++ "]
147537[label="expressionName\n i "]
137538[label="ifThenStatement\n if(check[begin+siblings.get(i).getKey()]!=0)continueouter; "]
147539[label="equalityExpression\n check[begin+siblings.get(i).getKey()]!=0 "]
157540[label="arrayAccess_lfno_primary\n check[begin+siblings.get(i).getKey()] "]
167541[label="expressionName\n check "]
167542[label="additiveExpression\n begin+siblings.get(i).getKey() "]
177543[label="expressionName\n begin "]
177544[label="primary\n siblings.get(i).getKey() "]
187545[label="methodInvocation_lfno_primary\n siblings.get(i) "]
197546[label="typeName\n siblings "]
197547[label="expressionName\n i "]
187548[label="methodInvocation_lf_primary\n .getKey() "]
157549[label="literal\n 0 "]
147550[label="continueStatement\n continueouter; "]
127551[label="breakStatement\n break; "]
87552[label="ifThenStatement\n if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos; "]
97553[label="relationalExpression\n 1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95 "]
107554[label="multiplicativeExpression\n 1.0*nonzero_num/(pos-nextCheckPos+1) "]
117555[label="multiplicativeExpression\n 1.0*nonzero_num "]
127556[label="literal\n 1.0 "]
127557[label="expressionName\n nonzero_num "]
117558[label="primaryNoNewArray_lfno_primary\n (pos-nextCheckPos+1) "]
127559[label="additiveExpression\n pos-nextCheckPos+1 "]
137560[label="additiveExpression\n pos-nextCheckPos "]
147561[label="expressionName\n pos "]
147562[label="expressionName\n nextCheckPos "]
137563[label="literal\n 1 "]
107564[label="literal\n 0.95 "]
97565[label="expressionStatement\n nextCheckPos=pos; "]
107566[label="assignment\n nextCheckPos=pos "]
117567[label="expressionName\n nextCheckPos "]
117568[label="assignmentOperator\n = "]
117569[label="expressionName\n pos "]
87570[label="expressionStatement\n used[begin]=true; "]
97571[label="assignment\n used[begin]=true "]
107572[label="arrayAccess\n used[begin] "]
117573[label="expressionName\n used "]
117574[label="expressionName\n begin "]
107575[label="assignmentOperator\n = "]
107576[label="literal\n true "]
87577[label="expressionStatement\n size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1; "]
97578[label="assignment\n size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1 "]
107579[label="expressionName\n size "]
107580[label="assignmentOperator\n = "]
107581[label="conditionalExpression\n (size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1 "]
117582[label="primaryNoNewArray_lfno_primary\n (size>begin+siblings.get(siblings.size()-1).getKey()+1) "]
127583[label="relationalExpression\n size>begin+siblings.get(siblings.size()-1).getKey()+1 "]
137584[label="expressionName\n size "]
137585[label="additiveExpression\n begin+siblings.get(siblings.size()-1).getKey()+1 "]
147586[label="additiveExpression\n begin+siblings.get(siblings.size()-1).getKey() "]
157587[label="expressionName\n begin "]
157588[label="primary\n siblings.get(siblings.size()-1).getKey() "]
167589[label="methodInvocation_lfno_primary\n siblings.get(siblings.size()-1) "]
177590[label="typeName\n siblings "]
177591[label="additiveExpression\n siblings.size()-1 "]
187592[label="methodInvocation_lfno_primary\n siblings.size() "]
197593[label="typeName\n siblings "]
187594[label="literal\n 1 "]
167595[label="methodInvocation_lf_primary\n .getKey() "]
147596[label="literal\n 1 "]
117597[label="expressionName\n size "]
117598[label="additiveExpression\n begin+siblings.get(siblings.size()-1).getKey()+1 "]
127599[label="additiveExpression\n begin+siblings.get(siblings.size()-1).getKey() "]
137600[label="expressionName\n begin "]
137601[label="primary\n siblings.get(siblings.size()-1).getKey() "]
147602[label="methodInvocation_lfno_primary\n siblings.get(siblings.size()-1) "]
157603[label="typeName\n siblings "]
157604[label="additiveExpression\n siblings.size()-1 "]
167605[label="methodInvocation_lfno_primary\n siblings.size() "]
177606[label="typeName\n siblings "]
167607[label="literal\n 1 "]
147608[label="methodInvocation_lf_primary\n .getKey() "]
127609[label="literal\n 1 "]
87610[label="enhancedForStatement\n for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;} "]
97611[label="unannClassOrInterfaceType\n Map.Entry<Integer,State> "]
107612[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
107613[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<Integer,State> "]
117614[label="typeArguments\n <Integer,State> "]
127615[label="typeArgumentList\n Integer,State "]
137616[label="classType_lfno_classOrInterfaceType\n Integer "]
137617[label="classType_lfno_classOrInterfaceType\n State "]
97618[label="variableDeclaratorId\n sibling "]
97619[label="expressionName\n siblings "]
97620[label="block\n {check[begin+sibling.getKey()]=begin;} "]
107621[label="expressionStatement\n check[begin+sibling.getKey()]=begin; "]
117622[label="assignment\n check[begin+sibling.getKey()]=begin "]
127623[label="arrayAccess\n check[begin+sibling.getKey()] "]
137624[label="expressionName\n check "]
137625[label="additiveExpression\n begin+sibling.getKey() "]
147626[label="expressionName\n begin "]
147627[label="methodInvocation_lfno_primary\n sibling.getKey() "]
157628[label="typeName\n sibling "]
127629[label="assignmentOperator\n = "]
127630[label="expressionName\n begin "]
87631[label="enhancedForStatement\n for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());} "]
97632[label="unannClassOrInterfaceType\n Map.Entry<Integer,State> "]
107633[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
107634[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<Integer,State> "]
117635[label="typeArguments\n <Integer,State> "]
127636[label="typeArgumentList\n Integer,State "]
137637[label="classType_lfno_classOrInterfaceType\n Integer "]
137638[label="classType_lfno_classOrInterfaceType\n State "]
97639[label="variableDeclaratorId\n sibling "]
97640[label="expressionName\n siblings "]
97641[label="block\n {List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());} "]
107642[label="blockStatements\n List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey()); "]
117643[label="localVariableDeclarationStatement\n List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1); "]
127644[label="localVariableDeclaration\n List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1) "]
137645[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<Integer,State>> "]
147646[label="typeArguments\n <Map.Entry<Integer,State>> "]
157647[label="classOrInterfaceType\n Map.Entry<Integer,State> "]
167648[label="classType_lfno_classOrInterfaceType\n Map "]
167649[label="classType_lf_classOrInterfaceType\n .Entry<Integer,State> "]
177650[label="typeArguments\n <Integer,State> "]
187651[label="typeArgumentList\n Integer,State "]
197652[label="classType_lfno_classOrInterfaceType\n Integer "]
197653[label="classType_lfno_classOrInterfaceType\n State "]
137654[label="variableDeclarator\n new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1) "]
147655[label="variableDeclaratorId\n new_siblings "]
147656[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1) "]
157657[label="typeArguments\n <Map.Entry<Integer,State>> "]
167658[label="classOrInterfaceType\n Map.Entry<Integer,State> "]
177659[label="classType_lfno_classOrInterfaceType\n Map "]
177660[label="classType_lf_classOrInterfaceType\n .Entry<Integer,State> "]
187661[label="typeArguments\n <Integer,State> "]
197662[label="typeArgumentList\n Integer,State "]
207663[label="classType_lfno_classOrInterfaceType\n Integer "]
207664[label="classType_lfno_classOrInterfaceType\n State "]
157665[label="additiveExpression\n sibling.getValue().getSuccess().entrySet().size()+1 "]
167666[label="primary\n sibling.getValue().getSuccess().entrySet().size() "]
177667[label="methodInvocation_lfno_primary\n sibling.getValue() "]
187668[label="typeName\n sibling "]
177669[label="methodInvocation_lf_primary\n .getSuccess() "]
177670[label="methodInvocation_lf_primary\n .entrySet() "]
177671[label="methodInvocation_lf_primary\n .size() "]
167672[label="literal\n 1 "]
117673[label="ifThenElseStatement\n if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;} "]
127674[label="equalityExpression\n fetch(sibling.getValue(),new_siblings)==0 "]
137675[label="methodInvocation_lfno_primary\n fetch(sibling.getValue(),new_siblings) "]
147676[label="methodName\n fetch "]
147677[label="argumentList\n sibling.getValue(),new_siblings "]
157678[label="methodInvocation_lfno_primary\n sibling.getValue() "]
167679[label="typeName\n sibling "]
157680[label="expressionName\n new_siblings "]
137681[label="literal\n 0 "]
127682[label="block\n {base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;} "]
137683[label="blockStatements\n base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++; "]
147684[label="expressionStatement\n base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1); "]
157685[label="assignment\n base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1) "]
167686[label="arrayAccess\n base[begin+sibling.getKey()] "]
177687[label="expressionName\n base "]
177688[label="additiveExpression\n begin+sibling.getKey() "]
187689[label="expressionName\n begin "]
187690[label="methodInvocation_lfno_primary\n sibling.getKey() "]
197691[label="typeName\n sibling "]
167692[label="assignmentOperator\n = "]
167693[label="primaryNoNewArray_lfno_primary\n (-sibling.getValue().getLargestValueId()-1) "]
177694[label="additiveExpression\n -sibling.getValue().getLargestValueId()-1 "]
187695[label="unaryExpression\n -sibling.getValue().getLargestValueId() "]
197696[label="primary\n sibling.getValue().getLargestValueId() "]
207697[label="methodInvocation_lfno_primary\n sibling.getValue() "]
217698[label="typeName\n sibling "]
207699[label="methodInvocation_lf_primary\n .getLargestValueId() "]
187700[label="literal\n 1 "]
147701[label="expressionStatement\n progress++; "]
157702[label="postIncrementExpression\n progress++ "]
167703[label="expressionName\n progress "]
127704[label="block\n {inth=insert(new_siblings);base[begin+sibling.getKey()]=h;} "]
137705[label="blockStatements\n inth=insert(new_siblings);base[begin+sibling.getKey()]=h; "]
147706[label="localVariableDeclarationStatement\n inth=insert(new_siblings); "]
157707[label="localVariableDeclaration\n inth=insert(new_siblings) "]
167708[label="integralType\n int "]
167709[label="variableDeclarator\n h=insert(new_siblings) "]
177710[label="variableDeclaratorId\n h "]
177711[label="methodInvocation_lfno_primary\n insert(new_siblings) "]
187712[label="methodName\n insert "]
187713[label="expressionName\n new_siblings "]
147714[label="expressionStatement\n base[begin+sibling.getKey()]=h; "]
157715[label="assignment\n base[begin+sibling.getKey()]=h "]
167716[label="arrayAccess\n base[begin+sibling.getKey()] "]
177717[label="expressionName\n base "]
177718[label="additiveExpression\n begin+sibling.getKey() "]
187719[label="expressionName\n begin "]
187720[label="methodInvocation_lfno_primary\n sibling.getKey() "]
197721[label="typeName\n sibling "]
167722[label="assignmentOperator\n = "]
167723[label="expressionName\n h "]
117724[label="expressionStatement\n sibling.getValue().setIndex(begin+sibling.getKey()); "]
127725[label="methodInvocation\n sibling.getValue().setIndex(begin+sibling.getKey()) "]
137726[label="methodInvocation_lfno_primary\n sibling.getValue() "]
147727[label="typeName\n sibling "]
137728[label="additiveExpression\n begin+sibling.getKey() "]
147729[label="expressionName\n begin "]
147730[label="methodInvocation_lfno_primary\n sibling.getKey() "]
157731[label="typeName\n sibling "]
87732[label="returnStatement\n returnbegin; "]
97733[label="expressionName\n begin "]
57734[label="methodDeclaration\n privatevoidloseWeight(){intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;} "]
67735[label="methodModifier\n private "]
67736[label="methodHeader\n voidloseWeight() "]
77737[label="result\n void "]
77738[label="methodDeclarator\n loseWeight() "]
67739[label="block\n {intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;} "]
77740[label="blockStatements\n intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck; "]
87741[label="localVariableDeclarationStatement\n intnbase[]=newint[size+65535]; "]
97742[label="localVariableDeclaration\n intnbase[]=newint[size+65535] "]
107743[label="integralType\n int "]
107744[label="variableDeclarator\n nbase[]=newint[size+65535] "]
117745[label="variableDeclaratorId\n nbase[] "]
127746[label="dims\n [] "]
117747[label="arrayCreationExpression\n newint[size+65535] "]
127748[label="integralType\n int "]
127749[label="dimExpr\n [size+65535] "]
137750[label="additiveExpression\n size+65535 "]
147751[label="expressionName\n size "]
147752[label="literal\n 65535 "]
87753[label="expressionStatement\n System.arraycopy(base,0,nbase,0,size); "]
97754[label="methodInvocation\n System.arraycopy(base,0,nbase,0,size) "]
107755[label="typeName\n System "]
107756[label="argumentList\n base,0,nbase,0,size "]
117757[label="expressionName\n base "]
117758[label="literal\n 0 "]
117759[label="expressionName\n nbase "]
117760[label="literal\n 0 "]
117761[label="expressionName\n size "]
87762[label="expressionStatement\n base=nbase; "]
97763[label="assignment\n base=nbase "]
107764[label="expressionName\n base "]
107765[label="assignmentOperator\n = "]
107766[label="expressionName\n nbase "]
87767[label="localVariableDeclarationStatement\n intncheck[]=newint[size+65535]; "]
97768[label="localVariableDeclaration\n intncheck[]=newint[size+65535] "]
107769[label="integralType\n int "]
107770[label="variableDeclarator\n ncheck[]=newint[size+65535] "]
117771[label="variableDeclaratorId\n ncheck[] "]
127772[label="dims\n [] "]
117773[label="arrayCreationExpression\n newint[size+65535] "]
127774[label="integralType\n int "]
127775[label="dimExpr\n [size+65535] "]
137776[label="additiveExpression\n size+65535 "]
147777[label="expressionName\n size "]
147778[label="literal\n 65535 "]
87779[label="expressionStatement\n System.arraycopy(check,0,ncheck,0,size); "]
97780[label="methodInvocation\n System.arraycopy(check,0,ncheck,0,size) "]
107781[label="typeName\n System "]
107782[label="argumentList\n check,0,ncheck,0,size "]
117783[label="expressionName\n check "]
117784[label="literal\n 0 "]
117785[label="expressionName\n ncheck "]
117786[label="literal\n 0 "]
117787[label="expressionName\n size "]
87788[label="expressionStatement\n check=ncheck; "]
97789[label="assignment\n check=ncheck "]
107790[label="expressionName\n check "]
107791[label="assignmentOperator\n = "]
107792[label="expressionName\n ncheck "]
07793[label="compilationUnit\n packagecom.hankcs.hanlp.seg.Other;importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie;importcom.hankcs.hanlp.corpus.io.IOUtil;importcom.hankcs.hanlp.corpus.tag.Nature;importcom.hankcs.hanlp.dictionary.CoreDictionary;importcom.hankcs.hanlp.seg.DictionaryBasedSegment;importcom.hankcs.hanlp.seg.NShort.Path.AtomNode;importcom.hankcs.hanlp.seg.Segment;importcom.hankcs.hanlp.seg.common.Term;importcom.hankcs.hanlp.utility.TextUtility;importstaticcom.hankcs.hanlp.utility.Predefine.logger;importjava.io.IOException;importjava.util.*;publicclassAhoCorasickDoubleArrayTrieSegmentextendsDictionaryBasedSegment{AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie;@OverrideprotectedList<Term>segSentence(char[]sentence){if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();}finalint[]wordNet=newint[sentence.length];Arrays.fill(wordNet,1);finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null;trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}});LinkedList<Term>termList=newLinkedList<Term>();if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}}for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];}returntermList;}publicAhoCorasickDoubleArrayTrieSegment(){super();config.useCustomDictionary=false;config.speechTagging=true;}publicAhoCorasickDoubleArrayTrieSegment(TreeMap<String,CoreDictionary.Attribute>dictionary){this();trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();trie.build(dictionary);setTrie(trie);}@OverridepublicSegmentenableCustomDictionary(booleanenable){thrownewUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\");}publicAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>getTrie(){returntrie;}publicvoidsetTrie(AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie){this.trie=trie;}publicAhoCorasickDoubleArrayTrieSegmentloadDictionary(String...pathArray){trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();TreeMap<String,CoreDictionary.Attribute>map=null;try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;}if(map!=null&&!map.isEmpty()){trie.build(map);}returnthis;}}<EOF> "]
17794[label="packageDeclaration\n packagecom.hankcs.hanlp.seg.Other; "]
27795[label="packageName\n com.hankcs.hanlp.seg.Other "]
37796[label="packageName\n com.hankcs.hanlp.seg "]
47797[label="packageName\n com.hankcs.hanlp "]
57798[label="packageName\n com.hankcs "]
67799[label="packageName\n com "]
17800[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie; "]
27801[label="typeName\n com.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie "]
37802[label="packageOrTypeName\n com.hankcs.hanlp.collection.AhoCorasick "]
47803[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
57804[label="packageOrTypeName\n com.hankcs.hanlp "]
67805[label="packageOrTypeName\n com.hankcs "]
77806[label="packageOrTypeName\n com "]
17807[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
27808[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
37809[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
47810[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
57811[label="packageOrTypeName\n com.hankcs.hanlp "]
67812[label="packageOrTypeName\n com.hankcs "]
77813[label="packageOrTypeName\n com "]
17814[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.tag.Nature; "]
27815[label="typeName\n com.hankcs.hanlp.corpus.tag.Nature "]
37816[label="packageOrTypeName\n com.hankcs.hanlp.corpus.tag "]
47817[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
57818[label="packageOrTypeName\n com.hankcs.hanlp "]
67819[label="packageOrTypeName\n com.hankcs "]
77820[label="packageOrTypeName\n com "]
17821[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dictionary.CoreDictionary; "]
27822[label="typeName\n com.hankcs.hanlp.dictionary.CoreDictionary "]
37823[label="packageOrTypeName\n com.hankcs.hanlp.dictionary "]
47824[label="packageOrTypeName\n com.hankcs.hanlp "]
57825[label="packageOrTypeName\n com.hankcs "]
67826[label="packageOrTypeName\n com "]
17827[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.DictionaryBasedSegment; "]
27828[label="typeName\n com.hankcs.hanlp.seg.DictionaryBasedSegment "]
37829[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
47830[label="packageOrTypeName\n com.hankcs.hanlp "]
57831[label="packageOrTypeName\n com.hankcs "]
67832[label="packageOrTypeName\n com "]
17833[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.NShort.Path.AtomNode; "]
27834[label="typeName\n com.hankcs.hanlp.seg.NShort.Path.AtomNode "]
37835[label="packageOrTypeName\n com.hankcs.hanlp.seg.NShort.Path "]
47836[label="packageOrTypeName\n com.hankcs.hanlp.seg.NShort "]
57837[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
67838[label="packageOrTypeName\n com.hankcs.hanlp "]
77839[label="packageOrTypeName\n com.hankcs "]
87840[label="packageOrTypeName\n com "]
17841[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.Segment; "]
27842[label="typeName\n com.hankcs.hanlp.seg.Segment "]
37843[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
47844[label="packageOrTypeName\n com.hankcs.hanlp "]
57845[label="packageOrTypeName\n com.hankcs "]
67846[label="packageOrTypeName\n com "]
17847[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.common.Term; "]
27848[label="typeName\n com.hankcs.hanlp.seg.common.Term "]
37849[label="packageOrTypeName\n com.hankcs.hanlp.seg.common "]
47850[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
57851[label="packageOrTypeName\n com.hankcs.hanlp "]
67852[label="packageOrTypeName\n com.hankcs "]
77853[label="packageOrTypeName\n com "]
17854[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.TextUtility; "]
27855[label="typeName\n com.hankcs.hanlp.utility.TextUtility "]
37856[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
47857[label="packageOrTypeName\n com.hankcs.hanlp "]
57858[label="packageOrTypeName\n com.hankcs "]
67859[label="packageOrTypeName\n com "]
17860[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.utility.Predefine.logger; "]
27861[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
37862[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
47863[label="packageOrTypeName\n com.hankcs.hanlp "]
57864[label="packageOrTypeName\n com.hankcs "]
67865[label="packageOrTypeName\n com "]
17866[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
27867[label="typeName\n java.io.IOException "]
37868[label="packageOrTypeName\n java.io "]
47869[label="packageOrTypeName\n java "]
17870[label="typeImportOnDemandDeclaration\n importjava.util.*; "]
27871[label="packageOrTypeName\n java.util "]
37872[label="packageOrTypeName\n java "]
17873[label="normalClassDeclaration\n publicclassAhoCorasickDoubleArrayTrieSegmentextendsDictionaryBasedSegment{AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie;@OverrideprotectedList<Term>segSentence(char[]sentence){if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();}finalint[]wordNet=newint[sentence.length];Arrays.fill(wordNet,1);finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null;trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}});LinkedList<Term>termList=newLinkedList<Term>();if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}}for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];}returntermList;}publicAhoCorasickDoubleArrayTrieSegment(){super();config.useCustomDictionary=false;config.speechTagging=true;}publicAhoCorasickDoubleArrayTrieSegment(TreeMap<String,CoreDictionary.Attribute>dictionary){this();trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();trie.build(dictionary);setTrie(trie);}@OverridepublicSegmentenableCustomDictionary(booleanenable){thrownewUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\");}publicAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>getTrie(){returntrie;}publicvoidsetTrie(AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie){this.trie=trie;}publicAhoCorasickDoubleArrayTrieSegmentloadDictionary(String...pathArray){trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();TreeMap<String,CoreDictionary.Attribute>map=null;try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;}if(map!=null&&!map.isEmpty()){trie.build(map);}returnthis;}} "]
27874[label="classModifier\n public "]
27875[label="superclass\n extendsDictionaryBasedSegment "]
37876[label="classType\n DictionaryBasedSegment "]
27877[label="classBody\n {AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie;@OverrideprotectedList<Term>segSentence(char[]sentence){if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();}finalint[]wordNet=newint[sentence.length];Arrays.fill(wordNet,1);finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null;trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}});LinkedList<Term>termList=newLinkedList<Term>();if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}}for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];}returntermList;}publicAhoCorasickDoubleArrayTrieSegment(){super();config.useCustomDictionary=false;config.speechTagging=true;}publicAhoCorasickDoubleArrayTrieSegment(TreeMap<String,CoreDictionary.Attribute>dictionary){this();trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();trie.build(dictionary);setTrie(trie);}@OverridepublicSegmentenableCustomDictionary(booleanenable){thrownewUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\");}publicAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>getTrie(){returntrie;}publicvoidsetTrie(AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie){this.trie=trie;}publicAhoCorasickDoubleArrayTrieSegmentloadDictionary(String...pathArray){trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();TreeMap<String,CoreDictionary.Attribute>map=null;try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;}if(map!=null&&!map.isEmpty()){trie.build(map);}returnthis;}} "]
37878[label="fieldDeclaration\n AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie; "]
47879[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute> "]
57880[label="typeArguments\n <CoreDictionary.Attribute> "]
67881[label="classOrInterfaceType\n CoreDictionary.Attribute "]
77882[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
77883[label="classType_lf_classOrInterfaceType\n .Attribute "]
47884[label="variableDeclaratorId\n trie "]
37885[label="methodDeclaration\n @OverrideprotectedList<Term>segSentence(char[]sentence){if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();}finalint[]wordNet=newint[sentence.length];Arrays.fill(wordNet,1);finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null;trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}});LinkedList<Term>termList=newLinkedList<Term>();if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}}for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];}returntermList;} "]
47886[label="markerAnnotation\n @Override "]
57887[label="typeName\n Override "]
47888[label="methodModifier\n protected "]
47889[label="methodHeader\n List<Term>segSentence(char[]sentence) "]
57890[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Term> "]
67891[label="typeArguments\n <Term> "]
77892[label="classType_lfno_classOrInterfaceType\n Term "]
57893[label="methodDeclarator\n segSentence(char[]sentence) "]
67894[label="formalParameter\n char[]sentence "]
77895[label="unannArrayType\n char[] "]
87896[label="integralType\n char "]
87897[label="dims\n [] "]
77898[label="variableDeclaratorId\n sentence "]
47899[label="block\n {if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();}finalint[]wordNet=newint[sentence.length];Arrays.fill(wordNet,1);finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null;trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}});LinkedList<Term>termList=newLinkedList<Term>();if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}}for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];}returntermList;} "]
57900[label="blockStatements\n if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();}finalint[]wordNet=newint[sentence.length];Arrays.fill(wordNet,1);finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null;trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}});LinkedList<Term>termList=newLinkedList<Term>();if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}}for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];}returntermList; "]
67901[label="ifThenStatement\n if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();} "]
77902[label="equalityExpression\n trie==null "]
87903[label="expressionName\n trie "]
87904[label="literal\n null "]
77905[label="block\n {logger.warning(\"还未加载任何词典\");returnCollections.emptyList();} "]
87906[label="blockStatements\n logger.warning(\"还未加载任何词典\");returnCollections.emptyList(); "]
97907[label="expressionStatement\n logger.warning(\"还未加载任何词典\"); "]
107908[label="methodInvocation\n logger.warning(\"还未加载任何词典\") "]
117909[label="typeName\n logger "]
117910[label="literal\n \"还未加载任何词典\" "]
97911[label="returnStatement\n returnCollections.emptyList(); "]
107912[label="methodInvocation_lfno_primary\n Collections.emptyList() "]
117913[label="typeName\n Collections "]
67914[label="localVariableDeclarationStatement\n finalint[]wordNet=newint[sentence.length]; "]
77915[label="localVariableDeclaration\n finalint[]wordNet=newint[sentence.length] "]
87916[label="variableModifier\n final "]
87917[label="unannArrayType\n int[] "]
97918[label="integralType\n int "]
97919[label="dims\n [] "]
87920[label="variableDeclarator\n wordNet=newint[sentence.length] "]
97921[label="variableDeclaratorId\n wordNet "]
97922[label="arrayCreationExpression\n newint[sentence.length] "]
107923[label="integralType\n int "]
107924[label="dimExpr\n [sentence.length] "]
117925[label="expressionName\n sentence.length "]
127926[label="ambiguousName\n sentence "]
67927[label="expressionStatement\n Arrays.fill(wordNet,1); "]
77928[label="methodInvocation\n Arrays.fill(wordNet,1) "]
87929[label="typeName\n Arrays "]
87930[label="argumentList\n wordNet,1 "]
97931[label="expressionName\n wordNet "]
97932[label="literal\n 1 "]
67933[label="localVariableDeclarationStatement\n finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null; "]
77934[label="localVariableDeclaration\n finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null "]
87935[label="variableModifier\n final "]
87936[label="unannArrayType\n Nature[] "]
97937[label="unannClassType_lfno_unannClassOrInterfaceType\n Nature "]
97938[label="dims\n [] "]
87939[label="variableDeclarator\n natureArray=config.speechTagging?newNature[sentence.length]:null "]
97940[label="variableDeclaratorId\n natureArray "]
97941[label="conditionalExpression\n config.speechTagging?newNature[sentence.length]:null "]
107942[label="expressionName\n config.speechTagging "]
117943[label="ambiguousName\n config "]
107944[label="arrayCreationExpression\n newNature[sentence.length] "]
117945[label="classType_lfno_classOrInterfaceType\n Nature "]
117946[label="dimExpr\n [sentence.length] "]
127947[label="expressionName\n sentence.length "]
137948[label="ambiguousName\n sentence "]
107949[label="literal\n null "]
67950[label="expressionStatement\n trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}}); "]
77951[label="methodInvocation\n trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}}) "]
87952[label="typeName\n trie "]
87953[label="argumentList\n sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}} "]
97954[label="expressionName\n sentence "]
97955[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}} "]
107956[label="typeArguments\n <CoreDictionary.Attribute> "]
117957[label="classOrInterfaceType\n CoreDictionary.Attribute "]
127958[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
127959[label="classType_lf_classOrInterfaceType\n .Attribute "]
107960[label="classBody\n {@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}} "]
117961[label="methodDeclaration\n @Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}} "]
127962[label="markerAnnotation\n @Override "]
137963[label="typeName\n Override "]
127964[label="methodModifier\n public "]
127965[label="methodHeader\n voidhit(intbegin,intend,CoreDictionary.Attributevalue) "]
137966[label="result\n void "]
137967[label="methodDeclarator\n hit(intbegin,intend,CoreDictionary.Attributevalue) "]
147968[label="formalParameterList\n intbegin,intend,CoreDictionary.Attributevalue "]
157969[label="formalParameters\n intbegin,intend "]
167970[label="formalParameter\n intbegin "]
177971[label="integralType\n int "]
177972[label="variableDeclaratorId\n begin "]
167973[label="formalParameter\n intend "]
177974[label="integralType\n int "]
177975[label="variableDeclaratorId\n end "]
157976[label="formalParameter\n CoreDictionary.Attributevalue "]
167977[label="unannClassOrInterfaceType\n CoreDictionary.Attribute "]
177978[label="unannClassType_lfno_unannClassOrInterfaceType\n CoreDictionary "]
177979[label="unannClassType_lf_unannClassOrInterfaceType\n .Attribute "]
167980[label="variableDeclaratorId\n value "]
127981[label="block\n {intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}} "]
137982[label="blockStatements\n intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}} "]
147983[label="localVariableDeclarationStatement\n intlength=end-begin; "]
157984[label="localVariableDeclaration\n intlength=end-begin "]
167985[label="integralType\n int "]
167986[label="variableDeclarator\n length=end-begin "]
177987[label="variableDeclaratorId\n length "]
177988[label="additiveExpression\n end-begin "]
187989[label="expressionName\n end "]
187990[label="expressionName\n begin "]
147991[label="ifThenStatement\n if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}} "]
157992[label="relationalExpression\n length>wordNet[begin] "]
167993[label="expressionName\n length "]
167994[label="arrayAccess_lfno_primary\n wordNet[begin] "]
177995[label="expressionName\n wordNet "]
177996[label="expressionName\n begin "]
157997[label="block\n {wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}} "]
167998[label="blockStatements\n wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];} "]
177999[label="expressionStatement\n wordNet[begin]=length; "]
188000[label="assignment\n wordNet[begin]=length "]
198001[label="arrayAccess\n wordNet[begin] "]
208002[label="expressionName\n wordNet "]
208003[label="expressionName\n begin "]
198004[label="assignmentOperator\n = "]
198005[label="expressionName\n length "]
178006[label="ifThenStatement\n if(config.speechTagging){natureArray[begin]=value.nature[0];} "]
188007[label="expressionName\n config.speechTagging "]
198008[label="ambiguousName\n config "]
188009[label="block\n {natureArray[begin]=value.nature[0];} "]
198010[label="expressionStatement\n natureArray[begin]=value.nature[0]; "]
208011[label="assignment\n natureArray[begin]=value.nature[0] "]
218012[label="arrayAccess\n natureArray[begin] "]
228013[label="expressionName\n natureArray "]
228014[label="expressionName\n begin "]
218015[label="assignmentOperator\n = "]
218016[label="arrayAccess_lfno_primary\n value.nature[0] "]
228017[label="expressionName\n value.nature "]
238018[label="ambiguousName\n value "]
228019[label="literal\n 0 "]
68020[label="localVariableDeclarationStatement\n LinkedList<Term>termList=newLinkedList<Term>(); "]
78021[label="localVariableDeclaration\n LinkedList<Term>termList=newLinkedList<Term>() "]
88022[label="unannClassType_lfno_unannClassOrInterfaceType\n LinkedList<Term> "]
98023[label="typeArguments\n <Term> "]
108024[label="classType_lfno_classOrInterfaceType\n Term "]
88025[label="variableDeclarator\n termList=newLinkedList<Term>() "]
98026[label="variableDeclaratorId\n termList "]
98027[label="classInstanceCreationExpression_lfno_primary\n newLinkedList<Term>() "]
108028[label="typeArguments\n <Term> "]
118029[label="classType_lfno_classOrInterfaceType\n Term "]
68030[label="ifThenStatement\n if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}} "]
78031[label="expressionName\n config.speechTagging "]
88032[label="ambiguousName\n config "]
78033[label="block\n {for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}} "]
88034[label="basicForStatement\n for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}} "]
98035[label="localVariableDeclaration\n inti=0 "]
108036[label="integralType\n int "]
108037[label="variableDeclarator\n i=0 "]
118038[label="variableDeclaratorId\n i "]
118039[label="literal\n 0 "]
98040[label="relationalExpression\n i<natureArray.length "]
108041[label="expressionName\n i "]
108042[label="expressionName\n natureArray.length "]
118043[label="ambiguousName\n natureArray "]
98044[label="block\n {if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}} "]
108045[label="ifThenElseStatement\n if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;} "]
118046[label="equalityExpression\n natureArray[i]==null "]
128047[label="arrayAccess_lfno_primary\n natureArray[i] "]
138048[label="expressionName\n natureArray "]
138049[label="expressionName\n i "]
128050[label="literal\n null "]
118051[label="block\n {intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;} "]
128052[label="blockStatements\n intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j; "]
138053[label="localVariableDeclarationStatement\n intj=i+1; "]
148054[label="localVariableDeclaration\n intj=i+1 "]
158055[label="integralType\n int "]
158056[label="variableDeclarator\n j=i+1 "]
168057[label="variableDeclaratorId\n j "]
168058[label="additiveExpression\n i+1 "]
178059[label="expressionName\n i "]
178060[label="literal\n 1 "]
138061[label="basicForStatement\n for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;} "]
148062[label="relationalExpression\n j<natureArray.length "]
158063[label="expressionName\n j "]
158064[label="expressionName\n natureArray.length "]
168065[label="ambiguousName\n natureArray "]
148066[label="preIncrementExpression\n ++j "]
158067[label="expressionName\n j "]
148068[label="block\n {if(natureArray[j]!=null)break;} "]
158069[label="ifThenStatement\n if(natureArray[j]!=null)break; "]
168070[label="equalityExpression\n natureArray[j]!=null "]
178071[label="arrayAccess_lfno_primary\n natureArray[j] "]
188072[label="expressionName\n natureArray "]
188073[label="expressionName\n j "]
178074[label="literal\n null "]
168075[label="breakStatement\n break; "]
138076[label="localVariableDeclarationStatement\n List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j); "]
148077[label="localVariableDeclaration\n List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j) "]
158078[label="unannClassType_lfno_unannClassOrInterfaceType\n List<AtomNode> "]
168079[label="typeArguments\n <AtomNode> "]
178080[label="classType_lfno_classOrInterfaceType\n AtomNode "]
158081[label="variableDeclarator\n atomNodeList=quickAtomSegment(sentence,i,j) "]
168082[label="variableDeclaratorId\n atomNodeList "]
168083[label="methodInvocation_lfno_primary\n quickAtomSegment(sentence,i,j) "]
178084[label="methodName\n quickAtomSegment "]
178085[label="argumentList\n sentence,i,j "]
188086[label="expressionName\n sentence "]
188087[label="expressionName\n i "]
188088[label="expressionName\n j "]
138089[label="enhancedForStatement\n for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}} "]
148090[label="unannClassType_lfno_unannClassOrInterfaceType\n AtomNode "]
148091[label="variableDeclaratorId\n atomNode "]
148092[label="expressionName\n atomNodeList "]
148093[label="block\n {if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}} "]
158094[label="ifThenStatement\n if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];} "]
168095[label="relationalExpression\n atomNode.sWord.length()>=wordNet[i] "]
178096[label="methodInvocation_lfno_primary\n atomNode.sWord.length() "]
188097[label="typeName\n atomNode.sWord "]
198098[label="packageOrTypeName\n atomNode "]
178099[label="arrayAccess_lfno_primary\n wordNet[i] "]
188100[label="expressionName\n wordNet "]
188101[label="expressionName\n i "]
168102[label="block\n {wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];} "]
178103[label="blockStatements\n wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i]; "]
188104[label="expressionStatement\n wordNet[i]=atomNode.sWord.length(); "]
198105[label="assignment\n wordNet[i]=atomNode.sWord.length() "]
208106[label="arrayAccess\n wordNet[i] "]
218107[label="expressionName\n wordNet "]
218108[label="expressionName\n i "]
208109[label="assignmentOperator\n = "]
208110[label="methodInvocation_lfno_primary\n atomNode.sWord.length() "]
218111[label="typeName\n atomNode.sWord "]
228112[label="packageOrTypeName\n atomNode "]
188113[label="expressionStatement\n natureArray[i]=atomNode.getNature(); "]
198114[label="assignment\n natureArray[i]=atomNode.getNature() "]
208115[label="arrayAccess\n natureArray[i] "]
218116[label="expressionName\n natureArray "]
218117[label="expressionName\n i "]
208118[label="assignmentOperator\n = "]
208119[label="methodInvocation_lfno_primary\n atomNode.getNature() "]
218120[label="typeName\n atomNode "]
188121[label="expressionStatement\n i+=wordNet[i]; "]
198122[label="assignment\n i+=wordNet[i] "]
208123[label="expressionName\n i "]
208124[label="assignmentOperator\n += "]
208125[label="arrayAccess_lfno_primary\n wordNet[i] "]
218126[label="expressionName\n wordNet "]
218127[label="expressionName\n i "]
138128[label="expressionStatement\n i=j; "]
148129[label="assignment\n i=j "]
158130[label="expressionName\n i "]
158131[label="assignmentOperator\n = "]
158132[label="expressionName\n j "]
118133[label="block\n {++i;} "]
128134[label="expressionStatement\n ++i; "]
138135[label="preIncrementExpression\n ++i "]
148136[label="expressionName\n i "]
68137[label="basicForStatement\n for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];} "]
78138[label="localVariableDeclaration\n inti=0 "]
88139[label="integralType\n int "]
88140[label="variableDeclarator\n i=0 "]
98141[label="variableDeclaratorId\n i "]
98142[label="literal\n 0 "]
78143[label="relationalExpression\n i<wordNet.length "]
88144[label="expressionName\n i "]
88145[label="expressionName\n wordNet.length "]
98146[label="ambiguousName\n wordNet "]
78147[label="block\n {Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];} "]
88148[label="blockStatements\n Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i]; "]
98149[label="localVariableDeclarationStatement\n Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null); "]
108150[label="localVariableDeclaration\n Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null) "]
118151[label="unannClassType_lfno_unannClassOrInterfaceType\n Term "]
118152[label="variableDeclarator\n term=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null) "]
128153[label="variableDeclaratorId\n term "]
128154[label="classInstanceCreationExpression_lfno_primary\n newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null) "]
138155[label="argumentList\n newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null "]
148156[label="classInstanceCreationExpression_lfno_primary\n newString(sentence,i,wordNet[i]) "]
158157[label="argumentList\n sentence,i,wordNet[i] "]
168158[label="expressionName\n sentence "]
168159[label="expressionName\n i "]
168160[label="arrayAccess_lfno_primary\n wordNet[i] "]
178161[label="expressionName\n wordNet "]
178162[label="expressionName\n i "]
148163[label="conditionalExpression\n config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null "]
158164[label="expressionName\n config.speechTagging "]
168165[label="ambiguousName\n config "]
158166[label="primaryNoNewArray_lfno_primary\n (natureArray[i]==null?Nature.nz:natureArray[i]) "]
168167[label="conditionalExpression\n natureArray[i]==null?Nature.nz:natureArray[i] "]
178168[label="equalityExpression\n natureArray[i]==null "]
188169[label="arrayAccess_lfno_primary\n natureArray[i] "]
198170[label="expressionName\n natureArray "]
198171[label="expressionName\n i "]
188172[label="literal\n null "]
178173[label="expressionName\n Nature.nz "]
188174[label="ambiguousName\n Nature "]
178175[label="arrayAccess_lfno_primary\n natureArray[i] "]
188176[label="expressionName\n natureArray "]
188177[label="expressionName\n i "]
158178[label="literal\n null "]
98179[label="expressionStatement\n term.offset=i; "]
108180[label="assignment\n term.offset=i "]
118181[label="expressionName\n term.offset "]
128182[label="ambiguousName\n term "]
118183[label="assignmentOperator\n = "]
118184[label="expressionName\n i "]
98185[label="expressionStatement\n termList.add(term); "]
108186[label="methodInvocation\n termList.add(term) "]
118187[label="typeName\n termList "]
118188[label="expressionName\n term "]
98189[label="expressionStatement\n i+=wordNet[i]; "]
108190[label="assignment\n i+=wordNet[i] "]
118191[label="expressionName\n i "]
118192[label="assignmentOperator\n += "]
118193[label="arrayAccess_lfno_primary\n wordNet[i] "]
128194[label="expressionName\n wordNet "]
128195[label="expressionName\n i "]
68196[label="returnStatement\n returntermList; "]
78197[label="expressionName\n termList "]
38198[label="constructorDeclaration\n publicAhoCorasickDoubleArrayTrieSegment(){super();config.useCustomDictionary=false;config.speechTagging=true;} "]
48199[label="constructorModifier\n public "]
48200[label="constructorDeclarator\n AhoCorasickDoubleArrayTrieSegment() "]
58201[label="simpleTypeName\n AhoCorasickDoubleArrayTrieSegment "]
48202[label="constructorBody\n {super();config.useCustomDictionary=false;config.speechTagging=true;} "]
58203[label="explicitConstructorInvocation\n super(); "]
58204[label="blockStatements\n config.useCustomDictionary=false;config.speechTagging=true; "]
68205[label="expressionStatement\n config.useCustomDictionary=false; "]
78206[label="assignment\n config.useCustomDictionary=false "]
88207[label="expressionName\n config.useCustomDictionary "]
98208[label="ambiguousName\n config "]
88209[label="assignmentOperator\n = "]
88210[label="literal\n false "]
68211[label="expressionStatement\n config.speechTagging=true; "]
78212[label="assignment\n config.speechTagging=true "]
88213[label="expressionName\n config.speechTagging "]
98214[label="ambiguousName\n config "]
88215[label="assignmentOperator\n = "]
88216[label="literal\n true "]
38217[label="constructorDeclaration\n publicAhoCorasickDoubleArrayTrieSegment(TreeMap<String,CoreDictionary.Attribute>dictionary){this();trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();trie.build(dictionary);setTrie(trie);} "]
48218[label="constructorModifier\n public "]
48219[label="constructorDeclarator\n AhoCorasickDoubleArrayTrieSegment(TreeMap<String,CoreDictionary.Attribute>dictionary) "]
58220[label="simpleTypeName\n AhoCorasickDoubleArrayTrieSegment "]
58221[label="formalParameter\n TreeMap<String,CoreDictionary.Attribute>dictionary "]
68222[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,CoreDictionary.Attribute> "]
78223[label="typeArguments\n <String,CoreDictionary.Attribute> "]
88224[label="typeArgumentList\n String,CoreDictionary.Attribute "]
98225[label="classType_lfno_classOrInterfaceType\n String "]
98226[label="classOrInterfaceType\n CoreDictionary.Attribute "]
108227[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
108228[label="classType_lf_classOrInterfaceType\n .Attribute "]
68229[label="variableDeclaratorId\n dictionary "]
48230[label="constructorBody\n {this();trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();trie.build(dictionary);setTrie(trie);} "]
58231[label="explicitConstructorInvocation\n this(); "]
58232[label="blockStatements\n trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();trie.build(dictionary);setTrie(trie); "]
68233[label="expressionStatement\n trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>(); "]
78234[label="assignment\n trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>() "]
88235[label="expressionName\n trie "]
88236[label="assignmentOperator\n = "]
88237[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>() "]
98238[label="typeArguments\n <CoreDictionary.Attribute> "]
108239[label="classOrInterfaceType\n CoreDictionary.Attribute "]
118240[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
118241[label="classType_lf_classOrInterfaceType\n .Attribute "]
68242[label="expressionStatement\n trie.build(dictionary); "]
78243[label="methodInvocation\n trie.build(dictionary) "]
88244[label="typeName\n trie "]
88245[label="expressionName\n dictionary "]
68246[label="expressionStatement\n setTrie(trie); "]
78247[label="methodInvocation\n setTrie(trie) "]
88248[label="methodName\n setTrie "]
88249[label="expressionName\n trie "]
38250[label="methodDeclaration\n @OverridepublicSegmentenableCustomDictionary(booleanenable){thrownewUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\");} "]
48251[label="markerAnnotation\n @Override "]
58252[label="typeName\n Override "]
48253[label="methodModifier\n public "]
48254[label="methodHeader\n SegmentenableCustomDictionary(booleanenable) "]
58255[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
58256[label="methodDeclarator\n enableCustomDictionary(booleanenable) "]
68257[label="formalParameter\n booleanenable "]
78258[label="unannPrimitiveType\n boolean "]
78259[label="variableDeclaratorId\n enable "]
48260[label="block\n {thrownewUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\");} "]
58261[label="throwStatement\n thrownewUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\"); "]
68262[label="classInstanceCreationExpression_lfno_primary\n newUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\") "]
78263[label="literal\n \"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\" "]
38264[label="methodDeclaration\n publicAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>getTrie(){returntrie;} "]
48265[label="methodModifier\n public "]
48266[label="methodHeader\n AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>getTrie() "]
58267[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute> "]
68268[label="typeArguments\n <CoreDictionary.Attribute> "]
78269[label="classOrInterfaceType\n CoreDictionary.Attribute "]
88270[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
88271[label="classType_lf_classOrInterfaceType\n .Attribute "]
58272[label="methodDeclarator\n getTrie() "]
48273[label="block\n {returntrie;} "]
58274[label="returnStatement\n returntrie; "]
68275[label="expressionName\n trie "]
38276[label="methodDeclaration\n publicvoidsetTrie(AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie){this.trie=trie;} "]
48277[label="methodModifier\n public "]
48278[label="methodHeader\n voidsetTrie(AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie) "]
58279[label="result\n void "]
58280[label="methodDeclarator\n setTrie(AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie) "]
68281[label="formalParameter\n AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie "]
78282[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute> "]
88283[label="typeArguments\n <CoreDictionary.Attribute> "]
98284[label="classOrInterfaceType\n CoreDictionary.Attribute "]
108285[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
108286[label="classType_lf_classOrInterfaceType\n .Attribute "]
78287[label="variableDeclaratorId\n trie "]
48288[label="block\n {this.trie=trie;} "]
58289[label="expressionStatement\n this.trie=trie; "]
68290[label="assignment\n this.trie=trie "]
78291[label="fieldAccess\n this.trie "]
88292[label="primaryNoNewArray_lfno_primary\n this "]
78293[label="assignmentOperator\n = "]
78294[label="expressionName\n trie "]
38295[label="methodDeclaration\n publicAhoCorasickDoubleArrayTrieSegmentloadDictionary(String...pathArray){trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();TreeMap<String,CoreDictionary.Attribute>map=null;try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;}if(map!=null&&!map.isEmpty()){trie.build(map);}returnthis;} "]
48296[label="methodModifier\n public "]
48297[label="methodHeader\n AhoCorasickDoubleArrayTrieSegmentloadDictionary(String...pathArray) "]
58298[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrieSegment "]
58299[label="methodDeclarator\n loadDictionary(String...pathArray) "]
68300[label="lastFormalParameter\n String...pathArray "]
78301[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
78302[label="variableDeclaratorId\n pathArray "]
48303[label="block\n {trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();TreeMap<String,CoreDictionary.Attribute>map=null;try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;}if(map!=null&&!map.isEmpty()){trie.build(map);}returnthis;} "]
58304[label="blockStatements\n trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();TreeMap<String,CoreDictionary.Attribute>map=null;try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;}if(map!=null&&!map.isEmpty()){trie.build(map);}returnthis; "]
68305[label="expressionStatement\n trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>(); "]
78306[label="assignment\n trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>() "]
88307[label="expressionName\n trie "]
88308[label="assignmentOperator\n = "]
88309[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>() "]
98310[label="typeArguments\n <CoreDictionary.Attribute> "]
108311[label="classOrInterfaceType\n CoreDictionary.Attribute "]
118312[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
118313[label="classType_lf_classOrInterfaceType\n .Attribute "]
68314[label="localVariableDeclarationStatement\n TreeMap<String,CoreDictionary.Attribute>map=null; "]
78315[label="localVariableDeclaration\n TreeMap<String,CoreDictionary.Attribute>map=null "]
88316[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,CoreDictionary.Attribute> "]
98317[label="typeArguments\n <String,CoreDictionary.Attribute> "]
108318[label="typeArgumentList\n String,CoreDictionary.Attribute "]
118319[label="classType_lfno_classOrInterfaceType\n String "]
118320[label="classOrInterfaceType\n CoreDictionary.Attribute "]
128321[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
128322[label="classType_lf_classOrInterfaceType\n .Attribute "]
88323[label="variableDeclarator\n map=null "]
98324[label="variableDeclaratorId\n map "]
98325[label="literal\n null "]
68326[label="tryStatement\n try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;} "]
78327[label="block\n {map=IOUtil.loadDictionary(pathArray);} "]
88328[label="expressionStatement\n map=IOUtil.loadDictionary(pathArray); "]
98329[label="assignment\n map=IOUtil.loadDictionary(pathArray) "]
108330[label="expressionName\n map "]
108331[label="assignmentOperator\n = "]
108332[label="methodInvocation_lfno_primary\n IOUtil.loadDictionary(pathArray) "]
118333[label="typeName\n IOUtil "]
118334[label="expressionName\n pathArray "]
78335[label="catchClause\n catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;} "]
88336[label="catchFormalParameter\n IOExceptione "]
98337[label="unannClassType\n IOException "]
98338[label="variableDeclaratorId\n e "]
88339[label="block\n {logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;} "]
98340[label="blockStatements\n logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis; "]
108341[label="expressionStatement\n logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e)); "]
118342[label="methodInvocation\n logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e)) "]
128343[label="typeName\n logger "]
128344[label="additiveExpression\n \"加载词典失败\n\"+TextUtility.exceptionToString(e) "]
138345[label="literal\n \"加载词典失败\n\" "]
138346[label="methodInvocation_lfno_primary\n TextUtility.exceptionToString(e) "]
148347[label="typeName\n TextUtility "]
148348[label="expressionName\n e "]
108349[label="returnStatement\n returnthis; "]
118350[label="primaryNoNewArray_lfno_primary\n this "]
68351[label="ifThenStatement\n if(map!=null&&!map.isEmpty()){trie.build(map);} "]
78352[label="conditionalAndExpression\n map!=null&&!map.isEmpty() "]
88353[label="equalityExpression\n map!=null "]
98354[label="expressionName\n map "]
98355[label="literal\n null "]
88356[label="unaryExpressionNotPlusMinus\n !map.isEmpty() "]
98357[label="methodInvocation_lfno_primary\n map.isEmpty() "]
108358[label="typeName\n map "]
78359[label="block\n {trie.build(map);} "]
88360[label="expressionStatement\n trie.build(map); "]
98361[label="methodInvocation\n trie.build(map) "]
108362[label="typeName\n trie "]
108363[label="expressionName\n map "]
68364[label="returnStatement\n returnthis; "]
78365[label="primaryNoNewArray_lfno_primary\n this "]
08366[label="compilationUnit\n packagecom.hankcs.test.algorithm;importcom.hankcs.hanlp.algorithm.ahocorasick.trie.Emit;importcom.hankcs.hanlp.algorithm.ahocorasick.trie.Trie;importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie;importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie;importcom.hankcs.hanlp.corpus.io.IOUtil;importjunit.framework.TestCase;importjava.util.*;publicclassAhoCorasickDoubleArrayTrieTestextendsTestCase{publicvoidtestAC()throwsException{Trietrie=newTrie();trie.addKeyword(\"hers\");trie.addKeyword(\"his\");trie.addKeyword(\"she\");trie.addKeyword(\"he\");Collection<Emit>emits=trie.parseText(\"ushers\");System.out.println(emits);}publicvoidtestBuild()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}});}publicvoidtestDatFromFile()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));}}publicvoidtestDat()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);System.out.println(trie.exactMatchSearch(\"he\"));}publicvoidtestTwoStruct()throwsException{}publicvoidtestTwoAC()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);}}publicvoidtestSegment()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();longtimeMillis=System.currentTimeMillis();act.build(map);System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\");LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\");timeMillis=System.currentTimeMillis();for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}}System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis);}publicvoidtestHasKeyword()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));}assertTrue(trie.hasKeyword(\"ushers\"));assertFalse(trie.hasKeyword(\"构建耗时\"));}}<EOF> "]
18367[label="packageDeclaration\n packagecom.hankcs.test.algorithm; "]
28368[label="packageName\n com.hankcs.test.algorithm "]
38369[label="packageName\n com.hankcs.test "]
48370[label="packageName\n com.hankcs "]
58371[label="packageName\n com "]
18372[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.algorithm.ahocorasick.trie.Emit; "]
28373[label="typeName\n com.hankcs.hanlp.algorithm.ahocorasick.trie.Emit "]
38374[label="packageOrTypeName\n com.hankcs.hanlp.algorithm.ahocorasick.trie "]
48375[label="packageOrTypeName\n com.hankcs.hanlp.algorithm.ahocorasick "]
58376[label="packageOrTypeName\n com.hankcs.hanlp.algorithm "]
68377[label="packageOrTypeName\n com.hankcs.hanlp "]
78378[label="packageOrTypeName\n com.hankcs "]
88379[label="packageOrTypeName\n com "]
18380[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.algorithm.ahocorasick.trie.Trie; "]
28381[label="typeName\n com.hankcs.hanlp.algorithm.ahocorasick.trie.Trie "]
38382[label="packageOrTypeName\n com.hankcs.hanlp.algorithm.ahocorasick.trie "]
48383[label="packageOrTypeName\n com.hankcs.hanlp.algorithm.ahocorasick "]
58384[label="packageOrTypeName\n com.hankcs.hanlp.algorithm "]
68385[label="packageOrTypeName\n com.hankcs.hanlp "]
78386[label="packageOrTypeName\n com.hankcs "]
88387[label="packageOrTypeName\n com "]
18388[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie; "]
28389[label="typeName\n com.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie "]
38390[label="packageOrTypeName\n com.hankcs.hanlp.collection.AhoCorasick "]
48391[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
58392[label="packageOrTypeName\n com.hankcs.hanlp "]
68393[label="packageOrTypeName\n com.hankcs "]
78394[label="packageOrTypeName\n com "]
18395[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie; "]
28396[label="typeName\n com.hankcs.hanlp.collection.trie.DoubleArrayTrie "]
38397[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
48398[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
58399[label="packageOrTypeName\n com.hankcs.hanlp "]
68400[label="packageOrTypeName\n com.hankcs "]
78401[label="packageOrTypeName\n com "]
18402[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
28403[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
38404[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
48405[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
58406[label="packageOrTypeName\n com.hankcs.hanlp "]
68407[label="packageOrTypeName\n com.hankcs "]
78408[label="packageOrTypeName\n com "]
18409[label="singleTypeImportDeclaration\n importjunit.framework.TestCase; "]
28410[label="typeName\n junit.framework.TestCase "]
38411[label="packageOrTypeName\n junit.framework "]
48412[label="packageOrTypeName\n junit "]
18413[label="typeImportOnDemandDeclaration\n importjava.util.*; "]
28414[label="packageOrTypeName\n java.util "]
38415[label="packageOrTypeName\n java "]
18416[label="normalClassDeclaration\n publicclassAhoCorasickDoubleArrayTrieTestextendsTestCase{publicvoidtestAC()throwsException{Trietrie=newTrie();trie.addKeyword(\"hers\");trie.addKeyword(\"his\");trie.addKeyword(\"she\");trie.addKeyword(\"he\");Collection<Emit>emits=trie.parseText(\"ushers\");System.out.println(emits);}publicvoidtestBuild()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}});}publicvoidtestDatFromFile()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));}}publicvoidtestDat()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);System.out.println(trie.exactMatchSearch(\"he\"));}publicvoidtestTwoStruct()throwsException{}publicvoidtestTwoAC()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);}}publicvoidtestSegment()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();longtimeMillis=System.currentTimeMillis();act.build(map);System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\");LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\");timeMillis=System.currentTimeMillis();for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}}System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis);}publicvoidtestHasKeyword()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));}assertTrue(trie.hasKeyword(\"ushers\"));assertFalse(trie.hasKeyword(\"构建耗时\"));}} "]
28417[label="classModifier\n public "]
28418[label="superclass\n extendsTestCase "]
38419[label="classType\n TestCase "]
28420[label="classBody\n {publicvoidtestAC()throwsException{Trietrie=newTrie();trie.addKeyword(\"hers\");trie.addKeyword(\"his\");trie.addKeyword(\"she\");trie.addKeyword(\"he\");Collection<Emit>emits=trie.parseText(\"ushers\");System.out.println(emits);}publicvoidtestBuild()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}});}publicvoidtestDatFromFile()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));}}publicvoidtestDat()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);System.out.println(trie.exactMatchSearch(\"he\"));}publicvoidtestTwoStruct()throwsException{}publicvoidtestTwoAC()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);}}publicvoidtestSegment()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();longtimeMillis=System.currentTimeMillis();act.build(map);System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\");LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\");timeMillis=System.currentTimeMillis();for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}}System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis);}publicvoidtestHasKeyword()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));}assertTrue(trie.hasKeyword(\"ushers\"));assertFalse(trie.hasKeyword(\"构建耗时\"));}} "]
38421[label="methodDeclaration\n publicvoidtestAC()throwsException{Trietrie=newTrie();trie.addKeyword(\"hers\");trie.addKeyword(\"his\");trie.addKeyword(\"she\");trie.addKeyword(\"he\");Collection<Emit>emits=trie.parseText(\"ushers\");System.out.println(emits);} "]
48422[label="methodModifier\n public "]
48423[label="methodHeader\n voidtestAC()throwsException "]
58424[label="result\n void "]
58425[label="methodDeclarator\n testAC() "]
58426[label="throws_\n throwsException "]
68427[label="classType\n Exception "]
48428[label="block\n {Trietrie=newTrie();trie.addKeyword(\"hers\");trie.addKeyword(\"his\");trie.addKeyword(\"she\");trie.addKeyword(\"he\");Collection<Emit>emits=trie.parseText(\"ushers\");System.out.println(emits);} "]
58429[label="blockStatements\n Trietrie=newTrie();trie.addKeyword(\"hers\");trie.addKeyword(\"his\");trie.addKeyword(\"she\");trie.addKeyword(\"he\");Collection<Emit>emits=trie.parseText(\"ushers\");System.out.println(emits); "]
68430[label="localVariableDeclarationStatement\n Trietrie=newTrie(); "]
78431[label="localVariableDeclaration\n Trietrie=newTrie() "]
88432[label="unannClassType_lfno_unannClassOrInterfaceType\n Trie "]
88433[label="variableDeclarator\n trie=newTrie() "]
98434[label="variableDeclaratorId\n trie "]
98435[label="classInstanceCreationExpression_lfno_primary\n newTrie() "]
68436[label="expressionStatement\n trie.addKeyword(\"hers\"); "]
78437[label="methodInvocation\n trie.addKeyword(\"hers\") "]
88438[label="typeName\n trie "]
88439[label="literal\n \"hers\" "]
68440[label="expressionStatement\n trie.addKeyword(\"his\"); "]
78441[label="methodInvocation\n trie.addKeyword(\"his\") "]
88442[label="typeName\n trie "]
88443[label="literal\n \"his\" "]
68444[label="expressionStatement\n trie.addKeyword(\"she\"); "]
78445[label="methodInvocation\n trie.addKeyword(\"she\") "]
88446[label="typeName\n trie "]
88447[label="literal\n \"she\" "]
68448[label="expressionStatement\n trie.addKeyword(\"he\"); "]
78449[label="methodInvocation\n trie.addKeyword(\"he\") "]
88450[label="typeName\n trie "]
88451[label="literal\n \"he\" "]
68452[label="localVariableDeclarationStatement\n Collection<Emit>emits=trie.parseText(\"ushers\"); "]
78453[label="localVariableDeclaration\n Collection<Emit>emits=trie.parseText(\"ushers\") "]
88454[label="unannClassType_lfno_unannClassOrInterfaceType\n Collection<Emit> "]
98455[label="typeArguments\n <Emit> "]
108456[label="classType_lfno_classOrInterfaceType\n Emit "]
88457[label="variableDeclarator\n emits=trie.parseText(\"ushers\") "]
98458[label="variableDeclaratorId\n emits "]
98459[label="methodInvocation_lfno_primary\n trie.parseText(\"ushers\") "]
108460[label="typeName\n trie "]
108461[label="literal\n \"ushers\" "]
68462[label="expressionStatement\n System.out.println(emits); "]
78463[label="methodInvocation\n System.out.println(emits) "]
88464[label="typeName\n System.out "]
98465[label="packageOrTypeName\n System "]
88466[label="expressionName\n emits "]
38467[label="methodDeclaration\n publicvoidtestBuild()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}});} "]
48468[label="methodModifier\n public "]
48469[label="methodHeader\n voidtestBuild()throwsException "]
58470[label="result\n void "]
58471[label="methodDeclarator\n testBuild() "]
58472[label="throws_\n throwsException "]
68473[label="classType\n Exception "]
48474[label="block\n {TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}});} "]
58475[label="blockStatements\n TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}}); "]
68476[label="localVariableDeclarationStatement\n TreeMap<String,String>map=newTreeMap<String,String>(); "]
78477[label="localVariableDeclaration\n TreeMap<String,String>map=newTreeMap<String,String>() "]
88478[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
98479[label="typeArguments\n <String,String> "]
108480[label="typeArgumentList\n String,String "]
118481[label="classType_lfno_classOrInterfaceType\n String "]
118482[label="classType_lfno_classOrInterfaceType\n String "]
88483[label="variableDeclarator\n map=newTreeMap<String,String>() "]
98484[label="variableDeclaratorId\n map "]
98485[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
108486[label="typeArguments\n <String,String> "]
118487[label="typeArgumentList\n String,String "]
128488[label="classType_lfno_classOrInterfaceType\n String "]
128489[label="classType_lfno_classOrInterfaceType\n String "]
68490[label="localVariableDeclarationStatement\n String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"}; "]
78491[label="localVariableDeclaration\n String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
88492[label="unannArrayType\n String[] "]
98493[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
98494[label="dims\n [] "]
88495[label="variableDeclarator\n keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
98496[label="variableDeclaratorId\n keyArray "]
98497[label="arrayCreationExpression\n newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
108498[label="classType_lfno_classOrInterfaceType\n String "]
108499[label="dims\n [] "]
108500[label="arrayInitializer\n {\"hers\",\"his\",\"she\",\"he\"} "]
118501[label="variableInitializerList\n \"hers\",\"his\",\"she\",\"he\" "]
128502[label="literal\n \"hers\" "]
128503[label="literal\n \"his\" "]
128504[label="literal\n \"she\" "]
128505[label="literal\n \"he\" "]
68506[label="enhancedForStatement\n for(Stringkey:keyArray){map.put(key,key);} "]
78507[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
78508[label="variableDeclaratorId\n key "]
78509[label="expressionName\n keyArray "]
78510[label="block\n {map.put(key,key);} "]
88511[label="expressionStatement\n map.put(key,key); "]
98512[label="methodInvocation\n map.put(key,key) "]
108513[label="typeName\n map "]
108514[label="argumentList\n key,key "]
118515[label="expressionName\n key "]
118516[label="expressionName\n key "]
68517[label="localVariableDeclarationStatement\n AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>(); "]
78518[label="localVariableDeclaration\n AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>() "]
88519[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
98520[label="typeArguments\n <String> "]
108521[label="classType_lfno_classOrInterfaceType\n String "]
88522[label="variableDeclarator\n act=newAhoCorasickDoubleArrayTrie<String>() "]
98523[label="variableDeclaratorId\n act "]
98524[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie<String>() "]
108525[label="typeArguments\n <String> "]
118526[label="classType_lfno_classOrInterfaceType\n String "]
68527[label="expressionStatement\n act.build(map); "]
78528[label="methodInvocation\n act.build(map) "]
88529[label="typeName\n act "]
88530[label="expressionName\n map "]
68531[label="expressionStatement\n act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}}); "]
78532[label="methodInvocation\n act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}}) "]
88533[label="typeName\n act "]
88534[label="argumentList\n \"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}} "]
98535[label="literal\n \"uhers\" "]
98536[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}} "]
108537[label="typeArguments\n <String> "]
118538[label="classType_lfno_classOrInterfaceType\n String "]
108539[label="classBody\n {@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}} "]
118540[label="methodDeclaration\n @Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);} "]
128541[label="markerAnnotation\n @Override "]
138542[label="typeName\n Override "]
128543[label="methodModifier\n public "]
128544[label="methodHeader\n voidhit(intbegin,intend,Stringvalue) "]
138545[label="result\n void "]
138546[label="methodDeclarator\n hit(intbegin,intend,Stringvalue) "]
148547[label="formalParameterList\n intbegin,intend,Stringvalue "]
158548[label="formalParameters\n intbegin,intend "]
168549[label="formalParameter\n intbegin "]
178550[label="integralType\n int "]
178551[label="variableDeclaratorId\n begin "]
168552[label="formalParameter\n intend "]
178553[label="integralType\n int "]
178554[label="variableDeclaratorId\n end "]
158555[label="formalParameter\n Stringvalue "]
168556[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
168557[label="variableDeclaratorId\n value "]
128558[label="block\n {System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);} "]
138559[label="expressionStatement\n System.out.printf(\"[%d:%d]=%s\n\",begin,end,value); "]
148560[label="methodInvocation\n System.out.printf(\"[%d:%d]=%s\n\",begin,end,value) "]
158561[label="typeName\n System.out "]
168562[label="packageOrTypeName\n System "]
158563[label="argumentList\n \"[%d:%d]=%s\n\",begin,end,value "]
168564[label="literal\n \"[%d:%d]=%s\n\" "]
168565[label="expressionName\n begin "]
168566[label="expressionName\n end "]
168567[label="expressionName\n value "]
38568[label="methodDeclaration\n publicvoidtestDatFromFile()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));}} "]
48569[label="methodModifier\n public "]
48570[label="methodHeader\n voidtestDatFromFile()throwsException "]
58571[label="result\n void "]
58572[label="methodDeclarator\n testDatFromFile() "]
58573[label="throws_\n throwsException "]
68574[label="classType\n Exception "]
48575[label="block\n {TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));}} "]
58576[label="blockStatements\n TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));} "]
68577[label="localVariableDeclarationStatement\n TreeMap<String,String>map=newTreeMap<String,String>(); "]
78578[label="localVariableDeclaration\n TreeMap<String,String>map=newTreeMap<String,String>() "]
88579[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
98580[label="typeArguments\n <String,String> "]
108581[label="typeArgumentList\n String,String "]
118582[label="classType_lfno_classOrInterfaceType\n String "]
118583[label="classType_lfno_classOrInterfaceType\n String "]
88584[label="variableDeclarator\n map=newTreeMap<String,String>() "]
98585[label="variableDeclaratorId\n map "]
98586[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
108587[label="typeArguments\n <String,String> "]
118588[label="typeArgumentList\n String,String "]
128589[label="classType_lfno_classOrInterfaceType\n String "]
128590[label="classType_lfno_classOrInterfaceType\n String "]
68591[label="localVariableDeclarationStatement\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\"); "]
78592[label="localVariableDeclaration\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\") "]
88593[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
98594[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
98595[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
88596[label="variableDeclarator\n iterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\") "]
98597[label="variableDeclaratorId\n iterator "]
98598[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\") "]
108599[label="literal\n \"data/dictionary/CoreNatureDictionary.mini.txt\" "]
68600[label="whileStatement\n while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);} "]
78601[label="methodInvocation_lfno_primary\n iterator.hasNext() "]
88602[label="typeName\n iterator "]
78603[label="block\n {Stringline=iterator.next();map.put(line,line);} "]
88604[label="blockStatements\n Stringline=iterator.next();map.put(line,line); "]
98605[label="localVariableDeclarationStatement\n Stringline=iterator.next(); "]
108606[label="localVariableDeclaration\n Stringline=iterator.next() "]
118607[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
118608[label="variableDeclarator\n line=iterator.next() "]
128609[label="variableDeclaratorId\n line "]
128610[label="methodInvocation_lfno_primary\n iterator.next() "]
138611[label="typeName\n iterator "]
98612[label="expressionStatement\n map.put(line,line); "]
108613[label="methodInvocation\n map.put(line,line) "]
118614[label="typeName\n map "]
118615[label="argumentList\n line,line "]
128616[label="expressionName\n line "]
128617[label="expressionName\n line "]
68618[label="localVariableDeclarationStatement\n DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>(); "]
78619[label="localVariableDeclaration\n DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>() "]
88620[label="unannClassType_lfno_unannClassOrInterfaceType\n DoubleArrayTrie<String> "]
98621[label="typeArguments\n <String> "]
108622[label="classType_lfno_classOrInterfaceType\n String "]
88623[label="variableDeclarator\n trie=newDoubleArrayTrie<String>() "]
98624[label="variableDeclaratorId\n trie "]
98625[label="classInstanceCreationExpression_lfno_primary\n newDoubleArrayTrie<String>() "]
108626[label="typeArguments\n <String> "]
118627[label="classType_lfno_classOrInterfaceType\n String "]
68628[label="expressionStatement\n trie.build(map); "]
78629[label="methodInvocation\n trie.build(map) "]
88630[label="typeName\n trie "]
88631[label="expressionName\n map "]
68632[label="enhancedForStatement\n for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));} "]
78633[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
78634[label="variableDeclaratorId\n key "]
78635[label="methodInvocation_lfno_primary\n map.keySet() "]
88636[label="typeName\n map "]
78637[label="block\n {assertEquals(key,trie.get(key));} "]
88638[label="expressionStatement\n assertEquals(key,trie.get(key)); "]
98639[label="methodInvocation\n assertEquals(key,trie.get(key)) "]
108640[label="methodName\n assertEquals "]
108641[label="argumentList\n key,trie.get(key) "]
118642[label="expressionName\n key "]
118643[label="methodInvocation_lfno_primary\n trie.get(key) "]
128644[label="typeName\n trie "]
128645[label="expressionName\n key "]
38646[label="methodDeclaration\n publicvoidtestDat()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);System.out.println(trie.exactMatchSearch(\"he\"));} "]
48647[label="methodModifier\n public "]
48648[label="methodHeader\n voidtestDat()throwsException "]
58649[label="result\n void "]
58650[label="methodDeclarator\n testDat() "]
58651[label="throws_\n throwsException "]
68652[label="classType\n Exception "]
48653[label="block\n {TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);System.out.println(trie.exactMatchSearch(\"he\"));} "]
58654[label="blockStatements\n TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);System.out.println(trie.exactMatchSearch(\"he\")); "]
68655[label="localVariableDeclarationStatement\n TreeMap<String,String>map=newTreeMap<String,String>(); "]
78656[label="localVariableDeclaration\n TreeMap<String,String>map=newTreeMap<String,String>() "]
88657[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
98658[label="typeArguments\n <String,String> "]
108659[label="typeArgumentList\n String,String "]
118660[label="classType_lfno_classOrInterfaceType\n String "]
118661[label="classType_lfno_classOrInterfaceType\n String "]
88662[label="variableDeclarator\n map=newTreeMap<String,String>() "]
98663[label="variableDeclaratorId\n map "]
98664[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
108665[label="typeArguments\n <String,String> "]
118666[label="typeArgumentList\n String,String "]
128667[label="classType_lfno_classOrInterfaceType\n String "]
128668[label="classType_lfno_classOrInterfaceType\n String "]
68669[label="localVariableDeclarationStatement\n String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"}; "]
78670[label="localVariableDeclaration\n String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
88671[label="unannArrayType\n String[] "]
98672[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
98673[label="dims\n [] "]
88674[label="variableDeclarator\n keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
98675[label="variableDeclaratorId\n keyArray "]
98676[label="arrayCreationExpression\n newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
108677[label="classType_lfno_classOrInterfaceType\n String "]
108678[label="dims\n [] "]
108679[label="arrayInitializer\n {\"hers\",\"his\",\"she\",\"he\"} "]
118680[label="variableInitializerList\n \"hers\",\"his\",\"she\",\"he\" "]
128681[label="literal\n \"hers\" "]
128682[label="literal\n \"his\" "]
128683[label="literal\n \"she\" "]
128684[label="literal\n \"he\" "]
68685[label="enhancedForStatement\n for(Stringkey:keyArray){map.put(key,key);} "]
78686[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
78687[label="variableDeclaratorId\n key "]
78688[label="expressionName\n keyArray "]
78689[label="block\n {map.put(key,key);} "]
88690[label="expressionStatement\n map.put(key,key); "]
98691[label="methodInvocation\n map.put(key,key) "]
108692[label="typeName\n map "]
108693[label="argumentList\n key,key "]
118694[label="expressionName\n key "]
118695[label="expressionName\n key "]
68696[label="localVariableDeclarationStatement\n DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>(); "]
78697[label="localVariableDeclaration\n DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>() "]
88698[label="unannClassType_lfno_unannClassOrInterfaceType\n DoubleArrayTrie<String> "]
98699[label="typeArguments\n <String> "]
108700[label="classType_lfno_classOrInterfaceType\n String "]
88701[label="variableDeclarator\n trie=newDoubleArrayTrie<String>() "]
98702[label="variableDeclaratorId\n trie "]
98703[label="classInstanceCreationExpression_lfno_primary\n newDoubleArrayTrie<String>() "]
108704[label="typeArguments\n <String> "]
118705[label="classType_lfno_classOrInterfaceType\n String "]
68706[label="expressionStatement\n trie.build(map); "]
78707[label="methodInvocation\n trie.build(map) "]
88708[label="typeName\n trie "]
88709[label="expressionName\n map "]
68710[label="expressionStatement\n System.out.println(trie.exactMatchSearch(\"he\")); "]
78711[label="methodInvocation\n System.out.println(trie.exactMatchSearch(\"he\")) "]
88712[label="typeName\n System.out "]
98713[label="packageOrTypeName\n System "]
88714[label="methodInvocation_lfno_primary\n trie.exactMatchSearch(\"he\") "]
98715[label="typeName\n trie "]
98716[label="literal\n \"he\" "]
38717[label="methodDeclaration\n publicvoidtestTwoStruct()throwsException{} "]
48718[label="methodModifier\n public "]
48719[label="methodHeader\n voidtestTwoStruct()throwsException "]
58720[label="result\n void "]
58721[label="methodDeclarator\n testTwoStruct() "]
58722[label="throws_\n throwsException "]
68723[label="classType\n Exception "]
48724[label="block\n {} "]
38725[label="methodDeclaration\n publicvoidtestTwoAC()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);}} "]
48726[label="methodModifier\n public "]
48727[label="methodHeader\n voidtestTwoAC()throwsException "]
58728[label="result\n void "]
58729[label="methodDeclarator\n testTwoAC() "]
58730[label="throws_\n throwsException "]
68731[label="classType\n Exception "]
48732[label="block\n {TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);}} "]
58733[label="blockStatements\n TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);} "]
68734[label="localVariableDeclarationStatement\n TreeMap<String,String>map=newTreeMap<String,String>(); "]
78735[label="localVariableDeclaration\n TreeMap<String,String>map=newTreeMap<String,String>() "]
88736[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
98737[label="typeArguments\n <String,String> "]
108738[label="typeArgumentList\n String,String "]
118739[label="classType_lfno_classOrInterfaceType\n String "]
118740[label="classType_lfno_classOrInterfaceType\n String "]
88741[label="variableDeclarator\n map=newTreeMap<String,String>() "]
98742[label="variableDeclaratorId\n map "]
98743[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
108744[label="typeArguments\n <String,String> "]
118745[label="typeArgumentList\n String,String "]
128746[label="classType_lfno_classOrInterfaceType\n String "]
128747[label="classType_lfno_classOrInterfaceType\n String "]
68748[label="localVariableDeclarationStatement\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\"); "]
78749[label="localVariableDeclaration\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\") "]
88750[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
98751[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
98752[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
88753[label="variableDeclarator\n iterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\") "]
98754[label="variableDeclaratorId\n iterator "]
98755[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\") "]
108756[label="literal\n \"data/dictionary/CoreNatureDictionary.mini.txt\" "]
68757[label="whileStatement\n while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);} "]
78758[label="methodInvocation_lfno_primary\n iterator.hasNext() "]
88759[label="typeName\n iterator "]
78760[label="block\n {Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);} "]
88761[label="blockStatements\n Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line); "]
98762[label="localVariableDeclarationStatement\n Stringline=iterator.next().split(\"\\s\")[0]; "]
108763[label="localVariableDeclaration\n Stringline=iterator.next().split(\"\\s\")[0] "]
118764[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
118765[label="variableDeclarator\n line=iterator.next().split(\"\\s\")[0] "]
128766[label="variableDeclaratorId\n line "]
128767[label="primary\n iterator.next().split(\"\\s\")[0] "]
138768[label="methodInvocation_lfno_primary\n iterator.next() "]
148769[label="typeName\n iterator "]
138770[label="arrayAccess_lf_primary\n .split(\"\\s\")[0] "]
148771[label="methodInvocation_lf_primary\n .split(\"\\s\") "]
158772[label="literal\n \"\\s\" "]
148773[label="literal\n 0 "]
98774[label="expressionStatement\n map.put(line,line); "]
108775[label="methodInvocation\n map.put(line,line) "]
118776[label="typeName\n map "]
118777[label="argumentList\n line,line "]
128778[label="expressionName\n line "]
128779[label="expressionName\n line "]
68780[label="localVariableDeclarationStatement\n Trietrie=newTrie(); "]
78781[label="localVariableDeclaration\n Trietrie=newTrie() "]
88782[label="unannClassType_lfno_unannClassOrInterfaceType\n Trie "]
88783[label="variableDeclarator\n trie=newTrie() "]
98784[label="variableDeclaratorId\n trie "]
98785[label="classInstanceCreationExpression_lfno_primary\n newTrie() "]
68786[label="expressionStatement\n trie.addAllKeyword(map.keySet()); "]
78787[label="methodInvocation\n trie.addAllKeyword(map.keySet()) "]
88788[label="typeName\n trie "]
88789[label="methodInvocation_lfno_primary\n map.keySet() "]
98790[label="typeName\n map "]
68791[label="localVariableDeclarationStatement\n AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>(); "]
78792[label="localVariableDeclaration\n AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>() "]
88793[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
98794[label="typeArguments\n <String> "]
108795[label="classType_lfno_classOrInterfaceType\n String "]
88796[label="variableDeclarator\n act=newAhoCorasickDoubleArrayTrie<String>() "]
98797[label="variableDeclaratorId\n act "]
98798[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie<String>() "]
108799[label="typeArguments\n <String> "]
118800[label="classType_lfno_classOrInterfaceType\n String "]
68801[label="expressionStatement\n act.build(map); "]
78802[label="methodInvocation\n act.build(map) "]
88803[label="typeName\n act "]
88804[label="expressionName\n map "]
68805[label="enhancedForStatement\n for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);} "]
78806[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
78807[label="variableDeclaratorId\n key "]
78808[label="methodInvocation_lfno_primary\n map.keySet() "]
88809[label="typeName\n map "]
78810[label="block\n {Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);} "]
88811[label="blockStatements\n Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet); "]
98812[label="localVariableDeclarationStatement\n Collection<Emit>emits=trie.parseText(key); "]
108813[label="localVariableDeclaration\n Collection<Emit>emits=trie.parseText(key) "]
118814[label="unannClassType_lfno_unannClassOrInterfaceType\n Collection<Emit> "]
128815[label="typeArguments\n <Emit> "]
138816[label="classType_lfno_classOrInterfaceType\n Emit "]
118817[label="variableDeclarator\n emits=trie.parseText(key) "]
128818[label="variableDeclaratorId\n emits "]
128819[label="methodInvocation_lfno_primary\n trie.parseText(key) "]
138820[label="typeName\n trie "]
138821[label="expressionName\n key "]
98822[label="localVariableDeclarationStatement\n Set<String>otherSet=newHashSet<String>(); "]
108823[label="localVariableDeclaration\n Set<String>otherSet=newHashSet<String>() "]
118824[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
128825[label="typeArguments\n <String> "]
138826[label="classType_lfno_classOrInterfaceType\n String "]
118827[label="variableDeclarator\n otherSet=newHashSet<String>() "]
128828[label="variableDeclaratorId\n otherSet "]
128829[label="classInstanceCreationExpression_lfno_primary\n newHashSet<String>() "]
138830[label="typeArguments\n <String> "]
148831[label="classType_lfno_classOrInterfaceType\n String "]
98832[label="enhancedForStatement\n for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());} "]
108833[label="unannClassType_lfno_unannClassOrInterfaceType\n Emit "]
108834[label="variableDeclaratorId\n emit "]
108835[label="expressionName\n emits "]
108836[label="block\n {otherSet.add(emit.getKeyword()+emit.getEnd());} "]
118837[label="expressionStatement\n otherSet.add(emit.getKeyword()+emit.getEnd()); "]
128838[label="methodInvocation\n otherSet.add(emit.getKeyword()+emit.getEnd()) "]
138839[label="typeName\n otherSet "]
138840[label="additiveExpression\n emit.getKeyword()+emit.getEnd() "]
148841[label="methodInvocation_lfno_primary\n emit.getKeyword() "]
158842[label="typeName\n emit "]
148843[label="methodInvocation_lfno_primary\n emit.getEnd() "]
158844[label="typeName\n emit "]
98845[label="localVariableDeclarationStatement\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key); "]
108846[label="localVariableDeclaration\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key) "]
118847[label="unannClassType_lfno_unannClassOrInterfaceType\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>> "]
128848[label="typeArguments\n <AhoCorasickDoubleArrayTrie<String>.Hit<String>> "]
138849[label="classOrInterfaceType\n AhoCorasickDoubleArrayTrie<String>.Hit<String> "]
148850[label="classType_lfno_classOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
158851[label="typeArguments\n <String> "]
168852[label="classType_lfno_classOrInterfaceType\n String "]
148853[label="classType_lf_classOrInterfaceType\n .Hit<String> "]
158854[label="typeArguments\n <String> "]
168855[label="classType_lfno_classOrInterfaceType\n String "]
118856[label="variableDeclarator\n entries=act.parseText(key) "]
128857[label="variableDeclaratorId\n entries "]
128858[label="methodInvocation_lfno_primary\n act.parseText(key) "]
138859[label="typeName\n act "]
138860[label="expressionName\n key "]
98861[label="localVariableDeclarationStatement\n Set<String>mySet=newHashSet<String>(); "]
108862[label="localVariableDeclaration\n Set<String>mySet=newHashSet<String>() "]
118863[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
128864[label="typeArguments\n <String> "]
138865[label="classType_lfno_classOrInterfaceType\n String "]
118866[label="variableDeclarator\n mySet=newHashSet<String>() "]
128867[label="variableDeclaratorId\n mySet "]
128868[label="classInstanceCreationExpression_lfno_primary\n newHashSet<String>() "]
138869[label="typeArguments\n <String> "]
148870[label="classType_lfno_classOrInterfaceType\n String "]
98871[label="enhancedForStatement\n for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));} "]
108872[label="unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String>.Hit<String> "]
118873[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
128874[label="typeArguments\n <String> "]
138875[label="classType_lfno_classOrInterfaceType\n String "]
118876[label="unannClassType_lf_unannClassOrInterfaceType\n .Hit<String> "]
128877[label="typeArguments\n <String> "]
138878[label="classType_lfno_classOrInterfaceType\n String "]
108879[label="variableDeclaratorId\n entry "]
108880[label="expressionName\n entries "]
108881[label="block\n {mySet.add(entry.value+(entry.end-1));} "]
118882[label="expressionStatement\n mySet.add(entry.value+(entry.end-1)); "]
128883[label="methodInvocation\n mySet.add(entry.value+(entry.end-1)) "]
138884[label="typeName\n mySet "]
138885[label="additiveExpression\n entry.value+(entry.end-1) "]
148886[label="expressionName\n entry.value "]
158887[label="ambiguousName\n entry "]
148888[label="primaryNoNewArray_lfno_primary\n (entry.end-1) "]
158889[label="additiveExpression\n entry.end-1 "]
168890[label="expressionName\n entry.end "]
178891[label="ambiguousName\n entry "]
168892[label="literal\n 1 "]
98893[label="expressionStatement\n assertEquals(otherSet,mySet); "]
108894[label="methodInvocation\n assertEquals(otherSet,mySet) "]
118895[label="methodName\n assertEquals "]
118896[label="argumentList\n otherSet,mySet "]
128897[label="expressionName\n otherSet "]
128898[label="expressionName\n mySet "]
38899[label="methodDeclaration\n publicvoidtestSegment()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();longtimeMillis=System.currentTimeMillis();act.build(map);System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\");LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\");timeMillis=System.currentTimeMillis();for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}}System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis);} "]
48900[label="methodModifier\n public "]
48901[label="methodHeader\n voidtestSegment()throwsException "]
58902[label="result\n void "]
58903[label="methodDeclarator\n testSegment() "]
58904[label="throws_\n throwsException "]
68905[label="classType\n Exception "]
48906[label="block\n {TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();longtimeMillis=System.currentTimeMillis();act.build(map);System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\");LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\");timeMillis=System.currentTimeMillis();for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}}System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis);} "]
58907[label="blockStatements\n TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();longtimeMillis=System.currentTimeMillis();act.build(map);System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\");LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\");timeMillis=System.currentTimeMillis();for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}}System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis); "]
68908[label="localVariableDeclarationStatement\n TreeMap<String,String>map=newTreeMap<String,String>(); "]
78909[label="localVariableDeclaration\n TreeMap<String,String>map=newTreeMap<String,String>() "]
88910[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
98911[label="typeArguments\n <String,String> "]
108912[label="typeArgumentList\n String,String "]
118913[label="classType_lfno_classOrInterfaceType\n String "]
118914[label="classType_lfno_classOrInterfaceType\n String "]
88915[label="variableDeclarator\n map=newTreeMap<String,String>() "]
98916[label="variableDeclaratorId\n map "]
98917[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
108918[label="typeArguments\n <String,String> "]
118919[label="typeArgumentList\n String,String "]
128920[label="classType_lfno_classOrInterfaceType\n String "]
128921[label="classType_lfno_classOrInterfaceType\n String "]
68922[label="localVariableDeclarationStatement\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\"); "]
78923[label="localVariableDeclaration\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\") "]
88924[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
98925[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
98926[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
88927[label="variableDeclarator\n iterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\") "]
98928[label="variableDeclaratorId\n iterator "]
98929[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\") "]
108930[label="literal\n \"data/dictionary/CoreNatureDictionary.txt\" "]
68931[label="whileStatement\n while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);} "]
78932[label="methodInvocation_lfno_primary\n iterator.hasNext() "]
88933[label="typeName\n iterator "]
78934[label="block\n {Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);} "]
88935[label="blockStatements\n Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line); "]
98936[label="localVariableDeclarationStatement\n Stringline=iterator.next().split(\"\\s\")[0]; "]
108937[label="localVariableDeclaration\n Stringline=iterator.next().split(\"\\s\")[0] "]
118938[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
118939[label="variableDeclarator\n line=iterator.next().split(\"\\s\")[0] "]
128940[label="variableDeclaratorId\n line "]
128941[label="primary\n iterator.next().split(\"\\s\")[0] "]
138942[label="methodInvocation_lfno_primary\n iterator.next() "]
148943[label="typeName\n iterator "]
138944[label="arrayAccess_lf_primary\n .split(\"\\s\")[0] "]
148945[label="methodInvocation_lf_primary\n .split(\"\\s\") "]
158946[label="literal\n \"\\s\" "]
148947[label="literal\n 0 "]
98948[label="expressionStatement\n map.put(line,line); "]
108949[label="methodInvocation\n map.put(line,line) "]
118950[label="typeName\n map "]
118951[label="argumentList\n line,line "]
128952[label="expressionName\n line "]
128953[label="expressionName\n line "]
68954[label="localVariableDeclarationStatement\n Trietrie=newTrie(); "]
78955[label="localVariableDeclaration\n Trietrie=newTrie() "]
88956[label="unannClassType_lfno_unannClassOrInterfaceType\n Trie "]
88957[label="variableDeclarator\n trie=newTrie() "]
98958[label="variableDeclaratorId\n trie "]
98959[label="classInstanceCreationExpression_lfno_primary\n newTrie() "]
68960[label="expressionStatement\n trie.addAllKeyword(map.keySet()); "]
78961[label="methodInvocation\n trie.addAllKeyword(map.keySet()) "]
88962[label="typeName\n trie "]
88963[label="methodInvocation_lfno_primary\n map.keySet() "]
98964[label="typeName\n map "]
68965[label="localVariableDeclarationStatement\n AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>(); "]
78966[label="localVariableDeclaration\n AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>() "]
88967[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
98968[label="typeArguments\n <String> "]
108969[label="classType_lfno_classOrInterfaceType\n String "]
88970[label="variableDeclarator\n act=newAhoCorasickDoubleArrayTrie<String>() "]
98971[label="variableDeclaratorId\n act "]
98972[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie<String>() "]
108973[label="typeArguments\n <String> "]
118974[label="classType_lfno_classOrInterfaceType\n String "]
68975[label="localVariableDeclarationStatement\n longtimeMillis=System.currentTimeMillis(); "]
78976[label="localVariableDeclaration\n longtimeMillis=System.currentTimeMillis() "]
88977[label="integralType\n long "]
88978[label="variableDeclarator\n timeMillis=System.currentTimeMillis() "]
98979[label="variableDeclaratorId\n timeMillis "]
98980[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
108981[label="typeName\n System "]
68982[label="expressionStatement\n act.build(map); "]
78983[label="methodInvocation\n act.build(map) "]
88984[label="typeName\n act "]
88985[label="expressionName\n map "]
68986[label="expressionStatement\n System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\"); "]
78987[label="methodInvocation\n System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\") "]
88988[label="typeName\n System.out "]
98989[label="packageOrTypeName\n System "]
88990[label="additiveExpression\n \"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\" "]
98991[label="additiveExpression\n \"构建耗时：\"+(System.currentTimeMillis()-timeMillis) "]
108992[label="literal\n \"构建耗时：\" "]
108993[label="primaryNoNewArray_lfno_primary\n (System.currentTimeMillis()-timeMillis) "]
118994[label="additiveExpression\n System.currentTimeMillis()-timeMillis "]
128995[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
138996[label="typeName\n System "]
128997[label="expressionName\n timeMillis "]
98998[label="literal\n \" ms\" "]
68999[label="localVariableDeclarationStatement\n LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\"); "]
79000[label="localVariableDeclaration\n LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\") "]
89001[label="unannClassType_lfno_unannClassOrInterfaceType\n LinkedList<String> "]
99002[label="typeArguments\n <String> "]
109003[label="classType_lfno_classOrInterfaceType\n String "]
89004[label="variableDeclarator\n lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\") "]
99005[label="variableDeclaratorId\n lineList "]
99006[label="methodInvocation_lfno_primary\n IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\") "]
109007[label="typeName\n IOUtil "]
109008[label="literal\n \"D:\\Doc\\语料库\\《我的团长我的团》.txt\" "]
69009[label="expressionStatement\n timeMillis=System.currentTimeMillis(); "]
79010[label="assignment\n timeMillis=System.currentTimeMillis() "]
89011[label="expressionName\n timeMillis "]
89012[label="assignmentOperator\n = "]
89013[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
99014[label="typeName\n System "]
69015[label="enhancedForStatement\n for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}} "]
79016[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
79017[label="variableDeclaratorId\n sentence "]
79018[label="expressionName\n lineList "]
79019[label="block\n {List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}} "]
89020[label="blockStatements\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);} "]
99021[label="localVariableDeclarationStatement\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence); "]
109022[label="localVariableDeclaration\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence) "]
119023[label="unannClassType_lfno_unannClassOrInterfaceType\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>> "]
129024[label="typeArguments\n <AhoCorasickDoubleArrayTrie<String>.Hit<String>> "]
139025[label="classOrInterfaceType\n AhoCorasickDoubleArrayTrie<String>.Hit<String> "]
149026[label="classType_lfno_classOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
159027[label="typeArguments\n <String> "]
169028[label="classType_lfno_classOrInterfaceType\n String "]
149029[label="classType_lf_classOrInterfaceType\n .Hit<String> "]
159030[label="typeArguments\n <String> "]
169031[label="classType_lfno_classOrInterfaceType\n String "]
119032[label="variableDeclarator\n entryList=act.parseText(sentence) "]
129033[label="variableDeclaratorId\n entryList "]
129034[label="methodInvocation_lfno_primary\n act.parseText(sentence) "]
139035[label="typeName\n act "]
139036[label="expressionName\n sentence "]
99037[label="enhancedForStatement\n for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);} "]
109038[label="unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String>.Hit<String> "]
119039[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
129040[label="typeArguments\n <String> "]
139041[label="classType_lfno_classOrInterfaceType\n String "]
119042[label="unannClassType_lf_unannClassOrInterfaceType\n .Hit<String> "]
129043[label="typeArguments\n <String> "]
139044[label="classType_lfno_classOrInterfaceType\n String "]
109045[label="variableDeclaratorId\n entry "]
109046[label="expressionName\n entryList "]
109047[label="block\n {intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);} "]
119048[label="blockStatements\n intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value); "]
129049[label="localVariableDeclarationStatement\n intend=entry.end; "]
139050[label="localVariableDeclaration\n intend=entry.end "]
149051[label="integralType\n int "]
149052[label="variableDeclarator\n end=entry.end "]
159053[label="variableDeclaratorId\n end "]
159054[label="expressionName\n entry.end "]
169055[label="ambiguousName\n entry "]
129056[label="localVariableDeclarationStatement\n intstart=entry.begin; "]
139057[label="localVariableDeclaration\n intstart=entry.begin "]
149058[label="integralType\n int "]
149059[label="variableDeclarator\n start=entry.begin "]
159060[label="variableDeclaratorId\n start "]
159061[label="expressionName\n entry.begin "]
169062[label="ambiguousName\n entry "]
129063[label="expressionStatement\n assertEquals(sentence.substring(start,end),entry.value); "]
139064[label="methodInvocation\n assertEquals(sentence.substring(start,end),entry.value) "]
149065[label="methodName\n assertEquals "]
149066[label="argumentList\n sentence.substring(start,end),entry.value "]
159067[label="methodInvocation_lfno_primary\n sentence.substring(start,end) "]
169068[label="typeName\n sentence "]
169069[label="argumentList\n start,end "]
179070[label="expressionName\n start "]
179071[label="expressionName\n end "]
159072[label="expressionName\n entry.value "]
169073[label="ambiguousName\n entry "]
69074[label="expressionStatement\n System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis); "]
79075[label="methodInvocation\n System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis) "]
89076[label="typeName\n System.out "]
99077[label="packageOrTypeName\n System "]
89078[label="argumentList\n \"%d ms\n\",System.currentTimeMillis()-timeMillis "]
99079[label="literal\n \"%d ms\n\" "]
99080[label="additiveExpression\n System.currentTimeMillis()-timeMillis "]
109081[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
119082[label="typeName\n System "]
109083[label="expressionName\n timeMillis "]
39084[label="methodDeclaration\n publicvoidtestHasKeyword()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));}assertTrue(trie.hasKeyword(\"ushers\"));assertFalse(trie.hasKeyword(\"构建耗时\"));} "]
49085[label="methodModifier\n public "]
49086[label="methodHeader\n voidtestHasKeyword()throwsException "]
59087[label="result\n void "]
59088[label="methodDeclarator\n testHasKeyword() "]
59089[label="throws_\n throwsException "]
69090[label="classType\n Exception "]
49091[label="block\n {TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));}assertTrue(trie.hasKeyword(\"ushers\"));assertFalse(trie.hasKeyword(\"构建耗时\"));} "]
59092[label="blockStatements\n TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));}assertTrue(trie.hasKeyword(\"ushers\"));assertFalse(trie.hasKeyword(\"构建耗时\")); "]
69093[label="localVariableDeclarationStatement\n TreeMap<String,String>map=newTreeMap<String,String>(); "]
79094[label="localVariableDeclaration\n TreeMap<String,String>map=newTreeMap<String,String>() "]
89095[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
99096[label="typeArguments\n <String,String> "]
109097[label="typeArgumentList\n String,String "]
119098[label="classType_lfno_classOrInterfaceType\n String "]
119099[label="classType_lfno_classOrInterfaceType\n String "]
89100[label="variableDeclarator\n map=newTreeMap<String,String>() "]
99101[label="variableDeclaratorId\n map "]
99102[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
109103[label="typeArguments\n <String,String> "]
119104[label="typeArgumentList\n String,String "]
129105[label="classType_lfno_classOrInterfaceType\n String "]
129106[label="classType_lfno_classOrInterfaceType\n String "]
69107[label="localVariableDeclarationStatement\n String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"}; "]
79108[label="localVariableDeclaration\n String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
89109[label="unannArrayType\n String[] "]
99110[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
99111[label="dims\n [] "]
89112[label="variableDeclarator\n keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
99113[label="variableDeclaratorId\n keyArray "]
99114[label="arrayCreationExpression\n newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
109115[label="classType_lfno_classOrInterfaceType\n String "]
109116[label="dims\n [] "]
109117[label="arrayInitializer\n {\"hers\",\"his\",\"she\",\"he\"} "]
119118[label="variableInitializerList\n \"hers\",\"his\",\"she\",\"he\" "]
129119[label="literal\n \"hers\" "]
129120[label="literal\n \"his\" "]
129121[label="literal\n \"she\" "]
129122[label="literal\n \"he\" "]
69123[label="enhancedForStatement\n for(Stringkey:keyArray){map.put(key,key);} "]
79124[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
79125[label="variableDeclaratorId\n key "]
79126[label="expressionName\n keyArray "]
79127[label="block\n {map.put(key,key);} "]
89128[label="expressionStatement\n map.put(key,key); "]
99129[label="methodInvocation\n map.put(key,key) "]
109130[label="typeName\n map "]
109131[label="argumentList\n key,key "]
119132[label="expressionName\n key "]
119133[label="expressionName\n key "]
69134[label="localVariableDeclarationStatement\n Trietrie=newTrie(); "]
79135[label="localVariableDeclaration\n Trietrie=newTrie() "]
89136[label="unannClassType_lfno_unannClassOrInterfaceType\n Trie "]
89137[label="variableDeclarator\n trie=newTrie() "]
99138[label="variableDeclaratorId\n trie "]
99139[label="classInstanceCreationExpression_lfno_primary\n newTrie() "]
69140[label="expressionStatement\n trie.addAllKeyword(map.keySet()); "]
79141[label="methodInvocation\n trie.addAllKeyword(map.keySet()) "]
89142[label="typeName\n trie "]
89143[label="methodInvocation_lfno_primary\n map.keySet() "]
99144[label="typeName\n map "]
69145[label="enhancedForStatement\n for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));} "]
79146[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
79147[label="variableDeclaratorId\n key "]
79148[label="expressionName\n keyArray "]
79149[label="block\n {assertTrue(trie.hasKeyword(key));} "]
89150[label="expressionStatement\n assertTrue(trie.hasKeyword(key)); "]
99151[label="methodInvocation\n assertTrue(trie.hasKeyword(key)) "]
109152[label="methodName\n assertTrue "]
109153[label="methodInvocation_lfno_primary\n trie.hasKeyword(key) "]
119154[label="typeName\n trie "]
119155[label="expressionName\n key "]
69156[label="expressionStatement\n assertTrue(trie.hasKeyword(\"ushers\")); "]
79157[label="methodInvocation\n assertTrue(trie.hasKeyword(\"ushers\")) "]
89158[label="methodName\n assertTrue "]
89159[label="methodInvocation_lfno_primary\n trie.hasKeyword(\"ushers\") "]
99160[label="typeName\n trie "]
99161[label="literal\n \"ushers\" "]
69162[label="expressionStatement\n assertFalse(trie.hasKeyword(\"构建耗时\")); "]
79163[label="methodInvocation\n assertFalse(trie.hasKeyword(\"构建耗时\")) "]
89164[label="methodName\n assertFalse "]
89165[label="methodInvocation_lfno_primary\n trie.hasKeyword(\"构建耗时\") "]
99166[label="typeName\n trie "]
99167[label="literal\n \"构建耗时\" "]
09168[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser;importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie;importcom.hankcs.hanlp.collection.trie.ITrie;importcom.hankcs.hanlp.corpus.io.ByteArray;importcom.hankcs.hanlp.corpus.io.ICacheAble;importcom.hankcs.hanlp.utility.TextUtility;importjava.io.DataOutputStream;importjava.util.Map;importjava.util.TreeMap;publicclassAlphabetimplementsICacheAble{ITrie<Integer>trie;String[]idToLabelMap;publicAlphabet(){trie=newDoubleArrayTrie<Integer>();}publicStringlabelOf(intid){returnidToLabelMap[id];}publicintbuild(TreeMap<String,Integer>keyValueMap){idToLabelMap=newString[keyValueMap.size()];for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();}returntrie.build(keyValueMap);}publicIntegeridOf(char[]label){returntrie.get(label);}publicIntegeridOf(Stringlabel){returntrie.get(label);}publicintsize(){returntrie.size();}publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(idToLabelMap.length);for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);}}publicbooleanload(ByteArraybyteArray){idToLabelMap=newString[byteArray.nextInt()];TreeMap<String,Integer>map=newTreeMap<String,Integer>();for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);}returntrie.build(map)==0;}}<EOF> "]
19169[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser; "]
29170[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
39171[label="packageName\n com.hankcs.hanlp.dependency "]
49172[label="packageName\n com.hankcs.hanlp "]
59173[label="packageName\n com.hankcs "]
69174[label="packageName\n com "]
19175[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie; "]
29176[label="typeName\n com.hankcs.hanlp.collection.trie.DoubleArrayTrie "]
39177[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
49178[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
59179[label="packageOrTypeName\n com.hankcs.hanlp "]
69180[label="packageOrTypeName\n com.hankcs "]
79181[label="packageOrTypeName\n com "]
19182[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.ITrie; "]
29183[label="typeName\n com.hankcs.hanlp.collection.trie.ITrie "]
39184[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
49185[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
59186[label="packageOrTypeName\n com.hankcs.hanlp "]
69187[label="packageOrTypeName\n com.hankcs "]
79188[label="packageOrTypeName\n com "]
19189[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.ByteArray; "]
29190[label="typeName\n com.hankcs.hanlp.corpus.io.ByteArray "]
39191[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
49192[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
59193[label="packageOrTypeName\n com.hankcs.hanlp "]
69194[label="packageOrTypeName\n com.hankcs "]
79195[label="packageOrTypeName\n com "]
19196[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.ICacheAble; "]
29197[label="typeName\n com.hankcs.hanlp.corpus.io.ICacheAble "]
39198[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
49199[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
59200[label="packageOrTypeName\n com.hankcs.hanlp "]
69201[label="packageOrTypeName\n com.hankcs "]
79202[label="packageOrTypeName\n com "]
19203[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.TextUtility; "]
29204[label="typeName\n com.hankcs.hanlp.utility.TextUtility "]
39205[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
49206[label="packageOrTypeName\n com.hankcs.hanlp "]
59207[label="packageOrTypeName\n com.hankcs "]
69208[label="packageOrTypeName\n com "]
19209[label="singleTypeImportDeclaration\n importjava.io.DataOutputStream; "]
29210[label="typeName\n java.io.DataOutputStream "]
39211[label="packageOrTypeName\n java.io "]
49212[label="packageOrTypeName\n java "]
19213[label="singleTypeImportDeclaration\n importjava.util.Map; "]
29214[label="typeName\n java.util.Map "]
39215[label="packageOrTypeName\n java.util "]
49216[label="packageOrTypeName\n java "]
19217[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
29218[label="typeName\n java.util.TreeMap "]
39219[label="packageOrTypeName\n java.util "]
49220[label="packageOrTypeName\n java "]
19221[label="normalClassDeclaration\n publicclassAlphabetimplementsICacheAble{ITrie<Integer>trie;String[]idToLabelMap;publicAlphabet(){trie=newDoubleArrayTrie<Integer>();}publicStringlabelOf(intid){returnidToLabelMap[id];}publicintbuild(TreeMap<String,Integer>keyValueMap){idToLabelMap=newString[keyValueMap.size()];for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();}returntrie.build(keyValueMap);}publicIntegeridOf(char[]label){returntrie.get(label);}publicIntegeridOf(Stringlabel){returntrie.get(label);}publicintsize(){returntrie.size();}publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(idToLabelMap.length);for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);}}publicbooleanload(ByteArraybyteArray){idToLabelMap=newString[byteArray.nextInt()];TreeMap<String,Integer>map=newTreeMap<String,Integer>();for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);}returntrie.build(map)==0;}} "]
29222[label="classModifier\n public "]
29223[label="superinterfaces\n implementsICacheAble "]
39224[label="classType\n ICacheAble "]
29225[label="classBody\n {ITrie<Integer>trie;String[]idToLabelMap;publicAlphabet(){trie=newDoubleArrayTrie<Integer>();}publicStringlabelOf(intid){returnidToLabelMap[id];}publicintbuild(TreeMap<String,Integer>keyValueMap){idToLabelMap=newString[keyValueMap.size()];for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();}returntrie.build(keyValueMap);}publicIntegeridOf(char[]label){returntrie.get(label);}publicIntegeridOf(Stringlabel){returntrie.get(label);}publicintsize(){returntrie.size();}publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(idToLabelMap.length);for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);}}publicbooleanload(ByteArraybyteArray){idToLabelMap=newString[byteArray.nextInt()];TreeMap<String,Integer>map=newTreeMap<String,Integer>();for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);}returntrie.build(map)==0;}} "]
39226[label="fieldDeclaration\n ITrie<Integer>trie; "]
49227[label="unannClassType_lfno_unannClassOrInterfaceType\n ITrie<Integer> "]
59228[label="typeArguments\n <Integer> "]
69229[label="classType_lfno_classOrInterfaceType\n Integer "]
49230[label="variableDeclaratorId\n trie "]
39231[label="fieldDeclaration\n String[]idToLabelMap; "]
49232[label="unannArrayType\n String[] "]
59233[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
59234[label="dims\n [] "]
49235[label="variableDeclaratorId\n idToLabelMap "]
39236[label="constructorDeclaration\n publicAlphabet(){trie=newDoubleArrayTrie<Integer>();} "]
49237[label="constructorModifier\n public "]
49238[label="constructorDeclarator\n Alphabet() "]
59239[label="simpleTypeName\n Alphabet "]
49240[label="constructorBody\n {trie=newDoubleArrayTrie<Integer>();} "]
59241[label="expressionStatement\n trie=newDoubleArrayTrie<Integer>(); "]
69242[label="assignment\n trie=newDoubleArrayTrie<Integer>() "]
79243[label="expressionName\n trie "]
79244[label="assignmentOperator\n = "]
79245[label="classInstanceCreationExpression_lfno_primary\n newDoubleArrayTrie<Integer>() "]
89246[label="typeArguments\n <Integer> "]
99247[label="classType_lfno_classOrInterfaceType\n Integer "]
39248[label="methodDeclaration\n publicStringlabelOf(intid){returnidToLabelMap[id];} "]
49249[label="methodModifier\n public "]
49250[label="methodHeader\n StringlabelOf(intid) "]
59251[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
59252[label="methodDeclarator\n labelOf(intid) "]
69253[label="formalParameter\n intid "]
79254[label="integralType\n int "]
79255[label="variableDeclaratorId\n id "]
49256[label="block\n {returnidToLabelMap[id];} "]
59257[label="returnStatement\n returnidToLabelMap[id]; "]
69258[label="arrayAccess_lfno_primary\n idToLabelMap[id] "]
79259[label="expressionName\n idToLabelMap "]
79260[label="expressionName\n id "]
39261[label="methodDeclaration\n publicintbuild(TreeMap<String,Integer>keyValueMap){idToLabelMap=newString[keyValueMap.size()];for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();}returntrie.build(keyValueMap);} "]
49262[label="methodModifier\n public "]
49263[label="methodHeader\n intbuild(TreeMap<String,Integer>keyValueMap) "]
59264[label="integralType\n int "]
59265[label="methodDeclarator\n build(TreeMap<String,Integer>keyValueMap) "]
69266[label="formalParameter\n TreeMap<String,Integer>keyValueMap "]
79267[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,Integer> "]
89268[label="typeArguments\n <String,Integer> "]
99269[label="typeArgumentList\n String,Integer "]
109270[label="classType_lfno_classOrInterfaceType\n String "]
109271[label="classType_lfno_classOrInterfaceType\n Integer "]
79272[label="variableDeclaratorId\n keyValueMap "]
49273[label="block\n {idToLabelMap=newString[keyValueMap.size()];for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();}returntrie.build(keyValueMap);} "]
59274[label="blockStatements\n idToLabelMap=newString[keyValueMap.size()];for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();}returntrie.build(keyValueMap); "]
69275[label="expressionStatement\n idToLabelMap=newString[keyValueMap.size()]; "]
79276[label="assignment\n idToLabelMap=newString[keyValueMap.size()] "]
89277[label="expressionName\n idToLabelMap "]
89278[label="assignmentOperator\n = "]
89279[label="arrayCreationExpression\n newString[keyValueMap.size()] "]
99280[label="classType_lfno_classOrInterfaceType\n String "]
99281[label="dimExpr\n [keyValueMap.size()] "]
109282[label="methodInvocation_lfno_primary\n keyValueMap.size() "]
119283[label="typeName\n keyValueMap "]
69284[label="enhancedForStatement\n for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();} "]
79285[label="unannClassOrInterfaceType\n Map.Entry<String,Integer> "]
89286[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
89287[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,Integer> "]
99288[label="typeArguments\n <String,Integer> "]
109289[label="typeArgumentList\n String,Integer "]
119290[label="classType_lfno_classOrInterfaceType\n String "]
119291[label="classType_lfno_classOrInterfaceType\n Integer "]
79292[label="variableDeclaratorId\n entry "]
79293[label="methodInvocation_lfno_primary\n keyValueMap.entrySet() "]
89294[label="typeName\n keyValueMap "]
79295[label="block\n {idToLabelMap[entry.getValue()]=entry.getKey();} "]
89296[label="expressionStatement\n idToLabelMap[entry.getValue()]=entry.getKey(); "]
99297[label="assignment\n idToLabelMap[entry.getValue()]=entry.getKey() "]
109298[label="arrayAccess\n idToLabelMap[entry.getValue()] "]
119299[label="expressionName\n idToLabelMap "]
119300[label="methodInvocation_lfno_primary\n entry.getValue() "]
129301[label="typeName\n entry "]
109302[label="assignmentOperator\n = "]
109303[label="methodInvocation_lfno_primary\n entry.getKey() "]
119304[label="typeName\n entry "]
69305[label="returnStatement\n returntrie.build(keyValueMap); "]
79306[label="methodInvocation_lfno_primary\n trie.build(keyValueMap) "]
89307[label="typeName\n trie "]
89308[label="expressionName\n keyValueMap "]
39309[label="methodDeclaration\n publicIntegeridOf(char[]label){returntrie.get(label);} "]
49310[label="methodModifier\n public "]
49311[label="methodHeader\n IntegeridOf(char[]label) "]
59312[label="unannClassType_lfno_unannClassOrInterfaceType\n Integer "]
59313[label="methodDeclarator\n idOf(char[]label) "]
69314[label="formalParameter\n char[]label "]
79315[label="unannArrayType\n char[] "]
89316[label="integralType\n char "]
89317[label="dims\n [] "]
79318[label="variableDeclaratorId\n label "]
49319[label="block\n {returntrie.get(label);} "]
59320[label="returnStatement\n returntrie.get(label); "]
69321[label="methodInvocation_lfno_primary\n trie.get(label) "]
79322[label="typeName\n trie "]
79323[label="expressionName\n label "]
39324[label="methodDeclaration\n publicIntegeridOf(Stringlabel){returntrie.get(label);} "]
49325[label="methodModifier\n public "]
49326[label="methodHeader\n IntegeridOf(Stringlabel) "]
59327[label="unannClassType_lfno_unannClassOrInterfaceType\n Integer "]
59328[label="methodDeclarator\n idOf(Stringlabel) "]
69329[label="formalParameter\n Stringlabel "]
79330[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
79331[label="variableDeclaratorId\n label "]
49332[label="block\n {returntrie.get(label);} "]
59333[label="returnStatement\n returntrie.get(label); "]
69334[label="methodInvocation_lfno_primary\n trie.get(label) "]
79335[label="typeName\n trie "]
79336[label="expressionName\n label "]
39337[label="methodDeclaration\n publicintsize(){returntrie.size();} "]
49338[label="methodModifier\n public "]
49339[label="methodHeader\n intsize() "]
59340[label="integralType\n int "]
59341[label="methodDeclarator\n size() "]
49342[label="block\n {returntrie.size();} "]
59343[label="returnStatement\n returntrie.size(); "]
69344[label="methodInvocation_lfno_primary\n trie.size() "]
79345[label="typeName\n trie "]
39346[label="methodDeclaration\n publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(idToLabelMap.length);for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);}} "]
49347[label="methodModifier\n public "]
49348[label="methodHeader\n voidsave(DataOutputStreamout)throwsException "]
59349[label="result\n void "]
59350[label="methodDeclarator\n save(DataOutputStreamout) "]
69351[label="formalParameter\n DataOutputStreamout "]
79352[label="unannClassType_lfno_unannClassOrInterfaceType\n DataOutputStream "]
79353[label="variableDeclaratorId\n out "]
59354[label="throws_\n throwsException "]
69355[label="classType\n Exception "]
49356[label="block\n {out.writeInt(idToLabelMap.length);for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);}} "]
59357[label="blockStatements\n out.writeInt(idToLabelMap.length);for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);} "]
69358[label="expressionStatement\n out.writeInt(idToLabelMap.length); "]
79359[label="methodInvocation\n out.writeInt(idToLabelMap.length) "]
89360[label="typeName\n out "]
89361[label="expressionName\n idToLabelMap.length "]
99362[label="ambiguousName\n idToLabelMap "]
69363[label="enhancedForStatement\n for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);} "]
79364[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
79365[label="variableDeclaratorId\n value "]
79366[label="expressionName\n idToLabelMap "]
79367[label="block\n {TextUtility.writeString(value,out);} "]
89368[label="expressionStatement\n TextUtility.writeString(value,out); "]
99369[label="methodInvocation\n TextUtility.writeString(value,out) "]
109370[label="typeName\n TextUtility "]
109371[label="argumentList\n value,out "]
119372[label="expressionName\n value "]
119373[label="expressionName\n out "]
39374[label="methodDeclaration\n publicbooleanload(ByteArraybyteArray){idToLabelMap=newString[byteArray.nextInt()];TreeMap<String,Integer>map=newTreeMap<String,Integer>();for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);}returntrie.build(map)==0;} "]
49375[label="methodModifier\n public "]
49376[label="methodHeader\n booleanload(ByteArraybyteArray) "]
59377[label="unannPrimitiveType\n boolean "]
59378[label="methodDeclarator\n load(ByteArraybyteArray) "]
69379[label="formalParameter\n ByteArraybyteArray "]
79380[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
79381[label="variableDeclaratorId\n byteArray "]
49382[label="block\n {idToLabelMap=newString[byteArray.nextInt()];TreeMap<String,Integer>map=newTreeMap<String,Integer>();for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);}returntrie.build(map)==0;} "]
59383[label="blockStatements\n idToLabelMap=newString[byteArray.nextInt()];TreeMap<String,Integer>map=newTreeMap<String,Integer>();for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);}returntrie.build(map)==0; "]
69384[label="expressionStatement\n idToLabelMap=newString[byteArray.nextInt()]; "]
79385[label="assignment\n idToLabelMap=newString[byteArray.nextInt()] "]
89386[label="expressionName\n idToLabelMap "]
89387[label="assignmentOperator\n = "]
89388[label="arrayCreationExpression\n newString[byteArray.nextInt()] "]
99389[label="classType_lfno_classOrInterfaceType\n String "]
99390[label="dimExpr\n [byteArray.nextInt()] "]
109391[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
119392[label="typeName\n byteArray "]
69393[label="localVariableDeclarationStatement\n TreeMap<String,Integer>map=newTreeMap<String,Integer>(); "]
79394[label="localVariableDeclaration\n TreeMap<String,Integer>map=newTreeMap<String,Integer>() "]
89395[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,Integer> "]
99396[label="typeArguments\n <String,Integer> "]
109397[label="typeArgumentList\n String,Integer "]
119398[label="classType_lfno_classOrInterfaceType\n String "]
119399[label="classType_lfno_classOrInterfaceType\n Integer "]
89400[label="variableDeclarator\n map=newTreeMap<String,Integer>() "]
99401[label="variableDeclaratorId\n map "]
99402[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,Integer>() "]
109403[label="typeArguments\n <String,Integer> "]
119404[label="typeArgumentList\n String,Integer "]
129405[label="classType_lfno_classOrInterfaceType\n String "]
129406[label="classType_lfno_classOrInterfaceType\n Integer "]
69407[label="basicForStatement\n for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);} "]
79408[label="localVariableDeclaration\n inti=0 "]
89409[label="integralType\n int "]
89410[label="variableDeclarator\n i=0 "]
99411[label="variableDeclaratorId\n i "]
99412[label="literal\n 0 "]
79413[label="relationalExpression\n i<idToLabelMap.length "]
89414[label="expressionName\n i "]
89415[label="expressionName\n idToLabelMap.length "]
99416[label="ambiguousName\n idToLabelMap "]
79417[label="postIncrementExpression\n i++ "]
89418[label="expressionName\n i "]
79419[label="block\n {idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);} "]
89420[label="blockStatements\n idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i); "]
99421[label="expressionStatement\n idToLabelMap[i]=byteArray.nextString(); "]
109422[label="assignment\n idToLabelMap[i]=byteArray.nextString() "]
119423[label="arrayAccess\n idToLabelMap[i] "]
129424[label="expressionName\n idToLabelMap "]
129425[label="expressionName\n i "]
119426[label="assignmentOperator\n = "]
119427[label="methodInvocation_lfno_primary\n byteArray.nextString() "]
129428[label="typeName\n byteArray "]
99429[label="expressionStatement\n map.put(idToLabelMap[i],i); "]
109430[label="methodInvocation\n map.put(idToLabelMap[i],i) "]
119431[label="typeName\n map "]
119432[label="argumentList\n idToLabelMap[i],i "]
129433[label="arrayAccess_lfno_primary\n idToLabelMap[i] "]
139434[label="expressionName\n idToLabelMap "]
139435[label="expressionName\n i "]
129436[label="expressionName\n i "]
69437[label="returnStatement\n returntrie.build(map)==0; "]
79438[label="equalityExpression\n trie.build(map)==0 "]
89439[label="methodInvocation_lfno_primary\n trie.build(map) "]
99440[label="typeName\n trie "]
99441[label="expressionName\n map "]
89442[label="literal\n 0 "]
09443[label="compilationUnit\n packagecom.hankcs.hanlp.model.perceptron.cli;importjava.beans.BeanInfo;importjava.beans.IntrospectionException;importjava.beans.Introspector;importjava.beans.PropertyDescriptor;importjava.io.PrintStream;importjava.lang.reflect.*;importjava.util.ArrayList;importjava.util.Arrays;importjava.util.Iterator;importjava.util.List;publicclassArgs{publicstaticList<String>parseOrExit(Objecttarget,String[]args){try{returnparse(target,args);}catch(IllegalArgumentExceptione){System.err.println(e.getMessage());Args.usage(target);System.exit(1);throwe;}}publicstaticList<String>parse(Objecttarget,String[]args){returnparse(target,args,true);}publicstaticList<String>parse(Objecttarget,String[]args,booleanfailOnExtraFlags){List<String>arguments=newArrayList<String>();arguments.addAll(Arrays.asList(args));Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}}catch(IntrospectionExceptione){}}for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){processField(target,field,arguments);}}if(failOnExtraFlags){for(Stringargument:arguments){if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);}}}returnarguments;}privatestaticvoidprocessField(Objecttarget,Fieldfield,List<String>arguments){Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);}}}privatestaticvoidaddArgument(Classtype,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter){try{Object[]os=(Object[])field.get(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);field.set(target,s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}}privatestaticvoidaddPropertyArgument(Classtype,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter){try{Object[]os=(Object[])property.getReadMethod().invoke(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);property.getWriteMethod().invoke(target,(Object)s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);}}privatestaticvoidprocessProperty(Objecttarget,PropertyDescriptorproperty,List<String>arguments){MethodwriteMethod=property.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}}}}publicstaticvoidusage(Objecttarget){usage(System.err,target);}publicstaticvoidusage(PrintStreamerrStream,Objecttarget){Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();}StringclazzName=clazz.getName();{intindex=clazzName.lastIndexOf('$');if(index>0){clazzName=clazzName.substring(0,index);}}errStream.println(\"用法: \"+clazzName);for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){fieldUsage(errStream,target,field);}}try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){propertyUsage(errStream,target,pd);}}catch(IntrospectionExceptione){}}privatestaticvoidfieldUsage(PrintStreamerrStream,Objecttarget,Fieldfield){Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();makeAccessible(field);try{ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}}}privatestaticvoidpropertyUsage(PrintStreamerrStream,Objecttarget,PropertyDescriptorfield){MethodwriteMethod=field.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}}}}privatestaticvoidpropertyUsage(PrintStreamerrStream,Stringprefix,Stringname,Stringalias,Class<?>type,Stringdelimiter,Stringdescription,ObjectdefaultValue){StringBuildersb=newStringBuilder(\"  \");sb.append(prefix);sb.append(name);if(alias!=null){sb.append(\" (\");sb.append(prefix);sb.append(alias);sb.append(\")\");}if(type==Boolean.TYPE||type==Boolean.class){sb.append(\"\t[flag]\t\");sb.append(description);}else{sb.append(\"\t[\");if(type.isArray()){StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");}else{StringtypeName=getTypeName(type);sb.append(typeName);}sb.append(\"]\t\");sb.append(description);if(defaultValue!=null){sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");}}errStream.println(sb);}privatestaticStringgetTypeName(Class<?>type){StringtypeName=type.getName();intbeginIndex=typeName.lastIndexOf(\".\");typeName=typeName.substring(beginIndex+1);returntypeName;}staticStringgetName(Argumentargument,PropertyDescriptorproperty){Stringname=argument.value();if(name.equals(\"\")){name=property.getName();}returnname;}privatestaticObjectconsumeArgumentValue(Stringname,Class<?>type,Argumentargument,Iterator<String>i){Objectvalue;if(type==Boolean.TYPE||type==Boolean.class){value=true;}else{if(i.hasNext()){value=i.next();i.remove();}else{thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name);}}returnvalue;}staticvoidsetProperty(Class<?>type,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter){try{value=getValue(type,value,delimiter);property.getWriteMethod().invoke(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);}}staticStringgetAlias(Argumentargument){Stringalias=argument.alias();if(alias.equals(\"\")){alias=null;}returnalias;}staticStringgetName(Argumentargument,Fieldfield){Stringname=argument.value();if(name.equals(\"\")){name=field.getName();}returnname;}staticvoidsetField(Class<?>type,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter){makeAccessible(field);try{value=getValue(type,value,delimiter);field.set(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}}privatestaticObjectgetValue(Class<?>type,Objectvalue,Stringdelimiter)throwsNoSuchMethodException{if(type!=String.class&&type!=Boolean.class&&type!=Boolean.TYPE){Stringstring=(String)value;if(type.isArray()){String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}}else{value=createValue(type,string);}}returnvalue;}privatestaticObjectcreateValue(Class<?>type,StringvalueAsString)throwsNoSuchMethodException{for(ValueCreatorvalueCreator:valueCreators){ObjectcreatedValue=valueCreator.createValue(type,valueAsString);if(createdValue!=null){returncreatedValue;}}thrownewIllegalArgumentException(String.format(\"cannot instanciate any %s object using %s value\",type.toString(),valueAsString));}privatestaticvoidmakeAccessible(AccessibleObjectao){if(aoinstanceofMember){Membermember=(Member)ao;if(!Modifier.isPublic(member.getModifiers())){ao.setAccessible(true);}}}publicstaticinterfaceValueCreator{publicObjectcreateValue(Class<?>type,Stringvalue);}publicstaticValueCreatorbyStaticMethodInvocation(finalClass<?>compatibleType,finalStringmethodName){returnnewValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv;}};}publicstaticfinalValueCreatorFROM_STRING_CONSTRUCTOR=newValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);}returnv;}};publicstaticfinalValueCreatorENUM_CREATOR=newValueCreator(){@SuppressWarnings({\"unchecked\",\"rawtypes\"})publicObjectcreateValue(Classtype,Stringvalue){if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);}returnnull;}};privatestaticfinalList<ValueCreator>DEFAULT_VALUE_CREATORS=Arrays.asList(Args.FROM_STRING_CONSTRUCTOR,Args.ENUM_CREATOR);privatestaticList<ValueCreator>valueCreators=newArrayList<ValueCreator>(DEFAULT_VALUE_CREATORS);publicstaticvoidregisterValueCreator(ValueCreatorvc){valueCreators.add(vc);}publicstaticvoidresetValueCreators(){valueCreators.clear();valueCreators.addAll(DEFAULT_VALUE_CREATORS);}}<EOF> "]
19444[label="packageDeclaration\n packagecom.hankcs.hanlp.model.perceptron.cli; "]
29445[label="packageName\n com.hankcs.hanlp.model.perceptron.cli "]
39446[label="packageName\n com.hankcs.hanlp.model.perceptron "]
49447[label="packageName\n com.hankcs.hanlp.model "]
59448[label="packageName\n com.hankcs.hanlp "]
69449[label="packageName\n com.hankcs "]
79450[label="packageName\n com "]
19451[label="singleTypeImportDeclaration\n importjava.beans.BeanInfo; "]
29452[label="typeName\n java.beans.BeanInfo "]
39453[label="packageOrTypeName\n java.beans "]
49454[label="packageOrTypeName\n java "]
19455[label="singleTypeImportDeclaration\n importjava.beans.IntrospectionException; "]
29456[label="typeName\n java.beans.IntrospectionException "]
39457[label="packageOrTypeName\n java.beans "]
49458[label="packageOrTypeName\n java "]
19459[label="singleTypeImportDeclaration\n importjava.beans.Introspector; "]
29460[label="typeName\n java.beans.Introspector "]
39461[label="packageOrTypeName\n java.beans "]
49462[label="packageOrTypeName\n java "]
19463[label="singleTypeImportDeclaration\n importjava.beans.PropertyDescriptor; "]
29464[label="typeName\n java.beans.PropertyDescriptor "]
39465[label="packageOrTypeName\n java.beans "]
49466[label="packageOrTypeName\n java "]
19467[label="singleTypeImportDeclaration\n importjava.io.PrintStream; "]
29468[label="typeName\n java.io.PrintStream "]
39469[label="packageOrTypeName\n java.io "]
49470[label="packageOrTypeName\n java "]
19471[label="typeImportOnDemandDeclaration\n importjava.lang.reflect.*; "]
29472[label="packageOrTypeName\n java.lang.reflect "]
39473[label="packageOrTypeName\n java.lang "]
49474[label="packageOrTypeName\n java "]
19475[label="singleTypeImportDeclaration\n importjava.util.ArrayList; "]
29476[label="typeName\n java.util.ArrayList "]
39477[label="packageOrTypeName\n java.util "]
49478[label="packageOrTypeName\n java "]
19479[label="singleTypeImportDeclaration\n importjava.util.Arrays; "]
29480[label="typeName\n java.util.Arrays "]
39481[label="packageOrTypeName\n java.util "]
49482[label="packageOrTypeName\n java "]
19483[label="singleTypeImportDeclaration\n importjava.util.Iterator; "]
29484[label="typeName\n java.util.Iterator "]
39485[label="packageOrTypeName\n java.util "]
49486[label="packageOrTypeName\n java "]
19487[label="singleTypeImportDeclaration\n importjava.util.List; "]
29488[label="typeName\n java.util.List "]
39489[label="packageOrTypeName\n java.util "]
49490[label="packageOrTypeName\n java "]
19491[label="normalClassDeclaration\n publicclassArgs{publicstaticList<String>parseOrExit(Objecttarget,String[]args){try{returnparse(target,args);}catch(IllegalArgumentExceptione){System.err.println(e.getMessage());Args.usage(target);System.exit(1);throwe;}}publicstaticList<String>parse(Objecttarget,String[]args){returnparse(target,args,true);}publicstaticList<String>parse(Objecttarget,String[]args,booleanfailOnExtraFlags){List<String>arguments=newArrayList<String>();arguments.addAll(Arrays.asList(args));Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}}catch(IntrospectionExceptione){}}for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){processField(target,field,arguments);}}if(failOnExtraFlags){for(Stringargument:arguments){if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);}}}returnarguments;}privatestaticvoidprocessField(Objecttarget,Fieldfield,List<String>arguments){Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);}}}privatestaticvoidaddArgument(Classtype,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter){try{Object[]os=(Object[])field.get(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);field.set(target,s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}}privatestaticvoidaddPropertyArgument(Classtype,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter){try{Object[]os=(Object[])property.getReadMethod().invoke(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);property.getWriteMethod().invoke(target,(Object)s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);}}privatestaticvoidprocessProperty(Objecttarget,PropertyDescriptorproperty,List<String>arguments){MethodwriteMethod=property.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}}}}publicstaticvoidusage(Objecttarget){usage(System.err,target);}publicstaticvoidusage(PrintStreamerrStream,Objecttarget){Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();}StringclazzName=clazz.getName();{intindex=clazzName.lastIndexOf('$');if(index>0){clazzName=clazzName.substring(0,index);}}errStream.println(\"用法: \"+clazzName);for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){fieldUsage(errStream,target,field);}}try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){propertyUsage(errStream,target,pd);}}catch(IntrospectionExceptione){}}privatestaticvoidfieldUsage(PrintStreamerrStream,Objecttarget,Fieldfield){Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();makeAccessible(field);try{ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}}}privatestaticvoidpropertyUsage(PrintStreamerrStream,Objecttarget,PropertyDescriptorfield){MethodwriteMethod=field.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}}}}privatestaticvoidpropertyUsage(PrintStreamerrStream,Stringprefix,Stringname,Stringalias,Class<?>type,Stringdelimiter,Stringdescription,ObjectdefaultValue){StringBuildersb=newStringBuilder(\"  \");sb.append(prefix);sb.append(name);if(alias!=null){sb.append(\" (\");sb.append(prefix);sb.append(alias);sb.append(\")\");}if(type==Boolean.TYPE||type==Boolean.class){sb.append(\"\t[flag]\t\");sb.append(description);}else{sb.append(\"\t[\");if(type.isArray()){StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");}else{StringtypeName=getTypeName(type);sb.append(typeName);}sb.append(\"]\t\");sb.append(description);if(defaultValue!=null){sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");}}errStream.println(sb);}privatestaticStringgetTypeName(Class<?>type){StringtypeName=type.getName();intbeginIndex=typeName.lastIndexOf(\".\");typeName=typeName.substring(beginIndex+1);returntypeName;}staticStringgetName(Argumentargument,PropertyDescriptorproperty){Stringname=argument.value();if(name.equals(\"\")){name=property.getName();}returnname;}privatestaticObjectconsumeArgumentValue(Stringname,Class<?>type,Argumentargument,Iterator<String>i){Objectvalue;if(type==Boolean.TYPE||type==Boolean.class){value=true;}else{if(i.hasNext()){value=i.next();i.remove();}else{thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name);}}returnvalue;}staticvoidsetProperty(Class<?>type,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter){try{value=getValue(type,value,delimiter);property.getWriteMethod().invoke(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);}}staticStringgetAlias(Argumentargument){Stringalias=argument.alias();if(alias.equals(\"\")){alias=null;}returnalias;}staticStringgetName(Argumentargument,Fieldfield){Stringname=argument.value();if(name.equals(\"\")){name=field.getName();}returnname;}staticvoidsetField(Class<?>type,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter){makeAccessible(field);try{value=getValue(type,value,delimiter);field.set(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}}privatestaticObjectgetValue(Class<?>type,Objectvalue,Stringdelimiter)throwsNoSuchMethodException{if(type!=String.class&&type!=Boolean.class&&type!=Boolean.TYPE){Stringstring=(String)value;if(type.isArray()){String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}}else{value=createValue(type,string);}}returnvalue;}privatestaticObjectcreateValue(Class<?>type,StringvalueAsString)throwsNoSuchMethodException{for(ValueCreatorvalueCreator:valueCreators){ObjectcreatedValue=valueCreator.createValue(type,valueAsString);if(createdValue!=null){returncreatedValue;}}thrownewIllegalArgumentException(String.format(\"cannot instanciate any %s object using %s value\",type.toString(),valueAsString));}privatestaticvoidmakeAccessible(AccessibleObjectao){if(aoinstanceofMember){Membermember=(Member)ao;if(!Modifier.isPublic(member.getModifiers())){ao.setAccessible(true);}}}publicstaticinterfaceValueCreator{publicObjectcreateValue(Class<?>type,Stringvalue);}publicstaticValueCreatorbyStaticMethodInvocation(finalClass<?>compatibleType,finalStringmethodName){returnnewValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv;}};}publicstaticfinalValueCreatorFROM_STRING_CONSTRUCTOR=newValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);}returnv;}};publicstaticfinalValueCreatorENUM_CREATOR=newValueCreator(){@SuppressWarnings({\"unchecked\",\"rawtypes\"})publicObjectcreateValue(Classtype,Stringvalue){if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);}returnnull;}};privatestaticfinalList<ValueCreator>DEFAULT_VALUE_CREATORS=Arrays.asList(Args.FROM_STRING_CONSTRUCTOR,Args.ENUM_CREATOR);privatestaticList<ValueCreator>valueCreators=newArrayList<ValueCreator>(DEFAULT_VALUE_CREATORS);publicstaticvoidregisterValueCreator(ValueCreatorvc){valueCreators.add(vc);}publicstaticvoidresetValueCreators(){valueCreators.clear();valueCreators.addAll(DEFAULT_VALUE_CREATORS);}} "]
29492[label="classModifier\n public "]
29493[label="classBody\n {publicstaticList<String>parseOrExit(Objecttarget,String[]args){try{returnparse(target,args);}catch(IllegalArgumentExceptione){System.err.println(e.getMessage());Args.usage(target);System.exit(1);throwe;}}publicstaticList<String>parse(Objecttarget,String[]args){returnparse(target,args,true);}publicstaticList<String>parse(Objecttarget,String[]args,booleanfailOnExtraFlags){List<String>arguments=newArrayList<String>();arguments.addAll(Arrays.asList(args));Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}}catch(IntrospectionExceptione){}}for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){processField(target,field,arguments);}}if(failOnExtraFlags){for(Stringargument:arguments){if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);}}}returnarguments;}privatestaticvoidprocessField(Objecttarget,Fieldfield,List<String>arguments){Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);}}}privatestaticvoidaddArgument(Classtype,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter){try{Object[]os=(Object[])field.get(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);field.set(target,s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}}privatestaticvoidaddPropertyArgument(Classtype,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter){try{Object[]os=(Object[])property.getReadMethod().invoke(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);property.getWriteMethod().invoke(target,(Object)s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);}}privatestaticvoidprocessProperty(Objecttarget,PropertyDescriptorproperty,List<String>arguments){MethodwriteMethod=property.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}}}}publicstaticvoidusage(Objecttarget){usage(System.err,target);}publicstaticvoidusage(PrintStreamerrStream,Objecttarget){Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();}StringclazzName=clazz.getName();{intindex=clazzName.lastIndexOf('$');if(index>0){clazzName=clazzName.substring(0,index);}}errStream.println(\"用法: \"+clazzName);for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){fieldUsage(errStream,target,field);}}try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){propertyUsage(errStream,target,pd);}}catch(IntrospectionExceptione){}}privatestaticvoidfieldUsage(PrintStreamerrStream,Objecttarget,Fieldfield){Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();makeAccessible(field);try{ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}}}privatestaticvoidpropertyUsage(PrintStreamerrStream,Objecttarget,PropertyDescriptorfield){MethodwriteMethod=field.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}}}}privatestaticvoidpropertyUsage(PrintStreamerrStream,Stringprefix,Stringname,Stringalias,Class<?>type,Stringdelimiter,Stringdescription,ObjectdefaultValue){StringBuildersb=newStringBuilder(\"  \");sb.append(prefix);sb.append(name);if(alias!=null){sb.append(\" (\");sb.append(prefix);sb.append(alias);sb.append(\")\");}if(type==Boolean.TYPE||type==Boolean.class){sb.append(\"\t[flag]\t\");sb.append(description);}else{sb.append(\"\t[\");if(type.isArray()){StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");}else{StringtypeName=getTypeName(type);sb.append(typeName);}sb.append(\"]\t\");sb.append(description);if(defaultValue!=null){sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");}}errStream.println(sb);}privatestaticStringgetTypeName(Class<?>type){StringtypeName=type.getName();intbeginIndex=typeName.lastIndexOf(\".\");typeName=typeName.substring(beginIndex+1);returntypeName;}staticStringgetName(Argumentargument,PropertyDescriptorproperty){Stringname=argument.value();if(name.equals(\"\")){name=property.getName();}returnname;}privatestaticObjectconsumeArgumentValue(Stringname,Class<?>type,Argumentargument,Iterator<String>i){Objectvalue;if(type==Boolean.TYPE||type==Boolean.class){value=true;}else{if(i.hasNext()){value=i.next();i.remove();}else{thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name);}}returnvalue;}staticvoidsetProperty(Class<?>type,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter){try{value=getValue(type,value,delimiter);property.getWriteMethod().invoke(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);}}staticStringgetAlias(Argumentargument){Stringalias=argument.alias();if(alias.equals(\"\")){alias=null;}returnalias;}staticStringgetName(Argumentargument,Fieldfield){Stringname=argument.value();if(name.equals(\"\")){name=field.getName();}returnname;}staticvoidsetField(Class<?>type,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter){makeAccessible(field);try{value=getValue(type,value,delimiter);field.set(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}}privatestaticObjectgetValue(Class<?>type,Objectvalue,Stringdelimiter)throwsNoSuchMethodException{if(type!=String.class&&type!=Boolean.class&&type!=Boolean.TYPE){Stringstring=(String)value;if(type.isArray()){String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}}else{value=createValue(type,string);}}returnvalue;}privatestaticObjectcreateValue(Class<?>type,StringvalueAsString)throwsNoSuchMethodException{for(ValueCreatorvalueCreator:valueCreators){ObjectcreatedValue=valueCreator.createValue(type,valueAsString);if(createdValue!=null){returncreatedValue;}}thrownewIllegalArgumentException(String.format(\"cannot instanciate any %s object using %s value\",type.toString(),valueAsString));}privatestaticvoidmakeAccessible(AccessibleObjectao){if(aoinstanceofMember){Membermember=(Member)ao;if(!Modifier.isPublic(member.getModifiers())){ao.setAccessible(true);}}}publicstaticinterfaceValueCreator{publicObjectcreateValue(Class<?>type,Stringvalue);}publicstaticValueCreatorbyStaticMethodInvocation(finalClass<?>compatibleType,finalStringmethodName){returnnewValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv;}};}publicstaticfinalValueCreatorFROM_STRING_CONSTRUCTOR=newValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);}returnv;}};publicstaticfinalValueCreatorENUM_CREATOR=newValueCreator(){@SuppressWarnings({\"unchecked\",\"rawtypes\"})publicObjectcreateValue(Classtype,Stringvalue){if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);}returnnull;}};privatestaticfinalList<ValueCreator>DEFAULT_VALUE_CREATORS=Arrays.asList(Args.FROM_STRING_CONSTRUCTOR,Args.ENUM_CREATOR);privatestaticList<ValueCreator>valueCreators=newArrayList<ValueCreator>(DEFAULT_VALUE_CREATORS);publicstaticvoidregisterValueCreator(ValueCreatorvc){valueCreators.add(vc);}publicstaticvoidresetValueCreators(){valueCreators.clear();valueCreators.addAll(DEFAULT_VALUE_CREATORS);}} "]
39494[label="methodDeclaration\n publicstaticList<String>parseOrExit(Objecttarget,String[]args){try{returnparse(target,args);}catch(IllegalArgumentExceptione){System.err.println(e.getMessage());Args.usage(target);System.exit(1);throwe;}} "]
49495[label="methodModifier\n public "]
49496[label="methodModifier\n static "]
49497[label="methodHeader\n List<String>parseOrExit(Objecttarget,String[]args) "]
59498[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
69499[label="typeArguments\n <String> "]
79500[label="classType_lfno_classOrInterfaceType\n String "]
59501[label="methodDeclarator\n parseOrExit(Objecttarget,String[]args) "]
69502[label="formalParameterList\n Objecttarget,String[]args "]
79503[label="formalParameter\n Objecttarget "]
89504[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
89505[label="variableDeclaratorId\n target "]
79506[label="formalParameter\n String[]args "]
89507[label="unannArrayType\n String[] "]
99508[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
99509[label="dims\n [] "]
89510[label="variableDeclaratorId\n args "]
49511[label="block\n {try{returnparse(target,args);}catch(IllegalArgumentExceptione){System.err.println(e.getMessage());Args.usage(target);System.exit(1);throwe;}} "]
59512[label="tryStatement\n try{returnparse(target,args);}catch(IllegalArgumentExceptione){System.err.println(e.getMessage());Args.usage(target);System.exit(1);throwe;} "]
69513[label="block\n {returnparse(target,args);} "]
79514[label="returnStatement\n returnparse(target,args); "]
89515[label="methodInvocation_lfno_primary\n parse(target,args) "]
99516[label="methodName\n parse "]
99517[label="argumentList\n target,args "]
109518[label="expressionName\n target "]
109519[label="expressionName\n args "]
69520[label="catchClause\n catch(IllegalArgumentExceptione){System.err.println(e.getMessage());Args.usage(target);System.exit(1);throwe;} "]
79521[label="catchFormalParameter\n IllegalArgumentExceptione "]
89522[label="unannClassType\n IllegalArgumentException "]
89523[label="variableDeclaratorId\n e "]
79524[label="block\n {System.err.println(e.getMessage());Args.usage(target);System.exit(1);throwe;} "]
89525[label="blockStatements\n System.err.println(e.getMessage());Args.usage(target);System.exit(1);throwe; "]
99526[label="expressionStatement\n System.err.println(e.getMessage()); "]
109527[label="methodInvocation\n System.err.println(e.getMessage()) "]
119528[label="typeName\n System.err "]
129529[label="packageOrTypeName\n System "]
119530[label="methodInvocation_lfno_primary\n e.getMessage() "]
129531[label="typeName\n e "]
99532[label="expressionStatement\n Args.usage(target); "]
109533[label="methodInvocation\n Args.usage(target) "]
119534[label="typeName\n Args "]
119535[label="expressionName\n target "]
99536[label="expressionStatement\n System.exit(1); "]
109537[label="methodInvocation\n System.exit(1) "]
119538[label="typeName\n System "]
119539[label="literal\n 1 "]
99540[label="throwStatement\n throwe; "]
109541[label="expressionName\n e "]
39542[label="methodDeclaration\n publicstaticList<String>parse(Objecttarget,String[]args){returnparse(target,args,true);} "]
49543[label="methodModifier\n public "]
49544[label="methodModifier\n static "]
49545[label="methodHeader\n List<String>parse(Objecttarget,String[]args) "]
59546[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
69547[label="typeArguments\n <String> "]
79548[label="classType_lfno_classOrInterfaceType\n String "]
59549[label="methodDeclarator\n parse(Objecttarget,String[]args) "]
69550[label="formalParameterList\n Objecttarget,String[]args "]
79551[label="formalParameter\n Objecttarget "]
89552[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
89553[label="variableDeclaratorId\n target "]
79554[label="formalParameter\n String[]args "]
89555[label="unannArrayType\n String[] "]
99556[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
99557[label="dims\n [] "]
89558[label="variableDeclaratorId\n args "]
49559[label="block\n {returnparse(target,args,true);} "]
59560[label="returnStatement\n returnparse(target,args,true); "]
69561[label="methodInvocation_lfno_primary\n parse(target,args,true) "]
79562[label="methodName\n parse "]
79563[label="argumentList\n target,args,true "]
89564[label="expressionName\n target "]
89565[label="expressionName\n args "]
89566[label="literal\n true "]
39567[label="methodDeclaration\n publicstaticList<String>parse(Objecttarget,String[]args,booleanfailOnExtraFlags){List<String>arguments=newArrayList<String>();arguments.addAll(Arrays.asList(args));Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}}catch(IntrospectionExceptione){}}for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){processField(target,field,arguments);}}if(failOnExtraFlags){for(Stringargument:arguments){if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);}}}returnarguments;} "]
49568[label="methodModifier\n public "]
49569[label="methodModifier\n static "]
49570[label="methodHeader\n List<String>parse(Objecttarget,String[]args,booleanfailOnExtraFlags) "]
59571[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
69572[label="typeArguments\n <String> "]
79573[label="classType_lfno_classOrInterfaceType\n String "]
59574[label="methodDeclarator\n parse(Objecttarget,String[]args,booleanfailOnExtraFlags) "]
69575[label="formalParameterList\n Objecttarget,String[]args,booleanfailOnExtraFlags "]
79576[label="formalParameters\n Objecttarget,String[]args "]
89577[label="formalParameter\n Objecttarget "]
99578[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
99579[label="variableDeclaratorId\n target "]
89580[label="formalParameter\n String[]args "]
99581[label="unannArrayType\n String[] "]
109582[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
109583[label="dims\n [] "]
99584[label="variableDeclaratorId\n args "]
79585[label="formalParameter\n booleanfailOnExtraFlags "]
89586[label="unannPrimitiveType\n boolean "]
89587[label="variableDeclaratorId\n failOnExtraFlags "]
49588[label="block\n {List<String>arguments=newArrayList<String>();arguments.addAll(Arrays.asList(args));Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}}catch(IntrospectionExceptione){}}for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){processField(target,field,arguments);}}if(failOnExtraFlags){for(Stringargument:arguments){if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);}}}returnarguments;} "]
59589[label="blockStatements\n List<String>arguments=newArrayList<String>();arguments.addAll(Arrays.asList(args));Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}}catch(IntrospectionExceptione){}}for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){processField(target,field,arguments);}}if(failOnExtraFlags){for(Stringargument:arguments){if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);}}}returnarguments; "]
69590[label="localVariableDeclarationStatement\n List<String>arguments=newArrayList<String>(); "]
79591[label="localVariableDeclaration\n List<String>arguments=newArrayList<String>() "]
89592[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
99593[label="typeArguments\n <String> "]
109594[label="classType_lfno_classOrInterfaceType\n String "]
89595[label="variableDeclarator\n arguments=newArrayList<String>() "]
99596[label="variableDeclaratorId\n arguments "]
99597[label="classInstanceCreationExpression_lfno_primary\n newArrayList<String>() "]
109598[label="typeArguments\n <String> "]
119599[label="classType_lfno_classOrInterfaceType\n String "]
69600[label="expressionStatement\n arguments.addAll(Arrays.asList(args)); "]
79601[label="methodInvocation\n arguments.addAll(Arrays.asList(args)) "]
89602[label="typeName\n arguments "]
89603[label="methodInvocation_lfno_primary\n Arrays.asList(args) "]
99604[label="typeName\n Arrays "]
99605[label="expressionName\n args "]
69606[label="localVariableDeclarationStatement\n Class<?>clazz; "]
79607[label="localVariableDeclaration\n Class<?>clazz "]
89608[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
99609[label="typeArguments\n <?> "]
109610[label="wildcard\n ? "]
89611[label="variableDeclaratorId\n clazz "]
69612[label="ifThenElseStatement\n if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}}catch(IntrospectionExceptione){}} "]
79613[label="relationalExpression\n targetinstanceofClass "]
89614[label="expressionName\n target "]
89615[label="classType_lfno_classOrInterfaceType\n Class "]
79616[label="block\n {clazz=(Class)target;} "]
89617[label="expressionStatement\n clazz=(Class)target; "]
99618[label="assignment\n clazz=(Class)target "]
109619[label="expressionName\n clazz "]
109620[label="assignmentOperator\n = "]
109621[label="castExpression\n (Class)target "]
119622[label="classType_lfno_classOrInterfaceType\n Class "]
119623[label="expressionName\n target "]
79624[label="block\n {clazz=target.getClass();try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}}catch(IntrospectionExceptione){}} "]
89625[label="blockStatements\n clazz=target.getClass();try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}}catch(IntrospectionExceptione){} "]
99626[label="expressionStatement\n clazz=target.getClass(); "]
109627[label="assignment\n clazz=target.getClass() "]
119628[label="expressionName\n clazz "]
119629[label="assignmentOperator\n = "]
119630[label="methodInvocation_lfno_primary\n target.getClass() "]
129631[label="typeName\n target "]
99632[label="tryStatement\n try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}}catch(IntrospectionExceptione){} "]
109633[label="block\n {BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}} "]
119634[label="blockStatements\n BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);} "]
129635[label="localVariableDeclarationStatement\n BeanInfoinfo=Introspector.getBeanInfo(clazz); "]
139636[label="localVariableDeclaration\n BeanInfoinfo=Introspector.getBeanInfo(clazz) "]
149637[label="unannClassType_lfno_unannClassOrInterfaceType\n BeanInfo "]
149638[label="variableDeclarator\n info=Introspector.getBeanInfo(clazz) "]
159639[label="variableDeclaratorId\n info "]
159640[label="methodInvocation_lfno_primary\n Introspector.getBeanInfo(clazz) "]
169641[label="typeName\n Introspector "]
169642[label="expressionName\n clazz "]
129643[label="enhancedForStatement\n for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);} "]
139644[label="unannClassType_lfno_unannClassOrInterfaceType\n PropertyDescriptor "]
139645[label="variableDeclaratorId\n pd "]
139646[label="methodInvocation_lfno_primary\n info.getPropertyDescriptors() "]
149647[label="typeName\n info "]
139648[label="block\n {processProperty(target,pd,arguments);} "]
149649[label="expressionStatement\n processProperty(target,pd,arguments); "]
159650[label="methodInvocation\n processProperty(target,pd,arguments) "]
169651[label="methodName\n processProperty "]
169652[label="argumentList\n target,pd,arguments "]
179653[label="expressionName\n target "]
179654[label="expressionName\n pd "]
179655[label="expressionName\n arguments "]
109656[label="catchClause\n catch(IntrospectionExceptione){} "]
119657[label="catchFormalParameter\n IntrospectionExceptione "]
129658[label="unannClassType\n IntrospectionException "]
129659[label="variableDeclaratorId\n e "]
119660[label="block\n {} "]
69661[label="basicForStatement\n for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){processField(target,field,arguments);}} "]
79662[label="localVariableDeclaration\n Class<?>currentClazz=clazz "]
89663[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
99664[label="typeArguments\n <?> "]
109665[label="wildcard\n ? "]
89666[label="variableDeclarator\n currentClazz=clazz "]
99667[label="variableDeclaratorId\n currentClazz "]
99668[label="expressionName\n clazz "]
79669[label="equalityExpression\n currentClazz!=null "]
89670[label="expressionName\n currentClazz "]
89671[label="literal\n null "]
79672[label="assignment\n currentClazz=currentClazz.getSuperclass() "]
89673[label="expressionName\n currentClazz "]
89674[label="assignmentOperator\n = "]
89675[label="methodInvocation_lfno_primary\n currentClazz.getSuperclass() "]
99676[label="typeName\n currentClazz "]
79677[label="block\n {for(Fieldfield:currentClazz.getDeclaredFields()){processField(target,field,arguments);}} "]
89678[label="enhancedForStatement\n for(Fieldfield:currentClazz.getDeclaredFields()){processField(target,field,arguments);} "]
99679[label="unannClassType_lfno_unannClassOrInterfaceType\n Field "]
99680[label="variableDeclaratorId\n field "]
99681[label="methodInvocation_lfno_primary\n currentClazz.getDeclaredFields() "]
109682[label="typeName\n currentClazz "]
99683[label="block\n {processField(target,field,arguments);} "]
109684[label="expressionStatement\n processField(target,field,arguments); "]
119685[label="methodInvocation\n processField(target,field,arguments) "]
129686[label="methodName\n processField "]
129687[label="argumentList\n target,field,arguments "]
139688[label="expressionName\n target "]
139689[label="expressionName\n field "]
139690[label="expressionName\n arguments "]
69691[label="ifThenStatement\n if(failOnExtraFlags){for(Stringargument:arguments){if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);}}} "]
79692[label="expressionName\n failOnExtraFlags "]
79693[label="block\n {for(Stringargument:arguments){if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);}}} "]
89694[label="enhancedForStatement\n for(Stringargument:arguments){if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);}} "]
99695[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
99696[label="variableDeclaratorId\n argument "]
99697[label="expressionName\n arguments "]
99698[label="block\n {if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);}} "]
109699[label="ifThenStatement\n if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);} "]
119700[label="methodInvocation_lfno_primary\n argument.startsWith(\"-\") "]
129701[label="typeName\n argument "]
129702[label="literal\n \"-\" "]
119703[label="block\n {thrownewIllegalArgumentException(\"无效参数: \"+argument);} "]
129704[label="throwStatement\n thrownewIllegalArgumentException(\"无效参数: \"+argument); "]
139705[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"无效参数: \"+argument) "]
149706[label="additiveExpression\n \"无效参数: \"+argument "]
159707[label="literal\n \"无效参数: \" "]
159708[label="expressionName\n argument "]
69709[label="returnStatement\n returnarguments; "]
79710[label="expressionName\n arguments "]
39711[label="methodDeclaration\n privatestaticvoidprocessField(Objecttarget,Fieldfield,List<String>arguments){Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);}}} "]
49712[label="methodModifier\n private "]
49713[label="methodModifier\n static "]
49714[label="methodHeader\n voidprocessField(Objecttarget,Fieldfield,List<String>arguments) "]
59715[label="result\n void "]
59716[label="methodDeclarator\n processField(Objecttarget,Fieldfield,List<String>arguments) "]
69717[label="formalParameterList\n Objecttarget,Fieldfield,List<String>arguments "]
79718[label="formalParameters\n Objecttarget,Fieldfield "]
89719[label="formalParameter\n Objecttarget "]
99720[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
99721[label="variableDeclaratorId\n target "]
89722[label="formalParameter\n Fieldfield "]
99723[label="unannClassType_lfno_unannClassOrInterfaceType\n Field "]
99724[label="variableDeclaratorId\n field "]
79725[label="formalParameter\n List<String>arguments "]
89726[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
99727[label="typeArguments\n <String> "]
109728[label="classType_lfno_classOrInterfaceType\n String "]
89729[label="variableDeclaratorId\n arguments "]
49730[label="block\n {Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);}}} "]
59731[label="blockStatements\n Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);}} "]
69732[label="localVariableDeclarationStatement\n Argumentargument=field.getAnnotation(Argument.class); "]
79733[label="localVariableDeclaration\n Argumentargument=field.getAnnotation(Argument.class) "]
89734[label="unannClassType_lfno_unannClassOrInterfaceType\n Argument "]
89735[label="variableDeclarator\n argument=field.getAnnotation(Argument.class) "]
99736[label="variableDeclaratorId\n argument "]
99737[label="methodInvocation_lfno_primary\n field.getAnnotation(Argument.class) "]
109738[label="typeName\n field "]
109739[label="primaryNoNewArray_lfno_primary\n Argument.class "]
119740[label="typeName\n Argument "]
69741[label="ifThenStatement\n if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);}} "]
79742[label="equalityExpression\n argument!=null "]
89743[label="expressionName\n argument "]
89744[label="literal\n null "]
79745[label="block\n {booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);}} "]
89746[label="blockStatements\n booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);} "]
99747[label="localVariableDeclarationStatement\n booleanset=false; "]
109748[label="localVariableDeclaration\n booleanset=false "]
119749[label="unannPrimitiveType\n boolean "]
119750[label="variableDeclarator\n set=false "]
129751[label="variableDeclaratorId\n set "]
129752[label="literal\n false "]
99753[label="basicForStatement\n for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}} "]
109754[label="localVariableDeclaration\n Iterator<String>i=arguments.iterator() "]
119755[label="unannClassType_lfno_unannClassOrInterfaceType\n Iterator<String> "]
129756[label="typeArguments\n <String> "]
139757[label="classType_lfno_classOrInterfaceType\n String "]
119758[label="variableDeclarator\n i=arguments.iterator() "]
129759[label="variableDeclaratorId\n i "]
129760[label="methodInvocation_lfno_primary\n arguments.iterator() "]
139761[label="typeName\n arguments "]
109762[label="methodInvocation_lfno_primary\n i.hasNext() "]
119763[label="typeName\n i "]
109764[label="block\n {Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}} "]
119765[label="blockStatements\n Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;} "]
129766[label="localVariableDeclarationStatement\n Stringarg=i.next(); "]
139767[label="localVariableDeclaration\n Stringarg=i.next() "]
149768[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
149769[label="variableDeclarator\n arg=i.next() "]
159770[label="variableDeclaratorId\n arg "]
159771[label="methodInvocation_lfno_primary\n i.next() "]
169772[label="typeName\n i "]
129773[label="localVariableDeclarationStatement\n Stringprefix=argument.prefix(); "]
139774[label="localVariableDeclaration\n Stringprefix=argument.prefix() "]
149775[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
149776[label="variableDeclarator\n prefix=argument.prefix() "]
159777[label="variableDeclaratorId\n prefix "]
159778[label="methodInvocation_lfno_primary\n argument.prefix() "]
169779[label="typeName\n argument "]
129780[label="localVariableDeclarationStatement\n Stringdelimiter=argument.delimiter(); "]
139781[label="localVariableDeclaration\n Stringdelimiter=argument.delimiter() "]
149782[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
149783[label="variableDeclarator\n delimiter=argument.delimiter() "]
159784[label="variableDeclaratorId\n delimiter "]
159785[label="methodInvocation_lfno_primary\n argument.delimiter() "]
169786[label="typeName\n argument "]
129787[label="ifThenStatement\n if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;} "]
139788[label="methodInvocation_lfno_primary\n arg.startsWith(prefix) "]
149789[label="typeName\n arg "]
149790[label="expressionName\n prefix "]
139791[label="block\n {Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;} "]
149792[label="blockStatements\n Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break; "]
159793[label="localVariableDeclarationStatement\n Objectvalue; "]
169794[label="localVariableDeclaration\n Objectvalue "]
179795[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
179796[label="variableDeclaratorId\n value "]
159797[label="localVariableDeclarationStatement\n Stringname=getName(argument,field); "]
169798[label="localVariableDeclaration\n Stringname=getName(argument,field) "]
179799[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
179800[label="variableDeclarator\n name=getName(argument,field) "]
189801[label="variableDeclaratorId\n name "]
189802[label="methodInvocation_lfno_primary\n getName(argument,field) "]
199803[label="methodName\n getName "]
199804[label="argumentList\n argument,field "]
209805[label="expressionName\n argument "]
209806[label="expressionName\n field "]
159807[label="localVariableDeclarationStatement\n Stringalias=getAlias(argument); "]
169808[label="localVariableDeclaration\n Stringalias=getAlias(argument) "]
179809[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
179810[label="variableDeclarator\n alias=getAlias(argument) "]
189811[label="variableDeclaratorId\n alias "]
189812[label="methodInvocation_lfno_primary\n getAlias(argument) "]
199813[label="methodName\n getAlias "]
199814[label="expressionName\n argument "]
159815[label="expressionStatement\n arg=arg.substring(prefix.length()); "]
169816[label="assignment\n arg=arg.substring(prefix.length()) "]
179817[label="expressionName\n arg "]
179818[label="assignmentOperator\n = "]
179819[label="methodInvocation_lfno_primary\n arg.substring(prefix.length()) "]
189820[label="typeName\n arg "]
189821[label="methodInvocation_lfno_primary\n prefix.length() "]
199822[label="typeName\n prefix "]
159823[label="localVariableDeclarationStatement\n Class<?>type=field.getType(); "]
169824[label="localVariableDeclaration\n Class<?>type=field.getType() "]
179825[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
189826[label="typeArguments\n <?> "]
199827[label="wildcard\n ? "]
179828[label="variableDeclarator\n type=field.getType() "]
189829[label="variableDeclaratorId\n type "]
189830[label="methodInvocation_lfno_primary\n field.getType() "]
199831[label="typeName\n field "]
159832[label="ifThenStatement\n if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;} "]
169833[label="conditionalOrExpression\n arg.equals(name)||(alias!=null&&arg.equals(alias)) "]
179834[label="methodInvocation_lfno_primary\n arg.equals(name) "]
189835[label="typeName\n arg "]
189836[label="expressionName\n name "]
179837[label="primaryNoNewArray_lfno_primary\n (alias!=null&&arg.equals(alias)) "]
189838[label="conditionalAndExpression\n alias!=null&&arg.equals(alias) "]
199839[label="equalityExpression\n alias!=null "]
209840[label="expressionName\n alias "]
209841[label="literal\n null "]
199842[label="methodInvocation_lfno_primary\n arg.equals(alias) "]
209843[label="typeName\n arg "]
209844[label="expressionName\n alias "]
169845[label="block\n {i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;} "]
179846[label="blockStatements\n i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true; "]
189847[label="expressionStatement\n i.remove(); "]
199848[label="methodInvocation\n i.remove() "]
209849[label="typeName\n i "]
189850[label="expressionStatement\n value=consumeArgumentValue(name,type,argument,i); "]
199851[label="assignment\n value=consumeArgumentValue(name,type,argument,i) "]
209852[label="expressionName\n value "]
209853[label="assignmentOperator\n = "]
209854[label="methodInvocation_lfno_primary\n consumeArgumentValue(name,type,argument,i) "]
219855[label="methodName\n consumeArgumentValue "]
219856[label="argumentList\n name,type,argument,i "]
229857[label="expressionName\n name "]
229858[label="expressionName\n type "]
229859[label="expressionName\n argument "]
229860[label="expressionName\n i "]
189861[label="ifThenElseStatement\n if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);} "]
199862[label="unaryExpressionNotPlusMinus\n !set "]
209863[label="expressionName\n set "]
199864[label="block\n {setField(type,field,target,value,delimiter);} "]
209865[label="expressionStatement\n setField(type,field,target,value,delimiter); "]
219866[label="methodInvocation\n setField(type,field,target,value,delimiter) "]
229867[label="methodName\n setField "]
229868[label="argumentList\n type,field,target,value,delimiter "]
239869[label="expressionName\n type "]
239870[label="expressionName\n field "]
239871[label="expressionName\n target "]
239872[label="expressionName\n value "]
239873[label="expressionName\n delimiter "]
199874[label="block\n {addArgument(type,field,target,value,delimiter);} "]
209875[label="expressionStatement\n addArgument(type,field,target,value,delimiter); "]
219876[label="methodInvocation\n addArgument(type,field,target,value,delimiter) "]
229877[label="methodName\n addArgument "]
229878[label="argumentList\n type,field,target,value,delimiter "]
239879[label="expressionName\n type "]
239880[label="expressionName\n field "]
239881[label="expressionName\n target "]
239882[label="expressionName\n value "]
239883[label="expressionName\n delimiter "]
189884[label="expressionStatement\n set=true; "]
199885[label="assignment\n set=true "]
209886[label="expressionName\n set "]
209887[label="assignmentOperator\n = "]
209888[label="literal\n true "]
159889[label="ifThenStatement\n if(set&&!type.isArray())break; "]
169890[label="conditionalAndExpression\n set&&!type.isArray() "]
179891[label="expressionName\n set "]
179892[label="unaryExpressionNotPlusMinus\n !type.isArray() "]
189893[label="methodInvocation_lfno_primary\n type.isArray() "]
199894[label="typeName\n type "]
169895[label="breakStatement\n break; "]
99896[label="ifThenStatement\n if(!set&&argument.required()){Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);} "]
109897[label="conditionalAndExpression\n !set&&argument.required() "]
119898[label="unaryExpressionNotPlusMinus\n !set "]
129899[label="expressionName\n set "]
119900[label="methodInvocation_lfno_primary\n argument.required() "]
129901[label="typeName\n argument "]
109902[label="block\n {Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);} "]
119903[label="blockStatements\n Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name); "]
129904[label="localVariableDeclarationStatement\n Stringname=getName(argument,field); "]
139905[label="localVariableDeclaration\n Stringname=getName(argument,field) "]
149906[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
149907[label="variableDeclarator\n name=getName(argument,field) "]
159908[label="variableDeclaratorId\n name "]
159909[label="methodInvocation_lfno_primary\n getName(argument,field) "]
169910[label="methodName\n getName "]
169911[label="argumentList\n argument,field "]
179912[label="expressionName\n argument "]
179913[label="expressionName\n field "]
129914[label="throwStatement\n thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name); "]
139915[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name) "]
149916[label="additiveExpression\n \"缺少必需参数: \"+argument.prefix()+name "]
159917[label="additiveExpression\n \"缺少必需参数: \"+argument.prefix() "]
169918[label="literal\n \"缺少必需参数: \" "]
169919[label="methodInvocation_lfno_primary\n argument.prefix() "]
179920[label="typeName\n argument "]
159921[label="expressionName\n name "]
39922[label="methodDeclaration\n privatestaticvoidaddArgument(Classtype,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter){try{Object[]os=(Object[])field.get(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);field.set(target,s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}} "]
49923[label="methodModifier\n private "]
49924[label="methodModifier\n static "]
49925[label="methodHeader\n voidaddArgument(Classtype,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter) "]
59926[label="result\n void "]
59927[label="methodDeclarator\n addArgument(Classtype,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter) "]
69928[label="formalParameterList\n Classtype,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter "]
79929[label="formalParameters\n Classtype,Fieldfield,Objecttarget,Objectvalue "]
89930[label="formalParameter\n Classtype "]
99931[label="unannClassType_lfno_unannClassOrInterfaceType\n Class "]
99932[label="variableDeclaratorId\n type "]
89933[label="formalParameter\n Fieldfield "]
99934[label="unannClassType_lfno_unannClassOrInterfaceType\n Field "]
99935[label="variableDeclaratorId\n field "]
89936[label="formalParameter\n Objecttarget "]
99937[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
99938[label="variableDeclaratorId\n target "]
89939[label="formalParameter\n Objectvalue "]
99940[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
99941[label="variableDeclaratorId\n value "]
79942[label="formalParameter\n Stringdelimiter "]
89943[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
89944[label="variableDeclaratorId\n delimiter "]
49945[label="block\n {try{Object[]os=(Object[])field.get(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);field.set(target,s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}} "]
59946[label="tryStatement\n try{Object[]os=(Object[])field.get(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);field.set(target,s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
69947[label="block\n {Object[]os=(Object[])field.get(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);field.set(target,s);} "]
79948[label="blockStatements\n Object[]os=(Object[])field.get(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);field.set(target,s); "]
89949[label="localVariableDeclarationStatement\n Object[]os=(Object[])field.get(target); "]
99950[label="localVariableDeclaration\n Object[]os=(Object[])field.get(target) "]
109951[label="unannArrayType\n Object[] "]
119952[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
119953[label="dims\n [] "]
109954[label="variableDeclarator\n os=(Object[])field.get(target) "]
119955[label="variableDeclaratorId\n os "]
119956[label="castExpression\n (Object[])field.get(target) "]
129957[label="arrayType\n Object[] "]
139958[label="classType_lfno_classOrInterfaceType\n Object "]
139959[label="dims\n [] "]
129960[label="methodInvocation_lfno_primary\n field.get(target) "]
139961[label="typeName\n field "]
139962[label="expressionName\n target "]
89963[label="localVariableDeclarationStatement\n Object[]vs=(Object[])getValue(type,value,delimiter); "]
99964[label="localVariableDeclaration\n Object[]vs=(Object[])getValue(type,value,delimiter) "]
109965[label="unannArrayType\n Object[] "]
119966[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
119967[label="dims\n [] "]
109968[label="variableDeclarator\n vs=(Object[])getValue(type,value,delimiter) "]
119969[label="variableDeclaratorId\n vs "]
119970[label="castExpression\n (Object[])getValue(type,value,delimiter) "]
129971[label="arrayType\n Object[] "]
139972[label="classType_lfno_classOrInterfaceType\n Object "]
139973[label="dims\n [] "]
129974[label="methodInvocation_lfno_primary\n getValue(type,value,delimiter) "]
139975[label="methodName\n getValue "]
139976[label="argumentList\n type,value,delimiter "]
149977[label="expressionName\n type "]
149978[label="expressionName\n value "]
149979[label="expressionName\n delimiter "]
89980[label="localVariableDeclarationStatement\n Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length); "]
99981[label="localVariableDeclaration\n Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length) "]
109982[label="unannArrayType\n Object[] "]
119983[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
119984[label="dims\n [] "]
109985[label="variableDeclarator\n s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length) "]
119986[label="variableDeclaratorId\n s "]
119987[label="castExpression\n (Object[])Array.newInstance(type.getComponentType(),os.length+vs.length) "]
129988[label="arrayType\n Object[] "]
139989[label="classType_lfno_classOrInterfaceType\n Object "]
139990[label="dims\n [] "]
129991[label="methodInvocation_lfno_primary\n Array.newInstance(type.getComponentType(),os.length+vs.length) "]
139992[label="typeName\n Array "]
139993[label="argumentList\n type.getComponentType(),os.length+vs.length "]
149994[label="methodInvocation_lfno_primary\n type.getComponentType() "]
159995[label="typeName\n type "]
149996[label="additiveExpression\n os.length+vs.length "]
159997[label="expressionName\n os.length "]
169998[label="ambiguousName\n os "]
159999[label="expressionName\n vs.length "]
1610000[label="ambiguousName\n vs "]
810001[label="expressionStatement\n System.arraycopy(os,0,s,0,os.length); "]
910002[label="methodInvocation\n System.arraycopy(os,0,s,0,os.length) "]
1010003[label="typeName\n System "]
1010004[label="argumentList\n os,0,s,0,os.length "]
1110005[label="expressionName\n os "]
1110006[label="literal\n 0 "]
1110007[label="expressionName\n s "]
1110008[label="literal\n 0 "]
1110009[label="expressionName\n os.length "]
1210010[label="ambiguousName\n os "]
810011[label="expressionStatement\n System.arraycopy(vs,0,s,os.length,vs.length); "]
910012[label="methodInvocation\n System.arraycopy(vs,0,s,os.length,vs.length) "]
1010013[label="typeName\n System "]
1010014[label="argumentList\n vs,0,s,os.length,vs.length "]
1110015[label="expressionName\n vs "]
1110016[label="literal\n 0 "]
1110017[label="expressionName\n s "]
1110018[label="expressionName\n os.length "]
1210019[label="ambiguousName\n os "]
1110020[label="expressionName\n vs.length "]
1210021[label="ambiguousName\n vs "]
810022[label="expressionStatement\n field.set(target,s); "]
910023[label="methodInvocation\n field.set(target,s) "]
1010024[label="typeName\n field "]
1010025[label="argumentList\n target,s "]
1110026[label="expressionName\n target "]
1110027[label="expressionName\n s "]
610028[label="catches\n catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
710029[label="catchClause\n catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);} "]
810030[label="catchFormalParameter\n IllegalAccessExceptioniae "]
910031[label="unannClassType\n IllegalAccessException "]
910032[label="variableDeclaratorId\n iae "]
810033[label="block\n {thrownewIllegalArgumentException(\"Could not set field \"+field,iae);} "]
910034[label="throwStatement\n thrownewIllegalArgumentException(\"Could not set field \"+field,iae); "]
1010035[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not set field \"+field,iae) "]
1110036[label="argumentList\n \"Could not set field \"+field,iae "]
1210037[label="additiveExpression\n \"Could not set field \"+field "]
1310038[label="literal\n \"Could not set field \" "]
1310039[label="expressionName\n field "]
1210040[label="expressionName\n iae "]
710041[label="catchClause\n catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
810042[label="catchFormalParameter\n NoSuchMethodExceptione "]
910043[label="unannClassType\n NoSuchMethodException "]
910044[label="variableDeclaratorId\n e "]
810045[label="block\n {thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
910046[label="throwStatement\n thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e); "]
1010047[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e) "]
1110048[label="argumentList\n \"Could not find constructor in class \"+type.getName()+\" that takes a string\",e "]
1210049[label="additiveExpression\n \"Could not find constructor in class \"+type.getName()+\" that takes a string\" "]
1310050[label="additiveExpression\n \"Could not find constructor in class \"+type.getName() "]
1410051[label="literal\n \"Could not find constructor in class \" "]
1410052[label="methodInvocation_lfno_primary\n type.getName() "]
1510053[label="typeName\n type "]
1310054[label="literal\n \" that takes a string\" "]
1210055[label="expressionName\n e "]
310056[label="methodDeclaration\n privatestaticvoidaddPropertyArgument(Classtype,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter){try{Object[]os=(Object[])property.getReadMethod().invoke(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);property.getWriteMethod().invoke(target,(Object)s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);}} "]
410057[label="methodModifier\n private "]
410058[label="methodModifier\n static "]
410059[label="methodHeader\n voidaddPropertyArgument(Classtype,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter) "]
510060[label="result\n void "]
510061[label="methodDeclarator\n addPropertyArgument(Classtype,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter) "]
610062[label="formalParameterList\n Classtype,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter "]
710063[label="formalParameters\n Classtype,PropertyDescriptorproperty,Objecttarget,Objectvalue "]
810064[label="formalParameter\n Classtype "]
910065[label="unannClassType_lfno_unannClassOrInterfaceType\n Class "]
910066[label="variableDeclaratorId\n type "]
810067[label="formalParameter\n PropertyDescriptorproperty "]
910068[label="unannClassType_lfno_unannClassOrInterfaceType\n PropertyDescriptor "]
910069[label="variableDeclaratorId\n property "]
810070[label="formalParameter\n Objecttarget "]
910071[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
910072[label="variableDeclaratorId\n target "]
810073[label="formalParameter\n Objectvalue "]
910074[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
910075[label="variableDeclaratorId\n value "]
710076[label="formalParameter\n Stringdelimiter "]
810077[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
810078[label="variableDeclaratorId\n delimiter "]
410079[label="block\n {try{Object[]os=(Object[])property.getReadMethod().invoke(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);property.getWriteMethod().invoke(target,(Object)s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);}} "]
510080[label="tryStatement\n try{Object[]os=(Object[])property.getReadMethod().invoke(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);property.getWriteMethod().invoke(target,(Object)s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);} "]
610081[label="block\n {Object[]os=(Object[])property.getReadMethod().invoke(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);property.getWriteMethod().invoke(target,(Object)s);} "]
710082[label="blockStatements\n Object[]os=(Object[])property.getReadMethod().invoke(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);property.getWriteMethod().invoke(target,(Object)s); "]
810083[label="localVariableDeclarationStatement\n Object[]os=(Object[])property.getReadMethod().invoke(target); "]
910084[label="localVariableDeclaration\n Object[]os=(Object[])property.getReadMethod().invoke(target) "]
1010085[label="unannArrayType\n Object[] "]
1110086[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
1110087[label="dims\n [] "]
1010088[label="variableDeclarator\n os=(Object[])property.getReadMethod().invoke(target) "]
1110089[label="variableDeclaratorId\n os "]
1110090[label="castExpression\n (Object[])property.getReadMethod().invoke(target) "]
1210091[label="arrayType\n Object[] "]
1310092[label="classType_lfno_classOrInterfaceType\n Object "]
1310093[label="dims\n [] "]
1210094[label="primary\n property.getReadMethod().invoke(target) "]
1310095[label="methodInvocation_lfno_primary\n property.getReadMethod() "]
1410096[label="typeName\n property "]
1310097[label="methodInvocation_lf_primary\n .invoke(target) "]
1410098[label="expressionName\n target "]
810099[label="localVariableDeclarationStatement\n Object[]vs=(Object[])getValue(type,value,delimiter); "]
910100[label="localVariableDeclaration\n Object[]vs=(Object[])getValue(type,value,delimiter) "]
1010101[label="unannArrayType\n Object[] "]
1110102[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
1110103[label="dims\n [] "]
1010104[label="variableDeclarator\n vs=(Object[])getValue(type,value,delimiter) "]
1110105[label="variableDeclaratorId\n vs "]
1110106[label="castExpression\n (Object[])getValue(type,value,delimiter) "]
1210107[label="arrayType\n Object[] "]
1310108[label="classType_lfno_classOrInterfaceType\n Object "]
1310109[label="dims\n [] "]
1210110[label="methodInvocation_lfno_primary\n getValue(type,value,delimiter) "]
1310111[label="methodName\n getValue "]
1310112[label="argumentList\n type,value,delimiter "]
1410113[label="expressionName\n type "]
1410114[label="expressionName\n value "]
1410115[label="expressionName\n delimiter "]
810116[label="localVariableDeclarationStatement\n Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length); "]
910117[label="localVariableDeclaration\n Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length) "]
1010118[label="unannArrayType\n Object[] "]
1110119[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
1110120[label="dims\n [] "]
1010121[label="variableDeclarator\n s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length) "]
1110122[label="variableDeclaratorId\n s "]
1110123[label="castExpression\n (Object[])Array.newInstance(type.getComponentType(),os.length+vs.length) "]
1210124[label="arrayType\n Object[] "]
1310125[label="classType_lfno_classOrInterfaceType\n Object "]
1310126[label="dims\n [] "]
1210127[label="methodInvocation_lfno_primary\n Array.newInstance(type.getComponentType(),os.length+vs.length) "]
1310128[label="typeName\n Array "]
1310129[label="argumentList\n type.getComponentType(),os.length+vs.length "]
1410130[label="methodInvocation_lfno_primary\n type.getComponentType() "]
1510131[label="typeName\n type "]
1410132[label="additiveExpression\n os.length+vs.length "]
1510133[label="expressionName\n os.length "]
1610134[label="ambiguousName\n os "]
1510135[label="expressionName\n vs.length "]
1610136[label="ambiguousName\n vs "]
810137[label="expressionStatement\n System.arraycopy(os,0,s,0,os.length); "]
910138[label="methodInvocation\n System.arraycopy(os,0,s,0,os.length) "]
1010139[label="typeName\n System "]
1010140[label="argumentList\n os,0,s,0,os.length "]
1110141[label="expressionName\n os "]
1110142[label="literal\n 0 "]
1110143[label="expressionName\n s "]
1110144[label="literal\n 0 "]
1110145[label="expressionName\n os.length "]
1210146[label="ambiguousName\n os "]
810147[label="expressionStatement\n System.arraycopy(vs,0,s,os.length,vs.length); "]
910148[label="methodInvocation\n System.arraycopy(vs,0,s,os.length,vs.length) "]
1010149[label="typeName\n System "]
1010150[label="argumentList\n vs,0,s,os.length,vs.length "]
1110151[label="expressionName\n vs "]
1110152[label="literal\n 0 "]
1110153[label="expressionName\n s "]
1110154[label="expressionName\n os.length "]
1210155[label="ambiguousName\n os "]
1110156[label="expressionName\n vs.length "]
1210157[label="ambiguousName\n vs "]
810158[label="expressionStatement\n property.getWriteMethod().invoke(target,(Object)s); "]
910159[label="methodInvocation\n property.getWriteMethod().invoke(target,(Object)s) "]
1010160[label="methodInvocation_lfno_primary\n property.getWriteMethod() "]
1110161[label="typeName\n property "]
1010162[label="argumentList\n target,(Object)s "]
1110163[label="expressionName\n target "]
1110164[label="castExpression\n (Object)s "]
1210165[label="classType_lfno_classOrInterfaceType\n Object "]
1210166[label="expressionName\n s "]
610167[label="catches\n catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);} "]
710168[label="catchClause\n catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);} "]
810169[label="catchFormalParameter\n IllegalAccessExceptioniae "]
910170[label="unannClassType\n IllegalAccessException "]
910171[label="variableDeclaratorId\n iae "]
810172[label="block\n {thrownewIllegalArgumentException(\"Could not set property \"+property,iae);} "]
910173[label="throwStatement\n thrownewIllegalArgumentException(\"Could not set property \"+property,iae); "]
1010174[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not set property \"+property,iae) "]
1110175[label="argumentList\n \"Could not set property \"+property,iae "]
1210176[label="additiveExpression\n \"Could not set property \"+property "]
1310177[label="literal\n \"Could not set property \" "]
1310178[label="expressionName\n property "]
1210179[label="expressionName\n iae "]
710180[label="catchClause\n catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
810181[label="catchFormalParameter\n NoSuchMethodExceptione "]
910182[label="unannClassType\n NoSuchMethodException "]
910183[label="variableDeclaratorId\n e "]
810184[label="block\n {thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
910185[label="throwStatement\n thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e); "]
1010186[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e) "]
1110187[label="argumentList\n \"Could not find constructor in class \"+type.getName()+\" that takes a string\",e "]
1210188[label="additiveExpression\n \"Could not find constructor in class \"+type.getName()+\" that takes a string\" "]
1310189[label="additiveExpression\n \"Could not find constructor in class \"+type.getName() "]
1410190[label="literal\n \"Could not find constructor in class \" "]
1410191[label="methodInvocation_lfno_primary\n type.getName() "]
1510192[label="typeName\n type "]
1310193[label="literal\n \" that takes a string\" "]
1210194[label="expressionName\n e "]
710195[label="catchClause\n catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);} "]
810196[label="catchFormalParameter\n InvocationTargetExceptione "]
910197[label="unannClassType\n InvocationTargetException "]
910198[label="variableDeclaratorId\n e "]
810199[label="block\n {thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);} "]
910200[label="throwStatement\n thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property); "]
1010201[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property) "]
1110202[label="additiveExpression\n \"Failed to validate argument \"+value+\" for \"+property "]
1210203[label="additiveExpression\n \"Failed to validate argument \"+value+\" for \" "]
1310204[label="additiveExpression\n \"Failed to validate argument \"+value "]
1410205[label="literal\n \"Failed to validate argument \" "]
1410206[label="expressionName\n value "]
1310207[label="literal\n \" for \" "]
1210208[label="expressionName\n property "]
310209[label="methodDeclaration\n privatestaticvoidprocessProperty(Objecttarget,PropertyDescriptorproperty,List<String>arguments){MethodwriteMethod=property.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}}}} "]
410210[label="methodModifier\n private "]
410211[label="methodModifier\n static "]
410212[label="methodHeader\n voidprocessProperty(Objecttarget,PropertyDescriptorproperty,List<String>arguments) "]
510213[label="result\n void "]
510214[label="methodDeclarator\n processProperty(Objecttarget,PropertyDescriptorproperty,List<String>arguments) "]
610215[label="formalParameterList\n Objecttarget,PropertyDescriptorproperty,List<String>arguments "]
710216[label="formalParameters\n Objecttarget,PropertyDescriptorproperty "]
810217[label="formalParameter\n Objecttarget "]
910218[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
910219[label="variableDeclaratorId\n target "]
810220[label="formalParameter\n PropertyDescriptorproperty "]
910221[label="unannClassType_lfno_unannClassOrInterfaceType\n PropertyDescriptor "]
910222[label="variableDeclaratorId\n property "]
710223[label="formalParameter\n List<String>arguments "]
810224[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
910225[label="typeArguments\n <String> "]
1010226[label="classType_lfno_classOrInterfaceType\n String "]
810227[label="variableDeclaratorId\n arguments "]
410228[label="block\n {MethodwriteMethod=property.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}}}} "]
510229[label="blockStatements\n MethodwriteMethod=property.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}}} "]
610230[label="localVariableDeclarationStatement\n MethodwriteMethod=property.getWriteMethod(); "]
710231[label="localVariableDeclaration\n MethodwriteMethod=property.getWriteMethod() "]
810232[label="unannClassType_lfno_unannClassOrInterfaceType\n Method "]
810233[label="variableDeclarator\n writeMethod=property.getWriteMethod() "]
910234[label="variableDeclaratorId\n writeMethod "]
910235[label="methodInvocation_lfno_primary\n property.getWriteMethod() "]
1010236[label="typeName\n property "]
610237[label="ifThenStatement\n if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}}} "]
710238[label="equalityExpression\n writeMethod!=null "]
810239[label="expressionName\n writeMethod "]
810240[label="literal\n null "]
710241[label="block\n {Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}}} "]
810242[label="blockStatements\n Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}} "]
910243[label="localVariableDeclarationStatement\n Argumentargument=writeMethod.getAnnotation(Argument.class); "]
1010244[label="localVariableDeclaration\n Argumentargument=writeMethod.getAnnotation(Argument.class) "]
1110245[label="unannClassType_lfno_unannClassOrInterfaceType\n Argument "]
1110246[label="variableDeclarator\n argument=writeMethod.getAnnotation(Argument.class) "]
1210247[label="variableDeclaratorId\n argument "]
1210248[label="methodInvocation_lfno_primary\n writeMethod.getAnnotation(Argument.class) "]
1310249[label="typeName\n writeMethod "]
1310250[label="primaryNoNewArray_lfno_primary\n Argument.class "]
1410251[label="typeName\n Argument "]
910252[label="ifThenStatement\n if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}} "]
1010253[label="equalityExpression\n argument!=null "]
1110254[label="expressionName\n argument "]
1110255[label="literal\n null "]
1010256[label="block\n {booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}} "]
1110257[label="blockStatements\n booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);} "]
1210258[label="localVariableDeclarationStatement\n booleanset=false; "]
1310259[label="localVariableDeclaration\n booleanset=false "]
1410260[label="unannPrimitiveType\n boolean "]
1410261[label="variableDeclarator\n set=false "]
1510262[label="variableDeclaratorId\n set "]
1510263[label="literal\n false "]
1210264[label="basicForStatement\n for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}} "]
1310265[label="localVariableDeclaration\n Iterator<String>i=arguments.iterator() "]
1410266[label="unannClassType_lfno_unannClassOrInterfaceType\n Iterator<String> "]
1510267[label="typeArguments\n <String> "]
1610268[label="classType_lfno_classOrInterfaceType\n String "]
1410269[label="variableDeclarator\n i=arguments.iterator() "]
1510270[label="variableDeclaratorId\n i "]
1510271[label="methodInvocation_lfno_primary\n arguments.iterator() "]
1610272[label="typeName\n arguments "]
1310273[label="methodInvocation_lfno_primary\n i.hasNext() "]
1410274[label="typeName\n i "]
1310275[label="block\n {Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}} "]
1410276[label="blockStatements\n Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;} "]
1510277[label="localVariableDeclarationStatement\n Stringarg=i.next(); "]
1610278[label="localVariableDeclaration\n Stringarg=i.next() "]
1710279[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1710280[label="variableDeclarator\n arg=i.next() "]
1810281[label="variableDeclaratorId\n arg "]
1810282[label="methodInvocation_lfno_primary\n i.next() "]
1910283[label="typeName\n i "]
1510284[label="localVariableDeclarationStatement\n Stringprefix=argument.prefix(); "]
1610285[label="localVariableDeclaration\n Stringprefix=argument.prefix() "]
1710286[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1710287[label="variableDeclarator\n prefix=argument.prefix() "]
1810288[label="variableDeclaratorId\n prefix "]
1810289[label="methodInvocation_lfno_primary\n argument.prefix() "]
1910290[label="typeName\n argument "]
1510291[label="localVariableDeclarationStatement\n Stringdelimiter=argument.delimiter(); "]
1610292[label="localVariableDeclaration\n Stringdelimiter=argument.delimiter() "]
1710293[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1710294[label="variableDeclarator\n delimiter=argument.delimiter() "]
1810295[label="variableDeclaratorId\n delimiter "]
1810296[label="methodInvocation_lfno_primary\n argument.delimiter() "]
1910297[label="typeName\n argument "]
1510298[label="ifThenStatement\n if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;} "]
1610299[label="methodInvocation_lfno_primary\n arg.startsWith(prefix) "]
1710300[label="typeName\n arg "]
1710301[label="expressionName\n prefix "]
1610302[label="block\n {Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;} "]
1710303[label="blockStatements\n Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break; "]
1810304[label="localVariableDeclarationStatement\n Objectvalue; "]
1910305[label="localVariableDeclaration\n Objectvalue "]
2010306[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
2010307[label="variableDeclaratorId\n value "]
1810308[label="localVariableDeclarationStatement\n Stringname=getName(argument,property); "]
1910309[label="localVariableDeclaration\n Stringname=getName(argument,property) "]
2010310[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
2010311[label="variableDeclarator\n name=getName(argument,property) "]
2110312[label="variableDeclaratorId\n name "]
2110313[label="methodInvocation_lfno_primary\n getName(argument,property) "]
2210314[label="methodName\n getName "]
2210315[label="argumentList\n argument,property "]
2310316[label="expressionName\n argument "]
2310317[label="expressionName\n property "]
1810318[label="localVariableDeclarationStatement\n Stringalias=getAlias(argument); "]
1910319[label="localVariableDeclaration\n Stringalias=getAlias(argument) "]
2010320[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
2010321[label="variableDeclarator\n alias=getAlias(argument) "]
2110322[label="variableDeclaratorId\n alias "]
2110323[label="methodInvocation_lfno_primary\n getAlias(argument) "]
2210324[label="methodName\n getAlias "]
2210325[label="expressionName\n argument "]
1810326[label="expressionStatement\n arg=arg.substring(prefix.length()); "]
1910327[label="assignment\n arg=arg.substring(prefix.length()) "]
2010328[label="expressionName\n arg "]
2010329[label="assignmentOperator\n = "]
2010330[label="methodInvocation_lfno_primary\n arg.substring(prefix.length()) "]
2110331[label="typeName\n arg "]
2110332[label="methodInvocation_lfno_primary\n prefix.length() "]
2210333[label="typeName\n prefix "]
1810334[label="localVariableDeclarationStatement\n Class<?>type=property.getPropertyType(); "]
1910335[label="localVariableDeclaration\n Class<?>type=property.getPropertyType() "]
2010336[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
2110337[label="typeArguments\n <?> "]
2210338[label="wildcard\n ? "]
2010339[label="variableDeclarator\n type=property.getPropertyType() "]
2110340[label="variableDeclaratorId\n type "]
2110341[label="methodInvocation_lfno_primary\n property.getPropertyType() "]
2210342[label="typeName\n property "]
1810343[label="ifThenStatement\n if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;} "]
1910344[label="conditionalOrExpression\n arg.equals(name)||(alias!=null&&arg.equals(alias)) "]
2010345[label="methodInvocation_lfno_primary\n arg.equals(name) "]
2110346[label="typeName\n arg "]
2110347[label="expressionName\n name "]
2010348[label="primaryNoNewArray_lfno_primary\n (alias!=null&&arg.equals(alias)) "]
2110349[label="conditionalAndExpression\n alias!=null&&arg.equals(alias) "]
2210350[label="equalityExpression\n alias!=null "]
2310351[label="expressionName\n alias "]
2310352[label="literal\n null "]
2210353[label="methodInvocation_lfno_primary\n arg.equals(alias) "]
2310354[label="typeName\n arg "]
2310355[label="expressionName\n alias "]
1910356[label="block\n {i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;} "]
2010357[label="blockStatements\n i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true; "]
2110358[label="expressionStatement\n i.remove(); "]
2210359[label="methodInvocation\n i.remove() "]
2310360[label="typeName\n i "]
2110361[label="expressionStatement\n value=consumeArgumentValue(name,type,argument,i); "]
2210362[label="assignment\n value=consumeArgumentValue(name,type,argument,i) "]
2310363[label="expressionName\n value "]
2310364[label="assignmentOperator\n = "]
2310365[label="methodInvocation_lfno_primary\n consumeArgumentValue(name,type,argument,i) "]
2410366[label="methodName\n consumeArgumentValue "]
2410367[label="argumentList\n name,type,argument,i "]
2510368[label="expressionName\n name "]
2510369[label="expressionName\n type "]
2510370[label="expressionName\n argument "]
2510371[label="expressionName\n i "]
2110372[label="ifThenElseStatement\n if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);} "]
2210373[label="unaryExpressionNotPlusMinus\n !set "]
2310374[label="expressionName\n set "]
2210375[label="block\n {setProperty(type,property,target,value,delimiter);} "]
2310376[label="expressionStatement\n setProperty(type,property,target,value,delimiter); "]
2410377[label="methodInvocation\n setProperty(type,property,target,value,delimiter) "]
2510378[label="methodName\n setProperty "]
2510379[label="argumentList\n type,property,target,value,delimiter "]
2610380[label="expressionName\n type "]
2610381[label="expressionName\n property "]
2610382[label="expressionName\n target "]
2610383[label="expressionName\n value "]
2610384[label="expressionName\n delimiter "]
2210385[label="block\n {addPropertyArgument(type,property,target,value,delimiter);} "]
2310386[label="expressionStatement\n addPropertyArgument(type,property,target,value,delimiter); "]
2410387[label="methodInvocation\n addPropertyArgument(type,property,target,value,delimiter) "]
2510388[label="methodName\n addPropertyArgument "]
2510389[label="argumentList\n type,property,target,value,delimiter "]
2610390[label="expressionName\n type "]
2610391[label="expressionName\n property "]
2610392[label="expressionName\n target "]
2610393[label="expressionName\n value "]
2610394[label="expressionName\n delimiter "]
2110395[label="expressionStatement\n set=true; "]
2210396[label="assignment\n set=true "]
2310397[label="expressionName\n set "]
2310398[label="assignmentOperator\n = "]
2310399[label="literal\n true "]
1810400[label="ifThenStatement\n if(set&&!type.isArray())break; "]
1910401[label="conditionalAndExpression\n set&&!type.isArray() "]
2010402[label="expressionName\n set "]
2010403[label="unaryExpressionNotPlusMinus\n !type.isArray() "]
2110404[label="methodInvocation_lfno_primary\n type.isArray() "]
2210405[label="typeName\n type "]
1910406[label="breakStatement\n break; "]
1210407[label="ifThenStatement\n if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);} "]
1310408[label="conditionalAndExpression\n !set&&argument.required() "]
1410409[label="unaryExpressionNotPlusMinus\n !set "]
1510410[label="expressionName\n set "]
1410411[label="methodInvocation_lfno_primary\n argument.required() "]
1510412[label="typeName\n argument "]
1310413[label="block\n {Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);} "]
1410414[label="blockStatements\n Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name); "]
1510415[label="localVariableDeclarationStatement\n Stringname=getName(argument,property); "]
1610416[label="localVariableDeclaration\n Stringname=getName(argument,property) "]
1710417[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1710418[label="variableDeclarator\n name=getName(argument,property) "]
1810419[label="variableDeclaratorId\n name "]
1810420[label="methodInvocation_lfno_primary\n getName(argument,property) "]
1910421[label="methodName\n getName "]
1910422[label="argumentList\n argument,property "]
2010423[label="expressionName\n argument "]
2010424[label="expressionName\n property "]
1510425[label="throwStatement\n thrownewIllegalArgumentException(\"You must set argument \"+name); "]
1610426[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"You must set argument \"+name) "]
1710427[label="additiveExpression\n \"You must set argument \"+name "]
1810428[label="literal\n \"You must set argument \" "]
1810429[label="expressionName\n name "]
310430[label="methodDeclaration\n publicstaticvoidusage(Objecttarget){usage(System.err,target);} "]
410431[label="methodModifier\n public "]
410432[label="methodModifier\n static "]
410433[label="methodHeader\n voidusage(Objecttarget) "]
510434[label="result\n void "]
510435[label="methodDeclarator\n usage(Objecttarget) "]
610436[label="formalParameter\n Objecttarget "]
710437[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
710438[label="variableDeclaratorId\n target "]
410439[label="block\n {usage(System.err,target);} "]
510440[label="expressionStatement\n usage(System.err,target); "]
610441[label="methodInvocation\n usage(System.err,target) "]
710442[label="methodName\n usage "]
710443[label="argumentList\n System.err,target "]
810444[label="expressionName\n System.err "]
910445[label="ambiguousName\n System "]
810446[label="expressionName\n target "]
310447[label="methodDeclaration\n publicstaticvoidusage(PrintStreamerrStream,Objecttarget){Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();}StringclazzName=clazz.getName();{intindex=clazzName.lastIndexOf('$');if(index>0){clazzName=clazzName.substring(0,index);}}errStream.println(\"用法: \"+clazzName);for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){fieldUsage(errStream,target,field);}}try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){propertyUsage(errStream,target,pd);}}catch(IntrospectionExceptione){}} "]
410448[label="methodModifier\n public "]
410449[label="methodModifier\n static "]
410450[label="methodHeader\n voidusage(PrintStreamerrStream,Objecttarget) "]
510451[label="result\n void "]
510452[label="methodDeclarator\n usage(PrintStreamerrStream,Objecttarget) "]
610453[label="formalParameterList\n PrintStreamerrStream,Objecttarget "]
710454[label="formalParameter\n PrintStreamerrStream "]
810455[label="unannClassType_lfno_unannClassOrInterfaceType\n PrintStream "]
810456[label="variableDeclaratorId\n errStream "]
710457[label="formalParameter\n Objecttarget "]
810458[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
810459[label="variableDeclaratorId\n target "]
410460[label="block\n {Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();}StringclazzName=clazz.getName();{intindex=clazzName.lastIndexOf('$');if(index>0){clazzName=clazzName.substring(0,index);}}errStream.println(\"用法: \"+clazzName);for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){fieldUsage(errStream,target,field);}}try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){propertyUsage(errStream,target,pd);}}catch(IntrospectionExceptione){}} "]
510461[label="blockStatements\n Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();}StringclazzName=clazz.getName();{intindex=clazzName.lastIndexOf('$');if(index>0){clazzName=clazzName.substring(0,index);}}errStream.println(\"用法: \"+clazzName);for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){fieldUsage(errStream,target,field);}}try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){propertyUsage(errStream,target,pd);}}catch(IntrospectionExceptione){} "]
610462[label="localVariableDeclarationStatement\n Class<?>clazz; "]
710463[label="localVariableDeclaration\n Class<?>clazz "]
810464[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
910465[label="typeArguments\n <?> "]
1010466[label="wildcard\n ? "]
810467[label="variableDeclaratorId\n clazz "]
610468[label="ifThenElseStatement\n if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();} "]
710469[label="relationalExpression\n targetinstanceofClass "]
810470[label="expressionName\n target "]
810471[label="classType_lfno_classOrInterfaceType\n Class "]
710472[label="block\n {clazz=(Class)target;} "]
810473[label="expressionStatement\n clazz=(Class)target; "]
910474[label="assignment\n clazz=(Class)target "]
1010475[label="expressionName\n clazz "]
1010476[label="assignmentOperator\n = "]
1010477[label="castExpression\n (Class)target "]
1110478[label="classType_lfno_classOrInterfaceType\n Class "]
1110479[label="expressionName\n target "]
710480[label="block\n {clazz=target.getClass();} "]
810481[label="expressionStatement\n clazz=target.getClass(); "]
910482[label="assignment\n clazz=target.getClass() "]
1010483[label="expressionName\n clazz "]
1010484[label="assignmentOperator\n = "]
1010485[label="methodInvocation_lfno_primary\n target.getClass() "]
1110486[label="typeName\n target "]
610487[label="localVariableDeclarationStatement\n StringclazzName=clazz.getName(); "]
710488[label="localVariableDeclaration\n StringclazzName=clazz.getName() "]
810489[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
810490[label="variableDeclarator\n clazzName=clazz.getName() "]
910491[label="variableDeclaratorId\n clazzName "]
910492[label="methodInvocation_lfno_primary\n clazz.getName() "]
1010493[label="typeName\n clazz "]
610494[label="block\n {intindex=clazzName.lastIndexOf('$');if(index>0){clazzName=clazzName.substring(0,index);}} "]
710495[label="blockStatements\n intindex=clazzName.lastIndexOf('$');if(index>0){clazzName=clazzName.substring(0,index);} "]
810496[label="localVariableDeclarationStatement\n intindex=clazzName.lastIndexOf('$'); "]
910497[label="localVariableDeclaration\n intindex=clazzName.lastIndexOf('$') "]
1010498[label="integralType\n int "]
1010499[label="variableDeclarator\n index=clazzName.lastIndexOf('$') "]
1110500[label="variableDeclaratorId\n index "]
1110501[label="methodInvocation_lfno_primary\n clazzName.lastIndexOf('$') "]
1210502[label="typeName\n clazzName "]
1210503[label="literal\n '$' "]
810504[label="ifThenStatement\n if(index>0){clazzName=clazzName.substring(0,index);} "]
910505[label="relationalExpression\n index>0 "]
1010506[label="expressionName\n index "]
1010507[label="literal\n 0 "]
910508[label="block\n {clazzName=clazzName.substring(0,index);} "]
1010509[label="expressionStatement\n clazzName=clazzName.substring(0,index); "]
1110510[label="assignment\n clazzName=clazzName.substring(0,index) "]
1210511[label="expressionName\n clazzName "]
1210512[label="assignmentOperator\n = "]
1210513[label="methodInvocation_lfno_primary\n clazzName.substring(0,index) "]
1310514[label="typeName\n clazzName "]
1310515[label="argumentList\n 0,index "]
1410516[label="literal\n 0 "]
1410517[label="expressionName\n index "]
610518[label="expressionStatement\n errStream.println(\"用法: \"+clazzName); "]
710519[label="methodInvocation\n errStream.println(\"用法: \"+clazzName) "]
810520[label="typeName\n errStream "]
810521[label="additiveExpression\n \"用法: \"+clazzName "]
910522[label="literal\n \"用法: \" "]
910523[label="expressionName\n clazzName "]
610524[label="basicForStatement\n for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){fieldUsage(errStream,target,field);}} "]
710525[label="localVariableDeclaration\n Class<?>currentClazz=clazz "]
810526[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
910527[label="typeArguments\n <?> "]
1010528[label="wildcard\n ? "]
810529[label="variableDeclarator\n currentClazz=clazz "]
910530[label="variableDeclaratorId\n currentClazz "]
910531[label="expressionName\n clazz "]
710532[label="equalityExpression\n currentClazz!=null "]
810533[label="expressionName\n currentClazz "]
810534[label="literal\n null "]
710535[label="assignment\n currentClazz=currentClazz.getSuperclass() "]
810536[label="expressionName\n currentClazz "]
810537[label="assignmentOperator\n = "]
810538[label="methodInvocation_lfno_primary\n currentClazz.getSuperclass() "]
910539[label="typeName\n currentClazz "]
710540[label="block\n {for(Fieldfield:currentClazz.getDeclaredFields()){fieldUsage(errStream,target,field);}} "]
810541[label="enhancedForStatement\n for(Fieldfield:currentClazz.getDeclaredFields()){fieldUsage(errStream,target,field);} "]
910542[label="unannClassType_lfno_unannClassOrInterfaceType\n Field "]
910543[label="variableDeclaratorId\n field "]
910544[label="methodInvocation_lfno_primary\n currentClazz.getDeclaredFields() "]
1010545[label="typeName\n currentClazz "]
910546[label="block\n {fieldUsage(errStream,target,field);} "]
1010547[label="expressionStatement\n fieldUsage(errStream,target,field); "]
1110548[label="methodInvocation\n fieldUsage(errStream,target,field) "]
1210549[label="methodName\n fieldUsage "]
1210550[label="argumentList\n errStream,target,field "]
1310551[label="expressionName\n errStream "]
1310552[label="expressionName\n target "]
1310553[label="expressionName\n field "]
610554[label="tryStatement\n try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){propertyUsage(errStream,target,pd);}}catch(IntrospectionExceptione){} "]
710555[label="block\n {BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){propertyUsage(errStream,target,pd);}} "]
810556[label="blockStatements\n BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){propertyUsage(errStream,target,pd);} "]
910557[label="localVariableDeclarationStatement\n BeanInfoinfo=Introspector.getBeanInfo(clazz); "]
1010558[label="localVariableDeclaration\n BeanInfoinfo=Introspector.getBeanInfo(clazz) "]
1110559[label="unannClassType_lfno_unannClassOrInterfaceType\n BeanInfo "]
1110560[label="variableDeclarator\n info=Introspector.getBeanInfo(clazz) "]
1210561[label="variableDeclaratorId\n info "]
1210562[label="methodInvocation_lfno_primary\n Introspector.getBeanInfo(clazz) "]
1310563[label="typeName\n Introspector "]
1310564[label="expressionName\n clazz "]
910565[label="enhancedForStatement\n for(PropertyDescriptorpd:info.getPropertyDescriptors()){propertyUsage(errStream,target,pd);} "]
1010566[label="unannClassType_lfno_unannClassOrInterfaceType\n PropertyDescriptor "]
1010567[label="variableDeclaratorId\n pd "]
1010568[label="methodInvocation_lfno_primary\n info.getPropertyDescriptors() "]
1110569[label="typeName\n info "]
1010570[label="block\n {propertyUsage(errStream,target,pd);} "]
1110571[label="expressionStatement\n propertyUsage(errStream,target,pd); "]
1210572[label="methodInvocation\n propertyUsage(errStream,target,pd) "]
1310573[label="methodName\n propertyUsage "]
1310574[label="argumentList\n errStream,target,pd "]
1410575[label="expressionName\n errStream "]
1410576[label="expressionName\n target "]
1410577[label="expressionName\n pd "]
710578[label="catchClause\n catch(IntrospectionExceptione){} "]
810579[label="catchFormalParameter\n IntrospectionExceptione "]
910580[label="unannClassType\n IntrospectionException "]
910581[label="variableDeclaratorId\n e "]
810582[label="block\n {} "]
310583[label="methodDeclaration\n privatestaticvoidfieldUsage(PrintStreamerrStream,Objecttarget,Fieldfield){Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();makeAccessible(field);try{ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}}} "]
410584[label="methodModifier\n private "]
410585[label="methodModifier\n static "]
410586[label="methodHeader\n voidfieldUsage(PrintStreamerrStream,Objecttarget,Fieldfield) "]
510587[label="result\n void "]
510588[label="methodDeclarator\n fieldUsage(PrintStreamerrStream,Objecttarget,Fieldfield) "]
610589[label="formalParameterList\n PrintStreamerrStream,Objecttarget,Fieldfield "]
710590[label="formalParameters\n PrintStreamerrStream,Objecttarget "]
810591[label="formalParameter\n PrintStreamerrStream "]
910592[label="unannClassType_lfno_unannClassOrInterfaceType\n PrintStream "]
910593[label="variableDeclaratorId\n errStream "]
810594[label="formalParameter\n Objecttarget "]
910595[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
910596[label="variableDeclaratorId\n target "]
710597[label="formalParameter\n Fieldfield "]
810598[label="unannClassType_lfno_unannClassOrInterfaceType\n Field "]
810599[label="variableDeclaratorId\n field "]
410600[label="block\n {Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();makeAccessible(field);try{ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}}} "]
510601[label="blockStatements\n Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();makeAccessible(field);try{ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}} "]
610602[label="localVariableDeclarationStatement\n Argumentargument=field.getAnnotation(Argument.class); "]
710603[label="localVariableDeclaration\n Argumentargument=field.getAnnotation(Argument.class) "]
810604[label="unannClassType_lfno_unannClassOrInterfaceType\n Argument "]
810605[label="variableDeclarator\n argument=field.getAnnotation(Argument.class) "]
910606[label="variableDeclaratorId\n argument "]
910607[label="methodInvocation_lfno_primary\n field.getAnnotation(Argument.class) "]
1010608[label="typeName\n field "]
1010609[label="primaryNoNewArray_lfno_primary\n Argument.class "]
1110610[label="typeName\n Argument "]
610611[label="ifThenStatement\n if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();makeAccessible(field);try{ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}} "]
710612[label="equalityExpression\n argument!=null "]
810613[label="expressionName\n argument "]
810614[label="literal\n null "]
710615[label="block\n {Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();makeAccessible(field);try{ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}} "]
810616[label="blockStatements\n Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();makeAccessible(field);try{ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);} "]
910617[label="localVariableDeclarationStatement\n Stringname=getName(argument,field); "]
1010618[label="localVariableDeclaration\n Stringname=getName(argument,field) "]
1110619[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1110620[label="variableDeclarator\n name=getName(argument,field) "]
1210621[label="variableDeclaratorId\n name "]
1210622[label="methodInvocation_lfno_primary\n getName(argument,field) "]
1310623[label="methodName\n getName "]
1310624[label="argumentList\n argument,field "]
1410625[label="expressionName\n argument "]
1410626[label="expressionName\n field "]
910627[label="localVariableDeclarationStatement\n Stringalias=getAlias(argument); "]
1010628[label="localVariableDeclaration\n Stringalias=getAlias(argument) "]
1110629[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1110630[label="variableDeclarator\n alias=getAlias(argument) "]
1210631[label="variableDeclaratorId\n alias "]
1210632[label="methodInvocation_lfno_primary\n getAlias(argument) "]
1310633[label="methodName\n getAlias "]
1310634[label="expressionName\n argument "]
910635[label="localVariableDeclarationStatement\n Stringprefix=argument.prefix(); "]
1010636[label="localVariableDeclaration\n Stringprefix=argument.prefix() "]
1110637[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1110638[label="variableDeclarator\n prefix=argument.prefix() "]
1210639[label="variableDeclaratorId\n prefix "]
1210640[label="methodInvocation_lfno_primary\n argument.prefix() "]
1310641[label="typeName\n argument "]
910642[label="localVariableDeclarationStatement\n Stringdelimiter=argument.delimiter(); "]
1010643[label="localVariableDeclaration\n Stringdelimiter=argument.delimiter() "]
1110644[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1110645[label="variableDeclarator\n delimiter=argument.delimiter() "]
1210646[label="variableDeclaratorId\n delimiter "]
1210647[label="methodInvocation_lfno_primary\n argument.delimiter() "]
1310648[label="typeName\n argument "]
910649[label="localVariableDeclarationStatement\n Stringdescription=argument.description(); "]
1010650[label="localVariableDeclaration\n Stringdescription=argument.description() "]
1110651[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1110652[label="variableDeclarator\n description=argument.description() "]
1210653[label="variableDeclaratorId\n description "]
1210654[label="methodInvocation_lfno_primary\n argument.description() "]
1310655[label="typeName\n argument "]
910656[label="expressionStatement\n makeAccessible(field); "]
1010657[label="methodInvocation\n makeAccessible(field) "]
1110658[label="methodName\n makeAccessible "]
1110659[label="expressionName\n field "]
910660[label="tryStatement\n try{ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);} "]
1010661[label="block\n {ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);} "]
1110662[label="blockStatements\n ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue); "]
1210663[label="localVariableDeclarationStatement\n ObjectdefaultValue=field.get(target); "]
1310664[label="localVariableDeclaration\n ObjectdefaultValue=field.get(target) "]
1410665[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
1410666[label="variableDeclarator\n defaultValue=field.get(target) "]
1510667[label="variableDeclaratorId\n defaultValue "]
1510668[label="methodInvocation_lfno_primary\n field.get(target) "]
1610669[label="typeName\n field "]
1610670[label="expressionName\n target "]
1210671[label="localVariableDeclarationStatement\n Class<?>type=field.getType(); "]
1310672[label="localVariableDeclaration\n Class<?>type=field.getType() "]
1410673[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
1510674[label="typeArguments\n <?> "]
1610675[label="wildcard\n ? "]
1410676[label="variableDeclarator\n type=field.getType() "]
1510677[label="variableDeclaratorId\n type "]
1510678[label="methodInvocation_lfno_primary\n field.getType() "]
1610679[label="typeName\n field "]
1210680[label="expressionStatement\n propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue); "]
1310681[label="methodInvocation\n propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue) "]
1410682[label="methodName\n propertyUsage "]
1410683[label="argumentList\n errStream,prefix,name,alias,type,delimiter,description,defaultValue "]
1510684[label="expressionName\n errStream "]
1510685[label="expressionName\n prefix "]
1510686[label="expressionName\n name "]
1510687[label="expressionName\n alias "]
1510688[label="expressionName\n type "]
1510689[label="expressionName\n delimiter "]
1510690[label="expressionName\n description "]
1510691[label="expressionName\n defaultValue "]
1010692[label="catchClause\n catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);} "]
1110693[label="catchFormalParameter\n IllegalAccessExceptione "]
1210694[label="unannClassType\n IllegalAccessException "]
1210695[label="variableDeclaratorId\n e "]
1110696[label="block\n {thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);} "]
1210697[label="throwStatement\n thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e); "]
1310698[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e) "]
1410699[label="argumentList\n \"Could not use thie field \"+field+\" as an argument field\",e "]
1510700[label="additiveExpression\n \"Could not use thie field \"+field+\" as an argument field\" "]
1610701[label="additiveExpression\n \"Could not use thie field \"+field "]
1710702[label="literal\n \"Could not use thie field \" "]
1710703[label="expressionName\n field "]
1610704[label="literal\n \" as an argument field\" "]
1510705[label="expressionName\n e "]
310706[label="methodDeclaration\n privatestaticvoidpropertyUsage(PrintStreamerrStream,Objecttarget,PropertyDescriptorfield){MethodwriteMethod=field.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}}}} "]
410707[label="methodModifier\n private "]
410708[label="methodModifier\n static "]
410709[label="methodHeader\n voidpropertyUsage(PrintStreamerrStream,Objecttarget,PropertyDescriptorfield) "]
510710[label="result\n void "]
510711[label="methodDeclarator\n propertyUsage(PrintStreamerrStream,Objecttarget,PropertyDescriptorfield) "]
610712[label="formalParameterList\n PrintStreamerrStream,Objecttarget,PropertyDescriptorfield "]
710713[label="formalParameters\n PrintStreamerrStream,Objecttarget "]
810714[label="formalParameter\n PrintStreamerrStream "]
910715[label="unannClassType_lfno_unannClassOrInterfaceType\n PrintStream "]
910716[label="variableDeclaratorId\n errStream "]
810717[label="formalParameter\n Objecttarget "]
910718[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
910719[label="variableDeclaratorId\n target "]
710720[label="formalParameter\n PropertyDescriptorfield "]
810721[label="unannClassType_lfno_unannClassOrInterfaceType\n PropertyDescriptor "]
810722[label="variableDeclaratorId\n field "]
410723[label="block\n {MethodwriteMethod=field.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}}}} "]
510724[label="blockStatements\n MethodwriteMethod=field.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}}} "]
610725[label="localVariableDeclarationStatement\n MethodwriteMethod=field.getWriteMethod(); "]
710726[label="localVariableDeclaration\n MethodwriteMethod=field.getWriteMethod() "]
810727[label="unannClassType_lfno_unannClassOrInterfaceType\n Method "]
810728[label="variableDeclarator\n writeMethod=field.getWriteMethod() "]
910729[label="variableDeclaratorId\n writeMethod "]
910730[label="methodInvocation_lfno_primary\n field.getWriteMethod() "]
1010731[label="typeName\n field "]
610732[label="ifThenStatement\n if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}}} "]
710733[label="equalityExpression\n writeMethod!=null "]
810734[label="expressionName\n writeMethod "]
810735[label="literal\n null "]
710736[label="block\n {Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}}} "]
810737[label="blockStatements\n Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}} "]
910738[label="localVariableDeclarationStatement\n Argumentargument=writeMethod.getAnnotation(Argument.class); "]
1010739[label="localVariableDeclaration\n Argumentargument=writeMethod.getAnnotation(Argument.class) "]
1110740[label="unannClassType_lfno_unannClassOrInterfaceType\n Argument "]
1110741[label="variableDeclarator\n argument=writeMethod.getAnnotation(Argument.class) "]
1210742[label="variableDeclaratorId\n argument "]
1210743[label="methodInvocation_lfno_primary\n writeMethod.getAnnotation(Argument.class) "]
1310744[label="typeName\n writeMethod "]
1310745[label="primaryNoNewArray_lfno_primary\n Argument.class "]
1410746[label="typeName\n Argument "]
910747[label="ifThenStatement\n if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}} "]
1010748[label="equalityExpression\n argument!=null "]
1110749[label="expressionName\n argument "]
1110750[label="literal\n null "]
1010751[label="block\n {Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}} "]
1110752[label="blockStatements\n Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);} "]
1210753[label="localVariableDeclarationStatement\n Stringname=getName(argument,field); "]
1310754[label="localVariableDeclaration\n Stringname=getName(argument,field) "]
1410755[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1410756[label="variableDeclarator\n name=getName(argument,field) "]
1510757[label="variableDeclaratorId\n name "]
1510758[label="methodInvocation_lfno_primary\n getName(argument,field) "]
1610759[label="methodName\n getName "]
1610760[label="argumentList\n argument,field "]
1710761[label="expressionName\n argument "]
1710762[label="expressionName\n field "]
1210763[label="localVariableDeclarationStatement\n Stringalias=getAlias(argument); "]
1310764[label="localVariableDeclaration\n Stringalias=getAlias(argument) "]
1410765[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1410766[label="variableDeclarator\n alias=getAlias(argument) "]
1510767[label="variableDeclaratorId\n alias "]
1510768[label="methodInvocation_lfno_primary\n getAlias(argument) "]
1610769[label="methodName\n getAlias "]
1610770[label="expressionName\n argument "]
1210771[label="localVariableDeclarationStatement\n Stringprefix=argument.prefix(); "]
1310772[label="localVariableDeclaration\n Stringprefix=argument.prefix() "]
1410773[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1410774[label="variableDeclarator\n prefix=argument.prefix() "]
1510775[label="variableDeclaratorId\n prefix "]
1510776[label="methodInvocation_lfno_primary\n argument.prefix() "]
1610777[label="typeName\n argument "]
1210778[label="localVariableDeclarationStatement\n Stringdelimiter=argument.delimiter(); "]
1310779[label="localVariableDeclaration\n Stringdelimiter=argument.delimiter() "]
1410780[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1410781[label="variableDeclarator\n delimiter=argument.delimiter() "]
1510782[label="variableDeclaratorId\n delimiter "]
1510783[label="methodInvocation_lfno_primary\n argument.delimiter() "]
1610784[label="typeName\n argument "]
1210785[label="localVariableDeclarationStatement\n Stringdescription=argument.description(); "]
1310786[label="localVariableDeclaration\n Stringdescription=argument.description() "]
1410787[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1410788[label="variableDeclarator\n description=argument.description() "]
1510789[label="variableDeclaratorId\n description "]
1510790[label="methodInvocation_lfno_primary\n argument.description() "]
1610791[label="typeName\n argument "]
1210792[label="tryStatement\n try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);} "]
1310793[label="block\n {MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);} "]
1410794[label="blockStatements\n MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue); "]
1510795[label="localVariableDeclarationStatement\n MethodreadMethod=field.getReadMethod(); "]
1610796[label="localVariableDeclaration\n MethodreadMethod=field.getReadMethod() "]
1710797[label="unannClassType_lfno_unannClassOrInterfaceType\n Method "]
1710798[label="variableDeclarator\n readMethod=field.getReadMethod() "]
1810799[label="variableDeclaratorId\n readMethod "]
1810800[label="methodInvocation_lfno_primary\n field.getReadMethod() "]
1910801[label="typeName\n field "]
1510802[label="localVariableDeclarationStatement\n ObjectdefaultValue; "]
1610803[label="localVariableDeclaration\n ObjectdefaultValue "]
1710804[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
1710805[label="variableDeclaratorId\n defaultValue "]
1510806[label="ifThenElseStatement\n if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);} "]
1610807[label="equalityExpression\n readMethod==null "]
1710808[label="expressionName\n readMethod "]
1710809[label="literal\n null "]
1610810[label="block\n {defaultValue=null;} "]
1710811[label="expressionStatement\n defaultValue=null; "]
1810812[label="assignment\n defaultValue=null "]
1910813[label="expressionName\n defaultValue "]
1910814[label="assignmentOperator\n = "]
1910815[label="literal\n null "]
1610816[label="block\n {defaultValue=readMethod.invoke(target,(Object[])null);} "]
1710817[label="expressionStatement\n defaultValue=readMethod.invoke(target,(Object[])null); "]
1810818[label="assignment\n defaultValue=readMethod.invoke(target,(Object[])null) "]
1910819[label="expressionName\n defaultValue "]
1910820[label="assignmentOperator\n = "]
1910821[label="methodInvocation_lfno_primary\n readMethod.invoke(target,(Object[])null) "]
2010822[label="typeName\n readMethod "]
2010823[label="argumentList\n target,(Object[])null "]
2110824[label="expressionName\n target "]
2110825[label="castExpression\n (Object[])null "]
2210826[label="arrayType\n Object[] "]
2310827[label="classType_lfno_classOrInterfaceType\n Object "]
2310828[label="dims\n [] "]
2210829[label="literal\n null "]
1510830[label="localVariableDeclarationStatement\n Class<?>type=field.getPropertyType(); "]
1610831[label="localVariableDeclaration\n Class<?>type=field.getPropertyType() "]
1710832[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
1810833[label="typeArguments\n <?> "]
1910834[label="wildcard\n ? "]
1710835[label="variableDeclarator\n type=field.getPropertyType() "]
1810836[label="variableDeclaratorId\n type "]
1810837[label="methodInvocation_lfno_primary\n field.getPropertyType() "]
1910838[label="typeName\n field "]
1510839[label="expressionStatement\n propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue); "]
1610840[label="methodInvocation\n propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue) "]
1710841[label="methodName\n propertyUsage "]
1710842[label="argumentList\n errStream,prefix,name,alias,type,delimiter,description,defaultValue "]
1810843[label="expressionName\n errStream "]
1810844[label="expressionName\n prefix "]
1810845[label="expressionName\n name "]
1810846[label="expressionName\n alias "]
1810847[label="expressionName\n type "]
1810848[label="expressionName\n delimiter "]
1810849[label="expressionName\n description "]
1810850[label="expressionName\n defaultValue "]
1310851[label="catches\n catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);} "]
1410852[label="catchClause\n catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);} "]
1510853[label="catchFormalParameter\n IllegalAccessExceptione "]
1610854[label="unannClassType\n IllegalAccessException "]
1610855[label="variableDeclaratorId\n e "]
1510856[label="block\n {thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);} "]
1610857[label="throwStatement\n thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e); "]
1710858[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e) "]
1810859[label="argumentList\n \"Could not use thie field \"+field+\" as an argument field\",e "]
1910860[label="additiveExpression\n \"Could not use thie field \"+field+\" as an argument field\" "]
2010861[label="additiveExpression\n \"Could not use thie field \"+field "]
2110862[label="literal\n \"Could not use thie field \" "]
2110863[label="expressionName\n field "]
2010864[label="literal\n \" as an argument field\" "]
1910865[label="expressionName\n e "]
1410866[label="catchClause\n catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);} "]
1510867[label="catchFormalParameter\n InvocationTargetExceptione "]
1610868[label="unannClassType\n InvocationTargetException "]
1610869[label="variableDeclaratorId\n e "]
1510870[label="block\n {thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);} "]
1610871[label="throwStatement\n thrownewIllegalArgumentException(\"Could not get default value for \"+field,e); "]
1710872[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not get default value for \"+field,e) "]
1810873[label="argumentList\n \"Could not get default value for \"+field,e "]
1910874[label="additiveExpression\n \"Could not get default value for \"+field "]
2010875[label="literal\n \"Could not get default value for \" "]
2010876[label="expressionName\n field "]
1910877[label="expressionName\n e "]
310878[label="methodDeclaration\n privatestaticvoidpropertyUsage(PrintStreamerrStream,Stringprefix,Stringname,Stringalias,Class<?>type,Stringdelimiter,Stringdescription,ObjectdefaultValue){StringBuildersb=newStringBuilder(\"  \");sb.append(prefix);sb.append(name);if(alias!=null){sb.append(\" (\");sb.append(prefix);sb.append(alias);sb.append(\")\");}if(type==Boolean.TYPE||type==Boolean.class){sb.append(\"\t[flag]\t\");sb.append(description);}else{sb.append(\"\t[\");if(type.isArray()){StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");}else{StringtypeName=getTypeName(type);sb.append(typeName);}sb.append(\"]\t\");sb.append(description);if(defaultValue!=null){sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");}}errStream.println(sb);} "]
410879[label="methodModifier\n private "]
410880[label="methodModifier\n static "]
410881[label="methodHeader\n voidpropertyUsage(PrintStreamerrStream,Stringprefix,Stringname,Stringalias,Class<?>type,Stringdelimiter,Stringdescription,ObjectdefaultValue) "]
510882[label="result\n void "]
510883[label="methodDeclarator\n propertyUsage(PrintStreamerrStream,Stringprefix,Stringname,Stringalias,Class<?>type,Stringdelimiter,Stringdescription,ObjectdefaultValue) "]
610884[label="formalParameterList\n PrintStreamerrStream,Stringprefix,Stringname,Stringalias,Class<?>type,Stringdelimiter,Stringdescription,ObjectdefaultValue "]
710885[label="formalParameters\n PrintStreamerrStream,Stringprefix,Stringname,Stringalias,Class<?>type,Stringdelimiter,Stringdescription "]
810886[label="formalParameter\n PrintStreamerrStream "]
910887[label="unannClassType_lfno_unannClassOrInterfaceType\n PrintStream "]
910888[label="variableDeclaratorId\n errStream "]
810889[label="formalParameter\n Stringprefix "]
910890[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
910891[label="variableDeclaratorId\n prefix "]
810892[label="formalParameter\n Stringname "]
910893[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
910894[label="variableDeclaratorId\n name "]
810895[label="formalParameter\n Stringalias "]
910896[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
910897[label="variableDeclaratorId\n alias "]
810898[label="formalParameter\n Class<?>type "]
910899[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
1010900[label="typeArguments\n <?> "]
1110901[label="wildcard\n ? "]
910902[label="variableDeclaratorId\n type "]
810903[label="formalParameter\n Stringdelimiter "]
910904[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
910905[label="variableDeclaratorId\n delimiter "]
810906[label="formalParameter\n Stringdescription "]
910907[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
910908[label="variableDeclaratorId\n description "]
710909[label="formalParameter\n ObjectdefaultValue "]
810910[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
810911[label="variableDeclaratorId\n defaultValue "]
410912[label="block\n {StringBuildersb=newStringBuilder(\"  \");sb.append(prefix);sb.append(name);if(alias!=null){sb.append(\" (\");sb.append(prefix);sb.append(alias);sb.append(\")\");}if(type==Boolean.TYPE||type==Boolean.class){sb.append(\"\t[flag]\t\");sb.append(description);}else{sb.append(\"\t[\");if(type.isArray()){StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");}else{StringtypeName=getTypeName(type);sb.append(typeName);}sb.append(\"]\t\");sb.append(description);if(defaultValue!=null){sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");}}errStream.println(sb);} "]
510913[label="blockStatements\n StringBuildersb=newStringBuilder(\"  \");sb.append(prefix);sb.append(name);if(alias!=null){sb.append(\" (\");sb.append(prefix);sb.append(alias);sb.append(\")\");}if(type==Boolean.TYPE||type==Boolean.class){sb.append(\"\t[flag]\t\");sb.append(description);}else{sb.append(\"\t[\");if(type.isArray()){StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");}else{StringtypeName=getTypeName(type);sb.append(typeName);}sb.append(\"]\t\");sb.append(description);if(defaultValue!=null){sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");}}errStream.println(sb); "]
610914[label="localVariableDeclarationStatement\n StringBuildersb=newStringBuilder(\"  \"); "]
710915[label="localVariableDeclaration\n StringBuildersb=newStringBuilder(\"  \") "]
810916[label="unannClassType_lfno_unannClassOrInterfaceType\n StringBuilder "]
810917[label="variableDeclarator\n sb=newStringBuilder(\"  \") "]
910918[label="variableDeclaratorId\n sb "]
910919[label="classInstanceCreationExpression_lfno_primary\n newStringBuilder(\"  \") "]
1010920[label="literal\n \"  \" "]
610921[label="expressionStatement\n sb.append(prefix); "]
710922[label="methodInvocation\n sb.append(prefix) "]
810923[label="typeName\n sb "]
810924[label="expressionName\n prefix "]
610925[label="expressionStatement\n sb.append(name); "]
710926[label="methodInvocation\n sb.append(name) "]
810927[label="typeName\n sb "]
810928[label="expressionName\n name "]
610929[label="ifThenStatement\n if(alias!=null){sb.append(\" (\");sb.append(prefix);sb.append(alias);sb.append(\")\");} "]
710930[label="equalityExpression\n alias!=null "]
810931[label="expressionName\n alias "]
810932[label="literal\n null "]
710933[label="block\n {sb.append(\" (\");sb.append(prefix);sb.append(alias);sb.append(\")\");} "]
810934[label="blockStatements\n sb.append(\" (\");sb.append(prefix);sb.append(alias);sb.append(\")\"); "]
910935[label="expressionStatement\n sb.append(\" (\"); "]
1010936[label="methodInvocation\n sb.append(\" (\") "]
1110937[label="typeName\n sb "]
1110938[label="literal\n \" (\" "]
910939[label="expressionStatement\n sb.append(prefix); "]
1010940[label="methodInvocation\n sb.append(prefix) "]
1110941[label="typeName\n sb "]
1110942[label="expressionName\n prefix "]
910943[label="expressionStatement\n sb.append(alias); "]
1010944[label="methodInvocation\n sb.append(alias) "]
1110945[label="typeName\n sb "]
1110946[label="expressionName\n alias "]
910947[label="expressionStatement\n sb.append(\")\"); "]
1010948[label="methodInvocation\n sb.append(\")\") "]
1110949[label="typeName\n sb "]
1110950[label="literal\n \")\" "]
610951[label="ifThenElseStatement\n if(type==Boolean.TYPE||type==Boolean.class){sb.append(\"\t[flag]\t\");sb.append(description);}else{sb.append(\"\t[\");if(type.isArray()){StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");}else{StringtypeName=getTypeName(type);sb.append(typeName);}sb.append(\"]\t\");sb.append(description);if(defaultValue!=null){sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");}} "]
710952[label="conditionalOrExpression\n type==Boolean.TYPE||type==Boolean.class "]
810953[label="equalityExpression\n type==Boolean.TYPE "]
910954[label="expressionName\n type "]
910955[label="expressionName\n Boolean.TYPE "]
1010956[label="ambiguousName\n Boolean "]
810957[label="equalityExpression\n type==Boolean.class "]
910958[label="expressionName\n type "]
910959[label="primaryNoNewArray_lfno_primary\n Boolean.class "]
1010960[label="typeName\n Boolean "]
710961[label="block\n {sb.append(\"\t[flag]\t\");sb.append(description);} "]
810962[label="blockStatements\n sb.append(\"\t[flag]\t\");sb.append(description); "]
910963[label="expressionStatement\n sb.append(\"\t[flag]\t\"); "]
1010964[label="methodInvocation\n sb.append(\"\t[flag]\t\") "]
1110965[label="typeName\n sb "]
1110966[label="literal\n \"\t[flag]\t\" "]
910967[label="expressionStatement\n sb.append(description); "]
1010968[label="methodInvocation\n sb.append(description) "]
1110969[label="typeName\n sb "]
1110970[label="expressionName\n description "]
710971[label="block\n {sb.append(\"\t[\");if(type.isArray()){StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");}else{StringtypeName=getTypeName(type);sb.append(typeName);}sb.append(\"]\t\");sb.append(description);if(defaultValue!=null){sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");}} "]
810972[label="blockStatements\n sb.append(\"\t[\");if(type.isArray()){StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");}else{StringtypeName=getTypeName(type);sb.append(typeName);}sb.append(\"]\t\");sb.append(description);if(defaultValue!=null){sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");} "]
910973[label="expressionStatement\n sb.append(\"\t[\"); "]
1010974[label="methodInvocation\n sb.append(\"\t[\") "]
1110975[label="typeName\n sb "]
1110976[label="literal\n \"\t[\" "]
910977[label="ifThenElseStatement\n if(type.isArray()){StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");}else{StringtypeName=getTypeName(type);sb.append(typeName);} "]
1010978[label="methodInvocation_lfno_primary\n type.isArray() "]
1110979[label="typeName\n type "]
1010980[label="block\n {StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");} "]
1110981[label="blockStatements\n StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\"); "]
1210982[label="localVariableDeclarationStatement\n StringtypeName=getTypeName(type.getComponentType()); "]
1310983[label="localVariableDeclaration\n StringtypeName=getTypeName(type.getComponentType()) "]
1410984[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1410985[label="variableDeclarator\n typeName=getTypeName(type.getComponentType()) "]
1510986[label="variableDeclaratorId\n typeName "]
1510987[label="methodInvocation_lfno_primary\n getTypeName(type.getComponentType()) "]
1610988[label="methodName\n getTypeName "]
1610989[label="methodInvocation_lfno_primary\n type.getComponentType() "]
1710990[label="typeName\n type "]
1210991[label="expressionStatement\n sb.append(typeName); "]
1310992[label="methodInvocation\n sb.append(typeName) "]
1410993[label="typeName\n sb "]
1410994[label="expressionName\n typeName "]
1210995[label="expressionStatement\n sb.append(\"[\"); "]
1310996[label="methodInvocation\n sb.append(\"[\") "]
1410997[label="typeName\n sb "]
1410998[label="literal\n \"[\" "]
1210999[label="expressionStatement\n sb.append(delimiter); "]
1311000[label="methodInvocation\n sb.append(delimiter) "]
1411001[label="typeName\n sb "]
1411002[label="expressionName\n delimiter "]
1211003[label="expressionStatement\n sb.append(\"]\"); "]
1311004[label="methodInvocation\n sb.append(\"]\") "]
1411005[label="typeName\n sb "]
1411006[label="literal\n \"]\" "]
1011007[label="block\n {StringtypeName=getTypeName(type);sb.append(typeName);} "]
1111008[label="blockStatements\n StringtypeName=getTypeName(type);sb.append(typeName); "]
1211009[label="localVariableDeclarationStatement\n StringtypeName=getTypeName(type); "]
1311010[label="localVariableDeclaration\n StringtypeName=getTypeName(type) "]
1411011[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1411012[label="variableDeclarator\n typeName=getTypeName(type) "]
1511013[label="variableDeclaratorId\n typeName "]
1511014[label="methodInvocation_lfno_primary\n getTypeName(type) "]
1611015[label="methodName\n getTypeName "]
1611016[label="expressionName\n type "]
1211017[label="expressionStatement\n sb.append(typeName); "]
1311018[label="methodInvocation\n sb.append(typeName) "]
1411019[label="typeName\n sb "]
1411020[label="expressionName\n typeName "]
911021[label="expressionStatement\n sb.append(\"]\t\"); "]
1011022[label="methodInvocation\n sb.append(\"]\t\") "]
1111023[label="typeName\n sb "]
1111024[label="literal\n \"]\t\" "]
911025[label="expressionStatement\n sb.append(description); "]
1011026[label="methodInvocation\n sb.append(description) "]
1111027[label="typeName\n sb "]
1111028[label="expressionName\n description "]
911029[label="ifThenStatement\n if(defaultValue!=null){sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");} "]
1011030[label="equalityExpression\n defaultValue!=null "]
1111031[label="expressionName\n defaultValue "]
1111032[label="literal\n null "]
1011033[label="block\n {sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");} "]
1111034[label="blockStatements\n sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\"); "]
1211035[label="expressionStatement\n sb.append(\" (\"); "]
1311036[label="methodInvocation\n sb.append(\" (\") "]
1411037[label="typeName\n sb "]
1411038[label="literal\n \" (\" "]
1211039[label="ifThenElseStatement\n if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);} "]
1311040[label="methodInvocation_lfno_primary\n type.isArray() "]
1411041[label="typeName\n type "]
1311042[label="block\n {List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);} "]
1411043[label="blockStatements\n List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list); "]
1511044[label="localVariableDeclarationStatement\n List<Object>list=newArrayList<Object>(); "]
1611045[label="localVariableDeclaration\n List<Object>list=newArrayList<Object>() "]
1711046[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Object> "]
1811047[label="typeArguments\n <Object> "]
1911048[label="classType_lfno_classOrInterfaceType\n Object "]
1711049[label="variableDeclarator\n list=newArrayList<Object>() "]
1811050[label="variableDeclaratorId\n list "]
1811051[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Object>() "]
1911052[label="typeArguments\n <Object> "]
2011053[label="classType_lfno_classOrInterfaceType\n Object "]
1511054[label="localVariableDeclarationStatement\n intlen=Array.getLength(defaultValue); "]
1611055[label="localVariableDeclaration\n intlen=Array.getLength(defaultValue) "]
1711056[label="integralType\n int "]
1711057[label="variableDeclarator\n len=Array.getLength(defaultValue) "]
1811058[label="variableDeclaratorId\n len "]
1811059[label="methodInvocation_lfno_primary\n Array.getLength(defaultValue) "]
1911060[label="typeName\n Array "]
1911061[label="expressionName\n defaultValue "]
1511062[label="basicForStatement\n for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));} "]
1611063[label="localVariableDeclaration\n inti=0 "]
1711064[label="integralType\n int "]
1711065[label="variableDeclarator\n i=0 "]
1811066[label="variableDeclaratorId\n i "]
1811067[label="literal\n 0 "]
1611068[label="relationalExpression\n i<len "]
1711069[label="expressionName\n i "]
1711070[label="expressionName\n len "]
1611071[label="postIncrementExpression\n i++ "]
1711072[label="expressionName\n i "]
1611073[label="block\n {list.add(Array.get(defaultValue,i));} "]
1711074[label="expressionStatement\n list.add(Array.get(defaultValue,i)); "]
1811075[label="methodInvocation\n list.add(Array.get(defaultValue,i)) "]
1911076[label="typeName\n list "]
1911077[label="methodInvocation_lfno_primary\n Array.get(defaultValue,i) "]
2011078[label="typeName\n Array "]
2011079[label="argumentList\n defaultValue,i "]
2111080[label="expressionName\n defaultValue "]
2111081[label="expressionName\n i "]
1511082[label="expressionStatement\n sb.append(list); "]
1611083[label="methodInvocation\n sb.append(list) "]
1711084[label="typeName\n sb "]
1711085[label="expressionName\n list "]
1311086[label="block\n {sb.append(defaultValue);} "]
1411087[label="expressionStatement\n sb.append(defaultValue); "]
1511088[label="methodInvocation\n sb.append(defaultValue) "]
1611089[label="typeName\n sb "]
1611090[label="expressionName\n defaultValue "]
1211091[label="expressionStatement\n sb.append(\")\"); "]
1311092[label="methodInvocation\n sb.append(\")\") "]
1411093[label="typeName\n sb "]
1411094[label="literal\n \")\" "]
611095[label="expressionStatement\n errStream.println(sb); "]
711096[label="methodInvocation\n errStream.println(sb) "]
811097[label="typeName\n errStream "]
811098[label="expressionName\n sb "]
311099[label="methodDeclaration\n privatestaticStringgetTypeName(Class<?>type){StringtypeName=type.getName();intbeginIndex=typeName.lastIndexOf(\".\");typeName=typeName.substring(beginIndex+1);returntypeName;} "]
411100[label="methodModifier\n private "]
411101[label="methodModifier\n static "]
411102[label="methodHeader\n StringgetTypeName(Class<?>type) "]
511103[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
511104[label="methodDeclarator\n getTypeName(Class<?>type) "]
611105[label="formalParameter\n Class<?>type "]
711106[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
811107[label="typeArguments\n <?> "]
911108[label="wildcard\n ? "]
711109[label="variableDeclaratorId\n type "]
411110[label="block\n {StringtypeName=type.getName();intbeginIndex=typeName.lastIndexOf(\".\");typeName=typeName.substring(beginIndex+1);returntypeName;} "]
511111[label="blockStatements\n StringtypeName=type.getName();intbeginIndex=typeName.lastIndexOf(\".\");typeName=typeName.substring(beginIndex+1);returntypeName; "]
611112[label="localVariableDeclarationStatement\n StringtypeName=type.getName(); "]
711113[label="localVariableDeclaration\n StringtypeName=type.getName() "]
811114[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
811115[label="variableDeclarator\n typeName=type.getName() "]
911116[label="variableDeclaratorId\n typeName "]
911117[label="methodInvocation_lfno_primary\n type.getName() "]
1011118[label="typeName\n type "]
611119[label="localVariableDeclarationStatement\n intbeginIndex=typeName.lastIndexOf(\".\"); "]
711120[label="localVariableDeclaration\n intbeginIndex=typeName.lastIndexOf(\".\") "]
811121[label="integralType\n int "]
811122[label="variableDeclarator\n beginIndex=typeName.lastIndexOf(\".\") "]
911123[label="variableDeclaratorId\n beginIndex "]
911124[label="methodInvocation_lfno_primary\n typeName.lastIndexOf(\".\") "]
1011125[label="typeName\n typeName "]
1011126[label="literal\n \".\" "]
611127[label="expressionStatement\n typeName=typeName.substring(beginIndex+1); "]
711128[label="assignment\n typeName=typeName.substring(beginIndex+1) "]
811129[label="expressionName\n typeName "]
811130[label="assignmentOperator\n = "]
811131[label="methodInvocation_lfno_primary\n typeName.substring(beginIndex+1) "]
911132[label="typeName\n typeName "]
911133[label="additiveExpression\n beginIndex+1 "]
1011134[label="expressionName\n beginIndex "]
1011135[label="literal\n 1 "]
611136[label="returnStatement\n returntypeName; "]
711137[label="expressionName\n typeName "]
311138[label="methodDeclaration\n staticStringgetName(Argumentargument,PropertyDescriptorproperty){Stringname=argument.value();if(name.equals(\"\")){name=property.getName();}returnname;} "]
411139[label="methodModifier\n static "]
411140[label="methodHeader\n StringgetName(Argumentargument,PropertyDescriptorproperty) "]
511141[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
511142[label="methodDeclarator\n getName(Argumentargument,PropertyDescriptorproperty) "]
611143[label="formalParameterList\n Argumentargument,PropertyDescriptorproperty "]
711144[label="formalParameter\n Argumentargument "]
811145[label="unannClassType_lfno_unannClassOrInterfaceType\n Argument "]
811146[label="variableDeclaratorId\n argument "]
711147[label="formalParameter\n PropertyDescriptorproperty "]
811148[label="unannClassType_lfno_unannClassOrInterfaceType\n PropertyDescriptor "]
811149[label="variableDeclaratorId\n property "]
411150[label="block\n {Stringname=argument.value();if(name.equals(\"\")){name=property.getName();}returnname;} "]
511151[label="blockStatements\n Stringname=argument.value();if(name.equals(\"\")){name=property.getName();}returnname; "]
611152[label="localVariableDeclarationStatement\n Stringname=argument.value(); "]
711153[label="localVariableDeclaration\n Stringname=argument.value() "]
811154[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
811155[label="variableDeclarator\n name=argument.value() "]
911156[label="variableDeclaratorId\n name "]
911157[label="methodInvocation_lfno_primary\n argument.value() "]
1011158[label="typeName\n argument "]
611159[label="ifThenStatement\n if(name.equals(\"\")){name=property.getName();} "]
711160[label="methodInvocation_lfno_primary\n name.equals(\"\") "]
811161[label="typeName\n name "]
811162[label="literal\n \"\" "]
711163[label="block\n {name=property.getName();} "]
811164[label="expressionStatement\n name=property.getName(); "]
911165[label="assignment\n name=property.getName() "]
1011166[label="expressionName\n name "]
1011167[label="assignmentOperator\n = "]
1011168[label="methodInvocation_lfno_primary\n property.getName() "]
1111169[label="typeName\n property "]
611170[label="returnStatement\n returnname; "]
711171[label="expressionName\n name "]
311172[label="methodDeclaration\n privatestaticObjectconsumeArgumentValue(Stringname,Class<?>type,Argumentargument,Iterator<String>i){Objectvalue;if(type==Boolean.TYPE||type==Boolean.class){value=true;}else{if(i.hasNext()){value=i.next();i.remove();}else{thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name);}}returnvalue;} "]
411173[label="methodModifier\n private "]
411174[label="methodModifier\n static "]
411175[label="methodHeader\n ObjectconsumeArgumentValue(Stringname,Class<?>type,Argumentargument,Iterator<String>i) "]
511176[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
511177[label="methodDeclarator\n consumeArgumentValue(Stringname,Class<?>type,Argumentargument,Iterator<String>i) "]
611178[label="formalParameterList\n Stringname,Class<?>type,Argumentargument,Iterator<String>i "]
711179[label="formalParameters\n Stringname,Class<?>type,Argumentargument "]
811180[label="formalParameter\n Stringname "]
911181[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
911182[label="variableDeclaratorId\n name "]
811183[label="formalParameter\n Class<?>type "]
911184[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
1011185[label="typeArguments\n <?> "]
1111186[label="wildcard\n ? "]
911187[label="variableDeclaratorId\n type "]
811188[label="formalParameter\n Argumentargument "]
911189[label="unannClassType_lfno_unannClassOrInterfaceType\n Argument "]
911190[label="variableDeclaratorId\n argument "]
711191[label="formalParameter\n Iterator<String>i "]
811192[label="unannClassType_lfno_unannClassOrInterfaceType\n Iterator<String> "]
911193[label="typeArguments\n <String> "]
1011194[label="classType_lfno_classOrInterfaceType\n String "]
811195[label="variableDeclaratorId\n i "]
411196[label="block\n {Objectvalue;if(type==Boolean.TYPE||type==Boolean.class){value=true;}else{if(i.hasNext()){value=i.next();i.remove();}else{thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name);}}returnvalue;} "]
511197[label="blockStatements\n Objectvalue;if(type==Boolean.TYPE||type==Boolean.class){value=true;}else{if(i.hasNext()){value=i.next();i.remove();}else{thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name);}}returnvalue; "]
611198[label="localVariableDeclarationStatement\n Objectvalue; "]
711199[label="localVariableDeclaration\n Objectvalue "]
811200[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
811201[label="variableDeclaratorId\n value "]
611202[label="ifThenElseStatement\n if(type==Boolean.TYPE||type==Boolean.class){value=true;}else{if(i.hasNext()){value=i.next();i.remove();}else{thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name);}} "]
711203[label="conditionalOrExpression\n type==Boolean.TYPE||type==Boolean.class "]
811204[label="equalityExpression\n type==Boolean.TYPE "]
911205[label="expressionName\n type "]
911206[label="expressionName\n Boolean.TYPE "]
1011207[label="ambiguousName\n Boolean "]
811208[label="equalityExpression\n type==Boolean.class "]
911209[label="expressionName\n type "]
911210[label="primaryNoNewArray_lfno_primary\n Boolean.class "]
1011211[label="typeName\n Boolean "]
711212[label="block\n {value=true;} "]
811213[label="expressionStatement\n value=true; "]
911214[label="assignment\n value=true "]
1011215[label="expressionName\n value "]
1011216[label="assignmentOperator\n = "]
1011217[label="literal\n true "]
711218[label="block\n {if(i.hasNext()){value=i.next();i.remove();}else{thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name);}} "]
811219[label="ifThenElseStatement\n if(i.hasNext()){value=i.next();i.remove();}else{thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name);} "]
911220[label="methodInvocation_lfno_primary\n i.hasNext() "]
1011221[label="typeName\n i "]
911222[label="block\n {value=i.next();i.remove();} "]
1011223[label="blockStatements\n value=i.next();i.remove(); "]
1111224[label="expressionStatement\n value=i.next(); "]
1211225[label="assignment\n value=i.next() "]
1311226[label="expressionName\n value "]
1311227[label="assignmentOperator\n = "]
1311228[label="methodInvocation_lfno_primary\n i.next() "]
1411229[label="typeName\n i "]
1111230[label="expressionStatement\n i.remove(); "]
1211231[label="methodInvocation\n i.remove() "]
1311232[label="typeName\n i "]
911233[label="block\n {thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name);} "]
1011234[label="throwStatement\n thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name); "]
1111235[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name) "]
1211236[label="additiveExpression\n \"非flag参数必须指定值: \"+argument.prefix()+name "]
1311237[label="additiveExpression\n \"非flag参数必须指定值: \"+argument.prefix() "]
1411238[label="literal\n \"非flag参数必须指定值: \" "]
1411239[label="methodInvocation_lfno_primary\n argument.prefix() "]
1511240[label="typeName\n argument "]
1311241[label="expressionName\n name "]
611242[label="returnStatement\n returnvalue; "]
711243[label="expressionName\n value "]
311244[label="methodDeclaration\n staticvoidsetProperty(Class<?>type,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter){try{value=getValue(type,value,delimiter);property.getWriteMethod().invoke(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);}} "]
411245[label="methodModifier\n static "]
411246[label="methodHeader\n voidsetProperty(Class<?>type,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter) "]
511247[label="result\n void "]
511248[label="methodDeclarator\n setProperty(Class<?>type,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter) "]
611249[label="formalParameterList\n Class<?>type,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter "]
711250[label="formalParameters\n Class<?>type,PropertyDescriptorproperty,Objecttarget,Objectvalue "]
811251[label="formalParameter\n Class<?>type "]
911252[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
1011253[label="typeArguments\n <?> "]
1111254[label="wildcard\n ? "]
911255[label="variableDeclaratorId\n type "]
811256[label="formalParameter\n PropertyDescriptorproperty "]
911257[label="unannClassType_lfno_unannClassOrInterfaceType\n PropertyDescriptor "]
911258[label="variableDeclaratorId\n property "]
811259[label="formalParameter\n Objecttarget "]
911260[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
911261[label="variableDeclaratorId\n target "]
811262[label="formalParameter\n Objectvalue "]
911263[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
911264[label="variableDeclaratorId\n value "]
711265[label="formalParameter\n Stringdelimiter "]
811266[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
811267[label="variableDeclaratorId\n delimiter "]
411268[label="block\n {try{value=getValue(type,value,delimiter);property.getWriteMethod().invoke(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);}} "]
511269[label="tryStatement\n try{value=getValue(type,value,delimiter);property.getWriteMethod().invoke(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);} "]
611270[label="block\n {value=getValue(type,value,delimiter);property.getWriteMethod().invoke(target,value);} "]
711271[label="blockStatements\n value=getValue(type,value,delimiter);property.getWriteMethod().invoke(target,value); "]
811272[label="expressionStatement\n value=getValue(type,value,delimiter); "]
911273[label="assignment\n value=getValue(type,value,delimiter) "]
1011274[label="expressionName\n value "]
1011275[label="assignmentOperator\n = "]
1011276[label="methodInvocation_lfno_primary\n getValue(type,value,delimiter) "]
1111277[label="methodName\n getValue "]
1111278[label="argumentList\n type,value,delimiter "]
1211279[label="expressionName\n type "]
1211280[label="expressionName\n value "]
1211281[label="expressionName\n delimiter "]
811282[label="expressionStatement\n property.getWriteMethod().invoke(target,value); "]
911283[label="methodInvocation\n property.getWriteMethod().invoke(target,value) "]
1011284[label="methodInvocation_lfno_primary\n property.getWriteMethod() "]
1111285[label="typeName\n property "]
1011286[label="argumentList\n target,value "]
1111287[label="expressionName\n target "]
1111288[label="expressionName\n value "]
611289[label="catches\n catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);} "]
711290[label="catchClause\n catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);} "]
811291[label="catchFormalParameter\n IllegalAccessExceptioniae "]
911292[label="unannClassType\n IllegalAccessException "]
911293[label="variableDeclaratorId\n iae "]
811294[label="block\n {thrownewIllegalArgumentException(\"Could not set property \"+property,iae);} "]
911295[label="throwStatement\n thrownewIllegalArgumentException(\"Could not set property \"+property,iae); "]
1011296[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not set property \"+property,iae) "]
1111297[label="argumentList\n \"Could not set property \"+property,iae "]
1211298[label="additiveExpression\n \"Could not set property \"+property "]
1311299[label="literal\n \"Could not set property \" "]
1311300[label="expressionName\n property "]
1211301[label="expressionName\n iae "]
711302[label="catchClause\n catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
811303[label="catchFormalParameter\n NoSuchMethodExceptione "]
911304[label="unannClassType\n NoSuchMethodException "]
911305[label="variableDeclaratorId\n e "]
811306[label="block\n {thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
911307[label="throwStatement\n thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e); "]
1011308[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e) "]
1111309[label="argumentList\n \"Could not find constructor in class \"+type.getName()+\" that takes a string\",e "]
1211310[label="additiveExpression\n \"Could not find constructor in class \"+type.getName()+\" that takes a string\" "]
1311311[label="additiveExpression\n \"Could not find constructor in class \"+type.getName() "]
1411312[label="literal\n \"Could not find constructor in class \" "]
1411313[label="methodInvocation_lfno_primary\n type.getName() "]
1511314[label="typeName\n type "]
1311315[label="literal\n \" that takes a string\" "]
1211316[label="expressionName\n e "]
711317[label="catchClause\n catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);} "]
811318[label="catchFormalParameter\n InvocationTargetExceptione "]
911319[label="unannClassType\n InvocationTargetException "]
911320[label="variableDeclaratorId\n e "]
811321[label="block\n {thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);} "]
911322[label="throwStatement\n thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property); "]
1011323[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property) "]
1111324[label="additiveExpression\n \"Failed to validate argument \"+value+\" for \"+property "]
1211325[label="additiveExpression\n \"Failed to validate argument \"+value+\" for \" "]
1311326[label="additiveExpression\n \"Failed to validate argument \"+value "]
1411327[label="literal\n \"Failed to validate argument \" "]
1411328[label="expressionName\n value "]
1311329[label="literal\n \" for \" "]
1211330[label="expressionName\n property "]
311331[label="methodDeclaration\n staticStringgetAlias(Argumentargument){Stringalias=argument.alias();if(alias.equals(\"\")){alias=null;}returnalias;} "]
411332[label="methodModifier\n static "]
411333[label="methodHeader\n StringgetAlias(Argumentargument) "]
511334[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
511335[label="methodDeclarator\n getAlias(Argumentargument) "]
611336[label="formalParameter\n Argumentargument "]
711337[label="unannClassType_lfno_unannClassOrInterfaceType\n Argument "]
711338[label="variableDeclaratorId\n argument "]
411339[label="block\n {Stringalias=argument.alias();if(alias.equals(\"\")){alias=null;}returnalias;} "]
511340[label="blockStatements\n Stringalias=argument.alias();if(alias.equals(\"\")){alias=null;}returnalias; "]
611341[label="localVariableDeclarationStatement\n Stringalias=argument.alias(); "]
711342[label="localVariableDeclaration\n Stringalias=argument.alias() "]
811343[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
811344[label="variableDeclarator\n alias=argument.alias() "]
911345[label="variableDeclaratorId\n alias "]
911346[label="methodInvocation_lfno_primary\n argument.alias() "]
1011347[label="typeName\n argument "]
611348[label="ifThenStatement\n if(alias.equals(\"\")){alias=null;} "]
711349[label="methodInvocation_lfno_primary\n alias.equals(\"\") "]
811350[label="typeName\n alias "]
811351[label="literal\n \"\" "]
711352[label="block\n {alias=null;} "]
811353[label="expressionStatement\n alias=null; "]
911354[label="assignment\n alias=null "]
1011355[label="expressionName\n alias "]
1011356[label="assignmentOperator\n = "]
1011357[label="literal\n null "]
611358[label="returnStatement\n returnalias; "]
711359[label="expressionName\n alias "]
311360[label="methodDeclaration\n staticStringgetName(Argumentargument,Fieldfield){Stringname=argument.value();if(name.equals(\"\")){name=field.getName();}returnname;} "]
411361[label="methodModifier\n static "]
411362[label="methodHeader\n StringgetName(Argumentargument,Fieldfield) "]
511363[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
511364[label="methodDeclarator\n getName(Argumentargument,Fieldfield) "]
611365[label="formalParameterList\n Argumentargument,Fieldfield "]
711366[label="formalParameter\n Argumentargument "]
811367[label="unannClassType_lfno_unannClassOrInterfaceType\n Argument "]
811368[label="variableDeclaratorId\n argument "]
711369[label="formalParameter\n Fieldfield "]
811370[label="unannClassType_lfno_unannClassOrInterfaceType\n Field "]
811371[label="variableDeclaratorId\n field "]
411372[label="block\n {Stringname=argument.value();if(name.equals(\"\")){name=field.getName();}returnname;} "]
511373[label="blockStatements\n Stringname=argument.value();if(name.equals(\"\")){name=field.getName();}returnname; "]
611374[label="localVariableDeclarationStatement\n Stringname=argument.value(); "]
711375[label="localVariableDeclaration\n Stringname=argument.value() "]
811376[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
811377[label="variableDeclarator\n name=argument.value() "]
911378[label="variableDeclaratorId\n name "]
911379[label="methodInvocation_lfno_primary\n argument.value() "]
1011380[label="typeName\n argument "]
611381[label="ifThenStatement\n if(name.equals(\"\")){name=field.getName();} "]
711382[label="methodInvocation_lfno_primary\n name.equals(\"\") "]
811383[label="typeName\n name "]
811384[label="literal\n \"\" "]
711385[label="block\n {name=field.getName();} "]
811386[label="expressionStatement\n name=field.getName(); "]
911387[label="assignment\n name=field.getName() "]
1011388[label="expressionName\n name "]
1011389[label="assignmentOperator\n = "]
1011390[label="methodInvocation_lfno_primary\n field.getName() "]
1111391[label="typeName\n field "]
611392[label="returnStatement\n returnname; "]
711393[label="expressionName\n name "]
311394[label="methodDeclaration\n staticvoidsetField(Class<?>type,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter){makeAccessible(field);try{value=getValue(type,value,delimiter);field.set(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}} "]
411395[label="methodModifier\n static "]
411396[label="methodHeader\n voidsetField(Class<?>type,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter) "]
511397[label="result\n void "]
511398[label="methodDeclarator\n setField(Class<?>type,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter) "]
611399[label="formalParameterList\n Class<?>type,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter "]
711400[label="formalParameters\n Class<?>type,Fieldfield,Objecttarget,Objectvalue "]
811401[label="formalParameter\n Class<?>type "]
911402[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
1011403[label="typeArguments\n <?> "]
1111404[label="wildcard\n ? "]
911405[label="variableDeclaratorId\n type "]
811406[label="formalParameter\n Fieldfield "]
911407[label="unannClassType_lfno_unannClassOrInterfaceType\n Field "]
911408[label="variableDeclaratorId\n field "]
811409[label="formalParameter\n Objecttarget "]
911410[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
911411[label="variableDeclaratorId\n target "]
811412[label="formalParameter\n Objectvalue "]
911413[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
911414[label="variableDeclaratorId\n value "]
711415[label="formalParameter\n Stringdelimiter "]
811416[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
811417[label="variableDeclaratorId\n delimiter "]
411418[label="block\n {makeAccessible(field);try{value=getValue(type,value,delimiter);field.set(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}} "]
511419[label="blockStatements\n makeAccessible(field);try{value=getValue(type,value,delimiter);field.set(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
611420[label="expressionStatement\n makeAccessible(field); "]
711421[label="methodInvocation\n makeAccessible(field) "]
811422[label="methodName\n makeAccessible "]
811423[label="expressionName\n field "]
611424[label="tryStatement\n try{value=getValue(type,value,delimiter);field.set(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
711425[label="block\n {value=getValue(type,value,delimiter);field.set(target,value);} "]
811426[label="blockStatements\n value=getValue(type,value,delimiter);field.set(target,value); "]
911427[label="expressionStatement\n value=getValue(type,value,delimiter); "]
1011428[label="assignment\n value=getValue(type,value,delimiter) "]
1111429[label="expressionName\n value "]
1111430[label="assignmentOperator\n = "]
1111431[label="methodInvocation_lfno_primary\n getValue(type,value,delimiter) "]
1211432[label="methodName\n getValue "]
1211433[label="argumentList\n type,value,delimiter "]
1311434[label="expressionName\n type "]
1311435[label="expressionName\n value "]
1311436[label="expressionName\n delimiter "]
911437[label="expressionStatement\n field.set(target,value); "]
1011438[label="methodInvocation\n field.set(target,value) "]
1111439[label="typeName\n field "]
1111440[label="argumentList\n target,value "]
1211441[label="expressionName\n target "]
1211442[label="expressionName\n value "]
711443[label="catches\n catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
811444[label="catchClause\n catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);} "]
911445[label="catchFormalParameter\n IllegalAccessExceptioniae "]
1011446[label="unannClassType\n IllegalAccessException "]
1011447[label="variableDeclaratorId\n iae "]
911448[label="block\n {thrownewIllegalArgumentException(\"Could not set field \"+field,iae);} "]
1011449[label="throwStatement\n thrownewIllegalArgumentException(\"Could not set field \"+field,iae); "]
1111450[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not set field \"+field,iae) "]
1211451[label="argumentList\n \"Could not set field \"+field,iae "]
1311452[label="additiveExpression\n \"Could not set field \"+field "]
1411453[label="literal\n \"Could not set field \" "]
1411454[label="expressionName\n field "]
1311455[label="expressionName\n iae "]
811456[label="catchClause\n catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
911457[label="catchFormalParameter\n NoSuchMethodExceptione "]
1011458[label="unannClassType\n NoSuchMethodException "]
1011459[label="variableDeclaratorId\n e "]
911460[label="block\n {thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
1011461[label="throwStatement\n thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e); "]
1111462[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e) "]
1211463[label="argumentList\n \"Could not find constructor in class \"+type.getName()+\" that takes a string\",e "]
1311464[label="additiveExpression\n \"Could not find constructor in class \"+type.getName()+\" that takes a string\" "]
1411465[label="additiveExpression\n \"Could not find constructor in class \"+type.getName() "]
1511466[label="literal\n \"Could not find constructor in class \" "]
1511467[label="methodInvocation_lfno_primary\n type.getName() "]
1611468[label="typeName\n type "]
1411469[label="literal\n \" that takes a string\" "]
1311470[label="expressionName\n e "]
311471[label="methodDeclaration\n privatestaticObjectgetValue(Class<?>type,Objectvalue,Stringdelimiter)throwsNoSuchMethodException{if(type!=String.class&&type!=Boolean.class&&type!=Boolean.TYPE){Stringstring=(String)value;if(type.isArray()){String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}}else{value=createValue(type,string);}}returnvalue;} "]
411472[label="methodModifier\n private "]
411473[label="methodModifier\n static "]
411474[label="methodHeader\n ObjectgetValue(Class<?>type,Objectvalue,Stringdelimiter)throwsNoSuchMethodException "]
511475[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
511476[label="methodDeclarator\n getValue(Class<?>type,Objectvalue,Stringdelimiter) "]
611477[label="formalParameterList\n Class<?>type,Objectvalue,Stringdelimiter "]
711478[label="formalParameters\n Class<?>type,Objectvalue "]
811479[label="formalParameter\n Class<?>type "]
911480[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
1011481[label="typeArguments\n <?> "]
1111482[label="wildcard\n ? "]
911483[label="variableDeclaratorId\n type "]
811484[label="formalParameter\n Objectvalue "]
911485[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
911486[label="variableDeclaratorId\n value "]
711487[label="formalParameter\n Stringdelimiter "]
811488[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
811489[label="variableDeclaratorId\n delimiter "]
511490[label="throws_\n throwsNoSuchMethodException "]
611491[label="classType\n NoSuchMethodException "]
411492[label="block\n {if(type!=String.class&&type!=Boolean.class&&type!=Boolean.TYPE){Stringstring=(String)value;if(type.isArray()){String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}}else{value=createValue(type,string);}}returnvalue;} "]
511493[label="blockStatements\n if(type!=String.class&&type!=Boolean.class&&type!=Boolean.TYPE){Stringstring=(String)value;if(type.isArray()){String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}}else{value=createValue(type,string);}}returnvalue; "]
611494[label="ifThenStatement\n if(type!=String.class&&type!=Boolean.class&&type!=Boolean.TYPE){Stringstring=(String)value;if(type.isArray()){String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}}else{value=createValue(type,string);}} "]
711495[label="conditionalAndExpression\n type!=String.class&&type!=Boolean.class&&type!=Boolean.TYPE "]
811496[label="conditionalAndExpression\n type!=String.class&&type!=Boolean.class "]
911497[label="equalityExpression\n type!=String.class "]
1011498[label="expressionName\n type "]
1011499[label="primaryNoNewArray_lfno_primary\n String.class "]
1111500[label="typeName\n String "]
911501[label="equalityExpression\n type!=Boolean.class "]
1011502[label="expressionName\n type "]
1011503[label="primaryNoNewArray_lfno_primary\n Boolean.class "]
1111504[label="typeName\n Boolean "]
811505[label="equalityExpression\n type!=Boolean.TYPE "]
911506[label="expressionName\n type "]
911507[label="expressionName\n Boolean.TYPE "]
1011508[label="ambiguousName\n Boolean "]
711509[label="block\n {Stringstring=(String)value;if(type.isArray()){String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}}else{value=createValue(type,string);}} "]
811510[label="blockStatements\n Stringstring=(String)value;if(type.isArray()){String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}}else{value=createValue(type,string);} "]
911511[label="localVariableDeclarationStatement\n Stringstring=(String)value; "]
1011512[label="localVariableDeclaration\n Stringstring=(String)value "]
1111513[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1111514[label="variableDeclarator\n string=(String)value "]
1211515[label="variableDeclaratorId\n string "]
1211516[label="castExpression\n (String)value "]
1311517[label="classType_lfno_classOrInterfaceType\n String "]
1311518[label="expressionName\n value "]
911519[label="ifThenElseStatement\n if(type.isArray()){String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}}else{value=createValue(type,string);} "]
1011520[label="methodInvocation_lfno_primary\n type.isArray() "]
1111521[label="typeName\n type "]
1011522[label="block\n {String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}} "]
1111523[label="blockStatements\n String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;} "]
1211524[label="localVariableDeclarationStatement\n String[]strings=string.split(delimiter); "]
1311525[label="localVariableDeclaration\n String[]strings=string.split(delimiter) "]
1411526[label="unannArrayType\n String[] "]
1511527[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1511528[label="dims\n [] "]
1411529[label="variableDeclarator\n strings=string.split(delimiter) "]
1511530[label="variableDeclaratorId\n strings "]
1511531[label="methodInvocation_lfno_primary\n string.split(delimiter) "]
1611532[label="typeName\n string "]
1611533[label="expressionName\n delimiter "]
1211534[label="expressionStatement\n type=type.getComponentType(); "]
1311535[label="assignment\n type=type.getComponentType() "]
1411536[label="expressionName\n type "]
1411537[label="assignmentOperator\n = "]
1411538[label="methodInvocation_lfno_primary\n type.getComponentType() "]
1511539[label="typeName\n type "]
1211540[label="ifThenElseStatement\n if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;} "]
1311541[label="equalityExpression\n type==String.class "]
1411542[label="expressionName\n type "]
1411543[label="primaryNoNewArray_lfno_primary\n String.class "]
1511544[label="typeName\n String "]
1311545[label="block\n {value=strings;} "]
1411546[label="expressionStatement\n value=strings; "]
1511547[label="assignment\n value=strings "]
1611548[label="expressionName\n value "]
1611549[label="assignmentOperator\n = "]
1611550[label="expressionName\n strings "]
1311551[label="block\n {Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;} "]
1411552[label="blockStatements\n Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array; "]
1511553[label="localVariableDeclarationStatement\n Object[]array=(Object[])Array.newInstance(type,strings.length); "]
1611554[label="localVariableDeclaration\n Object[]array=(Object[])Array.newInstance(type,strings.length) "]
1711555[label="unannArrayType\n Object[] "]
1811556[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
1811557[label="dims\n [] "]
1711558[label="variableDeclarator\n array=(Object[])Array.newInstance(type,strings.length) "]
1811559[label="variableDeclaratorId\n array "]
1811560[label="castExpression\n (Object[])Array.newInstance(type,strings.length) "]
1911561[label="arrayType\n Object[] "]
2011562[label="classType_lfno_classOrInterfaceType\n Object "]
2011563[label="dims\n [] "]
1911564[label="methodInvocation_lfno_primary\n Array.newInstance(type,strings.length) "]
2011565[label="typeName\n Array "]
2011566[label="argumentList\n type,strings.length "]
2111567[label="expressionName\n type "]
2111568[label="expressionName\n strings.length "]
2211569[label="ambiguousName\n strings "]
1511570[label="basicForStatement\n for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);} "]
1611571[label="localVariableDeclaration\n inti=0 "]
1711572[label="integralType\n int "]
1711573[label="variableDeclarator\n i=0 "]
1811574[label="variableDeclaratorId\n i "]
1811575[label="literal\n 0 "]
1611576[label="relationalExpression\n i<array.length "]
1711577[label="expressionName\n i "]
1711578[label="expressionName\n array.length "]
1811579[label="ambiguousName\n array "]
1611580[label="postIncrementExpression\n i++ "]
1711581[label="expressionName\n i "]
1611582[label="block\n {array[i]=createValue(type,strings[i]);} "]
1711583[label="expressionStatement\n array[i]=createValue(type,strings[i]); "]
1811584[label="assignment\n array[i]=createValue(type,strings[i]) "]
1911585[label="arrayAccess\n array[i] "]
2011586[label="expressionName\n array "]
2011587[label="expressionName\n i "]
1911588[label="assignmentOperator\n = "]
1911589[label="methodInvocation_lfno_primary\n createValue(type,strings[i]) "]
2011590[label="methodName\n createValue "]
2011591[label="argumentList\n type,strings[i] "]
2111592[label="expressionName\n type "]
2111593[label="arrayAccess_lfno_primary\n strings[i] "]
2211594[label="expressionName\n strings "]
2211595[label="expressionName\n i "]
1511596[label="expressionStatement\n value=array; "]
1611597[label="assignment\n value=array "]
1711598[label="expressionName\n value "]
1711599[label="assignmentOperator\n = "]
1711600[label="expressionName\n array "]
1011601[label="block\n {value=createValue(type,string);} "]
1111602[label="expressionStatement\n value=createValue(type,string); "]
1211603[label="assignment\n value=createValue(type,string) "]
1311604[label="expressionName\n value "]
1311605[label="assignmentOperator\n = "]
1311606[label="methodInvocation_lfno_primary\n createValue(type,string) "]
1411607[label="methodName\n createValue "]
1411608[label="argumentList\n type,string "]
1511609[label="expressionName\n type "]
1511610[label="expressionName\n string "]
611611[label="returnStatement\n returnvalue; "]
711612[label="expressionName\n value "]
311613[label="methodDeclaration\n privatestaticObjectcreateValue(Class<?>type,StringvalueAsString)throwsNoSuchMethodException{for(ValueCreatorvalueCreator:valueCreators){ObjectcreatedValue=valueCreator.createValue(type,valueAsString);if(createdValue!=null){returncreatedValue;}}thrownewIllegalArgumentException(String.format(\"cannot instanciate any %s object using %s value\",type.toString(),valueAsString));} "]
411614[label="methodModifier\n private "]
411615[label="methodModifier\n static "]
411616[label="methodHeader\n ObjectcreateValue(Class<?>type,StringvalueAsString)throwsNoSuchMethodException "]
511617[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
511618[label="methodDeclarator\n createValue(Class<?>type,StringvalueAsString) "]
611619[label="formalParameterList\n Class<?>type,StringvalueAsString "]
711620[label="formalParameter\n Class<?>type "]
811621[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
911622[label="typeArguments\n <?> "]
1011623[label="wildcard\n ? "]
811624[label="variableDeclaratorId\n type "]
711625[label="formalParameter\n StringvalueAsString "]
811626[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
811627[label="variableDeclaratorId\n valueAsString "]
511628[label="throws_\n throwsNoSuchMethodException "]
611629[label="classType\n NoSuchMethodException "]
411630[label="block\n {for(ValueCreatorvalueCreator:valueCreators){ObjectcreatedValue=valueCreator.createValue(type,valueAsString);if(createdValue!=null){returncreatedValue;}}thrownewIllegalArgumentException(String.format(\"cannot instanciate any %s object using %s value\",type.toString(),valueAsString));} "]
511631[label="blockStatements\n for(ValueCreatorvalueCreator:valueCreators){ObjectcreatedValue=valueCreator.createValue(type,valueAsString);if(createdValue!=null){returncreatedValue;}}thrownewIllegalArgumentException(String.format(\"cannot instanciate any %s object using %s value\",type.toString(),valueAsString)); "]
611632[label="enhancedForStatement\n for(ValueCreatorvalueCreator:valueCreators){ObjectcreatedValue=valueCreator.createValue(type,valueAsString);if(createdValue!=null){returncreatedValue;}} "]
711633[label="unannClassType_lfno_unannClassOrInterfaceType\n ValueCreator "]
711634[label="variableDeclaratorId\n valueCreator "]
711635[label="expressionName\n valueCreators "]
711636[label="block\n {ObjectcreatedValue=valueCreator.createValue(type,valueAsString);if(createdValue!=null){returncreatedValue;}} "]
811637[label="blockStatements\n ObjectcreatedValue=valueCreator.createValue(type,valueAsString);if(createdValue!=null){returncreatedValue;} "]
911638[label="localVariableDeclarationStatement\n ObjectcreatedValue=valueCreator.createValue(type,valueAsString); "]
1011639[label="localVariableDeclaration\n ObjectcreatedValue=valueCreator.createValue(type,valueAsString) "]
1111640[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
1111641[label="variableDeclarator\n createdValue=valueCreator.createValue(type,valueAsString) "]
1211642[label="variableDeclaratorId\n createdValue "]
1211643[label="methodInvocation_lfno_primary\n valueCreator.createValue(type,valueAsString) "]
1311644[label="typeName\n valueCreator "]
1311645[label="argumentList\n type,valueAsString "]
1411646[label="expressionName\n type "]
1411647[label="expressionName\n valueAsString "]
911648[label="ifThenStatement\n if(createdValue!=null){returncreatedValue;} "]
1011649[label="equalityExpression\n createdValue!=null "]
1111650[label="expressionName\n createdValue "]
1111651[label="literal\n null "]
1011652[label="block\n {returncreatedValue;} "]
1111653[label="returnStatement\n returncreatedValue; "]
1211654[label="expressionName\n createdValue "]
611655[label="throwStatement\n thrownewIllegalArgumentException(String.format(\"cannot instanciate any %s object using %s value\",type.toString(),valueAsString)); "]
711656[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(String.format(\"cannot instanciate any %s object using %s value\",type.toString(),valueAsString)) "]
811657[label="methodInvocation_lfno_primary\n String.format(\"cannot instanciate any %s object using %s value\",type.toString(),valueAsString) "]
911658[label="typeName\n String "]
911659[label="argumentList\n \"cannot instanciate any %s object using %s value\",type.toString(),valueAsString "]
1011660[label="literal\n \"cannot instanciate any %s object using %s value\" "]
1011661[label="methodInvocation_lfno_primary\n type.toString() "]
1111662[label="typeName\n type "]
1011663[label="expressionName\n valueAsString "]
311664[label="methodDeclaration\n privatestaticvoidmakeAccessible(AccessibleObjectao){if(aoinstanceofMember){Membermember=(Member)ao;if(!Modifier.isPublic(member.getModifiers())){ao.setAccessible(true);}}} "]
411665[label="methodModifier\n private "]
411666[label="methodModifier\n static "]
411667[label="methodHeader\n voidmakeAccessible(AccessibleObjectao) "]
511668[label="result\n void "]
511669[label="methodDeclarator\n makeAccessible(AccessibleObjectao) "]
611670[label="formalParameter\n AccessibleObjectao "]
711671[label="unannClassType_lfno_unannClassOrInterfaceType\n AccessibleObject "]
711672[label="variableDeclaratorId\n ao "]
411673[label="block\n {if(aoinstanceofMember){Membermember=(Member)ao;if(!Modifier.isPublic(member.getModifiers())){ao.setAccessible(true);}}} "]
511674[label="ifThenStatement\n if(aoinstanceofMember){Membermember=(Member)ao;if(!Modifier.isPublic(member.getModifiers())){ao.setAccessible(true);}} "]
611675[label="relationalExpression\n aoinstanceofMember "]
711676[label="expressionName\n ao "]
711677[label="classType_lfno_classOrInterfaceType\n Member "]
611678[label="block\n {Membermember=(Member)ao;if(!Modifier.isPublic(member.getModifiers())){ao.setAccessible(true);}} "]
711679[label="blockStatements\n Membermember=(Member)ao;if(!Modifier.isPublic(member.getModifiers())){ao.setAccessible(true);} "]
811680[label="localVariableDeclarationStatement\n Membermember=(Member)ao; "]
911681[label="localVariableDeclaration\n Membermember=(Member)ao "]
1011682[label="unannClassType_lfno_unannClassOrInterfaceType\n Member "]
1011683[label="variableDeclarator\n member=(Member)ao "]
1111684[label="variableDeclaratorId\n member "]
1111685[label="castExpression\n (Member)ao "]
1211686[label="classType_lfno_classOrInterfaceType\n Member "]
1211687[label="expressionName\n ao "]
811688[label="ifThenStatement\n if(!Modifier.isPublic(member.getModifiers())){ao.setAccessible(true);} "]
911689[label="unaryExpressionNotPlusMinus\n !Modifier.isPublic(member.getModifiers()) "]
1011690[label="methodInvocation_lfno_primary\n Modifier.isPublic(member.getModifiers()) "]
1111691[label="typeName\n Modifier "]
1111692[label="methodInvocation_lfno_primary\n member.getModifiers() "]
1211693[label="typeName\n member "]
911694[label="block\n {ao.setAccessible(true);} "]
1011695[label="expressionStatement\n ao.setAccessible(true); "]
1111696[label="methodInvocation\n ao.setAccessible(true) "]
1211697[label="typeName\n ao "]
1211698[label="literal\n true "]
311699[label="normalInterfaceDeclaration\n publicstaticinterfaceValueCreator{publicObjectcreateValue(Class<?>type,Stringvalue);} "]
411700[label="interfaceModifier\n public "]
411701[label="interfaceModifier\n static "]
411702[label="interfaceBody\n {publicObjectcreateValue(Class<?>type,Stringvalue);} "]
511703[label="interfaceMethodDeclaration\n publicObjectcreateValue(Class<?>type,Stringvalue); "]
611704[label="interfaceMethodModifier\n public "]
611705[label="methodHeader\n ObjectcreateValue(Class<?>type,Stringvalue) "]
711706[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
711707[label="methodDeclarator\n createValue(Class<?>type,Stringvalue) "]
811708[label="formalParameterList\n Class<?>type,Stringvalue "]
911709[label="formalParameter\n Class<?>type "]
1011710[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
1111711[label="typeArguments\n <?> "]
1211712[label="wildcard\n ? "]
1011713[label="variableDeclaratorId\n type "]
911714[label="formalParameter\n Stringvalue "]
1011715[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1011716[label="variableDeclaratorId\n value "]
611717[label="methodBody\n ; "]
311718[label="methodDeclaration\n publicstaticValueCreatorbyStaticMethodInvocation(finalClass<?>compatibleType,finalStringmethodName){returnnewValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv;}};} "]
411719[label="methodModifier\n public "]
411720[label="methodModifier\n static "]
411721[label="methodHeader\n ValueCreatorbyStaticMethodInvocation(finalClass<?>compatibleType,finalStringmethodName) "]
511722[label="unannClassType_lfno_unannClassOrInterfaceType\n ValueCreator "]
511723[label="methodDeclarator\n byStaticMethodInvocation(finalClass<?>compatibleType,finalStringmethodName) "]
611724[label="formalParameterList\n finalClass<?>compatibleType,finalStringmethodName "]
711725[label="formalParameter\n finalClass<?>compatibleType "]
811726[label="variableModifier\n final "]
811727[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
911728[label="typeArguments\n <?> "]
1011729[label="wildcard\n ? "]
811730[label="variableDeclaratorId\n compatibleType "]
711731[label="formalParameter\n finalStringmethodName "]
811732[label="variableModifier\n final "]
811733[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
811734[label="variableDeclaratorId\n methodName "]
411735[label="block\n {returnnewValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv;}};} "]
511736[label="returnStatement\n returnnewValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv;}}; "]
611737[label="classInstanceCreationExpression_lfno_primary\n newValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv;}} "]
711738[label="classBody\n {publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv;}} "]
811739[label="methodDeclaration\n publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv;} "]
911740[label="methodModifier\n public "]
911741[label="methodHeader\n ObjectcreateValue(Class<?>type,Stringvalue) "]
1011742[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
1011743[label="methodDeclarator\n createValue(Class<?>type,Stringvalue) "]
1111744[label="formalParameterList\n Class<?>type,Stringvalue "]
1211745[label="formalParameter\n Class<?>type "]
1311746[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
1411747[label="typeArguments\n <?> "]
1511748[label="wildcard\n ? "]
1311749[label="variableDeclaratorId\n type "]
1211750[label="formalParameter\n Stringvalue "]
1311751[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1311752[label="variableDeclaratorId\n value "]
911753[label="block\n {Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv;} "]
1011754[label="blockStatements\n Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv; "]
1111755[label="localVariableDeclarationStatement\n Objectv=null; "]
1211756[label="localVariableDeclaration\n Objectv=null "]
1311757[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
1311758[label="variableDeclarator\n v=null "]
1411759[label="variableDeclaratorId\n v "]
1411760[label="literal\n null "]
1111761[label="ifThenStatement\n if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}} "]
1211762[label="methodInvocation_lfno_primary\n compatibleType.isAssignableFrom(type) "]
1311763[label="typeName\n compatibleType "]
1311764[label="expressionName\n type "]
1211765[label="block\n {try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}} "]
1311766[label="tryStatement\n try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));} "]
1411767[label="block\n {Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);} "]
1511768[label="blockStatements\n Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value); "]
1611769[label="localVariableDeclarationStatement\n Methodm=type.getMethod(methodName,String.class); "]
1711770[label="localVariableDeclaration\n Methodm=type.getMethod(methodName,String.class) "]
1811771[label="unannClassType_lfno_unannClassOrInterfaceType\n Method "]
1811772[label="variableDeclarator\n m=type.getMethod(methodName,String.class) "]
1911773[label="variableDeclaratorId\n m "]
1911774[label="methodInvocation_lfno_primary\n type.getMethod(methodName,String.class) "]
2011775[label="typeName\n type "]
2011776[label="argumentList\n methodName,String.class "]
2111777[label="expressionName\n methodName "]
2111778[label="primaryNoNewArray_lfno_primary\n String.class "]
2211779[label="typeName\n String "]
1611780[label="returnStatement\n returnm.invoke(null,value); "]
1711781[label="methodInvocation_lfno_primary\n m.invoke(null,value) "]
1811782[label="typeName\n m "]
1811783[label="argumentList\n null,value "]
1911784[label="literal\n null "]
1911785[label="expressionName\n value "]
1411786[label="catches\n catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));} "]
1511787[label="catchClause\n catch(NoSuchMethodExceptione){} "]
1611788[label="catchFormalParameter\n NoSuchMethodExceptione "]
1711789[label="unannClassType\n NoSuchMethodException "]
1711790[label="variableDeclaratorId\n e "]
1611791[label="block\n {} "]
1511792[label="catchClause\n catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));} "]
1611793[label="catchFormalParameter\n Exceptione "]
1711794[label="unannClassType\n Exception "]
1711795[label="variableDeclaratorId\n e "]
1611796[label="block\n {thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));} "]
1711797[label="throwStatement\n thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value)); "]
1811798[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value)) "]
1911799[label="methodInvocation_lfno_primary\n String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value) "]
2011800[label="typeName\n String "]
2011801[label="argumentList\n \"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value "]
2111802[label="literal\n \"could not invoke %s#%s to create an obejct from %s\" "]
2111803[label="methodInvocation_lfno_primary\n type.toString() "]
2211804[label="typeName\n type "]
2111805[label="expressionName\n methodName "]
2111806[label="expressionName\n value "]
1111807[label="returnStatement\n returnv; "]
1211808[label="expressionName\n v "]
311809[label="fieldDeclaration\n publicstaticfinalValueCreatorFROM_STRING_CONSTRUCTOR=newValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);}returnv;}}; "]
411810[label="fieldModifier\n public "]
411811[label="fieldModifier\n static "]
411812[label="fieldModifier\n final "]
411813[label="unannClassType_lfno_unannClassOrInterfaceType\n ValueCreator "]
411814[label="variableDeclarator\n FROM_STRING_CONSTRUCTOR=newValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);}returnv;}} "]
511815[label="variableDeclaratorId\n FROM_STRING_CONSTRUCTOR "]
511816[label="classInstanceCreationExpression_lfno_primary\n newValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);}returnv;}} "]
611817[label="classBody\n {publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);}returnv;}} "]
711818[label="methodDeclaration\n publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);}returnv;} "]
811819[label="methodModifier\n public "]
811820[label="methodHeader\n ObjectcreateValue(Class<?>type,Stringvalue) "]
911821[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
911822[label="methodDeclarator\n createValue(Class<?>type,Stringvalue) "]
1011823[label="formalParameterList\n Class<?>type,Stringvalue "]
1111824[label="formalParameter\n Class<?>type "]
1211825[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
1311826[label="typeArguments\n <?> "]
1411827[label="wildcard\n ? "]
1211828[label="variableDeclaratorId\n type "]
1111829[label="formalParameter\n Stringvalue "]
1211830[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1211831[label="variableDeclaratorId\n value "]
811832[label="block\n {Objectv=null;try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);}returnv;} "]
911833[label="blockStatements\n Objectv=null;try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);}returnv; "]
1011834[label="localVariableDeclarationStatement\n Objectv=null; "]
1111835[label="localVariableDeclaration\n Objectv=null "]
1211836[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
1211837[label="variableDeclarator\n v=null "]
1311838[label="variableDeclaratorId\n v "]
1311839[label="literal\n null "]
1011840[label="tryStatement\n try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);} "]
1111841[label="block\n {Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);} "]
1211842[label="blockStatements\n Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value); "]
1311843[label="localVariableDeclarationStatement\n Constructor<?>init=type.getDeclaredConstructor(String.class); "]
1411844[label="localVariableDeclaration\n Constructor<?>init=type.getDeclaredConstructor(String.class) "]
1511845[label="unannClassType_lfno_unannClassOrInterfaceType\n Constructor<?> "]
1611846[label="typeArguments\n <?> "]
1711847[label="wildcard\n ? "]
1511848[label="variableDeclarator\n init=type.getDeclaredConstructor(String.class) "]
1611849[label="variableDeclaratorId\n init "]
1611850[label="methodInvocation_lfno_primary\n type.getDeclaredConstructor(String.class) "]
1711851[label="typeName\n type "]
1711852[label="primaryNoNewArray_lfno_primary\n String.class "]
1811853[label="typeName\n String "]
1311854[label="expressionStatement\n v=init.newInstance(value); "]
1411855[label="assignment\n v=init.newInstance(value) "]
1511856[label="expressionName\n v "]
1511857[label="assignmentOperator\n = "]
1511858[label="methodInvocation_lfno_primary\n init.newInstance(value) "]
1611859[label="typeName\n init "]
1611860[label="expressionName\n value "]
1111861[label="catches\n catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);} "]
1211862[label="catchClause\n catch(NoSuchMethodExceptione){} "]
1311863[label="catchFormalParameter\n NoSuchMethodExceptione "]
1411864[label="unannClassType\n NoSuchMethodException "]
1411865[label="variableDeclaratorId\n e "]
1311866[label="block\n {} "]
1211867[label="catchClause\n catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);} "]
1311868[label="catchFormalParameter\n Exceptione "]
1411869[label="unannClassType\n Exception "]
1411870[label="variableDeclaratorId\n e "]
1311871[label="block\n {thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);} "]
1411872[label="throwStatement\n thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e); "]
1511873[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e) "]
1611874[label="argumentList\n \"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e "]
1711875[label="additiveExpression\n \"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName() "]
1811876[label="additiveExpression\n \"Failed to convertPKUtoCWS \"+value+\" to type \" "]
1911877[label="additiveExpression\n \"Failed to convertPKUtoCWS \"+value "]
2011878[label="literal\n \"Failed to convertPKUtoCWS \" "]
2011879[label="expressionName\n value "]
1911880[label="literal\n \" to type \" "]
1811881[label="methodInvocation_lfno_primary\n type.getName() "]
1911882[label="typeName\n type "]
1711883[label="expressionName\n e "]
1011884[label="returnStatement\n returnv; "]
1111885[label="expressionName\n v "]
311886[label="fieldDeclaration\n publicstaticfinalValueCreatorENUM_CREATOR=newValueCreator(){@SuppressWarnings({\"unchecked\",\"rawtypes\"})publicObjectcreateValue(Classtype,Stringvalue){if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);}returnnull;}}; "]
411887[label="fieldModifier\n public "]
411888[label="fieldModifier\n static "]
411889[label="fieldModifier\n final "]
411890[label="unannClassType_lfno_unannClassOrInterfaceType\n ValueCreator "]
411891[label="variableDeclarator\n ENUM_CREATOR=newValueCreator(){@SuppressWarnings({\"unchecked\",\"rawtypes\"})publicObjectcreateValue(Classtype,Stringvalue){if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);}returnnull;}} "]
511892[label="variableDeclaratorId\n ENUM_CREATOR "]
511893[label="classInstanceCreationExpression_lfno_primary\n newValueCreator(){@SuppressWarnings({\"unchecked\",\"rawtypes\"})publicObjectcreateValue(Classtype,Stringvalue){if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);}returnnull;}} "]
611894[label="classBody\n {@SuppressWarnings({\"unchecked\",\"rawtypes\"})publicObjectcreateValue(Classtype,Stringvalue){if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);}returnnull;}} "]
711895[label="methodDeclaration\n @SuppressWarnings({\"unchecked\",\"rawtypes\"})publicObjectcreateValue(Classtype,Stringvalue){if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);}returnnull;} "]
811896[label="singleElementAnnotation\n @SuppressWarnings({\"unchecked\",\"rawtypes\"}) "]
911897[label="typeName\n SuppressWarnings "]
911898[label="elementValueArrayInitializer\n {\"unchecked\",\"rawtypes\"} "]
1011899[label="elementValueList\n \"unchecked\",\"rawtypes\" "]
1111900[label="literal\n \"unchecked\" "]
1111901[label="literal\n \"rawtypes\" "]
811902[label="methodModifier\n public "]
811903[label="methodHeader\n ObjectcreateValue(Classtype,Stringvalue) "]
911904[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
911905[label="methodDeclarator\n createValue(Classtype,Stringvalue) "]
1011906[label="formalParameterList\n Classtype,Stringvalue "]
1111907[label="formalParameter\n Classtype "]
1211908[label="unannClassType_lfno_unannClassOrInterfaceType\n Class "]
1211909[label="variableDeclaratorId\n type "]
1111910[label="formalParameter\n Stringvalue "]
1211911[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1211912[label="variableDeclaratorId\n value "]
811913[label="block\n {if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);}returnnull;} "]
911914[label="blockStatements\n if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);}returnnull; "]
1011915[label="ifThenStatement\n if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);} "]
1111916[label="primary\n Enum.class.isAssignableFrom(type) "]
1211917[label="primaryNoNewArray_lfno_primary\n Enum.class "]
1311918[label="typeName\n Enum "]
1211919[label="methodInvocation_lf_primary\n .isAssignableFrom(type) "]
1311920[label="expressionName\n type "]
1111921[label="block\n {returnEnum.valueOf(type,value);} "]
1211922[label="returnStatement\n returnEnum.valueOf(type,value); "]
1311923[label="methodInvocation_lfno_primary\n Enum.valueOf(type,value) "]
1411924[label="typeName\n Enum "]
1411925[label="argumentList\n type,value "]
1511926[label="expressionName\n type "]
1511927[label="expressionName\n value "]
1011928[label="returnStatement\n returnnull; "]
1111929[label="literal\n null "]
311930[label="fieldDeclaration\n privatestaticfinalList<ValueCreator>DEFAULT_VALUE_CREATORS=Arrays.asList(Args.FROM_STRING_CONSTRUCTOR,Args.ENUM_CREATOR); "]
411931[label="fieldModifier\n private "]
411932[label="fieldModifier\n static "]
411933[label="fieldModifier\n final "]
411934[label="unannClassType_lfno_unannClassOrInterfaceType\n List<ValueCreator> "]
511935[label="typeArguments\n <ValueCreator> "]
611936[label="classType_lfno_classOrInterfaceType\n ValueCreator "]
411937[label="variableDeclarator\n DEFAULT_VALUE_CREATORS=Arrays.asList(Args.FROM_STRING_CONSTRUCTOR,Args.ENUM_CREATOR) "]
511938[label="variableDeclaratorId\n DEFAULT_VALUE_CREATORS "]
511939[label="methodInvocation_lfno_primary\n Arrays.asList(Args.FROM_STRING_CONSTRUCTOR,Args.ENUM_CREATOR) "]
611940[label="typeName\n Arrays "]
611941[label="argumentList\n Args.FROM_STRING_CONSTRUCTOR,Args.ENUM_CREATOR "]
711942[label="expressionName\n Args.FROM_STRING_CONSTRUCTOR "]
811943[label="ambiguousName\n Args "]
711944[label="expressionName\n Args.ENUM_CREATOR "]
811945[label="ambiguousName\n Args "]
311946[label="fieldDeclaration\n privatestaticList<ValueCreator>valueCreators=newArrayList<ValueCreator>(DEFAULT_VALUE_CREATORS); "]
411947[label="fieldModifier\n private "]
411948[label="fieldModifier\n static "]
411949[label="unannClassType_lfno_unannClassOrInterfaceType\n List<ValueCreator> "]
511950[label="typeArguments\n <ValueCreator> "]
611951[label="classType_lfno_classOrInterfaceType\n ValueCreator "]
411952[label="variableDeclarator\n valueCreators=newArrayList<ValueCreator>(DEFAULT_VALUE_CREATORS) "]
511953[label="variableDeclaratorId\n valueCreators "]
511954[label="classInstanceCreationExpression_lfno_primary\n newArrayList<ValueCreator>(DEFAULT_VALUE_CREATORS) "]
611955[label="typeArguments\n <ValueCreator> "]
711956[label="classType_lfno_classOrInterfaceType\n ValueCreator "]
611957[label="expressionName\n DEFAULT_VALUE_CREATORS "]
311958[label="methodDeclaration\n publicstaticvoidregisterValueCreator(ValueCreatorvc){valueCreators.add(vc);} "]
411959[label="methodModifier\n public "]
411960[label="methodModifier\n static "]
411961[label="methodHeader\n voidregisterValueCreator(ValueCreatorvc) "]
511962[label="result\n void "]
511963[label="methodDeclarator\n registerValueCreator(ValueCreatorvc) "]
611964[label="formalParameter\n ValueCreatorvc "]
711965[label="unannClassType_lfno_unannClassOrInterfaceType\n ValueCreator "]
711966[label="variableDeclaratorId\n vc "]
411967[label="block\n {valueCreators.add(vc);} "]
511968[label="expressionStatement\n valueCreators.add(vc); "]
611969[label="methodInvocation\n valueCreators.add(vc) "]
711970[label="typeName\n valueCreators "]
711971[label="expressionName\n vc "]
311972[label="methodDeclaration\n publicstaticvoidresetValueCreators(){valueCreators.clear();valueCreators.addAll(DEFAULT_VALUE_CREATORS);} "]
411973[label="methodModifier\n public "]
411974[label="methodModifier\n static "]
411975[label="methodHeader\n voidresetValueCreators() "]
511976[label="result\n void "]
511977[label="methodDeclarator\n resetValueCreators() "]
411978[label="block\n {valueCreators.clear();valueCreators.addAll(DEFAULT_VALUE_CREATORS);} "]
511979[label="blockStatements\n valueCreators.clear();valueCreators.addAll(DEFAULT_VALUE_CREATORS); "]
611980[label="expressionStatement\n valueCreators.clear(); "]
711981[label="methodInvocation\n valueCreators.clear() "]
811982[label="typeName\n valueCreators "]
611983[label="expressionStatement\n valueCreators.addAll(DEFAULT_VALUE_CREATORS); "]
711984[label="methodInvocation\n valueCreators.addAll(DEFAULT_VALUE_CREATORS) "]
811985[label="typeName\n valueCreators "]
811986[label="expressionName\n DEFAULT_VALUE_CREATORS "]
-10->01
-10->02
-10->03
-10->04
-10->05
-10->06
-10->07
07->18
18->29
29->310
310->411
411->512
512->613
613->714
07->115
115->216
115->217
217->318
115->219
219->320
320->421
421->522
115->223
223->324
324->425
324->426
426->527
324->428
223->329
329->430
430->531
329->432
329->433
433->534
433->535
329->436
436->537
537->638
-10->039
039->140
140->241
241->342
342->443
443->544
544->645
645->746
039->147
147->248
147->249
249->350
147->251
251->352
352->453
453->554
453->555
352->456
251->357
357->458
357->459
251->360
360->461
360->462
462->563
462->564
564->665
665->766
665->767
564->668
360->469
469->570
570->671
671->772
772->873
671->774
671->775
251->376
376->477
376->478
478->579
478->580
376->481
481->582
582->683
683->784
683->785
785->886
785->887
251->388
388->489
388->490
490->591
388->492
251->393
393->494
393->495
495->596
495->597
597->698
698->799
799->8100
799->8101
698->7102
393->4103
4103->5104
5104->6105
6105->7106
7106->8107
8107->9108
7106->8109
7106->8110
5104->6111
6111->7112
-10->0113
0113->1114
1114->2115
2115->3116
3116->4117
4117->5118
5118->6119
0113->1120
1120->2121
2121->3122
3122->4123
4123->5124
5124->6125
6125->7126
0113->1127
1127->2128
2128->3129
3129->4130
4130->5131
5131->6132
6132->7133
0113->1134
1134->2135
2135->3136
3136->4137
4137->5138
5138->6139
6139->7140
0113->1141
1141->2142
2142->3143
3143->4144
4144->5145
5145->6146
6146->7147
0113->1148
1148->2149
2149->3150
3150->4151
4151->5152
5152->6153
6153->7154
0113->1155
1155->2156
2156->3157
3157->4158
4158->5159
5159->6160
6160->7161
0113->1162
1162->2163
2163->3164
3164->4165
0113->1166
1166->2167
2167->3168
3168->4169
0113->1170
1170->2171
2171->3172
3172->4173
0113->1174
1174->2175
2175->3176
3176->4177
4177->5178
5178->6179
6179->7180
0113->1181
1181->2182
1181->2183
1181->2184
2184->3185
1181->2186
2186->3187
3187->4188
4188->5189
3187->4190
3187->4191
4191->5192
4191->5193
5193->6194
6194->7195
6194->7196
3187->4197
4197->5198
5198->6199
2186->3200
3200->4201
3200->4202
4202->5203
4202->5204
2186->3205
3205->4206
4206->5207
3205->4208
3205->4209
4209->5210
4209->5211
5211->6212
6212->7213
6212->7214
4209->5215
5215->6216
6216->7217
6216->7218
3205->4219
4219->5220
5220->6221
6221->7222
7222->8223
8223->9224
9224->10225
10225->11226
10225->11227
7222->8228
8228->9229
8228->9230
9230->10231
9230->10232
5220->6233
6233->7234
7234->8235
7234->8236
2186->3237
3237->4238
4238->5239
3237->4240
3237->4241
4241->5242
4241->5243
5243->6244
6244->7245
6244->7246
4241->5247
5247->6248
6248->7249
6248->7250
3237->4251
4251->5252
5252->6253
6253->7254
7254->8255
8255->9256
9256->10257
10257->11258
10257->11259
7254->8260
8260->9261
8260->9262
9262->10263
9262->10264
5252->6265
6265->7266
7266->8267
7266->8268
2186->3269
3269->4270
4270->5271
3269->4272
3269->4273
4273->5274
4273->5275
5275->6276
6276->7277
7277->8278
7277->8279
6276->7280
7280->8281
7280->8282
4273->5283
5283->6284
3269->4285
4285->5286
5286->6287
6287->7288
7288->8289
7288->8290
8290->9291
8290->9292
5286->6293
6293->7294
7294->8295
7294->8296
8296->9297
8296->9298
5286->6299
6299->7300
7300->8301
7300->8302
2186->3303
3303->4304
4304->5305
3303->4306
3303->4307
4307->5308
4307->5309
5309->6310
6310->7311
7311->8312
8312->9313
9313->10314
9313->10315
10315->11316
10315->11317
6310->7318
4307->5319
5319->6320
3303->4321
4321->5322
5322->6323
6323->7324
7324->8325
7324->8326
8326->9327
8326->9328
5322->6329
6329->7330
7330->8331
7330->8332
5322->6333
6333->7334
7334->8335
7334->8336
8336->9337
8336->9338
9338->10339
5322->6340
6340->7341
7341->8342
7341->8343
8343->9344
8343->9345
5322->6346
6346->7347
7347->8348
7347->8349
8349->9350
9350->10351
10351->11352
10351->11353
11353->12354
11353->12355
6346->7356
6346->7357
7357->8358
6346->7359
7359->8360
8360->9361
9361->10362
10362->11363
10362->11364
11364->12365
11364->12366
12366->13367
8360->9368
9368->10369
10369->11370
10369->11371
11371->12372
11371->12373
8360->9374
9374->10375
9374->10376
9374->10377
10377->11378
9374->10379
10379->11380
11380->12381
12381->13382
12381->13383
13383->14384
13383->14385
8360->9386
9386->10387
10387->11388
8360->9389
9389->10390
10390->11391
10390->11392
11392->12393
11392->12394
12394->13395
12394->13396
13396->14397
13396->14398
5322->6399
6399->7400
7400->8401
7400->8402
5322->6403
6403->7404
7404->8405
7404->8406
2186->3407
3407->4408
4408->5409
3407->4410
3407->4411
4411->5412
4411->5413
5413->6414
6414->7415
6414->7416
4411->5417
5417->6418
3407->4419
4419->5420
5420->6421
6421->7422
6421->7423
7423->8424
7423->8425
2186->3426
3426->4427
4427->5428
3426->4429
3426->4430
4430->5431
5431->6432
6432->7433
7433->8434
7433->8435
4430->5436
5436->6437
6437->7438
6437->7439
3426->4440
4440->5441
5441->6442
6442->7443
7443->8444
7443->8445
8445->9446
8445->9447
9447->10448
5441->6449
6449->7450
7450->8451
7450->8452
6449->7453
7453->8454
8454->9455
9455->10456
5441->6457
6457->7458
7458->8459
7458->8460
6457->7461
7461->8462
8462->9463
9463->10464
5441->6465
6465->7466
7466->8467
8467->9468
8467->9469
7466->8470
8470->9471
8470->9472
9472->10473
9472->10474
5441->6475
6475->7476
7476->8477
8477->9478
9478->10479
10479->11480
10479->11481
7476->8482
8482->9483
8482->9484
9484->10485
10485->11486
11486->12487
11486->12488
5441->6489
6489->7490
7490->8491
7490->8492
8492->9493
8492->9494
6489->7495
7495->8496
7495->8497
8497->9498
6489->7499
7499->8500
6489->7501
7501->8502
8502->9503
9503->10504
9503->10505
10505->11506
11506->12507
12507->13508
11506->12509
10505->11510
11510->12511
11510->12512
5441->6513
6513->7514
2186->3515
3515->4516
4516->5517
3515->4518
3515->4519
4519->5520
4519->5521
5521->6522
6522->7523
6522->7524
4519->5525
5525->6526
6526->7527
6526->7528
3515->4529
4529->5530
5530->6531
6531->7532
7532->8533
7532->8534
8534->9535
8534->9536
9536->10537
5530->6538
6538->7539
7539->8540
7539->8541
6538->7542
7542->8543
8543->9544
9544->10545
5530->6546
6546->7547
7547->8548
7547->8549
6546->7550
7550->8551
8551->9552
9552->10553
5530->6554
6554->7555
7555->8556
8556->9557
8556->9558
7555->8559
8559->9560
8559->9561
9561->10562
9561->10563
5530->6564
6564->7565
7565->8566
7565->8567
8567->9568
8567->9569
9569->10570
5530->6571
6571->7572
7572->8573
7572->8574
8574->9575
8574->9576
9576->10577
5530->6578
6578->7579
7579->8580
7579->8581
8581->9582
8581->9583
6578->7584
7584->8585
7584->8586
8586->9587
6578->7588
7588->8589
6578->7590
7590->8591
8591->9592
9592->10593
10593->11594
10593->11595
9592->10596
8591->9597
9597->10598
10598->11599
11599->12600
12600->13601
12600->13602
12600->13603
13603->14604
13603->14605
10598->11606
11606->12607
12607->13608
12607->13609
12607->13610
5530->6611
6611->7612
-10->0613
0613->1614
1614->2615
2615->3616
3616->4617
4617->5618
5618->6619
0613->1620
1620->2621
2621->3622
3622->4623
0613->1624
1624->2625
2625->3626
3626->4627
0613->1628
1628->2629
1628->2630
1628->2631
2631->3632
3632->4633
3632->4634
3632->4635
3632->4636
4636->5637
4636->5638
2631->3639
3639->4640
3639->4641
3639->4642
2631->3643
3643->4644
3643->4645
3643->4646
3643->4647
2631->3648
3648->4649
3648->4650
4650->5651
4650->5652
5652->6653
5652->6654
3648->4655
4655->5656
5656->6657
6657->7658
6657->7659
6657->7660
7660->8661
2631->3662
3662->4663
3662->4664
4664->5665
5665->6666
5665->6667
4664->5668
5668->6669
6669->7670
7670->8671
7670->8672
6669->7673
7673->8674
7673->8675
3662->4676
4676->5677
5677->6678
6678->7679
7679->8680
8680->9681
7679->8682
8682->9683
8682->9684
5677->6685
6685->7686
7686->8687
8687->9688
8687->9689
7686->8690
8690->9691
8690->9692
9692->10693
9692->10694
10694->11695
5677->6696
6696->7697
7697->8698
7697->8699
8699->9700
8699->9701
6696->7702
7702->8703
7702->8704
6696->7705
7705->8706
6696->7707
7707->8708
8708->9709
9709->10710
10710->11711
10710->11712
11712->12713
11712->12714
12714->13715
8708->9716
9716->10717
10717->11718
10717->11719
9716->10720
10720->11721
8708->9722
9722->10723
10723->11724
11724->12725
11724->12726
10723->11727
10723->11728
5677->6729
6729->7730
2631->3731
3731->4732
3731->4733
4733->5734
4733->5735
3731->4736
4736->5737
5737->6738
6738->7739
7739->8740
7739->8741
8741->9742
8741->9743
9743->10744
5737->6745
6745->7746
7746->8747
8747->9748
9748->10749
10749->11750
10749->11751
9748->10752
10752->11753
11753->12754
10752->11755
8747->9756
9756->10757
9756->10758
7746->8759
7746->8760
2631->3761
3761->4762
3761->4763
3761->4764
4764->5765
4764->5766
3761->4767
2631->3768
3768->4769
3768->4770
3768->4771
4771->5772
4771->5773
4771->5774
5774->6775
3768->4776
4776->5777
5777->6778
6778->7779
7779->8780
5777->6781
6781->7782
7782->8783
7782->8784
7782->8785
8785->9786
8785->9787
9787->10788
5777->6789
6789->7790
7790->8791
7790->8792
7790->8793
8793->9794
8793->9795
9795->10796
5777->6797
6797->7798
7798->8799
8799->9800
9800->10801
10801->11802
10801->11803
10801->11804
11804->12805
12805->13806
8799->9807
9807->10808
10808->11809
10808->11810
11810->12811
11810->12812
8799->9813
9813->10814
10814->11815
11815->12816
12816->13817
12816->13818
12816->13819
13819->14820
10814->11821
9813->10822
10822->11823
11823->12824
12824->13825
13825->14826
14826->15827
14826->15828
13825->14829
14829->15830
14829->15831
15831->16832
15831->16833
16833->17834
11823->12835
12835->13836
13836->14837
14837->15838
14837->15839
13836->14840
14840->15841
14840->15842
15842->16843
15842->16844
16844->17845
11823->12846
12846->13847
13847->14848
14848->15849
14848->15850
15850->16851
15850->16852
13847->14853
14853->15854
14853->15855
13847->14856
14856->15857
13847->14858
14858->15859
15859->16860
16860->17861
16860->17862
16860->17863
17863->18864
16860->17865
17865->18866
18866->19867
19867->20868
19867->20869
18866->19870
15859->16871
16871->17872
17872->18873
17872->18874
18874->19875
18874->19876
15859->16877
16877->17878
17878->18879
17878->18880
18880->19881
18880->19882
16877->17883
17883->18884
17883->18885
16877->17886
17886->18887
16877->17888
17888->18889
18889->19890
19890->20891
19890->20892
19890->20893
20893->21894
21894->22895
22895->23896
21894->22897
20893->21898
21898->22899
21898->22900
22900->23901
22900->23902
15859->16903
16903->17904
17904->18905
17904->18906
18906->19907
18906->19908
16903->17909
17909->18910
17909->18911
16903->17912
17912->18913
16903->17914
17914->18915
18915->19916
19916->20917
19916->20918
20918->21919
20918->21920
18915->19921
19921->20922
20922->21923
21923->22924
22924->23925
22924->23926
23926->24927
23926->24928
24928->25929
24928->25930
21923->22931
22931->23932
22931->23933
21923->22934
22934->23935
21923->22936
22936->23937
23937->24938
24938->25939
25939->26940
26940->27941
26940->27942
25939->26943
25939->26944
26944->27945
26944->27946
27946->28947
27946->28948
23937->24949
24949->25950
25950->26951
26951->27952
26951->27953
25950->26954
25950->26955
26955->27956
26955->27957
27957->28958
27957->28959
20922->21960
21960->22961
22961->23962
23962->24963
23962->24964
22961->23965
22961->23966
20922->21967
21967->22968
22968->23969
23969->24970
23969->24971
22968->23972
22968->23973
23973->24974
23973->24975
20922->21976
11823->12977
12977->13978
13978->14979
14979->15980
13978->14981
11823->12982
12982->13983
13983->14984
13983->14985
14985->15986
14985->15987
12982->13988
13988->14989
13988->14990
12982->13991
13991->14992
12982->13993
13993->14994
14994->15995
15995->16996
14994->15997
15997->16998
15997->16999
16999->171000
16999->171001
15997->161002
161002->171003
161002->171004
6797->71005
71005->81006
81006->91007
91007->101008
101008->111009
2631->31010
31010->41011
31010->41012
31010->41013
41013->51014
51014->61015
61015->71016
61015->71017
51014->61018
41013->51019
51019->61020
61020->71021
61020->71022
51019->61023
41013->51024
51024->61025
51024->61026
61026->71027
61026->71028
71028->81029
81029->91030
91030->101031
91030->101032
81029->91033
71028->81034
81034->91035
91035->101036
91035->101037
81034->91038
51024->61039
61039->71040
71040->81041
81041->91042
91042->101043
101043->111044
91042->101045
91042->101046
71040->81047
81047->91048
91048->101049
101049->111050
91048->101051
91048->101052
-10->01053
01053->11054
11054->21055
21055->31056
31056->41057
41057->51058
51058->61059
01053->11060
11060->21061
21061->31062
31062->41063
41063->51064
51064->61065
61065->71066
01053->11067
11067->21068
21068->31069
31069->41070
41070->51071
51071->61072
61072->71073
01053->11074
11074->21075
21075->31076
31076->41077
41077->51078
51078->61079
61079->71080
01053->11081
11081->21082
21082->31083
31083->41084
41084->51085
51085->61086
61086->71087
01053->11088
11088->21089
21089->31090
31090->41091
41091->51092
51092->61093
61093->71094
01053->11095
11095->21096
21096->31097
31097->41098
41098->51099
51099->61100
61100->71101
01053->11102
11102->21103
21103->31104
31104->41105
01053->11106
11106->21107
21107->31108
31108->41109
01053->11110
11110->21111
21111->31112
31112->41113
01053->11114
11114->21115
21115->31116
31116->41117
41117->51118
51118->61119
61119->71120
01053->11121
11121->21122
11121->21123
11121->21124
21124->31125
11121->21126
21126->31127
31127->41128
31127->41129
31127->41130
21126->31131
31131->41132
31131->41133
31131->41134
21126->31135
31135->41136
31135->41137
31135->41138
21126->31139
31139->41140
31139->41141
31139->41142
21126->31143
31143->41144
31143->41145
41145->51146
41145->51147
51147->61148
51147->61149
31143->41150
41150->51151
51151->61152
61152->71153
71153->81154
71153->81155
71153->81156
81156->91157
91157->101158
51151->61159
61159->71160
71160->81161
71160->81162
71160->81163
81163->91164
51151->61165
61165->71166
71166->81167
71166->81168
71166->81169
81169->91170
91170->101171
51151->61172
61172->71173
71173->81174
71173->81175
71173->81176
21126->31177
31177->41178
31177->41179
41179->51180
31177->41181
41181->51182
51182->61183
61183->71184
71184->81185
71184->81186
71184->81187
51182->61188
61188->71189
71189->81190
71189->81191
71189->81192
51182->61193
61193->71194
71194->81195
71194->81196
71194->81197
21126->31198
31198->41199
31198->41200
41200->51201
41200->51202
51202->61203
61203->71204
61203->71205
31198->41206
41206->51207
51207->61208
61208->71209
71209->81210
81210->91211
71209->81212
71209->81213
51207->61214
61214->71215
21126->31216
31216->41217
31216->41218
41218->51219
41218->51220
51220->61221
61221->71222
71222->81223
71222->81224
61221->71225
71225->81226
71225->81227
31216->41228
41228->51229
51229->61230
61230->71231
71231->81232
81232->91233
81232->91234
71231->81235
81235->91236
81235->91237
91237->101238
91237->101239
51229->61240
61240->71241
71241->81242
71241->81243
81243->91244
91244->101245
101245->111246
91244->101247
101247->111248
91244->101249
91244->101250
71241->81251
81251->91252
91252->101253
91252->101254
91252->101255
91252->101256
21126->31257
31257->41258
31257->41259
41259->51260
41259->51261
31257->41262
41262->51263
51263->61264
21126->31265
31265->41266
31265->41267
41267->51268
41267->51269
31265->41270
41270->51271
51271->61272
21126->31273
31273->41274
31273->41275
41275->51276
41275->51277
31273->41278
41278->51279
51279->61280
21126->31281
31281->41282
41282->51283
31281->41284
31281->41285
41285->51286
41285->51287
51287->61288
61288->71289
71289->81290
71289->81291
61288->71292
71292->81293
71292->81294
41285->51295
51295->61296
61296->71297
61296->71298
31281->41299
41299->51300
51300->61301
61301->71302
61301->71303
71303->81304
71303->81305
71303->81306
21126->31307
31307->41308
41308->51309
31307->41310
31307->41311
41311->51312
41311->51313
51313->61314
61314->71315
61314->71316
41311->51317
51317->61318
61318->71319
61318->71320
31307->41321
41321->51322
51322->61323
61323->71324
61323->71325
71325->81326
71325->81327
21126->31328
31328->41329
41329->51330
31328->41331
31328->41332
41332->51333
41332->51334
31328->41335
41335->51336
51336->61337
21126->31338
31338->41339
41339->51340
31338->41341
31338->41342
41342->51343
41342->51344
51344->61345
61345->71346
71346->81347
81347->91348
81347->91349
71346->81350
81350->91351
81350->91352
61345->71353
71353->81354
71353->81355
41342->51356
51356->61357
61357->71358
61357->71359
31338->41360
41360->51361
51361->61362
61362->71363
71363->81364
71363->81365
61362->71366
71366->81367
81367->91368
51361->61369
61369->71370
71370->81371
71370->81372
81372->91373
81372->91374
91374->101375
51361->61376
61376->71377
71377->81378
81378->91379
61376->71380
71380->81381
81381->91382
91382->101383
91382->101384
101384->111385
101384->111386
111386->121387
51361->61388
61388->71389
71389->81390
81390->91391
61388->71392
71392->81393
81393->91394
91394->101395
91394->101396
101396->111397
101396->111398
111398->121399
51361->61400
61400->71401
71401->81402
81402->91403
81402->91404
71401->81405
81405->91406
81405->91407
91407->101408
61400->71409
71409->81410
81410->91411
51361->61412
61412->71413
71413->81414
81414->91415
81414->91416
71413->81417
81417->91418
81417->91419
91419->101420
51361->61421
61421->71422
71422->81423
71422->81424
61421->71425
71425->81426
51361->61427
61427->71428
71428->81429
71428->81430
81430->91431
81430->91432
91432->101433
91432->101434
91432->101435
81430->91436
81430->91437
51361->61438
61438->71439
61438->71440
61438->71441
61438->71442
71442->81443
81443->91444
91444->101445
101445->111446
91444->101447
81443->91448
91448->101449
101449->111450
111450->121451
111450->121452
101449->111453
111453->121454
111453->121455
121455->131456
81443->91457
91457->101458
101458->111459
101458->111460
91457->101461
81443->91462
91462->101463
101463->111464
101463->111465
111465->121466
111465->121467
121467->131468
81443->91469
91469->101470
101470->111471
101470->111472
111472->121473
111472->121474
81443->91475
91475->101476
101476->111477
101476->111478
111478->121479
111478->121480
81443->91481
91481->101482
101482->111483
101482->111484
91481->101485
101485->111486
111486->121487
121487->131488
131488->141489
131488->141490
131488->141491
111486->121492
121492->131493
131493->141494
131493->141495
131493->141496
141496->151497
141496->151498
151498->161499
161499->171500
171500->181501
161499->171502
91481->101503
101503->111504
111504->121505
121505->131506
131506->141507
131506->141508
131506->141509
141509->151510
141509->151511
151511->161512
161512->171513
171513->181514
161512->171515
171515->181516
181516->191517
181516->191518
111504->121519
121519->131520
131520->141521
131520->141522
131520->141523
141523->151524
81443->91525
91525->101526
101526->111527
101526->111528
111528->121529
111528->121530
121530->131531
121530->131532
131532->141533
131532->141534
141534->151535
151535->161536
161536->171537
161536->171538
141534->151539
81443->91540
91540->101541
101541->111542
101541->111543
111543->121544
111543->121545
91540->101546
101546->111547
101546->111548
91540->101549
101549->111550
91540->101551
101551->111552
111552->121553
121553->131554
131554->141555
131554->141556
141556->151557
151557->161558
141556->151559
151559->161560
151559->161561
161561->171562
171562->181563
171562->181564
161561->171565
111552->121566
121566->131567
131567->141568
141568->151569
141568->151570
131567->141571
121566->131572
131572->141573
141573->151574
151574->161575
151574->161576
161576->171577
161576->171578
161576->171579
161576->171580
171580->181581
171580->181582
181582->191583
191583->201584
201584->211585
201584->211586
191583->201587
181582->191588
191588->201589
191588->201590
81443->91591
91591->101592
101592->111593
101592->111594
111594->121595
111594->121596
121596->131597
121596->131598
51361->61599
61599->71600
71600->81601
71600->81602
81602->91603
81602->91604
91604->101605
101605->111606
91604->101607
81602->91608
91608->101609
51361->61610
61610->71611
21126->31612
31612->41613
41613->51614
31612->41615
31612->41616
41616->51617
41616->51618
51618->61619
61619->71620
71620->81621
71620->81622
61619->71623
71623->81624
71623->81625
41616->51626
51626->61627
61627->71628
61627->71629
31612->41630
41630->51631
51631->61632
21126->31633
31633->41634
41634->51635
31633->41636
31633->41637
41637->51638
41637->51639
51639->61640
61640->71641
71641->81642
81642->91643
91643->101644
91643->101645
101645->111646
101645->111647
61640->71648
31633->41649
41649->51650
51650->61651
61651->71652
71652->81653
71652->81654
81654->91655
91655->101656
101656->111657
101656->111658
111658->121659
111658->121660
61651->71661
61651->71662
71662->81663
61651->71664
71664->81665
81665->91666
81665->91667
81665->91668
91668->101669
81665->91670
91670->101671
101671->111672
111672->121673
111672->121674
121674->131675
131675->141676
121674->131677
51650->61678
61678->71679
-10->01680
01680->11681
11681->21682
21682->31683
31683->41684
41684->51685
01680->11686
11686->21687
21687->31688
31688->41689
41689->51690
01680->11691
11691->21692
21692->31693
31693->41694
41694->51695
51695->61696
61696->71697
71697->81698
01680->11699
11699->21700
21700->31701
31701->41702
41702->51703
51703->61704
61704->71705
71705->81706
01680->11707
11707->21708
21708->31709
31709->41710
41710->51711
51711->61712
61712->71713
01680->11714
11714->21715
21715->31716
31716->41717
41717->51718
51718->61719
01680->11720
11720->21721
21721->31722
31722->41723
41723->51724
51724->61725
01680->11726
11726->21727
21727->31728
31728->41729
41729->51730
51730->61731
01680->11732
11732->21733
21733->31734
31734->41735
01680->11736
11736->21737
21737->31738
31738->41739
01680->11740
11740->21741
11740->21742
11740->21743
21743->31744
11740->21745
21745->31746
31746->41747
31746->41748
31746->41749
41749->51750
41749->51751
51751->61752
61752->71753
51751->61754
61754->71755
21745->31756
31756->41757
31756->41758
41758->51759
51759->61760
61760->71761
61760->71762
31756->41763
21745->31764
31764->41765
31764->41766
31764->41767
21745->31768
31768->41769
41769->51770
31768->41771
31768->41772
41772->51773
41772->51774
51774->61775
61775->71776
61775->71777
31768->41778
41778->51779
51779->61780
61780->71781
71781->81782
71781->81783
51779->61784
61784->71785
71785->81786
71785->81787
81787->91788
81787->91789
91789->101790
91789->101791
101791->111792
101791->111793
111793->121794
51779->61795
61795->71796
71796->81797
71796->81798
81798->91799
81798->91800
61795->71801
71801->81802
81802->91803
81802->91804
81802->91805
81802->91806
91806->101807
101807->111808
111808->121809
121809->131810
121809->131811
131811->141812
131811->141813
141813->151814
141813->151815
151815->161816
101807->111817
111817->121818
121818->131819
131819->141820
121818->131821
121818->131822
51779->61823
61823->71824
21745->31825
31825->41826
41826->51827
31825->41828
31825->41829
41829->51830
41829->51831
31825->41832
41832->51833
51833->61834
21745->31835
31835->41836
41836->51837
31835->41838
31835->41839
41839->51840
41839->51841
51841->61842
61842->71843
61842->71844
31835->41845
41845->51846
51846->61847
61847->71848
71848->81849
81849->91850
71848->81851
71848->81852
51846->61853
61853->71854
21745->31855
31855->41856
41856->51857
31855->41858
31855->41859
41859->51860
51860->61861
61861->71862
71862->81863
71862->81864
41859->51865
31855->41866
41866->51867
51867->61868
21745->31869
31869->41870
41870->51871
31869->41872
31869->41873
41873->51874
41873->51875
51875->61876
61876->71877
71877->81878
81878->91879
91879->101880
91879->101881
61876->71882
31869->41883
41883->51884
51884->61885
61885->71886
71886->81887
81887->91888
71886->81889
71886->81890
51884->61891
61891->71892
21745->31893
31893->41894
31893->41895
41895->51896
41895->51897
51897->61898
61898->71899
61898->71900
31893->41901
41901->51902
51902->61903
61903->71904
71904->81905
71904->81906
71904->81907
81907->91908
81907->91909
51902->61910
61910->71911
71911->81912
71911->81913
61910->71914
71914->81915
51902->61916
61916->71917
71917->81918
81918->91919
81918->91920
71917->81921
81921->91922
81921->91923
91923->101924
51902->61925
61925->71926
71926->81927
71926->81928
71926->81929
81929->91930
91930->101931
101931->111932
101931->111933
51902->61934
61934->71935
71935->81936
61934->71937
71937->81938
81938->91939
91939->101940
101940->111941
111941->121942
111941->121943
101940->111944
111944->121945
111944->121946
121946->131947
131947->141948
121946->131949
131949->141950
81938->91951
91951->101952
101952->111953
101952->111954
111954->121955
121955->131956
121955->131957
111954->121958
121958->131959
121958->131960
51902->61961
61961->71962
71962->81963
81963->91964
71962->81965
61961->71966
71966->81967
81967->91968
91968->101969
91968->101970
91968->101971
51902->61972
61972->71973
71973->81974
71973->81975
81975->91976
81975->91977
51902->61978
61978->71979
21745->31980
31980->41981
41981->51982
31980->41983
31980->41984
41984->51985
41984->51986
51986->61987
61987->71988
61987->71989
31980->41990
41990->51991
51991->61992
61992->71993
71993->81994
71993->81995
71993->81996
51991->61997
61997->71998
-10->01999
01999->12000
12000->22001
22001->32002
32002->42003
42003->52004
52004->62005
62005->72006
01999->12007
12007->22008
12007->22009
22009->32010
32010->42011
42011->52012
12007->22013
22013->32014
32014->42015
32014->42016
22013->32017
32017->42018
32017->42019
42019->52020
32017->42021
22013->32022
32022->42023
42023->52024
42023->52025
52025->62026
62026->72027
62026->72028
52025->62029
62029->72030
62029->72031
32022->42032
42032->52033
52033->62034
62034->72035
62034->72036
62034->72037
72037->82038
82038->92039
82038->92040
72037->82041
22013->32042
32042->42043
32042->42044
42044->52045
42044->52046
52046->62047
62047->72048
62047->72049
32042->42050
42050->52051
52051->62052
62052->72053
72053->82054
62052->72055
72055->82056
82056->92057
22013->32058
32058->42059
42059->52060
32058->42061
32058->42062
42062->52063
42062->52064
52064->62065
62065->72066
62065->72067
32058->42068
42068->52069
52069->62070
62070->72071
72071->82072
82072->92073
92073->102074
92073->102075
62070->72076
72076->82077
52069->62078
62078->72079
72079->82080
72079->82081
82081->92082
82081->92083
92083->102084
92083->102085
52069->62086
62086->72087
72087->82088
72087->82089
82089->92090
22013->32091
32091->42092
32091->42093
42093->52094
42093->52095
32091->42096
42096->52097
52097->62098
62098->72099
72099->82100
72099->82101
22013->32102
32102->42103
32102->42104
42104->52105
42104->52106
32102->42107
42107->52108
52108->62109
62109->72110
72110->82111
72110->82112
-10->02113
02113->12114
12114->22115
22115->32116
32116->42117
42117->52118
52118->62119
02113->12120
12120->22121
22121->32122
32122->42123
42123->52124
52124->62125
62125->72126
72126->82127
02113->12128
12128->22129
22129->32130
32130->42131
42131->52132
52132->62133
62133->72134
02113->12135
12135->22136
22136->32137
02113->12138
12138->22139
12138->22140
22140->32141
12138->22142
22142->32143
32143->42144
32143->42145
42145->52146
42145->52147
32143->42148
22142->32149
32149->42150
32149->42151
32149->42152
22142->32153
32153->42154
32153->42155
42155->52156
52156->62157
32153->42158
-10->02159
02159->12160
12160->22161
22161->32162
32162->42163
42163->52164
52164->62165
02159->12166
12166->22167
12166->22168
12166->22169
22169->32170
32170->42171
32170->42172
32170->42173
42173->52174
42173->52175
32170->42176
22169->32177
32177->42178
32177->42179
42179->52180
42179->52181
52181->62182
62182->72183
72183->82184
72183->82185
62182->72186
72186->82187
72186->82188
32177->42189
42189->52190
52190->62191
62191->72192
72192->82193
62191->72194
72194->82195
72194->82196
72194->82197
22169->32198
32198->42199
32198->42200
42200->52201
42200->52202
32198->42203
42203->52204
52204->62205
62205->72206
72206->82207
82207->92208
72206->82209
52204->62210
62210->72211
72211->82212
82212->92213
72211->82214
52204->62215
62215->72216
72216->82217
82217->92218
72216->82219
52204->62220
62220->72221
72221->82222
72221->82223
82223->92224
82223->92225
52204->62226
62226->72227
72227->82228
72227->82229
82229->92230
82229->92231
52204->62232
62232->72233
72233->82234
72233->82235
82235->92236
82235->92237
52204->62238
62238->72239
72239->82240
72239->82241
82241->92242
82241->92243
92243->102244
92243->102245
52204->62246
62246->72247
72247->82248
72247->82249
82249->92250
82249->92251
52204->62252
62252->72253
72253->82254
72253->82255
82255->92256
82255->92257
52204->62258
62258->72259
72259->82260
72259->82261
82261->92262
82261->92263
52204->62264
62264->72265
72265->82266
72265->82267
82267->92268
82267->92269
52204->62270
62270->72271
72271->82272
72271->82273
82273->92274
82273->92275
52204->62276
62276->72277
72277->82278
72277->82279
82279->92280
82279->92281
52204->62282
62282->72283
72283->82284
72283->82285
82285->92286
82285->92287
52204->62288
62288->72289
72289->82290
52204->62291
62291->72292
72292->82293
72292->82294
22169->32295
32295->42296
32295->42297
42297->52298
42297->52299
52299->62300
62300->72301
72301->82302
72301->82303
62300->72304
72304->82305
82305->92306
82305->92307
72304->82308
32295->42309
42309->52310
52310->62311
62311->72312
62311->72313
72313->82314
72313->82315
72313->82316
22169->32317
32317->42318
32317->42319
42319->52320
42319->52321
52321->62322
62322->72323
72323->82324
82324->92325
82324->92326
72323->82327
82327->92328
92328->102329
92328->102330
82327->92331
62322->72332
72332->82333
72332->82334
32317->42335
42335->52336
52336->62337
62337->72338
72338->82339
72338->82340
82340->92341
82340->92342
62337->72343
72343->82344
72343->82345
82345->92346
62337->72347
72347->82348
62337->72349
72349->82350
82350->92351
92351->102352
92351->102353
102353->112354
102353->112355
82350->92356
92356->102357
102357->112358
112358->122359
122359->132360
122359->132361
132361->142362
142362->152363
142362->152364
152364->162365
162365->172366
152364->162367
112358->122368
122368->132369
132369->142370
142370->152371
142370->152372
152372->162373
152372->162374
102357->112375
112375->122376
52336->62377
62377->72378
72378->82379
22169->32380
32380->42381
32380->42382
42382->52383
42382->52384
52384->62385
62385->72386
72386->82387
82387->92388
82387->92389
72386->82390
62385->72391
72391->82392
72391->82393
32380->42394
42394->52395
52395->62396
62396->72397
72397->82398
72397->82399
52395->62400
62400->72401
72401->82402
82402->92403
92403->102404
92403->102405
92403->102406
102406->112407
102406->112408
112408->122409
112408->122410
72401->82411
62400->72412
72412->82413
82413->92414
82413->92415
92415->102416
92415->102417
102417->112418
102417->112419
112419->122420
112419->122421
52395->62422
62422->72423
72423->82424
82424->92425
92425->102426
92425->102427
92425->102428
102428->112429
102428->112430
112430->122431
112430->122432
72423->82433
62422->72434
72434->82435
82435->92436
82435->92437
92437->102438
92437->102439
102439->112440
102439->112441
52395->62442
62442->72443
72443->82444
82444->92445
92445->102446
92445->102447
92445->102448
102448->112449
102448->112450
112450->122451
112450->122452
72443->82453
62442->72454
72454->82455
82455->92456
82455->92457
92457->102458
102458->112459
102458->112460
112460->122461
112460->122462
122462->132463
122462->132464
92457->102465
52395->62466
62466->72467
72467->82468
62466->72469
72469->82470
82470->92471
82470->92472
52395->62473
62473->72474
72474->82475
82475->92476
92476->102477
92476->102478
92476->102479
102479->112480
102479->112481
112481->122482
112481->122483
72474->82484
62473->72485
72485->82486
82486->92487
82486->92488
92488->102489
92488->102490
102490->112491
102490->112492
112492->122493
112492->122494
52395->62495
62495->72496
72496->82497
82497->92498
92498->102499
92498->102500
92498->102501
102501->112502
102501->112503
112503->122504
112503->122505
72496->82506
62495->72507
72507->82508
82508->92509
82508->92510
92510->102511
92510->102512
102512->112513
102512->112514
112514->122515
112514->122516
52395->62517
62517->72518
72518->82519
82519->92520
92520->102521
92520->102522
92520->102523
102523->112524
102523->112525
112525->122526
112525->122527
72518->82528
62517->72529
72529->82530
82530->92531
82530->92532
92532->102533
92532->102534
102534->112535
102534->112536
112536->122537
112536->122538
52395->62539
62539->72540
72540->82541
82541->92542
92542->102543
92542->102544
92542->102545
102545->112546
102545->112547
112547->122548
112547->122549
72540->82550
62539->72551
72551->82552
82552->92553
82552->92554
92554->102555
102555->112556
102555->112557
112557->122558
112557->122559
122559->132560
122559->132561
92554->102562
52395->62563
62563->72564
72564->82565
82565->92566
92566->102567
92566->102568
92566->102569
102569->112570
102569->112571
112571->122572
112571->122573
72564->82574
62563->72575
72575->82576
82576->92577
82576->92578
92578->102579
92578->102580
102580->112581
102580->112582
112582->122583
112582->122584
52395->62585
62585->72586
72586->82587
82587->92588
92588->102589
92588->102590
92588->102591
102591->112592
102591->112593
112593->122594
112593->122595
72586->82596
62585->72597
72597->82598
82598->92599
82598->92600
92600->102601
92600->102602
102602->112603
102602->112604
112604->122605
112604->122606
52395->62607
62607->72608
72608->82609
82609->92610
92610->102611
92610->102612
92610->102613
102613->112614
102613->112615
112615->122616
112615->122617
72608->82618
62607->72619
72619->82620
82620->92621
82620->92622
92622->102623
92622->102624
102624->112625
102624->112626
112626->122627
112626->122628
52395->62629
62629->72630
72630->82631
82631->92632
92632->102633
92632->102634
92632->102635
102635->112636
102635->112637
112637->122638
112637->122639
72630->82640
62629->72641
72641->82642
82642->92643
82642->92644
92644->102645
92644->102646
102646->112647
102646->112648
112648->122649
112648->122650
-10->02651
02651->12652
12652->22653
22653->32654
32654->42655
42655->52656
52656->62657
02651->12658
12658->22659
22659->32660
32660->42661
42661->52662
52662->62663
02651->12664
12664->22665
22665->32666
02651->12667
12667->22668
12667->22669
12667->22670
22670->32671
12667->22672
22672->32673
32673->42674
42674->52675
52675->62676
62676->72677
62676->72678
32673->42679
22672->32680
32680->42681
32680->42682
42682->52683
42682->52684
52684->62685
62685->72686
72686->82687
82687->92688
82687->92689
52684->62690
32680->42691
42691->52692
52692->62693
62693->72694
72694->82695
62693->72696
62693->72697
22672->32698
32698->42699
32698->42700
42700->52701
32698->42702
42702->52703
52703->62704
62704->72705
62704->72706
62704->72707
72707->82708
82708->92709
92709->102710
92709->102711
22672->32712
32712->42713
32712->42714
32712->42715
42715->52716
42715->52717
52717->62718
62718->72719
62718->72720
32712->42721
42721->52722
52722->62723
62723->72724
72724->82725
72724->82726
82726->92727
82726->92728
92728->102729
92728->102730
52722->62731
62731->72732
72732->82733
72732->82734
62731->72735
72735->82736
52722->62737
62737->72738
22672->32739
32739->42740
32739->42741
42741->52742
42741->52743
52743->62744
62744->72745
72745->82746
72745->82747
62744->72748
72748->82749
72748->82750
32739->42751
42751->52752
52752->62753
62753->72754
72754->82755
72754->82756
82756->92757
82756->92758
92758->102759
92758->102760
52752->62761
62761->72762
72762->82763
72762->82764
62761->72765
72765->82766
82766->92767
92767->102768
52752->62769
62769->72770
72770->82771
72770->82772
82772->92773
82772->92774
92774->102775
92774->102776
52752->62777
62777->72778
72778->82779
72778->82780
62777->72781
72781->82782
82782->92783
92783->102784
52752->62785
62785->72786
72786->82787
72786->82788
22672->32789
32789->42790
32789->42791
42791->52792
52792->62793
62793->72794
72794->82795
72794->82796
82796->92797
92797->102798
102798->112799
102798->112800
42791->52801
52801->62802
62802->72803
72803->82804
72803->82805
62802->72806
72806->82807
72806->82808
32789->42809
42809->52810
52810->62811
62811->72812
72812->82813
72812->82814
82814->92815
82814->92816
92816->102817
92816->102818
52810->62819
62819->72820
72820->82821
72820->82822
62819->72823
72823->82824
82824->92825
92825->102826
52810->62827
62827->72828
72828->82829
72828->82830
82830->92831
82830->92832
82830->92833
22672->32834
32834->42835
32834->42836
42836->52837
52837->62838
62838->72839
72839->82840
72839->82841
82841->92842
92842->102843
102843->112844
102843->112845
42836->52846
52846->62847
62847->72848
72848->82849
82849->92850
82849->92851
72848->82852
82852->92853
82852->92854
62847->72855
72855->82856
72855->82857
32834->42858
42858->52859
52859->62860
62860->72861
72861->82862
82862->92863
92863->102864
102864->112865
102864->112866
112866->122867
122867->132868
132868->142869
132868->142870
72861->82871
82871->92872
82871->92873
92873->102874
102874->112875
112875->122876
112875->122877
122877->132878
132878->142879
142879->152880
142879->152881
92873->102882
102882->112883
102882->112884
112884->122885
122885->132886
132886->142887
132886->142888
142888->152889
152889->162890
162890->172891
162890->172892
112884->122893
122893->132894
132894->142895
142895->152896
132894->142897
132894->142898
142898->152899
142898->152900
152900->162901
162901->172902
172902->182903
182903->192904
182903->192905
192905->202906
202906->212907
212907->222908
212907->222909
172902->182910
162901->172911
172911->182912
182912->192913
182912->192914
192914->202915
202915->212916
212916->222917
212916->222918
172911->182919
132894->142920
142920->152921
152921->162922
162922->172923
172923->182924
162922->172925
172925->182926
182926->192927
52859->62928
62928->72929
72929->82930
72929->82931
82931->92932
92932->102933
102933->112934
102933->112935
62928->72936
62928->72937
72937->82938
62928->72939
72939->82940
82940->92941
92941->102942
102942->112943
112943->122944
102942->112945
112945->122946
92941->102947
102947->112948
82940->92949
92949->102950
102950->112951
102950->112952
112952->122953
122953->132954
132954->142955
132954->142956
112952->122957
122957->132958
132958->142959
122957->132960
132960->142961
142961->152962
132960->142963
142963->152964
52859->62965
62965->72966
72966->82967
22672->32968
32968->42969
32968->42970
42970->52971
52971->62972
62972->72973
72973->82974
72973->82975
82975->92976
92976->102977
102977->112978
102977->112979
42970->52980
52980->62981
62981->72982
72982->82983
72982->82984
62981->72985
72985->82986
72985->82987
32968->42988
42988->52989
52989->62990
62990->72991
72991->82992
82992->92993
92993->102994
102994->112995
102994->112996
112996->122997
122997->132998
132998->142999
132998->143000
72991->83001
83001->93002
83001->93003
93003->103004
103004->113005
113005->123006
113005->123007
123007->133008
133008->143009
143009->153010
143009->153011
93003->103012
103012->113013
103012->113014
113014->123015
123015->133016
133016->143017
133016->143018
143018->153019
153019->163020
163020->173021
163020->173022
113014->123023
123023->133024
133024->143025
143025->153026
133024->143027
133024->143028
143028->153029
143028->153030
153030->163031
163031->173032
173032->183033
183033->193034
183033->193035
193035->203036
203036->213037
213037->223038
213037->223039
173032->183040
163031->173041
173041->183042
183042->193043
183042->193044
193044->203045
203045->213046
213046->223047
213046->223048
173041->183049
133024->143050
143050->153051
153051->163052
163052->173053
173053->183054
163052->173055
173055->183056
183056->193057
52989->63058
63058->73059
73059->83060
73059->83061
83061->93062
93062->103063
103063->113064
103063->113065
63058->73066
63058->73067
73067->83068
63058->73069
73069->83070
83070->93071
93071->103072
93071->103073
103073->113074
113074->123075
123075->133076
123075->133077
103073->113078
113078->123079
123079->133080
113078->123081
123081->133082
133082->143083
123081->133084
133084->143085
52989->63086
63086->73087
73087->83088
22672->33089
33089->43090
33089->43091
43091->53092
53092->63093
63093->73094
73094->83095
73094->83096
83096->93097
93097->103098
103098->113099
103098->113100
43091->53101
53101->63102
63102->73103
63102->73104
33089->43105
43105->53106
53106->63107
63107->73108
63107->73109
73109->83110
73109->83111
22672->33112
33112->43113
33112->43114
43114->53115
53115->63116
63116->73117
73117->83118
73117->83119
83119->93120
93120->103121
103121->113122
103121->113123
43114->53124
53124->63125
63125->73126
63125->73127
33112->43128
43128->53129
53129->63130
63130->73131
63130->73132
73132->83133
73132->83134
22672->33135
33135->43136
33135->43137
43137->53138
53138->63139
63139->73140
73140->83141
73140->83142
83142->93143
93143->103144
103144->113145
103144->113146
43137->53147
53147->63148
63148->73149
73149->83150
73149->83151
63148->73152
73152->83153
73152->83154
33135->43155
43155->53156
53156->63157
63157->73158
73158->83159
83159->93160
83159->93161
73158->83162
83162->93163
93163->103164
83162->93165
63157->73166
73166->83167
83167->93168
93168->103169
53156->63170
63170->73171
73171->83172
83172->93173
93173->103174
93173->103175
103175->113176
113176->123177
113176->123178
103175->113179
63170->73180
73180->83181
83181->93182
83181->93183
73180->83184
83184->93185
93185->103186
103186->113187
22672->33188
33188->43189
33188->43190
33188->43191
43191->53192
43191->53193
53193->63194
63194->73195
63194->73196
33188->43197
22672->33198
33198->43199
33198->43200
43200->53201
43200->53202
33198->43203
43203->53204
53204->63205
63205->73206
22672->33207
33207->43208
33207->43209
43209->53210
43209->53211
33207->43212
43212->53213
53213->63214
63214->73215
73215->83216
83216->93217
83216->93218
73215->83219
83219->93220
63214->73221
73221->83222
83222->93223
53213->63224
63224->73225
73225->83226
83226->93227
73225->83228
73225->83229
73225->83230
22672->33231
33231->43232
33231->43233
43233->53234
43233->53235
53235->63236
63236->73237
63236->73238
33231->43239
43239->53240
53240->63241
63241->73242
63241->73243
-10->03244
03244->13245
13245->23246
23246->33247
33247->43248
43248->53249
53249->63250
63250->73251
03244->13252
13252->23253
13252->23254
23254->33255
13252->23256
23256->33257
13252->23258
23258->33259
33259->43260
33259->43261
43261->53262
33259->43263
23258->33264
33264->43265
33264->43266
43266->53267
43266->53268
53268->63269
63269->73270
63269->73271
53268->63272
63272->73273
63272->73274
33264->43275
43275->53276
53276->63277
63277->73278
63277->73279
-10->03280
03280->13281
13281->23282
23282->33283
33283->43284
43284->53285
53285->63286
63286->73287
03280->13288
13288->23289
13288->23290
23290->33291
13288->23292
23292->33293
33293->43294
33293->43295
33293->43296
43296->53297
43296->53298
33293->43299
43299->53300
53300->63301
63301->73302
73302->83303
73302->83304
23292->33305
33305->43306
33305->43307
33305->43308
43308->53309
43308->53310
53310->63311
63311->73312
63311->73313
63311->73314
33305->43315
43315->53316
53316->63317
63317->73318
73318->83319
73318->83320
23292->33321
33321->43322
33321->43323
33321->43324
43324->53325
43324->53326
53326->63327
63327->73328
63327->73329
63327->73330
33321->43331
43331->53332
53332->63333
63333->73334
73334->83335
73334->83336
-10->03337
03337->13338
13338->23339
23339->33340
33340->43341
43341->53342
53342->63343
63343->73344
03337->13345
13345->23346
13345->23347
23347->33348
33348->43349
33348->43350
43350->53351
43350->53352
23347->33353
33353->43354
33353->43355
43355->53356
43355->53357
23347->33358
33358->43359
33358->43360
43360->53361
43360->53362
23347->33363
33363->43364
33363->43365
43365->53366
43365->53367
-10->03368
03368->13369
13369->23370
23370->33371
33371->43372
43372->53373
53373->63374
63374->73375
03368->13376
13376->23377
23377->33378
33378->43379
43379->53380
53380->63381
63381->73382
03368->13383
13383->23384
23384->33385
33385->43386
03368->13387
13387->23388
23388->33389
33389->43390
03368->13391
13391->23392
13391->23393
23393->33394
13391->23395
23395->33396
33396->43397
33396->43398
33396->43399
43399->53400
43399->53401
53401->63402
63402->73403
63402->73404
63402->73405
33396->43406
43406->53407
53407->63408
63408->73409
73409->83410
83410->93411
73409->83412
23395->33413
33413->43414
33413->43415
33413->43416
43416->53417
43416->53418
53418->63419
63419->73420
73420->83421
73420->83422
73420->83423
63419->73424
73424->83425
83425->93426
83425->93427
73424->83428
33413->43429
43429->53430
53430->63431
63431->73432
73432->83433
83433->93434
73432->83435
63431->73436
73436->83437
83437->93438
93438->103439
103439->113440
113440->123441
113440->123442
103439->113443
103439->113444
113444->123445
83437->93446
93446->103447
53430->63448
63448->73449
73449->83450
83450->93451
83450->93452
73449->83453
73449->83454
53430->63455
63455->73456
23395->33457
33457->43458
33457->43459
33457->43460
43460->53461
43460->53462
53462->63463
63463->73464
73464->83465
73464->83466
73464->83467
63463->73468
73468->83469
83469->93470
83469->93471
73468->83472
33457->43473
43473->53474
53474->63475
63475->73476
73476->83477
83477->93478
73476->83479
63475->73480
73480->83481
83481->93482
93482->103483
103483->113484
113484->123485
113484->123486
103483->113487
103483->113488
113488->123489
83481->93490
93490->103491
53474->63492
63492->73493
73493->83494
83494->93495
83494->93496
73493->83497
73493->83498
53474->63499
63499->73500
23395->33501
33501->43502
43502->53503
43502->53504
53504->63505
63505->73506
73506->83507
83507->93508
93508->103509
103509->113510
83507->93511
73506->83512
83512->93513
93513->103514
103514->113515
83512->93516
63505->73517
73517->83518
83518->93519
93519->103520
73517->83521
33501->43522
43522->53523
53523->63524
63524->73525
73525->83526
73525->83527
83527->93528
83527->93529
93529->103530
53523->63531
63531->73532
73532->83533
73532->83534
83534->93535
83534->93536
93536->103537
53523->63538
63538->73539
73539->83540
83540->93541
93541->103542
103542->113543
113543->123544
73539->83545
83545->93546
83545->93547
93547->103548
103548->113549
113549->123550
123550->133551
93547->103552
53523->63553
63553->73554
73554->83555
53523->63556
63556->73557
73557->83558
73557->83559
83559->93560
83559->93561
63556->73562
73562->83563
73562->83564
63556->73565
73565->83566
63556->73567
73567->83568
83568->93569
93569->103570
103570->113571
103570->113572
113572->123573
113572->123574
123574->133575
123574->133576
83568->93577
93577->103578
103578->113579
103578->113580
113580->123581
93577->103582
103582->113583
113583->123584
123584->133585
133585->143586
133585->143587
143587->153588
123584->133589
133589->143590
143590->153591
153591->163592
143590->153593
113583->123594
123594->133595
133595->143596
133595->143597
133595->143598
93577->103599
103599->113600
113600->123601
123601->133602
133602->143603
133602->143604
123601->133605
53523->63606
63606->73607
73607->83608
73607->83609
83609->93610
83609->93611
83609->93612
83609->93613
83609->93614
23395->33615
33615->43616
43616->53617
43616->53618
53618->63619
63619->73620
73620->83621
83621->93622
83621->93623
73620->83624
83624->93625
93625->103626
103626->113627
83624->93628
73620->83629
83629->93630
93630->103631
103631->113632
83629->93633
73620->83634
83634->93635
93635->103636
103636->113637
113637->123638
123638->133639
83634->93640
63619->73641
73641->83642
83642->93643
93643->103644
73641->83645
33615->43646
43646->53647
53647->63648
63648->73649
73649->83650
83650->93651
93651->103652
73649->83653
83653->93654
83653->93655
93655->103656
93655->103657
53647->63658
63658->73659
73659->83660
73659->83661
53647->63662
63662->73663
73663->83664
73663->83665
73663->83666
63662->73667
73667->83668
83668->93669
83668->93670
93670->103671
73667->83672
83672->93673
93673->103674
93673->103675
83672->93676
63662->73677
73677->83678
63662->73679
73679->83680
83680->93681
93681->103682
93681->103683
103683->113684
113684->123685
113684->123686
103683->113687
103683->113688
103683->113689
103683->113690
53647->63691
63691->73692
73692->83693
73692->83694
83694->93695
53647->63696
63696->73697
73697->83698
73697->83699
83699->93700
83699->93701
63696->73702
73702->83703
73702->83704
83704->93705
63696->73706
73706->83707
63696->73708
73708->83709
83709->93710
93710->103711
103711->113712
103711->113713
113713->123714
113713->123715
123715->133716
123715->133717
83709->93718
93718->103719
103719->113720
103719->113721
113721->123722
113721->123723
113721->123724
113721->123725
113721->123726
83709->93727
93727->103728
103728->113729
103728->113730
113730->123731
113730->123732
123732->133733
123732->133734
53647->63735
63735->73736
73736->83737
73736->83738
83738->93739
83738->93740
93740->103741
93740->103742
63735->73743
73743->83744
73743->83745
63735->73746
73746->83747
63735->73748
73748->83749
83749->93750
93750->103751
103751->113752
103751->113753
113753->123754
113753->123755
123755->133756
123755->133757
83749->93758
93758->103759
103759->113760
103759->113761
113761->123762
113761->123763
123763->133764
123763->133765
23395->33766
33766->43767
43767->53768
43767->53769
53769->63770
63770->73771
73771->83772
73771->83773
63770->73774
73774->83775
83775->93776
93776->103777
73774->83778
33766->43779
43779->53780
53780->63781
63781->73782
63781->73783
73783->83784
83784->93785
73783->83786
83786->93787
73783->83788
23395->33789
33789->43790
43790->53791
43790->53792
53792->63793
63793->73794
73794->83795
83795->93796
93796->103797
103797->113798
83795->93799
73794->83800
83800->93801
93801->103802
103802->113803
83800->93804
63793->73805
73805->83806
83806->93807
93807->103808
73805->83809
33789->43810
43810->53811
53811->63812
63812->73813
73813->83814
53811->63815
63815->73816
73816->83817
73816->83818
83818->93819
83818->93820
93820->103821
53811->63822
63822->73823
73823->83824
83824->93825
93825->103826
73823->83827
83827->93828
83827->93829
93829->103830
103830->113831
53811->63832
63832->73833
73833->83834
73833->83835
83835->93836
83835->93837
53811->63838
63838->73839
73839->83840
83840->93841
93841->103842
73839->83843
83843->93844
83843->93845
93845->103846
103846->113847
93845->103848
53811->63849
63849->73850
73850->83851
73850->83852
83852->93853
83852->93854
63849->73855
73855->83856
73855->83857
63849->73858
73858->83859
63849->73860
73860->83861
83861->93862
93862->103863
93862->103864
103864->113865
53811->63866
63866->73867
73867->83868
73867->83869
83869->93870
83869->93871
53811->63872
63872->73873
73873->83874
83874->93875
93875->103876
103876->113877
113877->123878
103876->113879
93875->103880
103880->113881
103880->113882
63872->73883
73883->83884
83884->93885
93885->103886
103886->113887
113887->123888
113887->123889
103886->113890
113890->123891
113890->123892
123892->133893
123892->133894
123892->133895
133895->143896
83884->93897
93897->103898
103898->113899
103898->113900
113900->123901
113900->123902
113900->123903
113900->123904
113900->123905
113900->123906
83884->93907
93907->103908
103908->113909
103908->113910
103908->113911
113911->123912
113911->123913
23395->33914
33914->43915
43915->53916
43915->53917
53917->63918
63918->73919
73919->83920
83920->93921
93921->103922
103922->113923
83920->93924
73919->83925
83925->93926
93926->103927
103927->113928
83925->93929
73919->83930
83930->93931
93931->103932
103932->113933
83930->93934
73919->83935
83935->93936
93936->103937
93936->103938
83935->93939
73919->83940
83940->93941
93941->103942
103942->113943
83940->93944
63918->73945
73945->83946
83946->93947
93947->103948
73945->83949
33914->43950
43950->53951
53951->63952
63952->73953
73953->83954
73953->83955
83955->93956
83955->93957
93957->103958
103958->113959
113959->123960
123960->133961
113959->123962
103958->113963
113963->123964
113963->123965
123965->133966
133966->143967
123965->133968
103958->113969
113969->123970
53951->63971
63971->73972
73972->83973
73972->83974
83974->93975
83974->93976
93976->103977
103977->113978
113978->123979
123979->133980
113978->123981
103977->113982
113982->123983
113982->123984
123984->133985
133985->143986
123984->133987
103977->113988
113988->123989
53951->63990
63990->73991
73991->83992
73991->83993
83993->93994
83993->93995
53951->63996
63996->73997
73997->83998
73997->83999
63996->74000
74000->84001
84001->94002
94002->104003
94002->104004
104004->114005
104004->114006
84001->94007
94007->104008
94007->104009
104009->114010
84001->94011
94011->104012
84001->94013
94013->104014
104014->114015
114015->124016
124016->134017
134017->144018
134017->144019
124016->134020
114015->124021
124021->134022
134022->144023
134022->144024
124021->134025
104014->114026
114026->124027
124027->134028
134028->144029
144029->154030
144029->154031
144029->154032
124027->134033
53951->64034
64034->74035
74035->84036
84036->94037
84036->94038
74035->84039
84039->94040
94040->104041
94040->104042
84039->94043
64034->74044
74044->84045
84045->94046
94046->104047
104047->114048
104047->114049
114049->124050
114049->124051
124051->134052
124051->134053
84045->94054
94054->104055
104055->114056
104055->114057
114057->124058
114057->124059
84045->94060
94060->104061
104061->114062
104061->114063
114063->124064
124064->134065
114063->124066
84045->94067
94067->104068
104068->114069
104068->114070
114070->124071
124071->134072
134072->144073
124071->134074
114070->124075
64034->74076
74076->84077
84077->94078
94078->104079
104079->114080
104079->114081
94078->104082
104082->114083
114083->124084
114083->124085
104082->114086
84077->94087
74076->84088
84088->94089
94089->104090
104090->114091
114091->124092
114091->124093
124093->134094
124093->134095
134095->144096
134095->144097
94089->104098
104098->114099
114099->124100
114099->124101
124101->134102
124101->134103
94089->104104
104104->114105
114105->124106
114105->124107
124107->134108
134108->144109
124107->134110
74076->84111
84111->94112
94112->104113
104113->114114
104113->114115
94112->104116
104116->114117
84111->94118
94118->104119
104119->114120
114120->124121
124121->134122
124121->134123
134123->144124
104119->114125
114125->124126
124126->134127
124126->134128
134128->144129
134128->144130
104119->114131
114131->124132
124132->134133
134133->144134
134133->144135
-10->04136
04136->14137
14137->24138
24138->34139
34139->44140
44140->54141
54141->64142
64142->74143
04136->14144
14144->24145
14144->24146
24146->34147
34147->44148
34147->44149
24146->34150
34150->44151
34150->44152
24146->34153
34153->44154
34153->44155
24146->34156
34156->44157
34156->44158
-10->04159
04159->14160
14160->24161
24161->34162
34162->44163
44163->54164
04159->14165
14165->24166
24166->34167
34167->44168
44168->54169
04159->14170
14170->24171
24171->34172
34172->44173
44173->54174
54174->64175
64175->74176
04159->14177
14177->24178
24178->34179
34179->44180
44180->54181
54181->64182
64182->74183
04159->14184
14184->24185
24185->34186
34186->44187
44187->54188
54188->64189
64189->74190
04159->14191
14191->24192
24192->34193
34193->44194
44194->54195
54195->64196
64196->74197
74197->84198
04159->14199
14199->24200
24200->34201
34201->44202
44202->54203
54203->64204
64204->74205
04159->14206
14206->24207
24207->34208
34208->44209
44209->54210
54210->64211
64211->74212
04159->14213
14213->24214
24214->34215
34215->44216
44216->54217
54217->64218
64218->74219
74219->84220
84220->94221
04159->14222
14222->24223
24223->34224
34224->44225
44225->54226
54226->64227
64227->74228
74228->84229
84229->94230
04159->14231
14231->24232
24232->34233
34233->44234
44234->54235
54235->64236
64236->74237
04159->14238
14238->24239
24239->34240
34240->44241
44241->54242
54242->64243
64243->74244
04159->14245
14245->24246
24246->34247
34247->44248
44248->54249
54249->64250
64250->74251
04159->14252
14252->24253
24253->34254
34254->44255
44255->54256
54256->64257
04159->14258
14258->24259
24259->34260
34260->44261
44261->54262
54262->64263
04159->14264
14264->24265
24265->34266
34266->44267
44267->54268
54268->64269
04159->14270
14270->24271
24271->34272
34272->44273
04159->14274
14274->24275
24275->34276
04159->14277
14277->24278
24278->34279
34279->44280
04159->14281
14281->24282
24282->34283
34283->44284
04159->14285
14285->24286
24286->34287
34287->44288
04159->14289
14289->24290
24290->34291
34291->44292
04159->14293
14293->24294
14293->24295
24295->34296
14293->24297
24297->34298
34298->44299
34298->44300
44300->54301
44300->54302
44300->54303
54303->64304
34298->44305
44305->54306
54306->64307
64307->74308
74308->84309
84309->94310
94310->104311
74308->84312
84312->94313
84312->94314
94314->104315
94314->104316
54306->64317
64317->74318
64317->74319
64317->74320
64317->74321
74321->84322
84322->94323
94323->104324
94323->104325
24297->34326
34326->44327
34326->44328
34326->44329
44329->54330
44329->54331
54331->64332
64332->74333
64332->74334
34326->44335
44335->54336
54336->64337
64337->74338
74338->84339
84339->94340
94340->104341
94340->104342
104342->114343
104342->114344
114344->124345
114344->124346
124346->134347
74338->84348
84348->94349
94349->104350
94349->104351
104351->114352
104351->114353
114353->124354
74338->84355
84355->94356
94356->104357
94356->104358
94356->104359
104359->114360
104359->114361
114361->124362
114361->124363
74338->84364
84364->94365
94365->104366
94365->104367
94365->104368
104368->114369
104368->114370
114370->124371
114370->124372
74338->84373
84373->94374
94374->104375
94374->104376
94374->104377
104377->114378
104377->114379
114379->124380
114379->124381
74338->84382
84382->94383
94383->104384
94383->104385
94383->104386
104386->114387
104386->114388
114388->124389
114388->124390
74338->84391
84391->94392
94392->104393
94392->104394
94392->104395
104395->114396
104395->114397
114397->124398
114397->124399
74338->84400
84400->94401
94401->104402
94401->104403
94401->104404
104404->114405
104404->114406
114406->124407
114406->124408
74338->84409
84409->94410
94410->104411
94410->104412
94410->104413
104413->114414
104413->114415
114415->124416
114415->124417
74338->84418
84418->94419
94419->104420
94419->104421
94419->104422
104422->114423
104422->114424
114424->124425
114424->124426
74338->84427
84427->94428
94428->104429
94428->104430
94428->104431
104431->114432
104431->114433
114433->124434
114433->124435
74338->84436
84436->94437
94437->104438
94437->104439
94437->104440
104440->114441
104440->114442
114442->124443
114442->124444
74338->84445
84445->94446
94446->104447
94446->104448
94446->104449
104449->114450
104449->114451
114451->124452
114451->124453
74338->84454
84454->94455
94455->104456
94455->104457
94455->104458
104458->114459
104458->114460
114460->124461
114460->124462
74338->84463
84463->94464
94464->104465
94464->104466
94464->104467
104467->114468
104467->114469
114469->124470
114469->124471
74338->84472
84472->94473
94473->104474
94473->104475
94473->104476
104476->114477
104476->114478
114478->124479
114478->124480
74338->84481
84481->94482
94482->104483
94482->104484
94482->104485
104485->114486
104485->114487
114487->124488
114487->124489
74338->84490
84490->94491
94491->104492
94491->104493
94491->104494
104494->114495
104494->114496
114496->124497
114496->124498
74338->84499
84499->94500
94500->104501
94500->104502
94500->104503
104503->114504
104503->114505
114505->124506
114505->124507
74338->84508
84508->94509
94509->104510
94509->104511
94509->104512
104512->114513
104512->114514
114514->124515
114514->124516
74338->84517
84517->94518
94518->104519
94518->104520
94518->104521
104521->114522
104521->114523
114523->124524
114523->124525
74338->84526
84526->94527
94527->104528
104528->114529
94527->104530
84526->94531
94531->104532
104532->114533
114533->124534
124534->134535
124534->134536
134536->144537
134536->144538
144538->154539
154539->164540
164540->174541
104532->114542
114542->124543
124543->134544
124543->134545
104532->114546
114546->124547
124547->134548
104532->114549
114549->124550
124550->134551
134551->144552
124550->134553
134553->144554
134553->144555
54336->64556
64556->74557
74557->84558
74557->84559
64556->74560
74560->84561
84561->94562
94562->104563
24297->34564
34564->44565
34564->44566
34564->44567
44567->54568
44567->54569
54569->64570
64570->74571
74571->84572
74571->84573
64570->74574
74574->84575
74574->84576
34564->44577
44577->54578
54578->64579
64579->74580
74580->84581
74580->84582
74580->84583
84583->94584
84583->94585
94585->104586
104586->114587
114587->124588
114587->124589
104586->114590
94585->104591
54578->64592
64592->74593
74593->84594
74593->84595
84595->94596
94596->104597
94596->104598
84595->94599
94599->104600
94599->104601
24297->34602
34602->44603
34602->44604
44604->54605
44604->54606
44604->54607
54607->64608
34602->44609
44609->54610
54610->64611
64611->74612
74612->84613
74612->84614
74612->84615
84615->94616
84615->94617
54610->64618
64618->74619
74619->84620
74619->84621
84621->94622
84621->94623
94623->104624
104624->114625
114625->124626
124626->134627
114625->124628
114625->124629
124629->134630
124629->134631
134631->144632
144632->154633
144632->154634
114625->124635
124635->134636
134636->144637
144637->154638
154638->164639
134636->144640
134636->144641
144641->154642
134636->144643
144643->154644
154644->164645
154644->164646
154644->164647
154644->164648
164648->174649
174649->184650
184650->194651
194651->204652
194651->204653
184650->194654
194654->204655
204655->214656
194654->204657
204657->214658
174649->184659
184659->194660
194660->204661
204661->214662
204661->214663
214663->224664
54610->64665
64665->74666
74666->84667
74666->84668
24297->34669
34669->44670
34669->44671
44671->54672
44671->54673
44671->54674
54674->64675
34669->44676
44676->54677
54677->64678
64678->74679
74679->84680
84680->94681
84680->94682
74679->84683
84683->94684
84683->94685
94685->104686
104686->114687
114687->124688
54677->64689
64689->74690
74690->84691
74690->84692
84692->94693
84692->94694
94694->104695
104695->114696
114696->124697
124697->134698
134698->144699
144699->154700
154700->164701
134698->144702
114696->124703
54677->64704
64704->74705
74705->84706
64704->74707
74707->84708
84708->94709
94709->104710
104710->114711
104710->114712
114712->124713
114712->124714
124714->134715
84708->94716
94716->104717
104717->114718
114718->124719
114718->124720
104717->114721
114721->124722
114721->124723
124723->134724
124723->134725
84708->94726
94726->104727
104727->114728
104727->114729
114729->124730
114729->124731
124731->134732
134732->144733
134732->144734
124731->134735
134735->144736
144736->154737
154737->164738
154737->164739
134735->144740
84708->94741
94741->104742
104742->114743
104742->114744
114744->124745
114744->124746
124746->134747
134747->144748
134747->144749
124746->134750
134750->144751
144751->154752
154752->164753
154752->164754
134750->144755
84708->94756
94756->104757
104757->114758
104757->114759
114759->124760
114759->124761
124761->134762
124761->134763
134763->144764
134763->144765
84708->94766
94766->104767
104767->114768
114768->124769
114768->124770
104767->114771
114771->124772
114771->124773
124773->134774
124773->134775
134775->144776
134775->144777
84708->94778
94778->104779
104779->114780
114780->124781
114780->124782
104779->114783
114783->124784
124784->134785
134785->144786
144786->154787
134785->144788
124784->134789
134789->144790
144790->154791
134789->144792
94778->104793
104793->114794
114794->124795
124795->134796
134796->144797
144797->154798
134796->144799
114794->124800
84708->94801
94801->104802
104802->114803
104802->114804
84708->94805
94805->104806
104806->114807
54677->64808
64808->74809
74809->84810
24297->34811
34811->44812
34811->44813
44813->54814
44813->54815
44813->54816
54816->64817
34811->44818
44818->54819
54819->64820
64820->74821
74821->84822
84822->94823
94823->104824
74821->84825
84825->94826
84825->94827
94827->104828
104828->114829
54819->64830
64830->74831
74831->84832
84832->94833
84832->94834
74831->84835
84835->94836
84835->94837
94837->104838
104838->114839
114839->124840
54819->64841
64841->74842
74842->84843
64841->74844
74844->84845
84845->94846
94846->104847
104847->114848
104847->114849
114849->124850
114849->124851
124851->134852
84845->94853
94853->104854
104854->114855
114855->124856
114855->124857
104854->114858
114858->124859
114858->124860
124860->134861
134861->144862
144862->154863
144862->154864
134861->144865
124860->134866
134866->144867
84845->94868
94868->104869
104869->114870
114870->124871
114870->124872
104869->114873
114873->124874
124874->134875
94868->104876
104876->114877
114877->124878
124878->134879
124878->134880
134880->144881
134880->144882
54819->64883
64883->74884
74884->84885
74884->84886
84886->94887
84886->94888
94888->104889
94888->104890
104890->114891
114891->124892
54819->64893
64893->74894
74894->84895
74894->84896
84896->94897
94897->104898
104898->114899
104898->114900
64893->74901
64893->74902
74902->84903
64893->74904
74904->84905
84905->94906
94906->104907
104907->114908
104907->114909
114909->124910
114909->124911
124911->134912
84905->94913
94913->104914
104914->114915
104914->114916
114916->124917
114916->124918
124918->134919
134919->144920
124918->134921
134921->144922
84905->94923
94923->104924
104924->114925
114925->124926
124926->134927
134927->144928
124926->134929
114925->124930
124930->134931
124930->134932
104924->114933
114933->124934
114933->124935
94923->104936
104936->114937
114937->124938
124938->134939
134939->144940
144940->154941
144940->154942
134939->144943
144943->154944
144943->154945
154945->164946
154945->164947
114937->124948
124948->134949
134949->144950
144950->154951
144950->154952
134949->144953
144953->154954
154954->164955
164955->174956
174956->184957
174956->184958
164955->174959
174959->184960
174959->184961
154954->164962
164962->174963
174963->184964
164962->174965
124948->134966
134966->144967
144967->154968
154968->164969
164969->174970
174970->184971
164969->174972
144967->154973
154973->164974
164974->174975
174975->184976
164974->174977
54819->64978
64978->74979
74979->84980
74979->84981
84981->94982
94982->104983
-10->04984
04984->14985
14985->24986
24986->34987
34987->44988
44988->54989
54989->64990
04984->14991
14991->24992
24992->34993
34993->44994
44994->54995
54995->64996
64996->74997
04984->14998
14998->24999
24999->35000
35000->45001
04984->15002
15002->25003
25003->35004
35004->45005
04984->15006
15006->25007
25007->35008
35008->45009
04984->15010
15010->25011
25011->35012
35012->45013
04984->15014
15014->25015
25015->35016
04984->15017
15017->25018
25018->35019
35019->45020
45020->55021
04984->15022
15022->25023
15022->25024
25024->35025
15022->25026
25026->35027
35027->45028
35027->45029
35027->45030
45030->55031
25026->35032
35032->45033
35032->45034
35032->45035
45035->55036
25026->35037
35037->45038
35037->45039
45039->55040
25026->35041
35041->45042
45042->55043
45042->55044
35041->45045
25026->35046
35046->45047
35046->45048
45048->55049
45048->55050
35046->45051
25026->35052
35052->45053
35052->45054
45054->55055
45054->55056
35052->45057
25026->35058
35058->45059
35058->45060
35058->45061
25026->35062
35062->45063
35062->45064
45064->55065
35062->45066
25026->35067
35067->45068
35067->45069
45069->55070
45069->55071
55071->65072
65072->75073
75073->85074
85074->95075
85074->95076
55071->65077
35067->45078
45078->55079
55079->65080
65080->75081
65080->75082
25026->35083
35083->45084
35083->45085
45085->55086
55086->65087
65087->75088
75088->85089
85089->95090
45085->55091
55091->65092
65092->75093
65092->75094
35083->45095
45095->55096
55096->65097
65097->75098
75098->85099
75098->85100
85100->95101
85100->95102
55096->65103
65103->75104
75104->85105
75104->85106
85106->95107
85106->95108
55096->65109
65109->75110
75110->85111
85111->95112
95112->105113
105113->115114
115114->125115
75110->85116
85116->95117
85116->95118
95118->105119
105119->115120
115120->125121
125121->135122
55096->65123
65123->75124
75124->85125
75124->85126
85126->95127
85126->95128
65123->75129
75129->85130
75129->85131
85131->95132
65123->75133
75133->85134
65123->75135
75135->85136
85136->95137
95137->105138
105138->115139
105138->115140
105138->115141
115141->125142
115141->125143
125143->135144
125143->135145
135145->145146
135145->145147
85136->95148
95148->105149
105149->115150
105149->115151
115151->125152
115151->125153
115151->125154
85136->95155
95155->105156
105156->115157
55096->65158
65158->75159
25026->35160
35160->45161
35160->45162
45162->55163
45162->55164
55164->65165
65165->75166
75166->85167
75166->85168
65165->75169
75169->85170
85170->95171
95171->105172
75169->85173
35160->45174
45174->55175
55175->65176
65176->75177
75177->85178
75177->85179
85179->95180
85179->95181
55175->65182
65182->75183
75183->85184
75183->85185
85185->95186
85185->95187
55175->65188
65188->75189
75189->85190
75189->85191
85191->95192
85191->95193
65188->75194
75194->85195
75194->85196
85196->95197
65188->75198
75198->85199
65188->75200
75200->85201
85201->95202
95202->105203
105203->115204
105203->115205
105203->115206
115206->125207
115206->125208
125208->135209
125208->135210
135210->145211
135210->145212
85201->95213
95213->105214
105214->115215
115215->125216
115215->125217
105214->115218
115218->125219
115218->125220
125220->135221
125220->135222
85201->95223
95223->105224
105224->115225
105224->115226
95223->105227
105227->115228
115228->125229
115228->125230
115228->125231
115228->125232
125232->135233
135233->145234
145234->155235
145234->155236
155236->165237
165237->175238
165237->175239
175239->185240
175239->185241
155236->165242
155236->165243
165243->175244
165243->175245
85201->95246
95246->105247
105247->115248
25026->35249
35249->45250
35249->45251
45251->55252
45251->55253
55253->65254
65254->75255
75255->85256
85256->95257
85256->95258
75255->85259
65254->75260
75260->85261
85261->95262
95262->105263
75260->85264
35249->45265
45265->55266
55266->65267
65267->75268
75268->85269
75268->85270
85270->95271
85270->95272
55266->65273
65273->75274
75274->85275
75274->85276
85276->95277
85276->95278
55266->65279
65279->75280
65279->75281
65279->75282
65279->75283
75283->85284
85284->95285
95285->105286
105286->115287
105286->115288
105286->115289
115289->125290
115289->125291
125291->135292
125291->135293
85284->95294
95294->105295
105295->115296
115296->125297
115296->125298
105295->115299
115299->125300
115299->125301
125301->135302
125301->135303
85284->95304
95304->105305
105305->115306
105305->115307
95304->105308
105308->115309
115309->125310
115309->125311
115309->125312
115309->125313
125313->135314
135314->145315
145315->155316
145315->155317
155317->165318
165318->175319
165318->175320
175320->185321
175320->185322
155317->165323
155317->165324
165324->175325
165324->175326
85284->95327
95327->105328
105328->115329
25026->35330
35330->45331
35330->45332
45332->55333
45332->55334
55334->65335
65335->75336
75336->85337
85337->95338
85337->95339
75336->85340
65335->75341
75341->85342
85342->95343
95343->105344
75341->85345
35330->45346
45346->55347
55347->65348
65348->75349
75349->85350
75349->85351
85351->95352
85351->95353
55347->65354
65354->75355
75355->85356
75355->85357
85357->95358
85357->95359
55347->65360
65360->75361
65360->75362
65360->75363
65360->75364
75364->85365
85365->95366
95366->105367
105367->115368
105367->115369
105367->115370
115370->125371
115370->125372
125372->135373
125372->135374
85365->95375
95375->105376
105376->115377
115377->125378
115377->125379
105376->115380
115380->125381
115380->125382
125382->135383
125382->135384
85365->95385
95385->105386
105386->115387
105386->115388
95385->105389
105389->115390
115390->125391
115390->125392
115390->125393
115390->125394
125394->135395
135395->145396
145396->155397
145396->155398
155398->165399
165399->175400
165399->175401
175401->185402
175401->185403
155398->165404
155398->165405
165405->175406
165405->175407
155398->165408
85365->95409
95409->105410
105410->115411
25026->35412
35412->45413
35412->45414
45414->55415
45414->55416
55416->65417
65417->75418
65417->75419
45414->55420
55420->65421
35412->45422
45422->55423
55423->65424
65424->75425
75425->85426
75425->85427
55423->65428
65428->75429
75429->85430
75429->85431
85431->95432
85431->95433
65428->75434
75434->85435
75434->85436
65428->75437
75437->85438
65428->75439
75439->85440
85440->95441
95441->105442
105442->115443
105442->115444
115444->125445
115444->125446
85440->95447
95447->105448
105448->115449
105448->115450
115450->125451
115450->125452
85440->95453
95453->105454
105454->115455
105454->115456
115456->125457
115456->125458
85440->95459
95459->105460
105460->115461
105460->115462
115462->125463
125463->135464
115462->125465
125465->135466
125465->135467
135467->145468
135467->145469
85440->95470
95470->105471
105471->115472
105471->115473
95470->105474
105474->115475
115475->125476
125476->135477
125476->135478
95470->105479
105479->115480
115480->125481
125481->135482
135482->145483
135482->145484
145484->155485
115480->125486
125486->135487
125486->135488
125486->135489
125486->135490
135490->145491
145491->155492
155492->165493
155492->165494
55423->65495
65495->75496
75496->85497
75496->85498
85498->95499
55423->65500
65500->75501
65500->75502
65500->75503
65500->75504
75504->85505
85505->95506
95506->105507
95506->105508
25026->35509
35509->45510
35509->45511
45511->55512
45511->55513
55513->65514
65514->75515
65514->75516
45511->55517
55517->65518
35509->45519
45519->55520
55520->65521
65521->75522
75522->85523
75522->85524
55520->65525
65525->75526
75526->85527
75526->85528
55520->65529
65529->75530
75530->85531
75530->85532
55520->65533
65533->75534
75534->85535
75534->85536
55520->65537
65537->75538
75538->85539
75538->85540
25026->35541
35541->45542
35541->45543
45543->55544
45543->55545
55545->65546
65546->75547
75547->85548
75547->85549
65546->75550
75550->85551
85551->95552
85551->95553
75550->85554
45543->55555
55555->65556
65556->75557
65556->75558
35541->45559
45559->55560
55560->65561
65561->75562
75562->85563
75562->85564
75562->85565
85565->95566
95566->105567
95566->105568
85565->95569
95569->105570
55560->65571
65571->75572
75572->85573
75572->85574
75572->85575
85575->95576
95576->105577
95576->105578
85575->95579
95579->105580
55560->65581
65581->75582
75582->85583
75582->85584
75582->85585
85585->95586
95586->105587
95586->105588
85585->95589
95589->105590
55560->65591
65591->75592
75592->85593
75592->85594
75592->85595
85595->95596
95596->105597
95596->105598
85595->95599
95599->105600
55560->65601
65601->75602
75602->85603
75602->85604
75602->85605
85605->95606
95606->105607
95606->105608
85605->95609
95609->105610
55560->65611
65611->75612
75612->85613
75612->85614
75612->85615
25026->35616
35616->45617
35616->45618
45618->55619
45618->55620
55620->65621
65621->75622
75622->85623
75622->85624
65621->75625
75625->85626
85626->95627
85626->95628
75625->85629
35616->45630
45630->55631
55631->65632
65632->75633
75633->85634
75633->85635
65632->75636
75636->85637
55631->65638
65638->75639
75639->85640
75639->85641
75639->85642
85642->95643
55631->65644
65644->75645
75645->85646
75645->85647
75645->85648
85648->95649
85648->95650
95650->105651
105651->115652
105651->115653
55631->65654
65654->75655
75655->85656
75655->85657
75655->85658
85658->95659
85658->95660
95660->105661
105661->115662
105661->115663
55631->65664
65664->75665
75665->85666
75665->85667
75665->85668
85668->95669
85668->95670
95670->105671
105671->115672
105671->115673
55631->65674
65674->75675
75675->85676
75675->85677
75675->85678
85678->95679
85678->95680
95680->105681
105681->115682
105681->115683
85678->95684
55631->65685
65685->75686
75686->85687
75686->85688
55631->65689
65689->75690
75690->85691
75690->85692
85692->95693
85692->95694
65689->75695
75695->85696
75695->85697
65689->75698
75698->85699
65689->75700
75700->85701
85701->95702
95702->105703
105703->115704
115704->125705
115704->125706
105703->115707
105703->115708
115708->125709
85701->95710
95710->105711
105711->115712
115712->125713
115712->125714
105711->115715
105711->115716
115716->125717
85701->95718
95718->105719
105719->115720
115720->125721
115720->125722
105719->115723
105719->115724
115724->125725
85701->95726
95726->105727
105727->115728
105727->115729
105727->115730
115730->125731
85701->95732
95732->105733
105733->115734
105733->115735
95732->105736
85701->95737
95737->105738
105738->115739
115739->125740
115739->125741
105738->115742
105738->115743
115743->125744
115743->125745
125745->135746
85701->95747
95747->105748
105748->115749
105748->115750
115750->125751
115750->125752
95747->105753
105753->115754
105753->115755
115755->125756
125756->135757
125756->135758
115755->125759
95747->105760
105760->115761
95747->105762
105762->115763
115763->125764
125764->135765
135765->145766
135765->145767
135765->145768
135765->145769
125764->135770
125764->135771
135771->145772
55631->65773
65773->75774
75774->85775
75774->85776
75774->85777
85777->95778
55631->65779
65779->75780
75780->85781
75780->85782
75780->85783
85783->95784
85783->95785
95785->105786
55631->65787
65787->75788
75788->85789
75788->85790
85790->95791
85790->95792
65787->75793
75793->85794
75793->85795
85795->95796
65787->75797
75797->85798
65787->75799
75799->85800
85800->95801
95801->105802
105802->115803
105802->115804
95801->105805
95801->105806
105806->115807
55631->65808
65808->75809
75809->85810
75809->85811
75809->85812
55631->65813
65813->75814
25026->35815
35815->45816
35815->45817
45817->55818
45817->55819
55819->65820
65820->75821
65820->75822
35815->45823
45823->55824
55824->65825
65825->75826
75826->85827
75826->85828
85828->95829
85828->95830
95830->105831
95830->105832
55824->65833
65833->75834
75834->85835
75834->85836
65833->75837
75837->85838
85838->95839
95839->105840
95839->105841
55824->65842
65842->75843
25026->35844
35844->45845
35844->45846
45846->55847
45846->55848
55848->65849
65849->75850
75850->85851
75850->85852
65849->75853
75853->85854
75853->85855
35844->45856
45856->55857
55857->65858
65858->75859
75859->85860
75859->85861
85861->95862
85861->95863
95863->105864
95863->105865
55857->65866
65866->75867
75867->85868
75867->85869
65866->75870
75870->85871
85871->95872
95872->105873
105873->115874
115874->125875
115874->125876
105873->115877
105873->115878
85871->95879
95879->105880
55857->65881
65881->75882
25026->35883
35883->45884
35883->45885
45885->55886
45885->55887
55887->65888
65888->75889
65888->75890
35883->45891
45891->55892
55892->65893
65893->75894
65893->75895
25026->35896
35896->45897
35896->45898
45898->55899
35896->45900
45900->55901
55901->65902
65902->75903
65902->75904
75904->85905
85905->95906
95906->105907
105907->115908
105907->115909
95906->105910
105910->115911
105910->115912
85905->95913
95913->105914
95913->105915
55901->65916
25026->35917
35917->45918
35917->45919
45919->55920
35917->45921
45921->55922
55922->65923
65923->75924
65923->75925
75925->85926
85926->95927
95927->105928
105928->115929
105928->115930
95927->105931
105931->115932
105931->115933
95927->105934
105934->115935
105934->115936
85926->95937
95937->105938
95937->105939
55922->65940
25026->35941
35941->45942
35941->45943
45943->55944
35941->45945
45945->55946
55946->65947
55946->65948
55946->65949
55946->65950
45945->55951
55951->65952
55951->65953
55951->65954
55951->65955
45945->55956
55956->65957
55956->65958
55956->65959
55956->65960
45945->55961
55961->65962
55961->65963
65963->75964
65963->75965
75965->85966
85966->95967
95967->105968
95967->105969
85966->95970
95970->105971
95970->105972
75965->85973
85973->95974
85973->95975
55961->65976
65976->75977
75977->85978
85978->95979
95979->105980
105980->115981
95979->105982
95979->105983
75977->85984
85984->95985
95985->105986
105986->115987
95985->105988
95985->105989
75977->85990
85990->95991
95991->105992
105992->115993
95991->105994
95991->105995
45945->55996
55996->65997
65997->75998
55996->65999
55996->66000
66000->76001
66000->76002
55996->66003
66003->76004
76004->86005
86005->96006
86005->96007
96007->106008
96007->106009
96007->106010
96007->106011
25026->36012
36012->46013
36012->46014
46014->56015
46014->56016
56016->66017
66017->76018
76018->86019
76018->86020
66017->76021
76021->86022
76021->86023
36012->46024
46024->56025
56025->66026
66026->76027
76027->86028
76027->86029
86029->96030
86029->96031
96031->106032
96031->106033
106033->116034
106033->116035
56025->66036
66036->76037
76037->86038
76037->86039
86039->96040
66036->76041
76041->86042
86042->96043
96043->106044
106044->116045
106044->116046
106044->116047
116047->126048
116047->126049
86042->96050
96050->106051
106051->116052
106051->116053
106051->116054
116054->126055
116054->126056
126056->136057
126056->136058
56025->66059
66059->76060
25026->36061
36061->46062
36061->46063
46063->56064
46063->56065
56065->66066
66066->76067
76067->86068
86068->96069
86068->96070
76067->86071
86071->96072
86071->96073
66066->76074
76074->86075
86075->96076
96076->106077
106077->116078
116078->126079
76074->86080
36061->46081
46081->56082
56082->66083
66083->76084
76084->86085
86085->96086
86085->96087
76084->86088
86088->96089
86088->96090
96090->106091
96090->106092
56082->66093
66093->76094
76094->86095
76094->86096
66093->76097
76097->86098
86098->96099
86098->96100
86098->96101
86098->96102
96102->106103
106103->116104
116104->126105
116104->126106
126106->136107
136107->146108
126106->136109
136109->146110
146110->156111
146110->156112
156112->166113
156112->166114
136109->146115
136109->146116
146116->156117
146116->156118
25026->36119
36119->46120
36119->46121
46121->56122
46121->56123
56123->66124
66124->76125
76125->86126
76125->86127
66124->76128
76128->86129
76128->86130
36119->46131
46131->56132
56132->66133
66133->76134
76134->86135
76134->86136
86136->96137
86136->96138
56132->66139
66139->76140
76140->86141
76140->86142
56132->66143
66143->76144
76144->86145
76144->86146
76144->86147
86147->96148
96148->106149
96148->106150
86147->96151
56132->66152
66152->76153
76153->86154
76153->86155
86155->96156
86155->96157
66152->76158
76158->86159
86159->96160
86159->96161
86159->96162
96162->106163
96162->106164
66152->76165
76165->86166
86166->96167
56132->66168
66168->76169
76169->86170
76169->86171
76169->86172
56132->66173
66173->76174
25026->36175
36175->46176
36175->46177
46177->56178
46177->56179
56179->66180
66180->76181
76181->86182
76181->86183
66180->76184
76184->86185
76184->86186
36175->46187
46187->56188
56188->66189
66189->76190
76190->86191
76190->86192
86192->96193
86192->96194
96194->106195
96194->106196
56188->66197
66197->76198
76198->86199
76198->86200
56188->66201
66201->76202
76202->86203
76202->86204
76202->86205
86205->96206
96206->106207
96206->106208
86205->96209
56188->66210
66210->76211
76211->86212
76211->86213
86213->96214
86213->96215
66210->76216
76216->86217
86217->96218
96218->106219
106219->116220
106219->116221
96218->106222
106222->116223
86217->96224
96224->106225
106225->116226
56188->66227
66227->76228
25026->36229
36229->46230
36229->46231
46231->56232
46231->56233
56233->66234
66234->76235
76235->86236
86236->96237
96237->106238
96237->106239
66234->76240
36229->46241
46241->56242
56242->66243
66243->76244
66243->76245
25026->36246
36246->46247
36246->46248
46248->56249
46248->56250
56250->66251
66251->76252
76252->86253
76252->86254
66251->76255
76255->86256
86256->96257
96257->106258
106258->116259
106258->116260
116260->126261
126261->136262
136262->146263
136262->146264
76255->86265
36246->46266
46266->56267
56267->66268
66268->76269
76269->86270
66268->76271
76271->86272
86272->96273
96273->106274
106274->116275
106274->116276
116276->126277
116276->126278
126278->136279
136279->146280
146280->156281
156281->166282
166282->176283
156281->166284
86272->96285
96285->106286
106286->116287
106286->116288
116288->126289
86272->96290
96290->106291
106291->116292
106291->116293
116293->126294
126294->136295
136295->146296
136295->146297
116293->126298
126298->136299
126298->136300
56267->66301
66301->76302
76302->86303
76302->86304
86304->96305
96305->106306
106306->116307
106306->116308
66301->76309
66301->76310
76310->86311
86311->96312
76310->86313
66301->76314
76314->86315
86315->96316
96316->106317
96316->106318
106318->116319
116319->126320
126320->136321
126320->136322
106318->116323
116323->126324
126324->136325
136325->146326
126324->136327
116323->126328
126328->136329
56267->66330
66330->76331
76331->86332
25026->36333
36333->46334
36333->46335
46335->56336
46335->56337
56337->66338
66338->76339
66338->76340
36333->46341
46341->56342
56342->66343
66343->76344
66343->76345
76345->86346
76345->86347
76345->86348
76345->86349
25026->36350
36350->46351
36350->46352
46352->56353
46352->56354
56354->66355
66355->76356
76356->86357
86357->96358
86357->96359
76356->86360
86360->96361
86360->96362
76356->86363
86363->96364
86363->96365
66355->76366
76366->86367
76366->86368
36350->46369
46369->56370
56370->66371
66371->76372
76372->86373
76372->86374
66371->76375
76375->86376
86376->96377
86376->96378
86376->96379
96379->106380
56370->66381
66381->76382
76382->86383
76382->86384
66381->76385
76385->86386
86386->96387
86386->96388
86386->96389
56370->66390
66390->76391
76391->86392
76391->86393
86393->96394
86393->96395
96395->106396
56370->66397
66397->76398
76398->86399
86399->96400
86399->96401
76398->86402
86402->96403
86402->96404
96404->106405
56370->66406
66406->76407
76407->86408
76407->86409
86409->96410
86409->96411
96411->106412
96411->106413
56370->66414
66414->76415
76415->86416
76415->86417
56370->66418
66418->76419
76419->86420
76419->86421
86421->96422
86421->96423
66418->76424
76424->86425
76424->86426
66418->76427
76427->86428
66418->76429
76429->86430
86430->96431
96431->106432
106432->116433
106432->116434
106432->116435
116435->126436
126436->136437
126436->136438
136438->146439
136438->146440
146440->156441
156441->166442
156441->166443
116435->126444
86430->96445
96445->106446
106446->116447
106446->116448
116448->126449
116448->126450
96445->106451
106451->116452
116452->126453
116452->126454
116452->126455
126455->136456
126455->136457
96445->106458
106458->116459
56370->66460
66460->76461
76461->86462
76461->86463
76461->86464
56370->66465
66465->76466
76466->86467
76466->86468
86468->96469
86468->96470
96470->106471
96470->106472
56370->66473
66473->76474
76474->86475
86475->96476
86475->96477
96477->106478
96477->106479
76474->86480
86480->96481
86480->96482
66473->76483
76483->86484
86484->96485
96485->106486
96485->106487
96485->106488
106488->116489
116489->126490
106488->116491
56370->66492
66492->76493
25026->36494
36494->46495
36494->46496
46496->56497
46496->56498
56498->66499
66499->76500
76500->86501
86501->96502
96502->106503
96502->106504
86501->96505
76500->86506
86506->96507
86506->96508
76500->86509
86509->96510
86509->96511
66499->76512
76512->86513
76512->86514
36494->46515
46515->56516
56516->66517
66517->76518
76518->86519
76518->86520
86520->96521
86520->96522
96522->106523
56516->66524
66524->76525
76525->86526
76525->86527
86527->96528
86527->96529
96529->106530
96529->106531
56516->66532
66532->76533
76533->86534
76533->86535
56516->66536
66536->76537
76537->86538
76537->86539
86539->96540
86539->96541
66536->76542
76542->86543
76542->86544
66536->76545
76545->86546
66536->76547
76547->86548
86548->96549
96549->106550
106550->116551
106550->116552
106550->116553
116553->126554
126554->136555
126554->136556
136556->146557
136556->146558
146558->156559
156559->166560
156559->166561
116553->126562
86548->96563
96563->106564
106564->116565
106564->116566
116566->126567
116566->126568
96563->106569
106569->116570
116570->126571
116570->126572
116570->126573
126573->136574
126573->136575
96563->106576
106576->116577
56516->66578
66578->76579
76579->86580
76579->86581
76579->86582
56516->66583
66583->76584
76584->86585
76584->86586
86586->96587
86586->96588
96588->106589
96588->106590
56516->66591
66591->76592
76592->86593
86593->96594
86593->96595
96595->106596
96595->106597
76592->86598
86598->96599
86598->96600
66591->76601
76601->86602
86602->96603
96603->106604
96603->106605
96603->106606
106606->116607
116607->126608
106606->116609
56516->66610
66610->76611
25026->36612
36612->46613
36612->46614
36612->46615
46615->56616
56616->66617
66617->76618
76618->86619
86619->96620
86619->96621
56616->66622
66622->76623
66622->76624
76624->86625
86625->96626
96626->106627
96626->106628
46615->56629
56629->66630
56629->66631
66631->76632
66631->76633
76633->86634
86634->96635
96635->106636
96635->106637
86634->96638
96638->106639
96638->106640
56629->66641
66641->76642
76642->86643
86643->96644
96644->106645
96644->106646
106646->116647
106646->116648
116648->126649
116648->126650
76642->86651
86651->96652
96652->106653
96652->106654
86651->96655
96655->106656
106656->116657
116657->126658
116657->126659
116657->126660
76642->86661
86661->96662
96662->106663
96662->106664
96662->106665
106665->116666
106665->116667
116667->126668
116667->126669
126669->136670
126669->136671
76642->86672
86672->96673
96673->106674
96673->106675
106675->116676
106675->116677
46615->56678
56678->66679
66679->76680
56678->66681
56678->66682
66682->76683
66682->76684
56678->66685
66685->76686
76686->86687
86687->96688
96688->106689
96688->106690
106690->116691
106690->116692
76686->86693
86693->96694
96694->106695
96694->106696
106696->116697
116697->126698
126698->136699
126698->136700
86693->96701
86693->96702
96702->106703
86693->96704
96704->106705
106705->116706
116706->126707
126707->136708
126707->136709
136709->146710
136709->146711
146711->156712
106705->116713
116713->126714
126714->136715
126714->136716
136716->146717
136716->146718
146718->156719
106705->116720
116720->126721
126721->136722
126721->136723
126721->136724
136724->146725
146725->156726
156726->166727
166727->176728
166727->176729
176729->186730
176729->186731
156726->166732
146725->156733
136724->146734
76686->86735
86735->96736
46615->56737
56737->66738
56737->66739
66739->76740
66739->76741
56737->66742
66742->76743
76743->86744
86744->96745
96745->106746
86744->96747
25026->36748
36748->46749
36748->46750
46750->56751
46750->56752
36748->46753
46753->56754
56754->66755
66755->76756
76756->86757
76756->86758
66755->76759
66755->76760
76760->86761
25026->36762
36762->46763
36762->46764
46764->56765
56765->66766
56765->66767
56765->66768
66768->76769
66768->76770
46764->56771
56771->66772
56771->66773
56771->66774
66774->76775
46764->56776
56776->66777
56776->66778
56776->66779
46764->56780
56780->66781
56780->66782
56780->66783
46764->56784
56784->66785
56784->66786
56784->66787
46764->56788
56788->66789
56788->66790
56788->66791
46764->56792
56792->66793
66793->76794
66793->76795
56792->66796
56792->66797
66797->76798
66797->76799
76799->86800
86800->96801
96801->106802
106802->116803
116803->126804
116803->126805
86800->96806
56792->66807
66807->76808
76808->86809
86809->96810
96810->106811
96810->106812
96810->106813
106813->116814
116814->126815
116814->126816
106813->116817
116817->126818
126818->136819
116817->126820
76808->86821
86821->96822
96822->106823
96822->106824
96822->106825
106825->116826
106825->116827
116827->126828
126828->136829
76808->86830
86830->96831
96831->106832
106832->116833
116833->126834
96831->106835
106835->116836
106835->116837
116837->126838
76808->86839
86839->96840
96840->106841
96840->106842
76808->86843
86843->96844
96844->106845
96844->106846
76808->86847
86847->96848
96848->106849
96848->106850
96848->106851
76808->86852
86852->96853
96853->106854
76808->86855
86855->96856
96856->106857
96856->106858
96856->106859
76808->86860
86860->96861
96861->106862
46764->56863
56863->66864
56863->66865
66865->76866
66865->76867
76867->86868
86868->96869
96869->106870
96869->106871
86868->96872
96872->106873
96872->106874
56863->66875
66875->76876
76876->86877
86877->96878
96878->106879
96878->106880
106880->116881
106880->116882
116882->126883
116882->126884
76876->86885
86885->96886
86885->96887
86885->96888
96888->106889
86885->96890
96890->106891
106891->116892
116892->126893
116892->126894
116892->126895
126895->136896
126895->136897
76876->86898
86898->96899
96899->106900
96899->106901
76876->86902
86902->96903
96903->106904
106904->116905
106904->116906
96903->106907
96903->106908
106908->116909
46764->56910
56910->66911
56910->66912
66912->76913
66912->76914
76914->86915
86915->96916
96916->106917
106917->116918
86915->96919
56910->66920
66920->76921
76921->86922
86922->96923
96923->106924
96923->106925
106925->116926
106925->116927
76921->86928
86928->96929
86928->96930
86928->96931
86928->96932
96932->106933
106933->116934
116934->126935
116934->126936
126936->136937
126936->136938
136938->146939
136938->146940
46764->56941
56941->66942
56941->66943
66943->76944
66943->76945
56941->66946
66946->76947
76947->86948
86948->96949
96949->106950
96949->106951
96949->106952
106952->116953
106952->116954
116954->126955
126955->136956
126955->136957
76947->86958
86958->96959
96959->106960
106960->116961
106960->116962
96959->106963
96959->106964
106964->116965
106964->116966
76947->86967
86967->96968
96968->106969
96968->106970
96968->106971
106971->116972
106971->116973
116973->126974
126974->136975
126974->136976
106971->116977
76947->86978
86978->96979
96979->106980
106980->116981
116981->126982
96979->106983
106983->116984
106983->116985
116985->126986
126986->136987
76947->86988
86988->96989
86988->96990
86988->96991
96991->106992
96991->106993
96991->106994
86988->96995
96995->106996
106996->116997
116997->126998
126998->136999
126998->137000
137000->147001
147001->157002
147001->157003
137000->147004
106996->117005
117005->127006
127006->137007
127006->137008
106996->117009
117009->127010
127010->137011
127010->137012
76947->87013
87013->97014
97014->107015
107015->117016
87013->97017
97017->107018
107018->117019
117019->127020
127020->137021
127020->137022
137022->147023
137022->147024
147024->157025
107018->117026
117026->127027
117026->127028
117026->127029
127029->137030
117026->127031
127031->137032
137032->147033
147033->157034
157034->167035
157034->167036
167036->177037
167036->177038
177038->187039
177038->187040
137032->147041
147041->157042
157042->167043
157042->167044
137032->147045
147045->157046
157046->167047
157046->167048
167048->177049
167048->177050
177050->187051
137032->147052
147052->157053
157053->167054
167054->177055
167054->177056
157053->167057
147052->157058
157058->167059
167059->177060
177060->187061
177060->187062
177060->187063
187063->197064
137032->147065
147065->157066
157066->167067
157066->167068
167068->177069
167068->177070
177070->187071
177070->187072
137032->147073
147073->157074
157074->167075
157074->167076
167076->177077
167076->177078
137032->147079
147079->157080
157080->167081
157080->167082
167082->177083
137032->147084
147084->157085
157085->167086
157085->167087
46764->57088
57088->67089
57088->67090
67090->77091
67090->77092
77092->87093
87093->97094
87093->97095
57088->67096
67096->77097
77097->87098
87098->97099
97099->107100
107100->117101
117101->127102
97099->107103
107103->117104
107103->117105
117105->127106
77097->87107
87107->97108
97108->107109
107109->117110
107109->117111
97108->107112
107112->117113
117113->127114
107112->117115
87107->97116
77097->87117
87117->97118
97118->107119
97118->107120
107120->117121
117121->127122
107120->117123
117123->127124
117123->127125
127125->137126
137126->147127
77097->87128
87128->97129
97129->107130
107130->117131
117131->127132
97129->107133
107133->117134
107133->117135
117135->127136
77097->87137
87137->97138
97138->107139
97138->107140
107140->117141
107140->117142
87137->97143
97143->107144
97143->107145
107145->117146
87137->97147
97147->107148
87137->97149
97149->107150
107150->117151
117151->127152
127152->137153
127152->137154
117151->127155
117151->127156
127156->137157
77097->87158
87158->97159
97159->107160
107160->117161
117161->127162
127162->137163
107160->117164
117164->127165
97159->107166
97159->107167
46764->57168
57168->67169
57168->67170
67170->77171
67170->77172
77172->87173
87173->97174
97174->107175
107175->117176
87173->97177
57168->67178
67178->77179
77179->87180
87180->97181
97181->107182
97181->107183
97181->107184
77179->87185
87185->97186
97186->107187
97186->107188
97186->107189
107189->117190
77179->87191
87191->97192
97192->107193
97192->107194
107194->117195
107194->117196
77179->87197
87197->97198
97198->107199
107199->117200
107199->117201
97198->107202
97198->107203
77179->87204
87204->97205
97205->107206
97205->107207
97205->107208
77179->87209
87209->97210
97210->107211
97210->107212
107212->117213
107212->117214
117214->127215
117214->127216
77179->87217
87217->97218
97218->107219
107219->117220
117220->127221
127221->137222
127221->137223
137223->147224
147224->157225
157225->167226
157225->167227
97218->107228
107228->117229
107228->117230
117230->127231
127231->137232
137232->147233
137232->147234
147234->157235
157235->167236
167236->177237
167236->177238
117230->127239
127239->137240
137240->147241
127239->137242
127239->137243
77179->87244
87244->97245
97245->107246
97245->107247
107247->117248
107247->117249
77179->87250
87250->97251
97251->107252
97251->107253
46764->57254
57254->67255
57254->67256
67256->77257
67256->77258
77258->87259
87259->97260
87259->97261
57254->67262
67262->77263
77263->87264
87264->97265
97265->107266
107266->117267
107266->117268
97265->107269
107269->117270
107269->117271
117271->127272
117271->127273
127273->137274
77263->87275
87275->97276
97276->107277
107277->117278
107277->117279
97276->107280
107280->117281
107280->117282
117282->127283
117282->127284
127284->137285
77263->87286
87286->97287
97287->107288
97287->107289
107289->117290
117290->127291
107289->117292
117292->127293
117292->127294
127294->137295
77263->87296
87296->97297
97297->107298
97297->107299
87296->97300
97300->107301
107301->117302
117302->127303
127303->137304
127303->137305
137305->147306
137305->147307
137305->147308
137305->147309
137305->147310
107301->117311
117311->127312
127312->137313
127312->137314
137314->147315
137314->147316
137314->147317
137314->147318
137314->147319
107301->117320
117320->127321
127321->137322
127321->137323
137323->147324
137323->147325
137323->147326
137323->147327
137323->147328
77263->87329
87329->97330
97330->107331
97330->107332
97330->107333
77263->87334
87334->97335
97335->107336
97335->107337
97335->107338
77263->87339
87339->97340
97340->107341
97340->107342
97340->107343
77263->87344
87344->97345
97345->107346
97345->107347
97345->107348
46764->57349
57349->67350
57349->67351
67351->77352
67351->77353
77353->87354
87354->97355
97355->107356
107356->117357
117357->127358
117357->127359
127359->137360
137360->147361
147361->157362
147361->157363
87354->97364
57349->67365
67365->77366
77366->87367
87367->97368
97368->107369
97368->107370
107370->117371
107370->117372
77366->87373
87373->97374
97374->107375
97374->107376
107376->117377
107376->117378
117378->127379
127379->137380
127379->137381
137381->147382
147382->157383
157383->167384
167384->177385
167384->177386
157383->167387
147382->157388
137381->147389
117378->127390
77366->87391
87391->97392
97392->107393
97392->107394
107394->117395
107394->117396
77366->87397
87397->97398
97398->107399
97398->107400
107400->117401
107400->117402
77366->87403
87403->97404
97404->107405
97404->107406
87403->97407
97407->107408
107408->117409
107408->117410
117410->127411
117410->127412
77366->87413
87413->97414
97414->107415
97414->107416
107416->117417
117417->127418
127418->137419
137419->147420
117417->127421
127421->137422
137422->147423
137422->147424
127421->137425
137425->147426
147426->157427
147426->157428
157428->167429
157428->167430
117417->127431
127431->137432
137432->147433
147433->157434
147433->157435
137432->147436
127431->137437
137437->147438
147438->157439
157439->167440
167440->177441
147438->157442
127431->137443
137443->147444
147444->157445
147444->157446
137443->147447
147447->157448
157448->167449
167449->177450
177450->187451
177450->187452
177450->187453
157448->167454
167454->177455
177455->187456
177455->187457
177455->187458
117417->127459
127459->137460
137460->147461
137460->147462
137460->147463
147463->157464
147463->157465
157465->167466
167466->177467
167466->177468
157465->167469
117417->127470
127470->137471
137471->147472
137471->147473
147473->157474
157474->167475
157474->167476
167476->177477
177477->187478
177477->187479
187479->197480
197480->207481
187479->197482
167476->177483
127470->137484
137484->147485
147485->157486
157486->167487
167487->177488
167487->177489
177489->187490
177489->187491
187491->197492
197492->207493
207493->217494
207493->217495
217495->227496
227496->237497
227496->237498
217495->227499
227499->237500
237500->247501
237500->247502
187491->197503
187491->197504
197504->207505
207505->217506
207505->217507
197504->207508
207508->217509
217509->227510
217509->227511
147485->157512
157512->167513
167513->177514
167513->177515
177515->187516
177515->187517
187517->197518
197518->207519
197518->207520
117417->127521
127521->137522
137522->147523
137522->147524
127521->137525
117417->127526
127526->137527
137527->147528
137527->147529
147529->157530
147529->157531
127526->137532
137532->147533
137532->147534
147534->157535
127526->137536
137536->147537
127526->137538
137538->147539
147539->157540
157540->167541
157540->167542
167542->177543
167542->177544
177544->187545
187545->197546
187545->197547
177544->187548
147539->157549
137538->147550
117417->127551
77366->87552
87552->97553
97553->107554
107554->117555
117555->127556
117555->127557
107554->117558
117558->127559
127559->137560
137560->147561
137560->147562
127559->137563
97553->107564
87552->97565
97565->107566
107566->117567
107566->117568
107566->117569
77366->87570
87570->97571
97571->107572
107572->117573
107572->117574
97571->107575
97571->107576
77366->87577
87577->97578
97578->107579
97578->107580
97578->107581
107581->117582
117582->127583
127583->137584
127583->137585
137585->147586
147586->157587
147586->157588
157588->167589
167589->177590
167589->177591
177591->187592
187592->197593
177591->187594
157588->167595
137585->147596
107581->117597
107581->117598
117598->127599
127599->137600
127599->137601
137601->147602
147602->157603
147602->157604
157604->167605
167605->177606
157604->167607
137601->147608
117598->127609
77366->87610
87610->97611
97611->107612
97611->107613
107613->117614
117614->127615
127615->137616
127615->137617
87610->97618
87610->97619
87610->97620
97620->107621
107621->117622
117622->127623
127623->137624
127623->137625
137625->147626
137625->147627
147627->157628
117622->127629
117622->127630
77366->87631
87631->97632
97632->107633
97632->107634
107634->117635
117635->127636
127636->137637
127636->137638
87631->97639
87631->97640
87631->97641
97641->107642
107642->117643
117643->127644
127644->137645
137645->147646
147646->157647
157647->167648
157647->167649
167649->177650
177650->187651
187651->197652
187651->197653
127644->137654
137654->147655
137654->147656
147656->157657
157657->167658
167658->177659
167658->177660
177660->187661
187661->197662
197662->207663
197662->207664
147656->157665
157665->167666
167666->177667
177667->187668
167666->177669
167666->177670
167666->177671
157665->167672
107642->117673
117673->127674
127674->137675
137675->147676
137675->147677
147677->157678
157678->167679
147677->157680
127674->137681
117673->127682
127682->137683
137683->147684
147684->157685
157685->167686
167686->177687
167686->177688
177688->187689
177688->187690
187690->197691
157685->167692
157685->167693
167693->177694
177694->187695
187695->197696
197696->207697
207697->217698
197696->207699
177694->187700
137683->147701
147701->157702
157702->167703
117673->127704
127704->137705
137705->147706
147706->157707
157707->167708
157707->167709
167709->177710
167709->177711
177711->187712
177711->187713
137705->147714
147714->157715
157715->167716
167716->177717
167716->177718
177718->187719
177718->187720
187720->197721
157715->167722
157715->167723
107642->117724
117724->127725
127725->137726
137726->147727
127725->137728
137728->147729
137728->147730
147730->157731
77366->87732
87732->97733
46764->57734
57734->67735
57734->67736
67736->77737
67736->77738
57734->67739
67739->77740
77740->87741
87741->97742
97742->107743
97742->107744
107744->117745
117745->127746
107744->117747
117747->127748
117747->127749
127749->137750
137750->147751
137750->147752
77740->87753
87753->97754
97754->107755
97754->107756
107756->117757
107756->117758
107756->117759
107756->117760
107756->117761
77740->87762
87762->97763
97763->107764
97763->107765
97763->107766
77740->87767
87767->97768
97768->107769
97768->107770
107770->117771
117771->127772
107770->117773
117773->127774
117773->127775
127775->137776
137776->147777
137776->147778
77740->87779
87779->97780
97780->107781
97780->107782
107782->117783
107782->117784
107782->117785
107782->117786
107782->117787
77740->87788
87788->97789
97789->107790
97789->107791
97789->107792
-10->07793
07793->17794
17794->27795
27795->37796
37796->47797
47797->57798
57798->67799
07793->17800
17800->27801
27801->37802
37802->47803
47803->57804
57804->67805
67805->77806
07793->17807
17807->27808
27808->37809
37809->47810
47810->57811
57811->67812
67812->77813
07793->17814
17814->27815
27815->37816
37816->47817
47817->57818
57818->67819
67819->77820
07793->17821
17821->27822
27822->37823
37823->47824
47824->57825
57825->67826
07793->17827
17827->27828
27828->37829
37829->47830
47830->57831
57831->67832
07793->17833
17833->27834
27834->37835
37835->47836
47836->57837
57837->67838
67838->77839
77839->87840
07793->17841
17841->27842
27842->37843
37843->47844
47844->57845
57845->67846
07793->17847
17847->27848
27848->37849
37849->47850
47850->57851
57851->67852
67852->77853
07793->17854
17854->27855
27855->37856
37856->47857
47857->57858
57858->67859
07793->17860
17860->27861
27861->37862
37862->47863
47863->57864
57864->67865
07793->17866
17866->27867
27867->37868
37868->47869
07793->17870
17870->27871
27871->37872
07793->17873
17873->27874
17873->27875
27875->37876
17873->27877
27877->37878
37878->47879
47879->57880
57880->67881
67881->77882
67881->77883
37878->47884
27877->37885
37885->47886
47886->57887
37885->47888
37885->47889
47889->57890
57890->67891
67891->77892
47889->57893
57893->67894
67894->77895
77895->87896
77895->87897
67894->77898
37885->47899
47899->57900
57900->67901
67901->77902
77902->87903
77902->87904
67901->77905
77905->87906
87906->97907
97907->107908
107908->117909
107908->117910
87906->97911
97911->107912
107912->117913
57900->67914
67914->77915
77915->87916
77915->87917
87917->97918
87917->97919
77915->87920
87920->97921
87920->97922
97922->107923
97922->107924
107924->117925
117925->127926
57900->67927
67927->77928
77928->87929
77928->87930
87930->97931
87930->97932
57900->67933
67933->77934
77934->87935
77934->87936
87936->97937
87936->97938
77934->87939
87939->97940
87939->97941
97941->107942
107942->117943
97941->107944
107944->117945
107944->117946
117946->127947
127947->137948
97941->107949
57900->67950
67950->77951
77951->87952
77951->87953
87953->97954
87953->97955
97955->107956
107956->117957
117957->127958
117957->127959
97955->107960
107960->117961
117961->127962
127962->137963
117961->127964
117961->127965
127965->137966
127965->137967
137967->147968
147968->157969
157969->167970
167970->177971
167970->177972
157969->167973
167973->177974
167973->177975
147968->157976
157976->167977
167977->177978
167977->177979
157976->167980
117961->127981
127981->137982
137982->147983
147983->157984
157984->167985
157984->167986
167986->177987
167986->177988
177988->187989
177988->187990
137982->147991
147991->157992
157992->167993
157992->167994
167994->177995
167994->177996
147991->157997
157997->167998
167998->177999
177999->188000
188000->198001
198001->208002
198001->208003
188000->198004
188000->198005
167998->178006
178006->188007
188007->198008
178006->188009
188009->198010
198010->208011
208011->218012
218012->228013
218012->228014
208011->218015
208011->218016
218016->228017
228017->238018
218016->228019
57900->68020
68020->78021
78021->88022
88022->98023
98023->108024
78021->88025
88025->98026
88025->98027
98027->108028
108028->118029
57900->68030
68030->78031
78031->88032
68030->78033
78033->88034
88034->98035
98035->108036
98035->108037
108037->118038
108037->118039
88034->98040
98040->108041
98040->108042
108042->118043
88034->98044
98044->108045
108045->118046
118046->128047
128047->138048
128047->138049
118046->128050
108045->118051
118051->128052
128052->138053
138053->148054
148054->158055
148054->158056
158056->168057
158056->168058
168058->178059
168058->178060
128052->138061
138061->148062
148062->158063
148062->158064
158064->168065
138061->148066
148066->158067
138061->148068
148068->158069
158069->168070
168070->178071
178071->188072
178071->188073
168070->178074
158069->168075
128052->138076
138076->148077
148077->158078
158078->168079
168079->178080
148077->158081
158081->168082
158081->168083
168083->178084
168083->178085
178085->188086
178085->188087
178085->188088
128052->138089
138089->148090
138089->148091
138089->148092
138089->148093
148093->158094
158094->168095
168095->178096
178096->188097
188097->198098
168095->178099
178099->188100
178099->188101
158094->168102
168102->178103
178103->188104
188104->198105
198105->208106
208106->218107
208106->218108
198105->208109
198105->208110
208110->218111
218111->228112
178103->188113
188113->198114
198114->208115
208115->218116
208115->218117
198114->208118
198114->208119
208119->218120
178103->188121
188121->198122
198122->208123
198122->208124
198122->208125
208125->218126
208125->218127
128052->138128
138128->148129
148129->158130
148129->158131
148129->158132
108045->118133
118133->128134
128134->138135
138135->148136
57900->68137
68137->78138
78138->88139
78138->88140
88140->98141
88140->98142
68137->78143
78143->88144
78143->88145
88145->98146
68137->78147
78147->88148
88148->98149
98149->108150
108150->118151
108150->118152
118152->128153
118152->128154
128154->138155
138155->148156
148156->158157
158157->168158
158157->168159
158157->168160
168160->178161
168160->178162
138155->148163
148163->158164
158164->168165
148163->158166
158166->168167
168167->178168
178168->188169
188169->198170
188169->198171
178168->188172
168167->178173
178173->188174
168167->178175
178175->188176
178175->188177
148163->158178
88148->98179
98179->108180
108180->118181
118181->128182
108180->118183
108180->118184
88148->98185
98185->108186
108186->118187
108186->118188
88148->98189
98189->108190
108190->118191
108190->118192
108190->118193
118193->128194
118193->128195
57900->68196
68196->78197
27877->38198
38198->48199
38198->48200
48200->58201
38198->48202
48202->58203
48202->58204
58204->68205
68205->78206
78206->88207
88207->98208
78206->88209
78206->88210
58204->68211
68211->78212
78212->88213
88213->98214
78212->88215
78212->88216
27877->38217
38217->48218
38217->48219
48219->58220
48219->58221
58221->68222
68222->78223
78223->88224
88224->98225
88224->98226
98226->108227
98226->108228
58221->68229
38217->48230
48230->58231
48230->58232
58232->68233
68233->78234
78234->88235
78234->88236
78234->88237
88237->98238
98238->108239
108239->118240
108239->118241
58232->68242
68242->78243
78243->88244
78243->88245
58232->68246
68246->78247
78247->88248
78247->88249
27877->38250
38250->48251
48251->58252
38250->48253
38250->48254
48254->58255
48254->58256
58256->68257
68257->78258
68257->78259
38250->48260
48260->58261
58261->68262
68262->78263
27877->38264
38264->48265
38264->48266
48266->58267
58267->68268
68268->78269
78269->88270
78269->88271
48266->58272
38264->48273
48273->58274
58274->68275
27877->38276
38276->48277
38276->48278
48278->58279
48278->58280
58280->68281
68281->78282
78282->88283
88283->98284
98284->108285
98284->108286
68281->78287
38276->48288
48288->58289
58289->68290
68290->78291
78291->88292
68290->78293
68290->78294
27877->38295
38295->48296
38295->48297
48297->58298
48297->58299
58299->68300
68300->78301
68300->78302
38295->48303
48303->58304
58304->68305
68305->78306
78306->88307
78306->88308
78306->88309
88309->98310
98310->108311
108311->118312
108311->118313
58304->68314
68314->78315
78315->88316
88316->98317
98317->108318
108318->118319
108318->118320
118320->128321
118320->128322
78315->88323
88323->98324
88323->98325
58304->68326
68326->78327
78327->88328
88328->98329
98329->108330
98329->108331
98329->108332
108332->118333
108332->118334
68326->78335
78335->88336
88336->98337
88336->98338
78335->88339
88339->98340
98340->108341
108341->118342
118342->128343
118342->128344
128344->138345
128344->138346
138346->148347
138346->148348
98340->108349
108349->118350
58304->68351
68351->78352
78352->88353
88353->98354
88353->98355
78352->88356
88356->98357
98357->108358
68351->78359
78359->88360
88360->98361
98361->108362
98361->108363
58304->68364
68364->78365
-10->08366
08366->18367
18367->28368
28368->38369
38369->48370
48370->58371
08366->18372
18372->28373
28373->38374
38374->48375
48375->58376
58376->68377
68377->78378
78378->88379
08366->18380
18380->28381
28381->38382
38382->48383
48383->58384
58384->68385
68385->78386
78386->88387
08366->18388
18388->28389
28389->38390
38390->48391
48391->58392
58392->68393
68393->78394
08366->18395
18395->28396
28396->38397
38397->48398
48398->58399
58399->68400
68400->78401
08366->18402
18402->28403
28403->38404
38404->48405
48405->58406
58406->68407
68407->78408
08366->18409
18409->28410
28410->38411
38411->48412
08366->18413
18413->28414
28414->38415
08366->18416
18416->28417
18416->28418
28418->38419
18416->28420
28420->38421
38421->48422
38421->48423
48423->58424
48423->58425
48423->58426
58426->68427
38421->48428
48428->58429
58429->68430
68430->78431
78431->88432
78431->88433
88433->98434
88433->98435
58429->68436
68436->78437
78437->88438
78437->88439
58429->68440
68440->78441
78441->88442
78441->88443
58429->68444
68444->78445
78445->88446
78445->88447
58429->68448
68448->78449
78449->88450
78449->88451
58429->68452
68452->78453
78453->88454
88454->98455
98455->108456
78453->88457
88457->98458
88457->98459
98459->108460
98459->108461
58429->68462
68462->78463
78463->88464
88464->98465
78463->88466
28420->38467
38467->48468
38467->48469
48469->58470
48469->58471
48469->58472
58472->68473
38467->48474
48474->58475
58475->68476
68476->78477
78477->88478
88478->98479
98479->108480
108480->118481
108480->118482
78477->88483
88483->98484
88483->98485
98485->108486
108486->118487
118487->128488
118487->128489
58475->68490
68490->78491
78491->88492
88492->98493
88492->98494
78491->88495
88495->98496
88495->98497
98497->108498
98497->108499
98497->108500
108500->118501
118501->128502
118501->128503
118501->128504
118501->128505
58475->68506
68506->78507
68506->78508
68506->78509
68506->78510
78510->88511
88511->98512
98512->108513
98512->108514
108514->118515
108514->118516
58475->68517
68517->78518
78518->88519
88519->98520
98520->108521
78518->88522
88522->98523
88522->98524
98524->108525
108525->118526
58475->68527
68527->78528
78528->88529
78528->88530
58475->68531
68531->78532
78532->88533
78532->88534
88534->98535
88534->98536
98536->108537
108537->118538
98536->108539
108539->118540
118540->128541
128541->138542
118540->128543
118540->128544
128544->138545
128544->138546
138546->148547
148547->158548
158548->168549
168549->178550
168549->178551
158548->168552
168552->178553
168552->178554
148547->158555
158555->168556
158555->168557
118540->128558
128558->138559
138559->148560
148560->158561
158561->168562
148560->158563
158563->168564
158563->168565
158563->168566
158563->168567
28420->38568
38568->48569
38568->48570
48570->58571
48570->58572
48570->58573
58573->68574
38568->48575
48575->58576
58576->68577
68577->78578
78578->88579
88579->98580
98580->108581
108581->118582
108581->118583
78578->88584
88584->98585
88584->98586
98586->108587
108587->118588
118588->128589
118588->128590
58576->68591
68591->78592
78592->88593
88593->98594
88593->98595
78592->88596
88596->98597
88596->98598
98598->108599
58576->68600
68600->78601
78601->88602
68600->78603
78603->88604
88604->98605
98605->108606
108606->118607
108606->118608
118608->128609
118608->128610
128610->138611
88604->98612
98612->108613
108613->118614
108613->118615
118615->128616
118615->128617
58576->68618
68618->78619
78619->88620
88620->98621
98621->108622
78619->88623
88623->98624
88623->98625
98625->108626
108626->118627
58576->68628
68628->78629
78629->88630
78629->88631
58576->68632
68632->78633
68632->78634
68632->78635
78635->88636
68632->78637
78637->88638
88638->98639
98639->108640
98639->108641
108641->118642
108641->118643
118643->128644
118643->128645
28420->38646
38646->48647
38646->48648
48648->58649
48648->58650
48648->58651
58651->68652
38646->48653
48653->58654
58654->68655
68655->78656
78656->88657
88657->98658
98658->108659
108659->118660
108659->118661
78656->88662
88662->98663
88662->98664
98664->108665
108665->118666
118666->128667
118666->128668
58654->68669
68669->78670
78670->88671
88671->98672
88671->98673
78670->88674
88674->98675
88674->98676
98676->108677
98676->108678
98676->108679
108679->118680
118680->128681
118680->128682
118680->128683
118680->128684
58654->68685
68685->78686
68685->78687
68685->78688
68685->78689
78689->88690
88690->98691
98691->108692
98691->108693
108693->118694
108693->118695
58654->68696
68696->78697
78697->88698
88698->98699
98699->108700
78697->88701
88701->98702
88701->98703
98703->108704
108704->118705
58654->68706
68706->78707
78707->88708
78707->88709
58654->68710
68710->78711
78711->88712
88712->98713
78711->88714
88714->98715
88714->98716
28420->38717
38717->48718
38717->48719
48719->58720
48719->58721
48719->58722
58722->68723
38717->48724
28420->38725
38725->48726
38725->48727
48727->58728
48727->58729
48727->58730
58730->68731
38725->48732
48732->58733
58733->68734
68734->78735
78735->88736
88736->98737
98737->108738
108738->118739
108738->118740
78735->88741
88741->98742
88741->98743
98743->108744
108744->118745
118745->128746
118745->128747
58733->68748
68748->78749
78749->88750
88750->98751
88750->98752
78749->88753
88753->98754
88753->98755
98755->108756
58733->68757
68757->78758
78758->88759
68757->78760
78760->88761
88761->98762
98762->108763
108763->118764
108763->118765
118765->128766
118765->128767
128767->138768
138768->148769
128767->138770
138770->148771
148771->158772
138770->148773
88761->98774
98774->108775
108775->118776
108775->118777
118777->128778
118777->128779
58733->68780
68780->78781
78781->88782
78781->88783
88783->98784
88783->98785
58733->68786
68786->78787
78787->88788
78787->88789
88789->98790
58733->68791
68791->78792
78792->88793
88793->98794
98794->108795
78792->88796
88796->98797
88796->98798
98798->108799
108799->118800
58733->68801
68801->78802
78802->88803
78802->88804
58733->68805
68805->78806
68805->78807
68805->78808
78808->88809
68805->78810
78810->88811
88811->98812
98812->108813
108813->118814
118814->128815
128815->138816
108813->118817
118817->128818
118817->128819
128819->138820
128819->138821
88811->98822
98822->108823
108823->118824
118824->128825
128825->138826
108823->118827
118827->128828
118827->128829
128829->138830
138830->148831
88811->98832
98832->108833
98832->108834
98832->108835
98832->108836
108836->118837
118837->128838
128838->138839
128838->138840
138840->148841
148841->158842
138840->148843
148843->158844
88811->98845
98845->108846
108846->118847
118847->128848
128848->138849
138849->148850
148850->158851
158851->168852
138849->148853
148853->158854
158854->168855
108846->118856
118856->128857
118856->128858
128858->138859
128858->138860
88811->98861
98861->108862
108862->118863
118863->128864
128864->138865
108862->118866
118866->128867
118866->128868
128868->138869
138869->148870
88811->98871
98871->108872
108872->118873
118873->128874
128874->138875
108872->118876
118876->128877
128877->138878
98871->108879
98871->108880
98871->108881
108881->118882
118882->128883
128883->138884
128883->138885
138885->148886
148886->158887
138885->148888
148888->158889
158889->168890
168890->178891
158889->168892
88811->98893
98893->108894
108894->118895
108894->118896
118896->128897
118896->128898
28420->38899
38899->48900
38899->48901
48901->58902
48901->58903
48901->58904
58904->68905
38899->48906
48906->58907
58907->68908
68908->78909
78909->88910
88910->98911
98911->108912
108912->118913
108912->118914
78909->88915
88915->98916
88915->98917
98917->108918
108918->118919
118919->128920
118919->128921
58907->68922
68922->78923
78923->88924
88924->98925
88924->98926
78923->88927
88927->98928
88927->98929
98929->108930
58907->68931
68931->78932
78932->88933
68931->78934
78934->88935
88935->98936
98936->108937
108937->118938
108937->118939
118939->128940
118939->128941
128941->138942
138942->148943
128941->138944
138944->148945
148945->158946
138944->148947
88935->98948
98948->108949
108949->118950
108949->118951
118951->128952
118951->128953
58907->68954
68954->78955
78955->88956
78955->88957
88957->98958
88957->98959
58907->68960
68960->78961
78961->88962
78961->88963
88963->98964
58907->68965
68965->78966
78966->88967
88967->98968
98968->108969
78966->88970
88970->98971
88970->98972
98972->108973
108973->118974
58907->68975
68975->78976
78976->88977
78976->88978
88978->98979
88978->98980
98980->108981
58907->68982
68982->78983
78983->88984
78983->88985
58907->68986
68986->78987
78987->88988
88988->98989
78987->88990
88990->98991
98991->108992
98991->108993
108993->118994
118994->128995
128995->138996
118994->128997
88990->98998
58907->68999
68999->79000
79000->89001
89001->99002
99002->109003
79000->89004
89004->99005
89004->99006
99006->109007
99006->109008
58907->69009
69009->79010
79010->89011
79010->89012
79010->89013
89013->99014
58907->69015
69015->79016
69015->79017
69015->79018
69015->79019
79019->89020
89020->99021
99021->109022
109022->119023
119023->129024
129024->139025
139025->149026
149026->159027
159027->169028
139025->149029
149029->159030
159030->169031
109022->119032
119032->129033
119032->129034
129034->139035
129034->139036
89020->99037
99037->109038
109038->119039
119039->129040
129040->139041
109038->119042
119042->129043
129043->139044
99037->109045
99037->109046
99037->109047
109047->119048
119048->129049
129049->139050
139050->149051
139050->149052
149052->159053
149052->159054
159054->169055
119048->129056
129056->139057
139057->149058
139057->149059
149059->159060
149059->159061
159061->169062
119048->129063
129063->139064
139064->149065
139064->149066
149066->159067
159067->169068
159067->169069
169069->179070
169069->179071
149066->159072
159072->169073
58907->69074
69074->79075
79075->89076
89076->99077
79075->89078
89078->99079
89078->99080
99080->109081
109081->119082
99080->109083
28420->39084
39084->49085
39084->49086
49086->59087
49086->59088
49086->59089
59089->69090
39084->49091
49091->59092
59092->69093
69093->79094
79094->89095
89095->99096
99096->109097
109097->119098
109097->119099
79094->89100
89100->99101
89100->99102
99102->109103
109103->119104
119104->129105
119104->129106
59092->69107
69107->79108
79108->89109
89109->99110
89109->99111
79108->89112
89112->99113
89112->99114
99114->109115
99114->109116
99114->109117
109117->119118
119118->129119
119118->129120
119118->129121
119118->129122
59092->69123
69123->79124
69123->79125
69123->79126
69123->79127
79127->89128
89128->99129
99129->109130
99129->109131
109131->119132
109131->119133
59092->69134
69134->79135
79135->89136
79135->89137
89137->99138
89137->99139
59092->69140
69140->79141
79141->89142
79141->89143
89143->99144
59092->69145
69145->79146
69145->79147
69145->79148
69145->79149
79149->89150
89150->99151
99151->109152
99151->109153
109153->119154
109153->119155
59092->69156
69156->79157
79157->89158
79157->89159
89159->99160
89159->99161
59092->69162
69162->79163
79163->89164
79163->89165
89165->99166
89165->99167
-10->09168
09168->19169
19169->29170
29170->39171
39171->49172
49172->59173
59173->69174
09168->19175
19175->29176
29176->39177
39177->49178
49178->59179
59179->69180
69180->79181
09168->19182
19182->29183
29183->39184
39184->49185
49185->59186
59186->69187
69187->79188
09168->19189
19189->29190
29190->39191
39191->49192
49192->59193
59193->69194
69194->79195
09168->19196
19196->29197
29197->39198
39198->49199
49199->59200
59200->69201
69201->79202
09168->19203
19203->29204
29204->39205
39205->49206
49206->59207
59207->69208
09168->19209
19209->29210
29210->39211
39211->49212
09168->19213
19213->29214
29214->39215
39215->49216
09168->19217
19217->29218
29218->39219
39219->49220
09168->19221
19221->29222
19221->29223
29223->39224
19221->29225
29225->39226
39226->49227
49227->59228
59228->69229
39226->49230
29225->39231
39231->49232
49232->59233
49232->59234
39231->49235
29225->39236
39236->49237
39236->49238
49238->59239
39236->49240
49240->59241
59241->69242
69242->79243
69242->79244
69242->79245
79245->89246
89246->99247
29225->39248
39248->49249
39248->49250
49250->59251
49250->59252
59252->69253
69253->79254
69253->79255
39248->49256
49256->59257
59257->69258
69258->79259
69258->79260
29225->39261
39261->49262
39261->49263
49263->59264
49263->59265
59265->69266
69266->79267
79267->89268
89268->99269
99269->109270
99269->109271
69266->79272
39261->49273
49273->59274
59274->69275
69275->79276
79276->89277
79276->89278
79276->89279
89279->99280
89279->99281
99281->109282
109282->119283
59274->69284
69284->79285
79285->89286
79285->89287
89287->99288
99288->109289
109289->119290
109289->119291
69284->79292
69284->79293
79293->89294
69284->79295
79295->89296
89296->99297
99297->109298
109298->119299
109298->119300
119300->129301
99297->109302
99297->109303
109303->119304
59274->69305
69305->79306
79306->89307
79306->89308
29225->39309
39309->49310
39309->49311
49311->59312
49311->59313
59313->69314
69314->79315
79315->89316
79315->89317
69314->79318
39309->49319
49319->59320
59320->69321
69321->79322
69321->79323
29225->39324
39324->49325
39324->49326
49326->59327
49326->59328
59328->69329
69329->79330
69329->79331
39324->49332
49332->59333
59333->69334
69334->79335
69334->79336
29225->39337
39337->49338
39337->49339
49339->59340
49339->59341
39337->49342
49342->59343
59343->69344
69344->79345
29225->39346
39346->49347
39346->49348
49348->59349
49348->59350
59350->69351
69351->79352
69351->79353
49348->59354
59354->69355
39346->49356
49356->59357
59357->69358
69358->79359
79359->89360
79359->89361
89361->99362
59357->69363
69363->79364
69363->79365
69363->79366
69363->79367
79367->89368
89368->99369
99369->109370
99369->109371
109371->119372
109371->119373
29225->39374
39374->49375
39374->49376
49376->59377
49376->59378
59378->69379
69379->79380
69379->79381
39374->49382
49382->59383
59383->69384
69384->79385
79385->89386
79385->89387
79385->89388
89388->99389
89388->99390
99390->109391
109391->119392
59383->69393
69393->79394
79394->89395
89395->99396
99396->109397
109397->119398
109397->119399
79394->89400
89400->99401
89400->99402
99402->109403
109403->119404
119404->129405
119404->129406
59383->69407
69407->79408
79408->89409
79408->89410
89410->99411
89410->99412
69407->79413
79413->89414
79413->89415
89415->99416
69407->79417
79417->89418
69407->79419
79419->89420
89420->99421
99421->109422
109422->119423
119423->129424
119423->129425
109422->119426
109422->119427
119427->129428
89420->99429
99429->109430
109430->119431
109430->119432
119432->129433
129433->139434
129433->139435
119432->129436
59383->69437
69437->79438
79438->89439
89439->99440
89439->99441
79438->89442
-10->09443
09443->19444
19444->29445
29445->39446
39446->49447
49447->59448
59448->69449
69449->79450
09443->19451
19451->29452
29452->39453
39453->49454
09443->19455
19455->29456
29456->39457
39457->49458
09443->19459
19459->29460
29460->39461
39461->49462
09443->19463
19463->29464
29464->39465
39465->49466
09443->19467
19467->29468
29468->39469
39469->49470
09443->19471
19471->29472
29472->39473
39473->49474
09443->19475
19475->29476
29476->39477
39477->49478
09443->19479
19479->29480
29480->39481
39481->49482
09443->19483
19483->29484
29484->39485
39485->49486
09443->19487
19487->29488
29488->39489
39489->49490
09443->19491
19491->29492
19491->29493
29493->39494
39494->49495
39494->49496
39494->49497
49497->59498
59498->69499
69499->79500
49497->59501
59501->69502
69502->79503
79503->89504
79503->89505
69502->79506
79506->89507
89507->99508
89507->99509
79506->89510
39494->49511
49511->59512
59512->69513
69513->79514
79514->89515
89515->99516
89515->99517
99517->109518
99517->109519
59512->69520
69520->79521
79521->89522
79521->89523
69520->79524
79524->89525
89525->99526
99526->109527
109527->119528
119528->129529
109527->119530
119530->129531
89525->99532
99532->109533
109533->119534
109533->119535
89525->99536
99536->109537
109537->119538
109537->119539
89525->99540
99540->109541
29493->39542
39542->49543
39542->49544
39542->49545
49545->59546
59546->69547
69547->79548
49545->59549
59549->69550
69550->79551
79551->89552
79551->89553
69550->79554
79554->89555
89555->99556
89555->99557
79554->89558
39542->49559
49559->59560
59560->69561
69561->79562
69561->79563
79563->89564
79563->89565
79563->89566
29493->39567
39567->49568
39567->49569
39567->49570
49570->59571
59571->69572
69572->79573
49570->59574
59574->69575
69575->79576
79576->89577
89577->99578
89577->99579
79576->89580
89580->99581
99581->109582
99581->109583
89580->99584
69575->79585
79585->89586
79585->89587
39567->49588
49588->59589
59589->69590
69590->79591
79591->89592
89592->99593
99593->109594
79591->89595
89595->99596
89595->99597
99597->109598
109598->119599
59589->69600
69600->79601
79601->89602
79601->89603
89603->99604
89603->99605
59589->69606
69606->79607
79607->89608
89608->99609
99609->109610
79607->89611
59589->69612
69612->79613
79613->89614
79613->89615
69612->79616
79616->89617
89617->99618
99618->109619
99618->109620
99618->109621
109621->119622
109621->119623
69612->79624
79624->89625
89625->99626
99626->109627
109627->119628
109627->119629
109627->119630
119630->129631
89625->99632
99632->109633
109633->119634
119634->129635
129635->139636
139636->149637
139636->149638
149638->159639
149638->159640
159640->169641
159640->169642
119634->129643
129643->139644
129643->139645
129643->139646
139646->149647
129643->139648
139648->149649
149649->159650
159650->169651
159650->169652
169652->179653
169652->179654
169652->179655
99632->109656
109656->119657
119657->129658
119657->129659
109656->119660
59589->69661
69661->79662
79662->89663
89663->99664
99664->109665
79662->89666
89666->99667
89666->99668
69661->79669
79669->89670
79669->89671
69661->79672
79672->89673
79672->89674
79672->89675
89675->99676
69661->79677
79677->89678
89678->99679
89678->99680
89678->99681
99681->109682
89678->99683
99683->109684
109684->119685
119685->129686
119685->129687
129687->139688
129687->139689
129687->139690
59589->69691
69691->79692
69691->79693
79693->89694
89694->99695
89694->99696
89694->99697
89694->99698
99698->109699
109699->119700
119700->129701
119700->129702
109699->119703
119703->129704
129704->139705
139705->149706
149706->159707
149706->159708
59589->69709
69709->79710
29493->39711
39711->49712
39711->49713
39711->49714
49714->59715
49714->59716
59716->69717
69717->79718
79718->89719
89719->99720
89719->99721
79718->89722
89722->99723
89722->99724
69717->79725
79725->89726
89726->99727
99727->109728
79725->89729
39711->49730
49730->59731
59731->69732
69732->79733
79733->89734
79733->89735
89735->99736
89735->99737
99737->109738
99737->109739
109739->119740
59731->69741
69741->79742
79742->89743
79742->89744
69741->79745
79745->89746
89746->99747
99747->109748
109748->119749
109748->119750
119750->129751
119750->129752
89746->99753
99753->109754
109754->119755
119755->129756
129756->139757
109754->119758
119758->129759
119758->129760
129760->139761
99753->109762
109762->119763
99753->109764
109764->119765
119765->129766
129766->139767
139767->149768
139767->149769
149769->159770
149769->159771
159771->169772
119765->129773
129773->139774
139774->149775
139774->149776
149776->159777
149776->159778
159778->169779
119765->129780
129780->139781
139781->149782
139781->149783
149783->159784
149783->159785
159785->169786
119765->129787
129787->139788
139788->149789
139788->149790
129787->139791
139791->149792
149792->159793
159793->169794
169794->179795
169794->179796
149792->159797
159797->169798
169798->179799
169798->179800
179800->189801
179800->189802
189802->199803
189802->199804
199804->209805
199804->209806
149792->159807
159807->169808
169808->179809
169808->179810
179810->189811
179810->189812
189812->199813
189812->199814
149792->159815
159815->169816
169816->179817
169816->179818
169816->179819
179819->189820
179819->189821
189821->199822
149792->159823
159823->169824
169824->179825
179825->189826
189826->199827
169824->179828
179828->189829
179828->189830
189830->199831
149792->159832
159832->169833
169833->179834
179834->189835
179834->189836
169833->179837
179837->189838
189838->199839
199839->209840
199839->209841
189838->199842
199842->209843
199842->209844
159832->169845
169845->179846
179846->189847
189847->199848
199848->209849
179846->189850
189850->199851
199851->209852
199851->209853
199851->209854
209854->219855
209854->219856
219856->229857
219856->229858
219856->229859
219856->229860
179846->189861
189861->199862
199862->209863
189861->199864
199864->209865
209865->219866
219866->229867
219866->229868
229868->239869
229868->239870
229868->239871
229868->239872
229868->239873
189861->199874
199874->209875
209875->219876
219876->229877
219876->229878
229878->239879
229878->239880
229878->239881
229878->239882
229878->239883
179846->189884
189884->199885
199885->209886
199885->209887
199885->209888
149792->159889
159889->169890
169890->179891
169890->179892
179892->189893
189893->199894
159889->169895
89746->99896
99896->109897
109897->119898
119898->129899
109897->119900
119900->129901
99896->109902
109902->119903
119903->129904
129904->139905
139905->149906
139905->149907
149907->159908
149907->159909
159909->169910
159909->169911
169911->179912
169911->179913
119903->129914
129914->139915
139915->149916
149916->159917
159917->169918
159917->169919
169919->179920
149916->159921
29493->39922
39922->49923
39922->49924
39922->49925
49925->59926
49925->59927
59927->69928
69928->79929
79929->89930
89930->99931
89930->99932
79929->89933
89933->99934
89933->99935
79929->89936
89936->99937
89936->99938
79929->89939
89939->99940
89939->99941
69928->79942
79942->89943
79942->89944
39922->49945
49945->59946
59946->69947
69947->79948
79948->89949
89949->99950
99950->109951
109951->119952
109951->119953
99950->109954
109954->119955
109954->119956
119956->129957
129957->139958
129957->139959
119956->129960
129960->139961
129960->139962
79948->89963
89963->99964
99964->109965
109965->119966
109965->119967
99964->109968
109968->119969
109968->119970
119970->129971
129971->139972
129971->139973
119970->129974
129974->139975
129974->139976
139976->149977
139976->149978
139976->149979
79948->89980
89980->99981
99981->109982
109982->119983
109982->119984
99981->109985
109985->119986
109985->119987
119987->129988
129988->139989
129988->139990
119987->129991
129991->139992
129991->139993
139993->149994
149994->159995
139993->149996
149996->159997
159997->169998
149996->159999
159999->1610000
79948->810001
810001->910002
910002->1010003
910002->1010004
1010004->1110005
1010004->1110006
1010004->1110007
1010004->1110008
1010004->1110009
1110009->1210010
79948->810011
810011->910012
910012->1010013
910012->1010014
1010014->1110015
1010014->1110016
1010014->1110017
1010014->1110018
1110018->1210019
1010014->1110020
1110020->1210021
79948->810022
810022->910023
910023->1010024
910023->1010025
1010025->1110026
1010025->1110027
59946->610028
610028->710029
710029->810030
810030->910031
810030->910032
710029->810033
810033->910034
910034->1010035
1010035->1110036
1110036->1210037
1210037->1310038
1210037->1310039
1110036->1210040
610028->710041
710041->810042
810042->910043
810042->910044
710041->810045
810045->910046
910046->1010047
1010047->1110048
1110048->1210049
1210049->1310050
1310050->1410051
1310050->1410052
1410052->1510053
1210049->1310054
1110048->1210055
29493->310056
310056->410057
310056->410058
310056->410059
410059->510060
410059->510061
510061->610062
610062->710063
710063->810064
810064->910065
810064->910066
710063->810067
810067->910068
810067->910069
710063->810070
810070->910071
810070->910072
710063->810073
810073->910074
810073->910075
610062->710076
710076->810077
710076->810078
310056->410079
410079->510080
510080->610081
610081->710082
710082->810083
810083->910084
910084->1010085
1010085->1110086
1010085->1110087
910084->1010088
1010088->1110089
1010088->1110090
1110090->1210091
1210091->1310092
1210091->1310093
1110090->1210094
1210094->1310095
1310095->1410096
1210094->1310097
1310097->1410098
710082->810099
810099->910100
910100->1010101
1010101->1110102
1010101->1110103
910100->1010104
1010104->1110105
1010104->1110106
1110106->1210107
1210107->1310108
1210107->1310109
1110106->1210110
1210110->1310111
1210110->1310112
1310112->1410113
1310112->1410114
1310112->1410115
710082->810116
810116->910117
910117->1010118
1010118->1110119
1010118->1110120
910117->1010121
1010121->1110122
1010121->1110123
1110123->1210124
1210124->1310125
1210124->1310126
1110123->1210127
1210127->1310128
1210127->1310129
1310129->1410130
1410130->1510131
1310129->1410132
1410132->1510133
1510133->1610134
1410132->1510135
1510135->1610136
710082->810137
810137->910138
910138->1010139
910138->1010140
1010140->1110141
1010140->1110142
1010140->1110143
1010140->1110144
1010140->1110145
1110145->1210146
710082->810147
810147->910148
910148->1010149
910148->1010150
1010150->1110151
1010150->1110152
1010150->1110153
1010150->1110154
1110154->1210155
1010150->1110156
1110156->1210157
710082->810158
810158->910159
910159->1010160
1010160->1110161
910159->1010162
1010162->1110163
1010162->1110164
1110164->1210165
1110164->1210166
510080->610167
610167->710168
710168->810169
810169->910170
810169->910171
710168->810172
810172->910173
910173->1010174
1010174->1110175
1110175->1210176
1210176->1310177
1210176->1310178
1110175->1210179
610167->710180
710180->810181
810181->910182
810181->910183
710180->810184
810184->910185
910185->1010186
1010186->1110187
1110187->1210188
1210188->1310189
1310189->1410190
1310189->1410191
1410191->1510192
1210188->1310193
1110187->1210194
610167->710195
710195->810196
810196->910197
810196->910198
710195->810199
810199->910200
910200->1010201
1010201->1110202
1110202->1210203
1210203->1310204
1310204->1410205
1310204->1410206
1210203->1310207
1110202->1210208
29493->310209
310209->410210
310209->410211
310209->410212
410212->510213
410212->510214
510214->610215
610215->710216
710216->810217
810217->910218
810217->910219
710216->810220
810220->910221
810220->910222
610215->710223
710223->810224
810224->910225
910225->1010226
710223->810227
310209->410228
410228->510229
510229->610230
610230->710231
710231->810232
710231->810233
810233->910234
810233->910235
910235->1010236
510229->610237
610237->710238
710238->810239
710238->810240
610237->710241
710241->810242
810242->910243
910243->1010244
1010244->1110245
1010244->1110246
1110246->1210247
1110246->1210248
1210248->1310249
1210248->1310250
1310250->1410251
810242->910252
910252->1010253
1010253->1110254
1010253->1110255
910252->1010256
1010256->1110257
1110257->1210258
1210258->1310259
1310259->1410260
1310259->1410261
1410261->1510262
1410261->1510263
1110257->1210264
1210264->1310265
1310265->1410266
1410266->1510267
1510267->1610268
1310265->1410269
1410269->1510270
1410269->1510271
1510271->1610272
1210264->1310273
1310273->1410274
1210264->1310275
1310275->1410276
1410276->1510277
1510277->1610278
1610278->1710279
1610278->1710280
1710280->1810281
1710280->1810282
1810282->1910283
1410276->1510284
1510284->1610285
1610285->1710286
1610285->1710287
1710287->1810288
1710287->1810289
1810289->1910290
1410276->1510291
1510291->1610292
1610292->1710293
1610292->1710294
1710294->1810295
1710294->1810296
1810296->1910297
1410276->1510298
1510298->1610299
1610299->1710300
1610299->1710301
1510298->1610302
1610302->1710303
1710303->1810304
1810304->1910305
1910305->2010306
1910305->2010307
1710303->1810308
1810308->1910309
1910309->2010310
1910309->2010311
2010311->2110312
2010311->2110313
2110313->2210314
2110313->2210315
2210315->2310316
2210315->2310317
1710303->1810318
1810318->1910319
1910319->2010320
1910319->2010321
2010321->2110322
2010321->2110323
2110323->2210324
2110323->2210325
1710303->1810326
1810326->1910327
1910327->2010328
1910327->2010329
1910327->2010330
2010330->2110331
2010330->2110332
2110332->2210333
1710303->1810334
1810334->1910335
1910335->2010336
2010336->2110337
2110337->2210338
1910335->2010339
2010339->2110340
2010339->2110341
2110341->2210342
1710303->1810343
1810343->1910344
1910344->2010345
2010345->2110346
2010345->2110347
1910344->2010348
2010348->2110349
2110349->2210350
2210350->2310351
2210350->2310352
2110349->2210353
2210353->2310354
2210353->2310355
1810343->1910356
1910356->2010357
2010357->2110358
2110358->2210359
2210359->2310360
2010357->2110361
2110361->2210362
2210362->2310363
2210362->2310364
2210362->2310365
2310365->2410366
2310365->2410367
2410367->2510368
2410367->2510369
2410367->2510370
2410367->2510371
2010357->2110372
2110372->2210373
2210373->2310374
2110372->2210375
2210375->2310376
2310376->2410377
2410377->2510378
2410377->2510379
2510379->2610380
2510379->2610381
2510379->2610382
2510379->2610383
2510379->2610384
2110372->2210385
2210385->2310386
2310386->2410387
2410387->2510388
2410387->2510389
2510389->2610390
2510389->2610391
2510389->2610392
2510389->2610393
2510389->2610394
2010357->2110395
2110395->2210396
2210396->2310397
2210396->2310398
2210396->2310399
1710303->1810400
1810400->1910401
1910401->2010402
1910401->2010403
2010403->2110404
2110404->2210405
1810400->1910406
1110257->1210407
1210407->1310408
1310408->1410409
1410409->1510410
1310408->1410411
1410411->1510412
1210407->1310413
1310413->1410414
1410414->1510415
1510415->1610416
1610416->1710417
1610416->1710418
1710418->1810419
1710418->1810420
1810420->1910421
1810420->1910422
1910422->2010423
1910422->2010424
1410414->1510425
1510425->1610426
1610426->1710427
1710427->1810428
1710427->1810429
29493->310430
310430->410431
310430->410432
310430->410433
410433->510434
410433->510435
510435->610436
610436->710437
610436->710438
310430->410439
410439->510440
510440->610441
610441->710442
610441->710443
710443->810444
810444->910445
710443->810446
29493->310447
310447->410448
310447->410449
310447->410450
410450->510451
410450->510452
510452->610453
610453->710454
710454->810455
710454->810456
610453->710457
710457->810458
710457->810459
310447->410460
410460->510461
510461->610462
610462->710463
710463->810464
810464->910465
910465->1010466
710463->810467
510461->610468
610468->710469
710469->810470
710469->810471
610468->710472
710472->810473
810473->910474
910474->1010475
910474->1010476
910474->1010477
1010477->1110478
1010477->1110479
610468->710480
710480->810481
810481->910482
910482->1010483
910482->1010484
910482->1010485
1010485->1110486
510461->610487
610487->710488
710488->810489
710488->810490
810490->910491
810490->910492
910492->1010493
510461->610494
610494->710495
710495->810496
810496->910497
910497->1010498
910497->1010499
1010499->1110500
1010499->1110501
1110501->1210502
1110501->1210503
710495->810504
810504->910505
910505->1010506
910505->1010507
810504->910508
910508->1010509
1010509->1110510
1110510->1210511
1110510->1210512
1110510->1210513
1210513->1310514
1210513->1310515
1310515->1410516
1310515->1410517
510461->610518
610518->710519
710519->810520
710519->810521
810521->910522
810521->910523
510461->610524
610524->710525
710525->810526
810526->910527
910527->1010528
710525->810529
810529->910530
810529->910531
610524->710532
710532->810533
710532->810534
610524->710535
710535->810536
710535->810537
710535->810538
810538->910539
610524->710540
710540->810541
810541->910542
810541->910543
810541->910544
910544->1010545
810541->910546
910546->1010547
1010547->1110548
1110548->1210549
1110548->1210550
1210550->1310551
1210550->1310552
1210550->1310553
510461->610554
610554->710555
710555->810556
810556->910557
910557->1010558
1010558->1110559
1010558->1110560
1110560->1210561
1110560->1210562
1210562->1310563
1210562->1310564
810556->910565
910565->1010566
910565->1010567
910565->1010568
1010568->1110569
910565->1010570
1010570->1110571
1110571->1210572
1210572->1310573
1210572->1310574
1310574->1410575
1310574->1410576
1310574->1410577
610554->710578
710578->810579
810579->910580
810579->910581
710578->810582
29493->310583
310583->410584
310583->410585
310583->410586
410586->510587
410586->510588
510588->610589
610589->710590
710590->810591
810591->910592
810591->910593
710590->810594
810594->910595
810594->910596
610589->710597
710597->810598
710597->810599
310583->410600
410600->510601
510601->610602
610602->710603
710603->810604
710603->810605
810605->910606
810605->910607
910607->1010608
910607->1010609
1010609->1110610
510601->610611
610611->710612
710612->810613
710612->810614
610611->710615
710615->810616
810616->910617
910617->1010618
1010618->1110619
1010618->1110620
1110620->1210621
1110620->1210622
1210622->1310623
1210622->1310624
1310624->1410625
1310624->1410626
810616->910627
910627->1010628
1010628->1110629
1010628->1110630
1110630->1210631
1110630->1210632
1210632->1310633
1210632->1310634
810616->910635
910635->1010636
1010636->1110637
1010636->1110638
1110638->1210639
1110638->1210640
1210640->1310641
810616->910642
910642->1010643
1010643->1110644
1010643->1110645
1110645->1210646
1110645->1210647
1210647->1310648
810616->910649
910649->1010650
1010650->1110651
1010650->1110652
1110652->1210653
1110652->1210654
1210654->1310655
810616->910656
910656->1010657
1010657->1110658
1010657->1110659
810616->910660
910660->1010661
1010661->1110662
1110662->1210663
1210663->1310664
1310664->1410665
1310664->1410666
1410666->1510667
1410666->1510668
1510668->1610669
1510668->1610670
1110662->1210671
1210671->1310672
1310672->1410673
1410673->1510674
1510674->1610675
1310672->1410676
1410676->1510677
1410676->1510678
1510678->1610679
1110662->1210680
1210680->1310681
1310681->1410682
1310681->1410683
1410683->1510684
1410683->1510685
1410683->1510686
1410683->1510687
1410683->1510688
1410683->1510689
1410683->1510690
1410683->1510691
910660->1010692
1010692->1110693
1110693->1210694
1110693->1210695
1010692->1110696
1110696->1210697
1210697->1310698
1310698->1410699
1410699->1510700
1510700->1610701
1610701->1710702
1610701->1710703
1510700->1610704
1410699->1510705
29493->310706
310706->410707
310706->410708
310706->410709
410709->510710
410709->510711
510711->610712
610712->710713
710713->810714
810714->910715
810714->910716
710713->810717
810717->910718
810717->910719
610712->710720
710720->810721
710720->810722
310706->410723
410723->510724
510724->610725
610725->710726
710726->810727
710726->810728
810728->910729
810728->910730
910730->1010731
510724->610732
610732->710733
710733->810734
710733->810735
610732->710736
710736->810737
810737->910738
910738->1010739
1010739->1110740
1010739->1110741
1110741->1210742
1110741->1210743
1210743->1310744
1210743->1310745
1310745->1410746
810737->910747
910747->1010748
1010748->1110749
1010748->1110750
910747->1010751
1010751->1110752
1110752->1210753
1210753->1310754
1310754->1410755
1310754->1410756
1410756->1510757
1410756->1510758
1510758->1610759
1510758->1610760
1610760->1710761
1610760->1710762
1110752->1210763
1210763->1310764
1310764->1410765
1310764->1410766
1410766->1510767
1410766->1510768
1510768->1610769
1510768->1610770
1110752->1210771
1210771->1310772
1310772->1410773
1310772->1410774
1410774->1510775
1410774->1510776
1510776->1610777
1110752->1210778
1210778->1310779
1310779->1410780
1310779->1410781
1410781->1510782
1410781->1510783
1510783->1610784
1110752->1210785
1210785->1310786
1310786->1410787
1310786->1410788
1410788->1510789
1410788->1510790
1510790->1610791
1110752->1210792
1210792->1310793
1310793->1410794
1410794->1510795
1510795->1610796
1610796->1710797
1610796->1710798
1710798->1810799
1710798->1810800
1810800->1910801
1410794->1510802
1510802->1610803
1610803->1710804
1610803->1710805
1410794->1510806
1510806->1610807
1610807->1710808
1610807->1710809
1510806->1610810
1610810->1710811
1710811->1810812
1810812->1910813
1810812->1910814
1810812->1910815
1510806->1610816
1610816->1710817
1710817->1810818
1810818->1910819
1810818->1910820
1810818->1910821
1910821->2010822
1910821->2010823
2010823->2110824
2010823->2110825
2110825->2210826
2210826->2310827
2210826->2310828
2110825->2210829
1410794->1510830
1510830->1610831
1610831->1710832
1710832->1810833
1810833->1910834
1610831->1710835
1710835->1810836
1710835->1810837
1810837->1910838
1410794->1510839
1510839->1610840
1610840->1710841
1610840->1710842
1710842->1810843
1710842->1810844
1710842->1810845
1710842->1810846
1710842->1810847
1710842->1810848
1710842->1810849
1710842->1810850
1210792->1310851
1310851->1410852
1410852->1510853
1510853->1610854
1510853->1610855
1410852->1510856
1510856->1610857
1610857->1710858
1710858->1810859
1810859->1910860
1910860->2010861
2010861->2110862
2010861->2110863
1910860->2010864
1810859->1910865
1310851->1410866
1410866->1510867
1510867->1610868
1510867->1610869
1410866->1510870
1510870->1610871
1610871->1710872
1710872->1810873
1810873->1910874
1910874->2010875
1910874->2010876
1810873->1910877
29493->310878
310878->410879
310878->410880
310878->410881
410881->510882
410881->510883
510883->610884
610884->710885
710885->810886
810886->910887
810886->910888
710885->810889
810889->910890
810889->910891
710885->810892
810892->910893
810892->910894
710885->810895
810895->910896
810895->910897
710885->810898
810898->910899
910899->1010900
1010900->1110901
810898->910902
710885->810903
810903->910904
810903->910905
710885->810906
810906->910907
810906->910908
610884->710909
710909->810910
710909->810911
310878->410912
410912->510913
510913->610914
610914->710915
710915->810916
710915->810917
810917->910918
810917->910919
910919->1010920
510913->610921
610921->710922
710922->810923
710922->810924
510913->610925
610925->710926
710926->810927
710926->810928
510913->610929
610929->710930
710930->810931
710930->810932
610929->710933
710933->810934
810934->910935
910935->1010936
1010936->1110937
1010936->1110938
810934->910939
910939->1010940
1010940->1110941
1010940->1110942
810934->910943
910943->1010944
1010944->1110945
1010944->1110946
810934->910947
910947->1010948
1010948->1110949
1010948->1110950
510913->610951
610951->710952
710952->810953
810953->910954
810953->910955
910955->1010956
710952->810957
810957->910958
810957->910959
910959->1010960
610951->710961
710961->810962
810962->910963
910963->1010964
1010964->1110965
1010964->1110966
810962->910967
910967->1010968
1010968->1110969
1010968->1110970
610951->710971
710971->810972
810972->910973
910973->1010974
1010974->1110975
1010974->1110976
810972->910977
910977->1010978
1010978->1110979
910977->1010980
1010980->1110981
1110981->1210982
1210982->1310983
1310983->1410984
1310983->1410985
1410985->1510986
1410985->1510987
1510987->1610988
1510987->1610989
1610989->1710990
1110981->1210991
1210991->1310992
1310992->1410993
1310992->1410994
1110981->1210995
1210995->1310996
1310996->1410997
1310996->1410998
1110981->1210999
1210999->1311000
1311000->1411001
1311000->1411002
1110981->1211003
1211003->1311004
1311004->1411005
1311004->1411006
910977->1011007
1011007->1111008
1111008->1211009
1211009->1311010
1311010->1411011
1311010->1411012
1411012->1511013
1411012->1511014
1511014->1611015
1511014->1611016
1111008->1211017
1211017->1311018
1311018->1411019
1311018->1411020
810972->911021
911021->1011022
1011022->1111023
1011022->1111024
810972->911025
911025->1011026
1011026->1111027
1011026->1111028
810972->911029
911029->1011030
1011030->1111031
1011030->1111032
911029->1011033
1011033->1111034
1111034->1211035
1211035->1311036
1311036->1411037
1311036->1411038
1111034->1211039
1211039->1311040
1311040->1411041
1211039->1311042
1311042->1411043
1411043->1511044
1511044->1611045
1611045->1711046
1711046->1811047
1811047->1911048
1611045->1711049
1711049->1811050
1711049->1811051
1811051->1911052
1911052->2011053
1411043->1511054
1511054->1611055
1611055->1711056
1611055->1711057
1711057->1811058
1711057->1811059
1811059->1911060
1811059->1911061
1411043->1511062
1511062->1611063
1611063->1711064
1611063->1711065
1711065->1811066
1711065->1811067
1511062->1611068
1611068->1711069
1611068->1711070
1511062->1611071
1611071->1711072
1511062->1611073
1611073->1711074
1711074->1811075
1811075->1911076
1811075->1911077
1911077->2011078
1911077->2011079
2011079->2111080
2011079->2111081
1411043->1511082
1511082->1611083
1611083->1711084
1611083->1711085
1211039->1311086
1311086->1411087
1411087->1511088
1511088->1611089
1511088->1611090
1111034->1211091
1211091->1311092
1311092->1411093
1311092->1411094
510913->611095
611095->711096
711096->811097
711096->811098
29493->311099
311099->411100
311099->411101
311099->411102
411102->511103
411102->511104
511104->611105
611105->711106
711106->811107
811107->911108
611105->711109
311099->411110
411110->511111
511111->611112
611112->711113
711113->811114
711113->811115
811115->911116
811115->911117
911117->1011118
511111->611119
611119->711120
711120->811121
711120->811122
811122->911123
811122->911124
911124->1011125
911124->1011126
511111->611127
611127->711128
711128->811129
711128->811130
711128->811131
811131->911132
811131->911133
911133->1011134
911133->1011135
511111->611136
611136->711137
29493->311138
311138->411139
311138->411140
411140->511141
411140->511142
511142->611143
611143->711144
711144->811145
711144->811146
611143->711147
711147->811148
711147->811149
311138->411150
411150->511151
511151->611152
611152->711153
711153->811154
711153->811155
811155->911156
811155->911157
911157->1011158
511151->611159
611159->711160
711160->811161
711160->811162
611159->711163
711163->811164
811164->911165
911165->1011166
911165->1011167
911165->1011168
1011168->1111169
511151->611170
611170->711171
29493->311172
311172->411173
311172->411174
311172->411175
411175->511176
411175->511177
511177->611178
611178->711179
711179->811180
811180->911181
811180->911182
711179->811183
811183->911184
911184->1011185
1011185->1111186
811183->911187
711179->811188
811188->911189
811188->911190
611178->711191
711191->811192
811192->911193
911193->1011194
711191->811195
311172->411196
411196->511197
511197->611198
611198->711199
711199->811200
711199->811201
511197->611202
611202->711203
711203->811204
811204->911205
811204->911206
911206->1011207
711203->811208
811208->911209
811208->911210
911210->1011211
611202->711212
711212->811213
811213->911214
911214->1011215
911214->1011216
911214->1011217
611202->711218
711218->811219
811219->911220
911220->1011221
811219->911222
911222->1011223
1011223->1111224
1111224->1211225
1211225->1311226
1211225->1311227
1211225->1311228
1311228->1411229
1011223->1111230
1111230->1211231
1211231->1311232
811219->911233
911233->1011234
1011234->1111235
1111235->1211236
1211236->1311237
1311237->1411238
1311237->1411239
1411239->1511240
1211236->1311241
511197->611242
611242->711243
29493->311244
311244->411245
311244->411246
411246->511247
411246->511248
511248->611249
611249->711250
711250->811251
811251->911252
911252->1011253
1011253->1111254
811251->911255
711250->811256
811256->911257
811256->911258
711250->811259
811259->911260
811259->911261
711250->811262
811262->911263
811262->911264
611249->711265
711265->811266
711265->811267
311244->411268
411268->511269
511269->611270
611270->711271
711271->811272
811272->911273
911273->1011274
911273->1011275
911273->1011276
1011276->1111277
1011276->1111278
1111278->1211279
1111278->1211280
1111278->1211281
711271->811282
811282->911283
911283->1011284
1011284->1111285
911283->1011286
1011286->1111287
1011286->1111288
511269->611289
611289->711290
711290->811291
811291->911292
811291->911293
711290->811294
811294->911295
911295->1011296
1011296->1111297
1111297->1211298
1211298->1311299
1211298->1311300
1111297->1211301
611289->711302
711302->811303
811303->911304
811303->911305
711302->811306
811306->911307
911307->1011308
1011308->1111309
1111309->1211310
1211310->1311311
1311311->1411312
1311311->1411313
1411313->1511314
1211310->1311315
1111309->1211316
611289->711317
711317->811318
811318->911319
811318->911320
711317->811321
811321->911322
911322->1011323
1011323->1111324
1111324->1211325
1211325->1311326
1311326->1411327
1311326->1411328
1211325->1311329
1111324->1211330
29493->311331
311331->411332
311331->411333
411333->511334
411333->511335
511335->611336
611336->711337
611336->711338
311331->411339
411339->511340
511340->611341
611341->711342
711342->811343
711342->811344
811344->911345
811344->911346
911346->1011347
511340->611348
611348->711349
711349->811350
711349->811351
611348->711352
711352->811353
811353->911354
911354->1011355
911354->1011356
911354->1011357
511340->611358
611358->711359
29493->311360
311360->411361
311360->411362
411362->511363
411362->511364
511364->611365
611365->711366
711366->811367
711366->811368
611365->711369
711369->811370
711369->811371
311360->411372
411372->511373
511373->611374
611374->711375
711375->811376
711375->811377
811377->911378
811377->911379
911379->1011380
511373->611381
611381->711382
711382->811383
711382->811384
611381->711385
711385->811386
811386->911387
911387->1011388
911387->1011389
911387->1011390
1011390->1111391
511373->611392
611392->711393
29493->311394
311394->411395
311394->411396
411396->511397
411396->511398
511398->611399
611399->711400
711400->811401
811401->911402
911402->1011403
1011403->1111404
811401->911405
711400->811406
811406->911407
811406->911408
711400->811409
811409->911410
811409->911411
711400->811412
811412->911413
811412->911414
611399->711415
711415->811416
711415->811417
311394->411418
411418->511419
511419->611420
611420->711421
711421->811422
711421->811423
511419->611424
611424->711425
711425->811426
811426->911427
911427->1011428
1011428->1111429
1011428->1111430
1011428->1111431
1111431->1211432
1111431->1211433
1211433->1311434
1211433->1311435
1211433->1311436
811426->911437
911437->1011438
1011438->1111439
1011438->1111440
1111440->1211441
1111440->1211442
611424->711443
711443->811444
811444->911445
911445->1011446
911445->1011447
811444->911448
911448->1011449
1011449->1111450
1111450->1211451
1211451->1311452
1311452->1411453
1311452->1411454
1211451->1311455
711443->811456
811456->911457
911457->1011458
911457->1011459
811456->911460
911460->1011461
1011461->1111462
1111462->1211463
1211463->1311464
1311464->1411465
1411465->1511466
1411465->1511467
1511467->1611468
1311464->1411469
1211463->1311470
29493->311471
311471->411472
311471->411473
311471->411474
411474->511475
411474->511476
511476->611477
611477->711478
711478->811479
811479->911480
911480->1011481
1011481->1111482
811479->911483
711478->811484
811484->911485
811484->911486
611477->711487
711487->811488
711487->811489
411474->511490
511490->611491
311471->411492
411492->511493
511493->611494
611494->711495
711495->811496
811496->911497
911497->1011498
911497->1011499
1011499->1111500
811496->911501
911501->1011502
911501->1011503
1011503->1111504
711495->811505
811505->911506
811505->911507
911507->1011508
611494->711509
711509->811510
811510->911511
911511->1011512
1011512->1111513
1011512->1111514
1111514->1211515
1111514->1211516
1211516->1311517
1211516->1311518
811510->911519
911519->1011520
1011520->1111521
911519->1011522
1011522->1111523
1111523->1211524
1211524->1311525
1311525->1411526
1411526->1511527
1411526->1511528
1311525->1411529
1411529->1511530
1411529->1511531
1511531->1611532
1511531->1611533
1111523->1211534
1211534->1311535
1311535->1411536
1311535->1411537
1311535->1411538
1411538->1511539
1111523->1211540
1211540->1311541
1311541->1411542
1311541->1411543
1411543->1511544
1211540->1311545
1311545->1411546
1411546->1511547
1511547->1611548
1511547->1611549
1511547->1611550
1211540->1311551
1311551->1411552
1411552->1511553
1511553->1611554
1611554->1711555
1711555->1811556
1711555->1811557
1611554->1711558
1711558->1811559
1711558->1811560
1811560->1911561
1911561->2011562
1911561->2011563
1811560->1911564
1911564->2011565
1911564->2011566
2011566->2111567
2011566->2111568
2111568->2211569
1411552->1511570
1511570->1611571
1611571->1711572
1611571->1711573
1711573->1811574
1711573->1811575
1511570->1611576
1611576->1711577
1611576->1711578
1711578->1811579
1511570->1611580
1611580->1711581
1511570->1611582
1611582->1711583
1711583->1811584
1811584->1911585
1911585->2011586
1911585->2011587
1811584->1911588
1811584->1911589
1911589->2011590
1911589->2011591
2011591->2111592
2011591->2111593
2111593->2211594
2111593->2211595
1411552->1511596
1511596->1611597
1611597->1711598
1611597->1711599
1611597->1711600
911519->1011601
1011601->1111602
1111602->1211603
1211603->1311604
1211603->1311605
1211603->1311606
1311606->1411607
1311606->1411608
1411608->1511609
1411608->1511610
511493->611611
611611->711612
29493->311613
311613->411614
311613->411615
311613->411616
411616->511617
411616->511618
511618->611619
611619->711620
711620->811621
811621->911622
911622->1011623
711620->811624
611619->711625
711625->811626
711625->811627
411616->511628
511628->611629
311613->411630
411630->511631
511631->611632
611632->711633
611632->711634
611632->711635
611632->711636
711636->811637
811637->911638
911638->1011639
1011639->1111640
1011639->1111641
1111641->1211642
1111641->1211643
1211643->1311644
1211643->1311645
1311645->1411646
1311645->1411647
811637->911648
911648->1011649
1011649->1111650
1011649->1111651
911648->1011652
1011652->1111653
1111653->1211654
511631->611655
611655->711656
711656->811657
811657->911658
811657->911659
911659->1011660
911659->1011661
1011661->1111662
911659->1011663
29493->311664
311664->411665
311664->411666
311664->411667
411667->511668
411667->511669
511669->611670
611670->711671
611670->711672
311664->411673
411673->511674
511674->611675
611675->711676
611675->711677
511674->611678
611678->711679
711679->811680
811680->911681
911681->1011682
911681->1011683
1011683->1111684
1011683->1111685
1111685->1211686
1111685->1211687
711679->811688
811688->911689
911689->1011690
1011690->1111691
1011690->1111692
1111692->1211693
811688->911694
911694->1011695
1011695->1111696
1111696->1211697
1111696->1211698
29493->311699
311699->411700
311699->411701
311699->411702
411702->511703
511703->611704
511703->611705
611705->711706
611705->711707
711707->811708
811708->911709
911709->1011710
1011710->1111711
1111711->1211712
911709->1011713
811708->911714
911714->1011715
911714->1011716
511703->611717
29493->311718
311718->411719
311718->411720
311718->411721
411721->511722
411721->511723
511723->611724
611724->711725
711725->811726
711725->811727
811727->911728
911728->1011729
711725->811730
611724->711731
711731->811732
711731->811733
711731->811734
311718->411735
411735->511736
511736->611737
611737->711738
711738->811739
811739->911740
811739->911741
911741->1011742
911741->1011743
1011743->1111744
1111744->1211745
1211745->1311746
1311746->1411747
1411747->1511748
1211745->1311749
1111744->1211750
1211750->1311751
1211750->1311752
811739->911753
911753->1011754
1011754->1111755
1111755->1211756
1211756->1311757
1211756->1311758
1311758->1411759
1311758->1411760
1011754->1111761
1111761->1211762
1211762->1311763
1211762->1311764
1111761->1211765
1211765->1311766
1311766->1411767
1411767->1511768
1511768->1611769
1611769->1711770
1711770->1811771
1711770->1811772
1811772->1911773
1811772->1911774
1911774->2011775
1911774->2011776
2011776->2111777
2011776->2111778
2111778->2211779
1511768->1611780
1611780->1711781
1711781->1811782
1711781->1811783
1811783->1911784
1811783->1911785
1311766->1411786
1411786->1511787
1511787->1611788
1611788->1711789
1611788->1711790
1511787->1611791
1411786->1511792
1511792->1611793
1611793->1711794
1611793->1711795
1511792->1611796
1611796->1711797
1711797->1811798
1811798->1911799
1911799->2011800
1911799->2011801
2011801->2111802
2011801->2111803
2111803->2211804
2011801->2111805
2011801->2111806
1011754->1111807
1111807->1211808
29493->311809
311809->411810
311809->411811
311809->411812
311809->411813
311809->411814
411814->511815
411814->511816
511816->611817
611817->711818
711818->811819
711818->811820
811820->911821
811820->911822
911822->1011823
1011823->1111824
1111824->1211825
1211825->1311826
1311826->1411827
1111824->1211828
1011823->1111829
1111829->1211830
1111829->1211831
711818->811832
811832->911833
911833->1011834
1011834->1111835
1111835->1211836
1111835->1211837
1211837->1311838
1211837->1311839
911833->1011840
1011840->1111841
1111841->1211842
1211842->1311843
1311843->1411844
1411844->1511845
1511845->1611846
1611846->1711847
1411844->1511848
1511848->1611849
1511848->1611850
1611850->1711851
1611850->1711852
1711852->1811853
1211842->1311854
1311854->1411855
1411855->1511856
1411855->1511857
1411855->1511858
1511858->1611859
1511858->1611860
1011840->1111861
1111861->1211862
1211862->1311863
1311863->1411864
1311863->1411865
1211862->1311866
1111861->1211867
1211867->1311868
1311868->1411869
1311868->1411870
1211867->1311871
1311871->1411872
1411872->1511873
1511873->1611874
1611874->1711875
1711875->1811876
1811876->1911877
1911877->2011878
1911877->2011879
1811876->1911880
1711875->1811881
1811881->1911882
1611874->1711883
911833->1011884
1011884->1111885
29493->311886
311886->411887
311886->411888
311886->411889
311886->411890
311886->411891
411891->511892
411891->511893
511893->611894
611894->711895
711895->811896
811896->911897
811896->911898
911898->1011899
1011899->1111900
1011899->1111901
711895->811902
711895->811903
811903->911904
811903->911905
911905->1011906
1011906->1111907
1111907->1211908
1111907->1211909
1011906->1111910
1111910->1211911
1111910->1211912
711895->811913
811913->911914
911914->1011915
1011915->1111916
1111916->1211917
1211917->1311918
1111916->1211919
1211919->1311920
1011915->1111921
1111921->1211922
1211922->1311923
1311923->1411924
1311923->1411925
1411925->1511926
1411925->1511927
911914->1011928
1011928->1111929
29493->311930
311930->411931
311930->411932
311930->411933
311930->411934
411934->511935
511935->611936
311930->411937
411937->511938
411937->511939
511939->611940
511939->611941
611941->711942
711942->811943
611941->711944
711944->811945
29493->311946
311946->411947
311946->411948
311946->411949
411949->511950
511950->611951
311946->411952
411952->511953
411952->511954
511954->611955
611955->711956
511954->611957
29493->311958
311958->411959
311958->411960
311958->411961
411961->511962
411961->511963
511963->611964
611964->711965
611964->711966
311958->411967
411967->511968
511968->611969
611969->711970
611969->711971
29493->311972
311972->411973
311972->411974
311972->411975
411975->511976
411975->511977
311972->411978
411978->511979
511979->611980
611980->711981
711981->811982
511979->611983
611983->711984
711984->811985
711984->811986
}

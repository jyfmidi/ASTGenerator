
>nextValue()

>nextValue()

>setValue(V[]value)

>enableProbability(booleanenable)

>classify(Stringtext)
predict
CollectionUtility.max

>classify(Documentdocument)
predict
CollectionUtility.max

>train(StringfolderPath,StringcharsetName)
dataSet.load
train

>train(Map<String,String[]>trainingDataSet)
logger.start
trainingDataSet.size
trainingDataSet.entrySet
entry.getKey
logger.out
entry.getValue
dataSet.add
logger.out
MathUtility.percentage
logger.finish
train

>train(StringfolderPath)
train

>predict(Documentdocument)
getModel
categorize
scoreMap.put

>label(Documentdocument)
getModel
categorize

>nextWords(intn,Stringmsg)
nextWord

>nextWord()
scanner.next
word.length
word.equals

>getTargetVector()

>execute()
vectorsReader.readVectorFile
vectorsReader.getNumWords
vectorsReader.getSize
getTargetVector
vectorsReader.getMatrixElement
vectorsReader.getWord
scanner.close

>setTokenizer(ITokenizertokenizer)

>convert(Stringcategory,Stringtext)
tokenizer.segment

>getTokenizer()

>getCatalog()

>getLexicon()

>load(StringfolderPath,StringcharsetName)
load

>load(StringfolderPath)
load

>isTestingDataSet()

>load(StringfolderPath,StringcharsetName,doublepercentage)
root.exists
String.format
root.getAbsolutePath
root.isDirectory
String.format
root.getAbsolutePath
root.listFiles
logger.start
folder.isFile
folder.listFiles
folder.getName
logger.out
Math.ceil
add
folder.getName
TextProcessUtility.readTxt
logger.out
MathUtility.percentage
logger.out
logger.finish
getCatalog
.size
size

>load(StringfolderPath,doublerate)

>add(Map<String,String[]>testingDataSet)
testingDataSet.entrySet
entry.getValue
add
entry.getKey
HanLP.newSegment
.enablePartOfSpeechTagging

>parse(Stringsentence)
parse
segment.seg
sentence.toCharArray
deprelTranslater.get

>getSegment()

>setSegment(Segmentsegment)

>getDeprelTranslator()

>setDeprelTranslator(Map<String,String>deprelTranslator)

>setDeprelTranslater(StringdeprelTranslatorPath)
GlobalObjectPool.get
iterator.hasNext
iterator.next
.split
deprelTranslater.put
deprelTranslater.size
GlobalObjectPool.put

>enableDeprelTranslator(booleanenable)

>compareTo(AbstractInexactActiono)
.compareTo

>equals(Objectobj)

>name()

>rel()

>localUsage()

>paramDesc(Stringparam,Stringdesc)

>usage()
paramDesc
paramDesc
paramDesc
paramDesc
paramDesc
paramDesc
paramDesc
paramDesc
paramDesc
paramDesc
paramDesc
localUsage

>argPos(Stringparam,String[]args)
argPos

>argPos(Stringparam,String[]args,booleancheckArgNum)
param.equals
String.format

>setConfig(String[]args,Configconfig)
argPos
config.setLayer1Size
Integer.parseInt
argPos
config.setOutputFile
argPos
config.setUseContinuousBagOfWords
Integer.parseInt
config.useContinuousBagOfWords
config.setAlpha
argPos
config.setAlpha
Float.parseFloat
argPos
config.setWindow
Integer.parseInt
argPos
config.setSample
Float.parseFloat
argPos
config.setUseHierarchicalSoftmax
Integer.parseInt
argPos
config.setNegative
Integer.parseInt
argPos
config.setNumThreads
Integer.parseInt
argPos
config.setIter
Integer.parseInt
argPos
config.setMinCount
Integer.parseInt

>vector(Kkey)
storage.get

>similarity(Kwhat,Kwith)
storage.get
storage.get
vectorWhat.cosineForUnitVector

>nearest(Kkey,intsize)
storage.get
Collections.emptyList
nearest

>nearest(Kkey,Vectorvector,intsize)

>compare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2)
o1.getValue
.compareTo
o2.getValue
storage.entrySet
entry.getKey
.equals
maxHeap.add
entry.getKey
entry.getValue
.cosineForUnitVector
maxHeap.toList

>nearest(Vectorvector,intsize)

>compare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2)
o1.getValue
.compareTo
o2.getValue
storage.entrySet
maxHeap.add
entry.getKey
entry.getValue
.cosineForUnitVector
maxHeap.toList

>nearest(Vectorvector)
nearest

>nearest(Kkey)
nearest

>queryNearest(Stringquery,intsize)
query.length
Collections.emptyList
nearest
query
Collections.emptyList

>query(Stringquery)

>size()
storage.size

>dimension()
storage.isEmpty
storage.values
.iterator
.next
.size

>remove(Kkey)
storage.remove

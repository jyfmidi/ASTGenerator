digraph G {
00[label="compilationUnit\n Bud1%@@@@E%DSDB@@@ "]
01[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.bintrie;publicclass_EmptyValueArray<V>extends_ValueArray<V>{public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}}<EOF> "]
12[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.bintrie; "]
23[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie "]
34[label="packageName\n com.hankcs.hanlp.collection.trie "]
45[label="packageName\n com.hankcs.hanlp.collection "]
56[label="packageName\n com.hankcs.hanlp "]
67[label="packageName\n com.hankcs "]
78[label="packageName\n com "]
19[label="normalClassDeclaration\n publicclass_EmptyValueArray<V>extends_ValueArray<V>{public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}} "]
210[label="classModifier\n public "]
211[label="typeParameters\n <V> "]
312[label="typeParameter\n V "]
213[label="superclass\n extends_ValueArray<V> "]
314[label="classType\n _ValueArray<V> "]
415[label="typeArguments\n <V> "]
516[label="classType_lfno_classOrInterfaceType\n V "]
217[label="classBody\n {public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}} "]
318[label="constructorDeclaration\n public_EmptyValueArray(){} "]
419[label="constructorModifier\n public "]
420[label="constructorDeclarator\n _EmptyValueArray() "]
521[label="simpleTypeName\n _EmptyValueArray "]
422[label="constructorBody\n {} "]
323[label="methodDeclaration\n @OverridepublicVnextValue(){returnnull;} "]
424[label="markerAnnotation\n @Override "]
525[label="typeName\n Override "]
426[label="methodModifier\n public "]
427[label="methodHeader\n VnextValue() "]
528[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
529[label="methodDeclarator\n nextValue() "]
430[label="block\n {returnnull;} "]
531[label="returnStatement\n returnnull; "]
632[label="literal\n null "]
033[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.bintrie;publicclass_ValueArray<V>{V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}}<EOF> "]
134[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.bintrie; "]
235[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie "]
336[label="packageName\n com.hankcs.hanlp.collection.trie "]
437[label="packageName\n com.hankcs.hanlp.collection "]
538[label="packageName\n com.hankcs.hanlp "]
639[label="packageName\n com.hankcs "]
740[label="packageName\n com "]
141[label="normalClassDeclaration\n publicclass_ValueArray<V>{V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}} "]
242[label="classModifier\n public "]
243[label="typeParameters\n <V> "]
344[label="typeParameter\n V "]
245[label="classBody\n {V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}} "]
346[label="fieldDeclaration\n V[]value; "]
447[label="unannArrayType\n V[] "]
548[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
549[label="dims\n [] "]
450[label="variableDeclaratorId\n value "]
351[label="fieldDeclaration\n intoffset; "]
452[label="integralType\n int "]
453[label="variableDeclaratorId\n offset "]
354[label="constructorDeclaration\n public_ValueArray(V[]value){this.value=value;} "]
455[label="constructorModifier\n public "]
456[label="constructorDeclarator\n _ValueArray(V[]value) "]
557[label="simpleTypeName\n _ValueArray "]
558[label="formalParameter\n V[]value "]
659[label="unannArrayType\n V[] "]
760[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
761[label="dims\n [] "]
662[label="variableDeclaratorId\n value "]
463[label="constructorBody\n {this.value=value;} "]
564[label="expressionStatement\n this.value=value; "]
665[label="assignment\n this.value=value "]
766[label="fieldAccess\n this.value "]
867[label="primaryNoNewArray_lfno_primary\n this "]
768[label="assignmentOperator\n = "]
769[label="expressionName\n value "]
370[label="methodDeclaration\n publicVnextValue(){returnvalue[offset++];} "]
471[label="methodModifier\n public "]
472[label="methodHeader\n VnextValue() "]
573[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
574[label="methodDeclarator\n nextValue() "]
475[label="block\n {returnvalue[offset++];} "]
576[label="returnStatement\n returnvalue[offset++]; "]
677[label="arrayAccess_lfno_primary\n value[offset++] "]
778[label="expressionName\n value "]
779[label="postfixExpression\n offset++ "]
880[label="expressionName\n offset "]
881[label="postIncrementExpression_lf_postfixExpression\n ++ "]
382[label="constructorDeclaration\n protected_ValueArray(){} "]
483[label="constructorModifier\n protected "]
484[label="constructorDeclarator\n _ValueArray() "]
585[label="simpleTypeName\n _ValueArray "]
486[label="constructorBody\n {} "]
387[label="methodDeclaration\n public_ValueArraysetValue(V[]value){this.value=value;returnthis;} "]
488[label="methodModifier\n public "]
489[label="methodHeader\n _ValueArraysetValue(V[]value) "]
590[label="unannClassType_lfno_unannClassOrInterfaceType\n _ValueArray "]
591[label="methodDeclarator\n setValue(V[]value) "]
692[label="formalParameter\n V[]value "]
793[label="unannArrayType\n V[] "]
894[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
895[label="dims\n [] "]
796[label="variableDeclaratorId\n value "]
497[label="block\n {this.value=value;returnthis;} "]
598[label="blockStatements\n this.value=value;returnthis; "]
699[label="expressionStatement\n this.value=value; "]
7100[label="assignment\n this.value=value "]
8101[label="fieldAccess\n this.value "]
9102[label="primaryNoNewArray_lfno_primary\n this "]
8103[label="assignmentOperator\n = "]
8104[label="expressionName\n value "]
6105[label="returnStatement\n returnthis; "]
7106[label="primaryNoNewArray_lfno_primary\n this "]
0107[label="compilationUnit\n packagecom.hankcs.hanlp.classification.classifiers;importcom.hankcs.hanlp.classification.corpus.Document;importcom.hankcs.hanlp.classification.corpus.IDataSet;importcom.hankcs.hanlp.classification.corpus.MemoryDataSet;importcom.hankcs.hanlp.classification.models.AbstractModel;importcom.hankcs.hanlp.classification.utilities.CollectionUtility;importcom.hankcs.hanlp.classification.utilities.MathUtility;importjava.io.IOException;importjava.util.Map;importjava.util.TreeMap;importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger;publicabstractclassAbstractClassifierimplementsIClassifier{@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}}<EOF> "]
1108[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.classifiers; "]
2109[label="packageName\n com.hankcs.hanlp.classification.classifiers "]
3110[label="packageName\n com.hankcs.hanlp.classification "]
4111[label="packageName\n com.hankcs.hanlp "]
5112[label="packageName\n com.hankcs "]
6113[label="packageName\n com "]
1114[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.Document; "]
2115[label="typeName\n com.hankcs.hanlp.classification.corpus.Document "]
3116[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4117[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5118[label="packageOrTypeName\n com.hankcs.hanlp "]
6119[label="packageOrTypeName\n com.hankcs "]
7120[label="packageOrTypeName\n com "]
1121[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.IDataSet; "]
2122[label="typeName\n com.hankcs.hanlp.classification.corpus.IDataSet "]
3123[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4124[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5125[label="packageOrTypeName\n com.hankcs.hanlp "]
6126[label="packageOrTypeName\n com.hankcs "]
7127[label="packageOrTypeName\n com "]
1128[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.MemoryDataSet; "]
2129[label="typeName\n com.hankcs.hanlp.classification.corpus.MemoryDataSet "]
3130[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4131[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5132[label="packageOrTypeName\n com.hankcs.hanlp "]
6133[label="packageOrTypeName\n com.hankcs "]
7134[label="packageOrTypeName\n com "]
1135[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.models.AbstractModel; "]
2136[label="typeName\n com.hankcs.hanlp.classification.models.AbstractModel "]
3137[label="packageOrTypeName\n com.hankcs.hanlp.classification.models "]
4138[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5139[label="packageOrTypeName\n com.hankcs.hanlp "]
6140[label="packageOrTypeName\n com.hankcs "]
7141[label="packageOrTypeName\n com "]
1142[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.CollectionUtility; "]
2143[label="typeName\n com.hankcs.hanlp.classification.utilities.CollectionUtility "]
3144[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4145[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5146[label="packageOrTypeName\n com.hankcs.hanlp "]
6147[label="packageOrTypeName\n com.hankcs "]
7148[label="packageOrTypeName\n com "]
1149[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.MathUtility; "]
2150[label="typeName\n com.hankcs.hanlp.classification.utilities.MathUtility "]
3151[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4152[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5153[label="packageOrTypeName\n com.hankcs.hanlp "]
6154[label="packageOrTypeName\n com.hankcs "]
7155[label="packageOrTypeName\n com "]
1156[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
2157[label="typeName\n java.io.IOException "]
3158[label="packageOrTypeName\n java.io "]
4159[label="packageOrTypeName\n java "]
1160[label="singleTypeImportDeclaration\n importjava.util.Map; "]
2161[label="typeName\n java.util.Map "]
3162[label="packageOrTypeName\n java.util "]
4163[label="packageOrTypeName\n java "]
1164[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
2165[label="typeName\n java.util.TreeMap "]
3166[label="packageOrTypeName\n java.util "]
4167[label="packageOrTypeName\n java "]
1168[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger; "]
2169[label="typeName\n com.hankcs.hanlp.classification.utilities.Predefine "]
3170[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4171[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5172[label="packageOrTypeName\n com.hankcs.hanlp "]
6173[label="packageOrTypeName\n com.hankcs "]
7174[label="packageOrTypeName\n com "]
1175[label="normalClassDeclaration\n publicabstractclassAbstractClassifierimplementsIClassifier{@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}} "]
2176[label="classModifier\n public "]
2177[label="classModifier\n abstract "]
2178[label="superinterfaces\n implementsIClassifier "]
3179[label="classType\n IClassifier "]
2180[label="classBody\n {@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}} "]
3181[label="methodDeclaration\n @OverridepublicIClassifierenableProbability(booleanenable){returnthis;} "]
4182[label="markerAnnotation\n @Override "]
5183[label="typeName\n Override "]
4184[label="methodModifier\n public "]
4185[label="methodHeader\n IClassifierenableProbability(booleanenable) "]
5186[label="unannClassType_lfno_unannClassOrInterfaceType\n IClassifier "]
5187[label="methodDeclarator\n enableProbability(booleanenable) "]
6188[label="formalParameter\n booleanenable "]
7189[label="unannPrimitiveType\n boolean "]
7190[label="variableDeclaratorId\n enable "]
4191[label="block\n {returnthis;} "]
5192[label="returnStatement\n returnthis; "]
6193[label="primaryNoNewArray_lfno_primary\n this "]
3194[label="fieldDeclaration\n booleanconfigProbabilityEnabled=true; "]
4195[label="unannPrimitiveType\n boolean "]
4196[label="variableDeclarator\n configProbabilityEnabled=true "]
5197[label="variableDeclaratorId\n configProbabilityEnabled "]
5198[label="literal\n true "]
3199[label="methodDeclaration\n @OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);} "]
4200[label="markerAnnotation\n @Override "]
5201[label="typeName\n Override "]
4202[label="methodModifier\n public "]
4203[label="methodHeader\n Stringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException "]
5204[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
5205[label="methodDeclarator\n classify(Stringtext) "]
6206[label="formalParameter\n Stringtext "]
7207[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
7208[label="variableDeclaratorId\n text "]
5209[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6210[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7211[label="classType\n IllegalArgumentException "]
7212[label="classType\n IllegalStateException "]
4213[label="block\n {Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);} "]
5214[label="blockStatements\n Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap); "]
6215[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=predict(text); "]
7216[label="localVariableDeclaration\n Map<String,Double>scoreMap=predict(text) "]
8217[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9218[label="typeArguments\n <String,Double> "]
10219[label="typeArgumentList\n String,Double "]
11220[label="classType_lfno_classOrInterfaceType\n String "]
11221[label="classType_lfno_classOrInterfaceType\n Double "]
8222[label="variableDeclarator\n scoreMap=predict(text) "]
9223[label="variableDeclaratorId\n scoreMap "]
9224[label="methodInvocation_lfno_primary\n predict(text) "]
10225[label="methodName\n predict "]
10226[label="expressionName\n text "]
6227[label="returnStatement\n returnCollectionUtility.max(scoreMap); "]
7228[label="methodInvocation_lfno_primary\n CollectionUtility.max(scoreMap) "]
8229[label="typeName\n CollectionUtility "]
8230[label="expressionName\n scoreMap "]
3231[label="methodDeclaration\n @OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);} "]
4232[label="markerAnnotation\n @Override "]
5233[label="typeName\n Override "]
4234[label="methodModifier\n public "]
4235[label="methodHeader\n Stringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException "]
5236[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
5237[label="methodDeclarator\n classify(Documentdocument) "]
6238[label="formalParameter\n Documentdocument "]
7239[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7240[label="variableDeclaratorId\n document "]
5241[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6242[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7243[label="classType\n IllegalArgumentException "]
7244[label="classType\n IllegalStateException "]
4245[label="block\n {Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);} "]
5246[label="blockStatements\n Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap); "]
6247[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=predict(document); "]
7248[label="localVariableDeclaration\n Map<String,Double>scoreMap=predict(document) "]
8249[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9250[label="typeArguments\n <String,Double> "]
10251[label="typeArgumentList\n String,Double "]
11252[label="classType_lfno_classOrInterfaceType\n String "]
11253[label="classType_lfno_classOrInterfaceType\n Double "]
8254[label="variableDeclarator\n scoreMap=predict(document) "]
9255[label="variableDeclaratorId\n scoreMap "]
9256[label="methodInvocation_lfno_primary\n predict(document) "]
10257[label="methodName\n predict "]
10258[label="expressionName\n document "]
6259[label="returnStatement\n returnCollectionUtility.max(scoreMap); "]
7260[label="methodInvocation_lfno_primary\n CollectionUtility.max(scoreMap) "]
8261[label="typeName\n CollectionUtility "]
8262[label="expressionName\n scoreMap "]
3263[label="methodDeclaration\n @Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);} "]
4264[label="markerAnnotation\n @Override "]
5265[label="typeName\n Override "]
4266[label="methodModifier\n public "]
4267[label="methodHeader\n voidtrain(StringfolderPath,StringcharsetName)throwsIOException "]
5268[label="result\n void "]
5269[label="methodDeclarator\n train(StringfolderPath,StringcharsetName) "]
6270[label="formalParameterList\n StringfolderPath,StringcharsetName "]
7271[label="formalParameter\n StringfolderPath "]
8272[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8273[label="variableDeclaratorId\n folderPath "]
7274[label="formalParameter\n StringcharsetName "]
8275[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8276[label="variableDeclaratorId\n charsetName "]
5277[label="throws_\n throwsIOException "]
6278[label="classType\n IOException "]
4279[label="block\n {IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);} "]
5280[label="blockStatements\n IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet); "]
6281[label="localVariableDeclarationStatement\n IDataSetdataSet=newMemoryDataSet(); "]
7282[label="localVariableDeclaration\n IDataSetdataSet=newMemoryDataSet() "]
8283[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
8284[label="variableDeclarator\n dataSet=newMemoryDataSet() "]
9285[label="variableDeclaratorId\n dataSet "]
9286[label="classInstanceCreationExpression_lfno_primary\n newMemoryDataSet() "]
6287[label="expressionStatement\n dataSet.load(folderPath,charsetName); "]
7288[label="methodInvocation\n dataSet.load(folderPath,charsetName) "]
8289[label="typeName\n dataSet "]
8290[label="argumentList\n folderPath,charsetName "]
9291[label="expressionName\n folderPath "]
9292[label="expressionName\n charsetName "]
6293[label="expressionStatement\n train(dataSet); "]
7294[label="methodInvocation\n train(dataSet) "]
8295[label="methodName\n train "]
8296[label="expressionName\n dataSet "]
3297[label="methodDeclaration\n @Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);} "]
4298[label="markerAnnotation\n @Override "]
5299[label="typeName\n Override "]
4300[label="methodModifier\n public "]
4301[label="methodHeader\n voidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException "]
5302[label="result\n void "]
5303[label="methodDeclarator\n train(Map<String,String[]>trainingDataSet) "]
6304[label="formalParameter\n Map<String,String[]>trainingDataSet "]
7305[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String[]> "]
8306[label="typeArguments\n <String,String[]> "]
9307[label="typeArgumentList\n String,String[] "]
10308[label="classType_lfno_classOrInterfaceType\n String "]
10309[label="arrayType\n String[] "]
11310[label="classType_lfno_classOrInterfaceType\n String "]
11311[label="dims\n [] "]
7312[label="variableDeclaratorId\n trainingDataSet "]
5313[label="throws_\n throwsIllegalArgumentException "]
6314[label="classType\n IllegalArgumentException "]
4315[label="block\n {IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);} "]
5316[label="blockStatements\n IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet); "]
6317[label="localVariableDeclarationStatement\n IDataSetdataSet=newMemoryDataSet(); "]
7318[label="localVariableDeclaration\n IDataSetdataSet=newMemoryDataSet() "]
8319[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
8320[label="variableDeclarator\n dataSet=newMemoryDataSet() "]
9321[label="variableDeclaratorId\n dataSet "]
9322[label="classInstanceCreationExpression_lfno_primary\n newMemoryDataSet() "]
6323[label="expressionStatement\n logger.start(\"正在构造训练数据集...\"); "]
7324[label="methodInvocation\n logger.start(\"正在构造训练数据集...\") "]
8325[label="typeName\n logger "]
8326[label="literal\n \"正在构造训练数据集...\" "]
6327[label="localVariableDeclarationStatement\n inttotal=trainingDataSet.size(); "]
7328[label="localVariableDeclaration\n inttotal=trainingDataSet.size() "]
8329[label="integralType\n int "]
8330[label="variableDeclarator\n total=trainingDataSet.size() "]
9331[label="variableDeclaratorId\n total "]
9332[label="methodInvocation_lfno_primary\n trainingDataSet.size() "]
10333[label="typeName\n trainingDataSet "]
6334[label="localVariableDeclarationStatement\n intcur=0; "]
7335[label="localVariableDeclaration\n intcur=0 "]
8336[label="integralType\n int "]
8337[label="variableDeclarator\n cur=0 "]
9338[label="variableDeclaratorId\n cur "]
9339[label="literal\n 0 "]
6340[label="enhancedForStatement\n for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));} "]
7341[label="unannClassOrInterfaceType\n Map.Entry<String,String[]> "]
8342[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
8343[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String[]> "]
9344[label="typeArguments\n <String,String[]> "]
10345[label="typeArgumentList\n String,String[] "]
11346[label="classType_lfno_classOrInterfaceType\n String "]
11347[label="arrayType\n String[] "]
12348[label="classType_lfno_classOrInterfaceType\n String "]
12349[label="dims\n [] "]
7350[label="variableDeclaratorId\n entry "]
7351[label="methodInvocation_lfno_primary\n trainingDataSet.entrySet() "]
8352[label="typeName\n trainingDataSet "]
7353[label="block\n {Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));} "]
8354[label="blockStatements\n Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)); "]
9355[label="localVariableDeclarationStatement\n Stringcategory=entry.getKey(); "]
10356[label="localVariableDeclaration\n Stringcategory=entry.getKey() "]
11357[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
11358[label="variableDeclarator\n category=entry.getKey() "]
12359[label="variableDeclaratorId\n category "]
12360[label="methodInvocation_lfno_primary\n entry.getKey() "]
13361[label="typeName\n entry "]
9362[label="expressionStatement\n logger.out(\"[%s]...\",category); "]
10363[label="methodInvocation\n logger.out(\"[%s]...\",category) "]
11364[label="typeName\n logger "]
11365[label="argumentList\n \"[%s]...\",category "]
12366[label="literal\n \"[%s]...\" "]
12367[label="expressionName\n category "]
9368[label="enhancedForStatement\n for(Stringdoc:entry.getValue()){dataSet.add(category,doc);} "]
10369[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
10370[label="variableDeclaratorId\n doc "]
10371[label="methodInvocation_lfno_primary\n entry.getValue() "]
11372[label="typeName\n entry "]
10373[label="block\n {dataSet.add(category,doc);} "]
11374[label="expressionStatement\n dataSet.add(category,doc); "]
12375[label="methodInvocation\n dataSet.add(category,doc) "]
13376[label="typeName\n dataSet "]
13377[label="argumentList\n category,doc "]
14378[label="expressionName\n category "]
14379[label="expressionName\n doc "]
9380[label="expressionStatement\n ++cur; "]
10381[label="preIncrementExpression\n ++cur "]
11382[label="expressionName\n cur "]
9383[label="expressionStatement\n logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)); "]
10384[label="methodInvocation\n logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)) "]
11385[label="typeName\n logger "]
11386[label="argumentList\n \"%.2f%%...\",MathUtility.percentage(cur,total) "]
12387[label="literal\n \"%.2f%%...\" "]
12388[label="methodInvocation_lfno_primary\n MathUtility.percentage(cur,total) "]
13389[label="typeName\n MathUtility "]
13390[label="argumentList\n cur,total "]
14391[label="expressionName\n cur "]
14392[label="expressionName\n total "]
6393[label="expressionStatement\n logger.finish(\" 加载完毕\n\"); "]
7394[label="methodInvocation\n logger.finish(\" 加载完毕\n\") "]
8395[label="typeName\n logger "]
8396[label="literal\n \" 加载完毕\n\" "]
6397[label="expressionStatement\n train(dataSet); "]
7398[label="methodInvocation\n train(dataSet) "]
8399[label="methodName\n train "]
8400[label="expressionName\n dataSet "]
3401[label="methodDeclaration\n @Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");} "]
4402[label="markerAnnotation\n @Override "]
5403[label="typeName\n Override "]
4404[label="methodModifier\n public "]
4405[label="methodHeader\n voidtrain(StringfolderPath)throwsIOException "]
5406[label="result\n void "]
5407[label="methodDeclarator\n train(StringfolderPath) "]
6408[label="formalParameter\n StringfolderPath "]
7409[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
7410[label="variableDeclaratorId\n folderPath "]
5411[label="throws_\n throwsIOException "]
6412[label="classType\n IOException "]
4413[label="block\n {train(folderPath,\"UTF-8\");} "]
5414[label="expressionStatement\n train(folderPath,\"UTF-8\"); "]
6415[label="methodInvocation\n train(folderPath,\"UTF-8\") "]
7416[label="methodName\n train "]
7417[label="argumentList\n folderPath,\"UTF-8\" "]
8418[label="expressionName\n folderPath "]
8419[label="literal\n \"UTF-8\" "]
3420[label="methodDeclaration\n @OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;} "]
4421[label="markerAnnotation\n @Override "]
5422[label="typeName\n Override "]
4423[label="methodModifier\n public "]
4424[label="methodHeader\n Map<String,Double>predict(Documentdocument) "]
5425[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
6426[label="typeArguments\n <String,Double> "]
7427[label="typeArgumentList\n String,Double "]
8428[label="classType_lfno_classOrInterfaceType\n String "]
8429[label="classType_lfno_classOrInterfaceType\n Double "]
5430[label="methodDeclarator\n predict(Documentdocument) "]
6431[label="formalParameter\n Documentdocument "]
7432[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7433[label="variableDeclaratorId\n document "]
4434[label="block\n {AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;} "]
5435[label="blockStatements\n AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap; "]
6436[label="localVariableDeclarationStatement\n AbstractModelmodel=getModel(); "]
7437[label="localVariableDeclaration\n AbstractModelmodel=getModel() "]
8438[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractModel "]
8439[label="variableDeclarator\n model=getModel() "]
9440[label="variableDeclaratorId\n model "]
9441[label="methodInvocation_lfno_primary\n getModel() "]
10442[label="methodName\n getModel "]
6443[label="ifThenStatement\n if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
7444[label="equalityExpression\n model==null "]
8445[label="expressionName\n model "]
8446[label="literal\n null "]
7447[label="block\n {thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
8448[label="throwStatement\n thrownewIllegalStateException(\"未训练模型！无法执行预测！\"); "]
9449[label="classInstanceCreationExpression_lfno_primary\n newIllegalStateException(\"未训练模型！无法执行预测！\") "]
10450[label="literal\n \"未训练模型！无法执行预测！\" "]
6451[label="ifThenStatement\n if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");} "]
7452[label="equalityExpression\n document==null "]
8453[label="expressionName\n document "]
8454[label="literal\n null "]
7455[label="block\n {thrownewIllegalArgumentException(\"参数 text == null\");} "]
8456[label="throwStatement\n thrownewIllegalArgumentException(\"参数 text == null\"); "]
9457[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"参数 text == null\") "]
10458[label="literal\n \"参数 text == null\" "]
6459[label="localVariableDeclarationStatement\n double[]probs=categorize(document); "]
7460[label="localVariableDeclaration\n double[]probs=categorize(document) "]
8461[label="unannArrayType\n double[] "]
9462[label="floatingPointType\n double "]
9463[label="dims\n [] "]
8464[label="variableDeclarator\n probs=categorize(document) "]
9465[label="variableDeclaratorId\n probs "]
9466[label="methodInvocation_lfno_primary\n categorize(document) "]
10467[label="methodName\n categorize "]
10468[label="expressionName\n document "]
6469[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=newTreeMap<String,Double>(); "]
7470[label="localVariableDeclaration\n Map<String,Double>scoreMap=newTreeMap<String,Double>() "]
8471[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9472[label="typeArguments\n <String,Double> "]
10473[label="typeArgumentList\n String,Double "]
11474[label="classType_lfno_classOrInterfaceType\n String "]
11475[label="classType_lfno_classOrInterfaceType\n Double "]
8476[label="variableDeclarator\n scoreMap=newTreeMap<String,Double>() "]
9477[label="variableDeclaratorId\n scoreMap "]
9478[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,Double>() "]
10479[label="typeArguments\n <String,Double> "]
11480[label="typeArgumentList\n String,Double "]
12481[label="classType_lfno_classOrInterfaceType\n String "]
12482[label="classType_lfno_classOrInterfaceType\n Double "]
6483[label="basicForStatement\n for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);} "]
7484[label="localVariableDeclaration\n inti=0 "]
8485[label="integralType\n int "]
8486[label="variableDeclarator\n i=0 "]
9487[label="variableDeclaratorId\n i "]
9488[label="literal\n 0 "]
7489[label="relationalExpression\n i<probs.length "]
8490[label="expressionName\n i "]
8491[label="expressionName\n probs.length "]
9492[label="ambiguousName\n probs "]
7493[label="postIncrementExpression\n i++ "]
8494[label="expressionName\n i "]
7495[label="block\n {scoreMap.put(model.catalog[i],probs[i]);} "]
8496[label="expressionStatement\n scoreMap.put(model.catalog[i],probs[i]); "]
9497[label="methodInvocation\n scoreMap.put(model.catalog[i],probs[i]) "]
10498[label="typeName\n scoreMap "]
10499[label="argumentList\n model.catalog[i],probs[i] "]
11500[label="arrayAccess_lfno_primary\n model.catalog[i] "]
12501[label="expressionName\n model.catalog "]
13502[label="ambiguousName\n model "]
12503[label="expressionName\n i "]
11504[label="arrayAccess_lfno_primary\n probs[i] "]
12505[label="expressionName\n probs "]
12506[label="expressionName\n i "]
6507[label="returnStatement\n returnscoreMap; "]
7508[label="expressionName\n scoreMap "]
3509[label="methodDeclaration\n @Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;} "]
4510[label="markerAnnotation\n @Override "]
5511[label="typeName\n Override "]
4512[label="methodModifier\n public "]
4513[label="methodHeader\n intlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException "]
5514[label="integralType\n int "]
5515[label="methodDeclarator\n label(Documentdocument) "]
6516[label="formalParameter\n Documentdocument "]
7517[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7518[label="variableDeclaratorId\n document "]
5519[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6520[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7521[label="classType\n IllegalArgumentException "]
7522[label="classType\n IllegalStateException "]
4523[label="block\n {AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;} "]
5524[label="blockStatements\n AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest; "]
6525[label="localVariableDeclarationStatement\n AbstractModelmodel=getModel(); "]
7526[label="localVariableDeclaration\n AbstractModelmodel=getModel() "]
8527[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractModel "]
8528[label="variableDeclarator\n model=getModel() "]
9529[label="variableDeclaratorId\n model "]
9530[label="methodInvocation_lfno_primary\n getModel() "]
10531[label="methodName\n getModel "]
6532[label="ifThenStatement\n if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
7533[label="equalityExpression\n model==null "]
8534[label="expressionName\n model "]
8535[label="literal\n null "]
7536[label="block\n {thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
8537[label="throwStatement\n thrownewIllegalStateException(\"未训练模型！无法执行预测！\"); "]
9538[label="classInstanceCreationExpression_lfno_primary\n newIllegalStateException(\"未训练模型！无法执行预测！\") "]
10539[label="literal\n \"未训练模型！无法执行预测！\" "]
6540[label="ifThenStatement\n if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");} "]
7541[label="equalityExpression\n document==null "]
8542[label="expressionName\n document "]
8543[label="literal\n null "]
7544[label="block\n {thrownewIllegalArgumentException(\"参数 text == null\");} "]
8545[label="throwStatement\n thrownewIllegalArgumentException(\"参数 text == null\"); "]
9546[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"参数 text == null\") "]
10547[label="literal\n \"参数 text == null\" "]
6548[label="localVariableDeclarationStatement\n double[]probs=categorize(document); "]
7549[label="localVariableDeclaration\n double[]probs=categorize(document) "]
8550[label="unannArrayType\n double[] "]
9551[label="floatingPointType\n double "]
9552[label="dims\n [] "]
8553[label="variableDeclarator\n probs=categorize(document) "]
9554[label="variableDeclaratorId\n probs "]
9555[label="methodInvocation_lfno_primary\n categorize(document) "]
10556[label="methodName\n categorize "]
10557[label="expressionName\n document "]
6558[label="localVariableDeclarationStatement\n doublemax=Double.NEGATIVE_INFINITY; "]
7559[label="localVariableDeclaration\n doublemax=Double.NEGATIVE_INFINITY "]
8560[label="floatingPointType\n double "]
8561[label="variableDeclarator\n max=Double.NEGATIVE_INFINITY "]
9562[label="variableDeclaratorId\n max "]
9563[label="expressionName\n Double.NEGATIVE_INFINITY "]
10564[label="ambiguousName\n Double "]
6565[label="localVariableDeclarationStatement\n intbest=-1; "]
7566[label="localVariableDeclaration\n intbest=-1 "]
8567[label="integralType\n int "]
8568[label="variableDeclarator\n best=-1 "]
9569[label="variableDeclaratorId\n best "]
9570[label="unaryExpression\n -1 "]
10571[label="literal\n 1 "]
6572[label="basicForStatement\n for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}} "]
7573[label="localVariableDeclaration\n inti=0 "]
8574[label="integralType\n int "]
8575[label="variableDeclarator\n i=0 "]
9576[label="variableDeclaratorId\n i "]
9577[label="literal\n 0 "]
7578[label="relationalExpression\n i<probs.length "]
8579[label="expressionName\n i "]
8580[label="expressionName\n probs.length "]
9581[label="ambiguousName\n probs "]
7582[label="postIncrementExpression\n i++ "]
8583[label="expressionName\n i "]
7584[label="block\n {if(probs[i]>max){max=probs[i];best=i;}} "]
8585[label="ifThenStatement\n if(probs[i]>max){max=probs[i];best=i;} "]
9586[label="relationalExpression\n probs[i]>max "]
10587[label="arrayAccess_lfno_primary\n probs[i] "]
11588[label="expressionName\n probs "]
11589[label="expressionName\n i "]
10590[label="expressionName\n max "]
9591[label="block\n {max=probs[i];best=i;} "]
10592[label="blockStatements\n max=probs[i];best=i; "]
11593[label="expressionStatement\n max=probs[i]; "]
12594[label="assignment\n max=probs[i] "]
13595[label="expressionName\n max "]
13596[label="assignmentOperator\n = "]
13597[label="arrayAccess_lfno_primary\n probs[i] "]
14598[label="expressionName\n probs "]
14599[label="expressionName\n i "]
11600[label="expressionStatement\n best=i; "]
12601[label="assignment\n best=i "]
13602[label="expressionName\n best "]
13603[label="assignmentOperator\n = "]
13604[label="expressionName\n i "]
6605[label="returnStatement\n returnbest; "]
7606[label="expressionName\n best "]
0607[label="compilationUnit\n packagecom.hankcs.hanlp.mining.word2vec;importjava.io.IOException;importjava.util.Scanner;publicabstractclassAbstractClosestVectors{staticfinalintN=40;protectedScannerscanner;protectedfinalVectorsReadervectorsReader;protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);}protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;}protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;}protectedabstractResultgetTargetVector();finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}}protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}}}<EOF> "]
1608[label="packageDeclaration\n packagecom.hankcs.hanlp.mining.word2vec; "]
2609[label="packageName\n com.hankcs.hanlp.mining.word2vec "]
3610[label="packageName\n com.hankcs.hanlp.mining "]
4611[label="packageName\n com.hankcs.hanlp "]
5612[label="packageName\n com.hankcs "]
6613[label="packageName\n com "]
1614[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
2615[label="typeName\n java.io.IOException "]
3616[label="packageOrTypeName\n java.io "]
4617[label="packageOrTypeName\n java "]
1618[label="singleTypeImportDeclaration\n importjava.util.Scanner; "]
2619[label="typeName\n java.util.Scanner "]
3620[label="packageOrTypeName\n java.util "]
4621[label="packageOrTypeName\n java "]
1622[label="normalClassDeclaration\n publicabstractclassAbstractClosestVectors{staticfinalintN=40;protectedScannerscanner;protectedfinalVectorsReadervectorsReader;protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);}protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;}protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;}protectedabstractResultgetTargetVector();finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}}protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}}} "]
2623[label="classModifier\n public "]
2624[label="classModifier\n abstract "]
2625[label="classBody\n {staticfinalintN=40;protectedScannerscanner;protectedfinalVectorsReadervectorsReader;protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);}protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;}protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;}protectedabstractResultgetTargetVector();finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}}protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}}} "]
3626[label="fieldDeclaration\n staticfinalintN=40; "]
4627[label="fieldModifier\n static "]
4628[label="fieldModifier\n final "]
4629[label="integralType\n int "]
4630[label="variableDeclarator\n N=40 "]
5631[label="variableDeclaratorId\n N "]
5632[label="literal\n 40 "]
3633[label="fieldDeclaration\n protectedScannerscanner; "]
4634[label="fieldModifier\n protected "]
4635[label="unannClassType_lfno_unannClassOrInterfaceType\n Scanner "]
4636[label="variableDeclaratorId\n scanner "]
3637[label="fieldDeclaration\n protectedfinalVectorsReadervectorsReader; "]
4638[label="fieldModifier\n protected "]
4639[label="fieldModifier\n final "]
4640[label="unannClassType_lfno_unannClassOrInterfaceType\n VectorsReader "]
4641[label="variableDeclaratorId\n vectorsReader "]
3642[label="constructorDeclaration\n protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);} "]
4643[label="constructorModifier\n protected "]
4644[label="constructorDeclarator\n AbstractClosestVectors(Stringfile) "]
5645[label="simpleTypeName\n AbstractClosestVectors "]
5646[label="formalParameter\n Stringfile "]
6647[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
6648[label="variableDeclaratorId\n file "]
4649[label="constructorBody\n {vectorsReader=newVectorsReader(file);} "]
5650[label="expressionStatement\n vectorsReader=newVectorsReader(file); "]
6651[label="assignment\n vectorsReader=newVectorsReader(file) "]
7652[label="expressionName\n vectorsReader "]
7653[label="assignmentOperator\n = "]
7654[label="classInstanceCreationExpression_lfno_primary\n newVectorsReader(file) "]
8655[label="expressionName\n file "]
3656[label="methodDeclaration\n protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;} "]
4657[label="methodModifier\n protected "]
4658[label="methodHeader\n String[]nextWords(intn,Stringmsg) "]
5659[label="unannArrayType\n String[] "]
6660[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
6661[label="dims\n [] "]
5662[label="methodDeclarator\n nextWords(intn,Stringmsg) "]
6663[label="formalParameterList\n intn,Stringmsg "]
7664[label="formalParameter\n intn "]
8665[label="integralType\n int "]
8666[label="variableDeclaratorId\n n "]
7667[label="formalParameter\n Stringmsg "]
8668[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8669[label="variableDeclaratorId\n msg "]
4670[label="block\n {System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;} "]
5671[label="blockStatements\n System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords; "]
6672[label="expressionStatement\n System.out.println(msg+\" ('q' to break): \"); "]
7673[label="methodInvocation\n System.out.println(msg+\" ('q' to break): \") "]
8674[label="typeName\n System.out "]
9675[label="packageOrTypeName\n System "]
8676[label="additiveExpression\n msg+\" ('q' to break): \" "]
9677[label="expressionName\n msg "]
9678[label="literal\n \" ('q' to break): \" "]
6679[label="localVariableDeclarationStatement\n String[]words=newString[n]; "]
7680[label="localVariableDeclaration\n String[]words=newString[n] "]
8681[label="unannArrayType\n String[] "]
9682[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
9683[label="dims\n [] "]
8684[label="variableDeclarator\n words=newString[n] "]
9685[label="variableDeclaratorId\n words "]
9686[label="arrayCreationExpression\n newString[n] "]
10687[label="classType_lfno_classOrInterfaceType\n String "]
10688[label="dimExpr\n [n] "]
11689[label="expressionName\n n "]
6690[label="basicForStatement\n for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;} "]
7691[label="localVariableDeclaration\n inti=0 "]
8692[label="integralType\n int "]
8693[label="variableDeclarator\n i=0 "]
9694[label="variableDeclaratorId\n i "]
9695[label="literal\n 0 "]
7696[label="relationalExpression\n i<n "]
8697[label="expressionName\n i "]
8698[label="expressionName\n n "]
7699[label="postIncrementExpression\n i++ "]
8700[label="expressionName\n i "]
7701[label="block\n {Stringword=nextWord();if(word==null)returnnull;words[i]=word;} "]
8702[label="blockStatements\n Stringword=nextWord();if(word==null)returnnull;words[i]=word; "]
9703[label="localVariableDeclarationStatement\n Stringword=nextWord(); "]
10704[label="localVariableDeclaration\n Stringword=nextWord() "]
11705[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
11706[label="variableDeclarator\n word=nextWord() "]
12707[label="variableDeclaratorId\n word "]
12708[label="methodInvocation_lfno_primary\n nextWord() "]
13709[label="methodName\n nextWord "]
9710[label="ifThenStatement\n if(word==null)returnnull; "]
10711[label="equalityExpression\n word==null "]
11712[label="expressionName\n word "]
11713[label="literal\n null "]
10714[label="returnStatement\n returnnull; "]
11715[label="literal\n null "]
9716[label="expressionStatement\n words[i]=word; "]
10717[label="assignment\n words[i]=word "]
11718[label="arrayAccess\n words[i] "]
12719[label="expressionName\n words "]
12720[label="expressionName\n i "]
11721[label="assignmentOperator\n = "]
11722[label="expressionName\n word "]
6723[label="returnStatement\n returnwords; "]
7724[label="expressionName\n words "]
3725[label="methodDeclaration\n protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;} "]
4726[label="methodModifier\n protected "]
4727[label="methodHeader\n StringnextWord() "]
5728[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
5729[label="methodDeclarator\n nextWord() "]
4730[label="block\n {Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;} "]
5731[label="blockStatements\n Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word; "]
6732[label="localVariableDeclarationStatement\n Stringword=scanner.next(); "]
7733[label="localVariableDeclaration\n Stringword=scanner.next() "]
8734[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8735[label="variableDeclarator\n word=scanner.next() "]
9736[label="variableDeclaratorId\n word "]
9737[label="methodInvocation_lfno_primary\n scanner.next() "]
10738[label="typeName\n scanner "]
6739[label="returnStatement\n returnword==null||word.length()==0||word.equals(\"q\")?null:word; "]
7740[label="conditionalExpression\n word==null||word.length()==0||word.equals(\"q\")?null:word "]
8741[label="conditionalOrExpression\n word==null||word.length()==0||word.equals(\"q\") "]
9742[label="conditionalOrExpression\n word==null||word.length()==0 "]
10743[label="equalityExpression\n word==null "]
11744[label="expressionName\n word "]
11745[label="literal\n null "]
10746[label="equalityExpression\n word.length()==0 "]
11747[label="methodInvocation_lfno_primary\n word.length() "]
12748[label="typeName\n word "]
11749[label="literal\n 0 "]
9750[label="methodInvocation_lfno_primary\n word.equals(\"q\") "]
10751[label="typeName\n word "]
10752[label="literal\n \"q\" "]
8753[label="literal\n null "]
8754[label="expressionName\n word "]
3755[label="methodDeclaration\n protectedabstractResultgetTargetVector(); "]
4756[label="methodModifier\n protected "]
4757[label="methodModifier\n abstract "]
4758[label="methodHeader\n ResultgetTargetVector() "]
5759[label="unannClassType_lfno_unannClassOrInterfaceType\n Result "]
5760[label="methodDeclarator\n getTargetVector() "]
4761[label="methodBody\n ; "]
3762[label="methodDeclaration\n finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}} "]
4763[label="methodModifier\n final "]
4764[label="methodModifier\n protected "]
4765[label="methodHeader\n voidexecute()throwsIOException "]
5766[label="result\n void "]
5767[label="methodDeclarator\n execute() "]
5768[label="throws_\n throwsIOException "]
6769[label="classType\n IOException "]
4770[label="block\n {vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}} "]
5771[label="blockStatements\n vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();} "]
6772[label="expressionStatement\n vectorsReader.readVectorFile(); "]
7773[label="methodInvocation\n vectorsReader.readVectorFile() "]
8774[label="typeName\n vectorsReader "]
6775[label="localVariableDeclarationStatement\n finalintwords=vectorsReader.getNumWords(); "]
7776[label="localVariableDeclaration\n finalintwords=vectorsReader.getNumWords() "]
8777[label="variableModifier\n final "]
8778[label="integralType\n int "]
8779[label="variableDeclarator\n words=vectorsReader.getNumWords() "]
9780[label="variableDeclaratorId\n words "]
9781[label="methodInvocation_lfno_primary\n vectorsReader.getNumWords() "]
10782[label="typeName\n vectorsReader "]
6783[label="localVariableDeclarationStatement\n finalintsize=vectorsReader.getSize(); "]
7784[label="localVariableDeclaration\n finalintsize=vectorsReader.getSize() "]
8785[label="variableModifier\n final "]
8786[label="integralType\n int "]
8787[label="variableDeclarator\n size=vectorsReader.getSize() "]
9788[label="variableDeclaratorId\n size "]
9789[label="methodInvocation_lfno_primary\n vectorsReader.getSize() "]
10790[label="typeName\n vectorsReader "]
6791[label="tryStatement\n try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();} "]
7792[label="block\n {scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}} "]
8793[label="blockStatements\n scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);} "]
9794[label="expressionStatement\n scanner=newScanner(System.in); "]
10795[label="assignment\n scanner=newScanner(System.in) "]
11796[label="expressionName\n scanner "]
11797[label="assignmentOperator\n = "]
11798[label="classInstanceCreationExpression_lfno_primary\n newScanner(System.in) "]
12799[label="expressionName\n System.in "]
13800[label="ambiguousName\n System "]
9801[label="localVariableDeclarationStatement\n Resultresult=null; "]
10802[label="localVariableDeclaration\n Resultresult=null "]
11803[label="unannClassType_lfno_unannClassOrInterfaceType\n Result "]
11804[label="variableDeclarator\n result=null "]
12805[label="variableDeclaratorId\n result "]
12806[label="literal\n null "]
9807[label="whileStatement\n while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);} "]
10808[label="equalityExpression\n (result=getTargetVector())!=null "]
11809[label="primaryNoNewArray_lfno_primary\n (result=getTargetVector()) "]
12810[label="assignment\n result=getTargetVector() "]
13811[label="expressionName\n result "]
13812[label="assignmentOperator\n = "]
13813[label="methodInvocation_lfno_primary\n getTargetVector() "]
14814[label="methodName\n getTargetVector "]
11815[label="literal\n null "]
10816[label="block\n {double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);} "]
11817[label="blockStatements\n double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]); "]
12818[label="localVariableDeclarationStatement\n double[]bestd=newdouble[N]; "]
13819[label="localVariableDeclaration\n double[]bestd=newdouble[N] "]
14820[label="unannArrayType\n double[] "]
15821[label="floatingPointType\n double "]
15822[label="dims\n [] "]
14823[label="variableDeclarator\n bestd=newdouble[N] "]
15824[label="variableDeclaratorId\n bestd "]
15825[label="arrayCreationExpression\n newdouble[N] "]
16826[label="floatingPointType\n double "]
16827[label="dimExpr\n [N] "]
17828[label="expressionName\n N "]
12829[label="localVariableDeclarationStatement\n String[]bestw=newString[N]; "]
13830[label="localVariableDeclaration\n String[]bestw=newString[N] "]
14831[label="unannArrayType\n String[] "]
15832[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
15833[label="dims\n [] "]
14834[label="variableDeclarator\n bestw=newString[N] "]
15835[label="variableDeclaratorId\n bestw "]
15836[label="arrayCreationExpression\n newString[N] "]
16837[label="classType_lfno_classOrInterfaceType\n String "]
16838[label="dimExpr\n [N] "]
17839[label="expressionName\n N "]
12840[label="labeledStatement\n next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}} "]
13841[label="basicForStatement\n for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}} "]
14842[label="localVariableDeclaration\n inti=0 "]
15843[label="integralType\n int "]
15844[label="variableDeclarator\n i=0 "]
16845[label="variableDeclaratorId\n i "]
16846[label="literal\n 0 "]
14847[label="relationalExpression\n i<words "]
15848[label="expressionName\n i "]
15849[label="expressionName\n words "]
14850[label="postIncrementExpression\n i++ "]
15851[label="expressionName\n i "]
14852[label="block\n {for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}} "]
15853[label="blockStatements\n for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}} "]
16854[label="enhancedForStatement\n for(intbi:result.bi){if(i==bi)continuenext_word;} "]
17855[label="integralType\n int "]
17856[label="variableDeclaratorId\n bi "]
17857[label="expressionName\n result.bi "]
18858[label="ambiguousName\n result "]
17859[label="block\n {if(i==bi)continuenext_word;} "]
18860[label="ifThenStatement\n if(i==bi)continuenext_word; "]
19861[label="equalityExpression\n i==bi "]
20862[label="expressionName\n i "]
20863[label="expressionName\n bi "]
19864[label="continueStatement\n continuenext_word; "]
16865[label="localVariableDeclarationStatement\n doubledist=0; "]
17866[label="localVariableDeclaration\n doubledist=0 "]
18867[label="floatingPointType\n double "]
18868[label="variableDeclarator\n dist=0 "]
19869[label="variableDeclaratorId\n dist "]
19870[label="literal\n 0 "]
16871[label="basicForStatement\n for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);} "]
17872[label="localVariableDeclaration\n intj=0 "]
18873[label="integralType\n int "]
18874[label="variableDeclarator\n j=0 "]
19875[label="variableDeclaratorId\n j "]
19876[label="literal\n 0 "]
17877[label="relationalExpression\n j<size "]
18878[label="expressionName\n j "]
18879[label="expressionName\n size "]
17880[label="postIncrementExpression\n j++ "]
18881[label="expressionName\n j "]
17882[label="block\n {dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);} "]
18883[label="expressionStatement\n dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j); "]
19884[label="assignment\n dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j) "]
20885[label="expressionName\n dist "]
20886[label="assignmentOperator\n += "]
20887[label="multiplicativeExpression\n result.vec[j]*vectorsReader.getMatrixElement(i,j) "]
21888[label="arrayAccess_lfno_primary\n result.vec[j] "]
22889[label="expressionName\n result.vec "]
23890[label="ambiguousName\n result "]
22891[label="expressionName\n j "]
21892[label="methodInvocation_lfno_primary\n vectorsReader.getMatrixElement(i,j) "]
22893[label="typeName\n vectorsReader "]
22894[label="argumentList\n i,j "]
23895[label="expressionName\n i "]
23896[label="expressionName\n j "]
16897[label="basicForStatement\n for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}} "]
17898[label="localVariableDeclaration\n intj=0 "]
18899[label="integralType\n int "]
18900[label="variableDeclarator\n j=0 "]
19901[label="variableDeclaratorId\n j "]
19902[label="literal\n 0 "]
17903[label="relationalExpression\n j<N "]
18904[label="expressionName\n j "]
18905[label="expressionName\n N "]
17906[label="postIncrementExpression\n j++ "]
18907[label="expressionName\n j "]
17908[label="block\n {if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}} "]
18909[label="ifThenStatement\n if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;} "]
19910[label="relationalExpression\n dist>bestd[j] "]
20911[label="expressionName\n dist "]
20912[label="arrayAccess_lfno_primary\n bestd[j] "]
21913[label="expressionName\n bestd "]
21914[label="expressionName\n j "]
19915[label="block\n {for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;} "]
20916[label="blockStatements\n for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break; "]
21917[label="basicForStatement\n for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];} "]
22918[label="localVariableDeclaration\n intk=N-1 "]
23919[label="integralType\n int "]
23920[label="variableDeclarator\n k=N-1 "]
24921[label="variableDeclaratorId\n k "]
24922[label="additiveExpression\n N-1 "]
25923[label="expressionName\n N "]
25924[label="literal\n 1 "]
22925[label="relationalExpression\n k>j "]
23926[label="expressionName\n k "]
23927[label="expressionName\n j "]
22928[label="postDecrementExpression\n k-- "]
23929[label="expressionName\n k "]
22930[label="block\n {bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];} "]
23931[label="blockStatements\n bestd[k]=bestd[k-1];bestw[k]=bestw[k-1]; "]
24932[label="expressionStatement\n bestd[k]=bestd[k-1]; "]
25933[label="assignment\n bestd[k]=bestd[k-1] "]
26934[label="arrayAccess\n bestd[k] "]
27935[label="expressionName\n bestd "]
27936[label="expressionName\n k "]
26937[label="assignmentOperator\n = "]
26938[label="arrayAccess_lfno_primary\n bestd[k-1] "]
27939[label="expressionName\n bestd "]
27940[label="additiveExpression\n k-1 "]
28941[label="expressionName\n k "]
28942[label="literal\n 1 "]
24943[label="expressionStatement\n bestw[k]=bestw[k-1]; "]
25944[label="assignment\n bestw[k]=bestw[k-1] "]
26945[label="arrayAccess\n bestw[k] "]
27946[label="expressionName\n bestw "]
27947[label="expressionName\n k "]
26948[label="assignmentOperator\n = "]
26949[label="arrayAccess_lfno_primary\n bestw[k-1] "]
27950[label="expressionName\n bestw "]
27951[label="additiveExpression\n k-1 "]
28952[label="expressionName\n k "]
28953[label="literal\n 1 "]
21954[label="expressionStatement\n bestd[j]=dist; "]
22955[label="assignment\n bestd[j]=dist "]
23956[label="arrayAccess\n bestd[j] "]
24957[label="expressionName\n bestd "]
24958[label="expressionName\n j "]
23959[label="assignmentOperator\n = "]
23960[label="expressionName\n dist "]
21961[label="expressionStatement\n bestw[j]=vectorsReader.getWord(i); "]
22962[label="assignment\n bestw[j]=vectorsReader.getWord(i) "]
23963[label="arrayAccess\n bestw[j] "]
24964[label="expressionName\n bestw "]
24965[label="expressionName\n j "]
23966[label="assignmentOperator\n = "]
23967[label="methodInvocation_lfno_primary\n vectorsReader.getWord(i) "]
24968[label="typeName\n vectorsReader "]
24969[label="expressionName\n i "]
21970[label="breakStatement\n break; "]
12971[label="expressionStatement\n System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\"); "]
13972[label="methodInvocation\n System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\") "]
14973[label="typeName\n System.out "]
15974[label="packageOrTypeName\n System "]
14975[label="literal\n \"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\" "]
12976[label="basicForStatement\n for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]); "]
13977[label="localVariableDeclaration\n intj=0 "]
14978[label="integralType\n int "]
14979[label="variableDeclarator\n j=0 "]
15980[label="variableDeclaratorId\n j "]
15981[label="literal\n 0 "]
13982[label="relationalExpression\n j<N "]
14983[label="expressionName\n j "]
14984[label="expressionName\n N "]
13985[label="postIncrementExpression\n j++ "]
14986[label="expressionName\n j "]
13987[label="expressionStatement\n System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]); "]
14988[label="methodInvocation\n System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]) "]
15989[label="typeName\n System.out "]
16990[label="packageOrTypeName\n System "]
15991[label="argumentList\n \"%50s\t\t%f\n\",bestw[j],bestd[j] "]
16992[label="literal\n \"%50s\t\t%f\n\" "]
16993[label="arrayAccess_lfno_primary\n bestw[j] "]
17994[label="expressionName\n bestw "]
17995[label="expressionName\n j "]
16996[label="arrayAccess_lfno_primary\n bestd[j] "]
17997[label="expressionName\n bestd "]
17998[label="expressionName\n j "]
7999[label="finally_\n finally{scanner.close();} "]
81000[label="block\n {scanner.close();} "]
91001[label="expressionStatement\n scanner.close(); "]
101002[label="methodInvocation\n scanner.close() "]
111003[label="typeName\n scanner "]
31004[label="normalClassDeclaration\n protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}} "]
41005[label="classModifier\n protected "]
41006[label="classModifier\n static "]
41007[label="classBody\n {float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}} "]
51008[label="fieldDeclaration\n float[]vec; "]
61009[label="unannArrayType\n float[] "]
71010[label="floatingPointType\n float "]
71011[label="dims\n [] "]
61012[label="variableDeclaratorId\n vec "]
51013[label="fieldDeclaration\n int[]bi; "]
61014[label="unannArrayType\n int[] "]
71015[label="integralType\n int "]
71016[label="dims\n [] "]
61017[label="variableDeclaratorId\n bi "]
51018[label="constructorDeclaration\n publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;} "]
61019[label="constructorModifier\n public "]
61020[label="constructorDeclarator\n Result(float[]vec,int[]bi) "]
71021[label="simpleTypeName\n Result "]
71022[label="formalParameterList\n float[]vec,int[]bi "]
81023[label="formalParameter\n float[]vec "]
91024[label="unannArrayType\n float[] "]
101025[label="floatingPointType\n float "]
101026[label="dims\n [] "]
91027[label="variableDeclaratorId\n vec "]
81028[label="formalParameter\n int[]bi "]
91029[label="unannArrayType\n int[] "]
101030[label="integralType\n int "]
101031[label="dims\n [] "]
91032[label="variableDeclaratorId\n bi "]
61033[label="constructorBody\n {this.vec=vec;this.bi=bi;} "]
71034[label="blockStatements\n this.vec=vec;this.bi=bi; "]
81035[label="expressionStatement\n this.vec=vec; "]
91036[label="assignment\n this.vec=vec "]
101037[label="fieldAccess\n this.vec "]
111038[label="primaryNoNewArray_lfno_primary\n this "]
101039[label="assignmentOperator\n = "]
101040[label="expressionName\n vec "]
81041[label="expressionStatement\n this.bi=bi; "]
91042[label="assignment\n this.bi=bi "]
101043[label="fieldAccess\n this.bi "]
111044[label="primaryNoNewArray_lfno_primary\n this "]
101045[label="assignmentOperator\n = "]
101046[label="expressionName\n bi "]
01047[label="compilationUnit\n packagecom.hankcs.hanlp.classification.corpus;importcom.hankcs.hanlp.classification.models.AbstractModel;importcom.hankcs.hanlp.classification.tokenizers.BigramTokenizer;importcom.hankcs.hanlp.classification.tokenizers.HanLPTokenizer;importcom.hankcs.hanlp.classification.tokenizers.ITokenizer;importcom.hankcs.hanlp.classification.utilities.MathUtility;importcom.hankcs.hanlp.classification.utilities.TextProcessUtility;importjava.io.File;importjava.io.IOException;importjava.util.Map;importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger;publicabstractclassAbstractDataSetimplementsIDataSet{protectedITokenizertokenizer;protectedCatalogcatalog;protectedLexiconlexicon;protectedbooleantestingDataSet;publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;}publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();}publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;}publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);}publicITokenizergetTokenizer(){returntokenizer;}publicCataloggetCatalog(){returncatalog;}publicLexicongetLexicon(){returnlexicon;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);}@OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");}@OverridepublicbooleanisTestingDataSet(){returntestingDataSet;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;}@OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;}@OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;}}<EOF> "]
11048[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.corpus; "]
21049[label="packageName\n com.hankcs.hanlp.classification.corpus "]
31050[label="packageName\n com.hankcs.hanlp.classification "]
41051[label="packageName\n com.hankcs.hanlp "]
51052[label="packageName\n com.hankcs "]
61053[label="packageName\n com "]
11054[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.models.AbstractModel; "]
21055[label="typeName\n com.hankcs.hanlp.classification.models.AbstractModel "]
31056[label="packageOrTypeName\n com.hankcs.hanlp.classification.models "]
41057[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51058[label="packageOrTypeName\n com.hankcs.hanlp "]
61059[label="packageOrTypeName\n com.hankcs "]
71060[label="packageOrTypeName\n com "]
11061[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.BigramTokenizer; "]
21062[label="typeName\n com.hankcs.hanlp.classification.tokenizers.BigramTokenizer "]
31063[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
41064[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51065[label="packageOrTypeName\n com.hankcs.hanlp "]
61066[label="packageOrTypeName\n com.hankcs "]
71067[label="packageOrTypeName\n com "]
11068[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.HanLPTokenizer; "]
21069[label="typeName\n com.hankcs.hanlp.classification.tokenizers.HanLPTokenizer "]
31070[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
41071[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51072[label="packageOrTypeName\n com.hankcs.hanlp "]
61073[label="packageOrTypeName\n com.hankcs "]
71074[label="packageOrTypeName\n com "]
11075[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.ITokenizer; "]
21076[label="typeName\n com.hankcs.hanlp.classification.tokenizers.ITokenizer "]
31077[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
41078[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51079[label="packageOrTypeName\n com.hankcs.hanlp "]
61080[label="packageOrTypeName\n com.hankcs "]
71081[label="packageOrTypeName\n com "]
11082[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.MathUtility; "]
21083[label="typeName\n com.hankcs.hanlp.classification.utilities.MathUtility "]
31084[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
41085[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51086[label="packageOrTypeName\n com.hankcs.hanlp "]
61087[label="packageOrTypeName\n com.hankcs "]
71088[label="packageOrTypeName\n com "]
11089[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.TextProcessUtility; "]
21090[label="typeName\n com.hankcs.hanlp.classification.utilities.TextProcessUtility "]
31091[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
41092[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51093[label="packageOrTypeName\n com.hankcs.hanlp "]
61094[label="packageOrTypeName\n com.hankcs "]
71095[label="packageOrTypeName\n com "]
11096[label="singleTypeImportDeclaration\n importjava.io.File; "]
21097[label="typeName\n java.io.File "]
31098[label="packageOrTypeName\n java.io "]
41099[label="packageOrTypeName\n java "]
11100[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
21101[label="typeName\n java.io.IOException "]
31102[label="packageOrTypeName\n java.io "]
41103[label="packageOrTypeName\n java "]
11104[label="singleTypeImportDeclaration\n importjava.util.Map; "]
21105[label="typeName\n java.util.Map "]
31106[label="packageOrTypeName\n java.util "]
41107[label="packageOrTypeName\n java "]
11108[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger; "]
21109[label="typeName\n com.hankcs.hanlp.classification.utilities.Predefine "]
31110[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
41111[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51112[label="packageOrTypeName\n com.hankcs.hanlp "]
61113[label="packageOrTypeName\n com.hankcs "]
71114[label="packageOrTypeName\n com "]
11115[label="normalClassDeclaration\n publicabstractclassAbstractDataSetimplementsIDataSet{protectedITokenizertokenizer;protectedCatalogcatalog;protectedLexiconlexicon;protectedbooleantestingDataSet;publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;}publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();}publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;}publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);}publicITokenizergetTokenizer(){returntokenizer;}publicCataloggetCatalog(){returncatalog;}publicLexicongetLexicon(){returnlexicon;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);}@OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");}@OverridepublicbooleanisTestingDataSet(){returntestingDataSet;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;}@OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;}@OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;}} "]
21116[label="classModifier\n public "]
21117[label="classModifier\n abstract "]
21118[label="superinterfaces\n implementsIDataSet "]
31119[label="classType\n IDataSet "]
21120[label="classBody\n {protectedITokenizertokenizer;protectedCatalogcatalog;protectedLexiconlexicon;protectedbooleantestingDataSet;publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;}publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();}publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;}publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);}publicITokenizergetTokenizer(){returntokenizer;}publicCataloggetCatalog(){returncatalog;}publicLexicongetLexicon(){returnlexicon;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);}@OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");}@OverridepublicbooleanisTestingDataSet(){returntestingDataSet;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;}@OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;}@OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;}} "]
31121[label="fieldDeclaration\n protectedITokenizertokenizer; "]
41122[label="fieldModifier\n protected "]
41123[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
41124[label="variableDeclaratorId\n tokenizer "]
31125[label="fieldDeclaration\n protectedCatalogcatalog; "]
41126[label="fieldModifier\n protected "]
41127[label="unannClassType_lfno_unannClassOrInterfaceType\n Catalog "]
41128[label="variableDeclaratorId\n catalog "]
31129[label="fieldDeclaration\n protectedLexiconlexicon; "]
41130[label="fieldModifier\n protected "]
41131[label="unannClassType_lfno_unannClassOrInterfaceType\n Lexicon "]
41132[label="variableDeclaratorId\n lexicon "]
31133[label="fieldDeclaration\n protectedbooleantestingDataSet; "]
41134[label="fieldModifier\n protected "]
41135[label="unannPrimitiveType\n boolean "]
41136[label="variableDeclaratorId\n testingDataSet "]
31137[label="constructorDeclaration\n publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;} "]
41138[label="constructorModifier\n public "]
41139[label="constructorDeclarator\n AbstractDataSet(AbstractModelmodel) "]
51140[label="simpleTypeName\n AbstractDataSet "]
51141[label="formalParameter\n AbstractModelmodel "]
61142[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractModel "]
61143[label="variableDeclaratorId\n model "]
41144[label="constructorBody\n {lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;} "]
51145[label="blockStatements\n lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true; "]
61146[label="expressionStatement\n lexicon=newLexicon(model.wordIdTrie); "]
71147[label="assignment\n lexicon=newLexicon(model.wordIdTrie) "]
81148[label="expressionName\n lexicon "]
81149[label="assignmentOperator\n = "]
81150[label="classInstanceCreationExpression_lfno_primary\n newLexicon(model.wordIdTrie) "]
91151[label="expressionName\n model.wordIdTrie "]
101152[label="ambiguousName\n model "]
61153[label="expressionStatement\n tokenizer=model.tokenizer; "]
71154[label="assignment\n tokenizer=model.tokenizer "]
81155[label="expressionName\n tokenizer "]
81156[label="assignmentOperator\n = "]
81157[label="expressionName\n model.tokenizer "]
91158[label="ambiguousName\n model "]
61159[label="expressionStatement\n catalog=newCatalog(model.catalog); "]
71160[label="assignment\n catalog=newCatalog(model.catalog) "]
81161[label="expressionName\n catalog "]
81162[label="assignmentOperator\n = "]
81163[label="classInstanceCreationExpression_lfno_primary\n newCatalog(model.catalog) "]
91164[label="expressionName\n model.catalog "]
101165[label="ambiguousName\n model "]
61166[label="expressionStatement\n testingDataSet=true; "]
71167[label="assignment\n testingDataSet=true "]
81168[label="expressionName\n testingDataSet "]
81169[label="assignmentOperator\n = "]
81170[label="literal\n true "]
31171[label="constructorDeclaration\n publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();} "]
41172[label="constructorModifier\n public "]
41173[label="constructorDeclarator\n AbstractDataSet() "]
51174[label="simpleTypeName\n AbstractDataSet "]
41175[label="constructorBody\n {tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();} "]
51176[label="blockStatements\n tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon(); "]
61177[label="expressionStatement\n tokenizer=newHanLPTokenizer(); "]
71178[label="assignment\n tokenizer=newHanLPTokenizer() "]
81179[label="expressionName\n tokenizer "]
81180[label="assignmentOperator\n = "]
81181[label="classInstanceCreationExpression_lfno_primary\n newHanLPTokenizer() "]
61182[label="expressionStatement\n catalog=newCatalog(); "]
71183[label="assignment\n catalog=newCatalog() "]
81184[label="expressionName\n catalog "]
81185[label="assignmentOperator\n = "]
81186[label="classInstanceCreationExpression_lfno_primary\n newCatalog() "]
61187[label="expressionStatement\n lexicon=newLexicon(); "]
71188[label="assignment\n lexicon=newLexicon() "]
81189[label="expressionName\n lexicon "]
81190[label="assignmentOperator\n = "]
81191[label="classInstanceCreationExpression_lfno_primary\n newLexicon() "]
31192[label="methodDeclaration\n publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;} "]
41193[label="methodModifier\n public "]
41194[label="methodHeader\n IDataSetsetTokenizer(ITokenizertokenizer) "]
51195[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51196[label="methodDeclarator\n setTokenizer(ITokenizertokenizer) "]
61197[label="formalParameter\n ITokenizertokenizer "]
71198[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
71199[label="variableDeclaratorId\n tokenizer "]
41200[label="block\n {this.tokenizer=tokenizer;returnthis;} "]
51201[label="blockStatements\n this.tokenizer=tokenizer;returnthis; "]
61202[label="expressionStatement\n this.tokenizer=tokenizer; "]
71203[label="assignment\n this.tokenizer=tokenizer "]
81204[label="fieldAccess\n this.tokenizer "]
91205[label="primaryNoNewArray_lfno_primary\n this "]
81206[label="assignmentOperator\n = "]
81207[label="expressionName\n tokenizer "]
61208[label="returnStatement\n returnthis; "]
71209[label="primaryNoNewArray_lfno_primary\n this "]
31210[label="methodDeclaration\n publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);} "]
41211[label="methodModifier\n public "]
41212[label="methodHeader\n Documentconvert(Stringcategory,Stringtext) "]
51213[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
51214[label="methodDeclarator\n convert(Stringcategory,Stringtext) "]
61215[label="formalParameterList\n Stringcategory,Stringtext "]
71216[label="formalParameter\n Stringcategory "]
81217[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81218[label="variableDeclaratorId\n category "]
71219[label="formalParameter\n Stringtext "]
81220[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81221[label="variableDeclaratorId\n text "]
41222[label="block\n {String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);} "]
51223[label="blockStatements\n String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray); "]
61224[label="localVariableDeclarationStatement\n String[]tokenArray=tokenizer.segment(text); "]
71225[label="localVariableDeclaration\n String[]tokenArray=tokenizer.segment(text) "]
81226[label="unannArrayType\n String[] "]
91227[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91228[label="dims\n [] "]
81229[label="variableDeclarator\n tokenArray=tokenizer.segment(text) "]
91230[label="variableDeclaratorId\n tokenArray "]
91231[label="methodInvocation_lfno_primary\n tokenizer.segment(text) "]
101232[label="typeName\n tokenizer "]
101233[label="expressionName\n text "]
61234[label="returnStatement\n returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray); "]
71235[label="conditionalExpression\n testingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray) "]
81236[label="expressionName\n testingDataSet "]
81237[label="classInstanceCreationExpression_lfno_primary\n newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray) "]
91238[label="argumentList\n catalog.categoryId,lexicon.wordId,category,tokenArray "]
101239[label="expressionName\n catalog.categoryId "]
111240[label="ambiguousName\n catalog "]
101241[label="expressionName\n lexicon.wordId "]
111242[label="ambiguousName\n lexicon "]
101243[label="expressionName\n category "]
101244[label="expressionName\n tokenArray "]
81245[label="classInstanceCreationExpression_lfno_primary\n newDocument(catalog,lexicon,category,tokenArray) "]
91246[label="argumentList\n catalog,lexicon,category,tokenArray "]
101247[label="expressionName\n catalog "]
101248[label="expressionName\n lexicon "]
101249[label="expressionName\n category "]
101250[label="expressionName\n tokenArray "]
31251[label="methodDeclaration\n publicITokenizergetTokenizer(){returntokenizer;} "]
41252[label="methodModifier\n public "]
41253[label="methodHeader\n ITokenizergetTokenizer() "]
51254[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
51255[label="methodDeclarator\n getTokenizer() "]
41256[label="block\n {returntokenizer;} "]
51257[label="returnStatement\n returntokenizer; "]
61258[label="expressionName\n tokenizer "]
31259[label="methodDeclaration\n publicCataloggetCatalog(){returncatalog;} "]
41260[label="methodModifier\n public "]
41261[label="methodHeader\n CataloggetCatalog() "]
51262[label="unannClassType_lfno_unannClassOrInterfaceType\n Catalog "]
51263[label="methodDeclarator\n getCatalog() "]
41264[label="block\n {returncatalog;} "]
51265[label="returnStatement\n returncatalog; "]
61266[label="expressionName\n catalog "]
31267[label="methodDeclaration\n publicLexicongetLexicon(){returnlexicon;} "]
41268[label="methodModifier\n public "]
41269[label="methodHeader\n LexicongetLexicon() "]
51270[label="unannClassType_lfno_unannClassOrInterfaceType\n Lexicon "]
51271[label="methodDeclarator\n getLexicon() "]
41272[label="block\n {returnlexicon;} "]
51273[label="returnStatement\n returnlexicon; "]
61274[label="expressionName\n lexicon "]
31275[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);} "]
41276[label="markerAnnotation\n @Override "]
51277[label="typeName\n Override "]
41278[label="methodModifier\n public "]
41279[label="methodHeader\n IDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException "]
51280[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51281[label="methodDeclarator\n load(StringfolderPath,StringcharsetName) "]
61282[label="formalParameterList\n StringfolderPath,StringcharsetName "]
71283[label="formalParameter\n StringfolderPath "]
81284[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81285[label="variableDeclaratorId\n folderPath "]
71286[label="formalParameter\n StringcharsetName "]
81287[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81288[label="variableDeclaratorId\n charsetName "]
51289[label="throws_\n throwsIllegalArgumentException,IOException "]
61290[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71291[label="classType\n IllegalArgumentException "]
71292[label="classType\n IOException "]
41293[label="block\n {returnload(folderPath,charsetName,1.);} "]
51294[label="returnStatement\n returnload(folderPath,charsetName,1.); "]
61295[label="methodInvocation_lfno_primary\n load(folderPath,charsetName,1.) "]
71296[label="methodName\n load "]
71297[label="argumentList\n folderPath,charsetName,1. "]
81298[label="expressionName\n folderPath "]
81299[label="expressionName\n charsetName "]
81300[label="literal\n 1. "]
31301[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");} "]
41302[label="markerAnnotation\n @Override "]
51303[label="typeName\n Override "]
41304[label="methodModifier\n public "]
41305[label="methodHeader\n IDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException "]
51306[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51307[label="methodDeclarator\n load(StringfolderPath) "]
61308[label="formalParameter\n StringfolderPath "]
71309[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
71310[label="variableDeclaratorId\n folderPath "]
51311[label="throws_\n throwsIllegalArgumentException,IOException "]
61312[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71313[label="classType\n IllegalArgumentException "]
71314[label="classType\n IOException "]
41315[label="block\n {returnload(folderPath,\"UTF-8\");} "]
51316[label="returnStatement\n returnload(folderPath,\"UTF-8\"); "]
61317[label="methodInvocation_lfno_primary\n load(folderPath,\"UTF-8\") "]
71318[label="methodName\n load "]
71319[label="argumentList\n folderPath,\"UTF-8\" "]
81320[label="expressionName\n folderPath "]
81321[label="literal\n \"UTF-8\" "]
31322[label="methodDeclaration\n @OverridepublicbooleanisTestingDataSet(){returntestingDataSet;} "]
41323[label="markerAnnotation\n @Override "]
51324[label="typeName\n Override "]
41325[label="methodModifier\n public "]
41326[label="methodHeader\n booleanisTestingDataSet() "]
51327[label="unannPrimitiveType\n boolean "]
51328[label="methodDeclarator\n isTestingDataSet() "]
41329[label="block\n {returntestingDataSet;} "]
51330[label="returnStatement\n returntestingDataSet; "]
61331[label="expressionName\n testingDataSet "]
31332[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;} "]
41333[label="markerAnnotation\n @Override "]
51334[label="typeName\n Override "]
41335[label="methodModifier\n public "]
41336[label="methodHeader\n IDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException "]
51337[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51338[label="methodDeclarator\n load(StringfolderPath,StringcharsetName,doublepercentage) "]
61339[label="formalParameterList\n StringfolderPath,StringcharsetName,doublepercentage "]
71340[label="formalParameters\n StringfolderPath,StringcharsetName "]
81341[label="formalParameter\n StringfolderPath "]
91342[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91343[label="variableDeclaratorId\n folderPath "]
81344[label="formalParameter\n StringcharsetName "]
91345[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91346[label="variableDeclaratorId\n charsetName "]
71347[label="formalParameter\n doublepercentage "]
81348[label="floatingPointType\n double "]
81349[label="variableDeclaratorId\n percentage "]
51350[label="throws_\n throwsIllegalArgumentException,IOException "]
61351[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71352[label="classType\n IllegalArgumentException "]
71353[label="classType\n IOException "]
41354[label="block\n {if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;} "]
51355[label="blockStatements\n if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis; "]
61356[label="ifThenStatement\n if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\"); "]
71357[label="equalityExpression\n folderPath==null "]
81358[label="expressionName\n folderPath "]
81359[label="literal\n null "]
71360[label="throwStatement\n thrownewIllegalArgumentException(\"参数 folderPath == null\"); "]
81361[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"参数 folderPath == null\") "]
91362[label="literal\n \"参数 folderPath == null\" "]
61363[label="localVariableDeclarationStatement\n Fileroot=newFile(folderPath); "]
71364[label="localVariableDeclaration\n Fileroot=newFile(folderPath) "]
81365[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
81366[label="variableDeclarator\n root=newFile(folderPath) "]
91367[label="variableDeclaratorId\n root "]
91368[label="classInstanceCreationExpression_lfno_primary\n newFile(folderPath) "]
101369[label="expressionName\n folderPath "]
61370[label="ifThenStatement\n if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath())); "]
71371[label="unaryExpressionNotPlusMinus\n !root.exists() "]
81372[label="methodInvocation_lfno_primary\n root.exists() "]
91373[label="typeName\n root "]
71374[label="throwStatement\n thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath())); "]
81375[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath())) "]
91376[label="methodInvocation_lfno_primary\n String.format(\"目录 %s 不存在\",root.getAbsolutePath()) "]
101377[label="typeName\n String "]
101378[label="argumentList\n \"目录 %s 不存在\",root.getAbsolutePath() "]
111379[label="literal\n \"目录 %s 不存在\" "]
111380[label="methodInvocation_lfno_primary\n root.getAbsolutePath() "]
121381[label="typeName\n root "]
61382[label="ifThenStatement\n if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath())); "]
71383[label="unaryExpressionNotPlusMinus\n !root.isDirectory() "]
81384[label="methodInvocation_lfno_primary\n root.isDirectory() "]
91385[label="typeName\n root "]
71386[label="throwStatement\n thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath())); "]
81387[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath())) "]
91388[label="methodInvocation_lfno_primary\n String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()) "]
101389[label="typeName\n String "]
101390[label="argumentList\n \"目录 %s 不是一个目录\",root.getAbsolutePath() "]
111391[label="literal\n \"目录 %s 不是一个目录\" "]
111392[label="methodInvocation_lfno_primary\n root.getAbsolutePath() "]
121393[label="typeName\n root "]
61394[label="ifThenStatement\n if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\"); "]
71395[label="conditionalOrExpression\n percentage>1.0||percentage<-1.0 "]
81396[label="relationalExpression\n percentage>1.0 "]
91397[label="expressionName\n percentage "]
91398[label="literal\n 1.0 "]
81399[label="relationalExpression\n percentage<-1.0 "]
91400[label="expressionName\n percentage "]
91401[label="unaryExpression\n -1.0 "]
101402[label="literal\n 1.0 "]
71403[label="throwStatement\n thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\"); "]
81404[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\") "]
91405[label="literal\n \"percentage 的绝对值必须介于[0, 1]之间\" "]
61406[label="localVariableDeclarationStatement\n File[]folders=root.listFiles(); "]
71407[label="localVariableDeclaration\n File[]folders=root.listFiles() "]
81408[label="unannArrayType\n File[] "]
91409[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
91410[label="dims\n [] "]
81411[label="variableDeclarator\n folders=root.listFiles() "]
91412[label="variableDeclaratorId\n folders "]
91413[label="methodInvocation_lfno_primary\n root.listFiles() "]
101414[label="typeName\n root "]
61415[label="ifThenStatement\n if(folders==null)returnnull; "]
71416[label="equalityExpression\n folders==null "]
81417[label="expressionName\n folders "]
81418[label="literal\n null "]
71419[label="returnStatement\n returnnull; "]
81420[label="literal\n null "]
61421[label="expressionStatement\n logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath); "]
71422[label="methodInvocation\n logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath) "]
81423[label="typeName\n logger "]
81424[label="argumentList\n \"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath "]
91425[label="literal\n \"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\" "]
91426[label="conditionalExpression\n testingDataSet?\"测试集\":\"训练集\" "]
101427[label="expressionName\n testingDataSet "]
101428[label="literal\n \"测试集\" "]
101429[label="literal\n \"训练集\" "]
91430[label="expressionName\n charsetName "]
91431[label="expressionName\n folderPath "]
61432[label="enhancedForStatement\n for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);} "]
71433[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
71434[label="variableDeclaratorId\n folder "]
71435[label="expressionName\n folders "]
71436[label="block\n {if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);} "]
81437[label="blockStatements\n if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b); "]
91438[label="ifThenStatement\n if(folder.isFile())continue; "]
101439[label="methodInvocation_lfno_primary\n folder.isFile() "]
111440[label="typeName\n folder "]
101441[label="continueStatement\n continue; "]
91442[label="localVariableDeclarationStatement\n File[]files=folder.listFiles(); "]
101443[label="localVariableDeclaration\n File[]files=folder.listFiles() "]
111444[label="unannArrayType\n File[] "]
121445[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
121446[label="dims\n [] "]
111447[label="variableDeclarator\n files=folder.listFiles() "]
121448[label="variableDeclaratorId\n files "]
121449[label="methodInvocation_lfno_primary\n folder.listFiles() "]
131450[label="typeName\n folder "]
91451[label="ifThenStatement\n if(files==null)continue; "]
101452[label="equalityExpression\n files==null "]
111453[label="expressionName\n files "]
111454[label="literal\n null "]
101455[label="continueStatement\n continue; "]
91456[label="localVariableDeclarationStatement\n Stringcategory=folder.getName(); "]
101457[label="localVariableDeclaration\n Stringcategory=folder.getName() "]
111458[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
111459[label="variableDeclarator\n category=folder.getName() "]
121460[label="variableDeclaratorId\n category "]
121461[label="methodInvocation_lfno_primary\n folder.getName() "]
131462[label="typeName\n folder "]
91463[label="expressionStatement\n logger.out(\"[%s]...\",category); "]
101464[label="methodInvocation\n logger.out(\"[%s]...\",category) "]
111465[label="typeName\n logger "]
111466[label="argumentList\n \"[%s]...\",category "]
121467[label="literal\n \"[%s]...\" "]
121468[label="expressionName\n category "]
91469[label="localVariableDeclarationStatement\n intb,e; "]
101470[label="localVariableDeclaration\n intb,e "]
111471[label="integralType\n int "]
111472[label="variableDeclaratorList\n b,e "]
121473[label="variableDeclaratorId\n b "]
121474[label="variableDeclaratorId\n e "]
91475[label="ifThenElseStatement\n if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;} "]
101476[label="relationalExpression\n percentage>0 "]
111477[label="expressionName\n percentage "]
111478[label="literal\n 0 "]
101479[label="block\n {b=0;e=(int)(files.length*percentage);} "]
111480[label="blockStatements\n b=0;e=(int)(files.length*percentage); "]
121481[label="expressionStatement\n b=0; "]
131482[label="assignment\n b=0 "]
141483[label="expressionName\n b "]
141484[label="assignmentOperator\n = "]
141485[label="literal\n 0 "]
121486[label="expressionStatement\n e=(int)(files.length*percentage); "]
131487[label="assignment\n e=(int)(files.length*percentage) "]
141488[label="expressionName\n e "]
141489[label="assignmentOperator\n = "]
141490[label="castExpression\n (int)(files.length*percentage) "]
151491[label="integralType\n int "]
151492[label="primaryNoNewArray_lfno_primary\n (files.length*percentage) "]
161493[label="multiplicativeExpression\n files.length*percentage "]
171494[label="expressionName\n files.length "]
181495[label="ambiguousName\n files "]
171496[label="expressionName\n percentage "]
101497[label="block\n {b=(int)(files.length*(1+percentage));e=files.length;} "]
111498[label="blockStatements\n b=(int)(files.length*(1+percentage));e=files.length; "]
121499[label="expressionStatement\n b=(int)(files.length*(1+percentage)); "]
131500[label="assignment\n b=(int)(files.length*(1+percentage)) "]
141501[label="expressionName\n b "]
141502[label="assignmentOperator\n = "]
141503[label="castExpression\n (int)(files.length*(1+percentage)) "]
151504[label="integralType\n int "]
151505[label="primaryNoNewArray_lfno_primary\n (files.length*(1+percentage)) "]
161506[label="multiplicativeExpression\n files.length*(1+percentage) "]
171507[label="expressionName\n files.length "]
181508[label="ambiguousName\n files "]
171509[label="primaryNoNewArray_lfno_primary\n (1+percentage) "]
181510[label="additiveExpression\n 1+percentage "]
191511[label="literal\n 1 "]
191512[label="expressionName\n percentage "]
121513[label="expressionStatement\n e=files.length; "]
131514[label="assignment\n e=files.length "]
141515[label="expressionName\n e "]
141516[label="assignmentOperator\n = "]
141517[label="expressionName\n files.length "]
151518[label="ambiguousName\n files "]
91519[label="localVariableDeclarationStatement\n intlogEvery=(int)Math.ceil((e-b)/10000f); "]
101520[label="localVariableDeclaration\n intlogEvery=(int)Math.ceil((e-b)/10000f) "]
111521[label="integralType\n int "]
111522[label="variableDeclarator\n logEvery=(int)Math.ceil((e-b)/10000f) "]
121523[label="variableDeclaratorId\n logEvery "]
121524[label="castExpression\n (int)Math.ceil((e-b)/10000f) "]
131525[label="integralType\n int "]
131526[label="methodInvocation_lfno_primary\n Math.ceil((e-b)/10000f) "]
141527[label="typeName\n Math "]
141528[label="multiplicativeExpression\n (e-b)/10000f "]
151529[label="primaryNoNewArray_lfno_primary\n (e-b) "]
161530[label="additiveExpression\n e-b "]
171531[label="expressionName\n e "]
171532[label="expressionName\n b "]
151533[label="literal\n 10000f "]
91534[label="basicForStatement\n for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}} "]
101535[label="localVariableDeclaration\n inti=b "]
111536[label="integralType\n int "]
111537[label="variableDeclarator\n i=b "]
121538[label="variableDeclaratorId\n i "]
121539[label="expressionName\n b "]
101540[label="relationalExpression\n i<e "]
111541[label="expressionName\n i "]
111542[label="expressionName\n e "]
101543[label="postIncrementExpression\n i++ "]
111544[label="expressionName\n i "]
101545[label="block\n {add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}} "]
111546[label="blockStatements\n add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));} "]
121547[label="expressionStatement\n add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName)); "]
131548[label="methodInvocation\n add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName)) "]
141549[label="methodName\n add "]
141550[label="argumentList\n folder.getName(),TextProcessUtility.readTxt(files[i],charsetName) "]
151551[label="methodInvocation_lfno_primary\n folder.getName() "]
161552[label="typeName\n folder "]
151553[label="methodInvocation_lfno_primary\n TextProcessUtility.readTxt(files[i],charsetName) "]
161554[label="typeName\n TextProcessUtility "]
161555[label="argumentList\n files[i],charsetName "]
171556[label="arrayAccess_lfno_primary\n files[i] "]
181557[label="expressionName\n files "]
181558[label="expressionName\n i "]
171559[label="expressionName\n charsetName "]
121560[label="ifThenStatement\n if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));} "]
131561[label="equalityExpression\n i%logEvery==0 "]
141562[label="multiplicativeExpression\n i%logEvery "]
151563[label="expressionName\n i "]
151564[label="expressionName\n logEvery "]
141565[label="literal\n 0 "]
131566[label="block\n {logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));} "]
141567[label="expressionStatement\n logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b)); "]
151568[label="methodInvocation\n logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b)) "]
161569[label="typeName\n logger "]
161570[label="argumentList\n \"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b) "]
171571[label="literal\n \"%c[%s]...%.2f%%\" "]
171572[label="literal\n 13 "]
171573[label="expressionName\n category "]
171574[label="methodInvocation_lfno_primary\n MathUtility.percentage(i-b+1,e-b) "]
181575[label="typeName\n MathUtility "]
181576[label="argumentList\n i-b+1,e-b "]
191577[label="additiveExpression\n i-b+1 "]
201578[label="additiveExpression\n i-b "]
211579[label="expressionName\n i "]
211580[label="expressionName\n b "]
201581[label="literal\n 1 "]
191582[label="additiveExpression\n e-b "]
201583[label="expressionName\n e "]
201584[label="expressionName\n b "]
91585[label="expressionStatement\n logger.out(\" %d 篇文档\n\",e-b); "]
101586[label="methodInvocation\n logger.out(\" %d 篇文档\n\",e-b) "]
111587[label="typeName\n logger "]
111588[label="argumentList\n \" %d 篇文档\n\",e-b "]
121589[label="literal\n \" %d 篇文档\n\" "]
121590[label="additiveExpression\n e-b "]
131591[label="expressionName\n e "]
131592[label="expressionName\n b "]
61593[label="expressionStatement\n logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size()); "]
71594[label="methodInvocation\n logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size()) "]
81595[label="typeName\n logger "]
81596[label="argumentList\n \" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size() "]
91597[label="literal\n \" 加载了 %d 个类目,共 %d 篇文档\n\" "]
91598[label="primary\n getCatalog().size() "]
101599[label="methodInvocation_lfno_primary\n getCatalog() "]
111600[label="methodName\n getCatalog "]
101601[label="methodInvocation_lf_primary\n .size() "]
91602[label="methodInvocation_lfno_primary\n size() "]
101603[label="methodName\n size "]
61604[label="returnStatement\n returnthis; "]
71605[label="primaryNoNewArray_lfno_primary\n this "]
31606[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;} "]
41607[label="markerAnnotation\n @Override "]
51608[label="typeName\n Override "]
41609[label="methodModifier\n public "]
41610[label="methodHeader\n IDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException "]
51611[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51612[label="methodDeclarator\n load(StringfolderPath,doublerate) "]
61613[label="formalParameterList\n StringfolderPath,doublerate "]
71614[label="formalParameter\n StringfolderPath "]
81615[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81616[label="variableDeclaratorId\n folderPath "]
71617[label="formalParameter\n doublerate "]
81618[label="floatingPointType\n double "]
81619[label="variableDeclaratorId\n rate "]
51620[label="throws_\n throwsIllegalArgumentException,IOException "]
61621[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71622[label="classType\n IllegalArgumentException "]
71623[label="classType\n IOException "]
41624[label="block\n {returnnull;} "]
51625[label="returnStatement\n returnnull; "]
61626[label="literal\n null "]
31627[label="methodDeclaration\n @OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;} "]
41628[label="markerAnnotation\n @Override "]
51629[label="typeName\n Override "]
41630[label="methodModifier\n public "]
41631[label="methodHeader\n IDataSetadd(Map<String,String[]>testingDataSet) "]
51632[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51633[label="methodDeclarator\n add(Map<String,String[]>testingDataSet) "]
61634[label="formalParameter\n Map<String,String[]>testingDataSet "]
71635[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String[]> "]
81636[label="typeArguments\n <String,String[]> "]
91637[label="typeArgumentList\n String,String[] "]
101638[label="classType_lfno_classOrInterfaceType\n String "]
101639[label="arrayType\n String[] "]
111640[label="classType_lfno_classOrInterfaceType\n String "]
111641[label="dims\n [] "]
71642[label="variableDeclaratorId\n testingDataSet "]
41643[label="block\n {for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;} "]
51644[label="blockStatements\n for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis; "]
61645[label="enhancedForStatement\n for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}} "]
71646[label="unannClassOrInterfaceType\n Map.Entry<String,String[]> "]
81647[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
81648[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String[]> "]
91649[label="typeArguments\n <String,String[]> "]
101650[label="typeArgumentList\n String,String[] "]
111651[label="classType_lfno_classOrInterfaceType\n String "]
111652[label="arrayType\n String[] "]
121653[label="classType_lfno_classOrInterfaceType\n String "]
121654[label="dims\n [] "]
71655[label="variableDeclaratorId\n entry "]
71656[label="methodInvocation_lfno_primary\n testingDataSet.entrySet() "]
81657[label="typeName\n testingDataSet "]
71658[label="block\n {for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}} "]
81659[label="enhancedForStatement\n for(Stringdocument:entry.getValue()){add(entry.getKey(),document);} "]
91660[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91661[label="variableDeclaratorId\n document "]
91662[label="methodInvocation_lfno_primary\n entry.getValue() "]
101663[label="typeName\n entry "]
91664[label="block\n {add(entry.getKey(),document);} "]
101665[label="expressionStatement\n add(entry.getKey(),document); "]
111666[label="methodInvocation\n add(entry.getKey(),document) "]
121667[label="methodName\n add "]
121668[label="argumentList\n entry.getKey(),document "]
131669[label="methodInvocation_lfno_primary\n entry.getKey() "]
141670[label="typeName\n entry "]
131671[label="expressionName\n document "]
61672[label="returnStatement\n returnthis; "]
71673[label="primaryNoNewArray_lfno_primary\n this "]
01674[label="compilationUnit\n packagecom.hankcs.hanlp.dependency;importcom.hankcs.hanlp.HanLP;importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLSentence;importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLWord;importcom.hankcs.hanlp.corpus.io.IOUtil;importcom.hankcs.hanlp.seg.Segment;importcom.hankcs.hanlp.tokenizer.NLPTokenizer;importcom.hankcs.hanlp.utility.GlobalObjectPool;importjava.util.Map;importjava.util.TreeMap;publicabstractclassAbstractDependencyParserimplementsIDependencyParser{privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true);privateMap<String,String>deprelTranslater;privatebooleanenableDeprelTranslater;@OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;}@OverridepublicSegmentgetSegment(){returnsegment;}@OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;}@OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;}@OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;}publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;}@OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;}}<EOF> "]
11675[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency; "]
21676[label="packageName\n com.hankcs.hanlp.dependency "]
31677[label="packageName\n com.hankcs.hanlp "]
41678[label="packageName\n com.hankcs "]
51679[label="packageName\n com "]
11680[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.HanLP; "]
21681[label="typeName\n com.hankcs.hanlp.HanLP "]
31682[label="packageOrTypeName\n com.hankcs.hanlp "]
41683[label="packageOrTypeName\n com.hankcs "]
51684[label="packageOrTypeName\n com "]
11685[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLSentence; "]
21686[label="typeName\n com.hankcs.hanlp.corpus.dependency.CoNll.CoNLLSentence "]
31687[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency.CoNll "]
41688[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency "]
51689[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
61690[label="packageOrTypeName\n com.hankcs.hanlp "]
71691[label="packageOrTypeName\n com.hankcs "]
81692[label="packageOrTypeName\n com "]
11693[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLWord; "]
21694[label="typeName\n com.hankcs.hanlp.corpus.dependency.CoNll.CoNLLWord "]
31695[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency.CoNll "]
41696[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency "]
51697[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
61698[label="packageOrTypeName\n com.hankcs.hanlp "]
71699[label="packageOrTypeName\n com.hankcs "]
81700[label="packageOrTypeName\n com "]
11701[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
21702[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
31703[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
41704[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
51705[label="packageOrTypeName\n com.hankcs.hanlp "]
61706[label="packageOrTypeName\n com.hankcs "]
71707[label="packageOrTypeName\n com "]
11708[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.Segment; "]
21709[label="typeName\n com.hankcs.hanlp.seg.Segment "]
31710[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
41711[label="packageOrTypeName\n com.hankcs.hanlp "]
51712[label="packageOrTypeName\n com.hankcs "]
61713[label="packageOrTypeName\n com "]
11714[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.tokenizer.NLPTokenizer; "]
21715[label="typeName\n com.hankcs.hanlp.tokenizer.NLPTokenizer "]
31716[label="packageOrTypeName\n com.hankcs.hanlp.tokenizer "]
41717[label="packageOrTypeName\n com.hankcs.hanlp "]
51718[label="packageOrTypeName\n com.hankcs "]
61719[label="packageOrTypeName\n com "]
11720[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.GlobalObjectPool; "]
21721[label="typeName\n com.hankcs.hanlp.utility.GlobalObjectPool "]
31722[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
41723[label="packageOrTypeName\n com.hankcs.hanlp "]
51724[label="packageOrTypeName\n com.hankcs "]
61725[label="packageOrTypeName\n com "]
11726[label="singleTypeImportDeclaration\n importjava.util.Map; "]
21727[label="typeName\n java.util.Map "]
31728[label="packageOrTypeName\n java.util "]
41729[label="packageOrTypeName\n java "]
11730[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
21731[label="typeName\n java.util.TreeMap "]
31732[label="packageOrTypeName\n java.util "]
41733[label="packageOrTypeName\n java "]
11734[label="normalClassDeclaration\n publicabstractclassAbstractDependencyParserimplementsIDependencyParser{privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true);privateMap<String,String>deprelTranslater;privatebooleanenableDeprelTranslater;@OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;}@OverridepublicSegmentgetSegment(){returnsegment;}@OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;}@OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;}@OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;}publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;}@OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;}} "]
21735[label="classModifier\n public "]
21736[label="classModifier\n abstract "]
21737[label="superinterfaces\n implementsIDependencyParser "]
31738[label="classType\n IDependencyParser "]
21739[label="classBody\n {privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true);privateMap<String,String>deprelTranslater;privatebooleanenableDeprelTranslater;@OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;}@OverridepublicSegmentgetSegment(){returnsegment;}@OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;}@OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;}@OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;}publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;}@OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;}} "]
31740[label="fieldDeclaration\n privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true); "]
41741[label="fieldModifier\n private "]
41742[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
41743[label="variableDeclarator\n segment=HanLP.newSegment().enablePartOfSpeechTagging(true) "]
51744[label="variableDeclaratorId\n segment "]
51745[label="primary\n HanLP.newSegment().enablePartOfSpeechTagging(true) "]
61746[label="methodInvocation_lfno_primary\n HanLP.newSegment() "]
71747[label="typeName\n HanLP "]
61748[label="methodInvocation_lf_primary\n .enablePartOfSpeechTagging(true) "]
71749[label="literal\n true "]
31750[label="fieldDeclaration\n privateMap<String,String>deprelTranslater; "]
41751[label="fieldModifier\n private "]
41752[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
51753[label="typeArguments\n <String,String> "]
61754[label="typeArgumentList\n String,String "]
71755[label="classType_lfno_classOrInterfaceType\n String "]
71756[label="classType_lfno_classOrInterfaceType\n String "]
41757[label="variableDeclaratorId\n deprelTranslater "]
31758[label="fieldDeclaration\n privatebooleanenableDeprelTranslater; "]
41759[label="fieldModifier\n private "]
41760[label="unannPrimitiveType\n boolean "]
41761[label="variableDeclaratorId\n enableDeprelTranslater "]
31762[label="methodDeclaration\n @OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;} "]
41763[label="markerAnnotation\n @Override "]
51764[label="typeName\n Override "]
41765[label="methodModifier\n public "]
41766[label="methodHeader\n CoNLLSentenceparse(Stringsentence) "]
51767[label="unannClassType_lfno_unannClassOrInterfaceType\n CoNLLSentence "]
51768[label="methodDeclarator\n parse(Stringsentence) "]
61769[label="formalParameter\n Stringsentence "]
71770[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
71771[label="variableDeclaratorId\n sentence "]
41772[label="block\n {assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;} "]
51773[label="blockStatements\n assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput; "]
61774[label="assertStatement\n assertsentence!=null; "]
71775[label="equalityExpression\n sentence!=null "]
81776[label="expressionName\n sentence "]
81777[label="literal\n null "]
61778[label="localVariableDeclarationStatement\n CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray())); "]
71779[label="localVariableDeclaration\n CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray())) "]
81780[label="unannClassType_lfno_unannClassOrInterfaceType\n CoNLLSentence "]
81781[label="variableDeclarator\n output=parse(segment.seg(sentence.toCharArray())) "]
91782[label="variableDeclaratorId\n output "]
91783[label="methodInvocation_lfno_primary\n parse(segment.seg(sentence.toCharArray())) "]
101784[label="methodName\n parse "]
101785[label="methodInvocation_lfno_primary\n segment.seg(sentence.toCharArray()) "]
111786[label="typeName\n segment "]
111787[label="methodInvocation_lfno_primary\n sentence.toCharArray() "]
121788[label="typeName\n sentence "]
61789[label="ifThenStatement\n if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}} "]
71790[label="conditionalAndExpression\n enableDeprelTranslater&&deprelTranslater!=null "]
81791[label="expressionName\n enableDeprelTranslater "]
81792[label="equalityExpression\n deprelTranslater!=null "]
91793[label="expressionName\n deprelTranslater "]
91794[label="literal\n null "]
71795[label="block\n {for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}} "]
81796[label="enhancedForStatement\n for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;} "]
91797[label="unannClassType_lfno_unannClassOrInterfaceType\n CoNLLWord "]
91798[label="variableDeclaratorId\n word "]
91799[label="expressionName\n output "]
91800[label="block\n {StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;} "]
101801[label="blockStatements\n StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel; "]
111802[label="localVariableDeclarationStatement\n StringtranslatedDeprel=deprelTranslater.get(word.DEPREL); "]
121803[label="localVariableDeclaration\n StringtranslatedDeprel=deprelTranslater.get(word.DEPREL) "]
131804[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
131805[label="variableDeclarator\n translatedDeprel=deprelTranslater.get(word.DEPREL) "]
141806[label="variableDeclaratorId\n translatedDeprel "]
141807[label="methodInvocation_lfno_primary\n deprelTranslater.get(word.DEPREL) "]
151808[label="typeName\n deprelTranslater "]
151809[label="expressionName\n word.DEPREL "]
161810[label="ambiguousName\n word "]
111811[label="expressionStatement\n word.DEPREL=translatedDeprel; "]
121812[label="assignment\n word.DEPREL=translatedDeprel "]
131813[label="expressionName\n word.DEPREL "]
141814[label="ambiguousName\n word "]
131815[label="assignmentOperator\n = "]
131816[label="expressionName\n translatedDeprel "]
61817[label="returnStatement\n returnoutput; "]
71818[label="expressionName\n output "]
31819[label="methodDeclaration\n @OverridepublicSegmentgetSegment(){returnsegment;} "]
41820[label="markerAnnotation\n @Override "]
51821[label="typeName\n Override "]
41822[label="methodModifier\n public "]
41823[label="methodHeader\n SegmentgetSegment() "]
51824[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
51825[label="methodDeclarator\n getSegment() "]
41826[label="block\n {returnsegment;} "]
51827[label="returnStatement\n returnsegment; "]
61828[label="expressionName\n segment "]
31829[label="methodDeclaration\n @OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;} "]
41830[label="markerAnnotation\n @Override "]
51831[label="typeName\n Override "]
41832[label="methodModifier\n public "]
41833[label="methodHeader\n IDependencyParsersetSegment(Segmentsegment) "]
51834[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51835[label="methodDeclarator\n setSegment(Segmentsegment) "]
61836[label="formalParameter\n Segmentsegment "]
71837[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
71838[label="variableDeclaratorId\n segment "]
41839[label="block\n {this.segment=segment;returnthis;} "]
51840[label="blockStatements\n this.segment=segment;returnthis; "]
61841[label="expressionStatement\n this.segment=segment; "]
71842[label="assignment\n this.segment=segment "]
81843[label="fieldAccess\n this.segment "]
91844[label="primaryNoNewArray_lfno_primary\n this "]
81845[label="assignmentOperator\n = "]
81846[label="expressionName\n segment "]
61847[label="returnStatement\n returnthis; "]
71848[label="primaryNoNewArray_lfno_primary\n this "]
31849[label="methodDeclaration\n @OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;} "]
41850[label="markerAnnotation\n @Override "]
51851[label="typeName\n Override "]
41852[label="methodModifier\n public "]
41853[label="methodHeader\n Map<String,String>getDeprelTranslator() "]
51854[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
61855[label="typeArguments\n <String,String> "]
71856[label="typeArgumentList\n String,String "]
81857[label="classType_lfno_classOrInterfaceType\n String "]
81858[label="classType_lfno_classOrInterfaceType\n String "]
51859[label="methodDeclarator\n getDeprelTranslator() "]
41860[label="block\n {returndeprelTranslater;} "]
51861[label="returnStatement\n returndeprelTranslater; "]
61862[label="expressionName\n deprelTranslater "]
31863[label="methodDeclaration\n @OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;} "]
41864[label="markerAnnotation\n @Override "]
51865[label="typeName\n Override "]
41866[label="methodModifier\n public "]
41867[label="methodHeader\n IDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator) "]
51868[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51869[label="methodDeclarator\n setDeprelTranslator(Map<String,String>deprelTranslator) "]
61870[label="formalParameter\n Map<String,String>deprelTranslator "]
71871[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
81872[label="typeArguments\n <String,String> "]
91873[label="typeArgumentList\n String,String "]
101874[label="classType_lfno_classOrInterfaceType\n String "]
101875[label="classType_lfno_classOrInterfaceType\n String "]
71876[label="variableDeclaratorId\n deprelTranslator "]
41877[label="block\n {this.deprelTranslater=deprelTranslator;returnthis;} "]
51878[label="blockStatements\n this.deprelTranslater=deprelTranslator;returnthis; "]
61879[label="expressionStatement\n this.deprelTranslater=deprelTranslator; "]
71880[label="assignment\n this.deprelTranslater=deprelTranslator "]
81881[label="fieldAccess\n this.deprelTranslater "]
91882[label="primaryNoNewArray_lfno_primary\n this "]
81883[label="assignmentOperator\n = "]
81884[label="expressionName\n deprelTranslator "]
61885[label="returnStatement\n returnthis; "]
71886[label="primaryNoNewArray_lfno_primary\n this "]
31887[label="methodDeclaration\n publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;} "]
41888[label="methodModifier\n public "]
41889[label="methodHeader\n IDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath) "]
51890[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51891[label="methodDeclarator\n setDeprelTranslater(StringdeprelTranslatorPath) "]
61892[label="formalParameter\n StringdeprelTranslatorPath "]
71893[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
71894[label="variableDeclaratorId\n deprelTranslatorPath "]
41895[label="block\n {deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;} "]
51896[label="blockStatements\n deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis; "]
61897[label="expressionStatement\n deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath); "]
71898[label="assignment\n deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath) "]
81899[label="expressionName\n deprelTranslater "]
81900[label="assignmentOperator\n = "]
81901[label="methodInvocation_lfno_primary\n GlobalObjectPool.get(deprelTranslatorPath) "]
91902[label="typeName\n GlobalObjectPool "]
91903[label="expressionName\n deprelTranslatorPath "]
61904[label="ifThenStatement\n if(deprelTranslater!=null)returnthis; "]
71905[label="equalityExpression\n deprelTranslater!=null "]
81906[label="expressionName\n deprelTranslater "]
81907[label="literal\n null "]
71908[label="returnStatement\n returnthis; "]
81909[label="primaryNoNewArray_lfno_primary\n this "]
61910[label="localVariableDeclarationStatement\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath); "]
71911[label="localVariableDeclaration\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath) "]
81912[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
91913[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
91914[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
81915[label="variableDeclarator\n iterator=newIOUtil.LineIterator(deprelTranslatorPath) "]
91916[label="variableDeclaratorId\n iterator "]
91917[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(deprelTranslatorPath) "]
101918[label="expressionName\n deprelTranslatorPath "]
61919[label="expressionStatement\n deprelTranslater=newTreeMap<String,String>(); "]
71920[label="assignment\n deprelTranslater=newTreeMap<String,String>() "]
81921[label="expressionName\n deprelTranslater "]
81922[label="assignmentOperator\n = "]
81923[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
91924[label="typeArguments\n <String,String> "]
101925[label="typeArgumentList\n String,String "]
111926[label="classType_lfno_classOrInterfaceType\n String "]
111927[label="classType_lfno_classOrInterfaceType\n String "]
61928[label="whileStatement\n while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);} "]
71929[label="methodInvocation_lfno_primary\n iterator.hasNext() "]
81930[label="typeName\n iterator "]
71931[label="block\n {String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);} "]
81932[label="blockStatements\n String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]); "]
91933[label="localVariableDeclarationStatement\n String[]args=iterator.next().split(\"\\s\"); "]
101934[label="localVariableDeclaration\n String[]args=iterator.next().split(\"\\s\") "]
111935[label="unannArrayType\n String[] "]
121936[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
121937[label="dims\n [] "]
111938[label="variableDeclarator\n args=iterator.next().split(\"\\s\") "]
121939[label="variableDeclaratorId\n args "]
121940[label="primary\n iterator.next().split(\"\\s\") "]
131941[label="methodInvocation_lfno_primary\n iterator.next() "]
141942[label="typeName\n iterator "]
131943[label="methodInvocation_lf_primary\n .split(\"\\s\") "]
141944[label="literal\n \"\\s\" "]
91945[label="expressionStatement\n deprelTranslater.put(args[0],args[1]); "]
101946[label="methodInvocation\n deprelTranslater.put(args[0],args[1]) "]
111947[label="typeName\n deprelTranslater "]
111948[label="argumentList\n args[0],args[1] "]
121949[label="arrayAccess_lfno_primary\n args[0] "]
131950[label="expressionName\n args "]
131951[label="literal\n 0 "]
121952[label="arrayAccess_lfno_primary\n args[1] "]
131953[label="expressionName\n args "]
131954[label="literal\n 1 "]
61955[label="ifThenStatement\n if(deprelTranslater.size()==0){deprelTranslater=null;} "]
71956[label="equalityExpression\n deprelTranslater.size()==0 "]
81957[label="methodInvocation_lfno_primary\n deprelTranslater.size() "]
91958[label="typeName\n deprelTranslater "]
81959[label="literal\n 0 "]
71960[label="block\n {deprelTranslater=null;} "]
81961[label="expressionStatement\n deprelTranslater=null; "]
91962[label="assignment\n deprelTranslater=null "]
101963[label="expressionName\n deprelTranslater "]
101964[label="assignmentOperator\n = "]
101965[label="literal\n null "]
61966[label="expressionStatement\n GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater); "]
71967[label="methodInvocation\n GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater) "]
81968[label="typeName\n GlobalObjectPool "]
81969[label="argumentList\n deprelTranslatorPath,deprelTranslater "]
91970[label="expressionName\n deprelTranslatorPath "]
91971[label="expressionName\n deprelTranslater "]
61972[label="returnStatement\n returnthis; "]
71973[label="primaryNoNewArray_lfno_primary\n this "]
31974[label="methodDeclaration\n @OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;} "]
41975[label="markerAnnotation\n @Override "]
51976[label="typeName\n Override "]
41977[label="methodModifier\n public "]
41978[label="methodHeader\n IDependencyParserenableDeprelTranslator(booleanenable) "]
51979[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51980[label="methodDeclarator\n enableDeprelTranslator(booleanenable) "]
61981[label="formalParameter\n booleanenable "]
71982[label="unannPrimitiveType\n boolean "]
71983[label="variableDeclaratorId\n enable "]
41984[label="block\n {enableDeprelTranslater=enable;returnthis;} "]
51985[label="blockStatements\n enableDeprelTranslater=enable;returnthis; "]
61986[label="expressionStatement\n enableDeprelTranslater=enable; "]
71987[label="assignment\n enableDeprelTranslater=enable "]
81988[label="expressionName\n enableDeprelTranslater "]
81989[label="assignmentOperator\n = "]
81990[label="expressionName\n enable "]
61991[label="returnStatement\n returnthis; "]
71992[label="primaryNoNewArray_lfno_primary\n this "]
01993[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;publicclassAbstractInexactActionimplementsComparable<AbstractInexactAction>{intseed;publicAbstractInexactAction(){}AbstractInexactAction(intname,intrel){seed=rel<<6|name;}publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);}@Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;}publicintname(){return(seed&0x3f);}publicintrel(){return(seed>>6);}}<EOF> "]
11994[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
21995[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
31996[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
41997[label="packageName\n com.hankcs.hanlp.dependency "]
51998[label="packageName\n com.hankcs.hanlp "]
61999[label="packageName\n com.hankcs "]
72000[label="packageName\n com "]
12001[label="normalClassDeclaration\n publicclassAbstractInexactActionimplementsComparable<AbstractInexactAction>{intseed;publicAbstractInexactAction(){}AbstractInexactAction(intname,intrel){seed=rel<<6|name;}publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);}@Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;}publicintname(){return(seed&0x3f);}publicintrel(){return(seed>>6);}} "]
22002[label="classModifier\n public "]
22003[label="superinterfaces\n implementsComparable<AbstractInexactAction> "]
32004[label="classType\n Comparable<AbstractInexactAction> "]
42005[label="typeArguments\n <AbstractInexactAction> "]
52006[label="classType_lfno_classOrInterfaceType\n AbstractInexactAction "]
22007[label="classBody\n {intseed;publicAbstractInexactAction(){}AbstractInexactAction(intname,intrel){seed=rel<<6|name;}publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);}@Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;}publicintname(){return(seed&0x3f);}publicintrel(){return(seed>>6);}} "]
32008[label="fieldDeclaration\n intseed; "]
42009[label="integralType\n int "]
42010[label="variableDeclaratorId\n seed "]
32011[label="constructorDeclaration\n publicAbstractInexactAction(){} "]
42012[label="constructorModifier\n public "]
42013[label="constructorDeclarator\n AbstractInexactAction() "]
52014[label="simpleTypeName\n AbstractInexactAction "]
42015[label="constructorBody\n {} "]
32016[label="constructorDeclaration\n AbstractInexactAction(intname,intrel){seed=rel<<6|name;} "]
42017[label="constructorDeclarator\n AbstractInexactAction(intname,intrel) "]
52018[label="simpleTypeName\n AbstractInexactAction "]
52019[label="formalParameterList\n intname,intrel "]
62020[label="formalParameter\n intname "]
72021[label="integralType\n int "]
72022[label="variableDeclaratorId\n name "]
62023[label="formalParameter\n intrel "]
72024[label="integralType\n int "]
72025[label="variableDeclaratorId\n rel "]
42026[label="constructorBody\n {seed=rel<<6|name;} "]
52027[label="expressionStatement\n seed=rel<<6|name; "]
62028[label="assignment\n seed=rel<<6|name "]
72029[label="expressionName\n seed "]
72030[label="assignmentOperator\n = "]
72031[label="inclusiveOrExpression\n rel<<6|name "]
82032[label="shiftExpression\n rel<<6 "]
92033[label="expressionName\n rel "]
92034[label="literal\n 6 "]
82035[label="expressionName\n name "]
32036[label="methodDeclaration\n publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);} "]
42037[label="methodModifier\n public "]
42038[label="methodHeader\n intcompareTo(AbstractInexactActiono) "]
52039[label="integralType\n int "]
52040[label="methodDeclarator\n compareTo(AbstractInexactActiono) "]
62041[label="formalParameter\n AbstractInexactActiono "]
72042[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractInexactAction "]
72043[label="variableDeclaratorId\n o "]
42044[label="block\n {returnnewInteger(seed).compareTo(o.seed);} "]
52045[label="returnStatement\n returnnewInteger(seed).compareTo(o.seed); "]
62046[label="primary\n newInteger(seed).compareTo(o.seed) "]
72047[label="classInstanceCreationExpression_lfno_primary\n newInteger(seed) "]
82048[label="expressionName\n seed "]
72049[label="methodInvocation_lf_primary\n .compareTo(o.seed) "]
82050[label="expressionName\n o.seed "]
92051[label="ambiguousName\n o "]
32052[label="methodDeclaration\n @Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;} "]
42053[label="markerAnnotation\n @Override "]
52054[label="typeName\n Override "]
42055[label="methodModifier\n public "]
42056[label="methodHeader\n booleanequals(Objectobj) "]
52057[label="unannPrimitiveType\n boolean "]
52058[label="methodDeclarator\n equals(Objectobj) "]
62059[label="formalParameter\n Objectobj "]
72060[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
72061[label="variableDeclaratorId\n obj "]
42062[label="block\n {if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;} "]
52063[label="blockStatements\n if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed; "]
62064[label="ifThenStatement\n if(!(objinstanceofAbstractInexactAction))returnfalse; "]
72065[label="unaryExpressionNotPlusMinus\n !(objinstanceofAbstractInexactAction) "]
82066[label="primaryNoNewArray_lfno_primary\n (objinstanceofAbstractInexactAction) "]
92067[label="relationalExpression\n objinstanceofAbstractInexactAction "]
102068[label="expressionName\n obj "]
102069[label="classType_lfno_classOrInterfaceType\n AbstractInexactAction "]
72070[label="returnStatement\n returnfalse; "]
82071[label="literal\n false "]
62072[label="localVariableDeclarationStatement\n AbstractInexactActiono=(AbstractInexactAction)obj; "]
72073[label="localVariableDeclaration\n AbstractInexactActiono=(AbstractInexactAction)obj "]
82074[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractInexactAction "]
82075[label="variableDeclarator\n o=(AbstractInexactAction)obj "]
92076[label="variableDeclaratorId\n o "]
92077[label="castExpression\n (AbstractInexactAction)obj "]
102078[label="classType_lfno_classOrInterfaceType\n AbstractInexactAction "]
102079[label="expressionName\n obj "]
62080[label="returnStatement\n returnseed==o.seed; "]
72081[label="equalityExpression\n seed==o.seed "]
82082[label="expressionName\n seed "]
82083[label="expressionName\n o.seed "]
92084[label="ambiguousName\n o "]
32085[label="methodDeclaration\n publicintname(){return(seed&0x3f);} "]
42086[label="methodModifier\n public "]
42087[label="methodHeader\n intname() "]
52088[label="integralType\n int "]
52089[label="methodDeclarator\n name() "]
42090[label="block\n {return(seed&0x3f);} "]
52091[label="returnStatement\n return(seed&0x3f); "]
62092[label="primaryNoNewArray_lfno_primary\n (seed&0x3f) "]
72093[label="andExpression\n seed&0x3f "]
82094[label="expressionName\n seed "]
82095[label="literal\n 0x3f "]
32096[label="methodDeclaration\n publicintrel(){return(seed>>6);} "]
42097[label="methodModifier\n public "]
42098[label="methodHeader\n intrel() "]
52099[label="integralType\n int "]
52100[label="methodDeclarator\n rel() "]
42101[label="block\n {return(seed>>6);} "]
52102[label="returnStatement\n return(seed>>6); "]
62103[label="primaryNoNewArray_lfno_primary\n (seed>>6) "]
72104[label="shiftExpression\n seed>>6 "]
82105[label="expressionName\n seed "]
82106[label="literal\n 6 "]
02107[label="compilationUnit\n packagecom.hankcs.hanlp.classification.models;importcom.hankcs.hanlp.collection.trie.bintrie.BinTrie;importcom.hankcs.hanlp.classification.tokenizers.ITokenizer;importjava.io.*;publicclassAbstractModelimplementsSerializable{publicString[]catalog;publicITokenizertokenizer;publicBinTrie<Integer>wordIdTrie;}<EOF> "]
12108[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.models; "]
22109[label="packageName\n com.hankcs.hanlp.classification.models "]
32110[label="packageName\n com.hankcs.hanlp.classification "]
42111[label="packageName\n com.hankcs.hanlp "]
52112[label="packageName\n com.hankcs "]
62113[label="packageName\n com "]
12114[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.bintrie.BinTrie; "]
22115[label="typeName\n com.hankcs.hanlp.collection.trie.bintrie.BinTrie "]
32116[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie.bintrie "]
42117[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
52118[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
62119[label="packageOrTypeName\n com.hankcs.hanlp "]
72120[label="packageOrTypeName\n com.hankcs "]
82121[label="packageOrTypeName\n com "]
12122[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.ITokenizer; "]
22123[label="typeName\n com.hankcs.hanlp.classification.tokenizers.ITokenizer "]
32124[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
42125[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
52126[label="packageOrTypeName\n com.hankcs.hanlp "]
62127[label="packageOrTypeName\n com.hankcs "]
72128[label="packageOrTypeName\n com "]
12129[label="typeImportOnDemandDeclaration\n importjava.io.*; "]
22130[label="packageOrTypeName\n java.io "]
32131[label="packageOrTypeName\n java "]
12132[label="normalClassDeclaration\n publicclassAbstractModelimplementsSerializable{publicString[]catalog;publicITokenizertokenizer;publicBinTrie<Integer>wordIdTrie;} "]
22133[label="classModifier\n public "]
22134[label="superinterfaces\n implementsSerializable "]
32135[label="classType\n Serializable "]
22136[label="classBody\n {publicString[]catalog;publicITokenizertokenizer;publicBinTrie<Integer>wordIdTrie;} "]
32137[label="fieldDeclaration\n publicString[]catalog; "]
42138[label="fieldModifier\n public "]
42139[label="unannArrayType\n String[] "]
52140[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
52141[label="dims\n [] "]
42142[label="variableDeclaratorId\n catalog "]
32143[label="fieldDeclaration\n publicITokenizertokenizer; "]
42144[label="fieldModifier\n public "]
42145[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
42146[label="variableDeclaratorId\n tokenizer "]
32147[label="fieldDeclaration\n publicBinTrie<Integer>wordIdTrie; "]
42148[label="fieldModifier\n public "]
42149[label="unannClassType_lfno_unannClassOrInterfaceType\n BinTrie<Integer> "]
52150[label="typeArguments\n <Integer> "]
62151[label="classType_lfno_classOrInterfaceType\n Integer "]
42152[label="variableDeclaratorId\n wordIdTrie "]
02153[label="compilationUnit\n packagecom.hankcs.hanlp.mining.word2vec;publicabstractclassAbstractTrainer{protectedabstractvoidlocalUsage();protectedvoidparamDesc(Stringparam,Stringdesc){System.err.printf(\"\t%s\n\t\t%s\n\",param,desc);}protectedvoidusage(){System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0);}protectedintargPos(Stringparam,String[]args){returnargPos(param,args,true);}protectedintargPos(Stringparam,String[]args,booleancheckArgNum){for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1;}protectedvoidsetConfig(String[]args,Configconfig){inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1]));}}<EOF> "]
12154[label="packageDeclaration\n packagecom.hankcs.hanlp.mining.word2vec; "]
22155[label="packageName\n com.hankcs.hanlp.mining.word2vec "]
32156[label="packageName\n com.hankcs.hanlp.mining "]
42157[label="packageName\n com.hankcs.hanlp "]
52158[label="packageName\n com.hankcs "]
62159[label="packageName\n com "]
12160[label="normalClassDeclaration\n publicabstractclassAbstractTrainer{protectedabstractvoidlocalUsage();protectedvoidparamDesc(Stringparam,Stringdesc){System.err.printf(\"\t%s\n\t\t%s\n\",param,desc);}protectedvoidusage(){System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0);}protectedintargPos(Stringparam,String[]args){returnargPos(param,args,true);}protectedintargPos(Stringparam,String[]args,booleancheckArgNum){for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1;}protectedvoidsetConfig(String[]args,Configconfig){inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1]));}} "]
22161[label="classModifier\n public "]
22162[label="classModifier\n abstract "]
22163[label="classBody\n {protectedabstractvoidlocalUsage();protectedvoidparamDesc(Stringparam,Stringdesc){System.err.printf(\"\t%s\n\t\t%s\n\",param,desc);}protectedvoidusage(){System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0);}protectedintargPos(Stringparam,String[]args){returnargPos(param,args,true);}protectedintargPos(Stringparam,String[]args,booleancheckArgNum){for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1;}protectedvoidsetConfig(String[]args,Configconfig){inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1]));}} "]
32164[label="methodDeclaration\n protectedabstractvoidlocalUsage(); "]
42165[label="methodModifier\n protected "]
42166[label="methodModifier\n abstract "]
42167[label="methodHeader\n voidlocalUsage() "]
52168[label="result\n void "]
52169[label="methodDeclarator\n localUsage() "]
42170[label="methodBody\n ; "]
32171[label="methodDeclaration\n protectedvoidparamDesc(Stringparam,Stringdesc){System.err.printf(\"\t%s\n\t\t%s\n\",param,desc);} "]
42172[label="methodModifier\n protected "]
42173[label="methodHeader\n voidparamDesc(Stringparam,Stringdesc) "]
52174[label="result\n void "]
52175[label="methodDeclarator\n paramDesc(Stringparam,Stringdesc) "]
62176[label="formalParameterList\n Stringparam,Stringdesc "]
72177[label="formalParameter\n Stringparam "]
82178[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
82179[label="variableDeclaratorId\n param "]
72180[label="formalParameter\n Stringdesc "]
82181[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
82182[label="variableDeclaratorId\n desc "]
42183[label="block\n {System.err.printf(\"\t%s\n\t\t%s\n\",param,desc);} "]
52184[label="expressionStatement\n System.err.printf(\"\t%s\n\t\t%s\n\",param,desc); "]
62185[label="methodInvocation\n System.err.printf(\"\t%s\n\t\t%s\n\",param,desc) "]
72186[label="typeName\n System.err "]
82187[label="packageOrTypeName\n System "]
72188[label="argumentList\n \"\t%s\n\t\t%s\n\",param,desc "]
82189[label="literal\n \"\t%s\n\t\t%s\n\" "]
82190[label="expressionName\n param "]
82191[label="expressionName\n desc "]
32192[label="methodDeclaration\n protectedvoidusage(){System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0);} "]
42193[label="methodModifier\n protected "]
42194[label="methodHeader\n voidusage() "]
52195[label="result\n void "]
52196[label="methodDeclarator\n usage() "]
42197[label="block\n {System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0);} "]
52198[label="blockStatements\n System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0); "]
62199[label="expressionStatement\n System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\"); "]
72200[label="methodInvocation\n System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\") "]
82201[label="typeName\n System.err "]
92202[label="packageOrTypeName\n System "]
82203[label="literal\n \"word2vec Java toolkit v 0.1c\n\n\" "]
62204[label="expressionStatement\n System.err.printf(\"Options:\n\"); "]
72205[label="methodInvocation\n System.err.printf(\"Options:\n\") "]
82206[label="typeName\n System.err "]
92207[label="packageOrTypeName\n System "]
82208[label="literal\n \"Options:\n\" "]
62209[label="expressionStatement\n System.err.printf(\"Parameters for training:\n\"); "]
72210[label="methodInvocation\n System.err.printf(\"Parameters for training:\n\") "]
82211[label="typeName\n System.err "]
92212[label="packageOrTypeName\n System "]
82213[label="literal\n \"Parameters for training:\n\" "]
62214[label="expressionStatement\n paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\"); "]
72215[label="methodInvocation\n paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\") "]
82216[label="methodName\n paramDesc "]
82217[label="argumentList\n \"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\" "]
92218[label="literal\n \"-output <file>\" "]
92219[label="literal\n \"Use <file> to save the resulting word vectors / word clusters\" "]
62220[label="expressionStatement\n paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\"); "]
72221[label="methodInvocation\n paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\") "]
82222[label="methodName\n paramDesc "]
82223[label="argumentList\n \"-size <int>\",\"Set size of word vectors; default is 100\" "]
92224[label="literal\n \"-size <int>\" "]
92225[label="literal\n \"Set size of word vectors; default is 100\" "]
62226[label="expressionStatement\n paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\"); "]
72227[label="methodInvocation\n paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\") "]
82228[label="methodName\n paramDesc "]
82229[label="argumentList\n \"-window <int>\",\"Set max skip length between words; default is 5\" "]
92230[label="literal\n \"-window <int>\" "]
92231[label="literal\n \"Set max skip length between words; default is 5\" "]
62232[label="expressionStatement\n paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\"); "]
72233[label="methodInvocation\n paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\") "]
82234[label="methodName\n paramDesc "]
82235[label="argumentList\n \"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\" "]
92236[label="literal\n \"-sample <float>\" "]
92237[label="additiveExpression\n \"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\" "]
102238[label="literal\n \"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\" "]
102239[label="literal\n \" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\" "]
62240[label="expressionStatement\n paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\"); "]
72241[label="methodInvocation\n paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\") "]
82242[label="methodName\n paramDesc "]
82243[label="argumentList\n \"-hs\",\"Use Hierarchical Softmax; default is not used\" "]
92244[label="literal\n \"-hs\" "]
92245[label="literal\n \"Use Hierarchical Softmax; default is not used\" "]
62246[label="expressionStatement\n paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\"); "]
72247[label="methodInvocation\n paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\") "]
82248[label="methodName\n paramDesc "]
82249[label="argumentList\n \"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\" "]
92250[label="literal\n \"-negative <int>\" "]
92251[label="literal\n \"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\" "]
62252[label="expressionStatement\n paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\"); "]
72253[label="methodInvocation\n paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\") "]
82254[label="methodName\n paramDesc "]
82255[label="argumentList\n \"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\" "]
92256[label="literal\n \"-threads <int>\" "]
92257[label="literal\n \"Use <int> threads (default is the cores of local machine)\" "]
62258[label="expressionStatement\n paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\"); "]
72259[label="methodInvocation\n paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\") "]
82260[label="methodName\n paramDesc "]
82261[label="argumentList\n \"-iter <int>\",\"Run more training iterations (default 5)\" "]
92262[label="literal\n \"-iter <int>\" "]
92263[label="literal\n \"Run more training iterations (default 5)\" "]
62264[label="expressionStatement\n paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\"); "]
72265[label="methodInvocation\n paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\") "]
82266[label="methodName\n paramDesc "]
82267[label="argumentList\n \"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\" "]
92268[label="literal\n \"-min-count <int>\" "]
92269[label="literal\n \"This will discard words that appear less than <int> times; default is 5\" "]
62270[label="expressionStatement\n paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\"); "]
72271[label="methodInvocation\n paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\") "]
82272[label="methodName\n paramDesc "]
82273[label="argumentList\n \"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\" "]
92274[label="literal\n \"-alpha <float>\" "]
92275[label="literal\n \"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\" "]
62276[label="expressionStatement\n paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\"); "]
72277[label="methodInvocation\n paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\") "]
82278[label="methodName\n paramDesc "]
82279[label="argumentList\n \"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\" "]
92280[label="literal\n \"-cbow\" "]
92281[label="literal\n \"Use the continuous bag of words model; default is skip-gram model\" "]
62282[label="expressionStatement\n localUsage(); "]
72283[label="methodInvocation\n localUsage() "]
82284[label="methodName\n localUsage "]
62285[label="expressionStatement\n System.exit(0); "]
72286[label="methodInvocation\n System.exit(0) "]
82287[label="typeName\n System "]
82288[label="literal\n 0 "]
32289[label="methodDeclaration\n protectedintargPos(Stringparam,String[]args){returnargPos(param,args,true);} "]
42290[label="methodModifier\n protected "]
42291[label="methodHeader\n intargPos(Stringparam,String[]args) "]
52292[label="integralType\n int "]
52293[label="methodDeclarator\n argPos(Stringparam,String[]args) "]
62294[label="formalParameterList\n Stringparam,String[]args "]
72295[label="formalParameter\n Stringparam "]
82296[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
82297[label="variableDeclaratorId\n param "]
72298[label="formalParameter\n String[]args "]
82299[label="unannArrayType\n String[] "]
92300[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
92301[label="dims\n [] "]
82302[label="variableDeclaratorId\n args "]
42303[label="block\n {returnargPos(param,args,true);} "]
52304[label="returnStatement\n returnargPos(param,args,true); "]
62305[label="methodInvocation_lfno_primary\n argPos(param,args,true) "]
72306[label="methodName\n argPos "]
72307[label="argumentList\n param,args,true "]
82308[label="expressionName\n param "]
82309[label="expressionName\n args "]
82310[label="literal\n true "]
32311[label="methodDeclaration\n protectedintargPos(Stringparam,String[]args,booleancheckArgNum){for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1;} "]
42312[label="methodModifier\n protected "]
42313[label="methodHeader\n intargPos(Stringparam,String[]args,booleancheckArgNum) "]
52314[label="integralType\n int "]
52315[label="methodDeclarator\n argPos(Stringparam,String[]args,booleancheckArgNum) "]
62316[label="formalParameterList\n Stringparam,String[]args,booleancheckArgNum "]
72317[label="formalParameters\n Stringparam,String[]args "]
82318[label="formalParameter\n Stringparam "]
92319[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
92320[label="variableDeclaratorId\n param "]
82321[label="formalParameter\n String[]args "]
92322[label="unannArrayType\n String[] "]
102323[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
102324[label="dims\n [] "]
92325[label="variableDeclaratorId\n args "]
72326[label="formalParameter\n booleancheckArgNum "]
82327[label="unannPrimitiveType\n boolean "]
82328[label="variableDeclaratorId\n checkArgNum "]
42329[label="block\n {for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1;} "]
52330[label="blockStatements\n for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1; "]
62331[label="basicForStatement\n for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}} "]
72332[label="localVariableDeclaration\n inti=0 "]
82333[label="integralType\n int "]
82334[label="variableDeclarator\n i=0 "]
92335[label="variableDeclaratorId\n i "]
92336[label="literal\n 0 "]
72337[label="relationalExpression\n i<args.length "]
82338[label="expressionName\n i "]
82339[label="expressionName\n args.length "]
92340[label="ambiguousName\n args "]
72341[label="postIncrementExpression\n i++ "]
82342[label="expressionName\n i "]
72343[label="block\n {if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}} "]
82344[label="ifThenStatement\n if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;} "]
92345[label="methodInvocation_lfno_primary\n param.equals(args[i]) "]
102346[label="typeName\n param "]
102347[label="arrayAccess_lfno_primary\n args[i] "]
112348[label="expressionName\n args "]
112349[label="expressionName\n i "]
92350[label="block\n {if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;} "]
102351[label="blockStatements\n if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni; "]
112352[label="ifThenStatement\n if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param)); "]
122353[label="conditionalAndExpression\n checkArgNum&&(i==args.length-1) "]
132354[label="expressionName\n checkArgNum "]
132355[label="primaryNoNewArray_lfno_primary\n (i==args.length-1) "]
142356[label="equalityExpression\n i==args.length-1 "]
152357[label="expressionName\n i "]
152358[label="additiveExpression\n args.length-1 "]
162359[label="expressionName\n args.length "]
172360[label="ambiguousName\n args "]
162361[label="literal\n 1 "]
122362[label="throwStatement\n thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param)); "]
132363[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(String.format(\"Argument missing for %s\",param)) "]
142364[label="methodInvocation_lfno_primary\n String.format(\"Argument missing for %s\",param) "]
152365[label="typeName\n String "]
152366[label="argumentList\n \"Argument missing for %s\",param "]
162367[label="literal\n \"Argument missing for %s\" "]
162368[label="expressionName\n param "]
112369[label="returnStatement\n returni; "]
122370[label="expressionName\n i "]
62371[label="returnStatement\n return-1; "]
72372[label="unaryExpression\n -1 "]
82373[label="literal\n 1 "]
32374[label="methodDeclaration\n protectedvoidsetConfig(String[]args,Configconfig){inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1]));} "]
42375[label="methodModifier\n protected "]
42376[label="methodHeader\n voidsetConfig(String[]args,Configconfig) "]
52377[label="result\n void "]
52378[label="methodDeclarator\n setConfig(String[]args,Configconfig) "]
62379[label="formalParameterList\n String[]args,Configconfig "]
72380[label="formalParameter\n String[]args "]
82381[label="unannArrayType\n String[] "]
92382[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
92383[label="dims\n [] "]
82384[label="variableDeclaratorId\n args "]
72385[label="formalParameter\n Configconfig "]
82386[label="unannClassType_lfno_unannClassOrInterfaceType\n Config "]
82387[label="variableDeclaratorId\n config "]
42388[label="block\n {inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1]));} "]
52389[label="blockStatements\n inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1])); "]
62390[label="localVariableDeclarationStatement\n inti; "]
72391[label="localVariableDeclaration\n inti "]
82392[label="integralType\n int "]
82393[label="variableDeclaratorId\n i "]
62394[label="ifThenStatement\n if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1])); "]
72395[label="relationalExpression\n (i=argPos(\"-size\",args))>=0 "]
82396[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-size\",args)) "]
92397[label="assignment\n i=argPos(\"-size\",args) "]
102398[label="expressionName\n i "]
102399[label="assignmentOperator\n = "]
102400[label="methodInvocation_lfno_primary\n argPos(\"-size\",args) "]
112401[label="methodName\n argPos "]
112402[label="argumentList\n \"-size\",args "]
122403[label="literal\n \"-size\" "]
122404[label="expressionName\n args "]
82405[label="literal\n 0 "]
72406[label="expressionStatement\n config.setLayer1Size(Integer.parseInt(args[i+1])); "]
82407[label="methodInvocation\n config.setLayer1Size(Integer.parseInt(args[i+1])) "]
92408[label="typeName\n config "]
92409[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102410[label="typeName\n Integer "]
102411[label="arrayAccess_lfno_primary\n args[i+1] "]
112412[label="expressionName\n args "]
112413[label="additiveExpression\n i+1 "]
122414[label="expressionName\n i "]
122415[label="literal\n 1 "]
62416[label="ifThenStatement\n if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]); "]
72417[label="relationalExpression\n (i=argPos(\"-output\",args))>=0 "]
82418[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-output\",args)) "]
92419[label="assignment\n i=argPos(\"-output\",args) "]
102420[label="expressionName\n i "]
102421[label="assignmentOperator\n = "]
102422[label="methodInvocation_lfno_primary\n argPos(\"-output\",args) "]
112423[label="methodName\n argPos "]
112424[label="argumentList\n \"-output\",args "]
122425[label="literal\n \"-output\" "]
122426[label="expressionName\n args "]
82427[label="literal\n 0 "]
72428[label="expressionStatement\n config.setOutputFile(args[i+1]); "]
82429[label="methodInvocation\n config.setOutputFile(args[i+1]) "]
92430[label="typeName\n config "]
92431[label="arrayAccess_lfno_primary\n args[i+1] "]
102432[label="expressionName\n args "]
102433[label="additiveExpression\n i+1 "]
112434[label="expressionName\n i "]
112435[label="literal\n 1 "]
62436[label="ifThenStatement\n if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1); "]
72437[label="relationalExpression\n (i=argPos(\"-cbow\",args))>=0 "]
82438[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-cbow\",args)) "]
92439[label="assignment\n i=argPos(\"-cbow\",args) "]
102440[label="expressionName\n i "]
102441[label="assignmentOperator\n = "]
102442[label="methodInvocation_lfno_primary\n argPos(\"-cbow\",args) "]
112443[label="methodName\n argPos "]
112444[label="argumentList\n \"-cbow\",args "]
122445[label="literal\n \"-cbow\" "]
122446[label="expressionName\n args "]
82447[label="literal\n 0 "]
72448[label="expressionStatement\n config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1); "]
82449[label="methodInvocation\n config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1) "]
92450[label="typeName\n config "]
92451[label="equalityExpression\n Integer.parseInt(args[i+1])==1 "]
102452[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
112453[label="typeName\n Integer "]
112454[label="arrayAccess_lfno_primary\n args[i+1] "]
122455[label="expressionName\n args "]
122456[label="additiveExpression\n i+1 "]
132457[label="expressionName\n i "]
132458[label="literal\n 1 "]
102459[label="literal\n 1 "]
62460[label="ifThenStatement\n if(config.useContinuousBagOfWords())config.setAlpha(0.05f); "]
72461[label="methodInvocation_lfno_primary\n config.useContinuousBagOfWords() "]
82462[label="typeName\n config "]
72463[label="expressionStatement\n config.setAlpha(0.05f); "]
82464[label="methodInvocation\n config.setAlpha(0.05f) "]
92465[label="typeName\n config "]
92466[label="literal\n 0.05f "]
62467[label="ifThenStatement\n if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1])); "]
72468[label="relationalExpression\n (i=argPos(\"-alpha\",args))>=0 "]
82469[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-alpha\",args)) "]
92470[label="assignment\n i=argPos(\"-alpha\",args) "]
102471[label="expressionName\n i "]
102472[label="assignmentOperator\n = "]
102473[label="methodInvocation_lfno_primary\n argPos(\"-alpha\",args) "]
112474[label="methodName\n argPos "]
112475[label="argumentList\n \"-alpha\",args "]
122476[label="literal\n \"-alpha\" "]
122477[label="expressionName\n args "]
82478[label="literal\n 0 "]
72479[label="expressionStatement\n config.setAlpha(Float.parseFloat(args[i+1])); "]
82480[label="methodInvocation\n config.setAlpha(Float.parseFloat(args[i+1])) "]
92481[label="typeName\n config "]
92482[label="methodInvocation_lfno_primary\n Float.parseFloat(args[i+1]) "]
102483[label="typeName\n Float "]
102484[label="arrayAccess_lfno_primary\n args[i+1] "]
112485[label="expressionName\n args "]
112486[label="additiveExpression\n i+1 "]
122487[label="expressionName\n i "]
122488[label="literal\n 1 "]
62489[label="ifThenStatement\n if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1])); "]
72490[label="relationalExpression\n (i=argPos(\"-window\",args))>=0 "]
82491[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-window\",args)) "]
92492[label="assignment\n i=argPos(\"-window\",args) "]
102493[label="expressionName\n i "]
102494[label="assignmentOperator\n = "]
102495[label="methodInvocation_lfno_primary\n argPos(\"-window\",args) "]
112496[label="methodName\n argPos "]
112497[label="argumentList\n \"-window\",args "]
122498[label="literal\n \"-window\" "]
122499[label="expressionName\n args "]
82500[label="literal\n 0 "]
72501[label="expressionStatement\n config.setWindow(Integer.parseInt(args[i+1])); "]
82502[label="methodInvocation\n config.setWindow(Integer.parseInt(args[i+1])) "]
92503[label="typeName\n config "]
92504[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102505[label="typeName\n Integer "]
102506[label="arrayAccess_lfno_primary\n args[i+1] "]
112507[label="expressionName\n args "]
112508[label="additiveExpression\n i+1 "]
122509[label="expressionName\n i "]
122510[label="literal\n 1 "]
62511[label="ifThenStatement\n if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1])); "]
72512[label="relationalExpression\n (i=argPos(\"-sample\",args))>=0 "]
82513[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-sample\",args)) "]
92514[label="assignment\n i=argPos(\"-sample\",args) "]
102515[label="expressionName\n i "]
102516[label="assignmentOperator\n = "]
102517[label="methodInvocation_lfno_primary\n argPos(\"-sample\",args) "]
112518[label="methodName\n argPos "]
112519[label="argumentList\n \"-sample\",args "]
122520[label="literal\n \"-sample\" "]
122521[label="expressionName\n args "]
82522[label="literal\n 0 "]
72523[label="expressionStatement\n config.setSample(Float.parseFloat(args[i+1])); "]
82524[label="methodInvocation\n config.setSample(Float.parseFloat(args[i+1])) "]
92525[label="typeName\n config "]
92526[label="methodInvocation_lfno_primary\n Float.parseFloat(args[i+1]) "]
102527[label="typeName\n Float "]
102528[label="arrayAccess_lfno_primary\n args[i+1] "]
112529[label="expressionName\n args "]
112530[label="additiveExpression\n i+1 "]
122531[label="expressionName\n i "]
122532[label="literal\n 1 "]
62533[label="ifThenStatement\n if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1); "]
72534[label="relationalExpression\n (i=argPos(\"-hs\",args))>=0 "]
82535[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-hs\",args)) "]
92536[label="assignment\n i=argPos(\"-hs\",args) "]
102537[label="expressionName\n i "]
102538[label="assignmentOperator\n = "]
102539[label="methodInvocation_lfno_primary\n argPos(\"-hs\",args) "]
112540[label="methodName\n argPos "]
112541[label="argumentList\n \"-hs\",args "]
122542[label="literal\n \"-hs\" "]
122543[label="expressionName\n args "]
82544[label="literal\n 0 "]
72545[label="expressionStatement\n config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1); "]
82546[label="methodInvocation\n config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1) "]
92547[label="typeName\n config "]
92548[label="equalityExpression\n Integer.parseInt(args[i+1])==1 "]
102549[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
112550[label="typeName\n Integer "]
112551[label="arrayAccess_lfno_primary\n args[i+1] "]
122552[label="expressionName\n args "]
122553[label="additiveExpression\n i+1 "]
132554[label="expressionName\n i "]
132555[label="literal\n 1 "]
102556[label="literal\n 1 "]
62557[label="ifThenStatement\n if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1])); "]
72558[label="relationalExpression\n (i=argPos(\"-negative\",args))>=0 "]
82559[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-negative\",args)) "]
92560[label="assignment\n i=argPos(\"-negative\",args) "]
102561[label="expressionName\n i "]
102562[label="assignmentOperator\n = "]
102563[label="methodInvocation_lfno_primary\n argPos(\"-negative\",args) "]
112564[label="methodName\n argPos "]
112565[label="argumentList\n \"-negative\",args "]
122566[label="literal\n \"-negative\" "]
122567[label="expressionName\n args "]
82568[label="literal\n 0 "]
72569[label="expressionStatement\n config.setNegative(Integer.parseInt(args[i+1])); "]
82570[label="methodInvocation\n config.setNegative(Integer.parseInt(args[i+1])) "]
92571[label="typeName\n config "]
92572[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102573[label="typeName\n Integer "]
102574[label="arrayAccess_lfno_primary\n args[i+1] "]
112575[label="expressionName\n args "]
112576[label="additiveExpression\n i+1 "]
122577[label="expressionName\n i "]
122578[label="literal\n 1 "]
62579[label="ifThenStatement\n if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1])); "]
72580[label="relationalExpression\n (i=argPos(\"-threads\",args))>=0 "]
82581[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-threads\",args)) "]
92582[label="assignment\n i=argPos(\"-threads\",args) "]
102583[label="expressionName\n i "]
102584[label="assignmentOperator\n = "]
102585[label="methodInvocation_lfno_primary\n argPos(\"-threads\",args) "]
112586[label="methodName\n argPos "]
112587[label="argumentList\n \"-threads\",args "]
122588[label="literal\n \"-threads\" "]
122589[label="expressionName\n args "]
82590[label="literal\n 0 "]
72591[label="expressionStatement\n config.setNumThreads(Integer.parseInt(args[i+1])); "]
82592[label="methodInvocation\n config.setNumThreads(Integer.parseInt(args[i+1])) "]
92593[label="typeName\n config "]
92594[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102595[label="typeName\n Integer "]
102596[label="arrayAccess_lfno_primary\n args[i+1] "]
112597[label="expressionName\n args "]
112598[label="additiveExpression\n i+1 "]
122599[label="expressionName\n i "]
122600[label="literal\n 1 "]
62601[label="ifThenStatement\n if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1])); "]
72602[label="relationalExpression\n (i=argPos(\"-iter\",args))>=0 "]
82603[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-iter\",args)) "]
92604[label="assignment\n i=argPos(\"-iter\",args) "]
102605[label="expressionName\n i "]
102606[label="assignmentOperator\n = "]
102607[label="methodInvocation_lfno_primary\n argPos(\"-iter\",args) "]
112608[label="methodName\n argPos "]
112609[label="argumentList\n \"-iter\",args "]
122610[label="literal\n \"-iter\" "]
122611[label="expressionName\n args "]
82612[label="literal\n 0 "]
72613[label="expressionStatement\n config.setIter(Integer.parseInt(args[i+1])); "]
82614[label="methodInvocation\n config.setIter(Integer.parseInt(args[i+1])) "]
92615[label="typeName\n config "]
92616[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102617[label="typeName\n Integer "]
102618[label="arrayAccess_lfno_primary\n args[i+1] "]
112619[label="expressionName\n args "]
112620[label="additiveExpression\n i+1 "]
122621[label="expressionName\n i "]
122622[label="literal\n 1 "]
62623[label="ifThenStatement\n if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1])); "]
72624[label="relationalExpression\n (i=argPos(\"-min-count\",args))>=0 "]
82625[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-min-count\",args)) "]
92626[label="assignment\n i=argPos(\"-min-count\",args) "]
102627[label="expressionName\n i "]
102628[label="assignmentOperator\n = "]
102629[label="methodInvocation_lfno_primary\n argPos(\"-min-count\",args) "]
112630[label="methodName\n argPos "]
112631[label="argumentList\n \"-min-count\",args "]
122632[label="literal\n \"-min-count\" "]
122633[label="expressionName\n args "]
82634[label="literal\n 0 "]
72635[label="expressionStatement\n config.setMinCount(Integer.parseInt(args[i+1])); "]
82636[label="methodInvocation\n config.setMinCount(Integer.parseInt(args[i+1])) "]
92637[label="typeName\n config "]
92638[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102639[label="typeName\n Integer "]
102640[label="arrayAccess_lfno_primary\n args[i+1] "]
112641[label="expressionName\n args "]
112642[label="additiveExpression\n i+1 "]
122643[label="expressionName\n i "]
122644[label="literal\n 1 "]
02645[label="compilationUnit\n packagecom.hankcs.hanlp.mining.word2vec;importcom.hankcs.hanlp.algorithm.MaxHeap;importjava.util.*;publicabstractclassAbstractVectorModel<K>{Map<K,Vector>storage;publicAbstractVectorModel(Map<K,Vector>storage){this.storage=storage;}publicAbstractVectorModel(){storage=newTreeMap<K,Vector>();}finalpublicVectorvector(Kkey){Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector;}publicfloatsimilarity(Kwhat,Kwith){VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith);}publicList<Map.Entry<K,Float>>nearest(Kkey,intsize){Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size);}privateList<Map.Entry<K,Float>>nearest(Kkey,Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector){returnnearest(vector,10);}publicList<Map.Entry<K,Float>>nearest(Kkey){returnnearest(key,10);}finalList<Map.Entry<K,Float>>queryNearest(Stringquery,intsize){if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();}}publicabstractVectorquery(Stringquery);publicintsize(){returnstorage.size();}publicintdimension(){if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size();}publicVectorremove(Kkey){returnstorage.remove(key);}}<EOF> "]
12646[label="packageDeclaration\n packagecom.hankcs.hanlp.mining.word2vec; "]
22647[label="packageName\n com.hankcs.hanlp.mining.word2vec "]
32648[label="packageName\n com.hankcs.hanlp.mining "]
42649[label="packageName\n com.hankcs.hanlp "]
52650[label="packageName\n com.hankcs "]
62651[label="packageName\n com "]
12652[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.algorithm.MaxHeap; "]
22653[label="typeName\n com.hankcs.hanlp.algorithm.MaxHeap "]
32654[label="packageOrTypeName\n com.hankcs.hanlp.algorithm "]
42655[label="packageOrTypeName\n com.hankcs.hanlp "]
52656[label="packageOrTypeName\n com.hankcs "]
62657[label="packageOrTypeName\n com "]
12658[label="typeImportOnDemandDeclaration\n importjava.util.*; "]
22659[label="packageOrTypeName\n java.util "]
32660[label="packageOrTypeName\n java "]
12661[label="normalClassDeclaration\n publicabstractclassAbstractVectorModel<K>{Map<K,Vector>storage;publicAbstractVectorModel(Map<K,Vector>storage){this.storage=storage;}publicAbstractVectorModel(){storage=newTreeMap<K,Vector>();}finalpublicVectorvector(Kkey){Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector;}publicfloatsimilarity(Kwhat,Kwith){VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith);}publicList<Map.Entry<K,Float>>nearest(Kkey,intsize){Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size);}privateList<Map.Entry<K,Float>>nearest(Kkey,Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector){returnnearest(vector,10);}publicList<Map.Entry<K,Float>>nearest(Kkey){returnnearest(key,10);}finalList<Map.Entry<K,Float>>queryNearest(Stringquery,intsize){if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();}}publicabstractVectorquery(Stringquery);publicintsize(){returnstorage.size();}publicintdimension(){if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size();}publicVectorremove(Kkey){returnstorage.remove(key);}} "]
22662[label="classModifier\n public "]
22663[label="classModifier\n abstract "]
22664[label="typeParameters\n <K> "]
32665[label="typeParameter\n K "]
22666[label="classBody\n {Map<K,Vector>storage;publicAbstractVectorModel(Map<K,Vector>storage){this.storage=storage;}publicAbstractVectorModel(){storage=newTreeMap<K,Vector>();}finalpublicVectorvector(Kkey){Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector;}publicfloatsimilarity(Kwhat,Kwith){VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith);}publicList<Map.Entry<K,Float>>nearest(Kkey,intsize){Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size);}privateList<Map.Entry<K,Float>>nearest(Kkey,Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector){returnnearest(vector,10);}publicList<Map.Entry<K,Float>>nearest(Kkey){returnnearest(key,10);}finalList<Map.Entry<K,Float>>queryNearest(Stringquery,intsize){if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();}}publicabstractVectorquery(Stringquery);publicintsize(){returnstorage.size();}publicintdimension(){if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size();}publicVectorremove(Kkey){returnstorage.remove(key);}} "]
32667[label="fieldDeclaration\n Map<K,Vector>storage; "]
42668[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<K,Vector> "]
52669[label="typeArguments\n <K,Vector> "]
62670[label="typeArgumentList\n K,Vector "]
72671[label="classType_lfno_classOrInterfaceType\n K "]
72672[label="classType_lfno_classOrInterfaceType\n Vector "]
42673[label="variableDeclaratorId\n storage "]
32674[label="constructorDeclaration\n publicAbstractVectorModel(Map<K,Vector>storage){this.storage=storage;} "]
42675[label="constructorModifier\n public "]
42676[label="constructorDeclarator\n AbstractVectorModel(Map<K,Vector>storage) "]
52677[label="simpleTypeName\n AbstractVectorModel "]
52678[label="formalParameter\n Map<K,Vector>storage "]
62679[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<K,Vector> "]
72680[label="typeArguments\n <K,Vector> "]
82681[label="typeArgumentList\n K,Vector "]
92682[label="classType_lfno_classOrInterfaceType\n K "]
92683[label="classType_lfno_classOrInterfaceType\n Vector "]
62684[label="variableDeclaratorId\n storage "]
42685[label="constructorBody\n {this.storage=storage;} "]
52686[label="expressionStatement\n this.storage=storage; "]
62687[label="assignment\n this.storage=storage "]
72688[label="fieldAccess\n this.storage "]
82689[label="primaryNoNewArray_lfno_primary\n this "]
72690[label="assignmentOperator\n = "]
72691[label="expressionName\n storage "]
32692[label="constructorDeclaration\n publicAbstractVectorModel(){storage=newTreeMap<K,Vector>();} "]
42693[label="constructorModifier\n public "]
42694[label="constructorDeclarator\n AbstractVectorModel() "]
52695[label="simpleTypeName\n AbstractVectorModel "]
42696[label="constructorBody\n {storage=newTreeMap<K,Vector>();} "]
52697[label="expressionStatement\n storage=newTreeMap<K,Vector>(); "]
62698[label="assignment\n storage=newTreeMap<K,Vector>() "]
72699[label="expressionName\n storage "]
72700[label="assignmentOperator\n = "]
72701[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<K,Vector>() "]
82702[label="typeArguments\n <K,Vector> "]
92703[label="typeArgumentList\n K,Vector "]
102704[label="classType_lfno_classOrInterfaceType\n K "]
102705[label="classType_lfno_classOrInterfaceType\n Vector "]
32706[label="methodDeclaration\n finalpublicVectorvector(Kkey){Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector;} "]
42707[label="methodModifier\n final "]
42708[label="methodModifier\n public "]
42709[label="methodHeader\n Vectorvector(Kkey) "]
52710[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
52711[label="methodDeclarator\n vector(Kkey) "]
62712[label="formalParameter\n Kkey "]
72713[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
72714[label="variableDeclaratorId\n key "]
42715[label="block\n {Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector;} "]
52716[label="blockStatements\n Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector; "]
62717[label="localVariableDeclarationStatement\n Vectorvector=storage.get(key); "]
72718[label="localVariableDeclaration\n Vectorvector=storage.get(key) "]
82719[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
82720[label="variableDeclarator\n vector=storage.get(key) "]
92721[label="variableDeclaratorId\n vector "]
92722[label="methodInvocation_lfno_primary\n storage.get(key) "]
102723[label="typeName\n storage "]
102724[label="expressionName\n key "]
62725[label="ifThenStatement\n if(vector==null)returnnull; "]
72726[label="equalityExpression\n vector==null "]
82727[label="expressionName\n vector "]
82728[label="literal\n null "]
72729[label="returnStatement\n returnnull; "]
82730[label="literal\n null "]
62731[label="returnStatement\n returnvector; "]
72732[label="expressionName\n vector "]
32733[label="methodDeclaration\n publicfloatsimilarity(Kwhat,Kwith){VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith);} "]
42734[label="methodModifier\n public "]
42735[label="methodHeader\n floatsimilarity(Kwhat,Kwith) "]
52736[label="floatingPointType\n float "]
52737[label="methodDeclarator\n similarity(Kwhat,Kwith) "]
62738[label="formalParameterList\n Kwhat,Kwith "]
72739[label="formalParameter\n Kwhat "]
82740[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
82741[label="variableDeclaratorId\n what "]
72742[label="formalParameter\n Kwith "]
82743[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
82744[label="variableDeclaratorId\n with "]
42745[label="block\n {VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith);} "]
52746[label="blockStatements\n VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith); "]
62747[label="localVariableDeclarationStatement\n VectorvectorWhat=storage.get(what); "]
72748[label="localVariableDeclaration\n VectorvectorWhat=storage.get(what) "]
82749[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
82750[label="variableDeclarator\n vectorWhat=storage.get(what) "]
92751[label="variableDeclaratorId\n vectorWhat "]
92752[label="methodInvocation_lfno_primary\n storage.get(what) "]
102753[label="typeName\n storage "]
102754[label="expressionName\n what "]
62755[label="ifThenStatement\n if(vectorWhat==null){return-1f;} "]
72756[label="equalityExpression\n vectorWhat==null "]
82757[label="expressionName\n vectorWhat "]
82758[label="literal\n null "]
72759[label="block\n {return-1f;} "]
82760[label="returnStatement\n return-1f; "]
92761[label="unaryExpression\n -1f "]
102762[label="literal\n 1f "]
62763[label="localVariableDeclarationStatement\n VectorvectorWith=storage.get(with); "]
72764[label="localVariableDeclaration\n VectorvectorWith=storage.get(with) "]
82765[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
82766[label="variableDeclarator\n vectorWith=storage.get(with) "]
92767[label="variableDeclaratorId\n vectorWith "]
92768[label="methodInvocation_lfno_primary\n storage.get(with) "]
102769[label="typeName\n storage "]
102770[label="expressionName\n with "]
62771[label="ifThenStatement\n if(vectorWith==null){return-1f;} "]
72772[label="equalityExpression\n vectorWith==null "]
82773[label="expressionName\n vectorWith "]
82774[label="literal\n null "]
72775[label="block\n {return-1f;} "]
82776[label="returnStatement\n return-1f; "]
92777[label="unaryExpression\n -1f "]
102778[label="literal\n 1f "]
62779[label="returnStatement\n returnvectorWhat.cosineForUnitVector(vectorWith); "]
72780[label="methodInvocation_lfno_primary\n vectorWhat.cosineForUnitVector(vectorWith) "]
82781[label="typeName\n vectorWhat "]
82782[label="expressionName\n vectorWith "]
32783[label="methodDeclaration\n publicList<Map.Entry<K,Float>>nearest(Kkey,intsize){Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size);} "]
42784[label="methodModifier\n public "]
42785[label="methodHeader\n List<Map.Entry<K,Float>>nearest(Kkey,intsize) "]
52786[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
62787[label="typeArguments\n <Map.Entry<K,Float>> "]
72788[label="classOrInterfaceType\n Map.Entry<K,Float> "]
82789[label="classType_lfno_classOrInterfaceType\n Map "]
82790[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
92791[label="typeArguments\n <K,Float> "]
102792[label="typeArgumentList\n K,Float "]
112793[label="classType_lfno_classOrInterfaceType\n K "]
112794[label="classType_lfno_classOrInterfaceType\n Float "]
52795[label="methodDeclarator\n nearest(Kkey,intsize) "]
62796[label="formalParameterList\n Kkey,intsize "]
72797[label="formalParameter\n Kkey "]
82798[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
82799[label="variableDeclaratorId\n key "]
72800[label="formalParameter\n intsize "]
82801[label="integralType\n int "]
82802[label="variableDeclaratorId\n size "]
42803[label="block\n {Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size);} "]
52804[label="blockStatements\n Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size); "]
62805[label="localVariableDeclarationStatement\n Vectorvector=storage.get(key); "]
72806[label="localVariableDeclaration\n Vectorvector=storage.get(key) "]
82807[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
82808[label="variableDeclarator\n vector=storage.get(key) "]
92809[label="variableDeclaratorId\n vector "]
92810[label="methodInvocation_lfno_primary\n storage.get(key) "]
102811[label="typeName\n storage "]
102812[label="expressionName\n key "]
62813[label="ifThenStatement\n if(vector==null){returnCollections.emptyList();} "]
72814[label="equalityExpression\n vector==null "]
82815[label="expressionName\n vector "]
82816[label="literal\n null "]
72817[label="block\n {returnCollections.emptyList();} "]
82818[label="returnStatement\n returnCollections.emptyList(); "]
92819[label="methodInvocation_lfno_primary\n Collections.emptyList() "]
102820[label="typeName\n Collections "]
62821[label="returnStatement\n returnnearest(key,vector,size); "]
72822[label="methodInvocation_lfno_primary\n nearest(key,vector,size) "]
82823[label="methodName\n nearest "]
82824[label="argumentList\n key,vector,size "]
92825[label="expressionName\n key "]
92826[label="expressionName\n vector "]
92827[label="expressionName\n size "]
32828[label="methodDeclaration\n privateList<Map.Entry<K,Float>>nearest(Kkey,Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();} "]
42829[label="methodModifier\n private "]
42830[label="methodHeader\n List<Map.Entry<K,Float>>nearest(Kkey,Vectorvector,intsize) "]
52831[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
62832[label="typeArguments\n <Map.Entry<K,Float>> "]
72833[label="classOrInterfaceType\n Map.Entry<K,Float> "]
82834[label="classType_lfno_classOrInterfaceType\n Map "]
82835[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
92836[label="typeArguments\n <K,Float> "]
102837[label="typeArgumentList\n K,Float "]
112838[label="classType_lfno_classOrInterfaceType\n K "]
112839[label="classType_lfno_classOrInterfaceType\n Float "]
52840[label="methodDeclarator\n nearest(Kkey,Vectorvector,intsize) "]
62841[label="formalParameterList\n Kkey,Vectorvector,intsize "]
72842[label="formalParameters\n Kkey,Vectorvector "]
82843[label="formalParameter\n Kkey "]
92844[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
92845[label="variableDeclaratorId\n key "]
82846[label="formalParameter\n Vectorvector "]
92847[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
92848[label="variableDeclaratorId\n vector "]
72849[label="formalParameter\n intsize "]
82850[label="integralType\n int "]
82851[label="variableDeclaratorId\n size "]
42852[label="block\n {MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();} "]
52853[label="blockStatements\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList(); "]
62854[label="localVariableDeclarationStatement\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}); "]
72855[label="localVariableDeclaration\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
82856[label="unannClassType_lfno_unannClassOrInterfaceType\n MaxHeap<Map.Entry<K,Float>> "]
92857[label="typeArguments\n <Map.Entry<K,Float>> "]
102858[label="classOrInterfaceType\n Map.Entry<K,Float> "]
112859[label="classType_lfno_classOrInterfaceType\n Map "]
112860[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
122861[label="typeArguments\n <K,Float> "]
132862[label="typeArgumentList\n K,Float "]
142863[label="classType_lfno_classOrInterfaceType\n K "]
142864[label="classType_lfno_classOrInterfaceType\n Float "]
82865[label="variableDeclarator\n maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
92866[label="variableDeclaratorId\n maxHeap "]
92867[label="classInstanceCreationExpression_lfno_primary\n newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
102868[label="typeArguments\n <Map.Entry<K,Float>> "]
112869[label="classOrInterfaceType\n Map.Entry<K,Float> "]
122870[label="classType_lfno_classOrInterfaceType\n Map "]
122871[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
132872[label="typeArguments\n <K,Float> "]
142873[label="typeArgumentList\n K,Float "]
152874[label="classType_lfno_classOrInterfaceType\n K "]
152875[label="classType_lfno_classOrInterfaceType\n Float "]
102876[label="argumentList\n size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
112877[label="expressionName\n size "]
112878[label="classInstanceCreationExpression_lfno_primary\n newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
122879[label="typeArguments\n <Map.Entry<K,Float>> "]
132880[label="classOrInterfaceType\n Map.Entry<K,Float> "]
142881[label="classType_lfno_classOrInterfaceType\n Map "]
142882[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
152883[label="typeArguments\n <K,Float> "]
162884[label="typeArgumentList\n K,Float "]
172885[label="classType_lfno_classOrInterfaceType\n K "]
172886[label="classType_lfno_classOrInterfaceType\n Float "]
122887[label="classBody\n {@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
132888[label="methodDeclaration\n @Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());} "]
142889[label="markerAnnotation\n @Override "]
152890[label="typeName\n Override "]
142891[label="methodModifier\n public "]
142892[label="methodHeader\n intcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2) "]
152893[label="integralType\n int "]
152894[label="methodDeclarator\n compare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2) "]
162895[label="formalParameterList\n Map.Entry<K,Float>o1,Map.Entry<K,Float>o2 "]
172896[label="formalParameter\n Map.Entry<K,Float>o1 "]
182897[label="unannClassOrInterfaceType\n Map.Entry<K,Float> "]
192898[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
192899[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Float> "]
202900[label="typeArguments\n <K,Float> "]
212901[label="typeArgumentList\n K,Float "]
222902[label="classType_lfno_classOrInterfaceType\n K "]
222903[label="classType_lfno_classOrInterfaceType\n Float "]
182904[label="variableDeclaratorId\n o1 "]
172905[label="formalParameter\n Map.Entry<K,Float>o2 "]
182906[label="unannClassOrInterfaceType\n Map.Entry<K,Float> "]
192907[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
192908[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Float> "]
202909[label="typeArguments\n <K,Float> "]
212910[label="typeArgumentList\n K,Float "]
222911[label="classType_lfno_classOrInterfaceType\n K "]
222912[label="classType_lfno_classOrInterfaceType\n Float "]
182913[label="variableDeclaratorId\n o2 "]
142914[label="block\n {returno1.getValue().compareTo(o2.getValue());} "]
152915[label="returnStatement\n returno1.getValue().compareTo(o2.getValue()); "]
162916[label="primary\n o1.getValue().compareTo(o2.getValue()) "]
172917[label="methodInvocation_lfno_primary\n o1.getValue() "]
182918[label="typeName\n o1 "]
172919[label="methodInvocation_lf_primary\n .compareTo(o2.getValue()) "]
182920[label="methodInvocation_lfno_primary\n o2.getValue() "]
192921[label="typeName\n o2 "]
62922[label="enhancedForStatement\n for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));} "]
72923[label="unannClassOrInterfaceType\n Map.Entry<K,Vector> "]
82924[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
82925[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Vector> "]
92926[label="typeArguments\n <K,Vector> "]
102927[label="typeArgumentList\n K,Vector "]
112928[label="classType_lfno_classOrInterfaceType\n K "]
112929[label="classType_lfno_classOrInterfaceType\n Vector "]
72930[label="variableDeclaratorId\n entry "]
72931[label="methodInvocation_lfno_primary\n storage.entrySet() "]
82932[label="typeName\n storage "]
72933[label="block\n {if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));} "]
82934[label="blockStatements\n if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector))); "]
92935[label="ifThenStatement\n if(entry.getKey().equals(key)){continue;} "]
102936[label="primary\n entry.getKey().equals(key) "]
112937[label="methodInvocation_lfno_primary\n entry.getKey() "]
122938[label="typeName\n entry "]
112939[label="methodInvocation_lf_primary\n .equals(key) "]
122940[label="expressionName\n key "]
102941[label="block\n {continue;} "]
112942[label="continueStatement\n continue; "]
92943[label="expressionStatement\n maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector))); "]
102944[label="methodInvocation\n maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector))) "]
112945[label="typeName\n maxHeap "]
112946[label="classInstanceCreationExpression_lfno_primary\n newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)) "]
122947[label="typeArguments\n <K,Float> "]
132948[label="typeArgumentList\n K,Float "]
142949[label="classType_lfno_classOrInterfaceType\n K "]
142950[label="classType_lfno_classOrInterfaceType\n Float "]
122951[label="argumentList\n entry.getKey(),entry.getValue().cosineForUnitVector(vector) "]
132952[label="methodInvocation_lfno_primary\n entry.getKey() "]
142953[label="typeName\n entry "]
132954[label="primary\n entry.getValue().cosineForUnitVector(vector) "]
142955[label="methodInvocation_lfno_primary\n entry.getValue() "]
152956[label="typeName\n entry "]
142957[label="methodInvocation_lf_primary\n .cosineForUnitVector(vector) "]
152958[label="expressionName\n vector "]
62959[label="returnStatement\n returnmaxHeap.toList(); "]
72960[label="methodInvocation_lfno_primary\n maxHeap.toList() "]
82961[label="typeName\n maxHeap "]
32962[label="methodDeclaration\n publicList<Map.Entry<K,Float>>nearest(Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();} "]
42963[label="methodModifier\n public "]
42964[label="methodHeader\n List<Map.Entry<K,Float>>nearest(Vectorvector,intsize) "]
52965[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
62966[label="typeArguments\n <Map.Entry<K,Float>> "]
72967[label="classOrInterfaceType\n Map.Entry<K,Float> "]
82968[label="classType_lfno_classOrInterfaceType\n Map "]
82969[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
92970[label="typeArguments\n <K,Float> "]
102971[label="typeArgumentList\n K,Float "]
112972[label="classType_lfno_classOrInterfaceType\n K "]
112973[label="classType_lfno_classOrInterfaceType\n Float "]
52974[label="methodDeclarator\n nearest(Vectorvector,intsize) "]
62975[label="formalParameterList\n Vectorvector,intsize "]
72976[label="formalParameter\n Vectorvector "]
82977[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
82978[label="variableDeclaratorId\n vector "]
72979[label="formalParameter\n intsize "]
82980[label="integralType\n int "]
82981[label="variableDeclaratorId\n size "]
42982[label="block\n {MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();} "]
52983[label="blockStatements\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList(); "]
62984[label="localVariableDeclarationStatement\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}); "]
72985[label="localVariableDeclaration\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
82986[label="unannClassType_lfno_unannClassOrInterfaceType\n MaxHeap<Map.Entry<K,Float>> "]
92987[label="typeArguments\n <Map.Entry<K,Float>> "]
102988[label="classOrInterfaceType\n Map.Entry<K,Float> "]
112989[label="classType_lfno_classOrInterfaceType\n Map "]
112990[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
122991[label="typeArguments\n <K,Float> "]
132992[label="typeArgumentList\n K,Float "]
142993[label="classType_lfno_classOrInterfaceType\n K "]
142994[label="classType_lfno_classOrInterfaceType\n Float "]
82995[label="variableDeclarator\n maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
92996[label="variableDeclaratorId\n maxHeap "]
92997[label="classInstanceCreationExpression_lfno_primary\n newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
102998[label="typeArguments\n <Map.Entry<K,Float>> "]
112999[label="classOrInterfaceType\n Map.Entry<K,Float> "]
123000[label="classType_lfno_classOrInterfaceType\n Map "]
123001[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
133002[label="typeArguments\n <K,Float> "]
143003[label="typeArgumentList\n K,Float "]
153004[label="classType_lfno_classOrInterfaceType\n K "]
153005[label="classType_lfno_classOrInterfaceType\n Float "]
103006[label="argumentList\n size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
113007[label="expressionName\n size "]
113008[label="classInstanceCreationExpression_lfno_primary\n newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
123009[label="typeArguments\n <Map.Entry<K,Float>> "]
133010[label="classOrInterfaceType\n Map.Entry<K,Float> "]
143011[label="classType_lfno_classOrInterfaceType\n Map "]
143012[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
153013[label="typeArguments\n <K,Float> "]
163014[label="typeArgumentList\n K,Float "]
173015[label="classType_lfno_classOrInterfaceType\n K "]
173016[label="classType_lfno_classOrInterfaceType\n Float "]
123017[label="classBody\n {@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
133018[label="methodDeclaration\n @Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());} "]
143019[label="markerAnnotation\n @Override "]
153020[label="typeName\n Override "]
143021[label="methodModifier\n public "]
143022[label="methodHeader\n intcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2) "]
153023[label="integralType\n int "]
153024[label="methodDeclarator\n compare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2) "]
163025[label="formalParameterList\n Map.Entry<K,Float>o1,Map.Entry<K,Float>o2 "]
173026[label="formalParameter\n Map.Entry<K,Float>o1 "]
183027[label="unannClassOrInterfaceType\n Map.Entry<K,Float> "]
193028[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
193029[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Float> "]
203030[label="typeArguments\n <K,Float> "]
213031[label="typeArgumentList\n K,Float "]
223032[label="classType_lfno_classOrInterfaceType\n K "]
223033[label="classType_lfno_classOrInterfaceType\n Float "]
183034[label="variableDeclaratorId\n o1 "]
173035[label="formalParameter\n Map.Entry<K,Float>o2 "]
183036[label="unannClassOrInterfaceType\n Map.Entry<K,Float> "]
193037[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
193038[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Float> "]
203039[label="typeArguments\n <K,Float> "]
213040[label="typeArgumentList\n K,Float "]
223041[label="classType_lfno_classOrInterfaceType\n K "]
223042[label="classType_lfno_classOrInterfaceType\n Float "]
183043[label="variableDeclaratorId\n o2 "]
143044[label="block\n {returno1.getValue().compareTo(o2.getValue());} "]
153045[label="returnStatement\n returno1.getValue().compareTo(o2.getValue()); "]
163046[label="primary\n o1.getValue().compareTo(o2.getValue()) "]
173047[label="methodInvocation_lfno_primary\n o1.getValue() "]
183048[label="typeName\n o1 "]
173049[label="methodInvocation_lf_primary\n .compareTo(o2.getValue()) "]
183050[label="methodInvocation_lfno_primary\n o2.getValue() "]
193051[label="typeName\n o2 "]
63052[label="enhancedForStatement\n for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));} "]
73053[label="unannClassOrInterfaceType\n Map.Entry<K,Vector> "]
83054[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
83055[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Vector> "]
93056[label="typeArguments\n <K,Vector> "]
103057[label="typeArgumentList\n K,Vector "]
113058[label="classType_lfno_classOrInterfaceType\n K "]
113059[label="classType_lfno_classOrInterfaceType\n Vector "]
73060[label="variableDeclaratorId\n entry "]
73061[label="methodInvocation_lfno_primary\n storage.entrySet() "]
83062[label="typeName\n storage "]
73063[label="block\n {maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));} "]
83064[label="expressionStatement\n maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector))); "]
93065[label="methodInvocation\n maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector))) "]
103066[label="typeName\n maxHeap "]
103067[label="classInstanceCreationExpression_lfno_primary\n newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)) "]
113068[label="typeArguments\n <K,Float> "]
123069[label="typeArgumentList\n K,Float "]
133070[label="classType_lfno_classOrInterfaceType\n K "]
133071[label="classType_lfno_classOrInterfaceType\n Float "]
113072[label="argumentList\n entry.getKey(),entry.getValue().cosineForUnitVector(vector) "]
123073[label="methodInvocation_lfno_primary\n entry.getKey() "]
133074[label="typeName\n entry "]
123075[label="primary\n entry.getValue().cosineForUnitVector(vector) "]
133076[label="methodInvocation_lfno_primary\n entry.getValue() "]
143077[label="typeName\n entry "]
133078[label="methodInvocation_lf_primary\n .cosineForUnitVector(vector) "]
143079[label="expressionName\n vector "]
63080[label="returnStatement\n returnmaxHeap.toList(); "]
73081[label="methodInvocation_lfno_primary\n maxHeap.toList() "]
83082[label="typeName\n maxHeap "]
33083[label="methodDeclaration\n publicList<Map.Entry<K,Float>>nearest(Vectorvector){returnnearest(vector,10);} "]
43084[label="methodModifier\n public "]
43085[label="methodHeader\n List<Map.Entry<K,Float>>nearest(Vectorvector) "]
53086[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
63087[label="typeArguments\n <Map.Entry<K,Float>> "]
73088[label="classOrInterfaceType\n Map.Entry<K,Float> "]
83089[label="classType_lfno_classOrInterfaceType\n Map "]
83090[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
93091[label="typeArguments\n <K,Float> "]
103092[label="typeArgumentList\n K,Float "]
113093[label="classType_lfno_classOrInterfaceType\n K "]
113094[label="classType_lfno_classOrInterfaceType\n Float "]
53095[label="methodDeclarator\n nearest(Vectorvector) "]
63096[label="formalParameter\n Vectorvector "]
73097[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
73098[label="variableDeclaratorId\n vector "]
43099[label="block\n {returnnearest(vector,10);} "]
53100[label="returnStatement\n returnnearest(vector,10); "]
63101[label="methodInvocation_lfno_primary\n nearest(vector,10) "]
73102[label="methodName\n nearest "]
73103[label="argumentList\n vector,10 "]
83104[label="expressionName\n vector "]
83105[label="literal\n 10 "]
33106[label="methodDeclaration\n publicList<Map.Entry<K,Float>>nearest(Kkey){returnnearest(key,10);} "]
43107[label="methodModifier\n public "]
43108[label="methodHeader\n List<Map.Entry<K,Float>>nearest(Kkey) "]
53109[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
63110[label="typeArguments\n <Map.Entry<K,Float>> "]
73111[label="classOrInterfaceType\n Map.Entry<K,Float> "]
83112[label="classType_lfno_classOrInterfaceType\n Map "]
83113[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
93114[label="typeArguments\n <K,Float> "]
103115[label="typeArgumentList\n K,Float "]
113116[label="classType_lfno_classOrInterfaceType\n K "]
113117[label="classType_lfno_classOrInterfaceType\n Float "]
53118[label="methodDeclarator\n nearest(Kkey) "]
63119[label="formalParameter\n Kkey "]
73120[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
73121[label="variableDeclaratorId\n key "]
43122[label="block\n {returnnearest(key,10);} "]
53123[label="returnStatement\n returnnearest(key,10); "]
63124[label="methodInvocation_lfno_primary\n nearest(key,10) "]
73125[label="methodName\n nearest "]
73126[label="argumentList\n key,10 "]
83127[label="expressionName\n key "]
83128[label="literal\n 10 "]
33129[label="methodDeclaration\n finalList<Map.Entry<K,Float>>queryNearest(Stringquery,intsize){if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();}} "]
43130[label="methodModifier\n final "]
43131[label="methodHeader\n List<Map.Entry<K,Float>>queryNearest(Stringquery,intsize) "]
53132[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
63133[label="typeArguments\n <Map.Entry<K,Float>> "]
73134[label="classOrInterfaceType\n Map.Entry<K,Float> "]
83135[label="classType_lfno_classOrInterfaceType\n Map "]
83136[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
93137[label="typeArguments\n <K,Float> "]
103138[label="typeArgumentList\n K,Float "]
113139[label="classType_lfno_classOrInterfaceType\n K "]
113140[label="classType_lfno_classOrInterfaceType\n Float "]
53141[label="methodDeclarator\n queryNearest(Stringquery,intsize) "]
63142[label="formalParameterList\n Stringquery,intsize "]
73143[label="formalParameter\n Stringquery "]
83144[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
83145[label="variableDeclaratorId\n query "]
73146[label="formalParameter\n intsize "]
83147[label="integralType\n int "]
83148[label="variableDeclaratorId\n size "]
43149[label="block\n {if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();}} "]
53150[label="blockStatements\n if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();} "]
63151[label="ifThenStatement\n if(query==null||query.length()==0){returnCollections.emptyList();} "]
73152[label="conditionalOrExpression\n query==null||query.length()==0 "]
83153[label="equalityExpression\n query==null "]
93154[label="expressionName\n query "]
93155[label="literal\n null "]
83156[label="equalityExpression\n query.length()==0 "]
93157[label="methodInvocation_lfno_primary\n query.length() "]
103158[label="typeName\n query "]
93159[label="literal\n 0 "]
73160[label="block\n {returnCollections.emptyList();} "]
83161[label="returnStatement\n returnCollections.emptyList(); "]
93162[label="methodInvocation_lfno_primary\n Collections.emptyList() "]
103163[label="typeName\n Collections "]
63164[label="tryStatement\n try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();} "]
73165[label="block\n {returnnearest(query(query),size);} "]
83166[label="returnStatement\n returnnearest(query(query),size); "]
93167[label="methodInvocation_lfno_primary\n nearest(query(query),size) "]
103168[label="methodName\n nearest "]
103169[label="argumentList\n query(query),size "]
113170[label="methodInvocation_lfno_primary\n query(query) "]
123171[label="methodName\n query "]
123172[label="expressionName\n query "]
113173[label="expressionName\n size "]
73174[label="catchClause\n catch(Exceptione){returnCollections.emptyList();} "]
83175[label="catchFormalParameter\n Exceptione "]
93176[label="unannClassType\n Exception "]
93177[label="variableDeclaratorId\n e "]
83178[label="block\n {returnCollections.emptyList();} "]
93179[label="returnStatement\n returnCollections.emptyList(); "]
103180[label="methodInvocation_lfno_primary\n Collections.emptyList() "]
113181[label="typeName\n Collections "]
33182[label="methodDeclaration\n publicabstractVectorquery(Stringquery); "]
43183[label="methodModifier\n public "]
43184[label="methodModifier\n abstract "]
43185[label="methodHeader\n Vectorquery(Stringquery) "]
53186[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
53187[label="methodDeclarator\n query(Stringquery) "]
63188[label="formalParameter\n Stringquery "]
73189[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
73190[label="variableDeclaratorId\n query "]
43191[label="methodBody\n ; "]
33192[label="methodDeclaration\n publicintsize(){returnstorage.size();} "]
43193[label="methodModifier\n public "]
43194[label="methodHeader\n intsize() "]
53195[label="integralType\n int "]
53196[label="methodDeclarator\n size() "]
43197[label="block\n {returnstorage.size();} "]
53198[label="returnStatement\n returnstorage.size(); "]
63199[label="methodInvocation_lfno_primary\n storage.size() "]
73200[label="typeName\n storage "]
33201[label="methodDeclaration\n publicintdimension(){if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size();} "]
43202[label="methodModifier\n public "]
43203[label="methodHeader\n intdimension() "]
53204[label="integralType\n int "]
53205[label="methodDeclarator\n dimension() "]
43206[label="block\n {if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size();} "]
53207[label="blockStatements\n if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size(); "]
63208[label="ifThenStatement\n if(storage==null||storage.isEmpty()){return0;} "]
73209[label="conditionalOrExpression\n storage==null||storage.isEmpty() "]
83210[label="equalityExpression\n storage==null "]
93211[label="expressionName\n storage "]
93212[label="literal\n null "]
83213[label="methodInvocation_lfno_primary\n storage.isEmpty() "]
93214[label="typeName\n storage "]
73215[label="block\n {return0;} "]
83216[label="returnStatement\n return0; "]
93217[label="literal\n 0 "]
63218[label="returnStatement\n returnstorage.values().iterator().next().size(); "]
73219[label="primary\n storage.values().iterator().next().size() "]
83220[label="methodInvocation_lfno_primary\n storage.values() "]
93221[label="typeName\n storage "]
83222[label="methodInvocation_lf_primary\n .iterator() "]
83223[label="methodInvocation_lf_primary\n .next() "]
83224[label="methodInvocation_lf_primary\n .size() "]
33225[label="methodDeclaration\n publicVectorremove(Kkey){returnstorage.remove(key);} "]
43226[label="methodModifier\n public "]
43227[label="methodHeader\n Vectorremove(Kkey) "]
53228[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
53229[label="methodDeclarator\n remove(Kkey) "]
63230[label="formalParameter\n Kkey "]
73231[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
73232[label="variableDeclaratorId\n key "]
43233[label="block\n {returnstorage.remove(key);} "]
53234[label="returnStatement\n returnstorage.remove(key); "]
63235[label="methodInvocation_lfno_primary\n storage.remove(key) "]
73236[label="typeName\n storage "]
73237[label="expressionName\n key "]
03238[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;publicclassActionextendsAbstractInexactActionimplementsActionType{publicAction(){}publicAction(intname,intrel){super(name,rel);}}<EOF> "]
13239[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
23240[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
33241[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
43242[label="packageName\n com.hankcs.hanlp.dependency "]
53243[label="packageName\n com.hankcs.hanlp "]
63244[label="packageName\n com.hankcs "]
73245[label="packageName\n com "]
13246[label="normalClassDeclaration\n publicclassActionextendsAbstractInexactActionimplementsActionType{publicAction(){}publicAction(intname,intrel){super(name,rel);}} "]
23247[label="classModifier\n public "]
23248[label="superclass\n extendsAbstractInexactAction "]
33249[label="classType\n AbstractInexactAction "]
23250[label="superinterfaces\n implementsActionType "]
33251[label="classType\n ActionType "]
23252[label="classBody\n {publicAction(){}publicAction(intname,intrel){super(name,rel);}} "]
33253[label="constructorDeclaration\n publicAction(){} "]
43254[label="constructorModifier\n public "]
43255[label="constructorDeclarator\n Action() "]
53256[label="simpleTypeName\n Action "]
43257[label="constructorBody\n {} "]
33258[label="constructorDeclaration\n publicAction(intname,intrel){super(name,rel);} "]
43259[label="constructorModifier\n public "]
43260[label="constructorDeclarator\n Action(intname,intrel) "]
53261[label="simpleTypeName\n Action "]
53262[label="formalParameterList\n intname,intrel "]
63263[label="formalParameter\n intname "]
73264[label="integralType\n int "]
73265[label="variableDeclaratorId\n name "]
63266[label="formalParameter\n intrel "]
73267[label="integralType\n int "]
73268[label="variableDeclaratorId\n rel "]
43269[label="constructorBody\n {super(name,rel);} "]
53270[label="explicitConstructorInvocation\n super(name,rel); "]
63271[label="argumentList\n name,rel "]
73272[label="expressionName\n name "]
73273[label="expressionName\n rel "]
03274[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;publicclassActionFactoryimplementsActionType{publicstaticActionmake_shift(){returnnewAction(kShift,0);}publicstaticActionmake_left_arc(finalintrel){returnnewAction(kLeftArc,rel);}publicstaticActionmake_right_arc(finalintrel){returnnewAction(kRightArc,rel);}}<EOF> "]
13275[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
23276[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
33277[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
43278[label="packageName\n com.hankcs.hanlp.dependency "]
53279[label="packageName\n com.hankcs.hanlp "]
63280[label="packageName\n com.hankcs "]
73281[label="packageName\n com "]
13282[label="normalClassDeclaration\n publicclassActionFactoryimplementsActionType{publicstaticActionmake_shift(){returnnewAction(kShift,0);}publicstaticActionmake_left_arc(finalintrel){returnnewAction(kLeftArc,rel);}publicstaticActionmake_right_arc(finalintrel){returnnewAction(kRightArc,rel);}} "]
23283[label="classModifier\n public "]
23284[label="superinterfaces\n implementsActionType "]
33285[label="classType\n ActionType "]
23286[label="classBody\n {publicstaticActionmake_shift(){returnnewAction(kShift,0);}publicstaticActionmake_left_arc(finalintrel){returnnewAction(kLeftArc,rel);}publicstaticActionmake_right_arc(finalintrel){returnnewAction(kRightArc,rel);}} "]
33287[label="methodDeclaration\n publicstaticActionmake_shift(){returnnewAction(kShift,0);} "]
43288[label="methodModifier\n public "]
43289[label="methodModifier\n static "]
43290[label="methodHeader\n Actionmake_shift() "]
53291[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
53292[label="methodDeclarator\n make_shift() "]
43293[label="block\n {returnnewAction(kShift,0);} "]
53294[label="returnStatement\n returnnewAction(kShift,0); "]
63295[label="classInstanceCreationExpression_lfno_primary\n newAction(kShift,0) "]
73296[label="argumentList\n kShift,0 "]
83297[label="expressionName\n kShift "]
83298[label="literal\n 0 "]
33299[label="methodDeclaration\n publicstaticActionmake_left_arc(finalintrel){returnnewAction(kLeftArc,rel);} "]
43300[label="methodModifier\n public "]
43301[label="methodModifier\n static "]
43302[label="methodHeader\n Actionmake_left_arc(finalintrel) "]
53303[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
53304[label="methodDeclarator\n make_left_arc(finalintrel) "]
63305[label="formalParameter\n finalintrel "]
73306[label="variableModifier\n final "]
73307[label="integralType\n int "]
73308[label="variableDeclaratorId\n rel "]
43309[label="block\n {returnnewAction(kLeftArc,rel);} "]
53310[label="returnStatement\n returnnewAction(kLeftArc,rel); "]
63311[label="classInstanceCreationExpression_lfno_primary\n newAction(kLeftArc,rel) "]
73312[label="argumentList\n kLeftArc,rel "]
83313[label="expressionName\n kLeftArc "]
83314[label="expressionName\n rel "]
33315[label="methodDeclaration\n publicstaticActionmake_right_arc(finalintrel){returnnewAction(kRightArc,rel);} "]
43316[label="methodModifier\n public "]
43317[label="methodModifier\n static "]
43318[label="methodHeader\n Actionmake_right_arc(finalintrel) "]
53319[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
53320[label="methodDeclarator\n make_right_arc(finalintrel) "]
63321[label="formalParameter\n finalintrel "]
73322[label="variableModifier\n final "]
73323[label="integralType\n int "]
73324[label="variableDeclaratorId\n rel "]
43325[label="block\n {returnnewAction(kRightArc,rel);} "]
53326[label="returnStatement\n returnnewAction(kRightArc,rel); "]
63327[label="classInstanceCreationExpression_lfno_primary\n newAction(kRightArc,rel) "]
73328[label="argumentList\n kRightArc,rel "]
83329[label="expressionName\n kRightArc "]
83330[label="expressionName\n rel "]
03331[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;publicinterfaceActionType{intkNone=0;intkShift=1;intkLeftArc=2;intkRightArc=3;}<EOF> "]
13332[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
23333[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
33334[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
43335[label="packageName\n com.hankcs.hanlp.dependency "]
53336[label="packageName\n com.hankcs.hanlp "]
63337[label="packageName\n com.hankcs "]
73338[label="packageName\n com "]
13339[label="normalInterfaceDeclaration\n publicinterfaceActionType{intkNone=0;intkShift=1;intkLeftArc=2;intkRightArc=3;} "]
23340[label="interfaceModifier\n public "]
23341[label="interfaceBody\n {intkNone=0;intkShift=1;intkLeftArc=2;intkRightArc=3;} "]
33342[label="constantDeclaration\n intkNone=0; "]
43343[label="integralType\n int "]
43344[label="variableDeclarator\n kNone=0 "]
53345[label="variableDeclaratorId\n kNone "]
53346[label="literal\n 0 "]
33347[label="constantDeclaration\n intkShift=1; "]
43348[label="integralType\n int "]
43349[label="variableDeclarator\n kShift=1 "]
53350[label="variableDeclaratorId\n kShift "]
53351[label="literal\n 1 "]
33352[label="constantDeclaration\n intkLeftArc=2; "]
43353[label="integralType\n int "]
43354[label="variableDeclarator\n kLeftArc=2 "]
53355[label="variableDeclaratorId\n kLeftArc "]
53356[label="literal\n 2 "]
33357[label="constantDeclaration\n intkRightArc=3; "]
43358[label="integralType\n int "]
43359[label="variableDeclarator\n kRightArc=3 "]
53360[label="variableDeclaratorId\n kRightArc "]
53361[label="literal\n 3 "]
03362[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;importcom.hankcs.hanlp.dependency.nnparser.Dependency;importjava.util.ArrayList;importjava.util.List;publicclassActionUtilsimplementsActionType{publicstaticbooleanis_shift(finalActionact){return(act.name()==kShift);}publicstaticbooleanis_left_arc(finalActionact,int[]deprel){if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}publicstaticbooleanis_right_arc(finalActionact,int[]deprel){if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}voidget_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions){intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions);}voidget_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions){List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));}}voidget_oracle_actions2(Dependencyinstance,List<Action>actions){get_oracle_actions2(instance.heads,instance.deprels,actions);}voidget_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions){actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];}}voidget_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions){inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];}}}<EOF> "]
13363[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
23364[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
33365[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
43366[label="packageName\n com.hankcs.hanlp.dependency "]
53367[label="packageName\n com.hankcs.hanlp "]
63368[label="packageName\n com.hankcs "]
73369[label="packageName\n com "]
13370[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dependency.nnparser.Dependency; "]
23371[label="typeName\n com.hankcs.hanlp.dependency.nnparser.Dependency "]
33372[label="packageOrTypeName\n com.hankcs.hanlp.dependency.nnparser "]
43373[label="packageOrTypeName\n com.hankcs.hanlp.dependency "]
53374[label="packageOrTypeName\n com.hankcs.hanlp "]
63375[label="packageOrTypeName\n com.hankcs "]
73376[label="packageOrTypeName\n com "]
13377[label="singleTypeImportDeclaration\n importjava.util.ArrayList; "]
23378[label="typeName\n java.util.ArrayList "]
33379[label="packageOrTypeName\n java.util "]
43380[label="packageOrTypeName\n java "]
13381[label="singleTypeImportDeclaration\n importjava.util.List; "]
23382[label="typeName\n java.util.List "]
33383[label="packageOrTypeName\n java.util "]
43384[label="packageOrTypeName\n java "]
13385[label="normalClassDeclaration\n publicclassActionUtilsimplementsActionType{publicstaticbooleanis_shift(finalActionact){return(act.name()==kShift);}publicstaticbooleanis_left_arc(finalActionact,int[]deprel){if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}publicstaticbooleanis_right_arc(finalActionact,int[]deprel){if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}voidget_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions){intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions);}voidget_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions){List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));}}voidget_oracle_actions2(Dependencyinstance,List<Action>actions){get_oracle_actions2(instance.heads,instance.deprels,actions);}voidget_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions){actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];}}voidget_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions){inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];}}} "]
23386[label="classModifier\n public "]
23387[label="superinterfaces\n implementsActionType "]
33388[label="classType\n ActionType "]
23389[label="classBody\n {publicstaticbooleanis_shift(finalActionact){return(act.name()==kShift);}publicstaticbooleanis_left_arc(finalActionact,int[]deprel){if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}publicstaticbooleanis_right_arc(finalActionact,int[]deprel){if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}voidget_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions){intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions);}voidget_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions){List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));}}voidget_oracle_actions2(Dependencyinstance,List<Action>actions){get_oracle_actions2(instance.heads,instance.deprels,actions);}voidget_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions){actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];}}voidget_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions){inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];}}} "]
33390[label="methodDeclaration\n publicstaticbooleanis_shift(finalActionact){return(act.name()==kShift);} "]
43391[label="methodModifier\n public "]
43392[label="methodModifier\n static "]
43393[label="methodHeader\n booleanis_shift(finalActionact) "]
53394[label="unannPrimitiveType\n boolean "]
53395[label="methodDeclarator\n is_shift(finalActionact) "]
63396[label="formalParameter\n finalActionact "]
73397[label="variableModifier\n final "]
73398[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
73399[label="variableDeclaratorId\n act "]
43400[label="block\n {return(act.name()==kShift);} "]
53401[label="returnStatement\n return(act.name()==kShift); "]
63402[label="primaryNoNewArray_lfno_primary\n (act.name()==kShift) "]
73403[label="equalityExpression\n act.name()==kShift "]
83404[label="methodInvocation_lfno_primary\n act.name() "]
93405[label="typeName\n act "]
83406[label="expressionName\n kShift "]
33407[label="methodDeclaration\n publicstaticbooleanis_left_arc(finalActionact,int[]deprel){if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;} "]
43408[label="methodModifier\n public "]
43409[label="methodModifier\n static "]
43410[label="methodHeader\n booleanis_left_arc(finalActionact,int[]deprel) "]
53411[label="unannPrimitiveType\n boolean "]
53412[label="methodDeclarator\n is_left_arc(finalActionact,int[]deprel) "]
63413[label="formalParameterList\n finalActionact,int[]deprel "]
73414[label="formalParameter\n finalActionact "]
83415[label="variableModifier\n final "]
83416[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
83417[label="variableDeclaratorId\n act "]
73418[label="formalParameter\n int[]deprel "]
83419[label="unannArrayType\n int[] "]
93420[label="integralType\n int "]
93421[label="dims\n [] "]
83422[label="variableDeclaratorId\n deprel "]
43423[label="block\n {if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;} "]
53424[label="blockStatements\n if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse; "]
63425[label="ifThenStatement\n if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;} "]
73426[label="equalityExpression\n act.name()==kLeftArc "]
83427[label="methodInvocation_lfno_primary\n act.name() "]
93428[label="typeName\n act "]
83429[label="expressionName\n kLeftArc "]
73430[label="block\n {deprel[0]=act.rel();returntrue;} "]
83431[label="blockStatements\n deprel[0]=act.rel();returntrue; "]
93432[label="expressionStatement\n deprel[0]=act.rel(); "]
103433[label="assignment\n deprel[0]=act.rel() "]
113434[label="arrayAccess\n deprel[0] "]
123435[label="expressionName\n deprel "]
123436[label="literal\n 0 "]
113437[label="assignmentOperator\n = "]
113438[label="methodInvocation_lfno_primary\n act.rel() "]
123439[label="typeName\n act "]
93440[label="returnStatement\n returntrue; "]
103441[label="literal\n true "]
63442[label="expressionStatement\n deprel[0]=0; "]
73443[label="assignment\n deprel[0]=0 "]
83444[label="arrayAccess\n deprel[0] "]
93445[label="expressionName\n deprel "]
93446[label="literal\n 0 "]
83447[label="assignmentOperator\n = "]
83448[label="literal\n 0 "]
63449[label="returnStatement\n returnfalse; "]
73450[label="literal\n false "]
33451[label="methodDeclaration\n publicstaticbooleanis_right_arc(finalActionact,int[]deprel){if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;} "]
43452[label="methodModifier\n public "]
43453[label="methodModifier\n static "]
43454[label="methodHeader\n booleanis_right_arc(finalActionact,int[]deprel) "]
53455[label="unannPrimitiveType\n boolean "]
53456[label="methodDeclarator\n is_right_arc(finalActionact,int[]deprel) "]
63457[label="formalParameterList\n finalActionact,int[]deprel "]
73458[label="formalParameter\n finalActionact "]
83459[label="variableModifier\n final "]
83460[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
83461[label="variableDeclaratorId\n act "]
73462[label="formalParameter\n int[]deprel "]
83463[label="unannArrayType\n int[] "]
93464[label="integralType\n int "]
93465[label="dims\n [] "]
83466[label="variableDeclaratorId\n deprel "]
43467[label="block\n {if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;} "]
53468[label="blockStatements\n if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse; "]
63469[label="ifThenStatement\n if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;} "]
73470[label="equalityExpression\n act.name()==kRightArc "]
83471[label="methodInvocation_lfno_primary\n act.name() "]
93472[label="typeName\n act "]
83473[label="expressionName\n kRightArc "]
73474[label="block\n {deprel[0]=act.rel();returntrue;} "]
83475[label="blockStatements\n deprel[0]=act.rel();returntrue; "]
93476[label="expressionStatement\n deprel[0]=act.rel(); "]
103477[label="assignment\n deprel[0]=act.rel() "]
113478[label="arrayAccess\n deprel[0] "]
123479[label="expressionName\n deprel "]
123480[label="literal\n 0 "]
113481[label="assignmentOperator\n = "]
113482[label="methodInvocation_lfno_primary\n act.rel() "]
123483[label="typeName\n act "]
93484[label="returnStatement\n returntrue; "]
103485[label="literal\n true "]
63486[label="expressionStatement\n deprel[0]=0; "]
73487[label="assignment\n deprel[0]=0 "]
83488[label="arrayAccess\n deprel[0] "]
93489[label="expressionName\n deprel "]
93490[label="literal\n 0 "]
83491[label="assignmentOperator\n = "]
83492[label="literal\n 0 "]
63493[label="returnStatement\n returnfalse; "]
73494[label="literal\n false "]
33495[label="methodDeclaration\n voidget_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions){intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions);} "]
43496[label="methodHeader\n voidget_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions) "]
53497[label="result\n void "]
53498[label="methodDeclarator\n get_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions) "]
63499[label="formalParameterList\n List<Integer>heads,List<Integer>deprels,List<Action>actions "]
73500[label="formalParameters\n List<Integer>heads,List<Integer>deprels "]
83501[label="formalParameter\n List<Integer>heads "]
93502[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103503[label="typeArguments\n <Integer> "]
113504[label="classType_lfno_classOrInterfaceType\n Integer "]
93505[label="variableDeclaratorId\n heads "]
83506[label="formalParameter\n List<Integer>deprels "]
93507[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103508[label="typeArguments\n <Integer> "]
113509[label="classType_lfno_classOrInterfaceType\n Integer "]
93510[label="variableDeclaratorId\n deprels "]
73511[label="formalParameter\n List<Action>actions "]
83512[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Action> "]
93513[label="typeArguments\n <Action> "]
103514[label="classType_lfno_classOrInterfaceType\n Action "]
83515[label="variableDeclaratorId\n actions "]
43516[label="block\n {intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions);} "]
53517[label="blockStatements\n intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions); "]
63518[label="localVariableDeclarationStatement\n intN=heads.size(); "]
73519[label="localVariableDeclaration\n intN=heads.size() "]
83520[label="integralType\n int "]
83521[label="variableDeclarator\n N=heads.size() "]
93522[label="variableDeclaratorId\n N "]
93523[label="methodInvocation_lfno_primary\n heads.size() "]
103524[label="typeName\n heads "]
63525[label="localVariableDeclarationStatement\n introot=-1; "]
73526[label="localVariableDeclaration\n introot=-1 "]
83527[label="integralType\n int "]
83528[label="variableDeclarator\n root=-1 "]
93529[label="variableDeclaratorId\n root "]
93530[label="unaryExpression\n -1 "]
103531[label="literal\n 1 "]
63532[label="localVariableDeclarationStatement\n List<List<Integer>>tree=newArrayList<List<Integer>>(N); "]
73533[label="localVariableDeclaration\n List<List<Integer>>tree=newArrayList<List<Integer>>(N) "]
83534[label="unannClassType_lfno_unannClassOrInterfaceType\n List<List<Integer>> "]
93535[label="typeArguments\n <List<Integer>> "]
103536[label="classType_lfno_classOrInterfaceType\n List<Integer> "]
113537[label="typeArguments\n <Integer> "]
123538[label="classType_lfno_classOrInterfaceType\n Integer "]
83539[label="variableDeclarator\n tree=newArrayList<List<Integer>>(N) "]
93540[label="variableDeclaratorId\n tree "]
93541[label="classInstanceCreationExpression_lfno_primary\n newArrayList<List<Integer>>(N) "]
103542[label="typeArguments\n <List<Integer>> "]
113543[label="classType_lfno_classOrInterfaceType\n List<Integer> "]
123544[label="typeArguments\n <Integer> "]
133545[label="classType_lfno_classOrInterfaceType\n Integer "]
103546[label="expressionName\n N "]
63547[label="expressionStatement\n actions.clear(); "]
73548[label="methodInvocation\n actions.clear() "]
83549[label="typeName\n actions "]
63550[label="basicForStatement\n for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}} "]
73551[label="localVariableDeclaration\n inti=0 "]
83552[label="integralType\n int "]
83553[label="variableDeclarator\n i=0 "]
93554[label="variableDeclaratorId\n i "]
93555[label="literal\n 0 "]
73556[label="relationalExpression\n i<N "]
83557[label="expressionName\n i "]
83558[label="expressionName\n N "]
73559[label="preIncrementExpression\n ++i "]
83560[label="expressionName\n i "]
73561[label="block\n {inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}} "]
83562[label="blockStatements\n inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);} "]
93563[label="localVariableDeclarationStatement\n inthead=heads.get(i); "]
103564[label="localVariableDeclaration\n inthead=heads.get(i) "]
113565[label="integralType\n int "]
113566[label="variableDeclarator\n head=heads.get(i) "]
123567[label="variableDeclaratorId\n head "]
123568[label="methodInvocation_lfno_primary\n heads.get(i) "]
133569[label="typeName\n heads "]
133570[label="expressionName\n i "]
93571[label="ifThenElseStatement\n if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);} "]
103572[label="equalityExpression\n head==-1 "]
113573[label="expressionName\n head "]
113574[label="unaryExpression\n -1 "]
123575[label="literal\n 1 "]
103576[label="block\n {if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;} "]
113577[label="blockStatements\n if(root==-1)System.err.println(\"error: there should be only one root.\");root=i; "]
123578[label="ifThenStatement\n if(root==-1)System.err.println(\"error: there should be only one root.\"); "]
133579[label="equalityExpression\n root==-1 "]
143580[label="expressionName\n root "]
143581[label="unaryExpression\n -1 "]
153582[label="literal\n 1 "]
133583[label="expressionStatement\n System.err.println(\"error: there should be only one root.\"); "]
143584[label="methodInvocation\n System.err.println(\"error: there should be only one root.\") "]
153585[label="typeName\n System.err "]
163586[label="packageOrTypeName\n System "]
153587[label="literal\n \"error: there should be only one root.\" "]
123588[label="expressionStatement\n root=i; "]
133589[label="assignment\n root=i "]
143590[label="expressionName\n root "]
143591[label="assignmentOperator\n = "]
143592[label="expressionName\n i "]
103593[label="block\n {tree.get(head).add(i);} "]
113594[label="expressionStatement\n tree.get(head).add(i); "]
123595[label="methodInvocation\n tree.get(head).add(i) "]
133596[label="methodInvocation_lfno_primary\n tree.get(head) "]
143597[label="typeName\n tree "]
143598[label="expressionName\n head "]
133599[label="expressionName\n i "]
63600[label="expressionStatement\n get_oracle_actions_travel(root,heads,deprels,tree,actions); "]
73601[label="methodInvocation\n get_oracle_actions_travel(root,heads,deprels,tree,actions) "]
83602[label="methodName\n get_oracle_actions_travel "]
83603[label="argumentList\n root,heads,deprels,tree,actions "]
93604[label="expressionName\n root "]
93605[label="expressionName\n heads "]
93606[label="expressionName\n deprels "]
93607[label="expressionName\n tree "]
93608[label="expressionName\n actions "]
33609[label="methodDeclaration\n voidget_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions){List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));}} "]
43610[label="methodHeader\n voidget_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions) "]
53611[label="result\n void "]
53612[label="methodDeclarator\n get_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions) "]
63613[label="formalParameterList\n introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions "]
73614[label="formalParameters\n introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree "]
83615[label="formalParameter\n introot "]
93616[label="integralType\n int "]
93617[label="variableDeclaratorId\n root "]
83618[label="formalParameter\n List<Integer>heads "]
93619[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103620[label="typeArguments\n <Integer> "]
113621[label="classType_lfno_classOrInterfaceType\n Integer "]
93622[label="variableDeclaratorId\n heads "]
83623[label="formalParameter\n List<Integer>deprels "]
93624[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103625[label="typeArguments\n <Integer> "]
113626[label="classType_lfno_classOrInterfaceType\n Integer "]
93627[label="variableDeclaratorId\n deprels "]
83628[label="formalParameter\n List<List<Integer>>tree "]
93629[label="unannClassType_lfno_unannClassOrInterfaceType\n List<List<Integer>> "]
103630[label="typeArguments\n <List<Integer>> "]
113631[label="classType_lfno_classOrInterfaceType\n List<Integer> "]
123632[label="typeArguments\n <Integer> "]
133633[label="classType_lfno_classOrInterfaceType\n Integer "]
93634[label="variableDeclaratorId\n tree "]
73635[label="formalParameter\n List<Action>actions "]
83636[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Action> "]
93637[label="typeArguments\n <Action> "]
103638[label="classType_lfno_classOrInterfaceType\n Action "]
83639[label="variableDeclaratorId\n actions "]
43640[label="block\n {List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));}} "]
53641[label="blockStatements\n List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));} "]
63642[label="localVariableDeclarationStatement\n List<Integer>children=tree.get(root); "]
73643[label="localVariableDeclaration\n List<Integer>children=tree.get(root) "]
83644[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
93645[label="typeArguments\n <Integer> "]
103646[label="classType_lfno_classOrInterfaceType\n Integer "]
83647[label="variableDeclarator\n children=tree.get(root) "]
93648[label="variableDeclaratorId\n children "]
93649[label="methodInvocation_lfno_primary\n tree.get(root) "]
103650[label="typeName\n tree "]
103651[label="expressionName\n root "]
63652[label="localVariableDeclarationStatement\n inti; "]
73653[label="localVariableDeclaration\n inti "]
83654[label="integralType\n int "]
83655[label="variableDeclaratorId\n i "]
63656[label="basicForStatement\n for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);} "]
73657[label="assignment\n i=0 "]
83658[label="expressionName\n i "]
83659[label="assignmentOperator\n = "]
83660[label="literal\n 0 "]
73661[label="conditionalAndExpression\n i<children.size()&&children.get(i)<root "]
83662[label="relationalExpression\n i<children.size() "]
93663[label="expressionName\n i "]
93664[label="methodInvocation_lfno_primary\n children.size() "]
103665[label="typeName\n children "]
83666[label="relationalExpression\n children.get(i)<root "]
93667[label="methodInvocation_lfno_primary\n children.get(i) "]
103668[label="typeName\n children "]
103669[label="expressionName\n i "]
93670[label="expressionName\n root "]
73671[label="preIncrementExpression\n ++i "]
83672[label="expressionName\n i "]
73673[label="block\n {get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);} "]
83674[label="expressionStatement\n get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions); "]
93675[label="methodInvocation\n get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions) "]
103676[label="methodName\n get_oracle_actions_travel "]
103677[label="argumentList\n children.get(i),heads,deprels,tree,actions "]
113678[label="methodInvocation_lfno_primary\n children.get(i) "]
123679[label="typeName\n children "]
123680[label="expressionName\n i "]
113681[label="expressionName\n heads "]
113682[label="expressionName\n deprels "]
113683[label="expressionName\n tree "]
113684[label="expressionName\n actions "]
63685[label="expressionStatement\n actions.add(ActionFactory.make_shift()); "]
73686[label="methodInvocation\n actions.add(ActionFactory.make_shift()) "]
83687[label="typeName\n actions "]
83688[label="methodInvocation_lfno_primary\n ActionFactory.make_shift() "]
93689[label="typeName\n ActionFactory "]
63690[label="basicForStatement\n for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));} "]
73691[label="localVariableDeclaration\n intj=i "]
83692[label="integralType\n int "]
83693[label="variableDeclarator\n j=i "]
93694[label="variableDeclaratorId\n j "]
93695[label="expressionName\n i "]
73696[label="relationalExpression\n j<children.size() "]
83697[label="expressionName\n j "]
83698[label="methodInvocation_lfno_primary\n children.size() "]
93699[label="typeName\n children "]
73700[label="preIncrementExpression\n ++j "]
83701[label="expressionName\n j "]
73702[label="block\n {intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));} "]
83703[label="blockStatements\n intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child))); "]
93704[label="localVariableDeclarationStatement\n intchild=children.get(j); "]
103705[label="localVariableDeclaration\n intchild=children.get(j) "]
113706[label="integralType\n int "]
113707[label="variableDeclarator\n child=children.get(j) "]
123708[label="variableDeclaratorId\n child "]
123709[label="methodInvocation_lfno_primary\n children.get(j) "]
133710[label="typeName\n children "]
133711[label="expressionName\n j "]
93712[label="expressionStatement\n get_oracle_actions_travel(child,heads,deprels,tree,actions); "]
103713[label="methodInvocation\n get_oracle_actions_travel(child,heads,deprels,tree,actions) "]
113714[label="methodName\n get_oracle_actions_travel "]
113715[label="argumentList\n child,heads,deprels,tree,actions "]
123716[label="expressionName\n child "]
123717[label="expressionName\n heads "]
123718[label="expressionName\n deprels "]
123719[label="expressionName\n tree "]
123720[label="expressionName\n actions "]
93721[label="expressionStatement\n actions.add(ActionFactory.make_right_arc(deprels.get(child))); "]
103722[label="methodInvocation\n actions.add(ActionFactory.make_right_arc(deprels.get(child))) "]
113723[label="typeName\n actions "]
113724[label="methodInvocation_lfno_primary\n ActionFactory.make_right_arc(deprels.get(child)) "]
123725[label="typeName\n ActionFactory "]
123726[label="methodInvocation_lfno_primary\n deprels.get(child) "]
133727[label="typeName\n deprels "]
133728[label="expressionName\n child "]
63729[label="basicForStatement\n for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));} "]
73730[label="localVariableDeclaration\n intj=i-1 "]
83731[label="integralType\n int "]
83732[label="variableDeclarator\n j=i-1 "]
93733[label="variableDeclaratorId\n j "]
93734[label="additiveExpression\n i-1 "]
103735[label="expressionName\n i "]
103736[label="literal\n 1 "]
73737[label="relationalExpression\n j>=0 "]
83738[label="expressionName\n j "]
83739[label="literal\n 0 "]
73740[label="preDecrementExpression\n --j "]
83741[label="expressionName\n j "]
73742[label="block\n {intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));} "]
83743[label="blockStatements\n intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child))); "]
93744[label="localVariableDeclarationStatement\n intchild=children.get(j); "]
103745[label="localVariableDeclaration\n intchild=children.get(j) "]
113746[label="integralType\n int "]
113747[label="variableDeclarator\n child=children.get(j) "]
123748[label="variableDeclaratorId\n child "]
123749[label="methodInvocation_lfno_primary\n children.get(j) "]
133750[label="typeName\n children "]
133751[label="expressionName\n j "]
93752[label="expressionStatement\n actions.add(ActionFactory.make_left_arc(deprels.get(child))); "]
103753[label="methodInvocation\n actions.add(ActionFactory.make_left_arc(deprels.get(child))) "]
113754[label="typeName\n actions "]
113755[label="methodInvocation_lfno_primary\n ActionFactory.make_left_arc(deprels.get(child)) "]
123756[label="typeName\n ActionFactory "]
123757[label="methodInvocation_lfno_primary\n deprels.get(child) "]
133758[label="typeName\n deprels "]
133759[label="expressionName\n child "]
33760[label="methodDeclaration\n voidget_oracle_actions2(Dependencyinstance,List<Action>actions){get_oracle_actions2(instance.heads,instance.deprels,actions);} "]
43761[label="methodHeader\n voidget_oracle_actions2(Dependencyinstance,List<Action>actions) "]
53762[label="result\n void "]
53763[label="methodDeclarator\n get_oracle_actions2(Dependencyinstance,List<Action>actions) "]
63764[label="formalParameterList\n Dependencyinstance,List<Action>actions "]
73765[label="formalParameter\n Dependencyinstance "]
83766[label="unannClassType_lfno_unannClassOrInterfaceType\n Dependency "]
83767[label="variableDeclaratorId\n instance "]
73768[label="formalParameter\n List<Action>actions "]
83769[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Action> "]
93770[label="typeArguments\n <Action> "]
103771[label="classType_lfno_classOrInterfaceType\n Action "]
83772[label="variableDeclaratorId\n actions "]
43773[label="block\n {get_oracle_actions2(instance.heads,instance.deprels,actions);} "]
53774[label="expressionStatement\n get_oracle_actions2(instance.heads,instance.deprels,actions); "]
63775[label="methodInvocation\n get_oracle_actions2(instance.heads,instance.deprels,actions) "]
73776[label="methodName\n get_oracle_actions2 "]
73777[label="argumentList\n instance.heads,instance.deprels,actions "]
83778[label="expressionName\n instance.heads "]
93779[label="ambiguousName\n instance "]
83780[label="expressionName\n instance.deprels "]
93781[label="ambiguousName\n instance "]
83782[label="expressionName\n actions "]
33783[label="methodDeclaration\n voidget_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions){actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];}} "]
43784[label="methodHeader\n voidget_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions) "]
53785[label="result\n void "]
53786[label="methodDeclarator\n get_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions) "]
63787[label="formalParameterList\n List<Integer>heads,List<Integer>deprels,List<Action>actions "]
73788[label="formalParameters\n List<Integer>heads,List<Integer>deprels "]
83789[label="formalParameter\n List<Integer>heads "]
93790[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103791[label="typeArguments\n <Integer> "]
113792[label="classType_lfno_classOrInterfaceType\n Integer "]
93793[label="variableDeclaratorId\n heads "]
83794[label="formalParameter\n List<Integer>deprels "]
93795[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103796[label="typeArguments\n <Integer> "]
113797[label="classType_lfno_classOrInterfaceType\n Integer "]
93798[label="variableDeclaratorId\n deprels "]
73799[label="formalParameter\n List<Action>actions "]
83800[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Action> "]
93801[label="typeArguments\n <Action> "]
103802[label="classType_lfno_classOrInterfaceType\n Action "]
83803[label="variableDeclaratorId\n actions "]
43804[label="block\n {actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];}} "]
53805[label="blockStatements\n actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];} "]
63806[label="expressionStatement\n actions.clear(); "]
73807[label="methodInvocation\n actions.clear() "]
83808[label="typeName\n actions "]
63809[label="localVariableDeclarationStatement\n intlen=heads.size(); "]
73810[label="localVariableDeclaration\n intlen=heads.size() "]
83811[label="integralType\n int "]
83812[label="variableDeclarator\n len=heads.size() "]
93813[label="variableDeclaratorId\n len "]
93814[label="methodInvocation_lfno_primary\n heads.size() "]
103815[label="typeName\n heads "]
63816[label="localVariableDeclarationStatement\n List<Integer>sigma=newArrayList<Integer>(); "]
73817[label="localVariableDeclaration\n List<Integer>sigma=newArrayList<Integer>() "]
83818[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
93819[label="typeArguments\n <Integer> "]
103820[label="classType_lfno_classOrInterfaceType\n Integer "]
83821[label="variableDeclarator\n sigma=newArrayList<Integer>() "]
93822[label="variableDeclaratorId\n sigma "]
93823[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Integer>() "]
103824[label="typeArguments\n <Integer> "]
113825[label="classType_lfno_classOrInterfaceType\n Integer "]
63826[label="localVariableDeclarationStatement\n intbeta=0; "]
73827[label="localVariableDeclaration\n intbeta=0 "]
83828[label="integralType\n int "]
83829[label="variableDeclarator\n beta=0 "]
93830[label="variableDeclaratorId\n beta "]
93831[label="literal\n 0 "]
63832[label="localVariableDeclarationStatement\n List<Integer>output=newArrayList<Integer>(len); "]
73833[label="localVariableDeclaration\n List<Integer>output=newArrayList<Integer>(len) "]
83834[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
93835[label="typeArguments\n <Integer> "]
103836[label="classType_lfno_classOrInterfaceType\n Integer "]
83837[label="variableDeclarator\n output=newArrayList<Integer>(len) "]
93838[label="variableDeclaratorId\n output "]
93839[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Integer>(len) "]
103840[label="typeArguments\n <Integer> "]
113841[label="classType_lfno_classOrInterfaceType\n Integer "]
103842[label="expressionName\n len "]
63843[label="basicForStatement\n for(inti=0;i<len;i++){output.add(-1);} "]
73844[label="localVariableDeclaration\n inti=0 "]
83845[label="integralType\n int "]
83846[label="variableDeclarator\n i=0 "]
93847[label="variableDeclaratorId\n i "]
93848[label="literal\n 0 "]
73849[label="relationalExpression\n i<len "]
83850[label="expressionName\n i "]
83851[label="expressionName\n len "]
73852[label="postIncrementExpression\n i++ "]
83853[label="expressionName\n i "]
73854[label="block\n {output.add(-1);} "]
83855[label="expressionStatement\n output.add(-1); "]
93856[label="methodInvocation\n output.add(-1) "]
103857[label="typeName\n output "]
103858[label="unaryExpression\n -1 "]
113859[label="literal\n 1 "]
63860[label="localVariableDeclarationStatement\n intstep=0; "]
73861[label="localVariableDeclaration\n intstep=0 "]
83862[label="integralType\n int "]
83863[label="variableDeclarator\n step=0 "]
93864[label="variableDeclaratorId\n step "]
93865[label="literal\n 0 "]
63866[label="whileStatement\n while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];} "]
73867[label="unaryExpressionNotPlusMinus\n !(sigma.size()==1&&beta==len) "]
83868[label="primaryNoNewArray_lfno_primary\n (sigma.size()==1&&beta==len) "]
93869[label="conditionalAndExpression\n sigma.size()==1&&beta==len "]
103870[label="equalityExpression\n sigma.size()==1 "]
113871[label="methodInvocation_lfno_primary\n sigma.size() "]
123872[label="typeName\n sigma "]
113873[label="literal\n 1 "]
103874[label="equalityExpression\n beta==len "]
113875[label="expressionName\n beta "]
113876[label="expressionName\n len "]
73877[label="block\n {int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];} "]
83878[label="blockStatements\n int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0]; "]
93879[label="localVariableDeclarationStatement\n int[]beta_reference=newint[]{beta}; "]
103880[label="localVariableDeclaration\n int[]beta_reference=newint[]{beta} "]
113881[label="unannArrayType\n int[] "]
123882[label="integralType\n int "]
123883[label="dims\n [] "]
113884[label="variableDeclarator\n beta_reference=newint[]{beta} "]
123885[label="variableDeclaratorId\n beta_reference "]
123886[label="arrayCreationExpression\n newint[]{beta} "]
133887[label="integralType\n int "]
133888[label="dims\n [] "]
133889[label="arrayInitializer\n {beta} "]
143890[label="expressionName\n beta "]
93891[label="expressionStatement\n get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions); "]
103892[label="methodInvocation\n get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions) "]
113893[label="methodName\n get_oracle_actions_onestep "]
113894[label="argumentList\n heads,deprels,sigma,beta_reference,output,actions "]
123895[label="expressionName\n heads "]
123896[label="expressionName\n deprels "]
123897[label="expressionName\n sigma "]
123898[label="expressionName\n beta_reference "]
123899[label="expressionName\n output "]
123900[label="expressionName\n actions "]
93901[label="expressionStatement\n beta=beta_reference[0]; "]
103902[label="assignment\n beta=beta_reference[0] "]
113903[label="expressionName\n beta "]
113904[label="assignmentOperator\n = "]
113905[label="arrayAccess_lfno_primary\n beta_reference[0] "]
123906[label="expressionName\n beta_reference "]
123907[label="literal\n 0 "]
33908[label="methodDeclaration\n voidget_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions){inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];}} "]
43909[label="methodHeader\n voidget_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions) "]
53910[label="result\n void "]
53911[label="methodDeclarator\n get_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions) "]
63912[label="formalParameterList\n List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions "]
73913[label="formalParameters\n List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output "]
83914[label="formalParameter\n List<Integer>heads "]
93915[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103916[label="typeArguments\n <Integer> "]
113917[label="classType_lfno_classOrInterfaceType\n Integer "]
93918[label="variableDeclaratorId\n heads "]
83919[label="formalParameter\n List<Integer>deprels "]
93920[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103921[label="typeArguments\n <Integer> "]
113922[label="classType_lfno_classOrInterfaceType\n Integer "]
93923[label="variableDeclaratorId\n deprels "]
83924[label="formalParameter\n List<Integer>sigma "]
93925[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103926[label="typeArguments\n <Integer> "]
113927[label="classType_lfno_classOrInterfaceType\n Integer "]
93928[label="variableDeclaratorId\n sigma "]
83929[label="formalParameter\n int[]beta "]
93930[label="unannArrayType\n int[] "]
103931[label="integralType\n int "]
103932[label="dims\n [] "]
93933[label="variableDeclaratorId\n beta "]
83934[label="formalParameter\n List<Integer>output "]
93935[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103936[label="typeArguments\n <Integer> "]
113937[label="classType_lfno_classOrInterfaceType\n Integer "]
93938[label="variableDeclaratorId\n output "]
73939[label="formalParameter\n List<Action>actions "]
83940[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Action> "]
93941[label="typeArguments\n <Action> "]
103942[label="classType_lfno_classOrInterfaceType\n Action "]
83943[label="variableDeclaratorId\n actions "]
43944[label="block\n {inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];}} "]
53945[label="blockStatements\n inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];} "]
63946[label="localVariableDeclarationStatement\n inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1); "]
73947[label="localVariableDeclaration\n inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1) "]
83948[label="integralType\n int "]
83949[label="variableDeclarator\n top0=(sigma.size()>0?sigma.get(sigma.size()-1):-1) "]
93950[label="variableDeclaratorId\n top0 "]
93951[label="primaryNoNewArray_lfno_primary\n (sigma.size()>0?sigma.get(sigma.size()-1):-1) "]
103952[label="conditionalExpression\n sigma.size()>0?sigma.get(sigma.size()-1):-1 "]
113953[label="relationalExpression\n sigma.size()>0 "]
123954[label="methodInvocation_lfno_primary\n sigma.size() "]
133955[label="typeName\n sigma "]
123956[label="literal\n 0 "]
113957[label="methodInvocation_lfno_primary\n sigma.get(sigma.size()-1) "]
123958[label="typeName\n sigma "]
123959[label="additiveExpression\n sigma.size()-1 "]
133960[label="methodInvocation_lfno_primary\n sigma.size() "]
143961[label="typeName\n sigma "]
133962[label="literal\n 1 "]
113963[label="unaryExpression\n -1 "]
123964[label="literal\n 1 "]
63965[label="localVariableDeclarationStatement\n inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1); "]
73966[label="localVariableDeclaration\n inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1) "]
83967[label="integralType\n int "]
83968[label="variableDeclarator\n top1=(sigma.size()>1?sigma.get(sigma.size()-2):-1) "]
93969[label="variableDeclaratorId\n top1 "]
93970[label="primaryNoNewArray_lfno_primary\n (sigma.size()>1?sigma.get(sigma.size()-2):-1) "]
103971[label="conditionalExpression\n sigma.size()>1?sigma.get(sigma.size()-2):-1 "]
113972[label="relationalExpression\n sigma.size()>1 "]
123973[label="methodInvocation_lfno_primary\n sigma.size() "]
133974[label="typeName\n sigma "]
123975[label="literal\n 1 "]
113976[label="methodInvocation_lfno_primary\n sigma.get(sigma.size()-2) "]
123977[label="typeName\n sigma "]
123978[label="additiveExpression\n sigma.size()-2 "]
133979[label="methodInvocation_lfno_primary\n sigma.size() "]
143980[label="typeName\n sigma "]
133981[label="literal\n 2 "]
113982[label="unaryExpression\n -1 "]
123983[label="literal\n 1 "]
63984[label="localVariableDeclarationStatement\n booleanall_descendents_reduced=true; "]
73985[label="localVariableDeclaration\n booleanall_descendents_reduced=true "]
83986[label="unannPrimitiveType\n boolean "]
83987[label="variableDeclarator\n all_descendents_reduced=true "]
93988[label="variableDeclaratorId\n all_descendents_reduced "]
93989[label="literal\n true "]
63990[label="ifThenStatement\n if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}} "]
73991[label="relationalExpression\n top0>=0 "]
83992[label="expressionName\n top0 "]
83993[label="literal\n 0 "]
73994[label="block\n {for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}} "]
83995[label="basicForStatement\n for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}} "]
93996[label="localVariableDeclaration\n inti=0 "]
103997[label="integralType\n int "]
103998[label="variableDeclarator\n i=0 "]
113999[label="variableDeclaratorId\n i "]
114000[label="literal\n 0 "]
94001[label="relationalExpression\n i<heads.size() "]
104002[label="expressionName\n i "]
104003[label="methodInvocation_lfno_primary\n heads.size() "]
114004[label="typeName\n heads "]
94005[label="preIncrementExpression\n ++i "]
104006[label="expressionName\n i "]
94007[label="block\n {if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}} "]
104008[label="ifThenStatement\n if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;} "]
114009[label="conditionalAndExpression\n heads.get(i)==top0&&output.get(i)!=top0 "]
124010[label="equalityExpression\n heads.get(i)==top0 "]
134011[label="methodInvocation_lfno_primary\n heads.get(i) "]
144012[label="typeName\n heads "]
144013[label="expressionName\n i "]
134014[label="expressionName\n top0 "]
124015[label="equalityExpression\n output.get(i)!=top0 "]
134016[label="methodInvocation_lfno_primary\n output.get(i) "]
144017[label="typeName\n output "]
144018[label="expressionName\n i "]
134019[label="expressionName\n top0 "]
114020[label="block\n {all_descendents_reduced=false;break;} "]
124021[label="blockStatements\n all_descendents_reduced=false;break; "]
134022[label="expressionStatement\n all_descendents_reduced=false; "]
144023[label="assignment\n all_descendents_reduced=false "]
154024[label="expressionName\n all_descendents_reduced "]
154025[label="assignmentOperator\n = "]
154026[label="literal\n false "]
134027[label="breakStatement\n break; "]
64028[label="ifThenElseStatement\n if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];} "]
74029[label="conditionalAndExpression\n top1>=0&&heads.get(top1)==top0 "]
84030[label="relationalExpression\n top1>=0 "]
94031[label="expressionName\n top1 "]
94032[label="literal\n 0 "]
84033[label="equalityExpression\n heads.get(top1)==top0 "]
94034[label="methodInvocation_lfno_primary\n heads.get(top1) "]
104035[label="typeName\n heads "]
104036[label="expressionName\n top1 "]
94037[label="expressionName\n top0 "]
74038[label="block\n {actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);} "]
84039[label="blockStatements\n actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0); "]
94040[label="expressionStatement\n actions.add(ActionFactory.make_left_arc(deprels.get(top1))); "]
104041[label="methodInvocation\n actions.add(ActionFactory.make_left_arc(deprels.get(top1))) "]
114042[label="typeName\n actions "]
114043[label="methodInvocation_lfno_primary\n ActionFactory.make_left_arc(deprels.get(top1)) "]
124044[label="typeName\n ActionFactory "]
124045[label="methodInvocation_lfno_primary\n deprels.get(top1) "]
134046[label="typeName\n deprels "]
134047[label="expressionName\n top1 "]
94048[label="expressionStatement\n output.set(top1,top0); "]
104049[label="methodInvocation\n output.set(top1,top0) "]
114050[label="typeName\n output "]
114051[label="argumentList\n top1,top0 "]
124052[label="expressionName\n top1 "]
124053[label="expressionName\n top0 "]
94054[label="expressionStatement\n sigma.remove(sigma.size()-1); "]
104055[label="methodInvocation\n sigma.remove(sigma.size()-1) "]
114056[label="typeName\n sigma "]
114057[label="additiveExpression\n sigma.size()-1 "]
124058[label="methodInvocation_lfno_primary\n sigma.size() "]
134059[label="typeName\n sigma "]
124060[label="literal\n 1 "]
94061[label="expressionStatement\n sigma.set(sigma.size()-1,top0); "]
104062[label="methodInvocation\n sigma.set(sigma.size()-1,top0) "]
114063[label="typeName\n sigma "]
114064[label="argumentList\n sigma.size()-1,top0 "]
124065[label="additiveExpression\n sigma.size()-1 "]
134066[label="methodInvocation_lfno_primary\n sigma.size() "]
144067[label="typeName\n sigma "]
134068[label="literal\n 1 "]
124069[label="expressionName\n top0 "]
74070[label="ifThenElseStatement\n if(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];} "]
84071[label="conditionalAndExpression\n top1>=0&&heads.get(top0)==top1&&all_descendents_reduced "]
94072[label="conditionalAndExpression\n top1>=0&&heads.get(top0)==top1 "]
104073[label="relationalExpression\n top1>=0 "]
114074[label="expressionName\n top1 "]
114075[label="literal\n 0 "]
104076[label="equalityExpression\n heads.get(top0)==top1 "]
114077[label="methodInvocation_lfno_primary\n heads.get(top0) "]
124078[label="typeName\n heads "]
124079[label="expressionName\n top0 "]
114080[label="expressionName\n top1 "]
94081[label="expressionName\n all_descendents_reduced "]
84082[label="block\n {actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);} "]
94083[label="blockStatements\n actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1); "]
104084[label="expressionStatement\n actions.add(ActionFactory.make_right_arc(deprels.get(top0))); "]
114085[label="methodInvocation\n actions.add(ActionFactory.make_right_arc(deprels.get(top0))) "]
124086[label="typeName\n actions "]
124087[label="methodInvocation_lfno_primary\n ActionFactory.make_right_arc(deprels.get(top0)) "]
134088[label="typeName\n ActionFactory "]
134089[label="methodInvocation_lfno_primary\n deprels.get(top0) "]
144090[label="typeName\n deprels "]
144091[label="expressionName\n top0 "]
104092[label="expressionStatement\n output.set(top0,top1); "]
114093[label="methodInvocation\n output.set(top0,top1) "]
124094[label="typeName\n output "]
124095[label="argumentList\n top0,top1 "]
134096[label="expressionName\n top0 "]
134097[label="expressionName\n top1 "]
104098[label="expressionStatement\n sigma.remove(sigma.size()-1); "]
114099[label="methodInvocation\n sigma.remove(sigma.size()-1) "]
124100[label="typeName\n sigma "]
124101[label="additiveExpression\n sigma.size()-1 "]
134102[label="methodInvocation_lfno_primary\n sigma.size() "]
144103[label="typeName\n sigma "]
134104[label="literal\n 1 "]
84105[label="ifThenStatement\n if(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];} "]
94106[label="relationalExpression\n beta[0]<heads.size() "]
104107[label="arrayAccess_lfno_primary\n beta[0] "]
114108[label="expressionName\n beta "]
114109[label="literal\n 0 "]
104110[label="methodInvocation_lfno_primary\n heads.size() "]
114111[label="typeName\n heads "]
94112[label="block\n {actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];} "]
104113[label="blockStatements\n actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0]; "]
114114[label="expressionStatement\n actions.add(ActionFactory.make_shift()); "]
124115[label="methodInvocation\n actions.add(ActionFactory.make_shift()) "]
134116[label="typeName\n actions "]
134117[label="methodInvocation_lfno_primary\n ActionFactory.make_shift() "]
144118[label="typeName\n ActionFactory "]
114119[label="expressionStatement\n sigma.add(beta[0]); "]
124120[label="methodInvocation\n sigma.add(beta[0]) "]
134121[label="typeName\n sigma "]
134122[label="arrayAccess_lfno_primary\n beta[0] "]
144123[label="expressionName\n beta "]
144124[label="literal\n 0 "]
114125[label="expressionStatement\n ++beta[0]; "]
124126[label="preIncrementExpression\n ++beta[0] "]
134127[label="arrayAccess_lfno_primary\n beta[0] "]
144128[label="expressionName\n beta "]
144129[label="literal\n 0 "]
04130[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.option;publicclassAdaOption{doubleada_eps;doubleada_alpha;doublelambda;doubledropout_probability;}<EOF> "]
14131[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.option; "]
24132[label="packageName\n com.hankcs.hanlp.dependency.nnparser.option "]
34133[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
44134[label="packageName\n com.hankcs.hanlp.dependency "]
54135[label="packageName\n com.hankcs.hanlp "]
64136[label="packageName\n com.hankcs "]
74137[label="packageName\n com "]
14138[label="normalClassDeclaration\n publicclassAdaOption{doubleada_eps;doubleada_alpha;doublelambda;doubledropout_probability;} "]
24139[label="classModifier\n public "]
24140[label="classBody\n {doubleada_eps;doubleada_alpha;doublelambda;doubledropout_probability;} "]
34141[label="fieldDeclaration\n doubleada_eps; "]
44142[label="floatingPointType\n double "]
44143[label="variableDeclaratorId\n ada_eps "]
34144[label="fieldDeclaration\n doubleada_alpha; "]
44145[label="floatingPointType\n double "]
44146[label="variableDeclaratorId\n ada_alpha "]
34147[label="fieldDeclaration\n doublelambda; "]
44148[label="floatingPointType\n double "]
44149[label="variableDeclaratorId\n lambda "]
34150[label="fieldDeclaration\n doubledropout_probability; "]
44151[label="floatingPointType\n double "]
44152[label="variableDeclaratorId\n dropout_probability "]
04153[label="compilationUnit\n packagecom.hankcs.test.corpus;importcom.hankcs.hanlp.HanLP;importcom.hankcs.hanlp.corpus.dictionary.DictionaryMaker;importcom.hankcs.hanlp.corpus.dictionary.EasyDictionary;importcom.hankcs.hanlp.corpus.dictionary.TFDictionary;importcom.hankcs.hanlp.corpus.dictionary.item.Item;importcom.hankcs.hanlp.corpus.document.CorpusLoader;importcom.hankcs.hanlp.corpus.document.Document;importcom.hankcs.hanlp.corpus.document.sentence.word.CompoundWord;importcom.hankcs.hanlp.corpus.document.sentence.word.IWord;importcom.hankcs.hanlp.corpus.io.FolderWalker;importcom.hankcs.hanlp.corpus.io.IOUtil;importcom.hankcs.hanlp.corpus.occurrence.TermFrequency;importcom.hankcs.hanlp.dictionary.CoreBiGramTableDictionary;importcom.hankcs.hanlp.dictionary.CoreDictionary;importcom.hankcs.hanlp.utility.Predefine;importjunit.framework.TestCase;importjava.io.*;importjava.util.List;importjava.util.Map;importjava.util.Set;importjava.util.TreeSet;publicclassAdjustCorpusextendsTestCase{publicvoidtestAdjust()throwsException{List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\");for(Filefile:fileList){handle(file);}}privatestaticvoidhandle(Filefile){try{Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}}catch(Exceptione){e.printStackTrace();}}privatestaticStringaddW(Stringtext,Stringc){text=text.replaceAll(\"\\\"+c+\"/w \",c);returntext.replaceAll(\"\\\"+c,c+\"/w \");}publicvoidtestPlay()throwsException{finalTFDictionarytfDictionary=newTFDictionary();CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}});tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\");}publicvoidtestAdjustNGram()throwsException{IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\"));while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();}bw.close();}publicvoidtestRemoveLabelD()throwsException{Set<String>nameFollowers=newTreeSet<String>();IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}}DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath);for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}}dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath);}}<EOF> "]
14154[label="packageDeclaration\n packagecom.hankcs.test.corpus; "]
24155[label="packageName\n com.hankcs.test.corpus "]
34156[label="packageName\n com.hankcs.test "]
44157[label="packageName\n com.hankcs "]
54158[label="packageName\n com "]
14159[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.HanLP; "]
24160[label="typeName\n com.hankcs.hanlp.HanLP "]
34161[label="packageOrTypeName\n com.hankcs.hanlp "]
44162[label="packageOrTypeName\n com.hankcs "]
54163[label="packageOrTypeName\n com "]
14164[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dictionary.DictionaryMaker; "]
24165[label="typeName\n com.hankcs.hanlp.corpus.dictionary.DictionaryMaker "]
34166[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dictionary "]
44167[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54168[label="packageOrTypeName\n com.hankcs.hanlp "]
64169[label="packageOrTypeName\n com.hankcs "]
74170[label="packageOrTypeName\n com "]
14171[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dictionary.EasyDictionary; "]
24172[label="typeName\n com.hankcs.hanlp.corpus.dictionary.EasyDictionary "]
34173[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dictionary "]
44174[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54175[label="packageOrTypeName\n com.hankcs.hanlp "]
64176[label="packageOrTypeName\n com.hankcs "]
74177[label="packageOrTypeName\n com "]
14178[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dictionary.TFDictionary; "]
24179[label="typeName\n com.hankcs.hanlp.corpus.dictionary.TFDictionary "]
34180[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dictionary "]
44181[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54182[label="packageOrTypeName\n com.hankcs.hanlp "]
64183[label="packageOrTypeName\n com.hankcs "]
74184[label="packageOrTypeName\n com "]
14185[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dictionary.item.Item; "]
24186[label="typeName\n com.hankcs.hanlp.corpus.dictionary.item.Item "]
34187[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dictionary.item "]
44188[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dictionary "]
54189[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
64190[label="packageOrTypeName\n com.hankcs.hanlp "]
74191[label="packageOrTypeName\n com.hankcs "]
84192[label="packageOrTypeName\n com "]
14193[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.document.CorpusLoader; "]
24194[label="typeName\n com.hankcs.hanlp.corpus.document.CorpusLoader "]
34195[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document "]
44196[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54197[label="packageOrTypeName\n com.hankcs.hanlp "]
64198[label="packageOrTypeName\n com.hankcs "]
74199[label="packageOrTypeName\n com "]
14200[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.document.Document; "]
24201[label="typeName\n com.hankcs.hanlp.corpus.document.Document "]
34202[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document "]
44203[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54204[label="packageOrTypeName\n com.hankcs.hanlp "]
64205[label="packageOrTypeName\n com.hankcs "]
74206[label="packageOrTypeName\n com "]
14207[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.document.sentence.word.CompoundWord; "]
24208[label="typeName\n com.hankcs.hanlp.corpus.document.sentence.word.CompoundWord "]
34209[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document.sentence.word "]
44210[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document.sentence "]
54211[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document "]
64212[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
74213[label="packageOrTypeName\n com.hankcs.hanlp "]
84214[label="packageOrTypeName\n com.hankcs "]
94215[label="packageOrTypeName\n com "]
14216[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.document.sentence.word.IWord; "]
24217[label="typeName\n com.hankcs.hanlp.corpus.document.sentence.word.IWord "]
34218[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document.sentence.word "]
44219[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document.sentence "]
54220[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document "]
64221[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
74222[label="packageOrTypeName\n com.hankcs.hanlp "]
84223[label="packageOrTypeName\n com.hankcs "]
94224[label="packageOrTypeName\n com "]
14225[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.FolderWalker; "]
24226[label="typeName\n com.hankcs.hanlp.corpus.io.FolderWalker "]
34227[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
44228[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54229[label="packageOrTypeName\n com.hankcs.hanlp "]
64230[label="packageOrTypeName\n com.hankcs "]
74231[label="packageOrTypeName\n com "]
14232[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
24233[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
34234[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
44235[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54236[label="packageOrTypeName\n com.hankcs.hanlp "]
64237[label="packageOrTypeName\n com.hankcs "]
74238[label="packageOrTypeName\n com "]
14239[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.occurrence.TermFrequency; "]
24240[label="typeName\n com.hankcs.hanlp.corpus.occurrence.TermFrequency "]
34241[label="packageOrTypeName\n com.hankcs.hanlp.corpus.occurrence "]
44242[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54243[label="packageOrTypeName\n com.hankcs.hanlp "]
64244[label="packageOrTypeName\n com.hankcs "]
74245[label="packageOrTypeName\n com "]
14246[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dictionary.CoreBiGramTableDictionary; "]
24247[label="typeName\n com.hankcs.hanlp.dictionary.CoreBiGramTableDictionary "]
34248[label="packageOrTypeName\n com.hankcs.hanlp.dictionary "]
44249[label="packageOrTypeName\n com.hankcs.hanlp "]
54250[label="packageOrTypeName\n com.hankcs "]
64251[label="packageOrTypeName\n com "]
14252[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dictionary.CoreDictionary; "]
24253[label="typeName\n com.hankcs.hanlp.dictionary.CoreDictionary "]
34254[label="packageOrTypeName\n com.hankcs.hanlp.dictionary "]
44255[label="packageOrTypeName\n com.hankcs.hanlp "]
54256[label="packageOrTypeName\n com.hankcs "]
64257[label="packageOrTypeName\n com "]
14258[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.Predefine; "]
24259[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
34260[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
44261[label="packageOrTypeName\n com.hankcs.hanlp "]
54262[label="packageOrTypeName\n com.hankcs "]
64263[label="packageOrTypeName\n com "]
14264[label="singleTypeImportDeclaration\n importjunit.framework.TestCase; "]
24265[label="typeName\n junit.framework.TestCase "]
34266[label="packageOrTypeName\n junit.framework "]
44267[label="packageOrTypeName\n junit "]
14268[label="typeImportOnDemandDeclaration\n importjava.io.*; "]
24269[label="packageOrTypeName\n java.io "]
34270[label="packageOrTypeName\n java "]
14271[label="singleTypeImportDeclaration\n importjava.util.List; "]
24272[label="typeName\n java.util.List "]
34273[label="packageOrTypeName\n java.util "]
44274[label="packageOrTypeName\n java "]
14275[label="singleTypeImportDeclaration\n importjava.util.Map; "]
24276[label="typeName\n java.util.Map "]
34277[label="packageOrTypeName\n java.util "]
44278[label="packageOrTypeName\n java "]
14279[label="singleTypeImportDeclaration\n importjava.util.Set; "]
24280[label="typeName\n java.util.Set "]
34281[label="packageOrTypeName\n java.util "]
44282[label="packageOrTypeName\n java "]
14283[label="singleTypeImportDeclaration\n importjava.util.TreeSet; "]
24284[label="typeName\n java.util.TreeSet "]
34285[label="packageOrTypeName\n java.util "]
44286[label="packageOrTypeName\n java "]
14287[label="normalClassDeclaration\n publicclassAdjustCorpusextendsTestCase{publicvoidtestAdjust()throwsException{List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\");for(Filefile:fileList){handle(file);}}privatestaticvoidhandle(Filefile){try{Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}}catch(Exceptione){e.printStackTrace();}}privatestaticStringaddW(Stringtext,Stringc){text=text.replaceAll(\"\\\"+c+\"/w \",c);returntext.replaceAll(\"\\\"+c,c+\"/w \");}publicvoidtestPlay()throwsException{finalTFDictionarytfDictionary=newTFDictionary();CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}});tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\");}publicvoidtestAdjustNGram()throwsException{IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\"));while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();}bw.close();}publicvoidtestRemoveLabelD()throwsException{Set<String>nameFollowers=newTreeSet<String>();IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}}DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath);for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}}dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath);}} "]
24288[label="classModifier\n public "]
24289[label="superclass\n extendsTestCase "]
34290[label="classType\n TestCase "]
24291[label="classBody\n {publicvoidtestAdjust()throwsException{List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\");for(Filefile:fileList){handle(file);}}privatestaticvoidhandle(Filefile){try{Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}}catch(Exceptione){e.printStackTrace();}}privatestaticStringaddW(Stringtext,Stringc){text=text.replaceAll(\"\\\"+c+\"/w \",c);returntext.replaceAll(\"\\\"+c,c+\"/w \");}publicvoidtestPlay()throwsException{finalTFDictionarytfDictionary=newTFDictionary();CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}});tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\");}publicvoidtestAdjustNGram()throwsException{IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\"));while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();}bw.close();}publicvoidtestRemoveLabelD()throwsException{Set<String>nameFollowers=newTreeSet<String>();IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}}DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath);for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}}dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath);}} "]
34292[label="methodDeclaration\n publicvoidtestAdjust()throwsException{List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\");for(Filefile:fileList){handle(file);}} "]
44293[label="methodModifier\n public "]
44294[label="methodHeader\n voidtestAdjust()throwsException "]
54295[label="result\n void "]
54296[label="methodDeclarator\n testAdjust() "]
54297[label="throws_\n throwsException "]
64298[label="classType\n Exception "]
44299[label="block\n {List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\");for(Filefile:fileList){handle(file);}} "]
54300[label="blockStatements\n List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\");for(Filefile:fileList){handle(file);} "]
64301[label="localVariableDeclarationStatement\n List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\"); "]
74302[label="localVariableDeclaration\n List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\") "]
84303[label="unannClassType_lfno_unannClassOrInterfaceType\n List<File> "]
94304[label="typeArguments\n <File> "]
104305[label="classType_lfno_classOrInterfaceType\n File "]
84306[label="variableDeclarator\n fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\") "]
94307[label="variableDeclaratorId\n fileList "]
94308[label="methodInvocation_lfno_primary\n FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\") "]
104309[label="typeName\n FolderWalker "]
104310[label="literal\n \"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\" "]
64311[label="enhancedForStatement\n for(Filefile:fileList){handle(file);} "]
74312[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
74313[label="variableDeclaratorId\n file "]
74314[label="expressionName\n fileList "]
74315[label="block\n {handle(file);} "]
84316[label="expressionStatement\n handle(file); "]
94317[label="methodInvocation\n handle(file) "]
104318[label="methodName\n handle "]
104319[label="expressionName\n file "]
34320[label="methodDeclaration\n privatestaticvoidhandle(Filefile){try{Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}}catch(Exceptione){e.printStackTrace();}} "]
44321[label="methodModifier\n private "]
44322[label="methodModifier\n static "]
44323[label="methodHeader\n voidhandle(Filefile) "]
54324[label="result\n void "]
54325[label="methodDeclarator\n handle(Filefile) "]
64326[label="formalParameter\n Filefile "]
74327[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
74328[label="variableDeclaratorId\n file "]
44329[label="block\n {try{Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}}catch(Exceptione){e.printStackTrace();}} "]
54330[label="tryStatement\n try{Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}}catch(Exceptione){e.printStackTrace();} "]
64331[label="block\n {Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}} "]
74332[label="blockStatements\n Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);} "]
84333[label="localVariableDeclarationStatement\n Stringtext=IOUtil.readTxt(file.getPath()); "]
94334[label="localVariableDeclaration\n Stringtext=IOUtil.readTxt(file.getPath()) "]
104335[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
104336[label="variableDeclarator\n text=IOUtil.readTxt(file.getPath()) "]
114337[label="variableDeclaratorId\n text "]
114338[label="methodInvocation_lfno_primary\n IOUtil.readTxt(file.getPath()) "]
124339[label="typeName\n IOUtil "]
124340[label="methodInvocation_lfno_primary\n file.getPath() "]
134341[label="typeName\n file "]
84342[label="localVariableDeclarationStatement\n intlength=text.length(); "]
94343[label="localVariableDeclaration\n intlength=text.length() "]
104344[label="integralType\n int "]
104345[label="variableDeclarator\n length=text.length() "]
114346[label="variableDeclaratorId\n length "]
114347[label="methodInvocation_lfno_primary\n text.length() "]
124348[label="typeName\n text "]
84349[label="expressionStatement\n text=addW(text,\"：\"); "]
94350[label="assignment\n text=addW(text,\"：\") "]
104351[label="expressionName\n text "]
104352[label="assignmentOperator\n = "]
104353[label="methodInvocation_lfno_primary\n addW(text,\"：\") "]
114354[label="methodName\n addW "]
114355[label="argumentList\n text,\"：\" "]
124356[label="expressionName\n text "]
124357[label="literal\n \"：\" "]
84358[label="expressionStatement\n text=addW(text,\"？\"); "]
94359[label="assignment\n text=addW(text,\"？\") "]
104360[label="expressionName\n text "]
104361[label="assignmentOperator\n = "]
104362[label="methodInvocation_lfno_primary\n addW(text,\"？\") "]
114363[label="methodName\n addW "]
114364[label="argumentList\n text,\"？\" "]
124365[label="expressionName\n text "]
124366[label="literal\n \"？\" "]
84367[label="expressionStatement\n text=addW(text,\"，\"); "]
94368[label="assignment\n text=addW(text,\"，\") "]
104369[label="expressionName\n text "]
104370[label="assignmentOperator\n = "]
104371[label="methodInvocation_lfno_primary\n addW(text,\"，\") "]
114372[label="methodName\n addW "]
114373[label="argumentList\n text,\"，\" "]
124374[label="expressionName\n text "]
124375[label="literal\n \"，\" "]
84376[label="expressionStatement\n text=addW(text,\"）\"); "]
94377[label="assignment\n text=addW(text,\"）\") "]
104378[label="expressionName\n text "]
104379[label="assignmentOperator\n = "]
104380[label="methodInvocation_lfno_primary\n addW(text,\"）\") "]
114381[label="methodName\n addW "]
114382[label="argumentList\n text,\"）\" "]
124383[label="expressionName\n text "]
124384[label="literal\n \"）\" "]
84385[label="expressionStatement\n text=addW(text,\"（\"); "]
94386[label="assignment\n text=addW(text,\"（\") "]
104387[label="expressionName\n text "]
104388[label="assignmentOperator\n = "]
104389[label="methodInvocation_lfno_primary\n addW(text,\"（\") "]
114390[label="methodName\n addW "]
114391[label="argumentList\n text,\"（\" "]
124392[label="expressionName\n text "]
124393[label="literal\n \"（\" "]
84394[label="expressionStatement\n text=addW(text,\"！\"); "]
94395[label="assignment\n text=addW(text,\"！\") "]
104396[label="expressionName\n text "]
104397[label="assignmentOperator\n = "]
104398[label="methodInvocation_lfno_primary\n addW(text,\"！\") "]
114399[label="methodName\n addW "]
114400[label="argumentList\n text,\"！\" "]
124401[label="expressionName\n text "]
124402[label="literal\n \"！\" "]
84403[label="expressionStatement\n text=addW(text,\"(\"); "]
94404[label="assignment\n text=addW(text,\"(\") "]
104405[label="expressionName\n text "]
104406[label="assignmentOperator\n = "]
104407[label="methodInvocation_lfno_primary\n addW(text,\"(\") "]
114408[label="methodName\n addW "]
114409[label="argumentList\n text,\"(\" "]
124410[label="expressionName\n text "]
124411[label="literal\n \"(\" "]
84412[label="expressionStatement\n text=addW(text,\")\"); "]
94413[label="assignment\n text=addW(text,\")\") "]
104414[label="expressionName\n text "]
104415[label="assignmentOperator\n = "]
104416[label="methodInvocation_lfno_primary\n addW(text,\")\") "]
114417[label="methodName\n addW "]
114418[label="argumentList\n text,\")\" "]
124419[label="expressionName\n text "]
124420[label="literal\n \")\" "]
84421[label="expressionStatement\n text=addW(text,\",\"); "]
94422[label="assignment\n text=addW(text,\",\") "]
104423[label="expressionName\n text "]
104424[label="assignmentOperator\n = "]
104425[label="methodInvocation_lfno_primary\n addW(text,\",\") "]
114426[label="methodName\n addW "]
114427[label="argumentList\n text,\",\" "]
124428[label="expressionName\n text "]
124429[label="literal\n \",\" "]
84430[label="expressionStatement\n text=addW(text,\"‘\"); "]
94431[label="assignment\n text=addW(text,\"‘\") "]
104432[label="expressionName\n text "]
104433[label="assignmentOperator\n = "]
104434[label="methodInvocation_lfno_primary\n addW(text,\"‘\") "]
114435[label="methodName\n addW "]
114436[label="argumentList\n text,\"‘\" "]
124437[label="expressionName\n text "]
124438[label="literal\n \"‘\" "]
84439[label="expressionStatement\n text=addW(text,\"’\"); "]
94440[label="assignment\n text=addW(text,\"’\") "]
104441[label="expressionName\n text "]
104442[label="assignmentOperator\n = "]
104443[label="methodInvocation_lfno_primary\n addW(text,\"’\") "]
114444[label="methodName\n addW "]
114445[label="argumentList\n text,\"’\" "]
124446[label="expressionName\n text "]
124447[label="literal\n \"’\" "]
84448[label="expressionStatement\n text=addW(text,\"“\"); "]
94449[label="assignment\n text=addW(text,\"“\") "]
104450[label="expressionName\n text "]
104451[label="assignmentOperator\n = "]
104452[label="methodInvocation_lfno_primary\n addW(text,\"“\") "]
114453[label="methodName\n addW "]
114454[label="argumentList\n text,\"“\" "]
124455[label="expressionName\n text "]
124456[label="literal\n \"“\" "]
84457[label="expressionStatement\n text=addW(text,\"”\"); "]
94458[label="assignment\n text=addW(text,\"”\") "]
104459[label="expressionName\n text "]
104460[label="assignmentOperator\n = "]
104461[label="methodInvocation_lfno_primary\n addW(text,\"”\") "]
114462[label="methodName\n addW "]
114463[label="argumentList\n text,\"”\" "]
124464[label="expressionName\n text "]
124465[label="literal\n \"”\" "]
84466[label="expressionStatement\n text=addW(text,\";\"); "]
94467[label="assignment\n text=addW(text,\";\") "]
104468[label="expressionName\n text "]
104469[label="assignmentOperator\n = "]
104470[label="methodInvocation_lfno_primary\n addW(text,\";\") "]
114471[label="methodName\n addW "]
114472[label="argumentList\n text,\";\" "]
124473[label="expressionName\n text "]
124474[label="literal\n \";\" "]
84475[label="expressionStatement\n text=addW(text,\"……\"); "]
94476[label="assignment\n text=addW(text,\"……\") "]
104477[label="expressionName\n text "]
104478[label="assignmentOperator\n = "]
104479[label="methodInvocation_lfno_primary\n addW(text,\"……\") "]
114480[label="methodName\n addW "]
114481[label="argumentList\n text,\"……\" "]
124482[label="expressionName\n text "]
124483[label="literal\n \"……\" "]
84484[label="expressionStatement\n text=addW(text,\"。\"); "]
94485[label="assignment\n text=addW(text,\"。\") "]
104486[label="expressionName\n text "]
104487[label="assignmentOperator\n = "]
104488[label="methodInvocation_lfno_primary\n addW(text,\"。\") "]
114489[label="methodName\n addW "]
114490[label="argumentList\n text,\"。\" "]
124491[label="expressionName\n text "]
124492[label="literal\n \"。\" "]
84493[label="expressionStatement\n text=addW(text,\"、\"); "]
94494[label="assignment\n text=addW(text,\"、\") "]
104495[label="expressionName\n text "]
104496[label="assignmentOperator\n = "]
104497[label="methodInvocation_lfno_primary\n addW(text,\"、\") "]
114498[label="methodName\n addW "]
114499[label="argumentList\n text,\"、\" "]
124500[label="expressionName\n text "]
124501[label="literal\n \"、\" "]
84502[label="expressionStatement\n text=addW(text,\"《\"); "]
94503[label="assignment\n text=addW(text,\"《\") "]
104504[label="expressionName\n text "]
104505[label="assignmentOperator\n = "]
104506[label="methodInvocation_lfno_primary\n addW(text,\"《\") "]
114507[label="methodName\n addW "]
114508[label="argumentList\n text,\"《\" "]
124509[label="expressionName\n text "]
124510[label="literal\n \"《\" "]
84511[label="expressionStatement\n text=addW(text,\"》\"); "]
94512[label="assignment\n text=addW(text,\"》\") "]
104513[label="expressionName\n text "]
104514[label="assignmentOperator\n = "]
104515[label="methodInvocation_lfno_primary\n addW(text,\"》\") "]
114516[label="methodName\n addW "]
114517[label="argumentList\n text,\"》\" "]
124518[label="expressionName\n text "]
124519[label="literal\n \"》\" "]
84520[label="ifThenStatement\n if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);} "]
94521[label="equalityExpression\n text.length()!=length "]
104522[label="methodInvocation_lfno_primary\n text.length() "]
114523[label="typeName\n text "]
104524[label="expressionName\n length "]
94525[label="block\n {BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);} "]
104526[label="blockStatements\n BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file); "]
114527[label="localVariableDeclarationStatement\n BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file))); "]
124528[label="localVariableDeclaration\n BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file))) "]
134529[label="unannClassType_lfno_unannClassOrInterfaceType\n BufferedWriter "]
134530[label="variableDeclarator\n bw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file))) "]
144531[label="variableDeclaratorId\n bw "]
144532[label="classInstanceCreationExpression_lfno_primary\n newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file))) "]
154533[label="classInstanceCreationExpression_lfno_primary\n newOutputStreamWriter(newFileOutputStream(file)) "]
164534[label="classInstanceCreationExpression_lfno_primary\n newFileOutputStream(file) "]
174535[label="expressionName\n file "]
114536[label="expressionStatement\n bw.write(text); "]
124537[label="methodInvocation\n bw.write(text) "]
134538[label="typeName\n bw "]
134539[label="expressionName\n text "]
114540[label="expressionStatement\n bw.close(); "]
124541[label="methodInvocation\n bw.close() "]
134542[label="typeName\n bw "]
114543[label="expressionStatement\n System.out.println(\"修正了\"+file); "]
124544[label="methodInvocation\n System.out.println(\"修正了\"+file) "]
134545[label="typeName\n System.out "]
144546[label="packageOrTypeName\n System "]
134547[label="additiveExpression\n \"修正了\"+file "]
144548[label="literal\n \"修正了\" "]
144549[label="expressionName\n file "]
64550[label="catchClause\n catch(Exceptione){e.printStackTrace();} "]
74551[label="catchFormalParameter\n Exceptione "]
84552[label="unannClassType\n Exception "]
84553[label="variableDeclaratorId\n e "]
74554[label="block\n {e.printStackTrace();} "]
84555[label="expressionStatement\n e.printStackTrace(); "]
94556[label="methodInvocation\n e.printStackTrace() "]
104557[label="typeName\n e "]
34558[label="methodDeclaration\n privatestaticStringaddW(Stringtext,Stringc){text=text.replaceAll(\"\\\"+c+\"/w \",c);returntext.replaceAll(\"\\\"+c,c+\"/w \");} "]
44559[label="methodModifier\n private "]
44560[label="methodModifier\n static "]
44561[label="methodHeader\n StringaddW(Stringtext,Stringc) "]
54562[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
54563[label="methodDeclarator\n addW(Stringtext,Stringc) "]
64564[label="formalParameterList\n Stringtext,Stringc "]
74565[label="formalParameter\n Stringtext "]
84566[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
84567[label="variableDeclaratorId\n text "]
74568[label="formalParameter\n Stringc "]
84569[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
84570[label="variableDeclaratorId\n c "]
44571[label="block\n {text=text.replaceAll(\"\\\"+c+\"/w \",c);returntext.replaceAll(\"\\\"+c,c+\"/w \");} "]
54572[label="blockStatements\n text=text.replaceAll(\"\\\"+c+\"/w \",c);returntext.replaceAll(\"\\\"+c,c+\"/w \"); "]
64573[label="expressionStatement\n text=text.replaceAll(\"\\\"+c+\"/w \",c); "]
74574[label="assignment\n text=text.replaceAll(\"\\\"+c+\"/w \",c) "]
84575[label="expressionName\n text "]
84576[label="assignmentOperator\n = "]
84577[label="methodInvocation_lfno_primary\n text.replaceAll(\"\\\"+c+\"/w \",c) "]
94578[label="typeName\n text "]
94579[label="argumentList\n \"\\\"+c+\"/w \",c "]
104580[label="additiveExpression\n \"\\\"+c+\"/w \" "]
114581[label="additiveExpression\n \"\\\"+c "]
124582[label="literal\n \"\\\" "]
124583[label="expressionName\n c "]
114584[label="literal\n \"/w \" "]
104585[label="expressionName\n c "]
64586[label="returnStatement\n returntext.replaceAll(\"\\\"+c,c+\"/w \"); "]
74587[label="methodInvocation_lfno_primary\n text.replaceAll(\"\\\"+c,c+\"/w \") "]
84588[label="typeName\n text "]
84589[label="argumentList\n \"\\\"+c,c+\"/w \" "]
94590[label="additiveExpression\n \"\\\"+c "]
104591[label="literal\n \"\\\" "]
104592[label="expressionName\n c "]
94593[label="additiveExpression\n c+\"/w \" "]
104594[label="expressionName\n c "]
104595[label="literal\n \"/w \" "]
34596[label="methodDeclaration\n publicvoidtestPlay()throwsException{finalTFDictionarytfDictionary=newTFDictionary();CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}});tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\");} "]
44597[label="methodModifier\n public "]
44598[label="methodHeader\n voidtestPlay()throwsException "]
54599[label="result\n void "]
54600[label="methodDeclarator\n testPlay() "]
54601[label="throws_\n throwsException "]
64602[label="classType\n Exception "]
44603[label="block\n {finalTFDictionarytfDictionary=newTFDictionary();CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}});tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\");} "]
54604[label="blockStatements\n finalTFDictionarytfDictionary=newTFDictionary();CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}});tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\"); "]
64605[label="localVariableDeclarationStatement\n finalTFDictionarytfDictionary=newTFDictionary(); "]
74606[label="localVariableDeclaration\n finalTFDictionarytfDictionary=newTFDictionary() "]
84607[label="variableModifier\n final "]
84608[label="unannClassType_lfno_unannClassOrInterfaceType\n TFDictionary "]
84609[label="variableDeclarator\n tfDictionary=newTFDictionary() "]
94610[label="variableDeclaratorId\n tfDictionary "]
94611[label="classInstanceCreationExpression_lfno_primary\n newTFDictionary() "]
64612[label="expressionStatement\n CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}}); "]
74613[label="methodInvocation\n CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}}) "]
84614[label="typeName\n CorpusLoader "]
84615[label="argumentList\n \"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}} "]
94616[label="literal\n \"D:\\JavaProjects\\CorpusToolBox\\data\\2014\" "]
94617[label="classInstanceCreationExpression_lfno_primary\n newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}} "]
104618[label="classBody\n {@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}} "]
114619[label="methodDeclaration\n @Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}} "]
124620[label="markerAnnotation\n @Override "]
134621[label="typeName\n Override "]
124622[label="methodModifier\n public "]
124623[label="methodHeader\n voidhandle(Documentdocument) "]
134624[label="result\n void "]
134625[label="methodDeclarator\n handle(Documentdocument) "]
144626[label="formalParameter\n Documentdocument "]
154627[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
154628[label="variableDeclaratorId\n document "]
124629[label="block\n {for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}} "]
134630[label="enhancedForStatement\n for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}} "]
144631[label="unannClassType_lfno_unannClassOrInterfaceType\n List<IWord> "]
154632[label="typeArguments\n <IWord> "]
164633[label="classType_lfno_classOrInterfaceType\n IWord "]
144634[label="variableDeclaratorId\n wordList "]
144635[label="methodInvocation_lfno_primary\n document.getComplexSentenceList() "]
154636[label="typeName\n document "]
144637[label="block\n {for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}} "]
154638[label="enhancedForStatement\n for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}} "]
164639[label="unannClassType_lfno_unannClassOrInterfaceType\n IWord "]
164640[label="variableDeclaratorId\n word "]
164641[label="expressionName\n wordList "]
164642[label="block\n {if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}} "]
174643[label="ifThenStatement\n if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());} "]
184644[label="conditionalAndExpression\n wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\") "]
194645[label="relationalExpression\n wordinstanceofCompoundWord "]
204646[label="expressionName\n word "]
204647[label="classType_lfno_classOrInterfaceType\n CompoundWord "]
194648[label="primary\n word.getLabel().equals(\"ns\") "]
204649[label="methodInvocation_lfno_primary\n word.getLabel() "]
214650[label="typeName\n word "]
204651[label="methodInvocation_lf_primary\n .equals(\"ns\") "]
214652[label="literal\n \"ns\" "]
184653[label="block\n {tfDictionary.add(word.toString());} "]
194654[label="expressionStatement\n tfDictionary.add(word.toString()); "]
204655[label="methodInvocation\n tfDictionary.add(word.toString()) "]
214656[label="typeName\n tfDictionary "]
214657[label="methodInvocation_lfno_primary\n word.toString() "]
224658[label="typeName\n word "]
64659[label="expressionStatement\n tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\"); "]
74660[label="methodInvocation\n tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\") "]
84661[label="typeName\n tfDictionary "]
84662[label="literal\n \"data/test/complex_ns.txt\" "]
34663[label="methodDeclaration\n publicvoidtestAdjustNGram()throwsException{IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\"));while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();}bw.close();} "]
44664[label="methodModifier\n public "]
44665[label="methodHeader\n voidtestAdjustNGram()throwsException "]
54666[label="result\n void "]
54667[label="methodDeclarator\n testAdjustNGram() "]
54668[label="throws_\n throwsException "]
64669[label="classType\n Exception "]
44670[label="block\n {IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\"));while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();}bw.close();} "]
54671[label="blockStatements\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\"));while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();}bw.close(); "]
64672[label="localVariableDeclarationStatement\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath); "]
74673[label="localVariableDeclaration\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath) "]
84674[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
94675[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
94676[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
84677[label="variableDeclarator\n iterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath) "]
94678[label="variableDeclaratorId\n iterator "]
94679[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath) "]
104680[label="expressionName\n HanLP.Config.BiGramDictionaryPath "]
114681[label="ambiguousName\n HanLP.Config "]
124682[label="ambiguousName\n HanLP "]
64683[label="localVariableDeclarationStatement\n BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\")); "]
74684[label="localVariableDeclaration\n BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\")) "]
84685[label="unannClassType_lfno_unannClassOrInterfaceType\n BufferedWriter "]
84686[label="variableDeclarator\n bw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\")) "]
94687[label="variableDeclaratorId\n bw "]
94688[label="classInstanceCreationExpression_lfno_primary\n newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\")) "]
104689[label="classInstanceCreationExpression_lfno_primary\n newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\") "]
114690[label="argumentList\n newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\" "]
124691[label="classInstanceCreationExpression_lfno_primary\n newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\") "]
134692[label="additiveExpression\n HanLP.Config.BiGramDictionaryPath+\"adjust.txt\" "]
144693[label="expressionName\n HanLP.Config.BiGramDictionaryPath "]
154694[label="ambiguousName\n HanLP.Config "]
164695[label="ambiguousName\n HanLP "]
144696[label="literal\n \"adjust.txt\" "]
124697[label="literal\n \"UTF-8\" "]
64698[label="whileStatement\n while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();} "]
74699[label="methodInvocation_lfno_primary\n iterator.hasNext() "]
84700[label="typeName\n iterator "]
74701[label="block\n {Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();} "]
84702[label="blockStatements\n Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine(); "]
94703[label="localVariableDeclarationStatement\n Stringline=iterator.next(); "]
104704[label="localVariableDeclaration\n Stringline=iterator.next() "]
114705[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
114706[label="variableDeclarator\n line=iterator.next() "]
124707[label="variableDeclaratorId\n line "]
124708[label="methodInvocation_lfno_primary\n iterator.next() "]
134709[label="typeName\n iterator "]
94710[label="localVariableDeclarationStatement\n String[]params=line.split(\" \"); "]
104711[label="localVariableDeclaration\n String[]params=line.split(\" \") "]
114712[label="unannArrayType\n String[] "]
124713[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
124714[label="dims\n [] "]
114715[label="variableDeclarator\n params=line.split(\" \") "]
124716[label="variableDeclaratorId\n params "]
124717[label="methodInvocation_lfno_primary\n line.split(\" \") "]
134718[label="typeName\n line "]
134719[label="literal\n \" \" "]
94720[label="localVariableDeclarationStatement\n Stringfirst=params[0].split(\"@\",2)[0]; "]
104721[label="localVariableDeclaration\n Stringfirst=params[0].split(\"@\",2)[0] "]
114722[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
114723[label="variableDeclarator\n first=params[0].split(\"@\",2)[0] "]
124724[label="variableDeclaratorId\n first "]
124725[label="primary\n params[0].split(\"@\",2)[0] "]
134726[label="arrayAccess_lfno_primary\n params[0] "]
144727[label="expressionName\n params "]
144728[label="literal\n 0 "]
134729[label="arrayAccess_lf_primary\n .split(\"@\",2)[0] "]
144730[label="methodInvocation_lf_primary\n .split(\"@\",2) "]
154731[label="argumentList\n \"@\",2 "]
164732[label="literal\n \"@\" "]
164733[label="literal\n 2 "]
144734[label="literal\n 0 "]
94735[label="localVariableDeclarationStatement\n Stringsecond=params[0].split(\"@\",2)[1]; "]
104736[label="localVariableDeclaration\n Stringsecond=params[0].split(\"@\",2)[1] "]
114737[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
114738[label="variableDeclarator\n second=params[0].split(\"@\",2)[1] "]
124739[label="variableDeclaratorId\n second "]
124740[label="primary\n params[0].split(\"@\",2)[1] "]
134741[label="arrayAccess_lfno_primary\n params[0] "]
144742[label="expressionName\n params "]
144743[label="literal\n 0 "]
134744[label="arrayAccess_lf_primary\n .split(\"@\",2)[1] "]
144745[label="methodInvocation_lf_primary\n .split(\"@\",2) "]
154746[label="argumentList\n \"@\",2 "]
164747[label="literal\n \"@\" "]
164748[label="literal\n 2 "]
144749[label="literal\n 1 "]
94750[label="localVariableDeclarationStatement\n intbiFrequency=Integer.parseInt(params[1]); "]
104751[label="localVariableDeclaration\n intbiFrequency=Integer.parseInt(params[1]) "]
114752[label="integralType\n int "]
114753[label="variableDeclarator\n biFrequency=Integer.parseInt(params[1]) "]
124754[label="variableDeclaratorId\n biFrequency "]
124755[label="methodInvocation_lfno_primary\n Integer.parseInt(params[1]) "]
134756[label="typeName\n Integer "]
134757[label="arrayAccess_lfno_primary\n params[1] "]
144758[label="expressionName\n params "]
144759[label="literal\n 1 "]
94760[label="localVariableDeclarationStatement\n CoreDictionary.Attributeattribute=CoreDictionary.get(first+second); "]
104761[label="localVariableDeclaration\n CoreDictionary.Attributeattribute=CoreDictionary.get(first+second) "]
114762[label="unannClassOrInterfaceType\n CoreDictionary.Attribute "]
124763[label="unannClassType_lfno_unannClassOrInterfaceType\n CoreDictionary "]
124764[label="unannClassType_lf_unannClassOrInterfaceType\n .Attribute "]
114765[label="variableDeclarator\n attribute=CoreDictionary.get(first+second) "]
124766[label="variableDeclaratorId\n attribute "]
124767[label="methodInvocation_lfno_primary\n CoreDictionary.get(first+second) "]
134768[label="typeName\n CoreDictionary "]
134769[label="additiveExpression\n first+second "]
144770[label="expressionName\n first "]
144771[label="expressionName\n second "]
94772[label="ifThenStatement\n if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;} "]
104773[label="conditionalAndExpression\n attribute!=null&&(first.length()==1||second.length()==1) "]
114774[label="equalityExpression\n attribute!=null "]
124775[label="expressionName\n attribute "]
124776[label="literal\n null "]
114777[label="primaryNoNewArray_lfno_primary\n (first.length()==1||second.length()==1) "]
124778[label="conditionalOrExpression\n first.length()==1||second.length()==1 "]
134779[label="equalityExpression\n first.length()==1 "]
144780[label="methodInvocation_lfno_primary\n first.length() "]
154781[label="typeName\n first "]
144782[label="literal\n 1 "]
134783[label="equalityExpression\n second.length()==1 "]
144784[label="methodInvocation_lfno_primary\n second.length() "]
154785[label="typeName\n second "]
144786[label="literal\n 1 "]
104787[label="block\n {System.out.println(line);continue;} "]
114788[label="blockStatements\n System.out.println(line);continue; "]
124789[label="expressionStatement\n System.out.println(line); "]
134790[label="methodInvocation\n System.out.println(line) "]
144791[label="typeName\n System.out "]
154792[label="packageOrTypeName\n System "]
144793[label="expressionName\n line "]
124794[label="continueStatement\n continue; "]
94795[label="expressionStatement\n bw.write(line); "]
104796[label="methodInvocation\n bw.write(line) "]
114797[label="typeName\n bw "]
114798[label="expressionName\n line "]
94799[label="expressionStatement\n bw.newLine(); "]
104800[label="methodInvocation\n bw.newLine() "]
114801[label="typeName\n bw "]
64802[label="expressionStatement\n bw.close(); "]
74803[label="methodInvocation\n bw.close() "]
84804[label="typeName\n bw "]
34805[label="methodDeclaration\n publicvoidtestRemoveLabelD()throwsException{Set<String>nameFollowers=newTreeSet<String>();IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}}DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath);for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}}dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath);} "]
44806[label="methodModifier\n public "]
44807[label="methodHeader\n voidtestRemoveLabelD()throwsException "]
54808[label="result\n void "]
54809[label="methodDeclarator\n testRemoveLabelD() "]
54810[label="throws_\n throwsException "]
64811[label="classType\n Exception "]
44812[label="block\n {Set<String>nameFollowers=newTreeSet<String>();IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}}DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath);for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}}dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath);} "]
54813[label="blockStatements\n Set<String>nameFollowers=newTreeSet<String>();IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}}DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath);for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}}dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath); "]
64814[label="localVariableDeclarationStatement\n Set<String>nameFollowers=newTreeSet<String>(); "]
74815[label="localVariableDeclaration\n Set<String>nameFollowers=newTreeSet<String>() "]
84816[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
94817[label="typeArguments\n <String> "]
104818[label="classType_lfno_classOrInterfaceType\n String "]
84819[label="variableDeclarator\n nameFollowers=newTreeSet<String>() "]
94820[label="variableDeclaratorId\n nameFollowers "]
94821[label="classInstanceCreationExpression_lfno_primary\n newTreeSet<String>() "]
104822[label="typeArguments\n <String> "]
114823[label="classType_lfno_classOrInterfaceType\n String "]
64824[label="localVariableDeclarationStatement\n IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath); "]
74825[label="localVariableDeclaration\n IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath) "]
84826[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
94827[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
94828[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
84829[label="variableDeclarator\n lineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath) "]
94830[label="variableDeclaratorId\n lineIterator "]
94831[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath) "]
104832[label="expressionName\n HanLP.Config.BiGramDictionaryPath "]
114833[label="ambiguousName\n HanLP.Config "]
124834[label="ambiguousName\n HanLP "]
64835[label="whileStatement\n while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}} "]
74836[label="methodInvocation_lfno_primary\n lineIterator.hasNext() "]
84837[label="typeName\n lineIterator "]
74838[label="block\n {Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}} "]
84839[label="blockStatements\n Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);} "]
94840[label="localVariableDeclarationStatement\n Stringline=lineIterator.next(); "]
104841[label="localVariableDeclaration\n Stringline=lineIterator.next() "]
114842[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
114843[label="variableDeclarator\n line=lineIterator.next() "]
124844[label="variableDeclaratorId\n line "]
124845[label="methodInvocation_lfno_primary\n lineIterator.next() "]
134846[label="typeName\n lineIterator "]
94847[label="localVariableDeclarationStatement\n String[]words=line.split(\"\\s\")[0].split(\"@\"); "]
104848[label="localVariableDeclaration\n String[]words=line.split(\"\\s\")[0].split(\"@\") "]
114849[label="unannArrayType\n String[] "]
124850[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
124851[label="dims\n [] "]
114852[label="variableDeclarator\n words=line.split(\"\\s\")[0].split(\"@\") "]
124853[label="variableDeclaratorId\n words "]
124854[label="primary\n line.split(\"\\s\")[0].split(\"@\") "]
134855[label="arrayAccess_lfno_primary\n line.split(\"\\s\")[0] "]
144856[label="methodInvocation_lfno_primary\n line.split(\"\\s\") "]
154857[label="typeName\n line "]
154858[label="literal\n \"\\s\" "]
144859[label="literal\n 0 "]
134860[label="methodInvocation_lf_primary\n .split(\"@\") "]
144861[label="literal\n \"@\" "]
94862[label="ifThenStatement\n if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);} "]
104863[label="primary\n words[0].equals(Predefine.TAG_PEOPLE) "]
114864[label="arrayAccess_lfno_primary\n words[0] "]
124865[label="expressionName\n words "]
124866[label="literal\n 0 "]
114867[label="methodInvocation_lf_primary\n .equals(Predefine.TAG_PEOPLE) "]
124868[label="expressionName\n Predefine.TAG_PEOPLE "]
134869[label="ambiguousName\n Predefine "]
104870[label="block\n {nameFollowers.add(words[1]);} "]
114871[label="expressionStatement\n nameFollowers.add(words[1]); "]
124872[label="methodInvocation\n nameFollowers.add(words[1]) "]
134873[label="typeName\n nameFollowers "]
134874[label="arrayAccess_lfno_primary\n words[1] "]
144875[label="expressionName\n words "]
144876[label="literal\n 1 "]
64877[label="localVariableDeclarationStatement\n DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath); "]
74878[label="localVariableDeclaration\n DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath) "]
84879[label="unannClassType_lfno_unannClassOrInterfaceType\n DictionaryMaker "]
84880[label="variableDeclarator\n dictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath) "]
94881[label="variableDeclaratorId\n dictionary "]
94882[label="methodInvocation_lfno_primary\n DictionaryMaker.load(HanLP.Config.PersonDictionaryPath) "]
104883[label="typeName\n DictionaryMaker "]
104884[label="expressionName\n HanLP.Config.PersonDictionaryPath "]
114885[label="ambiguousName\n HanLP.Config "]
124886[label="ambiguousName\n HanLP "]
64887[label="enhancedForStatement\n for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}} "]
74888[label="unannClassOrInterfaceType\n Map.Entry<String,Item> "]
84889[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
84890[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,Item> "]
94891[label="typeArguments\n <String,Item> "]
104892[label="typeArgumentList\n String,Item "]
114893[label="classType_lfno_classOrInterfaceType\n String "]
114894[label="classType_lfno_classOrInterfaceType\n Item "]
74895[label="variableDeclaratorId\n entry "]
74896[label="methodInvocation_lfno_primary\n dictionary.entrySet() "]
84897[label="typeName\n dictionary "]
74898[label="block\n {Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}} "]
84899[label="blockStatements\n Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}} "]
94900[label="localVariableDeclarationStatement\n Stringkey=entry.getKey(); "]
104901[label="localVariableDeclaration\n Stringkey=entry.getKey() "]
114902[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
114903[label="variableDeclarator\n key=entry.getKey() "]
124904[label="variableDeclaratorId\n key "]
124905[label="methodInvocation_lfno_primary\n entry.getKey() "]
134906[label="typeName\n entry "]
94907[label="localVariableDeclarationStatement\n intdF=entry.getValue().getFrequency(\"D\"); "]
104908[label="localVariableDeclaration\n intdF=entry.getValue().getFrequency(\"D\") "]
114909[label="integralType\n int "]
114910[label="variableDeclarator\n dF=entry.getValue().getFrequency(\"D\") "]
124911[label="variableDeclaratorId\n dF "]
124912[label="primary\n entry.getValue().getFrequency(\"D\") "]
134913[label="methodInvocation_lfno_primary\n entry.getValue() "]
144914[label="typeName\n entry "]
134915[label="methodInvocation_lf_primary\n .getFrequency(\"D\") "]
144916[label="literal\n \"D\" "]
94917[label="ifThenStatement\n if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}} "]
104918[label="conditionalAndExpression\n key.length()==1&&0<dF&&dF<100 "]
114919[label="conditionalAndExpression\n key.length()==1&&0<dF "]
124920[label="equalityExpression\n key.length()==1 "]
134921[label="methodInvocation_lfno_primary\n key.length() "]
144922[label="typeName\n key "]
134923[label="literal\n 1 "]
124924[label="relationalExpression\n 0<dF "]
134925[label="literal\n 0 "]
134926[label="expressionName\n dF "]
114927[label="relationalExpression\n dF<100 "]
124928[label="expressionName\n dF "]
124929[label="literal\n 100 "]
104930[label="block\n {CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}} "]
114931[label="blockStatements\n CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");} "]
124932[label="localVariableDeclarationStatement\n CoreDictionary.Attributeattribute=CoreDictionary.get(key); "]
134933[label="localVariableDeclaration\n CoreDictionary.Attributeattribute=CoreDictionary.get(key) "]
144934[label="unannClassOrInterfaceType\n CoreDictionary.Attribute "]
154935[label="unannClassType_lfno_unannClassOrInterfaceType\n CoreDictionary "]
154936[label="unannClassType_lf_unannClassOrInterfaceType\n .Attribute "]
144937[label="variableDeclarator\n attribute=CoreDictionary.get(key) "]
154938[label="variableDeclaratorId\n attribute "]
154939[label="methodInvocation_lfno_primary\n CoreDictionary.get(key) "]
164940[label="typeName\n CoreDictionary "]
164941[label="expressionName\n key "]
124942[label="ifThenStatement\n if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");} "]
134943[label="conditionalOrExpression\n nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000) "]
144944[label="methodInvocation_lfno_primary\n nameFollowers.contains(key) "]
154945[label="typeName\n nameFollowers "]
154946[label="expressionName\n key "]
144947[label="primaryNoNewArray_lfno_primary\n (attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000) "]
154948[label="conditionalAndExpression\n attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000 "]
164949[label="conditionalAndExpression\n attribute!=null&&attribute.hasNatureStartsWith(\"v\") "]
174950[label="equalityExpression\n attribute!=null "]
184951[label="expressionName\n attribute "]
184952[label="literal\n null "]
174953[label="methodInvocation_lfno_primary\n attribute.hasNatureStartsWith(\"v\") "]
184954[label="typeName\n attribute "]
184955[label="literal\n \"v\" "]
164956[label="relationalExpression\n attribute.totalFrequency>1000 "]
174957[label="expressionName\n attribute.totalFrequency "]
184958[label="ambiguousName\n attribute "]
174959[label="literal\n 1000 "]
134960[label="block\n {System.out.println(key);entry.getValue().removeLabel(\"D\");} "]
144961[label="blockStatements\n System.out.println(key);entry.getValue().removeLabel(\"D\"); "]
154962[label="expressionStatement\n System.out.println(key); "]
164963[label="methodInvocation\n System.out.println(key) "]
174964[label="typeName\n System.out "]
184965[label="packageOrTypeName\n System "]
174966[label="expressionName\n key "]
154967[label="expressionStatement\n entry.getValue().removeLabel(\"D\"); "]
164968[label="methodInvocation\n entry.getValue().removeLabel(\"D\") "]
174969[label="methodInvocation_lfno_primary\n entry.getValue() "]
184970[label="typeName\n entry "]
174971[label="literal\n \"D\" "]
64972[label="expressionStatement\n dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath); "]
74973[label="methodInvocation\n dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath) "]
84974[label="typeName\n dictionary "]
84975[label="expressionName\n HanLP.Config.PersonDictionaryPath "]
94976[label="ambiguousName\n HanLP.Config "]
104977[label="ambiguousName\n HanLP "]
04978[label="compilationUnit\n packagecom.hankcs.hanlp.collection.AhoCorasick;importcom.hankcs.hanlp.corpus.io.ByteArray;importjava.io.DataOutputStream;importjava.io.IOException;importjava.io.ObjectInputStream;importjava.io.ObjectOutputStream;importjava.util.*;importjava.util.concurrent.LinkedBlockingDeque;publicclassAhoCorasickDoubleArrayTrie<V>{protectedintcheck[];protectedintbase[];intfail[];int[][]output;protectedV[]v;protectedint[]l;protectedintsize;publicAhoCorasickDoubleArrayTrie(){}publicAhoCorasickDoubleArrayTrie(TreeMap<String,V>dictionary){build(dictionary);}publicList<Hit<V>>parseText(Stringtext){intposition=1;intcurrentState=0;List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>();for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;}returncollectedEmits;}publicvoidparseText(Stringtext,IHit<V>processor){intposition=1;intcurrentState=0;for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}}publicvoidparseText(char[]text,IHit<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}}publicvoidparseText(char[]text,IHitFull<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;}}publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(size);for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}}out.writeInt(l.length);for(intlength:l){out.writeInt(length);}}publicvoidsave(ObjectOutputStreamout)throwsIOException{out.writeObject(base);out.writeObject(check);out.writeObject(fail);out.writeObject(output);out.writeObject(l);}publicvoidload(ObjectInputStreamin,V[]value)throwsIOException,ClassNotFoundException{base=(int[])in.readObject();check=(int[])in.readObject();fail=(int[])in.readObject();output=(int[][])in.readObject();l=(int[])in.readObject();v=value;}publicbooleanload(ByteArraybyteArray,V[]value){if(byteArray==null)returnfalse;size=byteArray.nextInt();base=newint[size+65535];check=newint[size+65535];fail=newint[size+65535];output=newint[size+65535][];intlength;for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}}length=byteArray.nextInt();l=newint[length];for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();}v=value;returntrue;}publicVget(Stringkey){intindex=exactMatchSearch(key);if(index>=0){returnv[index];}returnnull;}publicbooleanset(Stringkey,Vvalue){intindex=exactMatchSearch(key);if(index>=0){v[index]=value;returntrue;}returnfalse;}publicVget(intindex){returnv[index];}publicinterfaceIHit<V>{voidhit(intbegin,intend,Vvalue);}publicinterfaceIHitFull<V>{voidhit(intbegin,intend,Vvalue,intindex);}publicclassHit<V>{publicfinalintbegin;publicfinalintend;publicfinalVvalue;publicHit(intbegin,intend,Vvalue){this.begin=begin;this.end=end;this.value=value;}@OverridepublicStringtoString(){returnString.format(\"[%d:%d]=%s\",begin,end,value);}}privateintgetState(intcurrentState,charcharacter){intnewCurrentState=transitionWithRoot(currentState,character);while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);}returnnewCurrentState;}privatevoidstoreEmits(intposition,intcurrentState,List<Hit<V>>collectedEmits){int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}}}protectedinttransition(intcurrent,charc){intb=current;intp;p=b+c+1;if(b==check[p])b=base[p];elsereturn-1;p=b;returnp;}protectedinttransitionWithRoot(intnodePos,charc){intb=base[nodePos];intp;p=b+c+1;if(b!=check[p]){if(nodePos==0)return0;return-1;}returnp;}publicvoidbuild(TreeMap<String,V>map){newBuilder().build(map);}privateintfetch(Stateparent,List<Map.Entry<Integer,State>>siblings){if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));}for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));}returnsiblings.size();}publicintexactMatchSearch(Stringkey){returnexactMatchSearch(key,0,0,0);}privateintexactMatchSearch(Stringkey,intpos,intlen,intnodePos){if(len<=0)len=key.length();if(nodePos<=0)nodePos=0;intresult=-1;char[]keyChars=key.toCharArray();intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;}privateintexactMatchSearch(char[]keyChars,intpos,intlen,intnodePos){intresult=-1;intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;}privatestaticclassDebugArray{Map<String,String>nameValueMap=newLinkedHashMap<String,String>();publicvoidadd(Stringname,intvalue){StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);}@OverridepublicStringtoString(){Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;}publicvoidprintln(){System.out.print(this);}}publicintsize(){returnv==null?0:v.length;}privateclassBuilder{privateStaterootState=newState();privatebooleanused[];privateintallocSize;privateintprogress;privateintnextCheckPos;privateintkeySize;@SuppressWarnings(\"unchecked\")publicvoidbuild(TreeMap<String,V>map){v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();}privatevoidaddKeyword(Stringkeyword,intindex){StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();}privatevoidaddAllKeyword(Collection<String>keywordSet){inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}}privatevoidconstructFailureStates(){fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}}privatevoidconstructOutput(StatetargetState){Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;}privatevoidbuildDoubleArrayTrie(Set<String>keySet){progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);}privateintresize(intnewSize){int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;}privateintinsert(List<Map.Entry<Integer,State>>siblings){intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;}privatevoidloseWeight(){intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;}}}<EOF> "]
14979[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.AhoCorasick; "]
24980[label="packageName\n com.hankcs.hanlp.collection.AhoCorasick "]
34981[label="packageName\n com.hankcs.hanlp.collection "]
44982[label="packageName\n com.hankcs.hanlp "]
54983[label="packageName\n com.hankcs "]
64984[label="packageName\n com "]
14985[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.ByteArray; "]
24986[label="typeName\n com.hankcs.hanlp.corpus.io.ByteArray "]
34987[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
44988[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54989[label="packageOrTypeName\n com.hankcs.hanlp "]
64990[label="packageOrTypeName\n com.hankcs "]
74991[label="packageOrTypeName\n com "]
14992[label="singleTypeImportDeclaration\n importjava.io.DataOutputStream; "]
24993[label="typeName\n java.io.DataOutputStream "]
34994[label="packageOrTypeName\n java.io "]
44995[label="packageOrTypeName\n java "]
14996[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
24997[label="typeName\n java.io.IOException "]
34998[label="packageOrTypeName\n java.io "]
44999[label="packageOrTypeName\n java "]
15000[label="singleTypeImportDeclaration\n importjava.io.ObjectInputStream; "]
25001[label="typeName\n java.io.ObjectInputStream "]
35002[label="packageOrTypeName\n java.io "]
45003[label="packageOrTypeName\n java "]
15004[label="singleTypeImportDeclaration\n importjava.io.ObjectOutputStream; "]
25005[label="typeName\n java.io.ObjectOutputStream "]
35006[label="packageOrTypeName\n java.io "]
45007[label="packageOrTypeName\n java "]
15008[label="typeImportOnDemandDeclaration\n importjava.util.*; "]
25009[label="packageOrTypeName\n java.util "]
35010[label="packageOrTypeName\n java "]
15011[label="singleTypeImportDeclaration\n importjava.util.concurrent.LinkedBlockingDeque; "]
25012[label="typeName\n java.util.concurrent.LinkedBlockingDeque "]
35013[label="packageOrTypeName\n java.util.concurrent "]
45014[label="packageOrTypeName\n java.util "]
55015[label="packageOrTypeName\n java "]
15016[label="normalClassDeclaration\n publicclassAhoCorasickDoubleArrayTrie<V>{protectedintcheck[];protectedintbase[];intfail[];int[][]output;protectedV[]v;protectedint[]l;protectedintsize;publicAhoCorasickDoubleArrayTrie(){}publicAhoCorasickDoubleArrayTrie(TreeMap<String,V>dictionary){build(dictionary);}publicList<Hit<V>>parseText(Stringtext){intposition=1;intcurrentState=0;List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>();for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;}returncollectedEmits;}publicvoidparseText(Stringtext,IHit<V>processor){intposition=1;intcurrentState=0;for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}}publicvoidparseText(char[]text,IHit<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}}publicvoidparseText(char[]text,IHitFull<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;}}publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(size);for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}}out.writeInt(l.length);for(intlength:l){out.writeInt(length);}}publicvoidsave(ObjectOutputStreamout)throwsIOException{out.writeObject(base);out.writeObject(check);out.writeObject(fail);out.writeObject(output);out.writeObject(l);}publicvoidload(ObjectInputStreamin,V[]value)throwsIOException,ClassNotFoundException{base=(int[])in.readObject();check=(int[])in.readObject();fail=(int[])in.readObject();output=(int[][])in.readObject();l=(int[])in.readObject();v=value;}publicbooleanload(ByteArraybyteArray,V[]value){if(byteArray==null)returnfalse;size=byteArray.nextInt();base=newint[size+65535];check=newint[size+65535];fail=newint[size+65535];output=newint[size+65535][];intlength;for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}}length=byteArray.nextInt();l=newint[length];for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();}v=value;returntrue;}publicVget(Stringkey){intindex=exactMatchSearch(key);if(index>=0){returnv[index];}returnnull;}publicbooleanset(Stringkey,Vvalue){intindex=exactMatchSearch(key);if(index>=0){v[index]=value;returntrue;}returnfalse;}publicVget(intindex){returnv[index];}publicinterfaceIHit<V>{voidhit(intbegin,intend,Vvalue);}publicinterfaceIHitFull<V>{voidhit(intbegin,intend,Vvalue,intindex);}publicclassHit<V>{publicfinalintbegin;publicfinalintend;publicfinalVvalue;publicHit(intbegin,intend,Vvalue){this.begin=begin;this.end=end;this.value=value;}@OverridepublicStringtoString(){returnString.format(\"[%d:%d]=%s\",begin,end,value);}}privateintgetState(intcurrentState,charcharacter){intnewCurrentState=transitionWithRoot(currentState,character);while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);}returnnewCurrentState;}privatevoidstoreEmits(intposition,intcurrentState,List<Hit<V>>collectedEmits){int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}}}protectedinttransition(intcurrent,charc){intb=current;intp;p=b+c+1;if(b==check[p])b=base[p];elsereturn-1;p=b;returnp;}protectedinttransitionWithRoot(intnodePos,charc){intb=base[nodePos];intp;p=b+c+1;if(b!=check[p]){if(nodePos==0)return0;return-1;}returnp;}publicvoidbuild(TreeMap<String,V>map){newBuilder().build(map);}privateintfetch(Stateparent,List<Map.Entry<Integer,State>>siblings){if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));}for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));}returnsiblings.size();}publicintexactMatchSearch(Stringkey){returnexactMatchSearch(key,0,0,0);}privateintexactMatchSearch(Stringkey,intpos,intlen,intnodePos){if(len<=0)len=key.length();if(nodePos<=0)nodePos=0;intresult=-1;char[]keyChars=key.toCharArray();intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;}privateintexactMatchSearch(char[]keyChars,intpos,intlen,intnodePos){intresult=-1;intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;}privatestaticclassDebugArray{Map<String,String>nameValueMap=newLinkedHashMap<String,String>();publicvoidadd(Stringname,intvalue){StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);}@OverridepublicStringtoString(){Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;}publicvoidprintln(){System.out.print(this);}}publicintsize(){returnv==null?0:v.length;}privateclassBuilder{privateStaterootState=newState();privatebooleanused[];privateintallocSize;privateintprogress;privateintnextCheckPos;privateintkeySize;@SuppressWarnings(\"unchecked\")publicvoidbuild(TreeMap<String,V>map){v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();}privatevoidaddKeyword(Stringkeyword,intindex){StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();}privatevoidaddAllKeyword(Collection<String>keywordSet){inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}}privatevoidconstructFailureStates(){fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}}privatevoidconstructOutput(StatetargetState){Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;}privatevoidbuildDoubleArrayTrie(Set<String>keySet){progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);}privateintresize(intnewSize){int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;}privateintinsert(List<Map.Entry<Integer,State>>siblings){intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;}privatevoidloseWeight(){intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;}}} "]
25017[label="classModifier\n public "]
25018[label="typeParameters\n <V> "]
35019[label="typeParameter\n V "]
25020[label="classBody\n {protectedintcheck[];protectedintbase[];intfail[];int[][]output;protectedV[]v;protectedint[]l;protectedintsize;publicAhoCorasickDoubleArrayTrie(){}publicAhoCorasickDoubleArrayTrie(TreeMap<String,V>dictionary){build(dictionary);}publicList<Hit<V>>parseText(Stringtext){intposition=1;intcurrentState=0;List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>();for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;}returncollectedEmits;}publicvoidparseText(Stringtext,IHit<V>processor){intposition=1;intcurrentState=0;for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}}publicvoidparseText(char[]text,IHit<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}}publicvoidparseText(char[]text,IHitFull<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;}}publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(size);for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}}out.writeInt(l.length);for(intlength:l){out.writeInt(length);}}publicvoidsave(ObjectOutputStreamout)throwsIOException{out.writeObject(base);out.writeObject(check);out.writeObject(fail);out.writeObject(output);out.writeObject(l);}publicvoidload(ObjectInputStreamin,V[]value)throwsIOException,ClassNotFoundException{base=(int[])in.readObject();check=(int[])in.readObject();fail=(int[])in.readObject();output=(int[][])in.readObject();l=(int[])in.readObject();v=value;}publicbooleanload(ByteArraybyteArray,V[]value){if(byteArray==null)returnfalse;size=byteArray.nextInt();base=newint[size+65535];check=newint[size+65535];fail=newint[size+65535];output=newint[size+65535][];intlength;for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}}length=byteArray.nextInt();l=newint[length];for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();}v=value;returntrue;}publicVget(Stringkey){intindex=exactMatchSearch(key);if(index>=0){returnv[index];}returnnull;}publicbooleanset(Stringkey,Vvalue){intindex=exactMatchSearch(key);if(index>=0){v[index]=value;returntrue;}returnfalse;}publicVget(intindex){returnv[index];}publicinterfaceIHit<V>{voidhit(intbegin,intend,Vvalue);}publicinterfaceIHitFull<V>{voidhit(intbegin,intend,Vvalue,intindex);}publicclassHit<V>{publicfinalintbegin;publicfinalintend;publicfinalVvalue;publicHit(intbegin,intend,Vvalue){this.begin=begin;this.end=end;this.value=value;}@OverridepublicStringtoString(){returnString.format(\"[%d:%d]=%s\",begin,end,value);}}privateintgetState(intcurrentState,charcharacter){intnewCurrentState=transitionWithRoot(currentState,character);while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);}returnnewCurrentState;}privatevoidstoreEmits(intposition,intcurrentState,List<Hit<V>>collectedEmits){int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}}}protectedinttransition(intcurrent,charc){intb=current;intp;p=b+c+1;if(b==check[p])b=base[p];elsereturn-1;p=b;returnp;}protectedinttransitionWithRoot(intnodePos,charc){intb=base[nodePos];intp;p=b+c+1;if(b!=check[p]){if(nodePos==0)return0;return-1;}returnp;}publicvoidbuild(TreeMap<String,V>map){newBuilder().build(map);}privateintfetch(Stateparent,List<Map.Entry<Integer,State>>siblings){if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));}for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));}returnsiblings.size();}publicintexactMatchSearch(Stringkey){returnexactMatchSearch(key,0,0,0);}privateintexactMatchSearch(Stringkey,intpos,intlen,intnodePos){if(len<=0)len=key.length();if(nodePos<=0)nodePos=0;intresult=-1;char[]keyChars=key.toCharArray();intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;}privateintexactMatchSearch(char[]keyChars,intpos,intlen,intnodePos){intresult=-1;intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;}privatestaticclassDebugArray{Map<String,String>nameValueMap=newLinkedHashMap<String,String>();publicvoidadd(Stringname,intvalue){StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);}@OverridepublicStringtoString(){Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;}publicvoidprintln(){System.out.print(this);}}publicintsize(){returnv==null?0:v.length;}privateclassBuilder{privateStaterootState=newState();privatebooleanused[];privateintallocSize;privateintprogress;privateintnextCheckPos;privateintkeySize;@SuppressWarnings(\"unchecked\")publicvoidbuild(TreeMap<String,V>map){v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();}privatevoidaddKeyword(Stringkeyword,intindex){StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();}privatevoidaddAllKeyword(Collection<String>keywordSet){inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}}privatevoidconstructFailureStates(){fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}}privatevoidconstructOutput(StatetargetState){Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;}privatevoidbuildDoubleArrayTrie(Set<String>keySet){progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);}privateintresize(intnewSize){int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;}privateintinsert(List<Map.Entry<Integer,State>>siblings){intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;}privatevoidloseWeight(){intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;}}} "]
35021[label="fieldDeclaration\n protectedintcheck[]; "]
45022[label="fieldModifier\n protected "]
45023[label="integralType\n int "]
45024[label="variableDeclaratorId\n check[] "]
55025[label="dims\n [] "]
35026[label="fieldDeclaration\n protectedintbase[]; "]
45027[label="fieldModifier\n protected "]
45028[label="integralType\n int "]
45029[label="variableDeclaratorId\n base[] "]
55030[label="dims\n [] "]
35031[label="fieldDeclaration\n intfail[]; "]
45032[label="integralType\n int "]
45033[label="variableDeclaratorId\n fail[] "]
55034[label="dims\n [] "]
35035[label="fieldDeclaration\n int[][]output; "]
45036[label="unannArrayType\n int[][] "]
55037[label="integralType\n int "]
55038[label="dims\n [][] "]
45039[label="variableDeclaratorId\n output "]
35040[label="fieldDeclaration\n protectedV[]v; "]
45041[label="fieldModifier\n protected "]
45042[label="unannArrayType\n V[] "]
55043[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
55044[label="dims\n [] "]
45045[label="variableDeclaratorId\n v "]
35046[label="fieldDeclaration\n protectedint[]l; "]
45047[label="fieldModifier\n protected "]
45048[label="unannArrayType\n int[] "]
55049[label="integralType\n int "]
55050[label="dims\n [] "]
45051[label="variableDeclaratorId\n l "]
35052[label="fieldDeclaration\n protectedintsize; "]
45053[label="fieldModifier\n protected "]
45054[label="integralType\n int "]
45055[label="variableDeclaratorId\n size "]
35056[label="constructorDeclaration\n publicAhoCorasickDoubleArrayTrie(){} "]
45057[label="constructorModifier\n public "]
45058[label="constructorDeclarator\n AhoCorasickDoubleArrayTrie() "]
55059[label="simpleTypeName\n AhoCorasickDoubleArrayTrie "]
45060[label="constructorBody\n {} "]
35061[label="constructorDeclaration\n publicAhoCorasickDoubleArrayTrie(TreeMap<String,V>dictionary){build(dictionary);} "]
45062[label="constructorModifier\n public "]
45063[label="constructorDeclarator\n AhoCorasickDoubleArrayTrie(TreeMap<String,V>dictionary) "]
55064[label="simpleTypeName\n AhoCorasickDoubleArrayTrie "]
55065[label="formalParameter\n TreeMap<String,V>dictionary "]
65066[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,V> "]
75067[label="typeArguments\n <String,V> "]
85068[label="typeArgumentList\n String,V "]
95069[label="classType_lfno_classOrInterfaceType\n String "]
95070[label="classType_lfno_classOrInterfaceType\n V "]
65071[label="variableDeclaratorId\n dictionary "]
45072[label="constructorBody\n {build(dictionary);} "]
55073[label="expressionStatement\n build(dictionary); "]
65074[label="methodInvocation\n build(dictionary) "]
75075[label="methodName\n build "]
75076[label="expressionName\n dictionary "]
35077[label="methodDeclaration\n publicList<Hit<V>>parseText(Stringtext){intposition=1;intcurrentState=0;List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>();for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;}returncollectedEmits;} "]
45078[label="methodModifier\n public "]
45079[label="methodHeader\n List<Hit<V>>parseText(Stringtext) "]
55080[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Hit<V>> "]
65081[label="typeArguments\n <Hit<V>> "]
75082[label="classType_lfno_classOrInterfaceType\n Hit<V> "]
85083[label="typeArguments\n <V> "]
95084[label="classType_lfno_classOrInterfaceType\n V "]
55085[label="methodDeclarator\n parseText(Stringtext) "]
65086[label="formalParameter\n Stringtext "]
75087[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
75088[label="variableDeclaratorId\n text "]
45089[label="block\n {intposition=1;intcurrentState=0;List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>();for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;}returncollectedEmits;} "]
55090[label="blockStatements\n intposition=1;intcurrentState=0;List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>();for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;}returncollectedEmits; "]
65091[label="localVariableDeclarationStatement\n intposition=1; "]
75092[label="localVariableDeclaration\n intposition=1 "]
85093[label="integralType\n int "]
85094[label="variableDeclarator\n position=1 "]
95095[label="variableDeclaratorId\n position "]
95096[label="literal\n 1 "]
65097[label="localVariableDeclarationStatement\n intcurrentState=0; "]
75098[label="localVariableDeclaration\n intcurrentState=0 "]
85099[label="integralType\n int "]
85100[label="variableDeclarator\n currentState=0 "]
95101[label="variableDeclaratorId\n currentState "]
95102[label="literal\n 0 "]
65103[label="localVariableDeclarationStatement\n List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>(); "]
75104[label="localVariableDeclaration\n List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>() "]
85105[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Hit<V>> "]
95106[label="typeArguments\n <Hit<V>> "]
105107[label="classType_lfno_classOrInterfaceType\n Hit<V> "]
115108[label="typeArguments\n <V> "]
125109[label="classType_lfno_classOrInterfaceType\n V "]
85110[label="variableDeclarator\n collectedEmits=newLinkedList<Hit<V>>() "]
95111[label="variableDeclaratorId\n collectedEmits "]
95112[label="classInstanceCreationExpression_lfno_primary\n newLinkedList<Hit<V>>() "]
105113[label="typeArguments\n <Hit<V>> "]
115114[label="classType_lfno_classOrInterfaceType\n Hit<V> "]
125115[label="typeArguments\n <V> "]
135116[label="classType_lfno_classOrInterfaceType\n V "]
65117[label="basicForStatement\n for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;} "]
75118[label="localVariableDeclaration\n inti=0 "]
85119[label="integralType\n int "]
85120[label="variableDeclarator\n i=0 "]
95121[label="variableDeclaratorId\n i "]
95122[label="literal\n 0 "]
75123[label="relationalExpression\n i<text.length() "]
85124[label="expressionName\n i "]
85125[label="methodInvocation_lfno_primary\n text.length() "]
95126[label="typeName\n text "]
75127[label="preIncrementExpression\n ++i "]
85128[label="expressionName\n i "]
75129[label="block\n {currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;} "]
85130[label="blockStatements\n currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position; "]
95131[label="expressionStatement\n currentState=getState(currentState,text.charAt(i)); "]
105132[label="assignment\n currentState=getState(currentState,text.charAt(i)) "]
115133[label="expressionName\n currentState "]
115134[label="assignmentOperator\n = "]
115135[label="methodInvocation_lfno_primary\n getState(currentState,text.charAt(i)) "]
125136[label="methodName\n getState "]
125137[label="argumentList\n currentState,text.charAt(i) "]
135138[label="expressionName\n currentState "]
135139[label="methodInvocation_lfno_primary\n text.charAt(i) "]
145140[label="typeName\n text "]
145141[label="expressionName\n i "]
95142[label="expressionStatement\n storeEmits(position,currentState,collectedEmits); "]
105143[label="methodInvocation\n storeEmits(position,currentState,collectedEmits) "]
115144[label="methodName\n storeEmits "]
115145[label="argumentList\n position,currentState,collectedEmits "]
125146[label="expressionName\n position "]
125147[label="expressionName\n currentState "]
125148[label="expressionName\n collectedEmits "]
95149[label="expressionStatement\n ++position; "]
105150[label="preIncrementExpression\n ++position "]
115151[label="expressionName\n position "]
65152[label="returnStatement\n returncollectedEmits; "]
75153[label="expressionName\n collectedEmits "]
35154[label="methodDeclaration\n publicvoidparseText(Stringtext,IHit<V>processor){intposition=1;intcurrentState=0;for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}} "]
45155[label="methodModifier\n public "]
45156[label="methodHeader\n voidparseText(Stringtext,IHit<V>processor) "]
55157[label="result\n void "]
55158[label="methodDeclarator\n parseText(Stringtext,IHit<V>processor) "]
65159[label="formalParameterList\n Stringtext,IHit<V>processor "]
75160[label="formalParameter\n Stringtext "]
85161[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
85162[label="variableDeclaratorId\n text "]
75163[label="formalParameter\n IHit<V>processor "]
85164[label="unannClassType_lfno_unannClassOrInterfaceType\n IHit<V> "]
95165[label="typeArguments\n <V> "]
105166[label="classType_lfno_classOrInterfaceType\n V "]
85167[label="variableDeclaratorId\n processor "]
45168[label="block\n {intposition=1;intcurrentState=0;for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}} "]
55169[label="blockStatements\n intposition=1;intcurrentState=0;for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;} "]
65170[label="localVariableDeclarationStatement\n intposition=1; "]
75171[label="localVariableDeclaration\n intposition=1 "]
85172[label="integralType\n int "]
85173[label="variableDeclarator\n position=1 "]
95174[label="variableDeclaratorId\n position "]
95175[label="literal\n 1 "]
65176[label="localVariableDeclarationStatement\n intcurrentState=0; "]
75177[label="localVariableDeclaration\n intcurrentState=0 "]
85178[label="integralType\n int "]
85179[label="variableDeclarator\n currentState=0 "]
95180[label="variableDeclaratorId\n currentState "]
95181[label="literal\n 0 "]
65182[label="basicForStatement\n for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;} "]
75183[label="localVariableDeclaration\n inti=0 "]
85184[label="integralType\n int "]
85185[label="variableDeclarator\n i=0 "]
95186[label="variableDeclaratorId\n i "]
95187[label="literal\n 0 "]
75188[label="relationalExpression\n i<text.length() "]
85189[label="expressionName\n i "]
85190[label="methodInvocation_lfno_primary\n text.length() "]
95191[label="typeName\n text "]
75192[label="preIncrementExpression\n ++i "]
85193[label="expressionName\n i "]
75194[label="block\n {currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;} "]
85195[label="blockStatements\n currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position; "]
95196[label="expressionStatement\n currentState=getState(currentState,text.charAt(i)); "]
105197[label="assignment\n currentState=getState(currentState,text.charAt(i)) "]
115198[label="expressionName\n currentState "]
115199[label="assignmentOperator\n = "]
115200[label="methodInvocation_lfno_primary\n getState(currentState,text.charAt(i)) "]
125201[label="methodName\n getState "]
125202[label="argumentList\n currentState,text.charAt(i) "]
135203[label="expressionName\n currentState "]
135204[label="methodInvocation_lfno_primary\n text.charAt(i) "]
145205[label="typeName\n text "]
145206[label="expressionName\n i "]
95207[label="localVariableDeclarationStatement\n int[]hitArray=output[currentState]; "]
105208[label="localVariableDeclaration\n int[]hitArray=output[currentState] "]
115209[label="unannArrayType\n int[] "]
125210[label="integralType\n int "]
125211[label="dims\n [] "]
115212[label="variableDeclarator\n hitArray=output[currentState] "]
125213[label="variableDeclaratorId\n hitArray "]
125214[label="arrayAccess_lfno_primary\n output[currentState] "]
135215[label="expressionName\n output "]
135216[label="expressionName\n currentState "]
95217[label="ifThenStatement\n if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}} "]
105218[label="equalityExpression\n hitArray!=null "]
115219[label="expressionName\n hitArray "]
115220[label="literal\n null "]
105221[label="block\n {for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}} "]
115222[label="enhancedForStatement\n for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);} "]
125223[label="integralType\n int "]
125224[label="variableDeclaratorId\n hit "]
125225[label="expressionName\n hitArray "]
125226[label="block\n {processor.hit(position-l[hit],position,v[hit]);} "]
135227[label="expressionStatement\n processor.hit(position-l[hit],position,v[hit]); "]
145228[label="methodInvocation\n processor.hit(position-l[hit],position,v[hit]) "]
155229[label="typeName\n processor "]
155230[label="argumentList\n position-l[hit],position,v[hit] "]
165231[label="additiveExpression\n position-l[hit] "]
175232[label="expressionName\n position "]
175233[label="arrayAccess_lfno_primary\n l[hit] "]
185234[label="expressionName\n l "]
185235[label="expressionName\n hit "]
165236[label="expressionName\n position "]
165237[label="arrayAccess_lfno_primary\n v[hit] "]
175238[label="expressionName\n v "]
175239[label="expressionName\n hit "]
95240[label="expressionStatement\n ++position; "]
105241[label="preIncrementExpression\n ++position "]
115242[label="expressionName\n position "]
35243[label="methodDeclaration\n publicvoidparseText(char[]text,IHit<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}} "]
45244[label="methodModifier\n public "]
45245[label="methodHeader\n voidparseText(char[]text,IHit<V>processor) "]
55246[label="result\n void "]
55247[label="methodDeclarator\n parseText(char[]text,IHit<V>processor) "]
65248[label="formalParameterList\n char[]text,IHit<V>processor "]
75249[label="formalParameter\n char[]text "]
85250[label="unannArrayType\n char[] "]
95251[label="integralType\n char "]
95252[label="dims\n [] "]
85253[label="variableDeclaratorId\n text "]
75254[label="formalParameter\n IHit<V>processor "]
85255[label="unannClassType_lfno_unannClassOrInterfaceType\n IHit<V> "]
95256[label="typeArguments\n <V> "]
105257[label="classType_lfno_classOrInterfaceType\n V "]
85258[label="variableDeclaratorId\n processor "]
45259[label="block\n {intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}} "]
55260[label="blockStatements\n intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;} "]
65261[label="localVariableDeclarationStatement\n intposition=1; "]
75262[label="localVariableDeclaration\n intposition=1 "]
85263[label="integralType\n int "]
85264[label="variableDeclarator\n position=1 "]
95265[label="variableDeclaratorId\n position "]
95266[label="literal\n 1 "]
65267[label="localVariableDeclarationStatement\n intcurrentState=0; "]
75268[label="localVariableDeclaration\n intcurrentState=0 "]
85269[label="integralType\n int "]
85270[label="variableDeclarator\n currentState=0 "]
95271[label="variableDeclaratorId\n currentState "]
95272[label="literal\n 0 "]
65273[label="enhancedForStatement\n for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;} "]
75274[label="integralType\n char "]
75275[label="variableDeclaratorId\n c "]
75276[label="expressionName\n text "]
75277[label="block\n {currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;} "]
85278[label="blockStatements\n currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position; "]
95279[label="expressionStatement\n currentState=getState(currentState,c); "]
105280[label="assignment\n currentState=getState(currentState,c) "]
115281[label="expressionName\n currentState "]
115282[label="assignmentOperator\n = "]
115283[label="methodInvocation_lfno_primary\n getState(currentState,c) "]
125284[label="methodName\n getState "]
125285[label="argumentList\n currentState,c "]
135286[label="expressionName\n currentState "]
135287[label="expressionName\n c "]
95288[label="localVariableDeclarationStatement\n int[]hitArray=output[currentState]; "]
105289[label="localVariableDeclaration\n int[]hitArray=output[currentState] "]
115290[label="unannArrayType\n int[] "]
125291[label="integralType\n int "]
125292[label="dims\n [] "]
115293[label="variableDeclarator\n hitArray=output[currentState] "]
125294[label="variableDeclaratorId\n hitArray "]
125295[label="arrayAccess_lfno_primary\n output[currentState] "]
135296[label="expressionName\n output "]
135297[label="expressionName\n currentState "]
95298[label="ifThenStatement\n if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}} "]
105299[label="equalityExpression\n hitArray!=null "]
115300[label="expressionName\n hitArray "]
115301[label="literal\n null "]
105302[label="block\n {for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}} "]
115303[label="enhancedForStatement\n for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);} "]
125304[label="integralType\n int "]
125305[label="variableDeclaratorId\n hit "]
125306[label="expressionName\n hitArray "]
125307[label="block\n {processor.hit(position-l[hit],position,v[hit]);} "]
135308[label="expressionStatement\n processor.hit(position-l[hit],position,v[hit]); "]
145309[label="methodInvocation\n processor.hit(position-l[hit],position,v[hit]) "]
155310[label="typeName\n processor "]
155311[label="argumentList\n position-l[hit],position,v[hit] "]
165312[label="additiveExpression\n position-l[hit] "]
175313[label="expressionName\n position "]
175314[label="arrayAccess_lfno_primary\n l[hit] "]
185315[label="expressionName\n l "]
185316[label="expressionName\n hit "]
165317[label="expressionName\n position "]
165318[label="arrayAccess_lfno_primary\n v[hit] "]
175319[label="expressionName\n v "]
175320[label="expressionName\n hit "]
95321[label="expressionStatement\n ++position; "]
105322[label="preIncrementExpression\n ++position "]
115323[label="expressionName\n position "]
35324[label="methodDeclaration\n publicvoidparseText(char[]text,IHitFull<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;}} "]
45325[label="methodModifier\n public "]
45326[label="methodHeader\n voidparseText(char[]text,IHitFull<V>processor) "]
55327[label="result\n void "]
55328[label="methodDeclarator\n parseText(char[]text,IHitFull<V>processor) "]
65329[label="formalParameterList\n char[]text,IHitFull<V>processor "]
75330[label="formalParameter\n char[]text "]
85331[label="unannArrayType\n char[] "]
95332[label="integralType\n char "]
95333[label="dims\n [] "]
85334[label="variableDeclaratorId\n text "]
75335[label="formalParameter\n IHitFull<V>processor "]
85336[label="unannClassType_lfno_unannClassOrInterfaceType\n IHitFull<V> "]
95337[label="typeArguments\n <V> "]
105338[label="classType_lfno_classOrInterfaceType\n V "]
85339[label="variableDeclaratorId\n processor "]
45340[label="block\n {intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;}} "]
55341[label="blockStatements\n intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;} "]
65342[label="localVariableDeclarationStatement\n intposition=1; "]
75343[label="localVariableDeclaration\n intposition=1 "]
85344[label="integralType\n int "]
85345[label="variableDeclarator\n position=1 "]
95346[label="variableDeclaratorId\n position "]
95347[label="literal\n 1 "]
65348[label="localVariableDeclarationStatement\n intcurrentState=0; "]
75349[label="localVariableDeclaration\n intcurrentState=0 "]
85350[label="integralType\n int "]
85351[label="variableDeclarator\n currentState=0 "]
95352[label="variableDeclaratorId\n currentState "]
95353[label="literal\n 0 "]
65354[label="enhancedForStatement\n for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;} "]
75355[label="integralType\n char "]
75356[label="variableDeclaratorId\n c "]
75357[label="expressionName\n text "]
75358[label="block\n {currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;} "]
85359[label="blockStatements\n currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position; "]
95360[label="expressionStatement\n currentState=getState(currentState,c); "]
105361[label="assignment\n currentState=getState(currentState,c) "]
115362[label="expressionName\n currentState "]
115363[label="assignmentOperator\n = "]
115364[label="methodInvocation_lfno_primary\n getState(currentState,c) "]
125365[label="methodName\n getState "]
125366[label="argumentList\n currentState,c "]
135367[label="expressionName\n currentState "]
135368[label="expressionName\n c "]
95369[label="localVariableDeclarationStatement\n int[]hitArray=output[currentState]; "]
105370[label="localVariableDeclaration\n int[]hitArray=output[currentState] "]
115371[label="unannArrayType\n int[] "]
125372[label="integralType\n int "]
125373[label="dims\n [] "]
115374[label="variableDeclarator\n hitArray=output[currentState] "]
125375[label="variableDeclaratorId\n hitArray "]
125376[label="arrayAccess_lfno_primary\n output[currentState] "]
135377[label="expressionName\n output "]
135378[label="expressionName\n currentState "]
95379[label="ifThenStatement\n if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}} "]
105380[label="equalityExpression\n hitArray!=null "]
115381[label="expressionName\n hitArray "]
115382[label="literal\n null "]
105383[label="block\n {for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}} "]
115384[label="enhancedForStatement\n for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);} "]
125385[label="integralType\n int "]
125386[label="variableDeclaratorId\n hit "]
125387[label="expressionName\n hitArray "]
125388[label="block\n {processor.hit(position-l[hit],position,v[hit],hit);} "]
135389[label="expressionStatement\n processor.hit(position-l[hit],position,v[hit],hit); "]
145390[label="methodInvocation\n processor.hit(position-l[hit],position,v[hit],hit) "]
155391[label="typeName\n processor "]
155392[label="argumentList\n position-l[hit],position,v[hit],hit "]
165393[label="additiveExpression\n position-l[hit] "]
175394[label="expressionName\n position "]
175395[label="arrayAccess_lfno_primary\n l[hit] "]
185396[label="expressionName\n l "]
185397[label="expressionName\n hit "]
165398[label="expressionName\n position "]
165399[label="arrayAccess_lfno_primary\n v[hit] "]
175400[label="expressionName\n v "]
175401[label="expressionName\n hit "]
165402[label="expressionName\n hit "]
95403[label="expressionStatement\n ++position; "]
105404[label="preIncrementExpression\n ++position "]
115405[label="expressionName\n position "]
35406[label="methodDeclaration\n publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(size);for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}}out.writeInt(l.length);for(intlength:l){out.writeInt(length);}} "]
45407[label="methodModifier\n public "]
45408[label="methodHeader\n voidsave(DataOutputStreamout)throwsException "]
55409[label="result\n void "]
55410[label="methodDeclarator\n save(DataOutputStreamout) "]
65411[label="formalParameter\n DataOutputStreamout "]
75412[label="unannClassType_lfno_unannClassOrInterfaceType\n DataOutputStream "]
75413[label="variableDeclaratorId\n out "]
55414[label="throws_\n throwsException "]
65415[label="classType\n Exception "]
45416[label="block\n {out.writeInt(size);for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}}out.writeInt(l.length);for(intlength:l){out.writeInt(length);}} "]
55417[label="blockStatements\n out.writeInt(size);for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}}out.writeInt(l.length);for(intlength:l){out.writeInt(length);} "]
65418[label="expressionStatement\n out.writeInt(size); "]
75419[label="methodInvocation\n out.writeInt(size) "]
85420[label="typeName\n out "]
85421[label="expressionName\n size "]
65422[label="basicForStatement\n for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}} "]
75423[label="localVariableDeclaration\n inti=0 "]
85424[label="integralType\n int "]
85425[label="variableDeclarator\n i=0 "]
95426[label="variableDeclaratorId\n i "]
95427[label="literal\n 0 "]
75428[label="relationalExpression\n i<size "]
85429[label="expressionName\n i "]
85430[label="expressionName\n size "]
75431[label="postIncrementExpression\n i++ "]
85432[label="expressionName\n i "]
75433[label="block\n {out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}} "]
85434[label="blockStatements\n out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}} "]
95435[label="expressionStatement\n out.writeInt(base[i]); "]
105436[label="methodInvocation\n out.writeInt(base[i]) "]
115437[label="typeName\n out "]
115438[label="arrayAccess_lfno_primary\n base[i] "]
125439[label="expressionName\n base "]
125440[label="expressionName\n i "]
95441[label="expressionStatement\n out.writeInt(check[i]); "]
105442[label="methodInvocation\n out.writeInt(check[i]) "]
115443[label="typeName\n out "]
115444[label="arrayAccess_lfno_primary\n check[i] "]
125445[label="expressionName\n check "]
125446[label="expressionName\n i "]
95447[label="expressionStatement\n out.writeInt(fail[i]); "]
105448[label="methodInvocation\n out.writeInt(fail[i]) "]
115449[label="typeName\n out "]
115450[label="arrayAccess_lfno_primary\n fail[i] "]
125451[label="expressionName\n fail "]
125452[label="expressionName\n i "]
95453[label="localVariableDeclarationStatement\n intoutput[]=this.output[i]; "]
105454[label="localVariableDeclaration\n intoutput[]=this.output[i] "]
115455[label="integralType\n int "]
115456[label="variableDeclarator\n output[]=this.output[i] "]
125457[label="variableDeclaratorId\n output[] "]
135458[label="dims\n [] "]
125459[label="primary\n this.output[i] "]
135460[label="primaryNoNewArray_lfno_primary\n this "]
135461[label="arrayAccess_lf_primary\n .output[i] "]
145462[label="fieldAccess_lf_primary\n .output "]
145463[label="expressionName\n i "]
95464[label="ifThenElseStatement\n if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}} "]
105465[label="equalityExpression\n output==null "]
115466[label="expressionName\n output "]
115467[label="literal\n null "]
105468[label="block\n {out.writeInt(0);} "]
115469[label="expressionStatement\n out.writeInt(0); "]
125470[label="methodInvocation\n out.writeInt(0) "]
135471[label="typeName\n out "]
135472[label="literal\n 0 "]
105473[label="block\n {out.writeInt(output.length);for(into:output){out.writeInt(o);}} "]
115474[label="blockStatements\n out.writeInt(output.length);for(into:output){out.writeInt(o);} "]
125475[label="expressionStatement\n out.writeInt(output.length); "]
135476[label="methodInvocation\n out.writeInt(output.length) "]
145477[label="typeName\n out "]
145478[label="expressionName\n output.length "]
155479[label="ambiguousName\n output "]
125480[label="enhancedForStatement\n for(into:output){out.writeInt(o);} "]
135481[label="integralType\n int "]
135482[label="variableDeclaratorId\n o "]
135483[label="expressionName\n output "]
135484[label="block\n {out.writeInt(o);} "]
145485[label="expressionStatement\n out.writeInt(o); "]
155486[label="methodInvocation\n out.writeInt(o) "]
165487[label="typeName\n out "]
165488[label="expressionName\n o "]
65489[label="expressionStatement\n out.writeInt(l.length); "]
75490[label="methodInvocation\n out.writeInt(l.length) "]
85491[label="typeName\n out "]
85492[label="expressionName\n l.length "]
95493[label="ambiguousName\n l "]
65494[label="enhancedForStatement\n for(intlength:l){out.writeInt(length);} "]
75495[label="integralType\n int "]
75496[label="variableDeclaratorId\n length "]
75497[label="expressionName\n l "]
75498[label="block\n {out.writeInt(length);} "]
85499[label="expressionStatement\n out.writeInt(length); "]
95500[label="methodInvocation\n out.writeInt(length) "]
105501[label="typeName\n out "]
105502[label="expressionName\n length "]
35503[label="methodDeclaration\n publicvoidsave(ObjectOutputStreamout)throwsIOException{out.writeObject(base);out.writeObject(check);out.writeObject(fail);out.writeObject(output);out.writeObject(l);} "]
45504[label="methodModifier\n public "]
45505[label="methodHeader\n voidsave(ObjectOutputStreamout)throwsIOException "]
55506[label="result\n void "]
55507[label="methodDeclarator\n save(ObjectOutputStreamout) "]
65508[label="formalParameter\n ObjectOutputStreamout "]
75509[label="unannClassType_lfno_unannClassOrInterfaceType\n ObjectOutputStream "]
75510[label="variableDeclaratorId\n out "]
55511[label="throws_\n throwsIOException "]
65512[label="classType\n IOException "]
45513[label="block\n {out.writeObject(base);out.writeObject(check);out.writeObject(fail);out.writeObject(output);out.writeObject(l);} "]
55514[label="blockStatements\n out.writeObject(base);out.writeObject(check);out.writeObject(fail);out.writeObject(output);out.writeObject(l); "]
65515[label="expressionStatement\n out.writeObject(base); "]
75516[label="methodInvocation\n out.writeObject(base) "]
85517[label="typeName\n out "]
85518[label="expressionName\n base "]
65519[label="expressionStatement\n out.writeObject(check); "]
75520[label="methodInvocation\n out.writeObject(check) "]
85521[label="typeName\n out "]
85522[label="expressionName\n check "]
65523[label="expressionStatement\n out.writeObject(fail); "]
75524[label="methodInvocation\n out.writeObject(fail) "]
85525[label="typeName\n out "]
85526[label="expressionName\n fail "]
65527[label="expressionStatement\n out.writeObject(output); "]
75528[label="methodInvocation\n out.writeObject(output) "]
85529[label="typeName\n out "]
85530[label="expressionName\n output "]
65531[label="expressionStatement\n out.writeObject(l); "]
75532[label="methodInvocation\n out.writeObject(l) "]
85533[label="typeName\n out "]
85534[label="expressionName\n l "]
35535[label="methodDeclaration\n publicvoidload(ObjectInputStreamin,V[]value)throwsIOException,ClassNotFoundException{base=(int[])in.readObject();check=(int[])in.readObject();fail=(int[])in.readObject();output=(int[][])in.readObject();l=(int[])in.readObject();v=value;} "]
45536[label="methodModifier\n public "]
45537[label="methodHeader\n voidload(ObjectInputStreamin,V[]value)throwsIOException,ClassNotFoundException "]
55538[label="result\n void "]
55539[label="methodDeclarator\n load(ObjectInputStreamin,V[]value) "]
65540[label="formalParameterList\n ObjectInputStreamin,V[]value "]
75541[label="formalParameter\n ObjectInputStreamin "]
85542[label="unannClassType_lfno_unannClassOrInterfaceType\n ObjectInputStream "]
85543[label="variableDeclaratorId\n in "]
75544[label="formalParameter\n V[]value "]
85545[label="unannArrayType\n V[] "]
95546[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
95547[label="dims\n [] "]
85548[label="variableDeclaratorId\n value "]
55549[label="throws_\n throwsIOException,ClassNotFoundException "]
65550[label="exceptionTypeList\n IOException,ClassNotFoundException "]
75551[label="classType\n IOException "]
75552[label="classType\n ClassNotFoundException "]
45553[label="block\n {base=(int[])in.readObject();check=(int[])in.readObject();fail=(int[])in.readObject();output=(int[][])in.readObject();l=(int[])in.readObject();v=value;} "]
55554[label="blockStatements\n base=(int[])in.readObject();check=(int[])in.readObject();fail=(int[])in.readObject();output=(int[][])in.readObject();l=(int[])in.readObject();v=value; "]
65555[label="expressionStatement\n base=(int[])in.readObject(); "]
75556[label="assignment\n base=(int[])in.readObject() "]
85557[label="expressionName\n base "]
85558[label="assignmentOperator\n = "]
85559[label="castExpression\n (int[])in.readObject() "]
95560[label="arrayType\n int[] "]
105561[label="integralType\n int "]
105562[label="dims\n [] "]
95563[label="methodInvocation_lfno_primary\n in.readObject() "]
105564[label="typeName\n in "]
65565[label="expressionStatement\n check=(int[])in.readObject(); "]
75566[label="assignment\n check=(int[])in.readObject() "]
85567[label="expressionName\n check "]
85568[label="assignmentOperator\n = "]
85569[label="castExpression\n (int[])in.readObject() "]
95570[label="arrayType\n int[] "]
105571[label="integralType\n int "]
105572[label="dims\n [] "]
95573[label="methodInvocation_lfno_primary\n in.readObject() "]
105574[label="typeName\n in "]
65575[label="expressionStatement\n fail=(int[])in.readObject(); "]
75576[label="assignment\n fail=(int[])in.readObject() "]
85577[label="expressionName\n fail "]
85578[label="assignmentOperator\n = "]
85579[label="castExpression\n (int[])in.readObject() "]
95580[label="arrayType\n int[] "]
105581[label="integralType\n int "]
105582[label="dims\n [] "]
95583[label="methodInvocation_lfno_primary\n in.readObject() "]
105584[label="typeName\n in "]
65585[label="expressionStatement\n output=(int[][])in.readObject(); "]
75586[label="assignment\n output=(int[][])in.readObject() "]
85587[label="expressionName\n output "]
85588[label="assignmentOperator\n = "]
85589[label="castExpression\n (int[][])in.readObject() "]
95590[label="arrayType\n int[][] "]
105591[label="integralType\n int "]
105592[label="dims\n [][] "]
95593[label="methodInvocation_lfno_primary\n in.readObject() "]
105594[label="typeName\n in "]
65595[label="expressionStatement\n l=(int[])in.readObject(); "]
75596[label="assignment\n l=(int[])in.readObject() "]
85597[label="expressionName\n l "]
85598[label="assignmentOperator\n = "]
85599[label="castExpression\n (int[])in.readObject() "]
95600[label="arrayType\n int[] "]
105601[label="integralType\n int "]
105602[label="dims\n [] "]
95603[label="methodInvocation_lfno_primary\n in.readObject() "]
105604[label="typeName\n in "]
65605[label="expressionStatement\n v=value; "]
75606[label="assignment\n v=value "]
85607[label="expressionName\n v "]
85608[label="assignmentOperator\n = "]
85609[label="expressionName\n value "]
35610[label="methodDeclaration\n publicbooleanload(ByteArraybyteArray,V[]value){if(byteArray==null)returnfalse;size=byteArray.nextInt();base=newint[size+65535];check=newint[size+65535];fail=newint[size+65535];output=newint[size+65535][];intlength;for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}}length=byteArray.nextInt();l=newint[length];for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();}v=value;returntrue;} "]
45611[label="methodModifier\n public "]
45612[label="methodHeader\n booleanload(ByteArraybyteArray,V[]value) "]
55613[label="unannPrimitiveType\n boolean "]
55614[label="methodDeclarator\n load(ByteArraybyteArray,V[]value) "]
65615[label="formalParameterList\n ByteArraybyteArray,V[]value "]
75616[label="formalParameter\n ByteArraybyteArray "]
85617[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
85618[label="variableDeclaratorId\n byteArray "]
75619[label="formalParameter\n V[]value "]
85620[label="unannArrayType\n V[] "]
95621[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
95622[label="dims\n [] "]
85623[label="variableDeclaratorId\n value "]
45624[label="block\n {if(byteArray==null)returnfalse;size=byteArray.nextInt();base=newint[size+65535];check=newint[size+65535];fail=newint[size+65535];output=newint[size+65535][];intlength;for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}}length=byteArray.nextInt();l=newint[length];for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();}v=value;returntrue;} "]
55625[label="blockStatements\n if(byteArray==null)returnfalse;size=byteArray.nextInt();base=newint[size+65535];check=newint[size+65535];fail=newint[size+65535];output=newint[size+65535][];intlength;for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}}length=byteArray.nextInt();l=newint[length];for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();}v=value;returntrue; "]
65626[label="ifThenStatement\n if(byteArray==null)returnfalse; "]
75627[label="equalityExpression\n byteArray==null "]
85628[label="expressionName\n byteArray "]
85629[label="literal\n null "]
75630[label="returnStatement\n returnfalse; "]
85631[label="literal\n false "]
65632[label="expressionStatement\n size=byteArray.nextInt(); "]
75633[label="assignment\n size=byteArray.nextInt() "]
85634[label="expressionName\n size "]
85635[label="assignmentOperator\n = "]
85636[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
95637[label="typeName\n byteArray "]
65638[label="expressionStatement\n base=newint[size+65535]; "]
75639[label="assignment\n base=newint[size+65535] "]
85640[label="expressionName\n base "]
85641[label="assignmentOperator\n = "]
85642[label="arrayCreationExpression\n newint[size+65535] "]
95643[label="integralType\n int "]
95644[label="dimExpr\n [size+65535] "]
105645[label="additiveExpression\n size+65535 "]
115646[label="expressionName\n size "]
115647[label="literal\n 65535 "]
65648[label="expressionStatement\n check=newint[size+65535]; "]
75649[label="assignment\n check=newint[size+65535] "]
85650[label="expressionName\n check "]
85651[label="assignmentOperator\n = "]
85652[label="arrayCreationExpression\n newint[size+65535] "]
95653[label="integralType\n int "]
95654[label="dimExpr\n [size+65535] "]
105655[label="additiveExpression\n size+65535 "]
115656[label="expressionName\n size "]
115657[label="literal\n 65535 "]
65658[label="expressionStatement\n fail=newint[size+65535]; "]
75659[label="assignment\n fail=newint[size+65535] "]
85660[label="expressionName\n fail "]
85661[label="assignmentOperator\n = "]
85662[label="arrayCreationExpression\n newint[size+65535] "]
95663[label="integralType\n int "]
95664[label="dimExpr\n [size+65535] "]
105665[label="additiveExpression\n size+65535 "]
115666[label="expressionName\n size "]
115667[label="literal\n 65535 "]
65668[label="expressionStatement\n output=newint[size+65535][]; "]
75669[label="assignment\n output=newint[size+65535][] "]
85670[label="expressionName\n output "]
85671[label="assignmentOperator\n = "]
85672[label="arrayCreationExpression\n newint[size+65535][] "]
95673[label="integralType\n int "]
95674[label="dimExpr\n [size+65535] "]
105675[label="additiveExpression\n size+65535 "]
115676[label="expressionName\n size "]
115677[label="literal\n 65535 "]
95678[label="dims\n [] "]
65679[label="localVariableDeclarationStatement\n intlength; "]
75680[label="localVariableDeclaration\n intlength "]
85681[label="integralType\n int "]
85682[label="variableDeclaratorId\n length "]
65683[label="basicForStatement\n for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}} "]
75684[label="localVariableDeclaration\n inti=0 "]
85685[label="integralType\n int "]
85686[label="variableDeclarator\n i=0 "]
95687[label="variableDeclaratorId\n i "]
95688[label="literal\n 0 "]
75689[label="relationalExpression\n i<size "]
85690[label="expressionName\n i "]
85691[label="expressionName\n size "]
75692[label="preIncrementExpression\n ++i "]
85693[label="expressionName\n i "]
75694[label="block\n {base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}} "]
85695[label="blockStatements\n base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();} "]
95696[label="expressionStatement\n base[i]=byteArray.nextInt(); "]
105697[label="assignment\n base[i]=byteArray.nextInt() "]
115698[label="arrayAccess\n base[i] "]
125699[label="expressionName\n base "]
125700[label="expressionName\n i "]
115701[label="assignmentOperator\n = "]
115702[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
125703[label="typeName\n byteArray "]
95704[label="expressionStatement\n check[i]=byteArray.nextInt(); "]
105705[label="assignment\n check[i]=byteArray.nextInt() "]
115706[label="arrayAccess\n check[i] "]
125707[label="expressionName\n check "]
125708[label="expressionName\n i "]
115709[label="assignmentOperator\n = "]
115710[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
125711[label="typeName\n byteArray "]
95712[label="expressionStatement\n fail[i]=byteArray.nextInt(); "]
105713[label="assignment\n fail[i]=byteArray.nextInt() "]
115714[label="arrayAccess\n fail[i] "]
125715[label="expressionName\n fail "]
125716[label="expressionName\n i "]
115717[label="assignmentOperator\n = "]
115718[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
125719[label="typeName\n byteArray "]
95720[label="expressionStatement\n length=byteArray.nextInt(); "]
105721[label="assignment\n length=byteArray.nextInt() "]
115722[label="expressionName\n length "]
115723[label="assignmentOperator\n = "]
115724[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
125725[label="typeName\n byteArray "]
95726[label="ifThenStatement\n if(length==0)continue; "]
105727[label="equalityExpression\n length==0 "]
115728[label="expressionName\n length "]
115729[label="literal\n 0 "]
105730[label="continueStatement\n continue; "]
95731[label="expressionStatement\n output[i]=newint[length]; "]
105732[label="assignment\n output[i]=newint[length] "]
115733[label="arrayAccess\n output[i] "]
125734[label="expressionName\n output "]
125735[label="expressionName\n i "]
115736[label="assignmentOperator\n = "]
115737[label="arrayCreationExpression\n newint[length] "]
125738[label="integralType\n int "]
125739[label="dimExpr\n [length] "]
135740[label="expressionName\n length "]
95741[label="basicForStatement\n for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();} "]
105742[label="localVariableDeclaration\n intj=0 "]
115743[label="integralType\n int "]
115744[label="variableDeclarator\n j=0 "]
125745[label="variableDeclaratorId\n j "]
125746[label="literal\n 0 "]
105747[label="relationalExpression\n j<output[i].length "]
115748[label="expressionName\n j "]
115749[label="primary\n output[i].length "]
125750[label="arrayAccess_lfno_primary\n output[i] "]
135751[label="expressionName\n output "]
135752[label="expressionName\n i "]
125753[label="fieldAccess_lf_primary\n .length "]
105754[label="preIncrementExpression\n ++j "]
115755[label="expressionName\n j "]
105756[label="block\n {output[i][j]=byteArray.nextInt();} "]
115757[label="expressionStatement\n output[i][j]=byteArray.nextInt(); "]
125758[label="assignment\n output[i][j]=byteArray.nextInt() "]
135759[label="arrayAccess\n output[i][j] "]
145760[label="expressionName\n output "]
145761[label="expressionName\n i "]
145762[label="primaryNoNewArray_lf_arrayAccess\n  "]
145763[label="expressionName\n j "]
135764[label="assignmentOperator\n = "]
135765[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
145766[label="typeName\n byteArray "]
65767[label="expressionStatement\n length=byteArray.nextInt(); "]
75768[label="assignment\n length=byteArray.nextInt() "]
85769[label="expressionName\n length "]
85770[label="assignmentOperator\n = "]
85771[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
95772[label="typeName\n byteArray "]
65773[label="expressionStatement\n l=newint[length]; "]
75774[label="assignment\n l=newint[length] "]
85775[label="expressionName\n l "]
85776[label="assignmentOperator\n = "]
85777[label="arrayCreationExpression\n newint[length] "]
95778[label="integralType\n int "]
95779[label="dimExpr\n [length] "]
105780[label="expressionName\n length "]
65781[label="basicForStatement\n for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();} "]
75782[label="localVariableDeclaration\n inti=0 "]
85783[label="integralType\n int "]
85784[label="variableDeclarator\n i=0 "]
95785[label="variableDeclaratorId\n i "]
95786[label="literal\n 0 "]
75787[label="relationalExpression\n i<l.length "]
85788[label="expressionName\n i "]
85789[label="expressionName\n l.length "]
95790[label="ambiguousName\n l "]
75791[label="preIncrementExpression\n ++i "]
85792[label="expressionName\n i "]
75793[label="block\n {l[i]=byteArray.nextInt();} "]
85794[label="expressionStatement\n l[i]=byteArray.nextInt(); "]
95795[label="assignment\n l[i]=byteArray.nextInt() "]
105796[label="arrayAccess\n l[i] "]
115797[label="expressionName\n l "]
115798[label="expressionName\n i "]
105799[label="assignmentOperator\n = "]
105800[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
115801[label="typeName\n byteArray "]
65802[label="expressionStatement\n v=value; "]
75803[label="assignment\n v=value "]
85804[label="expressionName\n v "]
85805[label="assignmentOperator\n = "]
85806[label="expressionName\n value "]
65807[label="returnStatement\n returntrue; "]
75808[label="literal\n true "]
35809[label="methodDeclaration\n publicVget(Stringkey){intindex=exactMatchSearch(key);if(index>=0){returnv[index];}returnnull;} "]
45810[label="methodModifier\n public "]
45811[label="methodHeader\n Vget(Stringkey) "]
55812[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
55813[label="methodDeclarator\n get(Stringkey) "]
65814[label="formalParameter\n Stringkey "]
75815[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
75816[label="variableDeclaratorId\n key "]
45817[label="block\n {intindex=exactMatchSearch(key);if(index>=0){returnv[index];}returnnull;} "]
55818[label="blockStatements\n intindex=exactMatchSearch(key);if(index>=0){returnv[index];}returnnull; "]
65819[label="localVariableDeclarationStatement\n intindex=exactMatchSearch(key); "]
75820[label="localVariableDeclaration\n intindex=exactMatchSearch(key) "]
85821[label="integralType\n int "]
85822[label="variableDeclarator\n index=exactMatchSearch(key) "]
95823[label="variableDeclaratorId\n index "]
95824[label="methodInvocation_lfno_primary\n exactMatchSearch(key) "]
105825[label="methodName\n exactMatchSearch "]
105826[label="expressionName\n key "]
65827[label="ifThenStatement\n if(index>=0){returnv[index];} "]
75828[label="relationalExpression\n index>=0 "]
85829[label="expressionName\n index "]
85830[label="literal\n 0 "]
75831[label="block\n {returnv[index];} "]
85832[label="returnStatement\n returnv[index]; "]
95833[label="arrayAccess_lfno_primary\n v[index] "]
105834[label="expressionName\n v "]
105835[label="expressionName\n index "]
65836[label="returnStatement\n returnnull; "]
75837[label="literal\n null "]
35838[label="methodDeclaration\n publicbooleanset(Stringkey,Vvalue){intindex=exactMatchSearch(key);if(index>=0){v[index]=value;returntrue;}returnfalse;} "]
45839[label="methodModifier\n public "]
45840[label="methodHeader\n booleanset(Stringkey,Vvalue) "]
55841[label="unannPrimitiveType\n boolean "]
55842[label="methodDeclarator\n set(Stringkey,Vvalue) "]
65843[label="formalParameterList\n Stringkey,Vvalue "]
75844[label="formalParameter\n Stringkey "]
85845[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
85846[label="variableDeclaratorId\n key "]
75847[label="formalParameter\n Vvalue "]
85848[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
85849[label="variableDeclaratorId\n value "]
45850[label="block\n {intindex=exactMatchSearch(key);if(index>=0){v[index]=value;returntrue;}returnfalse;} "]
55851[label="blockStatements\n intindex=exactMatchSearch(key);if(index>=0){v[index]=value;returntrue;}returnfalse; "]
65852[label="localVariableDeclarationStatement\n intindex=exactMatchSearch(key); "]
75853[label="localVariableDeclaration\n intindex=exactMatchSearch(key) "]
85854[label="integralType\n int "]
85855[label="variableDeclarator\n index=exactMatchSearch(key) "]
95856[label="variableDeclaratorId\n index "]
95857[label="methodInvocation_lfno_primary\n exactMatchSearch(key) "]
105858[label="methodName\n exactMatchSearch "]
105859[label="expressionName\n key "]
65860[label="ifThenStatement\n if(index>=0){v[index]=value;returntrue;} "]
75861[label="relationalExpression\n index>=0 "]
85862[label="expressionName\n index "]
85863[label="literal\n 0 "]
75864[label="block\n {v[index]=value;returntrue;} "]
85865[label="blockStatements\n v[index]=value;returntrue; "]
95866[label="expressionStatement\n v[index]=value; "]
105867[label="assignment\n v[index]=value "]
115868[label="arrayAccess\n v[index] "]
125869[label="expressionName\n v "]
125870[label="expressionName\n index "]
115871[label="assignmentOperator\n = "]
115872[label="expressionName\n value "]
95873[label="returnStatement\n returntrue; "]
105874[label="literal\n true "]
65875[label="returnStatement\n returnfalse; "]
75876[label="literal\n false "]
35877[label="methodDeclaration\n publicVget(intindex){returnv[index];} "]
45878[label="methodModifier\n public "]
45879[label="methodHeader\n Vget(intindex) "]
55880[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
55881[label="methodDeclarator\n get(intindex) "]
65882[label="formalParameter\n intindex "]
75883[label="integralType\n int "]
75884[label="variableDeclaratorId\n index "]
45885[label="block\n {returnv[index];} "]
55886[label="returnStatement\n returnv[index]; "]
65887[label="arrayAccess_lfno_primary\n v[index] "]
75888[label="expressionName\n v "]
75889[label="expressionName\n index "]
35890[label="normalInterfaceDeclaration\n publicinterfaceIHit<V>{voidhit(intbegin,intend,Vvalue);} "]
45891[label="interfaceModifier\n public "]
45892[label="typeParameters\n <V> "]
55893[label="typeParameter\n V "]
45894[label="interfaceBody\n {voidhit(intbegin,intend,Vvalue);} "]
55895[label="interfaceMethodDeclaration\n voidhit(intbegin,intend,Vvalue); "]
65896[label="methodHeader\n voidhit(intbegin,intend,Vvalue) "]
75897[label="result\n void "]
75898[label="methodDeclarator\n hit(intbegin,intend,Vvalue) "]
85899[label="formalParameterList\n intbegin,intend,Vvalue "]
95900[label="formalParameters\n intbegin,intend "]
105901[label="formalParameter\n intbegin "]
115902[label="integralType\n int "]
115903[label="variableDeclaratorId\n begin "]
105904[label="formalParameter\n intend "]
115905[label="integralType\n int "]
115906[label="variableDeclaratorId\n end "]
95907[label="formalParameter\n Vvalue "]
105908[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
105909[label="variableDeclaratorId\n value "]
65910[label="methodBody\n ; "]
35911[label="normalInterfaceDeclaration\n publicinterfaceIHitFull<V>{voidhit(intbegin,intend,Vvalue,intindex);} "]
45912[label="interfaceModifier\n public "]
45913[label="typeParameters\n <V> "]
55914[label="typeParameter\n V "]
45915[label="interfaceBody\n {voidhit(intbegin,intend,Vvalue,intindex);} "]
55916[label="interfaceMethodDeclaration\n voidhit(intbegin,intend,Vvalue,intindex); "]
65917[label="methodHeader\n voidhit(intbegin,intend,Vvalue,intindex) "]
75918[label="result\n void "]
75919[label="methodDeclarator\n hit(intbegin,intend,Vvalue,intindex) "]
85920[label="formalParameterList\n intbegin,intend,Vvalue,intindex "]
95921[label="formalParameters\n intbegin,intend,Vvalue "]
105922[label="formalParameter\n intbegin "]
115923[label="integralType\n int "]
115924[label="variableDeclaratorId\n begin "]
105925[label="formalParameter\n intend "]
115926[label="integralType\n int "]
115927[label="variableDeclaratorId\n end "]
105928[label="formalParameter\n Vvalue "]
115929[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
115930[label="variableDeclaratorId\n value "]
95931[label="formalParameter\n intindex "]
105932[label="integralType\n int "]
105933[label="variableDeclaratorId\n index "]
65934[label="methodBody\n ; "]
35935[label="normalClassDeclaration\n publicclassHit<V>{publicfinalintbegin;publicfinalintend;publicfinalVvalue;publicHit(intbegin,intend,Vvalue){this.begin=begin;this.end=end;this.value=value;}@OverridepublicStringtoString(){returnString.format(\"[%d:%d]=%s\",begin,end,value);}} "]
45936[label="classModifier\n public "]
45937[label="typeParameters\n <V> "]
55938[label="typeParameter\n V "]
45939[label="classBody\n {publicfinalintbegin;publicfinalintend;publicfinalVvalue;publicHit(intbegin,intend,Vvalue){this.begin=begin;this.end=end;this.value=value;}@OverridepublicStringtoString(){returnString.format(\"[%d:%d]=%s\",begin,end,value);}} "]
55940[label="fieldDeclaration\n publicfinalintbegin; "]
65941[label="fieldModifier\n public "]
65942[label="fieldModifier\n final "]
65943[label="integralType\n int "]
65944[label="variableDeclaratorId\n begin "]
55945[label="fieldDeclaration\n publicfinalintend; "]
65946[label="fieldModifier\n public "]
65947[label="fieldModifier\n final "]
65948[label="integralType\n int "]
65949[label="variableDeclaratorId\n end "]
55950[label="fieldDeclaration\n publicfinalVvalue; "]
65951[label="fieldModifier\n public "]
65952[label="fieldModifier\n final "]
65953[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
65954[label="variableDeclaratorId\n value "]
55955[label="constructorDeclaration\n publicHit(intbegin,intend,Vvalue){this.begin=begin;this.end=end;this.value=value;} "]
65956[label="constructorModifier\n public "]
65957[label="constructorDeclarator\n Hit(intbegin,intend,Vvalue) "]
75958[label="simpleTypeName\n Hit "]
75959[label="formalParameterList\n intbegin,intend,Vvalue "]
85960[label="formalParameters\n intbegin,intend "]
95961[label="formalParameter\n intbegin "]
105962[label="integralType\n int "]
105963[label="variableDeclaratorId\n begin "]
95964[label="formalParameter\n intend "]
105965[label="integralType\n int "]
105966[label="variableDeclaratorId\n end "]
85967[label="formalParameter\n Vvalue "]
95968[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
95969[label="variableDeclaratorId\n value "]
65970[label="constructorBody\n {this.begin=begin;this.end=end;this.value=value;} "]
75971[label="blockStatements\n this.begin=begin;this.end=end;this.value=value; "]
85972[label="expressionStatement\n this.begin=begin; "]
95973[label="assignment\n this.begin=begin "]
105974[label="fieldAccess\n this.begin "]
115975[label="primaryNoNewArray_lfno_primary\n this "]
105976[label="assignmentOperator\n = "]
105977[label="expressionName\n begin "]
85978[label="expressionStatement\n this.end=end; "]
95979[label="assignment\n this.end=end "]
105980[label="fieldAccess\n this.end "]
115981[label="primaryNoNewArray_lfno_primary\n this "]
105982[label="assignmentOperator\n = "]
105983[label="expressionName\n end "]
85984[label="expressionStatement\n this.value=value; "]
95985[label="assignment\n this.value=value "]
105986[label="fieldAccess\n this.value "]
115987[label="primaryNoNewArray_lfno_primary\n this "]
105988[label="assignmentOperator\n = "]
105989[label="expressionName\n value "]
55990[label="methodDeclaration\n @OverridepublicStringtoString(){returnString.format(\"[%d:%d]=%s\",begin,end,value);} "]
65991[label="markerAnnotation\n @Override "]
75992[label="typeName\n Override "]
65993[label="methodModifier\n public "]
65994[label="methodHeader\n StringtoString() "]
75995[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
75996[label="methodDeclarator\n toString() "]
65997[label="block\n {returnString.format(\"[%d:%d]=%s\",begin,end,value);} "]
75998[label="returnStatement\n returnString.format(\"[%d:%d]=%s\",begin,end,value); "]
85999[label="methodInvocation_lfno_primary\n String.format(\"[%d:%d]=%s\",begin,end,value) "]
96000[label="typeName\n String "]
96001[label="argumentList\n \"[%d:%d]=%s\",begin,end,value "]
106002[label="literal\n \"[%d:%d]=%s\" "]
106003[label="expressionName\n begin "]
106004[label="expressionName\n end "]
106005[label="expressionName\n value "]
36006[label="methodDeclaration\n privateintgetState(intcurrentState,charcharacter){intnewCurrentState=transitionWithRoot(currentState,character);while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);}returnnewCurrentState;} "]
46007[label="methodModifier\n private "]
46008[label="methodHeader\n intgetState(intcurrentState,charcharacter) "]
56009[label="integralType\n int "]
56010[label="methodDeclarator\n getState(intcurrentState,charcharacter) "]
66011[label="formalParameterList\n intcurrentState,charcharacter "]
76012[label="formalParameter\n intcurrentState "]
86013[label="integralType\n int "]
86014[label="variableDeclaratorId\n currentState "]
76015[label="formalParameter\n charcharacter "]
86016[label="integralType\n char "]
86017[label="variableDeclaratorId\n character "]
46018[label="block\n {intnewCurrentState=transitionWithRoot(currentState,character);while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);}returnnewCurrentState;} "]
56019[label="blockStatements\n intnewCurrentState=transitionWithRoot(currentState,character);while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);}returnnewCurrentState; "]
66020[label="localVariableDeclarationStatement\n intnewCurrentState=transitionWithRoot(currentState,character); "]
76021[label="localVariableDeclaration\n intnewCurrentState=transitionWithRoot(currentState,character) "]
86022[label="integralType\n int "]
86023[label="variableDeclarator\n newCurrentState=transitionWithRoot(currentState,character) "]
96024[label="variableDeclaratorId\n newCurrentState "]
96025[label="methodInvocation_lfno_primary\n transitionWithRoot(currentState,character) "]
106026[label="methodName\n transitionWithRoot "]
106027[label="argumentList\n currentState,character "]
116028[label="expressionName\n currentState "]
116029[label="expressionName\n character "]
66030[label="whileStatement\n while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);} "]
76031[label="equalityExpression\n newCurrentState==-1 "]
86032[label="expressionName\n newCurrentState "]
86033[label="unaryExpression\n -1 "]
96034[label="literal\n 1 "]
76035[label="block\n {currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);} "]
86036[label="blockStatements\n currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character); "]
96037[label="expressionStatement\n currentState=fail[currentState]; "]
106038[label="assignment\n currentState=fail[currentState] "]
116039[label="expressionName\n currentState "]
116040[label="assignmentOperator\n = "]
116041[label="arrayAccess_lfno_primary\n fail[currentState] "]
126042[label="expressionName\n fail "]
126043[label="expressionName\n currentState "]
96044[label="expressionStatement\n newCurrentState=transitionWithRoot(currentState,character); "]
106045[label="assignment\n newCurrentState=transitionWithRoot(currentState,character) "]
116046[label="expressionName\n newCurrentState "]
116047[label="assignmentOperator\n = "]
116048[label="methodInvocation_lfno_primary\n transitionWithRoot(currentState,character) "]
126049[label="methodName\n transitionWithRoot "]
126050[label="argumentList\n currentState,character "]
136051[label="expressionName\n currentState "]
136052[label="expressionName\n character "]
66053[label="returnStatement\n returnnewCurrentState; "]
76054[label="expressionName\n newCurrentState "]
36055[label="methodDeclaration\n privatevoidstoreEmits(intposition,intcurrentState,List<Hit<V>>collectedEmits){int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}}} "]
46056[label="methodModifier\n private "]
46057[label="methodHeader\n voidstoreEmits(intposition,intcurrentState,List<Hit<V>>collectedEmits) "]
56058[label="result\n void "]
56059[label="methodDeclarator\n storeEmits(intposition,intcurrentState,List<Hit<V>>collectedEmits) "]
66060[label="formalParameterList\n intposition,intcurrentState,List<Hit<V>>collectedEmits "]
76061[label="formalParameters\n intposition,intcurrentState "]
86062[label="formalParameter\n intposition "]
96063[label="integralType\n int "]
96064[label="variableDeclaratorId\n position "]
86065[label="formalParameter\n intcurrentState "]
96066[label="integralType\n int "]
96067[label="variableDeclaratorId\n currentState "]
76068[label="formalParameter\n List<Hit<V>>collectedEmits "]
86069[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Hit<V>> "]
96070[label="typeArguments\n <Hit<V>> "]
106071[label="classType_lfno_classOrInterfaceType\n Hit<V> "]
116072[label="typeArguments\n <V> "]
126073[label="classType_lfno_classOrInterfaceType\n V "]
86074[label="variableDeclaratorId\n collectedEmits "]
46075[label="block\n {int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}}} "]
56076[label="blockStatements\n int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}} "]
66077[label="localVariableDeclarationStatement\n int[]hitArray=output[currentState]; "]
76078[label="localVariableDeclaration\n int[]hitArray=output[currentState] "]
86079[label="unannArrayType\n int[] "]
96080[label="integralType\n int "]
96081[label="dims\n [] "]
86082[label="variableDeclarator\n hitArray=output[currentState] "]
96083[label="variableDeclaratorId\n hitArray "]
96084[label="arrayAccess_lfno_primary\n output[currentState] "]
106085[label="expressionName\n output "]
106086[label="expressionName\n currentState "]
66087[label="ifThenStatement\n if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}} "]
76088[label="equalityExpression\n hitArray!=null "]
86089[label="expressionName\n hitArray "]
86090[label="literal\n null "]
76091[label="block\n {for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}} "]
86092[label="enhancedForStatement\n for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));} "]
96093[label="integralType\n int "]
96094[label="variableDeclaratorId\n hit "]
96095[label="expressionName\n hitArray "]
96096[label="block\n {collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));} "]
106097[label="expressionStatement\n collectedEmits.add(newHit<V>(position-l[hit],position,v[hit])); "]
116098[label="methodInvocation\n collectedEmits.add(newHit<V>(position-l[hit],position,v[hit])) "]
126099[label="typeName\n collectedEmits "]
126100[label="classInstanceCreationExpression_lfno_primary\n newHit<V>(position-l[hit],position,v[hit]) "]
136101[label="typeArguments\n <V> "]
146102[label="classType_lfno_classOrInterfaceType\n V "]
136103[label="argumentList\n position-l[hit],position,v[hit] "]
146104[label="additiveExpression\n position-l[hit] "]
156105[label="expressionName\n position "]
156106[label="arrayAccess_lfno_primary\n l[hit] "]
166107[label="expressionName\n l "]
166108[label="expressionName\n hit "]
146109[label="expressionName\n position "]
146110[label="arrayAccess_lfno_primary\n v[hit] "]
156111[label="expressionName\n v "]
156112[label="expressionName\n hit "]
36113[label="methodDeclaration\n protectedinttransition(intcurrent,charc){intb=current;intp;p=b+c+1;if(b==check[p])b=base[p];elsereturn-1;p=b;returnp;} "]
46114[label="methodModifier\n protected "]
46115[label="methodHeader\n inttransition(intcurrent,charc) "]
56116[label="integralType\n int "]
56117[label="methodDeclarator\n transition(intcurrent,charc) "]
66118[label="formalParameterList\n intcurrent,charc "]
76119[label="formalParameter\n intcurrent "]
86120[label="integralType\n int "]
86121[label="variableDeclaratorId\n current "]
76122[label="formalParameter\n charc "]
86123[label="integralType\n char "]
86124[label="variableDeclaratorId\n c "]
46125[label="block\n {intb=current;intp;p=b+c+1;if(b==check[p])b=base[p];elsereturn-1;p=b;returnp;} "]
56126[label="blockStatements\n intb=current;intp;p=b+c+1;if(b==check[p])b=base[p];elsereturn-1;p=b;returnp; "]
66127[label="localVariableDeclarationStatement\n intb=current; "]
76128[label="localVariableDeclaration\n intb=current "]
86129[label="integralType\n int "]
86130[label="variableDeclarator\n b=current "]
96131[label="variableDeclaratorId\n b "]
96132[label="expressionName\n current "]
66133[label="localVariableDeclarationStatement\n intp; "]
76134[label="localVariableDeclaration\n intp "]
86135[label="integralType\n int "]
86136[label="variableDeclaratorId\n p "]
66137[label="expressionStatement\n p=b+c+1; "]
76138[label="assignment\n p=b+c+1 "]
86139[label="expressionName\n p "]
86140[label="assignmentOperator\n = "]
86141[label="additiveExpression\n b+c+1 "]
96142[label="additiveExpression\n b+c "]
106143[label="expressionName\n b "]
106144[label="expressionName\n c "]
96145[label="literal\n 1 "]
66146[label="ifThenElseStatement\n if(b==check[p])b=base[p];elsereturn-1; "]
76147[label="equalityExpression\n b==check[p] "]
86148[label="expressionName\n b "]
86149[label="arrayAccess_lfno_primary\n check[p] "]
96150[label="expressionName\n check "]
96151[label="expressionName\n p "]
76152[label="expressionStatement\n b=base[p]; "]
86153[label="assignment\n b=base[p] "]
96154[label="expressionName\n b "]
96155[label="assignmentOperator\n = "]
96156[label="arrayAccess_lfno_primary\n base[p] "]
106157[label="expressionName\n base "]
106158[label="expressionName\n p "]
76159[label="returnStatement\n return-1; "]
86160[label="unaryExpression\n -1 "]
96161[label="literal\n 1 "]
66162[label="expressionStatement\n p=b; "]
76163[label="assignment\n p=b "]
86164[label="expressionName\n p "]
86165[label="assignmentOperator\n = "]
86166[label="expressionName\n b "]
66167[label="returnStatement\n returnp; "]
76168[label="expressionName\n p "]
36169[label="methodDeclaration\n protectedinttransitionWithRoot(intnodePos,charc){intb=base[nodePos];intp;p=b+c+1;if(b!=check[p]){if(nodePos==0)return0;return-1;}returnp;} "]
46170[label="methodModifier\n protected "]
46171[label="methodHeader\n inttransitionWithRoot(intnodePos,charc) "]
56172[label="integralType\n int "]
56173[label="methodDeclarator\n transitionWithRoot(intnodePos,charc) "]
66174[label="formalParameterList\n intnodePos,charc "]
76175[label="formalParameter\n intnodePos "]
86176[label="integralType\n int "]
86177[label="variableDeclaratorId\n nodePos "]
76178[label="formalParameter\n charc "]
86179[label="integralType\n char "]
86180[label="variableDeclaratorId\n c "]
46181[label="block\n {intb=base[nodePos];intp;p=b+c+1;if(b!=check[p]){if(nodePos==0)return0;return-1;}returnp;} "]
56182[label="blockStatements\n intb=base[nodePos];intp;p=b+c+1;if(b!=check[p]){if(nodePos==0)return0;return-1;}returnp; "]
66183[label="localVariableDeclarationStatement\n intb=base[nodePos]; "]
76184[label="localVariableDeclaration\n intb=base[nodePos] "]
86185[label="integralType\n int "]
86186[label="variableDeclarator\n b=base[nodePos] "]
96187[label="variableDeclaratorId\n b "]
96188[label="arrayAccess_lfno_primary\n base[nodePos] "]
106189[label="expressionName\n base "]
106190[label="expressionName\n nodePos "]
66191[label="localVariableDeclarationStatement\n intp; "]
76192[label="localVariableDeclaration\n intp "]
86193[label="integralType\n int "]
86194[label="variableDeclaratorId\n p "]
66195[label="expressionStatement\n p=b+c+1; "]
76196[label="assignment\n p=b+c+1 "]
86197[label="expressionName\n p "]
86198[label="assignmentOperator\n = "]
86199[label="additiveExpression\n b+c+1 "]
96200[label="additiveExpression\n b+c "]
106201[label="expressionName\n b "]
106202[label="expressionName\n c "]
96203[label="literal\n 1 "]
66204[label="ifThenStatement\n if(b!=check[p]){if(nodePos==0)return0;return-1;} "]
76205[label="equalityExpression\n b!=check[p] "]
86206[label="expressionName\n b "]
86207[label="arrayAccess_lfno_primary\n check[p] "]
96208[label="expressionName\n check "]
96209[label="expressionName\n p "]
76210[label="block\n {if(nodePos==0)return0;return-1;} "]
86211[label="blockStatements\n if(nodePos==0)return0;return-1; "]
96212[label="ifThenStatement\n if(nodePos==0)return0; "]
106213[label="equalityExpression\n nodePos==0 "]
116214[label="expressionName\n nodePos "]
116215[label="literal\n 0 "]
106216[label="returnStatement\n return0; "]
116217[label="literal\n 0 "]
96218[label="returnStatement\n return-1; "]
106219[label="unaryExpression\n -1 "]
116220[label="literal\n 1 "]
66221[label="returnStatement\n returnp; "]
76222[label="expressionName\n p "]
36223[label="methodDeclaration\n publicvoidbuild(TreeMap<String,V>map){newBuilder().build(map);} "]
46224[label="methodModifier\n public "]
46225[label="methodHeader\n voidbuild(TreeMap<String,V>map) "]
56226[label="result\n void "]
56227[label="methodDeclarator\n build(TreeMap<String,V>map) "]
66228[label="formalParameter\n TreeMap<String,V>map "]
76229[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,V> "]
86230[label="typeArguments\n <String,V> "]
96231[label="typeArgumentList\n String,V "]
106232[label="classType_lfno_classOrInterfaceType\n String "]
106233[label="classType_lfno_classOrInterfaceType\n V "]
76234[label="variableDeclaratorId\n map "]
46235[label="block\n {newBuilder().build(map);} "]
56236[label="expressionStatement\n newBuilder().build(map); "]
66237[label="methodInvocation\n newBuilder().build(map) "]
76238[label="classInstanceCreationExpression_lfno_primary\n newBuilder() "]
76239[label="expressionName\n map "]
36240[label="methodDeclaration\n privateintfetch(Stateparent,List<Map.Entry<Integer,State>>siblings){if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));}for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));}returnsiblings.size();} "]
46241[label="methodModifier\n private "]
46242[label="methodHeader\n intfetch(Stateparent,List<Map.Entry<Integer,State>>siblings) "]
56243[label="integralType\n int "]
56244[label="methodDeclarator\n fetch(Stateparent,List<Map.Entry<Integer,State>>siblings) "]
66245[label="formalParameterList\n Stateparent,List<Map.Entry<Integer,State>>siblings "]
76246[label="formalParameter\n Stateparent "]
86247[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
86248[label="variableDeclaratorId\n parent "]
76249[label="formalParameter\n List<Map.Entry<Integer,State>>siblings "]
86250[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<Integer,State>> "]
96251[label="typeArguments\n <Map.Entry<Integer,State>> "]
106252[label="classOrInterfaceType\n Map.Entry<Integer,State> "]
116253[label="classType_lfno_classOrInterfaceType\n Map "]
116254[label="classType_lf_classOrInterfaceType\n .Entry<Integer,State> "]
126255[label="typeArguments\n <Integer,State> "]
136256[label="typeArgumentList\n Integer,State "]
146257[label="classType_lfno_classOrInterfaceType\n Integer "]
146258[label="classType_lfno_classOrInterfaceType\n State "]
86259[label="variableDeclaratorId\n siblings "]
46260[label="block\n {if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));}for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));}returnsiblings.size();} "]
56261[label="blockStatements\n if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));}for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));}returnsiblings.size(); "]
66262[label="ifThenStatement\n if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));} "]
76263[label="methodInvocation_lfno_primary\n parent.isAcceptable() "]
86264[label="typeName\n parent "]
76265[label="block\n {StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));} "]
86266[label="blockStatements\n StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode)); "]
96267[label="localVariableDeclarationStatement\n StatefakeNode=newState(-(parent.getDepth()+1)); "]
106268[label="localVariableDeclaration\n StatefakeNode=newState(-(parent.getDepth()+1)) "]
116269[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
116270[label="variableDeclarator\n fakeNode=newState(-(parent.getDepth()+1)) "]
126271[label="variableDeclaratorId\n fakeNode "]
126272[label="classInstanceCreationExpression_lfno_primary\n newState(-(parent.getDepth()+1)) "]
136273[label="unaryExpression\n -(parent.getDepth()+1) "]
146274[label="primaryNoNewArray_lfno_primary\n (parent.getDepth()+1) "]
156275[label="additiveExpression\n parent.getDepth()+1 "]
166276[label="methodInvocation_lfno_primary\n parent.getDepth() "]
176277[label="typeName\n parent "]
166278[label="literal\n 1 "]
96279[label="expressionStatement\n fakeNode.addEmit(parent.getLargestValueId()); "]
106280[label="methodInvocation\n fakeNode.addEmit(parent.getLargestValueId()) "]
116281[label="typeName\n fakeNode "]
116282[label="methodInvocation_lfno_primary\n parent.getLargestValueId() "]
126283[label="typeName\n parent "]
96284[label="expressionStatement\n siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode)); "]
106285[label="methodInvocation\n siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode)) "]
116286[label="typeName\n siblings "]
116287[label="classInstanceCreationExpression_lfno_primary\n newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode) "]
126288[label="typeArguments\n <Integer,State> "]
136289[label="typeArgumentList\n Integer,State "]
146290[label="classType_lfno_classOrInterfaceType\n Integer "]
146291[label="classType_lfno_classOrInterfaceType\n State "]
126292[label="argumentList\n 0,fakeNode "]
136293[label="literal\n 0 "]
136294[label="expressionName\n fakeNode "]
66295[label="enhancedForStatement\n for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));} "]
76296[label="unannClassOrInterfaceType\n Map.Entry<Character,State> "]
86297[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
86298[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<Character,State> "]
96299[label="typeArguments\n <Character,State> "]
106300[label="typeArgumentList\n Character,State "]
116301[label="classType_lfno_classOrInterfaceType\n Character "]
116302[label="classType_lfno_classOrInterfaceType\n State "]
76303[label="variableDeclaratorId\n entry "]
76304[label="primary\n parent.getSuccess().entrySet() "]
86305[label="methodInvocation_lfno_primary\n parent.getSuccess() "]
96306[label="typeName\n parent "]
86307[label="methodInvocation_lf_primary\n .entrySet() "]
76308[label="block\n {siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));} "]
86309[label="expressionStatement\n siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue())); "]
96310[label="methodInvocation\n siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue())) "]
106311[label="typeName\n siblings "]
106312[label="classInstanceCreationExpression_lfno_primary\n newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()) "]
116313[label="typeArguments\n <Integer,State> "]
126314[label="typeArgumentList\n Integer,State "]
136315[label="classType_lfno_classOrInterfaceType\n Integer "]
136316[label="classType_lfno_classOrInterfaceType\n State "]
116317[label="argumentList\n entry.getKey()+1,entry.getValue() "]
126318[label="additiveExpression\n entry.getKey()+1 "]
136319[label="methodInvocation_lfno_primary\n entry.getKey() "]
146320[label="typeName\n entry "]
136321[label="literal\n 1 "]
126322[label="methodInvocation_lfno_primary\n entry.getValue() "]
136323[label="typeName\n entry "]
66324[label="returnStatement\n returnsiblings.size(); "]
76325[label="methodInvocation_lfno_primary\n siblings.size() "]
86326[label="typeName\n siblings "]
36327[label="methodDeclaration\n publicintexactMatchSearch(Stringkey){returnexactMatchSearch(key,0,0,0);} "]
46328[label="methodModifier\n public "]
46329[label="methodHeader\n intexactMatchSearch(Stringkey) "]
56330[label="integralType\n int "]
56331[label="methodDeclarator\n exactMatchSearch(Stringkey) "]
66332[label="formalParameter\n Stringkey "]
76333[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
76334[label="variableDeclaratorId\n key "]
46335[label="block\n {returnexactMatchSearch(key,0,0,0);} "]
56336[label="returnStatement\n returnexactMatchSearch(key,0,0,0); "]
66337[label="methodInvocation_lfno_primary\n exactMatchSearch(key,0,0,0) "]
76338[label="methodName\n exactMatchSearch "]
76339[label="argumentList\n key,0,0,0 "]
86340[label="expressionName\n key "]
86341[label="literal\n 0 "]
86342[label="literal\n 0 "]
86343[label="literal\n 0 "]
36344[label="methodDeclaration\n privateintexactMatchSearch(Stringkey,intpos,intlen,intnodePos){if(len<=0)len=key.length();if(nodePos<=0)nodePos=0;intresult=-1;char[]keyChars=key.toCharArray();intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;} "]
46345[label="methodModifier\n private "]
46346[label="methodHeader\n intexactMatchSearch(Stringkey,intpos,intlen,intnodePos) "]
56347[label="integralType\n int "]
56348[label="methodDeclarator\n exactMatchSearch(Stringkey,intpos,intlen,intnodePos) "]
66349[label="formalParameterList\n Stringkey,intpos,intlen,intnodePos "]
76350[label="formalParameters\n Stringkey,intpos,intlen "]
86351[label="formalParameter\n Stringkey "]
96352[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
96353[label="variableDeclaratorId\n key "]
86354[label="formalParameter\n intpos "]
96355[label="integralType\n int "]
96356[label="variableDeclaratorId\n pos "]
86357[label="formalParameter\n intlen "]
96358[label="integralType\n int "]
96359[label="variableDeclaratorId\n len "]
76360[label="formalParameter\n intnodePos "]
86361[label="integralType\n int "]
86362[label="variableDeclaratorId\n nodePos "]
46363[label="block\n {if(len<=0)len=key.length();if(nodePos<=0)nodePos=0;intresult=-1;char[]keyChars=key.toCharArray();intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;} "]
56364[label="blockStatements\n if(len<=0)len=key.length();if(nodePos<=0)nodePos=0;intresult=-1;char[]keyChars=key.toCharArray();intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult; "]
66365[label="ifThenStatement\n if(len<=0)len=key.length(); "]
76366[label="relationalExpression\n len<=0 "]
86367[label="expressionName\n len "]
86368[label="literal\n 0 "]
76369[label="expressionStatement\n len=key.length(); "]
86370[label="assignment\n len=key.length() "]
96371[label="expressionName\n len "]
96372[label="assignmentOperator\n = "]
96373[label="methodInvocation_lfno_primary\n key.length() "]
106374[label="typeName\n key "]
66375[label="ifThenStatement\n if(nodePos<=0)nodePos=0; "]
76376[label="relationalExpression\n nodePos<=0 "]
86377[label="expressionName\n nodePos "]
86378[label="literal\n 0 "]
76379[label="expressionStatement\n nodePos=0; "]
86380[label="assignment\n nodePos=0 "]
96381[label="expressionName\n nodePos "]
96382[label="assignmentOperator\n = "]
96383[label="literal\n 0 "]
66384[label="localVariableDeclarationStatement\n intresult=-1; "]
76385[label="localVariableDeclaration\n intresult=-1 "]
86386[label="integralType\n int "]
86387[label="variableDeclarator\n result=-1 "]
96388[label="variableDeclaratorId\n result "]
96389[label="unaryExpression\n -1 "]
106390[label="literal\n 1 "]
66391[label="localVariableDeclarationStatement\n char[]keyChars=key.toCharArray(); "]
76392[label="localVariableDeclaration\n char[]keyChars=key.toCharArray() "]
86393[label="unannArrayType\n char[] "]
96394[label="integralType\n char "]
96395[label="dims\n [] "]
86396[label="variableDeclarator\n keyChars=key.toCharArray() "]
96397[label="variableDeclaratorId\n keyChars "]
96398[label="methodInvocation_lfno_primary\n key.toCharArray() "]
106399[label="typeName\n key "]
66400[label="localVariableDeclarationStatement\n intb=base[nodePos]; "]
76401[label="localVariableDeclaration\n intb=base[nodePos] "]
86402[label="integralType\n int "]
86403[label="variableDeclarator\n b=base[nodePos] "]
96404[label="variableDeclaratorId\n b "]
96405[label="arrayAccess_lfno_primary\n base[nodePos] "]
106406[label="expressionName\n base "]
106407[label="expressionName\n nodePos "]
66408[label="localVariableDeclarationStatement\n intp; "]
76409[label="localVariableDeclaration\n intp "]
86410[label="integralType\n int "]
86411[label="variableDeclaratorId\n p "]
66412[label="basicForStatement\n for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;} "]
76413[label="localVariableDeclaration\n inti=pos "]
86414[label="integralType\n int "]
86415[label="variableDeclarator\n i=pos "]
96416[label="variableDeclaratorId\n i "]
96417[label="expressionName\n pos "]
76418[label="relationalExpression\n i<len "]
86419[label="expressionName\n i "]
86420[label="expressionName\n len "]
76421[label="postIncrementExpression\n i++ "]
86422[label="expressionName\n i "]
76423[label="block\n {p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;} "]
86424[label="blockStatements\n p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult; "]
96425[label="expressionStatement\n p=b+(int)(keyChars[i])+1; "]
106426[label="assignment\n p=b+(int)(keyChars[i])+1 "]
116427[label="expressionName\n p "]
116428[label="assignmentOperator\n = "]
116429[label="additiveExpression\n b+(int)(keyChars[i])+1 "]
126430[label="additiveExpression\n b+(int)(keyChars[i]) "]
136431[label="expressionName\n b "]
136432[label="castExpression\n (int)(keyChars[i]) "]
146433[label="integralType\n int "]
146434[label="primaryNoNewArray_lfno_primary\n (keyChars[i]) "]
156435[label="arrayAccess_lfno_primary\n keyChars[i] "]
166436[label="expressionName\n keyChars "]
166437[label="expressionName\n i "]
126438[label="literal\n 1 "]
96439[label="ifThenElseStatement\n if(b==check[p])b=base[p];elsereturnresult; "]
106440[label="equalityExpression\n b==check[p] "]
116441[label="expressionName\n b "]
116442[label="arrayAccess_lfno_primary\n check[p] "]
126443[label="expressionName\n check "]
126444[label="expressionName\n p "]
106445[label="expressionStatement\n b=base[p]; "]
116446[label="assignment\n b=base[p] "]
126447[label="expressionName\n b "]
126448[label="assignmentOperator\n = "]
126449[label="arrayAccess_lfno_primary\n base[p] "]
136450[label="expressionName\n base "]
136451[label="expressionName\n p "]
106452[label="returnStatement\n returnresult; "]
116453[label="expressionName\n result "]
66454[label="expressionStatement\n p=b; "]
76455[label="assignment\n p=b "]
86456[label="expressionName\n p "]
86457[label="assignmentOperator\n = "]
86458[label="expressionName\n b "]
66459[label="localVariableDeclarationStatement\n intn=base[p]; "]
76460[label="localVariableDeclaration\n intn=base[p] "]
86461[label="integralType\n int "]
86462[label="variableDeclarator\n n=base[p] "]
96463[label="variableDeclaratorId\n n "]
96464[label="arrayAccess_lfno_primary\n base[p] "]
106465[label="expressionName\n base "]
106466[label="expressionName\n p "]
66467[label="ifThenStatement\n if(b==check[p]&&n<0){result=-n-1;} "]
76468[label="conditionalAndExpression\n b==check[p]&&n<0 "]
86469[label="equalityExpression\n b==check[p] "]
96470[label="expressionName\n b "]
96471[label="arrayAccess_lfno_primary\n check[p] "]
106472[label="expressionName\n check "]
106473[label="expressionName\n p "]
86474[label="relationalExpression\n n<0 "]
96475[label="expressionName\n n "]
96476[label="literal\n 0 "]
76477[label="block\n {result=-n-1;} "]
86478[label="expressionStatement\n result=-n-1; "]
96479[label="assignment\n result=-n-1 "]
106480[label="expressionName\n result "]
106481[label="assignmentOperator\n = "]
106482[label="additiveExpression\n -n-1 "]
116483[label="unaryExpression\n -n "]
126484[label="expressionName\n n "]
116485[label="literal\n 1 "]
66486[label="returnStatement\n returnresult; "]
76487[label="expressionName\n result "]
36488[label="methodDeclaration\n privateintexactMatchSearch(char[]keyChars,intpos,intlen,intnodePos){intresult=-1;intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;} "]
46489[label="methodModifier\n private "]
46490[label="methodHeader\n intexactMatchSearch(char[]keyChars,intpos,intlen,intnodePos) "]
56491[label="integralType\n int "]
56492[label="methodDeclarator\n exactMatchSearch(char[]keyChars,intpos,intlen,intnodePos) "]
66493[label="formalParameterList\n char[]keyChars,intpos,intlen,intnodePos "]
76494[label="formalParameters\n char[]keyChars,intpos,intlen "]
86495[label="formalParameter\n char[]keyChars "]
96496[label="unannArrayType\n char[] "]
106497[label="integralType\n char "]
106498[label="dims\n [] "]
96499[label="variableDeclaratorId\n keyChars "]
86500[label="formalParameter\n intpos "]
96501[label="integralType\n int "]
96502[label="variableDeclaratorId\n pos "]
86503[label="formalParameter\n intlen "]
96504[label="integralType\n int "]
96505[label="variableDeclaratorId\n len "]
76506[label="formalParameter\n intnodePos "]
86507[label="integralType\n int "]
86508[label="variableDeclaratorId\n nodePos "]
46509[label="block\n {intresult=-1;intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;} "]
56510[label="blockStatements\n intresult=-1;intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult; "]
66511[label="localVariableDeclarationStatement\n intresult=-1; "]
76512[label="localVariableDeclaration\n intresult=-1 "]
86513[label="integralType\n int "]
86514[label="variableDeclarator\n result=-1 "]
96515[label="variableDeclaratorId\n result "]
96516[label="unaryExpression\n -1 "]
106517[label="literal\n 1 "]
66518[label="localVariableDeclarationStatement\n intb=base[nodePos]; "]
76519[label="localVariableDeclaration\n intb=base[nodePos] "]
86520[label="integralType\n int "]
86521[label="variableDeclarator\n b=base[nodePos] "]
96522[label="variableDeclaratorId\n b "]
96523[label="arrayAccess_lfno_primary\n base[nodePos] "]
106524[label="expressionName\n base "]
106525[label="expressionName\n nodePos "]
66526[label="localVariableDeclarationStatement\n intp; "]
76527[label="localVariableDeclaration\n intp "]
86528[label="integralType\n int "]
86529[label="variableDeclaratorId\n p "]
66530[label="basicForStatement\n for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;} "]
76531[label="localVariableDeclaration\n inti=pos "]
86532[label="integralType\n int "]
86533[label="variableDeclarator\n i=pos "]
96534[label="variableDeclaratorId\n i "]
96535[label="expressionName\n pos "]
76536[label="relationalExpression\n i<len "]
86537[label="expressionName\n i "]
86538[label="expressionName\n len "]
76539[label="postIncrementExpression\n i++ "]
86540[label="expressionName\n i "]
76541[label="block\n {p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;} "]
86542[label="blockStatements\n p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult; "]
96543[label="expressionStatement\n p=b+(int)(keyChars[i])+1; "]
106544[label="assignment\n p=b+(int)(keyChars[i])+1 "]
116545[label="expressionName\n p "]
116546[label="assignmentOperator\n = "]
116547[label="additiveExpression\n b+(int)(keyChars[i])+1 "]
126548[label="additiveExpression\n b+(int)(keyChars[i]) "]
136549[label="expressionName\n b "]
136550[label="castExpression\n (int)(keyChars[i]) "]
146551[label="integralType\n int "]
146552[label="primaryNoNewArray_lfno_primary\n (keyChars[i]) "]
156553[label="arrayAccess_lfno_primary\n keyChars[i] "]
166554[label="expressionName\n keyChars "]
166555[label="expressionName\n i "]
126556[label="literal\n 1 "]
96557[label="ifThenElseStatement\n if(b==check[p])b=base[p];elsereturnresult; "]
106558[label="equalityExpression\n b==check[p] "]
116559[label="expressionName\n b "]
116560[label="arrayAccess_lfno_primary\n check[p] "]
126561[label="expressionName\n check "]
126562[label="expressionName\n p "]
106563[label="expressionStatement\n b=base[p]; "]
116564[label="assignment\n b=base[p] "]
126565[label="expressionName\n b "]
126566[label="assignmentOperator\n = "]
126567[label="arrayAccess_lfno_primary\n base[p] "]
136568[label="expressionName\n base "]
136569[label="expressionName\n p "]
106570[label="returnStatement\n returnresult; "]
116571[label="expressionName\n result "]
66572[label="expressionStatement\n p=b; "]
76573[label="assignment\n p=b "]
86574[label="expressionName\n p "]
86575[label="assignmentOperator\n = "]
86576[label="expressionName\n b "]
66577[label="localVariableDeclarationStatement\n intn=base[p]; "]
76578[label="localVariableDeclaration\n intn=base[p] "]
86579[label="integralType\n int "]
86580[label="variableDeclarator\n n=base[p] "]
96581[label="variableDeclaratorId\n n "]
96582[label="arrayAccess_lfno_primary\n base[p] "]
106583[label="expressionName\n base "]
106584[label="expressionName\n p "]
66585[label="ifThenStatement\n if(b==check[p]&&n<0){result=-n-1;} "]
76586[label="conditionalAndExpression\n b==check[p]&&n<0 "]
86587[label="equalityExpression\n b==check[p] "]
96588[label="expressionName\n b "]
96589[label="arrayAccess_lfno_primary\n check[p] "]
106590[label="expressionName\n check "]
106591[label="expressionName\n p "]
86592[label="relationalExpression\n n<0 "]
96593[label="expressionName\n n "]
96594[label="literal\n 0 "]
76595[label="block\n {result=-n-1;} "]
86596[label="expressionStatement\n result=-n-1; "]
96597[label="assignment\n result=-n-1 "]
106598[label="expressionName\n result "]
106599[label="assignmentOperator\n = "]
106600[label="additiveExpression\n -n-1 "]
116601[label="unaryExpression\n -n "]
126602[label="expressionName\n n "]
116603[label="literal\n 1 "]
66604[label="returnStatement\n returnresult; "]
76605[label="expressionName\n result "]
36606[label="normalClassDeclaration\n privatestaticclassDebugArray{Map<String,String>nameValueMap=newLinkedHashMap<String,String>();publicvoidadd(Stringname,intvalue){StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);}@OverridepublicStringtoString(){Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;}publicvoidprintln(){System.out.print(this);}} "]
46607[label="classModifier\n private "]
46608[label="classModifier\n static "]
46609[label="classBody\n {Map<String,String>nameValueMap=newLinkedHashMap<String,String>();publicvoidadd(Stringname,intvalue){StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);}@OverridepublicStringtoString(){Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;}publicvoidprintln(){System.out.print(this);}} "]
56610[label="fieldDeclaration\n Map<String,String>nameValueMap=newLinkedHashMap<String,String>(); "]
66611[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
76612[label="typeArguments\n <String,String> "]
86613[label="typeArgumentList\n String,String "]
96614[label="classType_lfno_classOrInterfaceType\n String "]
96615[label="classType_lfno_classOrInterfaceType\n String "]
66616[label="variableDeclarator\n nameValueMap=newLinkedHashMap<String,String>() "]
76617[label="variableDeclaratorId\n nameValueMap "]
76618[label="classInstanceCreationExpression_lfno_primary\n newLinkedHashMap<String,String>() "]
86619[label="typeArguments\n <String,String> "]
96620[label="typeArgumentList\n String,String "]
106621[label="classType_lfno_classOrInterfaceType\n String "]
106622[label="classType_lfno_classOrInterfaceType\n String "]
56623[label="methodDeclaration\n publicvoidadd(Stringname,intvalue){StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);} "]
66624[label="methodModifier\n public "]
66625[label="methodHeader\n voidadd(Stringname,intvalue) "]
76626[label="result\n void "]
76627[label="methodDeclarator\n add(Stringname,intvalue) "]
86628[label="formalParameterList\n Stringname,intvalue "]
96629[label="formalParameter\n Stringname "]
106630[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
106631[label="variableDeclaratorId\n name "]
96632[label="formalParameter\n intvalue "]
106633[label="integralType\n int "]
106634[label="variableDeclaratorId\n value "]
66635[label="block\n {StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);} "]
76636[label="blockStatements\n StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap); "]
86637[label="localVariableDeclarationStatement\n StringvalueInMap=nameValueMap.get(name); "]
96638[label="localVariableDeclaration\n StringvalueInMap=nameValueMap.get(name) "]
106639[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
106640[label="variableDeclarator\n valueInMap=nameValueMap.get(name) "]
116641[label="variableDeclaratorId\n valueInMap "]
116642[label="methodInvocation_lfno_primary\n nameValueMap.get(name) "]
126643[label="typeName\n nameValueMap "]
126644[label="expressionName\n name "]
86645[label="ifThenStatement\n if(valueInMap==null){valueInMap=\"\";} "]
96646[label="equalityExpression\n valueInMap==null "]
106647[label="expressionName\n valueInMap "]
106648[label="literal\n null "]
96649[label="block\n {valueInMap=\"\";} "]
106650[label="expressionStatement\n valueInMap=\"\"; "]
116651[label="assignment\n valueInMap=\"\" "]
126652[label="expressionName\n valueInMap "]
126653[label="assignmentOperator\n = "]
126654[label="literal\n \"\" "]
86655[label="expressionStatement\n valueInMap+=\" \"+String.format(\"%5d\",value); "]
96656[label="assignment\n valueInMap+=\" \"+String.format(\"%5d\",value) "]
106657[label="expressionName\n valueInMap "]
106658[label="assignmentOperator\n += "]
106659[label="additiveExpression\n \" \"+String.format(\"%5d\",value) "]
116660[label="literal\n \" \" "]
116661[label="methodInvocation_lfno_primary\n String.format(\"%5d\",value) "]
126662[label="typeName\n String "]
126663[label="argumentList\n \"%5d\",value "]
136664[label="literal\n \"%5d\" "]
136665[label="expressionName\n value "]
86666[label="expressionStatement\n nameValueMap.put(name,valueInMap); "]
96667[label="methodInvocation\n nameValueMap.put(name,valueInMap) "]
106668[label="typeName\n nameValueMap "]
106669[label="argumentList\n name,valueInMap "]
116670[label="expressionName\n name "]
116671[label="expressionName\n valueInMap "]
56672[label="methodDeclaration\n @OverridepublicStringtoString(){Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;} "]
66673[label="markerAnnotation\n @Override "]
76674[label="typeName\n Override "]
66675[label="methodModifier\n public "]
66676[label="methodHeader\n StringtoString() "]
76677[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
76678[label="methodDeclarator\n toString() "]
66679[label="block\n {Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;} "]
76680[label="blockStatements\n Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext; "]
86681[label="localVariableDeclarationStatement\n Stringtext=\"\"; "]
96682[label="localVariableDeclaration\n Stringtext=\"\" "]
106683[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
106684[label="variableDeclarator\n text=\"\" "]
116685[label="variableDeclaratorId\n text "]
116686[label="literal\n \"\" "]
86687[label="enhancedForStatement\n for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';} "]
96688[label="unannClassOrInterfaceType\n Map.Entry<String,String> "]
106689[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
106690[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String> "]
116691[label="typeArguments\n <String,String> "]
126692[label="typeArgumentList\n String,String "]
136693[label="classType_lfno_classOrInterfaceType\n String "]
136694[label="classType_lfno_classOrInterfaceType\n String "]
96695[label="variableDeclaratorId\n entry "]
96696[label="methodInvocation_lfno_primary\n nameValueMap.entrySet() "]
106697[label="typeName\n nameValueMap "]
96698[label="block\n {Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';} "]
106699[label="blockStatements\n Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n'; "]
116700[label="localVariableDeclarationStatement\n Stringname=entry.getKey(); "]
126701[label="localVariableDeclaration\n Stringname=entry.getKey() "]
136702[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
136703[label="variableDeclarator\n name=entry.getKey() "]
146704[label="variableDeclaratorId\n name "]
146705[label="methodInvocation_lfno_primary\n entry.getKey() "]
156706[label="typeName\n entry "]
116707[label="localVariableDeclarationStatement\n Stringvalue=entry.getValue(); "]
126708[label="localVariableDeclaration\n Stringvalue=entry.getValue() "]
136709[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
136710[label="variableDeclarator\n value=entry.getValue() "]
146711[label="variableDeclaratorId\n value "]
146712[label="methodInvocation_lfno_primary\n entry.getValue() "]
156713[label="typeName\n entry "]
116714[label="expressionStatement\n text+=String.format(\"%-5s\",name)+\"= \"+value+'\n'; "]
126715[label="assignment\n text+=String.format(\"%-5s\",name)+\"= \"+value+'\n' "]
136716[label="expressionName\n text "]
136717[label="assignmentOperator\n += "]
136718[label="additiveExpression\n String.format(\"%-5s\",name)+\"= \"+value+'\n' "]
146719[label="additiveExpression\n String.format(\"%-5s\",name)+\"= \"+value "]
156720[label="additiveExpression\n String.format(\"%-5s\",name)+\"= \" "]
166721[label="methodInvocation_lfno_primary\n String.format(\"%-5s\",name) "]
176722[label="typeName\n String "]
176723[label="argumentList\n \"%-5s\",name "]
186724[label="literal\n \"%-5s\" "]
186725[label="expressionName\n name "]
166726[label="literal\n \"= \" "]
156727[label="expressionName\n value "]
146728[label="literal\n '\n' "]
86729[label="returnStatement\n returntext; "]
96730[label="expressionName\n text "]
56731[label="methodDeclaration\n publicvoidprintln(){System.out.print(this);} "]
66732[label="methodModifier\n public "]
66733[label="methodHeader\n voidprintln() "]
76734[label="result\n void "]
76735[label="methodDeclarator\n println() "]
66736[label="block\n {System.out.print(this);} "]
76737[label="expressionStatement\n System.out.print(this); "]
86738[label="methodInvocation\n System.out.print(this) "]
96739[label="typeName\n System.out "]
106740[label="packageOrTypeName\n System "]
96741[label="primaryNoNewArray_lfno_primary\n this "]
36742[label="methodDeclaration\n publicintsize(){returnv==null?0:v.length;} "]
46743[label="methodModifier\n public "]
46744[label="methodHeader\n intsize() "]
56745[label="integralType\n int "]
56746[label="methodDeclarator\n size() "]
46747[label="block\n {returnv==null?0:v.length;} "]
56748[label="returnStatement\n returnv==null?0:v.length; "]
66749[label="conditionalExpression\n v==null?0:v.length "]
76750[label="equalityExpression\n v==null "]
86751[label="expressionName\n v "]
86752[label="literal\n null "]
76753[label="literal\n 0 "]
76754[label="expressionName\n v.length "]
86755[label="ambiguousName\n v "]
36756[label="normalClassDeclaration\n privateclassBuilder{privateStaterootState=newState();privatebooleanused[];privateintallocSize;privateintprogress;privateintnextCheckPos;privateintkeySize;@SuppressWarnings(\"unchecked\")publicvoidbuild(TreeMap<String,V>map){v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();}privatevoidaddKeyword(Stringkeyword,intindex){StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();}privatevoidaddAllKeyword(Collection<String>keywordSet){inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}}privatevoidconstructFailureStates(){fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}}privatevoidconstructOutput(StatetargetState){Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;}privatevoidbuildDoubleArrayTrie(Set<String>keySet){progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);}privateintresize(intnewSize){int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;}privateintinsert(List<Map.Entry<Integer,State>>siblings){intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;}privatevoidloseWeight(){intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;}} "]
46757[label="classModifier\n private "]
46758[label="classBody\n {privateStaterootState=newState();privatebooleanused[];privateintallocSize;privateintprogress;privateintnextCheckPos;privateintkeySize;@SuppressWarnings(\"unchecked\")publicvoidbuild(TreeMap<String,V>map){v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();}privatevoidaddKeyword(Stringkeyword,intindex){StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();}privatevoidaddAllKeyword(Collection<String>keywordSet){inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}}privatevoidconstructFailureStates(){fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}}privatevoidconstructOutput(StatetargetState){Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;}privatevoidbuildDoubleArrayTrie(Set<String>keySet){progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);}privateintresize(intnewSize){int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;}privateintinsert(List<Map.Entry<Integer,State>>siblings){intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;}privatevoidloseWeight(){intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;}} "]
56759[label="fieldDeclaration\n privateStaterootState=newState(); "]
66760[label="fieldModifier\n private "]
66761[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
66762[label="variableDeclarator\n rootState=newState() "]
76763[label="variableDeclaratorId\n rootState "]
76764[label="classInstanceCreationExpression_lfno_primary\n newState() "]
56765[label="fieldDeclaration\n privatebooleanused[]; "]
66766[label="fieldModifier\n private "]
66767[label="unannPrimitiveType\n boolean "]
66768[label="variableDeclaratorId\n used[] "]
76769[label="dims\n [] "]
56770[label="fieldDeclaration\n privateintallocSize; "]
66771[label="fieldModifier\n private "]
66772[label="integralType\n int "]
66773[label="variableDeclaratorId\n allocSize "]
56774[label="fieldDeclaration\n privateintprogress; "]
66775[label="fieldModifier\n private "]
66776[label="integralType\n int "]
66777[label="variableDeclaratorId\n progress "]
56778[label="fieldDeclaration\n privateintnextCheckPos; "]
66779[label="fieldModifier\n private "]
66780[label="integralType\n int "]
66781[label="variableDeclaratorId\n nextCheckPos "]
56782[label="fieldDeclaration\n privateintkeySize; "]
66783[label="fieldModifier\n private "]
66784[label="integralType\n int "]
66785[label="variableDeclaratorId\n keySize "]
56786[label="methodDeclaration\n @SuppressWarnings(\"unchecked\")publicvoidbuild(TreeMap<String,V>map){v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();} "]
66787[label="singleElementAnnotation\n @SuppressWarnings(\"unchecked\") "]
76788[label="typeName\n SuppressWarnings "]
76789[label="literal\n \"unchecked\" "]
66790[label="methodModifier\n public "]
66791[label="methodHeader\n voidbuild(TreeMap<String,V>map) "]
76792[label="result\n void "]
76793[label="methodDeclarator\n build(TreeMap<String,V>map) "]
86794[label="formalParameter\n TreeMap<String,V>map "]
96795[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,V> "]
106796[label="typeArguments\n <String,V> "]
116797[label="typeArgumentList\n String,V "]
126798[label="classType_lfno_classOrInterfaceType\n String "]
126799[label="classType_lfno_classOrInterfaceType\n V "]
96800[label="variableDeclaratorId\n map "]
66801[label="block\n {v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();} "]
76802[label="blockStatements\n v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight(); "]
86803[label="expressionStatement\n v=(V[])map.values().toArray(); "]
96804[label="assignment\n v=(V[])map.values().toArray() "]
106805[label="expressionName\n v "]
106806[label="assignmentOperator\n = "]
106807[label="castExpression\n (V[])map.values().toArray() "]
116808[label="arrayType\n V[] "]
126809[label="classType_lfno_classOrInterfaceType\n V "]
126810[label="dims\n [] "]
116811[label="primary\n map.values().toArray() "]
126812[label="methodInvocation_lfno_primary\n map.values() "]
136813[label="typeName\n map "]
126814[label="methodInvocation_lf_primary\n .toArray() "]
86815[label="expressionStatement\n l=newint[v.length]; "]
96816[label="assignment\n l=newint[v.length] "]
106817[label="expressionName\n l "]
106818[label="assignmentOperator\n = "]
106819[label="arrayCreationExpression\n newint[v.length] "]
116820[label="integralType\n int "]
116821[label="dimExpr\n [v.length] "]
126822[label="expressionName\n v.length "]
136823[label="ambiguousName\n v "]
86824[label="localVariableDeclarationStatement\n Set<String>keySet=map.keySet(); "]
96825[label="localVariableDeclaration\n Set<String>keySet=map.keySet() "]
106826[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
116827[label="typeArguments\n <String> "]
126828[label="classType_lfno_classOrInterfaceType\n String "]
106829[label="variableDeclarator\n keySet=map.keySet() "]
116830[label="variableDeclaratorId\n keySet "]
116831[label="methodInvocation_lfno_primary\n map.keySet() "]
126832[label="typeName\n map "]
86833[label="expressionStatement\n addAllKeyword(keySet); "]
96834[label="methodInvocation\n addAllKeyword(keySet) "]
106835[label="methodName\n addAllKeyword "]
106836[label="expressionName\n keySet "]
86837[label="expressionStatement\n buildDoubleArrayTrie(keySet); "]
96838[label="methodInvocation\n buildDoubleArrayTrie(keySet) "]
106839[label="methodName\n buildDoubleArrayTrie "]
106840[label="expressionName\n keySet "]
86841[label="expressionStatement\n used=null; "]
96842[label="assignment\n used=null "]
106843[label="expressionName\n used "]
106844[label="assignmentOperator\n = "]
106845[label="literal\n null "]
86846[label="expressionStatement\n constructFailureStates(); "]
96847[label="methodInvocation\n constructFailureStates() "]
106848[label="methodName\n constructFailureStates "]
86849[label="expressionStatement\n rootState=null; "]
96850[label="assignment\n rootState=null "]
106851[label="expressionName\n rootState "]
106852[label="assignmentOperator\n = "]
106853[label="literal\n null "]
86854[label="expressionStatement\n loseWeight(); "]
96855[label="methodInvocation\n loseWeight() "]
106856[label="methodName\n loseWeight "]
56857[label="methodDeclaration\n privatevoidaddKeyword(Stringkeyword,intindex){StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();} "]
66858[label="methodModifier\n private "]
66859[label="methodHeader\n voidaddKeyword(Stringkeyword,intindex) "]
76860[label="result\n void "]
76861[label="methodDeclarator\n addKeyword(Stringkeyword,intindex) "]
86862[label="formalParameterList\n Stringkeyword,intindex "]
96863[label="formalParameter\n Stringkeyword "]
106864[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
106865[label="variableDeclaratorId\n keyword "]
96866[label="formalParameter\n intindex "]
106867[label="integralType\n int "]
106868[label="variableDeclaratorId\n index "]
66869[label="block\n {StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();} "]
76870[label="blockStatements\n StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length(); "]
86871[label="localVariableDeclarationStatement\n StatecurrentState=this.rootState; "]
96872[label="localVariableDeclaration\n StatecurrentState=this.rootState "]
106873[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
106874[label="variableDeclarator\n currentState=this.rootState "]
116875[label="variableDeclaratorId\n currentState "]
116876[label="primary\n this.rootState "]
126877[label="primaryNoNewArray_lfno_primary\n this "]
126878[label="fieldAccess_lf_primary\n .rootState "]
86879[label="enhancedForStatement\n for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);} "]
96880[label="unannClassType_lfno_unannClassOrInterfaceType\n Character "]
96881[label="variableDeclaratorId\n character "]
96882[label="methodInvocation_lfno_primary\n keyword.toCharArray() "]
106883[label="typeName\n keyword "]
96884[label="block\n {currentState=currentState.addState(character);} "]
106885[label="expressionStatement\n currentState=currentState.addState(character); "]
116886[label="assignment\n currentState=currentState.addState(character) "]
126887[label="expressionName\n currentState "]
126888[label="assignmentOperator\n = "]
126889[label="methodInvocation_lfno_primary\n currentState.addState(character) "]
136890[label="typeName\n currentState "]
136891[label="expressionName\n character "]
86892[label="expressionStatement\n currentState.addEmit(index); "]
96893[label="methodInvocation\n currentState.addEmit(index) "]
106894[label="typeName\n currentState "]
106895[label="expressionName\n index "]
86896[label="expressionStatement\n l[index]=keyword.length(); "]
96897[label="assignment\n l[index]=keyword.length() "]
106898[label="arrayAccess\n l[index] "]
116899[label="expressionName\n l "]
116900[label="expressionName\n index "]
106901[label="assignmentOperator\n = "]
106902[label="methodInvocation_lfno_primary\n keyword.length() "]
116903[label="typeName\n keyword "]
56904[label="methodDeclaration\n privatevoidaddAllKeyword(Collection<String>keywordSet){inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}} "]
66905[label="methodModifier\n private "]
66906[label="methodHeader\n voidaddAllKeyword(Collection<String>keywordSet) "]
76907[label="result\n void "]
76908[label="methodDeclarator\n addAllKeyword(Collection<String>keywordSet) "]
86909[label="formalParameter\n Collection<String>keywordSet "]
96910[label="unannClassType_lfno_unannClassOrInterfaceType\n Collection<String> "]
106911[label="typeArguments\n <String> "]
116912[label="classType_lfno_classOrInterfaceType\n String "]
96913[label="variableDeclaratorId\n keywordSet "]
66914[label="block\n {inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}} "]
76915[label="blockStatements\n inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);} "]
86916[label="localVariableDeclarationStatement\n inti=0; "]
96917[label="localVariableDeclaration\n inti=0 "]
106918[label="integralType\n int "]
106919[label="variableDeclarator\n i=0 "]
116920[label="variableDeclaratorId\n i "]
116921[label="literal\n 0 "]
86922[label="enhancedForStatement\n for(Stringkeyword:keywordSet){addKeyword(keyword,i++);} "]
96923[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
96924[label="variableDeclaratorId\n keyword "]
96925[label="expressionName\n keywordSet "]
96926[label="block\n {addKeyword(keyword,i++);} "]
106927[label="expressionStatement\n addKeyword(keyword,i++); "]
116928[label="methodInvocation\n addKeyword(keyword,i++) "]
126929[label="methodName\n addKeyword "]
126930[label="argumentList\n keyword,i++ "]
136931[label="expressionName\n keyword "]
136932[label="postfixExpression\n i++ "]
146933[label="expressionName\n i "]
146934[label="postIncrementExpression_lf_postfixExpression\n ++ "]
56935[label="methodDeclaration\n privatevoidconstructFailureStates(){fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}} "]
66936[label="methodModifier\n private "]
66937[label="methodHeader\n voidconstructFailureStates() "]
76938[label="result\n void "]
76939[label="methodDeclarator\n constructFailureStates() "]
66940[label="block\n {fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}} "]
76941[label="blockStatements\n fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}} "]
86942[label="expressionStatement\n fail=newint[size+1]; "]
96943[label="assignment\n fail=newint[size+1] "]
106944[label="expressionName\n fail "]
106945[label="assignmentOperator\n = "]
106946[label="arrayCreationExpression\n newint[size+1] "]
116947[label="integralType\n int "]
116948[label="dimExpr\n [size+1] "]
126949[label="additiveExpression\n size+1 "]
136950[label="expressionName\n size "]
136951[label="literal\n 1 "]
86952[label="expressionStatement\n fail[1]=base[0]; "]
96953[label="assignment\n fail[1]=base[0] "]
106954[label="arrayAccess\n fail[1] "]
116955[label="expressionName\n fail "]
116956[label="literal\n 1 "]
106957[label="assignmentOperator\n = "]
106958[label="arrayAccess_lfno_primary\n base[0] "]
116959[label="expressionName\n base "]
116960[label="literal\n 0 "]
86961[label="expressionStatement\n output=newint[size+1][]; "]
96962[label="assignment\n output=newint[size+1][] "]
106963[label="expressionName\n output "]
106964[label="assignmentOperator\n = "]
106965[label="arrayCreationExpression\n newint[size+1][] "]
116966[label="integralType\n int "]
116967[label="dimExpr\n [size+1] "]
126968[label="additiveExpression\n size+1 "]
136969[label="expressionName\n size "]
136970[label="literal\n 1 "]
116971[label="dims\n [] "]
86972[label="localVariableDeclarationStatement\n Queue<State>queue=newLinkedBlockingDeque<State>(); "]
96973[label="localVariableDeclaration\n Queue<State>queue=newLinkedBlockingDeque<State>() "]
106974[label="unannClassType_lfno_unannClassOrInterfaceType\n Queue<State> "]
116975[label="typeArguments\n <State> "]
126976[label="classType_lfno_classOrInterfaceType\n State "]
106977[label="variableDeclarator\n queue=newLinkedBlockingDeque<State>() "]
116978[label="variableDeclaratorId\n queue "]
116979[label="classInstanceCreationExpression_lfno_primary\n newLinkedBlockingDeque<State>() "]
126980[label="typeArguments\n <State> "]
136981[label="classType_lfno_classOrInterfaceType\n State "]
86982[label="enhancedForStatement\n for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);} "]
96983[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
96984[label="variableDeclaratorId\n depthOneState "]
96985[label="primary\n this.rootState.getStates() "]
106986[label="primaryNoNewArray_lfno_primary\n this "]
106987[label="fieldAccess_lf_primary\n .rootState "]
106988[label="methodInvocation_lf_primary\n .getStates() "]
96989[label="block\n {depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);} "]
106990[label="blockStatements\n depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState); "]
116991[label="expressionStatement\n depthOneState.setFailure(this.rootState,fail); "]
126992[label="methodInvocation\n depthOneState.setFailure(this.rootState,fail) "]
136993[label="typeName\n depthOneState "]
136994[label="argumentList\n this.rootState,fail "]
146995[label="primary\n this.rootState "]
156996[label="primaryNoNewArray_lfno_primary\n this "]
156997[label="fieldAccess_lf_primary\n .rootState "]
146998[label="expressionName\n fail "]
116999[label="expressionStatement\n queue.add(depthOneState); "]
127000[label="methodInvocation\n queue.add(depthOneState) "]
137001[label="typeName\n queue "]
137002[label="expressionName\n depthOneState "]
117003[label="expressionStatement\n constructOutput(depthOneState); "]
127004[label="methodInvocation\n constructOutput(depthOneState) "]
137005[label="methodName\n constructOutput "]
137006[label="expressionName\n depthOneState "]
87007[label="whileStatement\n while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}} "]
97008[label="unaryExpressionNotPlusMinus\n !queue.isEmpty() "]
107009[label="methodInvocation_lfno_primary\n queue.isEmpty() "]
117010[label="typeName\n queue "]
97011[label="block\n {StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}} "]
107012[label="blockStatements\n StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);} "]
117013[label="localVariableDeclarationStatement\n StatecurrentState=queue.remove(); "]
127014[label="localVariableDeclaration\n StatecurrentState=queue.remove() "]
137015[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
137016[label="variableDeclarator\n currentState=queue.remove() "]
147017[label="variableDeclaratorId\n currentState "]
147018[label="methodInvocation_lfno_primary\n queue.remove() "]
157019[label="typeName\n queue "]
117020[label="enhancedForStatement\n for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);} "]
127021[label="unannClassType_lfno_unannClassOrInterfaceType\n Character "]
127022[label="variableDeclaratorId\n transition "]
127023[label="methodInvocation_lfno_primary\n currentState.getTransitions() "]
137024[label="typeName\n currentState "]
127025[label="block\n {StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);} "]
137026[label="blockStatements\n StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState); "]
147027[label="localVariableDeclarationStatement\n StatetargetState=currentState.nextState(transition); "]
157028[label="localVariableDeclaration\n StatetargetState=currentState.nextState(transition) "]
167029[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
167030[label="variableDeclarator\n targetState=currentState.nextState(transition) "]
177031[label="variableDeclaratorId\n targetState "]
177032[label="methodInvocation_lfno_primary\n currentState.nextState(transition) "]
187033[label="typeName\n currentState "]
187034[label="expressionName\n transition "]
147035[label="expressionStatement\n queue.add(targetState); "]
157036[label="methodInvocation\n queue.add(targetState) "]
167037[label="typeName\n queue "]
167038[label="expressionName\n targetState "]
147039[label="localVariableDeclarationStatement\n StatetraceFailureState=currentState.failure(); "]
157040[label="localVariableDeclaration\n StatetraceFailureState=currentState.failure() "]
167041[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
167042[label="variableDeclarator\n traceFailureState=currentState.failure() "]
177043[label="variableDeclaratorId\n traceFailureState "]
177044[label="methodInvocation_lfno_primary\n currentState.failure() "]
187045[label="typeName\n currentState "]
147046[label="whileStatement\n while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();} "]
157047[label="equalityExpression\n traceFailureState.nextState(transition)==null "]
167048[label="methodInvocation_lfno_primary\n traceFailureState.nextState(transition) "]
177049[label="typeName\n traceFailureState "]
177050[label="expressionName\n transition "]
167051[label="literal\n null "]
157052[label="block\n {traceFailureState=traceFailureState.failure();} "]
167053[label="expressionStatement\n traceFailureState=traceFailureState.failure(); "]
177054[label="assignment\n traceFailureState=traceFailureState.failure() "]
187055[label="expressionName\n traceFailureState "]
187056[label="assignmentOperator\n = "]
187057[label="methodInvocation_lfno_primary\n traceFailureState.failure() "]
197058[label="typeName\n traceFailureState "]
147059[label="localVariableDeclarationStatement\n StatenewFailureState=traceFailureState.nextState(transition); "]
157060[label="localVariableDeclaration\n StatenewFailureState=traceFailureState.nextState(transition) "]
167061[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
167062[label="variableDeclarator\n newFailureState=traceFailureState.nextState(transition) "]
177063[label="variableDeclaratorId\n newFailureState "]
177064[label="methodInvocation_lfno_primary\n traceFailureState.nextState(transition) "]
187065[label="typeName\n traceFailureState "]
187066[label="expressionName\n transition "]
147067[label="expressionStatement\n targetState.setFailure(newFailureState,fail); "]
157068[label="methodInvocation\n targetState.setFailure(newFailureState,fail) "]
167069[label="typeName\n targetState "]
167070[label="argumentList\n newFailureState,fail "]
177071[label="expressionName\n newFailureState "]
177072[label="expressionName\n fail "]
147073[label="expressionStatement\n targetState.addEmit(newFailureState.emit()); "]
157074[label="methodInvocation\n targetState.addEmit(newFailureState.emit()) "]
167075[label="typeName\n targetState "]
167076[label="methodInvocation_lfno_primary\n newFailureState.emit() "]
177077[label="typeName\n newFailureState "]
147078[label="expressionStatement\n constructOutput(targetState); "]
157079[label="methodInvocation\n constructOutput(targetState) "]
167080[label="methodName\n constructOutput "]
167081[label="expressionName\n targetState "]
57082[label="methodDeclaration\n privatevoidconstructOutput(StatetargetState){Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;} "]
67083[label="methodModifier\n private "]
67084[label="methodHeader\n voidconstructOutput(StatetargetState) "]
77085[label="result\n void "]
77086[label="methodDeclarator\n constructOutput(StatetargetState) "]
87087[label="formalParameter\n StatetargetState "]
97088[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
97089[label="variableDeclaratorId\n targetState "]
67090[label="block\n {Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;} "]
77091[label="blockStatements\n Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output; "]
87092[label="localVariableDeclarationStatement\n Collection<Integer>emit=targetState.emit(); "]
97093[label="localVariableDeclaration\n Collection<Integer>emit=targetState.emit() "]
107094[label="unannClassType_lfno_unannClassOrInterfaceType\n Collection<Integer> "]
117095[label="typeArguments\n <Integer> "]
127096[label="classType_lfno_classOrInterfaceType\n Integer "]
107097[label="variableDeclarator\n emit=targetState.emit() "]
117098[label="variableDeclaratorId\n emit "]
117099[label="methodInvocation_lfno_primary\n targetState.emit() "]
127100[label="typeName\n targetState "]
87101[label="ifThenStatement\n if(emit==null||emit.size()==0)return; "]
97102[label="conditionalOrExpression\n emit==null||emit.size()==0 "]
107103[label="equalityExpression\n emit==null "]
117104[label="expressionName\n emit "]
117105[label="literal\n null "]
107106[label="equalityExpression\n emit.size()==0 "]
117107[label="methodInvocation_lfno_primary\n emit.size() "]
127108[label="typeName\n emit "]
117109[label="literal\n 0 "]
97110[label="returnStatement\n return; "]
87111[label="localVariableDeclarationStatement\n intoutput[]=newint[emit.size()]; "]
97112[label="localVariableDeclaration\n intoutput[]=newint[emit.size()] "]
107113[label="integralType\n int "]
107114[label="variableDeclarator\n output[]=newint[emit.size()] "]
117115[label="variableDeclaratorId\n output[] "]
127116[label="dims\n [] "]
117117[label="arrayCreationExpression\n newint[emit.size()] "]
127118[label="integralType\n int "]
127119[label="dimExpr\n [emit.size()] "]
137120[label="methodInvocation_lfno_primary\n emit.size() "]
147121[label="typeName\n emit "]
87122[label="localVariableDeclarationStatement\n Iterator<Integer>it=emit.iterator(); "]
97123[label="localVariableDeclaration\n Iterator<Integer>it=emit.iterator() "]
107124[label="unannClassType_lfno_unannClassOrInterfaceType\n Iterator<Integer> "]
117125[label="typeArguments\n <Integer> "]
127126[label="classType_lfno_classOrInterfaceType\n Integer "]
107127[label="variableDeclarator\n it=emit.iterator() "]
117128[label="variableDeclaratorId\n it "]
117129[label="methodInvocation_lfno_primary\n emit.iterator() "]
127130[label="typeName\n emit "]
87131[label="basicForStatement\n for(inti=0;i<output.length;++i){output[i]=it.next();} "]
97132[label="localVariableDeclaration\n inti=0 "]
107133[label="integralType\n int "]
107134[label="variableDeclarator\n i=0 "]
117135[label="variableDeclaratorId\n i "]
117136[label="literal\n 0 "]
97137[label="relationalExpression\n i<output.length "]
107138[label="expressionName\n i "]
107139[label="expressionName\n output.length "]
117140[label="ambiguousName\n output "]
97141[label="preIncrementExpression\n ++i "]
107142[label="expressionName\n i "]
97143[label="block\n {output[i]=it.next();} "]
107144[label="expressionStatement\n output[i]=it.next(); "]
117145[label="assignment\n output[i]=it.next() "]
127146[label="arrayAccess\n output[i] "]
137147[label="expressionName\n output "]
137148[label="expressionName\n i "]
127149[label="assignmentOperator\n = "]
127150[label="methodInvocation_lfno_primary\n it.next() "]
137151[label="typeName\n it "]
87152[label="expressionStatement\n AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output; "]
97153[label="assignment\n AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output "]
107154[label="arrayAccess\n AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()] "]
117155[label="fieldAccess\n AhoCorasickDoubleArrayTrie.this.output "]
127156[label="primaryNoNewArray_lfno_primary\n AhoCorasickDoubleArrayTrie.this "]
137157[label="typeName\n AhoCorasickDoubleArrayTrie "]
117158[label="methodInvocation_lfno_primary\n targetState.getIndex() "]
127159[label="typeName\n targetState "]
107160[label="assignmentOperator\n = "]
107161[label="expressionName\n output "]
57162[label="methodDeclaration\n privatevoidbuildDoubleArrayTrie(Set<String>keySet){progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);} "]
67163[label="methodModifier\n private "]
67164[label="methodHeader\n voidbuildDoubleArrayTrie(Set<String>keySet) "]
77165[label="result\n void "]
77166[label="methodDeclarator\n buildDoubleArrayTrie(Set<String>keySet) "]
87167[label="formalParameter\n Set<String>keySet "]
97168[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
107169[label="typeArguments\n <String> "]
117170[label="classType_lfno_classOrInterfaceType\n String "]
97171[label="variableDeclaratorId\n keySet "]
67172[label="block\n {progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);} "]
77173[label="blockStatements\n progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings); "]
87174[label="expressionStatement\n progress=0; "]
97175[label="assignment\n progress=0 "]
107176[label="expressionName\n progress "]
107177[label="assignmentOperator\n = "]
107178[label="literal\n 0 "]
87179[label="expressionStatement\n keySize=keySet.size(); "]
97180[label="assignment\n keySize=keySet.size() "]
107181[label="expressionName\n keySize "]
107182[label="assignmentOperator\n = "]
107183[label="methodInvocation_lfno_primary\n keySet.size() "]
117184[label="typeName\n keySet "]
87185[label="expressionStatement\n resize(65536*32); "]
97186[label="methodInvocation\n resize(65536*32) "]
107187[label="methodName\n resize "]
107188[label="multiplicativeExpression\n 65536*32 "]
117189[label="literal\n 65536 "]
117190[label="literal\n 32 "]
87191[label="expressionStatement\n base[0]=1; "]
97192[label="assignment\n base[0]=1 "]
107193[label="arrayAccess\n base[0] "]
117194[label="expressionName\n base "]
117195[label="literal\n 0 "]
107196[label="assignmentOperator\n = "]
107197[label="literal\n 1 "]
87198[label="expressionStatement\n nextCheckPos=0; "]
97199[label="assignment\n nextCheckPos=0 "]
107200[label="expressionName\n nextCheckPos "]
107201[label="assignmentOperator\n = "]
107202[label="literal\n 0 "]
87203[label="localVariableDeclarationStatement\n Stateroot_node=this.rootState; "]
97204[label="localVariableDeclaration\n Stateroot_node=this.rootState "]
107205[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
107206[label="variableDeclarator\n root_node=this.rootState "]
117207[label="variableDeclaratorId\n root_node "]
117208[label="primary\n this.rootState "]
127209[label="primaryNoNewArray_lfno_primary\n this "]
127210[label="fieldAccess_lf_primary\n .rootState "]
87211[label="localVariableDeclarationStatement\n List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size()); "]
97212[label="localVariableDeclaration\n List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size()) "]
107213[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<Integer,State>> "]
117214[label="typeArguments\n <Map.Entry<Integer,State>> "]
127215[label="classOrInterfaceType\n Map.Entry<Integer,State> "]
137216[label="classType_lfno_classOrInterfaceType\n Map "]
137217[label="classType_lf_classOrInterfaceType\n .Entry<Integer,State> "]
147218[label="typeArguments\n <Integer,State> "]
157219[label="typeArgumentList\n Integer,State "]
167220[label="classType_lfno_classOrInterfaceType\n Integer "]
167221[label="classType_lfno_classOrInterfaceType\n State "]
107222[label="variableDeclarator\n siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size()) "]
117223[label="variableDeclaratorId\n siblings "]
117224[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size()) "]
127225[label="typeArguments\n <Map.Entry<Integer,State>> "]
137226[label="classOrInterfaceType\n Map.Entry<Integer,State> "]
147227[label="classType_lfno_classOrInterfaceType\n Map "]
147228[label="classType_lf_classOrInterfaceType\n .Entry<Integer,State> "]
157229[label="typeArguments\n <Integer,State> "]
167230[label="typeArgumentList\n Integer,State "]
177231[label="classType_lfno_classOrInterfaceType\n Integer "]
177232[label="classType_lfno_classOrInterfaceType\n State "]
127233[label="primary\n root_node.getSuccess().entrySet().size() "]
137234[label="methodInvocation_lfno_primary\n root_node.getSuccess() "]
147235[label="typeName\n root_node "]
137236[label="methodInvocation_lf_primary\n .entrySet() "]
137237[label="methodInvocation_lf_primary\n .size() "]
87238[label="expressionStatement\n fetch(root_node,siblings); "]
97239[label="methodInvocation\n fetch(root_node,siblings) "]
107240[label="methodName\n fetch "]
107241[label="argumentList\n root_node,siblings "]
117242[label="expressionName\n root_node "]
117243[label="expressionName\n siblings "]
87244[label="expressionStatement\n insert(siblings); "]
97245[label="methodInvocation\n insert(siblings) "]
107246[label="methodName\n insert "]
107247[label="expressionName\n siblings "]
57248[label="methodDeclaration\n privateintresize(intnewSize){int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;} "]
67249[label="methodModifier\n private "]
67250[label="methodHeader\n intresize(intnewSize) "]
77251[label="integralType\n int "]
77252[label="methodDeclarator\n resize(intnewSize) "]
87253[label="formalParameter\n intnewSize "]
97254[label="integralType\n int "]
97255[label="variableDeclaratorId\n newSize "]
67256[label="block\n {int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;} "]
77257[label="blockStatements\n int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize; "]
87258[label="localVariableDeclarationStatement\n int[]base2=newint[newSize]; "]
97259[label="localVariableDeclaration\n int[]base2=newint[newSize] "]
107260[label="unannArrayType\n int[] "]
117261[label="integralType\n int "]
117262[label="dims\n [] "]
107263[label="variableDeclarator\n base2=newint[newSize] "]
117264[label="variableDeclaratorId\n base2 "]
117265[label="arrayCreationExpression\n newint[newSize] "]
127266[label="integralType\n int "]
127267[label="dimExpr\n [newSize] "]
137268[label="expressionName\n newSize "]
87269[label="localVariableDeclarationStatement\n int[]check2=newint[newSize]; "]
97270[label="localVariableDeclaration\n int[]check2=newint[newSize] "]
107271[label="unannArrayType\n int[] "]
117272[label="integralType\n int "]
117273[label="dims\n [] "]
107274[label="variableDeclarator\n check2=newint[newSize] "]
117275[label="variableDeclaratorId\n check2 "]
117276[label="arrayCreationExpression\n newint[newSize] "]
127277[label="integralType\n int "]
127278[label="dimExpr\n [newSize] "]
137279[label="expressionName\n newSize "]
87280[label="localVariableDeclarationStatement\n booleanused2[]=newboolean[newSize]; "]
97281[label="localVariableDeclaration\n booleanused2[]=newboolean[newSize] "]
107282[label="unannPrimitiveType\n boolean "]
107283[label="variableDeclarator\n used2[]=newboolean[newSize] "]
117284[label="variableDeclaratorId\n used2[] "]
127285[label="dims\n [] "]
117286[label="arrayCreationExpression\n newboolean[newSize] "]
127287[label="primitiveType\n boolean "]
127288[label="dimExpr\n [newSize] "]
137289[label="expressionName\n newSize "]
87290[label="ifThenStatement\n if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);} "]
97291[label="relationalExpression\n allocSize>0 "]
107292[label="expressionName\n allocSize "]
107293[label="literal\n 0 "]
97294[label="block\n {System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);} "]
107295[label="blockStatements\n System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize); "]
117296[label="expressionStatement\n System.arraycopy(base,0,base2,0,allocSize); "]
127297[label="methodInvocation\n System.arraycopy(base,0,base2,0,allocSize) "]
137298[label="typeName\n System "]
137299[label="argumentList\n base,0,base2,0,allocSize "]
147300[label="expressionName\n base "]
147301[label="literal\n 0 "]
147302[label="expressionName\n base2 "]
147303[label="literal\n 0 "]
147304[label="expressionName\n allocSize "]
117305[label="expressionStatement\n System.arraycopy(check,0,check2,0,allocSize); "]
127306[label="methodInvocation\n System.arraycopy(check,0,check2,0,allocSize) "]
137307[label="typeName\n System "]
137308[label="argumentList\n check,0,check2,0,allocSize "]
147309[label="expressionName\n check "]
147310[label="literal\n 0 "]
147311[label="expressionName\n check2 "]
147312[label="literal\n 0 "]
147313[label="expressionName\n allocSize "]
117314[label="expressionStatement\n System.arraycopy(used,0,used2,0,allocSize); "]
127315[label="methodInvocation\n System.arraycopy(used,0,used2,0,allocSize) "]
137316[label="typeName\n System "]
137317[label="argumentList\n used,0,used2,0,allocSize "]
147318[label="expressionName\n used "]
147319[label="literal\n 0 "]
147320[label="expressionName\n used2 "]
147321[label="literal\n 0 "]
147322[label="expressionName\n allocSize "]
87323[label="expressionStatement\n base=base2; "]
97324[label="assignment\n base=base2 "]
107325[label="expressionName\n base "]
107326[label="assignmentOperator\n = "]
107327[label="expressionName\n base2 "]
87328[label="expressionStatement\n check=check2; "]
97329[label="assignment\n check=check2 "]
107330[label="expressionName\n check "]
107331[label="assignmentOperator\n = "]
107332[label="expressionName\n check2 "]
87333[label="expressionStatement\n used=used2; "]
97334[label="assignment\n used=used2 "]
107335[label="expressionName\n used "]
107336[label="assignmentOperator\n = "]
107337[label="expressionName\n used2 "]
87338[label="returnStatement\n returnallocSize=newSize; "]
97339[label="assignment\n allocSize=newSize "]
107340[label="expressionName\n allocSize "]
107341[label="assignmentOperator\n = "]
107342[label="expressionName\n newSize "]
57343[label="methodDeclaration\n privateintinsert(List<Map.Entry<Integer,State>>siblings){intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;} "]
67344[label="methodModifier\n private "]
67345[label="methodHeader\n intinsert(List<Map.Entry<Integer,State>>siblings) "]
77346[label="integralType\n int "]
77347[label="methodDeclarator\n insert(List<Map.Entry<Integer,State>>siblings) "]
87348[label="formalParameter\n List<Map.Entry<Integer,State>>siblings "]
97349[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<Integer,State>> "]
107350[label="typeArguments\n <Map.Entry<Integer,State>> "]
117351[label="classOrInterfaceType\n Map.Entry<Integer,State> "]
127352[label="classType_lfno_classOrInterfaceType\n Map "]
127353[label="classType_lf_classOrInterfaceType\n .Entry<Integer,State> "]
137354[label="typeArguments\n <Integer,State> "]
147355[label="typeArgumentList\n Integer,State "]
157356[label="classType_lfno_classOrInterfaceType\n Integer "]
157357[label="classType_lfno_classOrInterfaceType\n State "]
97358[label="variableDeclaratorId\n siblings "]
67359[label="block\n {intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;} "]
77360[label="blockStatements\n intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin; "]
87361[label="localVariableDeclarationStatement\n intbegin=0; "]
97362[label="localVariableDeclaration\n intbegin=0 "]
107363[label="integralType\n int "]
107364[label="variableDeclarator\n begin=0 "]
117365[label="variableDeclaratorId\n begin "]
117366[label="literal\n 0 "]
87367[label="localVariableDeclarationStatement\n intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1; "]
97368[label="localVariableDeclaration\n intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1 "]
107369[label="integralType\n int "]
107370[label="variableDeclarator\n pos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1 "]
117371[label="variableDeclaratorId\n pos "]
117372[label="additiveExpression\n Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1 "]
127373[label="methodInvocation_lfno_primary\n Math.max(siblings.get(0).getKey()+1,nextCheckPos) "]
137374[label="typeName\n Math "]
137375[label="argumentList\n siblings.get(0).getKey()+1,nextCheckPos "]
147376[label="additiveExpression\n siblings.get(0).getKey()+1 "]
157377[label="primary\n siblings.get(0).getKey() "]
167378[label="methodInvocation_lfno_primary\n siblings.get(0) "]
177379[label="typeName\n siblings "]
177380[label="literal\n 0 "]
167381[label="methodInvocation_lf_primary\n .getKey() "]
157382[label="literal\n 1 "]
147383[label="expressionName\n nextCheckPos "]
127384[label="literal\n 1 "]
87385[label="localVariableDeclarationStatement\n intnonzero_num=0; "]
97386[label="localVariableDeclaration\n intnonzero_num=0 "]
107387[label="integralType\n int "]
107388[label="variableDeclarator\n nonzero_num=0 "]
117389[label="variableDeclaratorId\n nonzero_num "]
117390[label="literal\n 0 "]
87391[label="localVariableDeclarationStatement\n intfirst=0; "]
97392[label="localVariableDeclaration\n intfirst=0 "]
107393[label="integralType\n int "]
107394[label="variableDeclarator\n first=0 "]
117395[label="variableDeclaratorId\n first "]
117396[label="literal\n 0 "]
87397[label="ifThenStatement\n if(allocSize<=pos)resize(pos+1); "]
97398[label="relationalExpression\n allocSize<=pos "]
107399[label="expressionName\n allocSize "]
107400[label="expressionName\n pos "]
97401[label="expressionStatement\n resize(pos+1); "]
107402[label="methodInvocation\n resize(pos+1) "]
117403[label="methodName\n resize "]
117404[label="additiveExpression\n pos+1 "]
127405[label="expressionName\n pos "]
127406[label="literal\n 1 "]
87407[label="labeledStatement\n outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;} "]
97408[label="whileStatement\n while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;} "]
107409[label="literal\n true "]
107410[label="block\n {pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;} "]
117411[label="blockStatements\n pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break; "]
127412[label="expressionStatement\n pos++; "]
137413[label="postIncrementExpression\n pos++ "]
147414[label="expressionName\n pos "]
127415[label="ifThenStatement\n if(allocSize<=pos)resize(pos+1); "]
137416[label="relationalExpression\n allocSize<=pos "]
147417[label="expressionName\n allocSize "]
147418[label="expressionName\n pos "]
137419[label="expressionStatement\n resize(pos+1); "]
147420[label="methodInvocation\n resize(pos+1) "]
157421[label="methodName\n resize "]
157422[label="additiveExpression\n pos+1 "]
167423[label="expressionName\n pos "]
167424[label="literal\n 1 "]
127425[label="ifThenElseStatement\n if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;} "]
137426[label="equalityExpression\n check[pos]!=0 "]
147427[label="arrayAccess_lfno_primary\n check[pos] "]
157428[label="expressionName\n check "]
157429[label="expressionName\n pos "]
147430[label="literal\n 0 "]
137431[label="block\n {nonzero_num++;continue;} "]
147432[label="blockStatements\n nonzero_num++;continue; "]
157433[label="expressionStatement\n nonzero_num++; "]
167434[label="postIncrementExpression\n nonzero_num++ "]
177435[label="expressionName\n nonzero_num "]
157436[label="continueStatement\n continue; "]
137437[label="ifThenStatement\n if(first==0){nextCheckPos=pos;first=1;} "]
147438[label="equalityExpression\n first==0 "]
157439[label="expressionName\n first "]
157440[label="literal\n 0 "]
147441[label="block\n {nextCheckPos=pos;first=1;} "]
157442[label="blockStatements\n nextCheckPos=pos;first=1; "]
167443[label="expressionStatement\n nextCheckPos=pos; "]
177444[label="assignment\n nextCheckPos=pos "]
187445[label="expressionName\n nextCheckPos "]
187446[label="assignmentOperator\n = "]
187447[label="expressionName\n pos "]
167448[label="expressionStatement\n first=1; "]
177449[label="assignment\n first=1 "]
187450[label="expressionName\n first "]
187451[label="assignmentOperator\n = "]
187452[label="literal\n 1 "]
127453[label="expressionStatement\n begin=pos-siblings.get(0).getKey(); "]
137454[label="assignment\n begin=pos-siblings.get(0).getKey() "]
147455[label="expressionName\n begin "]
147456[label="assignmentOperator\n = "]
147457[label="additiveExpression\n pos-siblings.get(0).getKey() "]
157458[label="expressionName\n pos "]
157459[label="primary\n siblings.get(0).getKey() "]
167460[label="methodInvocation_lfno_primary\n siblings.get(0) "]
177461[label="typeName\n siblings "]
177462[label="literal\n 0 "]
167463[label="methodInvocation_lf_primary\n .getKey() "]
127464[label="ifThenStatement\n if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));} "]
137465[label="relationalExpression\n allocSize<=(begin+siblings.get(siblings.size()-1).getKey()) "]
147466[label="expressionName\n allocSize "]
147467[label="primaryNoNewArray_lfno_primary\n (begin+siblings.get(siblings.size()-1).getKey()) "]
157468[label="additiveExpression\n begin+siblings.get(siblings.size()-1).getKey() "]
167469[label="expressionName\n begin "]
167470[label="primary\n siblings.get(siblings.size()-1).getKey() "]
177471[label="methodInvocation_lfno_primary\n siblings.get(siblings.size()-1) "]
187472[label="typeName\n siblings "]
187473[label="additiveExpression\n siblings.size()-1 "]
197474[label="methodInvocation_lfno_primary\n siblings.size() "]
207475[label="typeName\n siblings "]
197476[label="literal\n 1 "]
177477[label="methodInvocation_lf_primary\n .getKey() "]
137478[label="block\n {doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));} "]
147479[label="blockStatements\n doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l)); "]
157480[label="localVariableDeclarationStatement\n doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1); "]
167481[label="localVariableDeclaration\n doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1) "]
177482[label="floatingPointType\n double "]
177483[label="variableDeclarator\n l=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1) "]
187484[label="variableDeclaratorId\n l "]
187485[label="conditionalExpression\n (1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1) "]
197486[label="primaryNoNewArray_lfno_primary\n (1.05>1.0*keySize/(progress+1)) "]
207487[label="relationalExpression\n 1.05>1.0*keySize/(progress+1) "]
217488[label="literal\n 1.05 "]
217489[label="multiplicativeExpression\n 1.0*keySize/(progress+1) "]
227490[label="multiplicativeExpression\n 1.0*keySize "]
237491[label="literal\n 1.0 "]
237492[label="expressionName\n keySize "]
227493[label="primaryNoNewArray_lfno_primary\n (progress+1) "]
237494[label="additiveExpression\n progress+1 "]
247495[label="expressionName\n progress "]
247496[label="literal\n 1 "]
197497[label="literal\n 1.05 "]
197498[label="multiplicativeExpression\n 1.0*keySize/(progress+1) "]
207499[label="multiplicativeExpression\n 1.0*keySize "]
217500[label="literal\n 1.0 "]
217501[label="expressionName\n keySize "]
207502[label="primaryNoNewArray_lfno_primary\n (progress+1) "]
217503[label="additiveExpression\n progress+1 "]
227504[label="expressionName\n progress "]
227505[label="literal\n 1 "]
157506[label="expressionStatement\n resize((int)(allocSize*l)); "]
167507[label="methodInvocation\n resize((int)(allocSize*l)) "]
177508[label="methodName\n resize "]
177509[label="castExpression\n (int)(allocSize*l) "]
187510[label="integralType\n int "]
187511[label="primaryNoNewArray_lfno_primary\n (allocSize*l) "]
197512[label="multiplicativeExpression\n allocSize*l "]
207513[label="expressionName\n allocSize "]
207514[label="expressionName\n l "]
127515[label="ifThenStatement\n if(used[begin])continue; "]
137516[label="arrayAccess_lfno_primary\n used[begin] "]
147517[label="expressionName\n used "]
147518[label="expressionName\n begin "]
137519[label="continueStatement\n continue; "]
127520[label="basicForStatement\n for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter; "]
137521[label="localVariableDeclaration\n inti=1 "]
147522[label="integralType\n int "]
147523[label="variableDeclarator\n i=1 "]
157524[label="variableDeclaratorId\n i "]
157525[label="literal\n 1 "]
137526[label="relationalExpression\n i<siblings.size() "]
147527[label="expressionName\n i "]
147528[label="methodInvocation_lfno_primary\n siblings.size() "]
157529[label="typeName\n siblings "]
137530[label="postIncrementExpression\n i++ "]
147531[label="expressionName\n i "]
137532[label="ifThenStatement\n if(check[begin+siblings.get(i).getKey()]!=0)continueouter; "]
147533[label="equalityExpression\n check[begin+siblings.get(i).getKey()]!=0 "]
157534[label="arrayAccess_lfno_primary\n check[begin+siblings.get(i).getKey()] "]
167535[label="expressionName\n check "]
167536[label="additiveExpression\n begin+siblings.get(i).getKey() "]
177537[label="expressionName\n begin "]
177538[label="primary\n siblings.get(i).getKey() "]
187539[label="methodInvocation_lfno_primary\n siblings.get(i) "]
197540[label="typeName\n siblings "]
197541[label="expressionName\n i "]
187542[label="methodInvocation_lf_primary\n .getKey() "]
157543[label="literal\n 0 "]
147544[label="continueStatement\n continueouter; "]
127545[label="breakStatement\n break; "]
87546[label="ifThenStatement\n if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos; "]
97547[label="relationalExpression\n 1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95 "]
107548[label="multiplicativeExpression\n 1.0*nonzero_num/(pos-nextCheckPos+1) "]
117549[label="multiplicativeExpression\n 1.0*nonzero_num "]
127550[label="literal\n 1.0 "]
127551[label="expressionName\n nonzero_num "]
117552[label="primaryNoNewArray_lfno_primary\n (pos-nextCheckPos+1) "]
127553[label="additiveExpression\n pos-nextCheckPos+1 "]
137554[label="additiveExpression\n pos-nextCheckPos "]
147555[label="expressionName\n pos "]
147556[label="expressionName\n nextCheckPos "]
137557[label="literal\n 1 "]
107558[label="literal\n 0.95 "]
97559[label="expressionStatement\n nextCheckPos=pos; "]
107560[label="assignment\n nextCheckPos=pos "]
117561[label="expressionName\n nextCheckPos "]
117562[label="assignmentOperator\n = "]
117563[label="expressionName\n pos "]
87564[label="expressionStatement\n used[begin]=true; "]
97565[label="assignment\n used[begin]=true "]
107566[label="arrayAccess\n used[begin] "]
117567[label="expressionName\n used "]
117568[label="expressionName\n begin "]
107569[label="assignmentOperator\n = "]
107570[label="literal\n true "]
87571[label="expressionStatement\n size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1; "]
97572[label="assignment\n size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1 "]
107573[label="expressionName\n size "]
107574[label="assignmentOperator\n = "]
107575[label="conditionalExpression\n (size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1 "]
117576[label="primaryNoNewArray_lfno_primary\n (size>begin+siblings.get(siblings.size()-1).getKey()+1) "]
127577[label="relationalExpression\n size>begin+siblings.get(siblings.size()-1).getKey()+1 "]
137578[label="expressionName\n size "]
137579[label="additiveExpression\n begin+siblings.get(siblings.size()-1).getKey()+1 "]
147580[label="additiveExpression\n begin+siblings.get(siblings.size()-1).getKey() "]
157581[label="expressionName\n begin "]
157582[label="primary\n siblings.get(siblings.size()-1).getKey() "]
167583[label="methodInvocation_lfno_primary\n siblings.get(siblings.size()-1) "]
177584[label="typeName\n siblings "]
177585[label="additiveExpression\n siblings.size()-1 "]
187586[label="methodInvocation_lfno_primary\n siblings.size() "]
197587[label="typeName\n siblings "]
187588[label="literal\n 1 "]
167589[label="methodInvocation_lf_primary\n .getKey() "]
147590[label="literal\n 1 "]
117591[label="expressionName\n size "]
117592[label="additiveExpression\n begin+siblings.get(siblings.size()-1).getKey()+1 "]
127593[label="additiveExpression\n begin+siblings.get(siblings.size()-1).getKey() "]
137594[label="expressionName\n begin "]
137595[label="primary\n siblings.get(siblings.size()-1).getKey() "]
147596[label="methodInvocation_lfno_primary\n siblings.get(siblings.size()-1) "]
157597[label="typeName\n siblings "]
157598[label="additiveExpression\n siblings.size()-1 "]
167599[label="methodInvocation_lfno_primary\n siblings.size() "]
177600[label="typeName\n siblings "]
167601[label="literal\n 1 "]
147602[label="methodInvocation_lf_primary\n .getKey() "]
127603[label="literal\n 1 "]
87604[label="enhancedForStatement\n for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;} "]
97605[label="unannClassOrInterfaceType\n Map.Entry<Integer,State> "]
107606[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
107607[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<Integer,State> "]
117608[label="typeArguments\n <Integer,State> "]
127609[label="typeArgumentList\n Integer,State "]
137610[label="classType_lfno_classOrInterfaceType\n Integer "]
137611[label="classType_lfno_classOrInterfaceType\n State "]
97612[label="variableDeclaratorId\n sibling "]
97613[label="expressionName\n siblings "]
97614[label="block\n {check[begin+sibling.getKey()]=begin;} "]
107615[label="expressionStatement\n check[begin+sibling.getKey()]=begin; "]
117616[label="assignment\n check[begin+sibling.getKey()]=begin "]
127617[label="arrayAccess\n check[begin+sibling.getKey()] "]
137618[label="expressionName\n check "]
137619[label="additiveExpression\n begin+sibling.getKey() "]
147620[label="expressionName\n begin "]
147621[label="methodInvocation_lfno_primary\n sibling.getKey() "]
157622[label="typeName\n sibling "]
127623[label="assignmentOperator\n = "]
127624[label="expressionName\n begin "]
87625[label="enhancedForStatement\n for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());} "]
97626[label="unannClassOrInterfaceType\n Map.Entry<Integer,State> "]
107627[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
107628[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<Integer,State> "]
117629[label="typeArguments\n <Integer,State> "]
127630[label="typeArgumentList\n Integer,State "]
137631[label="classType_lfno_classOrInterfaceType\n Integer "]
137632[label="classType_lfno_classOrInterfaceType\n State "]
97633[label="variableDeclaratorId\n sibling "]
97634[label="expressionName\n siblings "]
97635[label="block\n {List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());} "]
107636[label="blockStatements\n List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey()); "]
117637[label="localVariableDeclarationStatement\n List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1); "]
127638[label="localVariableDeclaration\n List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1) "]
137639[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<Integer,State>> "]
147640[label="typeArguments\n <Map.Entry<Integer,State>> "]
157641[label="classOrInterfaceType\n Map.Entry<Integer,State> "]
167642[label="classType_lfno_classOrInterfaceType\n Map "]
167643[label="classType_lf_classOrInterfaceType\n .Entry<Integer,State> "]
177644[label="typeArguments\n <Integer,State> "]
187645[label="typeArgumentList\n Integer,State "]
197646[label="classType_lfno_classOrInterfaceType\n Integer "]
197647[label="classType_lfno_classOrInterfaceType\n State "]
137648[label="variableDeclarator\n new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1) "]
147649[label="variableDeclaratorId\n new_siblings "]
147650[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1) "]
157651[label="typeArguments\n <Map.Entry<Integer,State>> "]
167652[label="classOrInterfaceType\n Map.Entry<Integer,State> "]
177653[label="classType_lfno_classOrInterfaceType\n Map "]
177654[label="classType_lf_classOrInterfaceType\n .Entry<Integer,State> "]
187655[label="typeArguments\n <Integer,State> "]
197656[label="typeArgumentList\n Integer,State "]
207657[label="classType_lfno_classOrInterfaceType\n Integer "]
207658[label="classType_lfno_classOrInterfaceType\n State "]
157659[label="additiveExpression\n sibling.getValue().getSuccess().entrySet().size()+1 "]
167660[label="primary\n sibling.getValue().getSuccess().entrySet().size() "]
177661[label="methodInvocation_lfno_primary\n sibling.getValue() "]
187662[label="typeName\n sibling "]
177663[label="methodInvocation_lf_primary\n .getSuccess() "]
177664[label="methodInvocation_lf_primary\n .entrySet() "]
177665[label="methodInvocation_lf_primary\n .size() "]
167666[label="literal\n 1 "]
117667[label="ifThenElseStatement\n if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;} "]
127668[label="equalityExpression\n fetch(sibling.getValue(),new_siblings)==0 "]
137669[label="methodInvocation_lfno_primary\n fetch(sibling.getValue(),new_siblings) "]
147670[label="methodName\n fetch "]
147671[label="argumentList\n sibling.getValue(),new_siblings "]
157672[label="methodInvocation_lfno_primary\n sibling.getValue() "]
167673[label="typeName\n sibling "]
157674[label="expressionName\n new_siblings "]
137675[label="literal\n 0 "]
127676[label="block\n {base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;} "]
137677[label="blockStatements\n base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++; "]
147678[label="expressionStatement\n base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1); "]
157679[label="assignment\n base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1) "]
167680[label="arrayAccess\n base[begin+sibling.getKey()] "]
177681[label="expressionName\n base "]
177682[label="additiveExpression\n begin+sibling.getKey() "]
187683[label="expressionName\n begin "]
187684[label="methodInvocation_lfno_primary\n sibling.getKey() "]
197685[label="typeName\n sibling "]
167686[label="assignmentOperator\n = "]
167687[label="primaryNoNewArray_lfno_primary\n (-sibling.getValue().getLargestValueId()-1) "]
177688[label="additiveExpression\n -sibling.getValue().getLargestValueId()-1 "]
187689[label="unaryExpression\n -sibling.getValue().getLargestValueId() "]
197690[label="primary\n sibling.getValue().getLargestValueId() "]
207691[label="methodInvocation_lfno_primary\n sibling.getValue() "]
217692[label="typeName\n sibling "]
207693[label="methodInvocation_lf_primary\n .getLargestValueId() "]
187694[label="literal\n 1 "]
147695[label="expressionStatement\n progress++; "]
157696[label="postIncrementExpression\n progress++ "]
167697[label="expressionName\n progress "]
127698[label="block\n {inth=insert(new_siblings);base[begin+sibling.getKey()]=h;} "]
137699[label="blockStatements\n inth=insert(new_siblings);base[begin+sibling.getKey()]=h; "]
147700[label="localVariableDeclarationStatement\n inth=insert(new_siblings); "]
157701[label="localVariableDeclaration\n inth=insert(new_siblings) "]
167702[label="integralType\n int "]
167703[label="variableDeclarator\n h=insert(new_siblings) "]
177704[label="variableDeclaratorId\n h "]
177705[label="methodInvocation_lfno_primary\n insert(new_siblings) "]
187706[label="methodName\n insert "]
187707[label="expressionName\n new_siblings "]
147708[label="expressionStatement\n base[begin+sibling.getKey()]=h; "]
157709[label="assignment\n base[begin+sibling.getKey()]=h "]
167710[label="arrayAccess\n base[begin+sibling.getKey()] "]
177711[label="expressionName\n base "]
177712[label="additiveExpression\n begin+sibling.getKey() "]
187713[label="expressionName\n begin "]
187714[label="methodInvocation_lfno_primary\n sibling.getKey() "]
197715[label="typeName\n sibling "]
167716[label="assignmentOperator\n = "]
167717[label="expressionName\n h "]
117718[label="expressionStatement\n sibling.getValue().setIndex(begin+sibling.getKey()); "]
127719[label="methodInvocation\n sibling.getValue().setIndex(begin+sibling.getKey()) "]
137720[label="methodInvocation_lfno_primary\n sibling.getValue() "]
147721[label="typeName\n sibling "]
137722[label="additiveExpression\n begin+sibling.getKey() "]
147723[label="expressionName\n begin "]
147724[label="methodInvocation_lfno_primary\n sibling.getKey() "]
157725[label="typeName\n sibling "]
87726[label="returnStatement\n returnbegin; "]
97727[label="expressionName\n begin "]
57728[label="methodDeclaration\n privatevoidloseWeight(){intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;} "]
67729[label="methodModifier\n private "]
67730[label="methodHeader\n voidloseWeight() "]
77731[label="result\n void "]
77732[label="methodDeclarator\n loseWeight() "]
67733[label="block\n {intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;} "]
77734[label="blockStatements\n intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck; "]
87735[label="localVariableDeclarationStatement\n intnbase[]=newint[size+65535]; "]
97736[label="localVariableDeclaration\n intnbase[]=newint[size+65535] "]
107737[label="integralType\n int "]
107738[label="variableDeclarator\n nbase[]=newint[size+65535] "]
117739[label="variableDeclaratorId\n nbase[] "]
127740[label="dims\n [] "]
117741[label="arrayCreationExpression\n newint[size+65535] "]
127742[label="integralType\n int "]
127743[label="dimExpr\n [size+65535] "]
137744[label="additiveExpression\n size+65535 "]
147745[label="expressionName\n size "]
147746[label="literal\n 65535 "]
87747[label="expressionStatement\n System.arraycopy(base,0,nbase,0,size); "]
97748[label="methodInvocation\n System.arraycopy(base,0,nbase,0,size) "]
107749[label="typeName\n System "]
107750[label="argumentList\n base,0,nbase,0,size "]
117751[label="expressionName\n base "]
117752[label="literal\n 0 "]
117753[label="expressionName\n nbase "]
117754[label="literal\n 0 "]
117755[label="expressionName\n size "]
87756[label="expressionStatement\n base=nbase; "]
97757[label="assignment\n base=nbase "]
107758[label="expressionName\n base "]
107759[label="assignmentOperator\n = "]
107760[label="expressionName\n nbase "]
87761[label="localVariableDeclarationStatement\n intncheck[]=newint[size+65535]; "]
97762[label="localVariableDeclaration\n intncheck[]=newint[size+65535] "]
107763[label="integralType\n int "]
107764[label="variableDeclarator\n ncheck[]=newint[size+65535] "]
117765[label="variableDeclaratorId\n ncheck[] "]
127766[label="dims\n [] "]
117767[label="arrayCreationExpression\n newint[size+65535] "]
127768[label="integralType\n int "]
127769[label="dimExpr\n [size+65535] "]
137770[label="additiveExpression\n size+65535 "]
147771[label="expressionName\n size "]
147772[label="literal\n 65535 "]
87773[label="expressionStatement\n System.arraycopy(check,0,ncheck,0,size); "]
97774[label="methodInvocation\n System.arraycopy(check,0,ncheck,0,size) "]
107775[label="typeName\n System "]
107776[label="argumentList\n check,0,ncheck,0,size "]
117777[label="expressionName\n check "]
117778[label="literal\n 0 "]
117779[label="expressionName\n ncheck "]
117780[label="literal\n 0 "]
117781[label="expressionName\n size "]
87782[label="expressionStatement\n check=ncheck; "]
97783[label="assignment\n check=ncheck "]
107784[label="expressionName\n check "]
107785[label="assignmentOperator\n = "]
107786[label="expressionName\n ncheck "]
07787[label="compilationUnit\n packagecom.hankcs.hanlp.seg.Other;importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie;importcom.hankcs.hanlp.corpus.io.IOUtil;importcom.hankcs.hanlp.corpus.tag.Nature;importcom.hankcs.hanlp.dictionary.CoreDictionary;importcom.hankcs.hanlp.seg.DictionaryBasedSegment;importcom.hankcs.hanlp.seg.NShort.Path.AtomNode;importcom.hankcs.hanlp.seg.Segment;importcom.hankcs.hanlp.seg.common.Term;importcom.hankcs.hanlp.utility.TextUtility;importstaticcom.hankcs.hanlp.utility.Predefine.logger;importjava.io.IOException;importjava.util.*;publicclassAhoCorasickDoubleArrayTrieSegmentextendsDictionaryBasedSegment{AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie;@OverrideprotectedList<Term>segSentence(char[]sentence){if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();}finalint[]wordNet=newint[sentence.length];Arrays.fill(wordNet,1);finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null;trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}});LinkedList<Term>termList=newLinkedList<Term>();if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}}for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];}returntermList;}publicAhoCorasickDoubleArrayTrieSegment(){super();config.useCustomDictionary=false;config.speechTagging=true;}publicAhoCorasickDoubleArrayTrieSegment(TreeMap<String,CoreDictionary.Attribute>dictionary){this();trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();trie.build(dictionary);setTrie(trie);}@OverridepublicSegmentenableCustomDictionary(booleanenable){thrownewUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\");}publicAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>getTrie(){returntrie;}publicvoidsetTrie(AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie){this.trie=trie;}publicAhoCorasickDoubleArrayTrieSegmentloadDictionary(String...pathArray){trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();TreeMap<String,CoreDictionary.Attribute>map=null;try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;}if(map!=null&&!map.isEmpty()){trie.build(map);}returnthis;}}<EOF> "]
17788[label="packageDeclaration\n packagecom.hankcs.hanlp.seg.Other; "]
27789[label="packageName\n com.hankcs.hanlp.seg.Other "]
37790[label="packageName\n com.hankcs.hanlp.seg "]
47791[label="packageName\n com.hankcs.hanlp "]
57792[label="packageName\n com.hankcs "]
67793[label="packageName\n com "]
17794[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie; "]
27795[label="typeName\n com.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie "]
37796[label="packageOrTypeName\n com.hankcs.hanlp.collection.AhoCorasick "]
47797[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
57798[label="packageOrTypeName\n com.hankcs.hanlp "]
67799[label="packageOrTypeName\n com.hankcs "]
77800[label="packageOrTypeName\n com "]
17801[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
27802[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
37803[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
47804[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
57805[label="packageOrTypeName\n com.hankcs.hanlp "]
67806[label="packageOrTypeName\n com.hankcs "]
77807[label="packageOrTypeName\n com "]
17808[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.tag.Nature; "]
27809[label="typeName\n com.hankcs.hanlp.corpus.tag.Nature "]
37810[label="packageOrTypeName\n com.hankcs.hanlp.corpus.tag "]
47811[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
57812[label="packageOrTypeName\n com.hankcs.hanlp "]
67813[label="packageOrTypeName\n com.hankcs "]
77814[label="packageOrTypeName\n com "]
17815[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dictionary.CoreDictionary; "]
27816[label="typeName\n com.hankcs.hanlp.dictionary.CoreDictionary "]
37817[label="packageOrTypeName\n com.hankcs.hanlp.dictionary "]
47818[label="packageOrTypeName\n com.hankcs.hanlp "]
57819[label="packageOrTypeName\n com.hankcs "]
67820[label="packageOrTypeName\n com "]
17821[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.DictionaryBasedSegment; "]
27822[label="typeName\n com.hankcs.hanlp.seg.DictionaryBasedSegment "]
37823[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
47824[label="packageOrTypeName\n com.hankcs.hanlp "]
57825[label="packageOrTypeName\n com.hankcs "]
67826[label="packageOrTypeName\n com "]
17827[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.NShort.Path.AtomNode; "]
27828[label="typeName\n com.hankcs.hanlp.seg.NShort.Path.AtomNode "]
37829[label="packageOrTypeName\n com.hankcs.hanlp.seg.NShort.Path "]
47830[label="packageOrTypeName\n com.hankcs.hanlp.seg.NShort "]
57831[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
67832[label="packageOrTypeName\n com.hankcs.hanlp "]
77833[label="packageOrTypeName\n com.hankcs "]
87834[label="packageOrTypeName\n com "]
17835[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.Segment; "]
27836[label="typeName\n com.hankcs.hanlp.seg.Segment "]
37837[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
47838[label="packageOrTypeName\n com.hankcs.hanlp "]
57839[label="packageOrTypeName\n com.hankcs "]
67840[label="packageOrTypeName\n com "]
17841[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.common.Term; "]
27842[label="typeName\n com.hankcs.hanlp.seg.common.Term "]
37843[label="packageOrTypeName\n com.hankcs.hanlp.seg.common "]
47844[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
57845[label="packageOrTypeName\n com.hankcs.hanlp "]
67846[label="packageOrTypeName\n com.hankcs "]
77847[label="packageOrTypeName\n com "]
17848[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.TextUtility; "]
27849[label="typeName\n com.hankcs.hanlp.utility.TextUtility "]
37850[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
47851[label="packageOrTypeName\n com.hankcs.hanlp "]
57852[label="packageOrTypeName\n com.hankcs "]
67853[label="packageOrTypeName\n com "]
17854[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.utility.Predefine.logger; "]
27855[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
37856[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
47857[label="packageOrTypeName\n com.hankcs.hanlp "]
57858[label="packageOrTypeName\n com.hankcs "]
67859[label="packageOrTypeName\n com "]
17860[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
27861[label="typeName\n java.io.IOException "]
37862[label="packageOrTypeName\n java.io "]
47863[label="packageOrTypeName\n java "]
17864[label="typeImportOnDemandDeclaration\n importjava.util.*; "]
27865[label="packageOrTypeName\n java.util "]
37866[label="packageOrTypeName\n java "]
17867[label="normalClassDeclaration\n publicclassAhoCorasickDoubleArrayTrieSegmentextendsDictionaryBasedSegment{AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie;@OverrideprotectedList<Term>segSentence(char[]sentence){if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();}finalint[]wordNet=newint[sentence.length];Arrays.fill(wordNet,1);finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null;trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}});LinkedList<Term>termList=newLinkedList<Term>();if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}}for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];}returntermList;}publicAhoCorasickDoubleArrayTrieSegment(){super();config.useCustomDictionary=false;config.speechTagging=true;}publicAhoCorasickDoubleArrayTrieSegment(TreeMap<String,CoreDictionary.Attribute>dictionary){this();trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();trie.build(dictionary);setTrie(trie);}@OverridepublicSegmentenableCustomDictionary(booleanenable){thrownewUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\");}publicAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>getTrie(){returntrie;}publicvoidsetTrie(AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie){this.trie=trie;}publicAhoCorasickDoubleArrayTrieSegmentloadDictionary(String...pathArray){trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();TreeMap<String,CoreDictionary.Attribute>map=null;try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;}if(map!=null&&!map.isEmpty()){trie.build(map);}returnthis;}} "]
27868[label="classModifier\n public "]
27869[label="superclass\n extendsDictionaryBasedSegment "]
37870[label="classType\n DictionaryBasedSegment "]
27871[label="classBody\n {AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie;@OverrideprotectedList<Term>segSentence(char[]sentence){if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();}finalint[]wordNet=newint[sentence.length];Arrays.fill(wordNet,1);finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null;trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}});LinkedList<Term>termList=newLinkedList<Term>();if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}}for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];}returntermList;}publicAhoCorasickDoubleArrayTrieSegment(){super();config.useCustomDictionary=false;config.speechTagging=true;}publicAhoCorasickDoubleArrayTrieSegment(TreeMap<String,CoreDictionary.Attribute>dictionary){this();trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();trie.build(dictionary);setTrie(trie);}@OverridepublicSegmentenableCustomDictionary(booleanenable){thrownewUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\");}publicAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>getTrie(){returntrie;}publicvoidsetTrie(AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie){this.trie=trie;}publicAhoCorasickDoubleArrayTrieSegmentloadDictionary(String...pathArray){trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();TreeMap<String,CoreDictionary.Attribute>map=null;try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;}if(map!=null&&!map.isEmpty()){trie.build(map);}returnthis;}} "]
37872[label="fieldDeclaration\n AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie; "]
47873[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute> "]
57874[label="typeArguments\n <CoreDictionary.Attribute> "]
67875[label="classOrInterfaceType\n CoreDictionary.Attribute "]
77876[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
77877[label="classType_lf_classOrInterfaceType\n .Attribute "]
47878[label="variableDeclaratorId\n trie "]
37879[label="methodDeclaration\n @OverrideprotectedList<Term>segSentence(char[]sentence){if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();}finalint[]wordNet=newint[sentence.length];Arrays.fill(wordNet,1);finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null;trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}});LinkedList<Term>termList=newLinkedList<Term>();if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}}for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];}returntermList;} "]
47880[label="markerAnnotation\n @Override "]
57881[label="typeName\n Override "]
47882[label="methodModifier\n protected "]
47883[label="methodHeader\n List<Term>segSentence(char[]sentence) "]
57884[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Term> "]
67885[label="typeArguments\n <Term> "]
77886[label="classType_lfno_classOrInterfaceType\n Term "]
57887[label="methodDeclarator\n segSentence(char[]sentence) "]
67888[label="formalParameter\n char[]sentence "]
77889[label="unannArrayType\n char[] "]
87890[label="integralType\n char "]
87891[label="dims\n [] "]
77892[label="variableDeclaratorId\n sentence "]
47893[label="block\n {if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();}finalint[]wordNet=newint[sentence.length];Arrays.fill(wordNet,1);finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null;trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}});LinkedList<Term>termList=newLinkedList<Term>();if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}}for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];}returntermList;} "]
57894[label="blockStatements\n if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();}finalint[]wordNet=newint[sentence.length];Arrays.fill(wordNet,1);finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null;trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}});LinkedList<Term>termList=newLinkedList<Term>();if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}}for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];}returntermList; "]
67895[label="ifThenStatement\n if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();} "]
77896[label="equalityExpression\n trie==null "]
87897[label="expressionName\n trie "]
87898[label="literal\n null "]
77899[label="block\n {logger.warning(\"还未加载任何词典\");returnCollections.emptyList();} "]
87900[label="blockStatements\n logger.warning(\"还未加载任何词典\");returnCollections.emptyList(); "]
97901[label="expressionStatement\n logger.warning(\"还未加载任何词典\"); "]
107902[label="methodInvocation\n logger.warning(\"还未加载任何词典\") "]
117903[label="typeName\n logger "]
117904[label="literal\n \"还未加载任何词典\" "]
97905[label="returnStatement\n returnCollections.emptyList(); "]
107906[label="methodInvocation_lfno_primary\n Collections.emptyList() "]
117907[label="typeName\n Collections "]
67908[label="localVariableDeclarationStatement\n finalint[]wordNet=newint[sentence.length]; "]
77909[label="localVariableDeclaration\n finalint[]wordNet=newint[sentence.length] "]
87910[label="variableModifier\n final "]
87911[label="unannArrayType\n int[] "]
97912[label="integralType\n int "]
97913[label="dims\n [] "]
87914[label="variableDeclarator\n wordNet=newint[sentence.length] "]
97915[label="variableDeclaratorId\n wordNet "]
97916[label="arrayCreationExpression\n newint[sentence.length] "]
107917[label="integralType\n int "]
107918[label="dimExpr\n [sentence.length] "]
117919[label="expressionName\n sentence.length "]
127920[label="ambiguousName\n sentence "]
67921[label="expressionStatement\n Arrays.fill(wordNet,1); "]
77922[label="methodInvocation\n Arrays.fill(wordNet,1) "]
87923[label="typeName\n Arrays "]
87924[label="argumentList\n wordNet,1 "]
97925[label="expressionName\n wordNet "]
97926[label="literal\n 1 "]
67927[label="localVariableDeclarationStatement\n finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null; "]
77928[label="localVariableDeclaration\n finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null "]
87929[label="variableModifier\n final "]
87930[label="unannArrayType\n Nature[] "]
97931[label="unannClassType_lfno_unannClassOrInterfaceType\n Nature "]
97932[label="dims\n [] "]
87933[label="variableDeclarator\n natureArray=config.speechTagging?newNature[sentence.length]:null "]
97934[label="variableDeclaratorId\n natureArray "]
97935[label="conditionalExpression\n config.speechTagging?newNature[sentence.length]:null "]
107936[label="expressionName\n config.speechTagging "]
117937[label="ambiguousName\n config "]
107938[label="arrayCreationExpression\n newNature[sentence.length] "]
117939[label="classType_lfno_classOrInterfaceType\n Nature "]
117940[label="dimExpr\n [sentence.length] "]
127941[label="expressionName\n sentence.length "]
137942[label="ambiguousName\n sentence "]
107943[label="literal\n null "]
67944[label="expressionStatement\n trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}}); "]
77945[label="methodInvocation\n trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}}) "]
87946[label="typeName\n trie "]
87947[label="argumentList\n sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}} "]
97948[label="expressionName\n sentence "]
97949[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}} "]
107950[label="typeArguments\n <CoreDictionary.Attribute> "]
117951[label="classOrInterfaceType\n CoreDictionary.Attribute "]
127952[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
127953[label="classType_lf_classOrInterfaceType\n .Attribute "]
107954[label="classBody\n {@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}} "]
117955[label="methodDeclaration\n @Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}} "]
127956[label="markerAnnotation\n @Override "]
137957[label="typeName\n Override "]
127958[label="methodModifier\n public "]
127959[label="methodHeader\n voidhit(intbegin,intend,CoreDictionary.Attributevalue) "]
137960[label="result\n void "]
137961[label="methodDeclarator\n hit(intbegin,intend,CoreDictionary.Attributevalue) "]
147962[label="formalParameterList\n intbegin,intend,CoreDictionary.Attributevalue "]
157963[label="formalParameters\n intbegin,intend "]
167964[label="formalParameter\n intbegin "]
177965[label="integralType\n int "]
177966[label="variableDeclaratorId\n begin "]
167967[label="formalParameter\n intend "]
177968[label="integralType\n int "]
177969[label="variableDeclaratorId\n end "]
157970[label="formalParameter\n CoreDictionary.Attributevalue "]
167971[label="unannClassOrInterfaceType\n CoreDictionary.Attribute "]
177972[label="unannClassType_lfno_unannClassOrInterfaceType\n CoreDictionary "]
177973[label="unannClassType_lf_unannClassOrInterfaceType\n .Attribute "]
167974[label="variableDeclaratorId\n value "]
127975[label="block\n {intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}} "]
137976[label="blockStatements\n intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}} "]
147977[label="localVariableDeclarationStatement\n intlength=end-begin; "]
157978[label="localVariableDeclaration\n intlength=end-begin "]
167979[label="integralType\n int "]
167980[label="variableDeclarator\n length=end-begin "]
177981[label="variableDeclaratorId\n length "]
177982[label="additiveExpression\n end-begin "]
187983[label="expressionName\n end "]
187984[label="expressionName\n begin "]
147985[label="ifThenStatement\n if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}} "]
157986[label="relationalExpression\n length>wordNet[begin] "]
167987[label="expressionName\n length "]
167988[label="arrayAccess_lfno_primary\n wordNet[begin] "]
177989[label="expressionName\n wordNet "]
177990[label="expressionName\n begin "]
157991[label="block\n {wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}} "]
167992[label="blockStatements\n wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];} "]
177993[label="expressionStatement\n wordNet[begin]=length; "]
187994[label="assignment\n wordNet[begin]=length "]
197995[label="arrayAccess\n wordNet[begin] "]
207996[label="expressionName\n wordNet "]
207997[label="expressionName\n begin "]
197998[label="assignmentOperator\n = "]
197999[label="expressionName\n length "]
178000[label="ifThenStatement\n if(config.speechTagging){natureArray[begin]=value.nature[0];} "]
188001[label="expressionName\n config.speechTagging "]
198002[label="ambiguousName\n config "]
188003[label="block\n {natureArray[begin]=value.nature[0];} "]
198004[label="expressionStatement\n natureArray[begin]=value.nature[0]; "]
208005[label="assignment\n natureArray[begin]=value.nature[0] "]
218006[label="arrayAccess\n natureArray[begin] "]
228007[label="expressionName\n natureArray "]
228008[label="expressionName\n begin "]
218009[label="assignmentOperator\n = "]
218010[label="arrayAccess_lfno_primary\n value.nature[0] "]
228011[label="expressionName\n value.nature "]
238012[label="ambiguousName\n value "]
228013[label="literal\n 0 "]
68014[label="localVariableDeclarationStatement\n LinkedList<Term>termList=newLinkedList<Term>(); "]
78015[label="localVariableDeclaration\n LinkedList<Term>termList=newLinkedList<Term>() "]
88016[label="unannClassType_lfno_unannClassOrInterfaceType\n LinkedList<Term> "]
98017[label="typeArguments\n <Term> "]
108018[label="classType_lfno_classOrInterfaceType\n Term "]
88019[label="variableDeclarator\n termList=newLinkedList<Term>() "]
98020[label="variableDeclaratorId\n termList "]
98021[label="classInstanceCreationExpression_lfno_primary\n newLinkedList<Term>() "]
108022[label="typeArguments\n <Term> "]
118023[label="classType_lfno_classOrInterfaceType\n Term "]
68024[label="ifThenStatement\n if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}} "]
78025[label="expressionName\n config.speechTagging "]
88026[label="ambiguousName\n config "]
78027[label="block\n {for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}} "]
88028[label="basicForStatement\n for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}} "]
98029[label="localVariableDeclaration\n inti=0 "]
108030[label="integralType\n int "]
108031[label="variableDeclarator\n i=0 "]
118032[label="variableDeclaratorId\n i "]
118033[label="literal\n 0 "]
98034[label="relationalExpression\n i<natureArray.length "]
108035[label="expressionName\n i "]
108036[label="expressionName\n natureArray.length "]
118037[label="ambiguousName\n natureArray "]
98038[label="block\n {if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}} "]
108039[label="ifThenElseStatement\n if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;} "]
118040[label="equalityExpression\n natureArray[i]==null "]
128041[label="arrayAccess_lfno_primary\n natureArray[i] "]
138042[label="expressionName\n natureArray "]
138043[label="expressionName\n i "]
128044[label="literal\n null "]
118045[label="block\n {intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;} "]
128046[label="blockStatements\n intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j; "]
138047[label="localVariableDeclarationStatement\n intj=i+1; "]
148048[label="localVariableDeclaration\n intj=i+1 "]
158049[label="integralType\n int "]
158050[label="variableDeclarator\n j=i+1 "]
168051[label="variableDeclaratorId\n j "]
168052[label="additiveExpression\n i+1 "]
178053[label="expressionName\n i "]
178054[label="literal\n 1 "]
138055[label="basicForStatement\n for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;} "]
148056[label="relationalExpression\n j<natureArray.length "]
158057[label="expressionName\n j "]
158058[label="expressionName\n natureArray.length "]
168059[label="ambiguousName\n natureArray "]
148060[label="preIncrementExpression\n ++j "]
158061[label="expressionName\n j "]
148062[label="block\n {if(natureArray[j]!=null)break;} "]
158063[label="ifThenStatement\n if(natureArray[j]!=null)break; "]
168064[label="equalityExpression\n natureArray[j]!=null "]
178065[label="arrayAccess_lfno_primary\n natureArray[j] "]
188066[label="expressionName\n natureArray "]
188067[label="expressionName\n j "]
178068[label="literal\n null "]
168069[label="breakStatement\n break; "]
138070[label="localVariableDeclarationStatement\n List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j); "]
148071[label="localVariableDeclaration\n List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j) "]
158072[label="unannClassType_lfno_unannClassOrInterfaceType\n List<AtomNode> "]
168073[label="typeArguments\n <AtomNode> "]
178074[label="classType_lfno_classOrInterfaceType\n AtomNode "]
158075[label="variableDeclarator\n atomNodeList=quickAtomSegment(sentence,i,j) "]
168076[label="variableDeclaratorId\n atomNodeList "]
168077[label="methodInvocation_lfno_primary\n quickAtomSegment(sentence,i,j) "]
178078[label="methodName\n quickAtomSegment "]
178079[label="argumentList\n sentence,i,j "]
188080[label="expressionName\n sentence "]
188081[label="expressionName\n i "]
188082[label="expressionName\n j "]
138083[label="enhancedForStatement\n for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}} "]
148084[label="unannClassType_lfno_unannClassOrInterfaceType\n AtomNode "]
148085[label="variableDeclaratorId\n atomNode "]
148086[label="expressionName\n atomNodeList "]
148087[label="block\n {if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}} "]
158088[label="ifThenStatement\n if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];} "]
168089[label="relationalExpression\n atomNode.sWord.length()>=wordNet[i] "]
178090[label="methodInvocation_lfno_primary\n atomNode.sWord.length() "]
188091[label="typeName\n atomNode.sWord "]
198092[label="packageOrTypeName\n atomNode "]
178093[label="arrayAccess_lfno_primary\n wordNet[i] "]
188094[label="expressionName\n wordNet "]
188095[label="expressionName\n i "]
168096[label="block\n {wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];} "]
178097[label="blockStatements\n wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i]; "]
188098[label="expressionStatement\n wordNet[i]=atomNode.sWord.length(); "]
198099[label="assignment\n wordNet[i]=atomNode.sWord.length() "]
208100[label="arrayAccess\n wordNet[i] "]
218101[label="expressionName\n wordNet "]
218102[label="expressionName\n i "]
208103[label="assignmentOperator\n = "]
208104[label="methodInvocation_lfno_primary\n atomNode.sWord.length() "]
218105[label="typeName\n atomNode.sWord "]
228106[label="packageOrTypeName\n atomNode "]
188107[label="expressionStatement\n natureArray[i]=atomNode.getNature(); "]
198108[label="assignment\n natureArray[i]=atomNode.getNature() "]
208109[label="arrayAccess\n natureArray[i] "]
218110[label="expressionName\n natureArray "]
218111[label="expressionName\n i "]
208112[label="assignmentOperator\n = "]
208113[label="methodInvocation_lfno_primary\n atomNode.getNature() "]
218114[label="typeName\n atomNode "]
188115[label="expressionStatement\n i+=wordNet[i]; "]
198116[label="assignment\n i+=wordNet[i] "]
208117[label="expressionName\n i "]
208118[label="assignmentOperator\n += "]
208119[label="arrayAccess_lfno_primary\n wordNet[i] "]
218120[label="expressionName\n wordNet "]
218121[label="expressionName\n i "]
138122[label="expressionStatement\n i=j; "]
148123[label="assignment\n i=j "]
158124[label="expressionName\n i "]
158125[label="assignmentOperator\n = "]
158126[label="expressionName\n j "]
118127[label="block\n {++i;} "]
128128[label="expressionStatement\n ++i; "]
138129[label="preIncrementExpression\n ++i "]
148130[label="expressionName\n i "]
68131[label="basicForStatement\n for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];} "]
78132[label="localVariableDeclaration\n inti=0 "]
88133[label="integralType\n int "]
88134[label="variableDeclarator\n i=0 "]
98135[label="variableDeclaratorId\n i "]
98136[label="literal\n 0 "]
78137[label="relationalExpression\n i<wordNet.length "]
88138[label="expressionName\n i "]
88139[label="expressionName\n wordNet.length "]
98140[label="ambiguousName\n wordNet "]
78141[label="block\n {Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];} "]
88142[label="blockStatements\n Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i]; "]
98143[label="localVariableDeclarationStatement\n Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null); "]
108144[label="localVariableDeclaration\n Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null) "]
118145[label="unannClassType_lfno_unannClassOrInterfaceType\n Term "]
118146[label="variableDeclarator\n term=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null) "]
128147[label="variableDeclaratorId\n term "]
128148[label="classInstanceCreationExpression_lfno_primary\n newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null) "]
138149[label="argumentList\n newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null "]
148150[label="classInstanceCreationExpression_lfno_primary\n newString(sentence,i,wordNet[i]) "]
158151[label="argumentList\n sentence,i,wordNet[i] "]
168152[label="expressionName\n sentence "]
168153[label="expressionName\n i "]
168154[label="arrayAccess_lfno_primary\n wordNet[i] "]
178155[label="expressionName\n wordNet "]
178156[label="expressionName\n i "]
148157[label="conditionalExpression\n config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null "]
158158[label="expressionName\n config.speechTagging "]
168159[label="ambiguousName\n config "]
158160[label="primaryNoNewArray_lfno_primary\n (natureArray[i]==null?Nature.nz:natureArray[i]) "]
168161[label="conditionalExpression\n natureArray[i]==null?Nature.nz:natureArray[i] "]
178162[label="equalityExpression\n natureArray[i]==null "]
188163[label="arrayAccess_lfno_primary\n natureArray[i] "]
198164[label="expressionName\n natureArray "]
198165[label="expressionName\n i "]
188166[label="literal\n null "]
178167[label="expressionName\n Nature.nz "]
188168[label="ambiguousName\n Nature "]
178169[label="arrayAccess_lfno_primary\n natureArray[i] "]
188170[label="expressionName\n natureArray "]
188171[label="expressionName\n i "]
158172[label="literal\n null "]
98173[label="expressionStatement\n term.offset=i; "]
108174[label="assignment\n term.offset=i "]
118175[label="expressionName\n term.offset "]
128176[label="ambiguousName\n term "]
118177[label="assignmentOperator\n = "]
118178[label="expressionName\n i "]
98179[label="expressionStatement\n termList.add(term); "]
108180[label="methodInvocation\n termList.add(term) "]
118181[label="typeName\n termList "]
118182[label="expressionName\n term "]
98183[label="expressionStatement\n i+=wordNet[i]; "]
108184[label="assignment\n i+=wordNet[i] "]
118185[label="expressionName\n i "]
118186[label="assignmentOperator\n += "]
118187[label="arrayAccess_lfno_primary\n wordNet[i] "]
128188[label="expressionName\n wordNet "]
128189[label="expressionName\n i "]
68190[label="returnStatement\n returntermList; "]
78191[label="expressionName\n termList "]
38192[label="constructorDeclaration\n publicAhoCorasickDoubleArrayTrieSegment(){super();config.useCustomDictionary=false;config.speechTagging=true;} "]
48193[label="constructorModifier\n public "]
48194[label="constructorDeclarator\n AhoCorasickDoubleArrayTrieSegment() "]
58195[label="simpleTypeName\n AhoCorasickDoubleArrayTrieSegment "]
48196[label="constructorBody\n {super();config.useCustomDictionary=false;config.speechTagging=true;} "]
58197[label="explicitConstructorInvocation\n super(); "]
58198[label="blockStatements\n config.useCustomDictionary=false;config.speechTagging=true; "]
68199[label="expressionStatement\n config.useCustomDictionary=false; "]
78200[label="assignment\n config.useCustomDictionary=false "]
88201[label="expressionName\n config.useCustomDictionary "]
98202[label="ambiguousName\n config "]
88203[label="assignmentOperator\n = "]
88204[label="literal\n false "]
68205[label="expressionStatement\n config.speechTagging=true; "]
78206[label="assignment\n config.speechTagging=true "]
88207[label="expressionName\n config.speechTagging "]
98208[label="ambiguousName\n config "]
88209[label="assignmentOperator\n = "]
88210[label="literal\n true "]
38211[label="constructorDeclaration\n publicAhoCorasickDoubleArrayTrieSegment(TreeMap<String,CoreDictionary.Attribute>dictionary){this();trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();trie.build(dictionary);setTrie(trie);} "]
48212[label="constructorModifier\n public "]
48213[label="constructorDeclarator\n AhoCorasickDoubleArrayTrieSegment(TreeMap<String,CoreDictionary.Attribute>dictionary) "]
58214[label="simpleTypeName\n AhoCorasickDoubleArrayTrieSegment "]
58215[label="formalParameter\n TreeMap<String,CoreDictionary.Attribute>dictionary "]
68216[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,CoreDictionary.Attribute> "]
78217[label="typeArguments\n <String,CoreDictionary.Attribute> "]
88218[label="typeArgumentList\n String,CoreDictionary.Attribute "]
98219[label="classType_lfno_classOrInterfaceType\n String "]
98220[label="classOrInterfaceType\n CoreDictionary.Attribute "]
108221[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
108222[label="classType_lf_classOrInterfaceType\n .Attribute "]
68223[label="variableDeclaratorId\n dictionary "]
48224[label="constructorBody\n {this();trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();trie.build(dictionary);setTrie(trie);} "]
58225[label="explicitConstructorInvocation\n this(); "]
58226[label="blockStatements\n trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();trie.build(dictionary);setTrie(trie); "]
68227[label="expressionStatement\n trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>(); "]
78228[label="assignment\n trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>() "]
88229[label="expressionName\n trie "]
88230[label="assignmentOperator\n = "]
88231[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>() "]
98232[label="typeArguments\n <CoreDictionary.Attribute> "]
108233[label="classOrInterfaceType\n CoreDictionary.Attribute "]
118234[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
118235[label="classType_lf_classOrInterfaceType\n .Attribute "]
68236[label="expressionStatement\n trie.build(dictionary); "]
78237[label="methodInvocation\n trie.build(dictionary) "]
88238[label="typeName\n trie "]
88239[label="expressionName\n dictionary "]
68240[label="expressionStatement\n setTrie(trie); "]
78241[label="methodInvocation\n setTrie(trie) "]
88242[label="methodName\n setTrie "]
88243[label="expressionName\n trie "]
38244[label="methodDeclaration\n @OverridepublicSegmentenableCustomDictionary(booleanenable){thrownewUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\");} "]
48245[label="markerAnnotation\n @Override "]
58246[label="typeName\n Override "]
48247[label="methodModifier\n public "]
48248[label="methodHeader\n SegmentenableCustomDictionary(booleanenable) "]
58249[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
58250[label="methodDeclarator\n enableCustomDictionary(booleanenable) "]
68251[label="formalParameter\n booleanenable "]
78252[label="unannPrimitiveType\n boolean "]
78253[label="variableDeclaratorId\n enable "]
48254[label="block\n {thrownewUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\");} "]
58255[label="throwStatement\n thrownewUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\"); "]
68256[label="classInstanceCreationExpression_lfno_primary\n newUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\") "]
78257[label="literal\n \"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\" "]
38258[label="methodDeclaration\n publicAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>getTrie(){returntrie;} "]
48259[label="methodModifier\n public "]
48260[label="methodHeader\n AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>getTrie() "]
58261[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute> "]
68262[label="typeArguments\n <CoreDictionary.Attribute> "]
78263[label="classOrInterfaceType\n CoreDictionary.Attribute "]
88264[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
88265[label="classType_lf_classOrInterfaceType\n .Attribute "]
58266[label="methodDeclarator\n getTrie() "]
48267[label="block\n {returntrie;} "]
58268[label="returnStatement\n returntrie; "]
68269[label="expressionName\n trie "]
38270[label="methodDeclaration\n publicvoidsetTrie(AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie){this.trie=trie;} "]
48271[label="methodModifier\n public "]
48272[label="methodHeader\n voidsetTrie(AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie) "]
58273[label="result\n void "]
58274[label="methodDeclarator\n setTrie(AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie) "]
68275[label="formalParameter\n AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie "]
78276[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute> "]
88277[label="typeArguments\n <CoreDictionary.Attribute> "]
98278[label="classOrInterfaceType\n CoreDictionary.Attribute "]
108279[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
108280[label="classType_lf_classOrInterfaceType\n .Attribute "]
78281[label="variableDeclaratorId\n trie "]
48282[label="block\n {this.trie=trie;} "]
58283[label="expressionStatement\n this.trie=trie; "]
68284[label="assignment\n this.trie=trie "]
78285[label="fieldAccess\n this.trie "]
88286[label="primaryNoNewArray_lfno_primary\n this "]
78287[label="assignmentOperator\n = "]
78288[label="expressionName\n trie "]
38289[label="methodDeclaration\n publicAhoCorasickDoubleArrayTrieSegmentloadDictionary(String...pathArray){trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();TreeMap<String,CoreDictionary.Attribute>map=null;try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;}if(map!=null&&!map.isEmpty()){trie.build(map);}returnthis;} "]
48290[label="methodModifier\n public "]
48291[label="methodHeader\n AhoCorasickDoubleArrayTrieSegmentloadDictionary(String...pathArray) "]
58292[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrieSegment "]
58293[label="methodDeclarator\n loadDictionary(String...pathArray) "]
68294[label="lastFormalParameter\n String...pathArray "]
78295[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
78296[label="variableDeclaratorId\n pathArray "]
48297[label="block\n {trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();TreeMap<String,CoreDictionary.Attribute>map=null;try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;}if(map!=null&&!map.isEmpty()){trie.build(map);}returnthis;} "]
58298[label="blockStatements\n trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();TreeMap<String,CoreDictionary.Attribute>map=null;try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;}if(map!=null&&!map.isEmpty()){trie.build(map);}returnthis; "]
68299[label="expressionStatement\n trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>(); "]
78300[label="assignment\n trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>() "]
88301[label="expressionName\n trie "]
88302[label="assignmentOperator\n = "]
88303[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>() "]
98304[label="typeArguments\n <CoreDictionary.Attribute> "]
108305[label="classOrInterfaceType\n CoreDictionary.Attribute "]
118306[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
118307[label="classType_lf_classOrInterfaceType\n .Attribute "]
68308[label="localVariableDeclarationStatement\n TreeMap<String,CoreDictionary.Attribute>map=null; "]
78309[label="localVariableDeclaration\n TreeMap<String,CoreDictionary.Attribute>map=null "]
88310[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,CoreDictionary.Attribute> "]
98311[label="typeArguments\n <String,CoreDictionary.Attribute> "]
108312[label="typeArgumentList\n String,CoreDictionary.Attribute "]
118313[label="classType_lfno_classOrInterfaceType\n String "]
118314[label="classOrInterfaceType\n CoreDictionary.Attribute "]
128315[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
128316[label="classType_lf_classOrInterfaceType\n .Attribute "]
88317[label="variableDeclarator\n map=null "]
98318[label="variableDeclaratorId\n map "]
98319[label="literal\n null "]
68320[label="tryStatement\n try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;} "]
78321[label="block\n {map=IOUtil.loadDictionary(pathArray);} "]
88322[label="expressionStatement\n map=IOUtil.loadDictionary(pathArray); "]
98323[label="assignment\n map=IOUtil.loadDictionary(pathArray) "]
108324[label="expressionName\n map "]
108325[label="assignmentOperator\n = "]
108326[label="methodInvocation_lfno_primary\n IOUtil.loadDictionary(pathArray) "]
118327[label="typeName\n IOUtil "]
118328[label="expressionName\n pathArray "]
78329[label="catchClause\n catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;} "]
88330[label="catchFormalParameter\n IOExceptione "]
98331[label="unannClassType\n IOException "]
98332[label="variableDeclaratorId\n e "]
88333[label="block\n {logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;} "]
98334[label="blockStatements\n logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis; "]
108335[label="expressionStatement\n logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e)); "]
118336[label="methodInvocation\n logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e)) "]
128337[label="typeName\n logger "]
128338[label="additiveExpression\n \"加载词典失败\n\"+TextUtility.exceptionToString(e) "]
138339[label="literal\n \"加载词典失败\n\" "]
138340[label="methodInvocation_lfno_primary\n TextUtility.exceptionToString(e) "]
148341[label="typeName\n TextUtility "]
148342[label="expressionName\n e "]
108343[label="returnStatement\n returnthis; "]
118344[label="primaryNoNewArray_lfno_primary\n this "]
68345[label="ifThenStatement\n if(map!=null&&!map.isEmpty()){trie.build(map);} "]
78346[label="conditionalAndExpression\n map!=null&&!map.isEmpty() "]
88347[label="equalityExpression\n map!=null "]
98348[label="expressionName\n map "]
98349[label="literal\n null "]
88350[label="unaryExpressionNotPlusMinus\n !map.isEmpty() "]
98351[label="methodInvocation_lfno_primary\n map.isEmpty() "]
108352[label="typeName\n map "]
78353[label="block\n {trie.build(map);} "]
88354[label="expressionStatement\n trie.build(map); "]
98355[label="methodInvocation\n trie.build(map) "]
108356[label="typeName\n trie "]
108357[label="expressionName\n map "]
68358[label="returnStatement\n returnthis; "]
78359[label="primaryNoNewArray_lfno_primary\n this "]
08360[label="compilationUnit\n packagecom.hankcs.test.algorithm;importcom.hankcs.hanlp.algorithm.ahocorasick.trie.Emit;importcom.hankcs.hanlp.algorithm.ahocorasick.trie.Trie;importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie;importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie;importcom.hankcs.hanlp.corpus.io.IOUtil;importjunit.framework.TestCase;importjava.util.*;publicclassAhoCorasickDoubleArrayTrieTestextendsTestCase{publicvoidtestAC()throwsException{Trietrie=newTrie();trie.addKeyword(\"hers\");trie.addKeyword(\"his\");trie.addKeyword(\"she\");trie.addKeyword(\"he\");Collection<Emit>emits=trie.parseText(\"ushers\");System.out.println(emits);}publicvoidtestBuild()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}});}publicvoidtestDatFromFile()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));}}publicvoidtestDat()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);System.out.println(trie.exactMatchSearch(\"he\"));}publicvoidtestTwoStruct()throwsException{}publicvoidtestTwoAC()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);}}publicvoidtestSegment()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();longtimeMillis=System.currentTimeMillis();act.build(map);System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\");LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\");timeMillis=System.currentTimeMillis();for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}}System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis);}publicvoidtestHasKeyword()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));}assertTrue(trie.hasKeyword(\"ushers\"));assertFalse(trie.hasKeyword(\"构建耗时\"));}}<EOF> "]
18361[label="packageDeclaration\n packagecom.hankcs.test.algorithm; "]
28362[label="packageName\n com.hankcs.test.algorithm "]
38363[label="packageName\n com.hankcs.test "]
48364[label="packageName\n com.hankcs "]
58365[label="packageName\n com "]
18366[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.algorithm.ahocorasick.trie.Emit; "]
28367[label="typeName\n com.hankcs.hanlp.algorithm.ahocorasick.trie.Emit "]
38368[label="packageOrTypeName\n com.hankcs.hanlp.algorithm.ahocorasick.trie "]
48369[label="packageOrTypeName\n com.hankcs.hanlp.algorithm.ahocorasick "]
58370[label="packageOrTypeName\n com.hankcs.hanlp.algorithm "]
68371[label="packageOrTypeName\n com.hankcs.hanlp "]
78372[label="packageOrTypeName\n com.hankcs "]
88373[label="packageOrTypeName\n com "]
18374[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.algorithm.ahocorasick.trie.Trie; "]
28375[label="typeName\n com.hankcs.hanlp.algorithm.ahocorasick.trie.Trie "]
38376[label="packageOrTypeName\n com.hankcs.hanlp.algorithm.ahocorasick.trie "]
48377[label="packageOrTypeName\n com.hankcs.hanlp.algorithm.ahocorasick "]
58378[label="packageOrTypeName\n com.hankcs.hanlp.algorithm "]
68379[label="packageOrTypeName\n com.hankcs.hanlp "]
78380[label="packageOrTypeName\n com.hankcs "]
88381[label="packageOrTypeName\n com "]
18382[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie; "]
28383[label="typeName\n com.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie "]
38384[label="packageOrTypeName\n com.hankcs.hanlp.collection.AhoCorasick "]
48385[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
58386[label="packageOrTypeName\n com.hankcs.hanlp "]
68387[label="packageOrTypeName\n com.hankcs "]
78388[label="packageOrTypeName\n com "]
18389[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie; "]
28390[label="typeName\n com.hankcs.hanlp.collection.trie.DoubleArrayTrie "]
38391[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
48392[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
58393[label="packageOrTypeName\n com.hankcs.hanlp "]
68394[label="packageOrTypeName\n com.hankcs "]
78395[label="packageOrTypeName\n com "]
18396[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
28397[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
38398[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
48399[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
58400[label="packageOrTypeName\n com.hankcs.hanlp "]
68401[label="packageOrTypeName\n com.hankcs "]
78402[label="packageOrTypeName\n com "]
18403[label="singleTypeImportDeclaration\n importjunit.framework.TestCase; "]
28404[label="typeName\n junit.framework.TestCase "]
38405[label="packageOrTypeName\n junit.framework "]
48406[label="packageOrTypeName\n junit "]
18407[label="typeImportOnDemandDeclaration\n importjava.util.*; "]
28408[label="packageOrTypeName\n java.util "]
38409[label="packageOrTypeName\n java "]
18410[label="normalClassDeclaration\n publicclassAhoCorasickDoubleArrayTrieTestextendsTestCase{publicvoidtestAC()throwsException{Trietrie=newTrie();trie.addKeyword(\"hers\");trie.addKeyword(\"his\");trie.addKeyword(\"she\");trie.addKeyword(\"he\");Collection<Emit>emits=trie.parseText(\"ushers\");System.out.println(emits);}publicvoidtestBuild()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}});}publicvoidtestDatFromFile()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));}}publicvoidtestDat()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);System.out.println(trie.exactMatchSearch(\"he\"));}publicvoidtestTwoStruct()throwsException{}publicvoidtestTwoAC()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);}}publicvoidtestSegment()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();longtimeMillis=System.currentTimeMillis();act.build(map);System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\");LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\");timeMillis=System.currentTimeMillis();for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}}System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis);}publicvoidtestHasKeyword()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));}assertTrue(trie.hasKeyword(\"ushers\"));assertFalse(trie.hasKeyword(\"构建耗时\"));}} "]
28411[label="classModifier\n public "]
28412[label="superclass\n extendsTestCase "]
38413[label="classType\n TestCase "]
28414[label="classBody\n {publicvoidtestAC()throwsException{Trietrie=newTrie();trie.addKeyword(\"hers\");trie.addKeyword(\"his\");trie.addKeyword(\"she\");trie.addKeyword(\"he\");Collection<Emit>emits=trie.parseText(\"ushers\");System.out.println(emits);}publicvoidtestBuild()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}});}publicvoidtestDatFromFile()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));}}publicvoidtestDat()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);System.out.println(trie.exactMatchSearch(\"he\"));}publicvoidtestTwoStruct()throwsException{}publicvoidtestTwoAC()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);}}publicvoidtestSegment()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();longtimeMillis=System.currentTimeMillis();act.build(map);System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\");LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\");timeMillis=System.currentTimeMillis();for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}}System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis);}publicvoidtestHasKeyword()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));}assertTrue(trie.hasKeyword(\"ushers\"));assertFalse(trie.hasKeyword(\"构建耗时\"));}} "]
38415[label="methodDeclaration\n publicvoidtestAC()throwsException{Trietrie=newTrie();trie.addKeyword(\"hers\");trie.addKeyword(\"his\");trie.addKeyword(\"she\");trie.addKeyword(\"he\");Collection<Emit>emits=trie.parseText(\"ushers\");System.out.println(emits);} "]
48416[label="methodModifier\n public "]
48417[label="methodHeader\n voidtestAC()throwsException "]
58418[label="result\n void "]
58419[label="methodDeclarator\n testAC() "]
58420[label="throws_\n throwsException "]
68421[label="classType\n Exception "]
48422[label="block\n {Trietrie=newTrie();trie.addKeyword(\"hers\");trie.addKeyword(\"his\");trie.addKeyword(\"she\");trie.addKeyword(\"he\");Collection<Emit>emits=trie.parseText(\"ushers\");System.out.println(emits);} "]
58423[label="blockStatements\n Trietrie=newTrie();trie.addKeyword(\"hers\");trie.addKeyword(\"his\");trie.addKeyword(\"she\");trie.addKeyword(\"he\");Collection<Emit>emits=trie.parseText(\"ushers\");System.out.println(emits); "]
68424[label="localVariableDeclarationStatement\n Trietrie=newTrie(); "]
78425[label="localVariableDeclaration\n Trietrie=newTrie() "]
88426[label="unannClassType_lfno_unannClassOrInterfaceType\n Trie "]
88427[label="variableDeclarator\n trie=newTrie() "]
98428[label="variableDeclaratorId\n trie "]
98429[label="classInstanceCreationExpression_lfno_primary\n newTrie() "]
68430[label="expressionStatement\n trie.addKeyword(\"hers\"); "]
78431[label="methodInvocation\n trie.addKeyword(\"hers\") "]
88432[label="typeName\n trie "]
88433[label="literal\n \"hers\" "]
68434[label="expressionStatement\n trie.addKeyword(\"his\"); "]
78435[label="methodInvocation\n trie.addKeyword(\"his\") "]
88436[label="typeName\n trie "]
88437[label="literal\n \"his\" "]
68438[label="expressionStatement\n trie.addKeyword(\"she\"); "]
78439[label="methodInvocation\n trie.addKeyword(\"she\") "]
88440[label="typeName\n trie "]
88441[label="literal\n \"she\" "]
68442[label="expressionStatement\n trie.addKeyword(\"he\"); "]
78443[label="methodInvocation\n trie.addKeyword(\"he\") "]
88444[label="typeName\n trie "]
88445[label="literal\n \"he\" "]
68446[label="localVariableDeclarationStatement\n Collection<Emit>emits=trie.parseText(\"ushers\"); "]
78447[label="localVariableDeclaration\n Collection<Emit>emits=trie.parseText(\"ushers\") "]
88448[label="unannClassType_lfno_unannClassOrInterfaceType\n Collection<Emit> "]
98449[label="typeArguments\n <Emit> "]
108450[label="classType_lfno_classOrInterfaceType\n Emit "]
88451[label="variableDeclarator\n emits=trie.parseText(\"ushers\") "]
98452[label="variableDeclaratorId\n emits "]
98453[label="methodInvocation_lfno_primary\n trie.parseText(\"ushers\") "]
108454[label="typeName\n trie "]
108455[label="literal\n \"ushers\" "]
68456[label="expressionStatement\n System.out.println(emits); "]
78457[label="methodInvocation\n System.out.println(emits) "]
88458[label="typeName\n System.out "]
98459[label="packageOrTypeName\n System "]
88460[label="expressionName\n emits "]
38461[label="methodDeclaration\n publicvoidtestBuild()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}});} "]
48462[label="methodModifier\n public "]
48463[label="methodHeader\n voidtestBuild()throwsException "]
58464[label="result\n void "]
58465[label="methodDeclarator\n testBuild() "]
58466[label="throws_\n throwsException "]
68467[label="classType\n Exception "]
48468[label="block\n {TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}});} "]
58469[label="blockStatements\n TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}}); "]
68470[label="localVariableDeclarationStatement\n TreeMap<String,String>map=newTreeMap<String,String>(); "]
78471[label="localVariableDeclaration\n TreeMap<String,String>map=newTreeMap<String,String>() "]
88472[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
98473[label="typeArguments\n <String,String> "]
108474[label="typeArgumentList\n String,String "]
118475[label="classType_lfno_classOrInterfaceType\n String "]
118476[label="classType_lfno_classOrInterfaceType\n String "]
88477[label="variableDeclarator\n map=newTreeMap<String,String>() "]
98478[label="variableDeclaratorId\n map "]
98479[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
108480[label="typeArguments\n <String,String> "]
118481[label="typeArgumentList\n String,String "]
128482[label="classType_lfno_classOrInterfaceType\n String "]
128483[label="classType_lfno_classOrInterfaceType\n String "]
68484[label="localVariableDeclarationStatement\n String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"}; "]
78485[label="localVariableDeclaration\n String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
88486[label="unannArrayType\n String[] "]
98487[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
98488[label="dims\n [] "]
88489[label="variableDeclarator\n keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
98490[label="variableDeclaratorId\n keyArray "]
98491[label="arrayCreationExpression\n newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
108492[label="classType_lfno_classOrInterfaceType\n String "]
108493[label="dims\n [] "]
108494[label="arrayInitializer\n {\"hers\",\"his\",\"she\",\"he\"} "]
118495[label="variableInitializerList\n \"hers\",\"his\",\"she\",\"he\" "]
128496[label="literal\n \"hers\" "]
128497[label="literal\n \"his\" "]
128498[label="literal\n \"she\" "]
128499[label="literal\n \"he\" "]
68500[label="enhancedForStatement\n for(Stringkey:keyArray){map.put(key,key);} "]
78501[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
78502[label="variableDeclaratorId\n key "]
78503[label="expressionName\n keyArray "]
78504[label="block\n {map.put(key,key);} "]
88505[label="expressionStatement\n map.put(key,key); "]
98506[label="methodInvocation\n map.put(key,key) "]
108507[label="typeName\n map "]
108508[label="argumentList\n key,key "]
118509[label="expressionName\n key "]
118510[label="expressionName\n key "]
68511[label="localVariableDeclarationStatement\n AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>(); "]
78512[label="localVariableDeclaration\n AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>() "]
88513[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
98514[label="typeArguments\n <String> "]
108515[label="classType_lfno_classOrInterfaceType\n String "]
88516[label="variableDeclarator\n act=newAhoCorasickDoubleArrayTrie<String>() "]
98517[label="variableDeclaratorId\n act "]
98518[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie<String>() "]
108519[label="typeArguments\n <String> "]
118520[label="classType_lfno_classOrInterfaceType\n String "]
68521[label="expressionStatement\n act.build(map); "]
78522[label="methodInvocation\n act.build(map) "]
88523[label="typeName\n act "]
88524[label="expressionName\n map "]
68525[label="expressionStatement\n act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}}); "]
78526[label="methodInvocation\n act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}}) "]
88527[label="typeName\n act "]
88528[label="argumentList\n \"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}} "]
98529[label="literal\n \"uhers\" "]
98530[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}} "]
108531[label="typeArguments\n <String> "]
118532[label="classType_lfno_classOrInterfaceType\n String "]
108533[label="classBody\n {@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}} "]
118534[label="methodDeclaration\n @Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);} "]
128535[label="markerAnnotation\n @Override "]
138536[label="typeName\n Override "]
128537[label="methodModifier\n public "]
128538[label="methodHeader\n voidhit(intbegin,intend,Stringvalue) "]
138539[label="result\n void "]
138540[label="methodDeclarator\n hit(intbegin,intend,Stringvalue) "]
148541[label="formalParameterList\n intbegin,intend,Stringvalue "]
158542[label="formalParameters\n intbegin,intend "]
168543[label="formalParameter\n intbegin "]
178544[label="integralType\n int "]
178545[label="variableDeclaratorId\n begin "]
168546[label="formalParameter\n intend "]
178547[label="integralType\n int "]
178548[label="variableDeclaratorId\n end "]
158549[label="formalParameter\n Stringvalue "]
168550[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
168551[label="variableDeclaratorId\n value "]
128552[label="block\n {System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);} "]
138553[label="expressionStatement\n System.out.printf(\"[%d:%d]=%s\n\",begin,end,value); "]
148554[label="methodInvocation\n System.out.printf(\"[%d:%d]=%s\n\",begin,end,value) "]
158555[label="typeName\n System.out "]
168556[label="packageOrTypeName\n System "]
158557[label="argumentList\n \"[%d:%d]=%s\n\",begin,end,value "]
168558[label="literal\n \"[%d:%d]=%s\n\" "]
168559[label="expressionName\n begin "]
168560[label="expressionName\n end "]
168561[label="expressionName\n value "]
38562[label="methodDeclaration\n publicvoidtestDatFromFile()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));}} "]
48563[label="methodModifier\n public "]
48564[label="methodHeader\n voidtestDatFromFile()throwsException "]
58565[label="result\n void "]
58566[label="methodDeclarator\n testDatFromFile() "]
58567[label="throws_\n throwsException "]
68568[label="classType\n Exception "]
48569[label="block\n {TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));}} "]
58570[label="blockStatements\n TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));} "]
68571[label="localVariableDeclarationStatement\n TreeMap<String,String>map=newTreeMap<String,String>(); "]
78572[label="localVariableDeclaration\n TreeMap<String,String>map=newTreeMap<String,String>() "]
88573[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
98574[label="typeArguments\n <String,String> "]
108575[label="typeArgumentList\n String,String "]
118576[label="classType_lfno_classOrInterfaceType\n String "]
118577[label="classType_lfno_classOrInterfaceType\n String "]
88578[label="variableDeclarator\n map=newTreeMap<String,String>() "]
98579[label="variableDeclaratorId\n map "]
98580[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
108581[label="typeArguments\n <String,String> "]
118582[label="typeArgumentList\n String,String "]
128583[label="classType_lfno_classOrInterfaceType\n String "]
128584[label="classType_lfno_classOrInterfaceType\n String "]
68585[label="localVariableDeclarationStatement\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\"); "]
78586[label="localVariableDeclaration\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\") "]
88587[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
98588[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
98589[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
88590[label="variableDeclarator\n iterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\") "]
98591[label="variableDeclaratorId\n iterator "]
98592[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\") "]
108593[label="literal\n \"data/dictionary/CoreNatureDictionary.mini.txt\" "]
68594[label="whileStatement\n while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);} "]
78595[label="methodInvocation_lfno_primary\n iterator.hasNext() "]
88596[label="typeName\n iterator "]
78597[label="block\n {Stringline=iterator.next();map.put(line,line);} "]
88598[label="blockStatements\n Stringline=iterator.next();map.put(line,line); "]
98599[label="localVariableDeclarationStatement\n Stringline=iterator.next(); "]
108600[label="localVariableDeclaration\n Stringline=iterator.next() "]
118601[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
118602[label="variableDeclarator\n line=iterator.next() "]
128603[label="variableDeclaratorId\n line "]
128604[label="methodInvocation_lfno_primary\n iterator.next() "]
138605[label="typeName\n iterator "]
98606[label="expressionStatement\n map.put(line,line); "]
108607[label="methodInvocation\n map.put(line,line) "]
118608[label="typeName\n map "]
118609[label="argumentList\n line,line "]
128610[label="expressionName\n line "]
128611[label="expressionName\n line "]
68612[label="localVariableDeclarationStatement\n DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>(); "]
78613[label="localVariableDeclaration\n DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>() "]
88614[label="unannClassType_lfno_unannClassOrInterfaceType\n DoubleArrayTrie<String> "]
98615[label="typeArguments\n <String> "]
108616[label="classType_lfno_classOrInterfaceType\n String "]
88617[label="variableDeclarator\n trie=newDoubleArrayTrie<String>() "]
98618[label="variableDeclaratorId\n trie "]
98619[label="classInstanceCreationExpression_lfno_primary\n newDoubleArrayTrie<String>() "]
108620[label="typeArguments\n <String> "]
118621[label="classType_lfno_classOrInterfaceType\n String "]
68622[label="expressionStatement\n trie.build(map); "]
78623[label="methodInvocation\n trie.build(map) "]
88624[label="typeName\n trie "]
88625[label="expressionName\n map "]
68626[label="enhancedForStatement\n for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));} "]
78627[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
78628[label="variableDeclaratorId\n key "]
78629[label="methodInvocation_lfno_primary\n map.keySet() "]
88630[label="typeName\n map "]
78631[label="block\n {assertEquals(key,trie.get(key));} "]
88632[label="expressionStatement\n assertEquals(key,trie.get(key)); "]
98633[label="methodInvocation\n assertEquals(key,trie.get(key)) "]
108634[label="methodName\n assertEquals "]
108635[label="argumentList\n key,trie.get(key) "]
118636[label="expressionName\n key "]
118637[label="methodInvocation_lfno_primary\n trie.get(key) "]
128638[label="typeName\n trie "]
128639[label="expressionName\n key "]
38640[label="methodDeclaration\n publicvoidtestDat()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);System.out.println(trie.exactMatchSearch(\"he\"));} "]
48641[label="methodModifier\n public "]
48642[label="methodHeader\n voidtestDat()throwsException "]
58643[label="result\n void "]
58644[label="methodDeclarator\n testDat() "]
58645[label="throws_\n throwsException "]
68646[label="classType\n Exception "]
48647[label="block\n {TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);System.out.println(trie.exactMatchSearch(\"he\"));} "]
58648[label="blockStatements\n TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);System.out.println(trie.exactMatchSearch(\"he\")); "]
68649[label="localVariableDeclarationStatement\n TreeMap<String,String>map=newTreeMap<String,String>(); "]
78650[label="localVariableDeclaration\n TreeMap<String,String>map=newTreeMap<String,String>() "]
88651[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
98652[label="typeArguments\n <String,String> "]
108653[label="typeArgumentList\n String,String "]
118654[label="classType_lfno_classOrInterfaceType\n String "]
118655[label="classType_lfno_classOrInterfaceType\n String "]
88656[label="variableDeclarator\n map=newTreeMap<String,String>() "]
98657[label="variableDeclaratorId\n map "]
98658[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
108659[label="typeArguments\n <String,String> "]
118660[label="typeArgumentList\n String,String "]
128661[label="classType_lfno_classOrInterfaceType\n String "]
128662[label="classType_lfno_classOrInterfaceType\n String "]
68663[label="localVariableDeclarationStatement\n String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"}; "]
78664[label="localVariableDeclaration\n String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
88665[label="unannArrayType\n String[] "]
98666[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
98667[label="dims\n [] "]
88668[label="variableDeclarator\n keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
98669[label="variableDeclaratorId\n keyArray "]
98670[label="arrayCreationExpression\n newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
108671[label="classType_lfno_classOrInterfaceType\n String "]
108672[label="dims\n [] "]
108673[label="arrayInitializer\n {\"hers\",\"his\",\"she\",\"he\"} "]
118674[label="variableInitializerList\n \"hers\",\"his\",\"she\",\"he\" "]
128675[label="literal\n \"hers\" "]
128676[label="literal\n \"his\" "]
128677[label="literal\n \"she\" "]
128678[label="literal\n \"he\" "]
68679[label="enhancedForStatement\n for(Stringkey:keyArray){map.put(key,key);} "]
78680[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
78681[label="variableDeclaratorId\n key "]
78682[label="expressionName\n keyArray "]
78683[label="block\n {map.put(key,key);} "]
88684[label="expressionStatement\n map.put(key,key); "]
98685[label="methodInvocation\n map.put(key,key) "]
108686[label="typeName\n map "]
108687[label="argumentList\n key,key "]
118688[label="expressionName\n key "]
118689[label="expressionName\n key "]
68690[label="localVariableDeclarationStatement\n DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>(); "]
78691[label="localVariableDeclaration\n DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>() "]
88692[label="unannClassType_lfno_unannClassOrInterfaceType\n DoubleArrayTrie<String> "]
98693[label="typeArguments\n <String> "]
108694[label="classType_lfno_classOrInterfaceType\n String "]
88695[label="variableDeclarator\n trie=newDoubleArrayTrie<String>() "]
98696[label="variableDeclaratorId\n trie "]
98697[label="classInstanceCreationExpression_lfno_primary\n newDoubleArrayTrie<String>() "]
108698[label="typeArguments\n <String> "]
118699[label="classType_lfno_classOrInterfaceType\n String "]
68700[label="expressionStatement\n trie.build(map); "]
78701[label="methodInvocation\n trie.build(map) "]
88702[label="typeName\n trie "]
88703[label="expressionName\n map "]
68704[label="expressionStatement\n System.out.println(trie.exactMatchSearch(\"he\")); "]
78705[label="methodInvocation\n System.out.println(trie.exactMatchSearch(\"he\")) "]
88706[label="typeName\n System.out "]
98707[label="packageOrTypeName\n System "]
88708[label="methodInvocation_lfno_primary\n trie.exactMatchSearch(\"he\") "]
98709[label="typeName\n trie "]
98710[label="literal\n \"he\" "]
38711[label="methodDeclaration\n publicvoidtestTwoStruct()throwsException{} "]
48712[label="methodModifier\n public "]
48713[label="methodHeader\n voidtestTwoStruct()throwsException "]
58714[label="result\n void "]
58715[label="methodDeclarator\n testTwoStruct() "]
58716[label="throws_\n throwsException "]
68717[label="classType\n Exception "]
48718[label="block\n {} "]
38719[label="methodDeclaration\n publicvoidtestTwoAC()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);}} "]
48720[label="methodModifier\n public "]
48721[label="methodHeader\n voidtestTwoAC()throwsException "]
58722[label="result\n void "]
58723[label="methodDeclarator\n testTwoAC() "]
58724[label="throws_\n throwsException "]
68725[label="classType\n Exception "]
48726[label="block\n {TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);}} "]
58727[label="blockStatements\n TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);} "]
68728[label="localVariableDeclarationStatement\n TreeMap<String,String>map=newTreeMap<String,String>(); "]
78729[label="localVariableDeclaration\n TreeMap<String,String>map=newTreeMap<String,String>() "]
88730[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
98731[label="typeArguments\n <String,String> "]
108732[label="typeArgumentList\n String,String "]
118733[label="classType_lfno_classOrInterfaceType\n String "]
118734[label="classType_lfno_classOrInterfaceType\n String "]
88735[label="variableDeclarator\n map=newTreeMap<String,String>() "]
98736[label="variableDeclaratorId\n map "]
98737[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
108738[label="typeArguments\n <String,String> "]
118739[label="typeArgumentList\n String,String "]
128740[label="classType_lfno_classOrInterfaceType\n String "]
128741[label="classType_lfno_classOrInterfaceType\n String "]
68742[label="localVariableDeclarationStatement\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\"); "]
78743[label="localVariableDeclaration\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\") "]
88744[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
98745[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
98746[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
88747[label="variableDeclarator\n iterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\") "]
98748[label="variableDeclaratorId\n iterator "]
98749[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\") "]
108750[label="literal\n \"data/dictionary/CoreNatureDictionary.mini.txt\" "]
68751[label="whileStatement\n while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);} "]
78752[label="methodInvocation_lfno_primary\n iterator.hasNext() "]
88753[label="typeName\n iterator "]
78754[label="block\n {Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);} "]
88755[label="blockStatements\n Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line); "]
98756[label="localVariableDeclarationStatement\n Stringline=iterator.next().split(\"\\s\")[0]; "]
108757[label="localVariableDeclaration\n Stringline=iterator.next().split(\"\\s\")[0] "]
118758[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
118759[label="variableDeclarator\n line=iterator.next().split(\"\\s\")[0] "]
128760[label="variableDeclaratorId\n line "]
128761[label="primary\n iterator.next().split(\"\\s\")[0] "]
138762[label="methodInvocation_lfno_primary\n iterator.next() "]
148763[label="typeName\n iterator "]
138764[label="arrayAccess_lf_primary\n .split(\"\\s\")[0] "]
148765[label="methodInvocation_lf_primary\n .split(\"\\s\") "]
158766[label="literal\n \"\\s\" "]
148767[label="literal\n 0 "]
98768[label="expressionStatement\n map.put(line,line); "]
108769[label="methodInvocation\n map.put(line,line) "]
118770[label="typeName\n map "]
118771[label="argumentList\n line,line "]
128772[label="expressionName\n line "]
128773[label="expressionName\n line "]
68774[label="localVariableDeclarationStatement\n Trietrie=newTrie(); "]
78775[label="localVariableDeclaration\n Trietrie=newTrie() "]
88776[label="unannClassType_lfno_unannClassOrInterfaceType\n Trie "]
88777[label="variableDeclarator\n trie=newTrie() "]
98778[label="variableDeclaratorId\n trie "]
98779[label="classInstanceCreationExpression_lfno_primary\n newTrie() "]
68780[label="expressionStatement\n trie.addAllKeyword(map.keySet()); "]
78781[label="methodInvocation\n trie.addAllKeyword(map.keySet()) "]
88782[label="typeName\n trie "]
88783[label="methodInvocation_lfno_primary\n map.keySet() "]
98784[label="typeName\n map "]
68785[label="localVariableDeclarationStatement\n AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>(); "]
78786[label="localVariableDeclaration\n AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>() "]
88787[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
98788[label="typeArguments\n <String> "]
108789[label="classType_lfno_classOrInterfaceType\n String "]
88790[label="variableDeclarator\n act=newAhoCorasickDoubleArrayTrie<String>() "]
98791[label="variableDeclaratorId\n act "]
98792[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie<String>() "]
108793[label="typeArguments\n <String> "]
118794[label="classType_lfno_classOrInterfaceType\n String "]
68795[label="expressionStatement\n act.build(map); "]
78796[label="methodInvocation\n act.build(map) "]
88797[label="typeName\n act "]
88798[label="expressionName\n map "]
68799[label="enhancedForStatement\n for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);} "]
78800[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
78801[label="variableDeclaratorId\n key "]
78802[label="methodInvocation_lfno_primary\n map.keySet() "]
88803[label="typeName\n map "]
78804[label="block\n {Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);} "]
88805[label="blockStatements\n Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet); "]
98806[label="localVariableDeclarationStatement\n Collection<Emit>emits=trie.parseText(key); "]
108807[label="localVariableDeclaration\n Collection<Emit>emits=trie.parseText(key) "]
118808[label="unannClassType_lfno_unannClassOrInterfaceType\n Collection<Emit> "]
128809[label="typeArguments\n <Emit> "]
138810[label="classType_lfno_classOrInterfaceType\n Emit "]
118811[label="variableDeclarator\n emits=trie.parseText(key) "]
128812[label="variableDeclaratorId\n emits "]
128813[label="methodInvocation_lfno_primary\n trie.parseText(key) "]
138814[label="typeName\n trie "]
138815[label="expressionName\n key "]
98816[label="localVariableDeclarationStatement\n Set<String>otherSet=newHashSet<String>(); "]
108817[label="localVariableDeclaration\n Set<String>otherSet=newHashSet<String>() "]
118818[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
128819[label="typeArguments\n <String> "]
138820[label="classType_lfno_classOrInterfaceType\n String "]
118821[label="variableDeclarator\n otherSet=newHashSet<String>() "]
128822[label="variableDeclaratorId\n otherSet "]
128823[label="classInstanceCreationExpression_lfno_primary\n newHashSet<String>() "]
138824[label="typeArguments\n <String> "]
148825[label="classType_lfno_classOrInterfaceType\n String "]
98826[label="enhancedForStatement\n for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());} "]
108827[label="unannClassType_lfno_unannClassOrInterfaceType\n Emit "]
108828[label="variableDeclaratorId\n emit "]
108829[label="expressionName\n emits "]
108830[label="block\n {otherSet.add(emit.getKeyword()+emit.getEnd());} "]
118831[label="expressionStatement\n otherSet.add(emit.getKeyword()+emit.getEnd()); "]
128832[label="methodInvocation\n otherSet.add(emit.getKeyword()+emit.getEnd()) "]
138833[label="typeName\n otherSet "]
138834[label="additiveExpression\n emit.getKeyword()+emit.getEnd() "]
148835[label="methodInvocation_lfno_primary\n emit.getKeyword() "]
158836[label="typeName\n emit "]
148837[label="methodInvocation_lfno_primary\n emit.getEnd() "]
158838[label="typeName\n emit "]
98839[label="localVariableDeclarationStatement\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key); "]
108840[label="localVariableDeclaration\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key) "]
118841[label="unannClassType_lfno_unannClassOrInterfaceType\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>> "]
128842[label="typeArguments\n <AhoCorasickDoubleArrayTrie<String>.Hit<String>> "]
138843[label="classOrInterfaceType\n AhoCorasickDoubleArrayTrie<String>.Hit<String> "]
148844[label="classType_lfno_classOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
158845[label="typeArguments\n <String> "]
168846[label="classType_lfno_classOrInterfaceType\n String "]
148847[label="classType_lf_classOrInterfaceType\n .Hit<String> "]
158848[label="typeArguments\n <String> "]
168849[label="classType_lfno_classOrInterfaceType\n String "]
118850[label="variableDeclarator\n entries=act.parseText(key) "]
128851[label="variableDeclaratorId\n entries "]
128852[label="methodInvocation_lfno_primary\n act.parseText(key) "]
138853[label="typeName\n act "]
138854[label="expressionName\n key "]
98855[label="localVariableDeclarationStatement\n Set<String>mySet=newHashSet<String>(); "]
108856[label="localVariableDeclaration\n Set<String>mySet=newHashSet<String>() "]
118857[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
128858[label="typeArguments\n <String> "]
138859[label="classType_lfno_classOrInterfaceType\n String "]
118860[label="variableDeclarator\n mySet=newHashSet<String>() "]
128861[label="variableDeclaratorId\n mySet "]
128862[label="classInstanceCreationExpression_lfno_primary\n newHashSet<String>() "]
138863[label="typeArguments\n <String> "]
148864[label="classType_lfno_classOrInterfaceType\n String "]
98865[label="enhancedForStatement\n for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));} "]
108866[label="unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String>.Hit<String> "]
118867[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
128868[label="typeArguments\n <String> "]
138869[label="classType_lfno_classOrInterfaceType\n String "]
118870[label="unannClassType_lf_unannClassOrInterfaceType\n .Hit<String> "]
128871[label="typeArguments\n <String> "]
138872[label="classType_lfno_classOrInterfaceType\n String "]
108873[label="variableDeclaratorId\n entry "]
108874[label="expressionName\n entries "]
108875[label="block\n {mySet.add(entry.value+(entry.end-1));} "]
118876[label="expressionStatement\n mySet.add(entry.value+(entry.end-1)); "]
128877[label="methodInvocation\n mySet.add(entry.value+(entry.end-1)) "]
138878[label="typeName\n mySet "]
138879[label="additiveExpression\n entry.value+(entry.end-1) "]
148880[label="expressionName\n entry.value "]
158881[label="ambiguousName\n entry "]
148882[label="primaryNoNewArray_lfno_primary\n (entry.end-1) "]
158883[label="additiveExpression\n entry.end-1 "]
168884[label="expressionName\n entry.end "]
178885[label="ambiguousName\n entry "]
168886[label="literal\n 1 "]
98887[label="expressionStatement\n assertEquals(otherSet,mySet); "]
108888[label="methodInvocation\n assertEquals(otherSet,mySet) "]
118889[label="methodName\n assertEquals "]
118890[label="argumentList\n otherSet,mySet "]
128891[label="expressionName\n otherSet "]
128892[label="expressionName\n mySet "]
38893[label="methodDeclaration\n publicvoidtestSegment()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();longtimeMillis=System.currentTimeMillis();act.build(map);System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\");LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\");timeMillis=System.currentTimeMillis();for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}}System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis);} "]
48894[label="methodModifier\n public "]
48895[label="methodHeader\n voidtestSegment()throwsException "]
58896[label="result\n void "]
58897[label="methodDeclarator\n testSegment() "]
58898[label="throws_\n throwsException "]
68899[label="classType\n Exception "]
48900[label="block\n {TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();longtimeMillis=System.currentTimeMillis();act.build(map);System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\");LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\");timeMillis=System.currentTimeMillis();for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}}System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis);} "]
58901[label="blockStatements\n TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();longtimeMillis=System.currentTimeMillis();act.build(map);System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\");LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\");timeMillis=System.currentTimeMillis();for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}}System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis); "]
68902[label="localVariableDeclarationStatement\n TreeMap<String,String>map=newTreeMap<String,String>(); "]
78903[label="localVariableDeclaration\n TreeMap<String,String>map=newTreeMap<String,String>() "]
88904[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
98905[label="typeArguments\n <String,String> "]
108906[label="typeArgumentList\n String,String "]
118907[label="classType_lfno_classOrInterfaceType\n String "]
118908[label="classType_lfno_classOrInterfaceType\n String "]
88909[label="variableDeclarator\n map=newTreeMap<String,String>() "]
98910[label="variableDeclaratorId\n map "]
98911[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
108912[label="typeArguments\n <String,String> "]
118913[label="typeArgumentList\n String,String "]
128914[label="classType_lfno_classOrInterfaceType\n String "]
128915[label="classType_lfno_classOrInterfaceType\n String "]
68916[label="localVariableDeclarationStatement\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\"); "]
78917[label="localVariableDeclaration\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\") "]
88918[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
98919[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
98920[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
88921[label="variableDeclarator\n iterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\") "]
98922[label="variableDeclaratorId\n iterator "]
98923[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\") "]
108924[label="literal\n \"data/dictionary/CoreNatureDictionary.txt\" "]
68925[label="whileStatement\n while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);} "]
78926[label="methodInvocation_lfno_primary\n iterator.hasNext() "]
88927[label="typeName\n iterator "]
78928[label="block\n {Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);} "]
88929[label="blockStatements\n Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line); "]
98930[label="localVariableDeclarationStatement\n Stringline=iterator.next().split(\"\\s\")[0]; "]
108931[label="localVariableDeclaration\n Stringline=iterator.next().split(\"\\s\")[0] "]
118932[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
118933[label="variableDeclarator\n line=iterator.next().split(\"\\s\")[0] "]
128934[label="variableDeclaratorId\n line "]
128935[label="primary\n iterator.next().split(\"\\s\")[0] "]
138936[label="methodInvocation_lfno_primary\n iterator.next() "]
148937[label="typeName\n iterator "]
138938[label="arrayAccess_lf_primary\n .split(\"\\s\")[0] "]
148939[label="methodInvocation_lf_primary\n .split(\"\\s\") "]
158940[label="literal\n \"\\s\" "]
148941[label="literal\n 0 "]
98942[label="expressionStatement\n map.put(line,line); "]
108943[label="methodInvocation\n map.put(line,line) "]
118944[label="typeName\n map "]
118945[label="argumentList\n line,line "]
128946[label="expressionName\n line "]
128947[label="expressionName\n line "]
68948[label="localVariableDeclarationStatement\n Trietrie=newTrie(); "]
78949[label="localVariableDeclaration\n Trietrie=newTrie() "]
88950[label="unannClassType_lfno_unannClassOrInterfaceType\n Trie "]
88951[label="variableDeclarator\n trie=newTrie() "]
98952[label="variableDeclaratorId\n trie "]
98953[label="classInstanceCreationExpression_lfno_primary\n newTrie() "]
68954[label="expressionStatement\n trie.addAllKeyword(map.keySet()); "]
78955[label="methodInvocation\n trie.addAllKeyword(map.keySet()) "]
88956[label="typeName\n trie "]
88957[label="methodInvocation_lfno_primary\n map.keySet() "]
98958[label="typeName\n map "]
68959[label="localVariableDeclarationStatement\n AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>(); "]
78960[label="localVariableDeclaration\n AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>() "]
88961[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
98962[label="typeArguments\n <String> "]
108963[label="classType_lfno_classOrInterfaceType\n String "]
88964[label="variableDeclarator\n act=newAhoCorasickDoubleArrayTrie<String>() "]
98965[label="variableDeclaratorId\n act "]
98966[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie<String>() "]
108967[label="typeArguments\n <String> "]
118968[label="classType_lfno_classOrInterfaceType\n String "]
68969[label="localVariableDeclarationStatement\n longtimeMillis=System.currentTimeMillis(); "]
78970[label="localVariableDeclaration\n longtimeMillis=System.currentTimeMillis() "]
88971[label="integralType\n long "]
88972[label="variableDeclarator\n timeMillis=System.currentTimeMillis() "]
98973[label="variableDeclaratorId\n timeMillis "]
98974[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
108975[label="typeName\n System "]
68976[label="expressionStatement\n act.build(map); "]
78977[label="methodInvocation\n act.build(map) "]
88978[label="typeName\n act "]
88979[label="expressionName\n map "]
68980[label="expressionStatement\n System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\"); "]
78981[label="methodInvocation\n System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\") "]
88982[label="typeName\n System.out "]
98983[label="packageOrTypeName\n System "]
88984[label="additiveExpression\n \"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\" "]
98985[label="additiveExpression\n \"构建耗时：\"+(System.currentTimeMillis()-timeMillis) "]
108986[label="literal\n \"构建耗时：\" "]
108987[label="primaryNoNewArray_lfno_primary\n (System.currentTimeMillis()-timeMillis) "]
118988[label="additiveExpression\n System.currentTimeMillis()-timeMillis "]
128989[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
138990[label="typeName\n System "]
128991[label="expressionName\n timeMillis "]
98992[label="literal\n \" ms\" "]
68993[label="localVariableDeclarationStatement\n LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\"); "]
78994[label="localVariableDeclaration\n LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\") "]
88995[label="unannClassType_lfno_unannClassOrInterfaceType\n LinkedList<String> "]
98996[label="typeArguments\n <String> "]
108997[label="classType_lfno_classOrInterfaceType\n String "]
88998[label="variableDeclarator\n lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\") "]
98999[label="variableDeclaratorId\n lineList "]
99000[label="methodInvocation_lfno_primary\n IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\") "]
109001[label="typeName\n IOUtil "]
109002[label="literal\n \"D:\\Doc\\语料库\\《我的团长我的团》.txt\" "]
69003[label="expressionStatement\n timeMillis=System.currentTimeMillis(); "]
79004[label="assignment\n timeMillis=System.currentTimeMillis() "]
89005[label="expressionName\n timeMillis "]
89006[label="assignmentOperator\n = "]
89007[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
99008[label="typeName\n System "]
69009[label="enhancedForStatement\n for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}} "]
79010[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
79011[label="variableDeclaratorId\n sentence "]
79012[label="expressionName\n lineList "]
79013[label="block\n {List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}} "]
89014[label="blockStatements\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);} "]
99015[label="localVariableDeclarationStatement\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence); "]
109016[label="localVariableDeclaration\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence) "]
119017[label="unannClassType_lfno_unannClassOrInterfaceType\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>> "]
129018[label="typeArguments\n <AhoCorasickDoubleArrayTrie<String>.Hit<String>> "]
139019[label="classOrInterfaceType\n AhoCorasickDoubleArrayTrie<String>.Hit<String> "]
149020[label="classType_lfno_classOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
159021[label="typeArguments\n <String> "]
169022[label="classType_lfno_classOrInterfaceType\n String "]
149023[label="classType_lf_classOrInterfaceType\n .Hit<String> "]
159024[label="typeArguments\n <String> "]
169025[label="classType_lfno_classOrInterfaceType\n String "]
119026[label="variableDeclarator\n entryList=act.parseText(sentence) "]
129027[label="variableDeclaratorId\n entryList "]
129028[label="methodInvocation_lfno_primary\n act.parseText(sentence) "]
139029[label="typeName\n act "]
139030[label="expressionName\n sentence "]
99031[label="enhancedForStatement\n for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);} "]
109032[label="unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String>.Hit<String> "]
119033[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
129034[label="typeArguments\n <String> "]
139035[label="classType_lfno_classOrInterfaceType\n String "]
119036[label="unannClassType_lf_unannClassOrInterfaceType\n .Hit<String> "]
129037[label="typeArguments\n <String> "]
139038[label="classType_lfno_classOrInterfaceType\n String "]
109039[label="variableDeclaratorId\n entry "]
109040[label="expressionName\n entryList "]
109041[label="block\n {intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);} "]
119042[label="blockStatements\n intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value); "]
129043[label="localVariableDeclarationStatement\n intend=entry.end; "]
139044[label="localVariableDeclaration\n intend=entry.end "]
149045[label="integralType\n int "]
149046[label="variableDeclarator\n end=entry.end "]
159047[label="variableDeclaratorId\n end "]
159048[label="expressionName\n entry.end "]
169049[label="ambiguousName\n entry "]
129050[label="localVariableDeclarationStatement\n intstart=entry.begin; "]
139051[label="localVariableDeclaration\n intstart=entry.begin "]
149052[label="integralType\n int "]
149053[label="variableDeclarator\n start=entry.begin "]
159054[label="variableDeclaratorId\n start "]
159055[label="expressionName\n entry.begin "]
169056[label="ambiguousName\n entry "]
129057[label="expressionStatement\n assertEquals(sentence.substring(start,end),entry.value); "]
139058[label="methodInvocation\n assertEquals(sentence.substring(start,end),entry.value) "]
149059[label="methodName\n assertEquals "]
149060[label="argumentList\n sentence.substring(start,end),entry.value "]
159061[label="methodInvocation_lfno_primary\n sentence.substring(start,end) "]
169062[label="typeName\n sentence "]
169063[label="argumentList\n start,end "]
179064[label="expressionName\n start "]
179065[label="expressionName\n end "]
159066[label="expressionName\n entry.value "]
169067[label="ambiguousName\n entry "]
69068[label="expressionStatement\n System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis); "]
79069[label="methodInvocation\n System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis) "]
89070[label="typeName\n System.out "]
99071[label="packageOrTypeName\n System "]
89072[label="argumentList\n \"%d ms\n\",System.currentTimeMillis()-timeMillis "]
99073[label="literal\n \"%d ms\n\" "]
99074[label="additiveExpression\n System.currentTimeMillis()-timeMillis "]
109075[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
119076[label="typeName\n System "]
109077[label="expressionName\n timeMillis "]
39078[label="methodDeclaration\n publicvoidtestHasKeyword()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));}assertTrue(trie.hasKeyword(\"ushers\"));assertFalse(trie.hasKeyword(\"构建耗时\"));} "]
49079[label="methodModifier\n public "]
49080[label="methodHeader\n voidtestHasKeyword()throwsException "]
59081[label="result\n void "]
59082[label="methodDeclarator\n testHasKeyword() "]
59083[label="throws_\n throwsException "]
69084[label="classType\n Exception "]
49085[label="block\n {TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));}assertTrue(trie.hasKeyword(\"ushers\"));assertFalse(trie.hasKeyword(\"构建耗时\"));} "]
59086[label="blockStatements\n TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));}assertTrue(trie.hasKeyword(\"ushers\"));assertFalse(trie.hasKeyword(\"构建耗时\")); "]
69087[label="localVariableDeclarationStatement\n TreeMap<String,String>map=newTreeMap<String,String>(); "]
79088[label="localVariableDeclaration\n TreeMap<String,String>map=newTreeMap<String,String>() "]
89089[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
99090[label="typeArguments\n <String,String> "]
109091[label="typeArgumentList\n String,String "]
119092[label="classType_lfno_classOrInterfaceType\n String "]
119093[label="classType_lfno_classOrInterfaceType\n String "]
89094[label="variableDeclarator\n map=newTreeMap<String,String>() "]
99095[label="variableDeclaratorId\n map "]
99096[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
109097[label="typeArguments\n <String,String> "]
119098[label="typeArgumentList\n String,String "]
129099[label="classType_lfno_classOrInterfaceType\n String "]
129100[label="classType_lfno_classOrInterfaceType\n String "]
69101[label="localVariableDeclarationStatement\n String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"}; "]
79102[label="localVariableDeclaration\n String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
89103[label="unannArrayType\n String[] "]
99104[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
99105[label="dims\n [] "]
89106[label="variableDeclarator\n keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
99107[label="variableDeclaratorId\n keyArray "]
99108[label="arrayCreationExpression\n newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
109109[label="classType_lfno_classOrInterfaceType\n String "]
109110[label="dims\n [] "]
109111[label="arrayInitializer\n {\"hers\",\"his\",\"she\",\"he\"} "]
119112[label="variableInitializerList\n \"hers\",\"his\",\"she\",\"he\" "]
129113[label="literal\n \"hers\" "]
129114[label="literal\n \"his\" "]
129115[label="literal\n \"she\" "]
129116[label="literal\n \"he\" "]
69117[label="enhancedForStatement\n for(Stringkey:keyArray){map.put(key,key);} "]
79118[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
79119[label="variableDeclaratorId\n key "]
79120[label="expressionName\n keyArray "]
79121[label="block\n {map.put(key,key);} "]
89122[label="expressionStatement\n map.put(key,key); "]
99123[label="methodInvocation\n map.put(key,key) "]
109124[label="typeName\n map "]
109125[label="argumentList\n key,key "]
119126[label="expressionName\n key "]
119127[label="expressionName\n key "]
69128[label="localVariableDeclarationStatement\n Trietrie=newTrie(); "]
79129[label="localVariableDeclaration\n Trietrie=newTrie() "]
89130[label="unannClassType_lfno_unannClassOrInterfaceType\n Trie "]
89131[label="variableDeclarator\n trie=newTrie() "]
99132[label="variableDeclaratorId\n trie "]
99133[label="classInstanceCreationExpression_lfno_primary\n newTrie() "]
69134[label="expressionStatement\n trie.addAllKeyword(map.keySet()); "]
79135[label="methodInvocation\n trie.addAllKeyword(map.keySet()) "]
89136[label="typeName\n trie "]
89137[label="methodInvocation_lfno_primary\n map.keySet() "]
99138[label="typeName\n map "]
69139[label="enhancedForStatement\n for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));} "]
79140[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
79141[label="variableDeclaratorId\n key "]
79142[label="expressionName\n keyArray "]
79143[label="block\n {assertTrue(trie.hasKeyword(key));} "]
89144[label="expressionStatement\n assertTrue(trie.hasKeyword(key)); "]
99145[label="methodInvocation\n assertTrue(trie.hasKeyword(key)) "]
109146[label="methodName\n assertTrue "]
109147[label="methodInvocation_lfno_primary\n trie.hasKeyword(key) "]
119148[label="typeName\n trie "]
119149[label="expressionName\n key "]
69150[label="expressionStatement\n assertTrue(trie.hasKeyword(\"ushers\")); "]
79151[label="methodInvocation\n assertTrue(trie.hasKeyword(\"ushers\")) "]
89152[label="methodName\n assertTrue "]
89153[label="methodInvocation_lfno_primary\n trie.hasKeyword(\"ushers\") "]
99154[label="typeName\n trie "]
99155[label="literal\n \"ushers\" "]
69156[label="expressionStatement\n assertFalse(trie.hasKeyword(\"构建耗时\")); "]
79157[label="methodInvocation\n assertFalse(trie.hasKeyword(\"构建耗时\")) "]
89158[label="methodName\n assertFalse "]
89159[label="methodInvocation_lfno_primary\n trie.hasKeyword(\"构建耗时\") "]
99160[label="typeName\n trie "]
99161[label="literal\n \"构建耗时\" "]
09162[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser;importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie;importcom.hankcs.hanlp.collection.trie.ITrie;importcom.hankcs.hanlp.corpus.io.ByteArray;importcom.hankcs.hanlp.corpus.io.ICacheAble;importcom.hankcs.hanlp.utility.TextUtility;importjava.io.DataOutputStream;importjava.util.Map;importjava.util.TreeMap;publicclassAlphabetimplementsICacheAble{ITrie<Integer>trie;String[]idToLabelMap;publicAlphabet(){trie=newDoubleArrayTrie<Integer>();}publicStringlabelOf(intid){returnidToLabelMap[id];}publicintbuild(TreeMap<String,Integer>keyValueMap){idToLabelMap=newString[keyValueMap.size()];for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();}returntrie.build(keyValueMap);}publicIntegeridOf(char[]label){returntrie.get(label);}publicIntegeridOf(Stringlabel){returntrie.get(label);}publicintsize(){returntrie.size();}publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(idToLabelMap.length);for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);}}publicbooleanload(ByteArraybyteArray){idToLabelMap=newString[byteArray.nextInt()];TreeMap<String,Integer>map=newTreeMap<String,Integer>();for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);}returntrie.build(map)==0;}}<EOF> "]
19163[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser; "]
29164[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
39165[label="packageName\n com.hankcs.hanlp.dependency "]
49166[label="packageName\n com.hankcs.hanlp "]
59167[label="packageName\n com.hankcs "]
69168[label="packageName\n com "]
19169[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie; "]
29170[label="typeName\n com.hankcs.hanlp.collection.trie.DoubleArrayTrie "]
39171[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
49172[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
59173[label="packageOrTypeName\n com.hankcs.hanlp "]
69174[label="packageOrTypeName\n com.hankcs "]
79175[label="packageOrTypeName\n com "]
19176[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.ITrie; "]
29177[label="typeName\n com.hankcs.hanlp.collection.trie.ITrie "]
39178[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
49179[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
59180[label="packageOrTypeName\n com.hankcs.hanlp "]
69181[label="packageOrTypeName\n com.hankcs "]
79182[label="packageOrTypeName\n com "]
19183[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.ByteArray; "]
29184[label="typeName\n com.hankcs.hanlp.corpus.io.ByteArray "]
39185[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
49186[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
59187[label="packageOrTypeName\n com.hankcs.hanlp "]
69188[label="packageOrTypeName\n com.hankcs "]
79189[label="packageOrTypeName\n com "]
19190[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.ICacheAble; "]
29191[label="typeName\n com.hankcs.hanlp.corpus.io.ICacheAble "]
39192[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
49193[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
59194[label="packageOrTypeName\n com.hankcs.hanlp "]
69195[label="packageOrTypeName\n com.hankcs "]
79196[label="packageOrTypeName\n com "]
19197[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.TextUtility; "]
29198[label="typeName\n com.hankcs.hanlp.utility.TextUtility "]
39199[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
49200[label="packageOrTypeName\n com.hankcs.hanlp "]
59201[label="packageOrTypeName\n com.hankcs "]
69202[label="packageOrTypeName\n com "]
19203[label="singleTypeImportDeclaration\n importjava.io.DataOutputStream; "]
29204[label="typeName\n java.io.DataOutputStream "]
39205[label="packageOrTypeName\n java.io "]
49206[label="packageOrTypeName\n java "]
19207[label="singleTypeImportDeclaration\n importjava.util.Map; "]
29208[label="typeName\n java.util.Map "]
39209[label="packageOrTypeName\n java.util "]
49210[label="packageOrTypeName\n java "]
19211[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
29212[label="typeName\n java.util.TreeMap "]
39213[label="packageOrTypeName\n java.util "]
49214[label="packageOrTypeName\n java "]
19215[label="normalClassDeclaration\n publicclassAlphabetimplementsICacheAble{ITrie<Integer>trie;String[]idToLabelMap;publicAlphabet(){trie=newDoubleArrayTrie<Integer>();}publicStringlabelOf(intid){returnidToLabelMap[id];}publicintbuild(TreeMap<String,Integer>keyValueMap){idToLabelMap=newString[keyValueMap.size()];for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();}returntrie.build(keyValueMap);}publicIntegeridOf(char[]label){returntrie.get(label);}publicIntegeridOf(Stringlabel){returntrie.get(label);}publicintsize(){returntrie.size();}publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(idToLabelMap.length);for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);}}publicbooleanload(ByteArraybyteArray){idToLabelMap=newString[byteArray.nextInt()];TreeMap<String,Integer>map=newTreeMap<String,Integer>();for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);}returntrie.build(map)==0;}} "]
29216[label="classModifier\n public "]
29217[label="superinterfaces\n implementsICacheAble "]
39218[label="classType\n ICacheAble "]
29219[label="classBody\n {ITrie<Integer>trie;String[]idToLabelMap;publicAlphabet(){trie=newDoubleArrayTrie<Integer>();}publicStringlabelOf(intid){returnidToLabelMap[id];}publicintbuild(TreeMap<String,Integer>keyValueMap){idToLabelMap=newString[keyValueMap.size()];for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();}returntrie.build(keyValueMap);}publicIntegeridOf(char[]label){returntrie.get(label);}publicIntegeridOf(Stringlabel){returntrie.get(label);}publicintsize(){returntrie.size();}publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(idToLabelMap.length);for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);}}publicbooleanload(ByteArraybyteArray){idToLabelMap=newString[byteArray.nextInt()];TreeMap<String,Integer>map=newTreeMap<String,Integer>();for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);}returntrie.build(map)==0;}} "]
39220[label="fieldDeclaration\n ITrie<Integer>trie; "]
49221[label="unannClassType_lfno_unannClassOrInterfaceType\n ITrie<Integer> "]
59222[label="typeArguments\n <Integer> "]
69223[label="classType_lfno_classOrInterfaceType\n Integer "]
49224[label="variableDeclaratorId\n trie "]
39225[label="fieldDeclaration\n String[]idToLabelMap; "]
49226[label="unannArrayType\n String[] "]
59227[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
59228[label="dims\n [] "]
49229[label="variableDeclaratorId\n idToLabelMap "]
39230[label="constructorDeclaration\n publicAlphabet(){trie=newDoubleArrayTrie<Integer>();} "]
49231[label="constructorModifier\n public "]
49232[label="constructorDeclarator\n Alphabet() "]
59233[label="simpleTypeName\n Alphabet "]
49234[label="constructorBody\n {trie=newDoubleArrayTrie<Integer>();} "]
59235[label="expressionStatement\n trie=newDoubleArrayTrie<Integer>(); "]
69236[label="assignment\n trie=newDoubleArrayTrie<Integer>() "]
79237[label="expressionName\n trie "]
79238[label="assignmentOperator\n = "]
79239[label="classInstanceCreationExpression_lfno_primary\n newDoubleArrayTrie<Integer>() "]
89240[label="typeArguments\n <Integer> "]
99241[label="classType_lfno_classOrInterfaceType\n Integer "]
39242[label="methodDeclaration\n publicStringlabelOf(intid){returnidToLabelMap[id];} "]
49243[label="methodModifier\n public "]
49244[label="methodHeader\n StringlabelOf(intid) "]
59245[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
59246[label="methodDeclarator\n labelOf(intid) "]
69247[label="formalParameter\n intid "]
79248[label="integralType\n int "]
79249[label="variableDeclaratorId\n id "]
49250[label="block\n {returnidToLabelMap[id];} "]
59251[label="returnStatement\n returnidToLabelMap[id]; "]
69252[label="arrayAccess_lfno_primary\n idToLabelMap[id] "]
79253[label="expressionName\n idToLabelMap "]
79254[label="expressionName\n id "]
39255[label="methodDeclaration\n publicintbuild(TreeMap<String,Integer>keyValueMap){idToLabelMap=newString[keyValueMap.size()];for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();}returntrie.build(keyValueMap);} "]
49256[label="methodModifier\n public "]
49257[label="methodHeader\n intbuild(TreeMap<String,Integer>keyValueMap) "]
59258[label="integralType\n int "]
59259[label="methodDeclarator\n build(TreeMap<String,Integer>keyValueMap) "]
69260[label="formalParameter\n TreeMap<String,Integer>keyValueMap "]
79261[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,Integer> "]
89262[label="typeArguments\n <String,Integer> "]
99263[label="typeArgumentList\n String,Integer "]
109264[label="classType_lfno_classOrInterfaceType\n String "]
109265[label="classType_lfno_classOrInterfaceType\n Integer "]
79266[label="variableDeclaratorId\n keyValueMap "]
49267[label="block\n {idToLabelMap=newString[keyValueMap.size()];for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();}returntrie.build(keyValueMap);} "]
59268[label="blockStatements\n idToLabelMap=newString[keyValueMap.size()];for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();}returntrie.build(keyValueMap); "]
69269[label="expressionStatement\n idToLabelMap=newString[keyValueMap.size()]; "]
79270[label="assignment\n idToLabelMap=newString[keyValueMap.size()] "]
89271[label="expressionName\n idToLabelMap "]
89272[label="assignmentOperator\n = "]
89273[label="arrayCreationExpression\n newString[keyValueMap.size()] "]
99274[label="classType_lfno_classOrInterfaceType\n String "]
99275[label="dimExpr\n [keyValueMap.size()] "]
109276[label="methodInvocation_lfno_primary\n keyValueMap.size() "]
119277[label="typeName\n keyValueMap "]
69278[label="enhancedForStatement\n for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();} "]
79279[label="unannClassOrInterfaceType\n Map.Entry<String,Integer> "]
89280[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
89281[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,Integer> "]
99282[label="typeArguments\n <String,Integer> "]
109283[label="typeArgumentList\n String,Integer "]
119284[label="classType_lfno_classOrInterfaceType\n String "]
119285[label="classType_lfno_classOrInterfaceType\n Integer "]
79286[label="variableDeclaratorId\n entry "]
79287[label="methodInvocation_lfno_primary\n keyValueMap.entrySet() "]
89288[label="typeName\n keyValueMap "]
79289[label="block\n {idToLabelMap[entry.getValue()]=entry.getKey();} "]
89290[label="expressionStatement\n idToLabelMap[entry.getValue()]=entry.getKey(); "]
99291[label="assignment\n idToLabelMap[entry.getValue()]=entry.getKey() "]
109292[label="arrayAccess\n idToLabelMap[entry.getValue()] "]
119293[label="expressionName\n idToLabelMap "]
119294[label="methodInvocation_lfno_primary\n entry.getValue() "]
129295[label="typeName\n entry "]
109296[label="assignmentOperator\n = "]
109297[label="methodInvocation_lfno_primary\n entry.getKey() "]
119298[label="typeName\n entry "]
69299[label="returnStatement\n returntrie.build(keyValueMap); "]
79300[label="methodInvocation_lfno_primary\n trie.build(keyValueMap) "]
89301[label="typeName\n trie "]
89302[label="expressionName\n keyValueMap "]
39303[label="methodDeclaration\n publicIntegeridOf(char[]label){returntrie.get(label);} "]
49304[label="methodModifier\n public "]
49305[label="methodHeader\n IntegeridOf(char[]label) "]
59306[label="unannClassType_lfno_unannClassOrInterfaceType\n Integer "]
59307[label="methodDeclarator\n idOf(char[]label) "]
69308[label="formalParameter\n char[]label "]
79309[label="unannArrayType\n char[] "]
89310[label="integralType\n char "]
89311[label="dims\n [] "]
79312[label="variableDeclaratorId\n label "]
49313[label="block\n {returntrie.get(label);} "]
59314[label="returnStatement\n returntrie.get(label); "]
69315[label="methodInvocation_lfno_primary\n trie.get(label) "]
79316[label="typeName\n trie "]
79317[label="expressionName\n label "]
39318[label="methodDeclaration\n publicIntegeridOf(Stringlabel){returntrie.get(label);} "]
49319[label="methodModifier\n public "]
49320[label="methodHeader\n IntegeridOf(Stringlabel) "]
59321[label="unannClassType_lfno_unannClassOrInterfaceType\n Integer "]
59322[label="methodDeclarator\n idOf(Stringlabel) "]
69323[label="formalParameter\n Stringlabel "]
79324[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
79325[label="variableDeclaratorId\n label "]
49326[label="block\n {returntrie.get(label);} "]
59327[label="returnStatement\n returntrie.get(label); "]
69328[label="methodInvocation_lfno_primary\n trie.get(label) "]
79329[label="typeName\n trie "]
79330[label="expressionName\n label "]
39331[label="methodDeclaration\n publicintsize(){returntrie.size();} "]
49332[label="methodModifier\n public "]
49333[label="methodHeader\n intsize() "]
59334[label="integralType\n int "]
59335[label="methodDeclarator\n size() "]
49336[label="block\n {returntrie.size();} "]
59337[label="returnStatement\n returntrie.size(); "]
69338[label="methodInvocation_lfno_primary\n trie.size() "]
79339[label="typeName\n trie "]
39340[label="methodDeclaration\n publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(idToLabelMap.length);for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);}} "]
49341[label="methodModifier\n public "]
49342[label="methodHeader\n voidsave(DataOutputStreamout)throwsException "]
59343[label="result\n void "]
59344[label="methodDeclarator\n save(DataOutputStreamout) "]
69345[label="formalParameter\n DataOutputStreamout "]
79346[label="unannClassType_lfno_unannClassOrInterfaceType\n DataOutputStream "]
79347[label="variableDeclaratorId\n out "]
59348[label="throws_\n throwsException "]
69349[label="classType\n Exception "]
49350[label="block\n {out.writeInt(idToLabelMap.length);for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);}} "]
59351[label="blockStatements\n out.writeInt(idToLabelMap.length);for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);} "]
69352[label="expressionStatement\n out.writeInt(idToLabelMap.length); "]
79353[label="methodInvocation\n out.writeInt(idToLabelMap.length) "]
89354[label="typeName\n out "]
89355[label="expressionName\n idToLabelMap.length "]
99356[label="ambiguousName\n idToLabelMap "]
69357[label="enhancedForStatement\n for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);} "]
79358[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
79359[label="variableDeclaratorId\n value "]
79360[label="expressionName\n idToLabelMap "]
79361[label="block\n {TextUtility.writeString(value,out);} "]
89362[label="expressionStatement\n TextUtility.writeString(value,out); "]
99363[label="methodInvocation\n TextUtility.writeString(value,out) "]
109364[label="typeName\n TextUtility "]
109365[label="argumentList\n value,out "]
119366[label="expressionName\n value "]
119367[label="expressionName\n out "]
39368[label="methodDeclaration\n publicbooleanload(ByteArraybyteArray){idToLabelMap=newString[byteArray.nextInt()];TreeMap<String,Integer>map=newTreeMap<String,Integer>();for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);}returntrie.build(map)==0;} "]
49369[label="methodModifier\n public "]
49370[label="methodHeader\n booleanload(ByteArraybyteArray) "]
59371[label="unannPrimitiveType\n boolean "]
59372[label="methodDeclarator\n load(ByteArraybyteArray) "]
69373[label="formalParameter\n ByteArraybyteArray "]
79374[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
79375[label="variableDeclaratorId\n byteArray "]
49376[label="block\n {idToLabelMap=newString[byteArray.nextInt()];TreeMap<String,Integer>map=newTreeMap<String,Integer>();for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);}returntrie.build(map)==0;} "]
59377[label="blockStatements\n idToLabelMap=newString[byteArray.nextInt()];TreeMap<String,Integer>map=newTreeMap<String,Integer>();for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);}returntrie.build(map)==0; "]
69378[label="expressionStatement\n idToLabelMap=newString[byteArray.nextInt()]; "]
79379[label="assignment\n idToLabelMap=newString[byteArray.nextInt()] "]
89380[label="expressionName\n idToLabelMap "]
89381[label="assignmentOperator\n = "]
89382[label="arrayCreationExpression\n newString[byteArray.nextInt()] "]
99383[label="classType_lfno_classOrInterfaceType\n String "]
99384[label="dimExpr\n [byteArray.nextInt()] "]
109385[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
119386[label="typeName\n byteArray "]
69387[label="localVariableDeclarationStatement\n TreeMap<String,Integer>map=newTreeMap<String,Integer>(); "]
79388[label="localVariableDeclaration\n TreeMap<String,Integer>map=newTreeMap<String,Integer>() "]
89389[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,Integer> "]
99390[label="typeArguments\n <String,Integer> "]
109391[label="typeArgumentList\n String,Integer "]
119392[label="classType_lfno_classOrInterfaceType\n String "]
119393[label="classType_lfno_classOrInterfaceType\n Integer "]
89394[label="variableDeclarator\n map=newTreeMap<String,Integer>() "]
99395[label="variableDeclaratorId\n map "]
99396[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,Integer>() "]
109397[label="typeArguments\n <String,Integer> "]
119398[label="typeArgumentList\n String,Integer "]
129399[label="classType_lfno_classOrInterfaceType\n String "]
129400[label="classType_lfno_classOrInterfaceType\n Integer "]
69401[label="basicForStatement\n for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);} "]
79402[label="localVariableDeclaration\n inti=0 "]
89403[label="integralType\n int "]
89404[label="variableDeclarator\n i=0 "]
99405[label="variableDeclaratorId\n i "]
99406[label="literal\n 0 "]
79407[label="relationalExpression\n i<idToLabelMap.length "]
89408[label="expressionName\n i "]
89409[label="expressionName\n idToLabelMap.length "]
99410[label="ambiguousName\n idToLabelMap "]
79411[label="postIncrementExpression\n i++ "]
89412[label="expressionName\n i "]
79413[label="block\n {idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);} "]
89414[label="blockStatements\n idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i); "]
99415[label="expressionStatement\n idToLabelMap[i]=byteArray.nextString(); "]
109416[label="assignment\n idToLabelMap[i]=byteArray.nextString() "]
119417[label="arrayAccess\n idToLabelMap[i] "]
129418[label="expressionName\n idToLabelMap "]
129419[label="expressionName\n i "]
119420[label="assignmentOperator\n = "]
119421[label="methodInvocation_lfno_primary\n byteArray.nextString() "]
129422[label="typeName\n byteArray "]
99423[label="expressionStatement\n map.put(idToLabelMap[i],i); "]
109424[label="methodInvocation\n map.put(idToLabelMap[i],i) "]
119425[label="typeName\n map "]
119426[label="argumentList\n idToLabelMap[i],i "]
129427[label="arrayAccess_lfno_primary\n idToLabelMap[i] "]
139428[label="expressionName\n idToLabelMap "]
139429[label="expressionName\n i "]
129430[label="expressionName\n i "]
69431[label="returnStatement\n returntrie.build(map)==0; "]
79432[label="equalityExpression\n trie.build(map)==0 "]
89433[label="methodInvocation_lfno_primary\n trie.build(map) "]
99434[label="typeName\n trie "]
99435[label="expressionName\n map "]
89436[label="literal\n 0 "]
-10->01
01->12
12->23
23->34
34->45
45->56
56->67
67->78
01->19
19->210
19->211
211->312
19->213
213->314
314->415
415->516
19->217
217->318
318->419
318->420
420->521
318->422
217->323
323->424
424->525
323->426
323->427
427->528
427->529
323->430
430->531
531->632
-10->033
033->134
134->235
235->336
336->437
437->538
538->639
639->740
033->141
141->242
141->243
243->344
141->245
245->346
346->447
447->548
447->549
346->450
245->351
351->452
351->453
245->354
354->455
354->456
456->557
456->558
558->659
659->760
659->761
558->662
354->463
463->564
564->665
665->766
766->867
665->768
665->769
245->370
370->471
370->472
472->573
472->574
370->475
475->576
576->677
677->778
677->779
779->880
779->881
245->382
382->483
382->484
484->585
382->486
245->387
387->488
387->489
489->590
489->591
591->692
692->793
793->894
793->895
692->796
387->497
497->598
598->699
699->7100
7100->8101
8101->9102
7100->8103
7100->8104
598->6105
6105->7106
-10->0107
0107->1108
1108->2109
2109->3110
3110->4111
4111->5112
5112->6113
0107->1114
1114->2115
2115->3116
3116->4117
4117->5118
5118->6119
6119->7120
0107->1121
1121->2122
2122->3123
3123->4124
4124->5125
5125->6126
6126->7127
0107->1128
1128->2129
2129->3130
3130->4131
4131->5132
5132->6133
6133->7134
0107->1135
1135->2136
2136->3137
3137->4138
4138->5139
5139->6140
6140->7141
0107->1142
1142->2143
2143->3144
3144->4145
4145->5146
5146->6147
6147->7148
0107->1149
1149->2150
2150->3151
3151->4152
4152->5153
5153->6154
6154->7155
0107->1156
1156->2157
2157->3158
3158->4159
0107->1160
1160->2161
2161->3162
3162->4163
0107->1164
1164->2165
2165->3166
3166->4167
0107->1168
1168->2169
2169->3170
3170->4171
4171->5172
5172->6173
6173->7174
0107->1175
1175->2176
1175->2177
1175->2178
2178->3179
1175->2180
2180->3181
3181->4182
4182->5183
3181->4184
3181->4185
4185->5186
4185->5187
5187->6188
6188->7189
6188->7190
3181->4191
4191->5192
5192->6193
2180->3194
3194->4195
3194->4196
4196->5197
4196->5198
2180->3199
3199->4200
4200->5201
3199->4202
3199->4203
4203->5204
4203->5205
5205->6206
6206->7207
6206->7208
4203->5209
5209->6210
6210->7211
6210->7212
3199->4213
4213->5214
5214->6215
6215->7216
7216->8217
8217->9218
9218->10219
10219->11220
10219->11221
7216->8222
8222->9223
8222->9224
9224->10225
9224->10226
5214->6227
6227->7228
7228->8229
7228->8230
2180->3231
3231->4232
4232->5233
3231->4234
3231->4235
4235->5236
4235->5237
5237->6238
6238->7239
6238->7240
4235->5241
5241->6242
6242->7243
6242->7244
3231->4245
4245->5246
5246->6247
6247->7248
7248->8249
8249->9250
9250->10251
10251->11252
10251->11253
7248->8254
8254->9255
8254->9256
9256->10257
9256->10258
5246->6259
6259->7260
7260->8261
7260->8262
2180->3263
3263->4264
4264->5265
3263->4266
3263->4267
4267->5268
4267->5269
5269->6270
6270->7271
7271->8272
7271->8273
6270->7274
7274->8275
7274->8276
4267->5277
5277->6278
3263->4279
4279->5280
5280->6281
6281->7282
7282->8283
7282->8284
8284->9285
8284->9286
5280->6287
6287->7288
7288->8289
7288->8290
8290->9291
8290->9292
5280->6293
6293->7294
7294->8295
7294->8296
2180->3297
3297->4298
4298->5299
3297->4300
3297->4301
4301->5302
4301->5303
5303->6304
6304->7305
7305->8306
8306->9307
9307->10308
9307->10309
10309->11310
10309->11311
6304->7312
4301->5313
5313->6314
3297->4315
4315->5316
5316->6317
6317->7318
7318->8319
7318->8320
8320->9321
8320->9322
5316->6323
6323->7324
7324->8325
7324->8326
5316->6327
6327->7328
7328->8329
7328->8330
8330->9331
8330->9332
9332->10333
5316->6334
6334->7335
7335->8336
7335->8337
8337->9338
8337->9339
5316->6340
6340->7341
7341->8342
7341->8343
8343->9344
9344->10345
10345->11346
10345->11347
11347->12348
11347->12349
6340->7350
6340->7351
7351->8352
6340->7353
7353->8354
8354->9355
9355->10356
10356->11357
10356->11358
11358->12359
11358->12360
12360->13361
8354->9362
9362->10363
10363->11364
10363->11365
11365->12366
11365->12367
8354->9368
9368->10369
9368->10370
9368->10371
10371->11372
9368->10373
10373->11374
11374->12375
12375->13376
12375->13377
13377->14378
13377->14379
8354->9380
9380->10381
10381->11382
8354->9383
9383->10384
10384->11385
10384->11386
11386->12387
11386->12388
12388->13389
12388->13390
13390->14391
13390->14392
5316->6393
6393->7394
7394->8395
7394->8396
5316->6397
6397->7398
7398->8399
7398->8400
2180->3401
3401->4402
4402->5403
3401->4404
3401->4405
4405->5406
4405->5407
5407->6408
6408->7409
6408->7410
4405->5411
5411->6412
3401->4413
4413->5414
5414->6415
6415->7416
6415->7417
7417->8418
7417->8419
2180->3420
3420->4421
4421->5422
3420->4423
3420->4424
4424->5425
5425->6426
6426->7427
7427->8428
7427->8429
4424->5430
5430->6431
6431->7432
6431->7433
3420->4434
4434->5435
5435->6436
6436->7437
7437->8438
7437->8439
8439->9440
8439->9441
9441->10442
5435->6443
6443->7444
7444->8445
7444->8446
6443->7447
7447->8448
8448->9449
9449->10450
5435->6451
6451->7452
7452->8453
7452->8454
6451->7455
7455->8456
8456->9457
9457->10458
5435->6459
6459->7460
7460->8461
8461->9462
8461->9463
7460->8464
8464->9465
8464->9466
9466->10467
9466->10468
5435->6469
6469->7470
7470->8471
8471->9472
9472->10473
10473->11474
10473->11475
7470->8476
8476->9477
8476->9478
9478->10479
10479->11480
11480->12481
11480->12482
5435->6483
6483->7484
7484->8485
7484->8486
8486->9487
8486->9488
6483->7489
7489->8490
7489->8491
8491->9492
6483->7493
7493->8494
6483->7495
7495->8496
8496->9497
9497->10498
9497->10499
10499->11500
11500->12501
12501->13502
11500->12503
10499->11504
11504->12505
11504->12506
5435->6507
6507->7508
2180->3509
3509->4510
4510->5511
3509->4512
3509->4513
4513->5514
4513->5515
5515->6516
6516->7517
6516->7518
4513->5519
5519->6520
6520->7521
6520->7522
3509->4523
4523->5524
5524->6525
6525->7526
7526->8527
7526->8528
8528->9529
8528->9530
9530->10531
5524->6532
6532->7533
7533->8534
7533->8535
6532->7536
7536->8537
8537->9538
9538->10539
5524->6540
6540->7541
7541->8542
7541->8543
6540->7544
7544->8545
8545->9546
9546->10547
5524->6548
6548->7549
7549->8550
8550->9551
8550->9552
7549->8553
8553->9554
8553->9555
9555->10556
9555->10557
5524->6558
6558->7559
7559->8560
7559->8561
8561->9562
8561->9563
9563->10564
5524->6565
6565->7566
7566->8567
7566->8568
8568->9569
8568->9570
9570->10571
5524->6572
6572->7573
7573->8574
7573->8575
8575->9576
8575->9577
6572->7578
7578->8579
7578->8580
8580->9581
6572->7582
7582->8583
6572->7584
7584->8585
8585->9586
9586->10587
10587->11588
10587->11589
9586->10590
8585->9591
9591->10592
10592->11593
11593->12594
12594->13595
12594->13596
12594->13597
13597->14598
13597->14599
10592->11600
11600->12601
12601->13602
12601->13603
12601->13604
5524->6605
6605->7606
-10->0607
0607->1608
1608->2609
2609->3610
3610->4611
4611->5612
5612->6613
0607->1614
1614->2615
2615->3616
3616->4617
0607->1618
1618->2619
2619->3620
3620->4621
0607->1622
1622->2623
1622->2624
1622->2625
2625->3626
3626->4627
3626->4628
3626->4629
3626->4630
4630->5631
4630->5632
2625->3633
3633->4634
3633->4635
3633->4636
2625->3637
3637->4638
3637->4639
3637->4640
3637->4641
2625->3642
3642->4643
3642->4644
4644->5645
4644->5646
5646->6647
5646->6648
3642->4649
4649->5650
5650->6651
6651->7652
6651->7653
6651->7654
7654->8655
2625->3656
3656->4657
3656->4658
4658->5659
5659->6660
5659->6661
4658->5662
5662->6663
6663->7664
7664->8665
7664->8666
6663->7667
7667->8668
7667->8669
3656->4670
4670->5671
5671->6672
6672->7673
7673->8674
8674->9675
7673->8676
8676->9677
8676->9678
5671->6679
6679->7680
7680->8681
8681->9682
8681->9683
7680->8684
8684->9685
8684->9686
9686->10687
9686->10688
10688->11689
5671->6690
6690->7691
7691->8692
7691->8693
8693->9694
8693->9695
6690->7696
7696->8697
7696->8698
6690->7699
7699->8700
6690->7701
7701->8702
8702->9703
9703->10704
10704->11705
10704->11706
11706->12707
11706->12708
12708->13709
8702->9710
9710->10711
10711->11712
10711->11713
9710->10714
10714->11715
8702->9716
9716->10717
10717->11718
11718->12719
11718->12720
10717->11721
10717->11722
5671->6723
6723->7724
2625->3725
3725->4726
3725->4727
4727->5728
4727->5729
3725->4730
4730->5731
5731->6732
6732->7733
7733->8734
7733->8735
8735->9736
8735->9737
9737->10738
5731->6739
6739->7740
7740->8741
8741->9742
9742->10743
10743->11744
10743->11745
9742->10746
10746->11747
11747->12748
10746->11749
8741->9750
9750->10751
9750->10752
7740->8753
7740->8754
2625->3755
3755->4756
3755->4757
3755->4758
4758->5759
4758->5760
3755->4761
2625->3762
3762->4763
3762->4764
3762->4765
4765->5766
4765->5767
4765->5768
5768->6769
3762->4770
4770->5771
5771->6772
6772->7773
7773->8774
5771->6775
6775->7776
7776->8777
7776->8778
7776->8779
8779->9780
8779->9781
9781->10782
5771->6783
6783->7784
7784->8785
7784->8786
7784->8787
8787->9788
8787->9789
9789->10790
5771->6791
6791->7792
7792->8793
8793->9794
9794->10795
10795->11796
10795->11797
10795->11798
11798->12799
12799->13800
8793->9801
9801->10802
10802->11803
10802->11804
11804->12805
11804->12806
8793->9807
9807->10808
10808->11809
11809->12810
12810->13811
12810->13812
12810->13813
13813->14814
10808->11815
9807->10816
10816->11817
11817->12818
12818->13819
13819->14820
14820->15821
14820->15822
13819->14823
14823->15824
14823->15825
15825->16826
15825->16827
16827->17828
11817->12829
12829->13830
13830->14831
14831->15832
14831->15833
13830->14834
14834->15835
14834->15836
15836->16837
15836->16838
16838->17839
11817->12840
12840->13841
13841->14842
14842->15843
14842->15844
15844->16845
15844->16846
13841->14847
14847->15848
14847->15849
13841->14850
14850->15851
13841->14852
14852->15853
15853->16854
16854->17855
16854->17856
16854->17857
17857->18858
16854->17859
17859->18860
18860->19861
19861->20862
19861->20863
18860->19864
15853->16865
16865->17866
17866->18867
17866->18868
18868->19869
18868->19870
15853->16871
16871->17872
17872->18873
17872->18874
18874->19875
18874->19876
16871->17877
17877->18878
17877->18879
16871->17880
17880->18881
16871->17882
17882->18883
18883->19884
19884->20885
19884->20886
19884->20887
20887->21888
21888->22889
22889->23890
21888->22891
20887->21892
21892->22893
21892->22894
22894->23895
22894->23896
15853->16897
16897->17898
17898->18899
17898->18900
18900->19901
18900->19902
16897->17903
17903->18904
17903->18905
16897->17906
17906->18907
16897->17908
17908->18909
18909->19910
19910->20911
19910->20912
20912->21913
20912->21914
18909->19915
19915->20916
20916->21917
21917->22918
22918->23919
22918->23920
23920->24921
23920->24922
24922->25923
24922->25924
21917->22925
22925->23926
22925->23927
21917->22928
22928->23929
21917->22930
22930->23931
23931->24932
24932->25933
25933->26934
26934->27935
26934->27936
25933->26937
25933->26938
26938->27939
26938->27940
27940->28941
27940->28942
23931->24943
24943->25944
25944->26945
26945->27946
26945->27947
25944->26948
25944->26949
26949->27950
26949->27951
27951->28952
27951->28953
20916->21954
21954->22955
22955->23956
23956->24957
23956->24958
22955->23959
22955->23960
20916->21961
21961->22962
22962->23963
23963->24964
23963->24965
22962->23966
22962->23967
23967->24968
23967->24969
20916->21970
11817->12971
12971->13972
13972->14973
14973->15974
13972->14975
11817->12976
12976->13977
13977->14978
13977->14979
14979->15980
14979->15981
12976->13982
13982->14983
13982->14984
12976->13985
13985->14986
12976->13987
13987->14988
14988->15989
15989->16990
14988->15991
15991->16992
15991->16993
16993->17994
16993->17995
15991->16996
16996->17997
16996->17998
6791->7999
7999->81000
81000->91001
91001->101002
101002->111003
2625->31004
31004->41005
31004->41006
31004->41007
41007->51008
51008->61009
61009->71010
61009->71011
51008->61012
41007->51013
51013->61014
61014->71015
61014->71016
51013->61017
41007->51018
51018->61019
51018->61020
61020->71021
61020->71022
71022->81023
81023->91024
91024->101025
91024->101026
81023->91027
71022->81028
81028->91029
91029->101030
91029->101031
81028->91032
51018->61033
61033->71034
71034->81035
81035->91036
91036->101037
101037->111038
91036->101039
91036->101040
71034->81041
81041->91042
91042->101043
101043->111044
91042->101045
91042->101046
-10->01047
01047->11048
11048->21049
21049->31050
31050->41051
41051->51052
51052->61053
01047->11054
11054->21055
21055->31056
31056->41057
41057->51058
51058->61059
61059->71060
01047->11061
11061->21062
21062->31063
31063->41064
41064->51065
51065->61066
61066->71067
01047->11068
11068->21069
21069->31070
31070->41071
41071->51072
51072->61073
61073->71074
01047->11075
11075->21076
21076->31077
31077->41078
41078->51079
51079->61080
61080->71081
01047->11082
11082->21083
21083->31084
31084->41085
41085->51086
51086->61087
61087->71088
01047->11089
11089->21090
21090->31091
31091->41092
41092->51093
51093->61094
61094->71095
01047->11096
11096->21097
21097->31098
31098->41099
01047->11100
11100->21101
21101->31102
31102->41103
01047->11104
11104->21105
21105->31106
31106->41107
01047->11108
11108->21109
21109->31110
31110->41111
41111->51112
51112->61113
61113->71114
01047->11115
11115->21116
11115->21117
11115->21118
21118->31119
11115->21120
21120->31121
31121->41122
31121->41123
31121->41124
21120->31125
31125->41126
31125->41127
31125->41128
21120->31129
31129->41130
31129->41131
31129->41132
21120->31133
31133->41134
31133->41135
31133->41136
21120->31137
31137->41138
31137->41139
41139->51140
41139->51141
51141->61142
51141->61143
31137->41144
41144->51145
51145->61146
61146->71147
71147->81148
71147->81149
71147->81150
81150->91151
91151->101152
51145->61153
61153->71154
71154->81155
71154->81156
71154->81157
81157->91158
51145->61159
61159->71160
71160->81161
71160->81162
71160->81163
81163->91164
91164->101165
51145->61166
61166->71167
71167->81168
71167->81169
71167->81170
21120->31171
31171->41172
31171->41173
41173->51174
31171->41175
41175->51176
51176->61177
61177->71178
71178->81179
71178->81180
71178->81181
51176->61182
61182->71183
71183->81184
71183->81185
71183->81186
51176->61187
61187->71188
71188->81189
71188->81190
71188->81191
21120->31192
31192->41193
31192->41194
41194->51195
41194->51196
51196->61197
61197->71198
61197->71199
31192->41200
41200->51201
51201->61202
61202->71203
71203->81204
81204->91205
71203->81206
71203->81207
51201->61208
61208->71209
21120->31210
31210->41211
31210->41212
41212->51213
41212->51214
51214->61215
61215->71216
71216->81217
71216->81218
61215->71219
71219->81220
71219->81221
31210->41222
41222->51223
51223->61224
61224->71225
71225->81226
81226->91227
81226->91228
71225->81229
81229->91230
81229->91231
91231->101232
91231->101233
51223->61234
61234->71235
71235->81236
71235->81237
81237->91238
91238->101239
101239->111240
91238->101241
101241->111242
91238->101243
91238->101244
71235->81245
81245->91246
91246->101247
91246->101248
91246->101249
91246->101250
21120->31251
31251->41252
31251->41253
41253->51254
41253->51255
31251->41256
41256->51257
51257->61258
21120->31259
31259->41260
31259->41261
41261->51262
41261->51263
31259->41264
41264->51265
51265->61266
21120->31267
31267->41268
31267->41269
41269->51270
41269->51271
31267->41272
41272->51273
51273->61274
21120->31275
31275->41276
41276->51277
31275->41278
31275->41279
41279->51280
41279->51281
51281->61282
61282->71283
71283->81284
71283->81285
61282->71286
71286->81287
71286->81288
41279->51289
51289->61290
61290->71291
61290->71292
31275->41293
41293->51294
51294->61295
61295->71296
61295->71297
71297->81298
71297->81299
71297->81300
21120->31301
31301->41302
41302->51303
31301->41304
31301->41305
41305->51306
41305->51307
51307->61308
61308->71309
61308->71310
41305->51311
51311->61312
61312->71313
61312->71314
31301->41315
41315->51316
51316->61317
61317->71318
61317->71319
71319->81320
71319->81321
21120->31322
31322->41323
41323->51324
31322->41325
31322->41326
41326->51327
41326->51328
31322->41329
41329->51330
51330->61331
21120->31332
31332->41333
41333->51334
31332->41335
31332->41336
41336->51337
41336->51338
51338->61339
61339->71340
71340->81341
81341->91342
81341->91343
71340->81344
81344->91345
81344->91346
61339->71347
71347->81348
71347->81349
41336->51350
51350->61351
61351->71352
61351->71353
31332->41354
41354->51355
51355->61356
61356->71357
71357->81358
71357->81359
61356->71360
71360->81361
81361->91362
51355->61363
61363->71364
71364->81365
71364->81366
81366->91367
81366->91368
91368->101369
51355->61370
61370->71371
71371->81372
81372->91373
61370->71374
71374->81375
81375->91376
91376->101377
91376->101378
101378->111379
101378->111380
111380->121381
51355->61382
61382->71383
71383->81384
81384->91385
61382->71386
71386->81387
81387->91388
91388->101389
91388->101390
101390->111391
101390->111392
111392->121393
51355->61394
61394->71395
71395->81396
81396->91397
81396->91398
71395->81399
81399->91400
81399->91401
91401->101402
61394->71403
71403->81404
81404->91405
51355->61406
61406->71407
71407->81408
81408->91409
81408->91410
71407->81411
81411->91412
81411->91413
91413->101414
51355->61415
61415->71416
71416->81417
71416->81418
61415->71419
71419->81420
51355->61421
61421->71422
71422->81423
71422->81424
81424->91425
81424->91426
91426->101427
91426->101428
91426->101429
81424->91430
81424->91431
51355->61432
61432->71433
61432->71434
61432->71435
61432->71436
71436->81437
81437->91438
91438->101439
101439->111440
91438->101441
81437->91442
91442->101443
101443->111444
111444->121445
111444->121446
101443->111447
111447->121448
111447->121449
121449->131450
81437->91451
91451->101452
101452->111453
101452->111454
91451->101455
81437->91456
91456->101457
101457->111458
101457->111459
111459->121460
111459->121461
121461->131462
81437->91463
91463->101464
101464->111465
101464->111466
111466->121467
111466->121468
81437->91469
91469->101470
101470->111471
101470->111472
111472->121473
111472->121474
81437->91475
91475->101476
101476->111477
101476->111478
91475->101479
101479->111480
111480->121481
121481->131482
131482->141483
131482->141484
131482->141485
111480->121486
121486->131487
131487->141488
131487->141489
131487->141490
141490->151491
141490->151492
151492->161493
161493->171494
171494->181495
161493->171496
91475->101497
101497->111498
111498->121499
121499->131500
131500->141501
131500->141502
131500->141503
141503->151504
141503->151505
151505->161506
161506->171507
171507->181508
161506->171509
171509->181510
181510->191511
181510->191512
111498->121513
121513->131514
131514->141515
131514->141516
131514->141517
141517->151518
81437->91519
91519->101520
101520->111521
101520->111522
111522->121523
111522->121524
121524->131525
121524->131526
131526->141527
131526->141528
141528->151529
151529->161530
161530->171531
161530->171532
141528->151533
81437->91534
91534->101535
101535->111536
101535->111537
111537->121538
111537->121539
91534->101540
101540->111541
101540->111542
91534->101543
101543->111544
91534->101545
101545->111546
111546->121547
121547->131548
131548->141549
131548->141550
141550->151551
151551->161552
141550->151553
151553->161554
151553->161555
161555->171556
171556->181557
171556->181558
161555->171559
111546->121560
121560->131561
131561->141562
141562->151563
141562->151564
131561->141565
121560->131566
131566->141567
141567->151568
151568->161569
151568->161570
161570->171571
161570->171572
161570->171573
161570->171574
171574->181575
171574->181576
181576->191577
191577->201578
201578->211579
201578->211580
191577->201581
181576->191582
191582->201583
191582->201584
81437->91585
91585->101586
101586->111587
101586->111588
111588->121589
111588->121590
121590->131591
121590->131592
51355->61593
61593->71594
71594->81595
71594->81596
81596->91597
81596->91598
91598->101599
101599->111600
91598->101601
81596->91602
91602->101603
51355->61604
61604->71605
21120->31606
31606->41607
41607->51608
31606->41609
31606->41610
41610->51611
41610->51612
51612->61613
61613->71614
71614->81615
71614->81616
61613->71617
71617->81618
71617->81619
41610->51620
51620->61621
61621->71622
61621->71623
31606->41624
41624->51625
51625->61626
21120->31627
31627->41628
41628->51629
31627->41630
31627->41631
41631->51632
41631->51633
51633->61634
61634->71635
71635->81636
81636->91637
91637->101638
91637->101639
101639->111640
101639->111641
61634->71642
31627->41643
41643->51644
51644->61645
61645->71646
71646->81647
71646->81648
81648->91649
91649->101650
101650->111651
101650->111652
111652->121653
111652->121654
61645->71655
61645->71656
71656->81657
61645->71658
71658->81659
81659->91660
81659->91661
81659->91662
91662->101663
81659->91664
91664->101665
101665->111666
111666->121667
111666->121668
121668->131669
131669->141670
121668->131671
51644->61672
61672->71673
-10->01674
01674->11675
11675->21676
21676->31677
31677->41678
41678->51679
01674->11680
11680->21681
21681->31682
31682->41683
41683->51684
01674->11685
11685->21686
21686->31687
31687->41688
41688->51689
51689->61690
61690->71691
71691->81692
01674->11693
11693->21694
21694->31695
31695->41696
41696->51697
51697->61698
61698->71699
71699->81700
01674->11701
11701->21702
21702->31703
31703->41704
41704->51705
51705->61706
61706->71707
01674->11708
11708->21709
21709->31710
31710->41711
41711->51712
51712->61713
01674->11714
11714->21715
21715->31716
31716->41717
41717->51718
51718->61719
01674->11720
11720->21721
21721->31722
31722->41723
41723->51724
51724->61725
01674->11726
11726->21727
21727->31728
31728->41729
01674->11730
11730->21731
21731->31732
31732->41733
01674->11734
11734->21735
11734->21736
11734->21737
21737->31738
11734->21739
21739->31740
31740->41741
31740->41742
31740->41743
41743->51744
41743->51745
51745->61746
61746->71747
51745->61748
61748->71749
21739->31750
31750->41751
31750->41752
41752->51753
51753->61754
61754->71755
61754->71756
31750->41757
21739->31758
31758->41759
31758->41760
31758->41761
21739->31762
31762->41763
41763->51764
31762->41765
31762->41766
41766->51767
41766->51768
51768->61769
61769->71770
61769->71771
31762->41772
41772->51773
51773->61774
61774->71775
71775->81776
71775->81777
51773->61778
61778->71779
71779->81780
71779->81781
81781->91782
81781->91783
91783->101784
91783->101785
101785->111786
101785->111787
111787->121788
51773->61789
61789->71790
71790->81791
71790->81792
81792->91793
81792->91794
61789->71795
71795->81796
81796->91797
81796->91798
81796->91799
81796->91800
91800->101801
101801->111802
111802->121803
121803->131804
121803->131805
131805->141806
131805->141807
141807->151808
141807->151809
151809->161810
101801->111811
111811->121812
121812->131813
131813->141814
121812->131815
121812->131816
51773->61817
61817->71818
21739->31819
31819->41820
41820->51821
31819->41822
31819->41823
41823->51824
41823->51825
31819->41826
41826->51827
51827->61828
21739->31829
31829->41830
41830->51831
31829->41832
31829->41833
41833->51834
41833->51835
51835->61836
61836->71837
61836->71838
31829->41839
41839->51840
51840->61841
61841->71842
71842->81843
81843->91844
71842->81845
71842->81846
51840->61847
61847->71848
21739->31849
31849->41850
41850->51851
31849->41852
31849->41853
41853->51854
51854->61855
61855->71856
71856->81857
71856->81858
41853->51859
31849->41860
41860->51861
51861->61862
21739->31863
31863->41864
41864->51865
31863->41866
31863->41867
41867->51868
41867->51869
51869->61870
61870->71871
71871->81872
81872->91873
91873->101874
91873->101875
61870->71876
31863->41877
41877->51878
51878->61879
61879->71880
71880->81881
81881->91882
71880->81883
71880->81884
51878->61885
61885->71886
21739->31887
31887->41888
31887->41889
41889->51890
41889->51891
51891->61892
61892->71893
61892->71894
31887->41895
41895->51896
51896->61897
61897->71898
71898->81899
71898->81900
71898->81901
81901->91902
81901->91903
51896->61904
61904->71905
71905->81906
71905->81907
61904->71908
71908->81909
51896->61910
61910->71911
71911->81912
81912->91913
81912->91914
71911->81915
81915->91916
81915->91917
91917->101918
51896->61919
61919->71920
71920->81921
71920->81922
71920->81923
81923->91924
91924->101925
101925->111926
101925->111927
51896->61928
61928->71929
71929->81930
61928->71931
71931->81932
81932->91933
91933->101934
101934->111935
111935->121936
111935->121937
101934->111938
111938->121939
111938->121940
121940->131941
131941->141942
121940->131943
131943->141944
81932->91945
91945->101946
101946->111947
101946->111948
111948->121949
121949->131950
121949->131951
111948->121952
121952->131953
121952->131954
51896->61955
61955->71956
71956->81957
81957->91958
71956->81959
61955->71960
71960->81961
81961->91962
91962->101963
91962->101964
91962->101965
51896->61966
61966->71967
71967->81968
71967->81969
81969->91970
81969->91971
51896->61972
61972->71973
21739->31974
31974->41975
41975->51976
31974->41977
31974->41978
41978->51979
41978->51980
51980->61981
61981->71982
61981->71983
31974->41984
41984->51985
51985->61986
61986->71987
71987->81988
71987->81989
71987->81990
51985->61991
61991->71992
-10->01993
01993->11994
11994->21995
21995->31996
31996->41997
41997->51998
51998->61999
61999->72000
01993->12001
12001->22002
12001->22003
22003->32004
32004->42005
42005->52006
12001->22007
22007->32008
32008->42009
32008->42010
22007->32011
32011->42012
32011->42013
42013->52014
32011->42015
22007->32016
32016->42017
42017->52018
42017->52019
52019->62020
62020->72021
62020->72022
52019->62023
62023->72024
62023->72025
32016->42026
42026->52027
52027->62028
62028->72029
62028->72030
62028->72031
72031->82032
82032->92033
82032->92034
72031->82035
22007->32036
32036->42037
32036->42038
42038->52039
42038->52040
52040->62041
62041->72042
62041->72043
32036->42044
42044->52045
52045->62046
62046->72047
72047->82048
62046->72049
72049->82050
82050->92051
22007->32052
32052->42053
42053->52054
32052->42055
32052->42056
42056->52057
42056->52058
52058->62059
62059->72060
62059->72061
32052->42062
42062->52063
52063->62064
62064->72065
72065->82066
82066->92067
92067->102068
92067->102069
62064->72070
72070->82071
52063->62072
62072->72073
72073->82074
72073->82075
82075->92076
82075->92077
92077->102078
92077->102079
52063->62080
62080->72081
72081->82082
72081->82083
82083->92084
22007->32085
32085->42086
32085->42087
42087->52088
42087->52089
32085->42090
42090->52091
52091->62092
62092->72093
72093->82094
72093->82095
22007->32096
32096->42097
32096->42098
42098->52099
42098->52100
32096->42101
42101->52102
52102->62103
62103->72104
72104->82105
72104->82106
-10->02107
02107->12108
12108->22109
22109->32110
32110->42111
42111->52112
52112->62113
02107->12114
12114->22115
22115->32116
32116->42117
42117->52118
52118->62119
62119->72120
72120->82121
02107->12122
12122->22123
22123->32124
32124->42125
42125->52126
52126->62127
62127->72128
02107->12129
12129->22130
22130->32131
02107->12132
12132->22133
12132->22134
22134->32135
12132->22136
22136->32137
32137->42138
32137->42139
42139->52140
42139->52141
32137->42142
22136->32143
32143->42144
32143->42145
32143->42146
22136->32147
32147->42148
32147->42149
42149->52150
52150->62151
32147->42152
-10->02153
02153->12154
12154->22155
22155->32156
32156->42157
42157->52158
52158->62159
02153->12160
12160->22161
12160->22162
12160->22163
22163->32164
32164->42165
32164->42166
32164->42167
42167->52168
42167->52169
32164->42170
22163->32171
32171->42172
32171->42173
42173->52174
42173->52175
52175->62176
62176->72177
72177->82178
72177->82179
62176->72180
72180->82181
72180->82182
32171->42183
42183->52184
52184->62185
62185->72186
72186->82187
62185->72188
72188->82189
72188->82190
72188->82191
22163->32192
32192->42193
32192->42194
42194->52195
42194->52196
32192->42197
42197->52198
52198->62199
62199->72200
72200->82201
82201->92202
72200->82203
52198->62204
62204->72205
72205->82206
82206->92207
72205->82208
52198->62209
62209->72210
72210->82211
82211->92212
72210->82213
52198->62214
62214->72215
72215->82216
72215->82217
82217->92218
82217->92219
52198->62220
62220->72221
72221->82222
72221->82223
82223->92224
82223->92225
52198->62226
62226->72227
72227->82228
72227->82229
82229->92230
82229->92231
52198->62232
62232->72233
72233->82234
72233->82235
82235->92236
82235->92237
92237->102238
92237->102239
52198->62240
62240->72241
72241->82242
72241->82243
82243->92244
82243->92245
52198->62246
62246->72247
72247->82248
72247->82249
82249->92250
82249->92251
52198->62252
62252->72253
72253->82254
72253->82255
82255->92256
82255->92257
52198->62258
62258->72259
72259->82260
72259->82261
82261->92262
82261->92263
52198->62264
62264->72265
72265->82266
72265->82267
82267->92268
82267->92269
52198->62270
62270->72271
72271->82272
72271->82273
82273->92274
82273->92275
52198->62276
62276->72277
72277->82278
72277->82279
82279->92280
82279->92281
52198->62282
62282->72283
72283->82284
52198->62285
62285->72286
72286->82287
72286->82288
22163->32289
32289->42290
32289->42291
42291->52292
42291->52293
52293->62294
62294->72295
72295->82296
72295->82297
62294->72298
72298->82299
82299->92300
82299->92301
72298->82302
32289->42303
42303->52304
52304->62305
62305->72306
62305->72307
72307->82308
72307->82309
72307->82310
22163->32311
32311->42312
32311->42313
42313->52314
42313->52315
52315->62316
62316->72317
72317->82318
82318->92319
82318->92320
72317->82321
82321->92322
92322->102323
92322->102324
82321->92325
62316->72326
72326->82327
72326->82328
32311->42329
42329->52330
52330->62331
62331->72332
72332->82333
72332->82334
82334->92335
82334->92336
62331->72337
72337->82338
72337->82339
82339->92340
62331->72341
72341->82342
62331->72343
72343->82344
82344->92345
92345->102346
92345->102347
102347->112348
102347->112349
82344->92350
92350->102351
102351->112352
112352->122353
122353->132354
122353->132355
132355->142356
142356->152357
142356->152358
152358->162359
162359->172360
152358->162361
112352->122362
122362->132363
132363->142364
142364->152365
142364->152366
152366->162367
152366->162368
102351->112369
112369->122370
52330->62371
62371->72372
72372->82373
22163->32374
32374->42375
32374->42376
42376->52377
42376->52378
52378->62379
62379->72380
72380->82381
82381->92382
82381->92383
72380->82384
62379->72385
72385->82386
72385->82387
32374->42388
42388->52389
52389->62390
62390->72391
72391->82392
72391->82393
52389->62394
62394->72395
72395->82396
82396->92397
92397->102398
92397->102399
92397->102400
102400->112401
102400->112402
112402->122403
112402->122404
72395->82405
62394->72406
72406->82407
82407->92408
82407->92409
92409->102410
92409->102411
102411->112412
102411->112413
112413->122414
112413->122415
52389->62416
62416->72417
72417->82418
82418->92419
92419->102420
92419->102421
92419->102422
102422->112423
102422->112424
112424->122425
112424->122426
72417->82427
62416->72428
72428->82429
82429->92430
82429->92431
92431->102432
92431->102433
102433->112434
102433->112435
52389->62436
62436->72437
72437->82438
82438->92439
92439->102440
92439->102441
92439->102442
102442->112443
102442->112444
112444->122445
112444->122446
72437->82447
62436->72448
72448->82449
82449->92450
82449->92451
92451->102452
102452->112453
102452->112454
112454->122455
112454->122456
122456->132457
122456->132458
92451->102459
52389->62460
62460->72461
72461->82462
62460->72463
72463->82464
82464->92465
82464->92466
52389->62467
62467->72468
72468->82469
82469->92470
92470->102471
92470->102472
92470->102473
102473->112474
102473->112475
112475->122476
112475->122477
72468->82478
62467->72479
72479->82480
82480->92481
82480->92482
92482->102483
92482->102484
102484->112485
102484->112486
112486->122487
112486->122488
52389->62489
62489->72490
72490->82491
82491->92492
92492->102493
92492->102494
92492->102495
102495->112496
102495->112497
112497->122498
112497->122499
72490->82500
62489->72501
72501->82502
82502->92503
82502->92504
92504->102505
92504->102506
102506->112507
102506->112508
112508->122509
112508->122510
52389->62511
62511->72512
72512->82513
82513->92514
92514->102515
92514->102516
92514->102517
102517->112518
102517->112519
112519->122520
112519->122521
72512->82522
62511->72523
72523->82524
82524->92525
82524->92526
92526->102527
92526->102528
102528->112529
102528->112530
112530->122531
112530->122532
52389->62533
62533->72534
72534->82535
82535->92536
92536->102537
92536->102538
92536->102539
102539->112540
102539->112541
112541->122542
112541->122543
72534->82544
62533->72545
72545->82546
82546->92547
82546->92548
92548->102549
102549->112550
102549->112551
112551->122552
112551->122553
122553->132554
122553->132555
92548->102556
52389->62557
62557->72558
72558->82559
82559->92560
92560->102561
92560->102562
92560->102563
102563->112564
102563->112565
112565->122566
112565->122567
72558->82568
62557->72569
72569->82570
82570->92571
82570->92572
92572->102573
92572->102574
102574->112575
102574->112576
112576->122577
112576->122578
52389->62579
62579->72580
72580->82581
82581->92582
92582->102583
92582->102584
92582->102585
102585->112586
102585->112587
112587->122588
112587->122589
72580->82590
62579->72591
72591->82592
82592->92593
82592->92594
92594->102595
92594->102596
102596->112597
102596->112598
112598->122599
112598->122600
52389->62601
62601->72602
72602->82603
82603->92604
92604->102605
92604->102606
92604->102607
102607->112608
102607->112609
112609->122610
112609->122611
72602->82612
62601->72613
72613->82614
82614->92615
82614->92616
92616->102617
92616->102618
102618->112619
102618->112620
112620->122621
112620->122622
52389->62623
62623->72624
72624->82625
82625->92626
92626->102627
92626->102628
92626->102629
102629->112630
102629->112631
112631->122632
112631->122633
72624->82634
62623->72635
72635->82636
82636->92637
82636->92638
92638->102639
92638->102640
102640->112641
102640->112642
112642->122643
112642->122644
-10->02645
02645->12646
12646->22647
22647->32648
32648->42649
42649->52650
52650->62651
02645->12652
12652->22653
22653->32654
32654->42655
42655->52656
52656->62657
02645->12658
12658->22659
22659->32660
02645->12661
12661->22662
12661->22663
12661->22664
22664->32665
12661->22666
22666->32667
32667->42668
42668->52669
52669->62670
62670->72671
62670->72672
32667->42673
22666->32674
32674->42675
32674->42676
42676->52677
42676->52678
52678->62679
62679->72680
72680->82681
82681->92682
82681->92683
52678->62684
32674->42685
42685->52686
52686->62687
62687->72688
72688->82689
62687->72690
62687->72691
22666->32692
32692->42693
32692->42694
42694->52695
32692->42696
42696->52697
52697->62698
62698->72699
62698->72700
62698->72701
72701->82702
82702->92703
92703->102704
92703->102705
22666->32706
32706->42707
32706->42708
32706->42709
42709->52710
42709->52711
52711->62712
62712->72713
62712->72714
32706->42715
42715->52716
52716->62717
62717->72718
72718->82719
72718->82720
82720->92721
82720->92722
92722->102723
92722->102724
52716->62725
62725->72726
72726->82727
72726->82728
62725->72729
72729->82730
52716->62731
62731->72732
22666->32733
32733->42734
32733->42735
42735->52736
42735->52737
52737->62738
62738->72739
72739->82740
72739->82741
62738->72742
72742->82743
72742->82744
32733->42745
42745->52746
52746->62747
62747->72748
72748->82749
72748->82750
82750->92751
82750->92752
92752->102753
92752->102754
52746->62755
62755->72756
72756->82757
72756->82758
62755->72759
72759->82760
82760->92761
92761->102762
52746->62763
62763->72764
72764->82765
72764->82766
82766->92767
82766->92768
92768->102769
92768->102770
52746->62771
62771->72772
72772->82773
72772->82774
62771->72775
72775->82776
82776->92777
92777->102778
52746->62779
62779->72780
72780->82781
72780->82782
22666->32783
32783->42784
32783->42785
42785->52786
52786->62787
62787->72788
72788->82789
72788->82790
82790->92791
92791->102792
102792->112793
102792->112794
42785->52795
52795->62796
62796->72797
72797->82798
72797->82799
62796->72800
72800->82801
72800->82802
32783->42803
42803->52804
52804->62805
62805->72806
72806->82807
72806->82808
82808->92809
82808->92810
92810->102811
92810->102812
52804->62813
62813->72814
72814->82815
72814->82816
62813->72817
72817->82818
82818->92819
92819->102820
52804->62821
62821->72822
72822->82823
72822->82824
82824->92825
82824->92826
82824->92827
22666->32828
32828->42829
32828->42830
42830->52831
52831->62832
62832->72833
72833->82834
72833->82835
82835->92836
92836->102837
102837->112838
102837->112839
42830->52840
52840->62841
62841->72842
72842->82843
82843->92844
82843->92845
72842->82846
82846->92847
82846->92848
62841->72849
72849->82850
72849->82851
32828->42852
42852->52853
52853->62854
62854->72855
72855->82856
82856->92857
92857->102858
102858->112859
102858->112860
112860->122861
122861->132862
132862->142863
132862->142864
72855->82865
82865->92866
82865->92867
92867->102868
102868->112869
112869->122870
112869->122871
122871->132872
132872->142873
142873->152874
142873->152875
92867->102876
102876->112877
102876->112878
112878->122879
122879->132880
132880->142881
132880->142882
142882->152883
152883->162884
162884->172885
162884->172886
112878->122887
122887->132888
132888->142889
142889->152890
132888->142891
132888->142892
142892->152893
142892->152894
152894->162895
162895->172896
172896->182897
182897->192898
182897->192899
192899->202900
202900->212901
212901->222902
212901->222903
172896->182904
162895->172905
172905->182906
182906->192907
182906->192908
192908->202909
202909->212910
212910->222911
212910->222912
172905->182913
132888->142914
142914->152915
152915->162916
162916->172917
172917->182918
162916->172919
172919->182920
182920->192921
52853->62922
62922->72923
72923->82924
72923->82925
82925->92926
92926->102927
102927->112928
102927->112929
62922->72930
62922->72931
72931->82932
62922->72933
72933->82934
82934->92935
92935->102936
102936->112937
112937->122938
102936->112939
112939->122940
92935->102941
102941->112942
82934->92943
92943->102944
102944->112945
102944->112946
112946->122947
122947->132948
132948->142949
132948->142950
112946->122951
122951->132952
132952->142953
122951->132954
132954->142955
142955->152956
132954->142957
142957->152958
52853->62959
62959->72960
72960->82961
22666->32962
32962->42963
32962->42964
42964->52965
52965->62966
62966->72967
72967->82968
72967->82969
82969->92970
92970->102971
102971->112972
102971->112973
42964->52974
52974->62975
62975->72976
72976->82977
72976->82978
62975->72979
72979->82980
72979->82981
32962->42982
42982->52983
52983->62984
62984->72985
72985->82986
82986->92987
92987->102988
102988->112989
102988->112990
112990->122991
122991->132992
132992->142993
132992->142994
72985->82995
82995->92996
82995->92997
92997->102998
102998->112999
112999->123000
112999->123001
123001->133002
133002->143003
143003->153004
143003->153005
92997->103006
103006->113007
103006->113008
113008->123009
123009->133010
133010->143011
133010->143012
143012->153013
153013->163014
163014->173015
163014->173016
113008->123017
123017->133018
133018->143019
143019->153020
133018->143021
133018->143022
143022->153023
143022->153024
153024->163025
163025->173026
173026->183027
183027->193028
183027->193029
193029->203030
203030->213031
213031->223032
213031->223033
173026->183034
163025->173035
173035->183036
183036->193037
183036->193038
193038->203039
203039->213040
213040->223041
213040->223042
173035->183043
133018->143044
143044->153045
153045->163046
163046->173047
173047->183048
163046->173049
173049->183050
183050->193051
52983->63052
63052->73053
73053->83054
73053->83055
83055->93056
93056->103057
103057->113058
103057->113059
63052->73060
63052->73061
73061->83062
63052->73063
73063->83064
83064->93065
93065->103066
93065->103067
103067->113068
113068->123069
123069->133070
123069->133071
103067->113072
113072->123073
123073->133074
113072->123075
123075->133076
133076->143077
123075->133078
133078->143079
52983->63080
63080->73081
73081->83082
22666->33083
33083->43084
33083->43085
43085->53086
53086->63087
63087->73088
73088->83089
73088->83090
83090->93091
93091->103092
103092->113093
103092->113094
43085->53095
53095->63096
63096->73097
63096->73098
33083->43099
43099->53100
53100->63101
63101->73102
63101->73103
73103->83104
73103->83105
22666->33106
33106->43107
33106->43108
43108->53109
53109->63110
63110->73111
73111->83112
73111->83113
83113->93114
93114->103115
103115->113116
103115->113117
43108->53118
53118->63119
63119->73120
63119->73121
33106->43122
43122->53123
53123->63124
63124->73125
63124->73126
73126->83127
73126->83128
22666->33129
33129->43130
33129->43131
43131->53132
53132->63133
63133->73134
73134->83135
73134->83136
83136->93137
93137->103138
103138->113139
103138->113140
43131->53141
53141->63142
63142->73143
73143->83144
73143->83145
63142->73146
73146->83147
73146->83148
33129->43149
43149->53150
53150->63151
63151->73152
73152->83153
83153->93154
83153->93155
73152->83156
83156->93157
93157->103158
83156->93159
63151->73160
73160->83161
83161->93162
93162->103163
53150->63164
63164->73165
73165->83166
83166->93167
93167->103168
93167->103169
103169->113170
113170->123171
113170->123172
103169->113173
63164->73174
73174->83175
83175->93176
83175->93177
73174->83178
83178->93179
93179->103180
103180->113181
22666->33182
33182->43183
33182->43184
33182->43185
43185->53186
43185->53187
53187->63188
63188->73189
63188->73190
33182->43191
22666->33192
33192->43193
33192->43194
43194->53195
43194->53196
33192->43197
43197->53198
53198->63199
63199->73200
22666->33201
33201->43202
33201->43203
43203->53204
43203->53205
33201->43206
43206->53207
53207->63208
63208->73209
73209->83210
83210->93211
83210->93212
73209->83213
83213->93214
63208->73215
73215->83216
83216->93217
53207->63218
63218->73219
73219->83220
83220->93221
73219->83222
73219->83223
73219->83224
22666->33225
33225->43226
33225->43227
43227->53228
43227->53229
53229->63230
63230->73231
63230->73232
33225->43233
43233->53234
53234->63235
63235->73236
63235->73237
-10->03238
03238->13239
13239->23240
23240->33241
33241->43242
43242->53243
53243->63244
63244->73245
03238->13246
13246->23247
13246->23248
23248->33249
13246->23250
23250->33251
13246->23252
23252->33253
33253->43254
33253->43255
43255->53256
33253->43257
23252->33258
33258->43259
33258->43260
43260->53261
43260->53262
53262->63263
63263->73264
63263->73265
53262->63266
63266->73267
63266->73268
33258->43269
43269->53270
53270->63271
63271->73272
63271->73273
-10->03274
03274->13275
13275->23276
23276->33277
33277->43278
43278->53279
53279->63280
63280->73281
03274->13282
13282->23283
13282->23284
23284->33285
13282->23286
23286->33287
33287->43288
33287->43289
33287->43290
43290->53291
43290->53292
33287->43293
43293->53294
53294->63295
63295->73296
73296->83297
73296->83298
23286->33299
33299->43300
33299->43301
33299->43302
43302->53303
43302->53304
53304->63305
63305->73306
63305->73307
63305->73308
33299->43309
43309->53310
53310->63311
63311->73312
73312->83313
73312->83314
23286->33315
33315->43316
33315->43317
33315->43318
43318->53319
43318->53320
53320->63321
63321->73322
63321->73323
63321->73324
33315->43325
43325->53326
53326->63327
63327->73328
73328->83329
73328->83330
-10->03331
03331->13332
13332->23333
23333->33334
33334->43335
43335->53336
53336->63337
63337->73338
03331->13339
13339->23340
13339->23341
23341->33342
33342->43343
33342->43344
43344->53345
43344->53346
23341->33347
33347->43348
33347->43349
43349->53350
43349->53351
23341->33352
33352->43353
33352->43354
43354->53355
43354->53356
23341->33357
33357->43358
33357->43359
43359->53360
43359->53361
-10->03362
03362->13363
13363->23364
23364->33365
33365->43366
43366->53367
53367->63368
63368->73369
03362->13370
13370->23371
23371->33372
33372->43373
43373->53374
53374->63375
63375->73376
03362->13377
13377->23378
23378->33379
33379->43380
03362->13381
13381->23382
23382->33383
33383->43384
03362->13385
13385->23386
13385->23387
23387->33388
13385->23389
23389->33390
33390->43391
33390->43392
33390->43393
43393->53394
43393->53395
53395->63396
63396->73397
63396->73398
63396->73399
33390->43400
43400->53401
53401->63402
63402->73403
73403->83404
83404->93405
73403->83406
23389->33407
33407->43408
33407->43409
33407->43410
43410->53411
43410->53412
53412->63413
63413->73414
73414->83415
73414->83416
73414->83417
63413->73418
73418->83419
83419->93420
83419->93421
73418->83422
33407->43423
43423->53424
53424->63425
63425->73426
73426->83427
83427->93428
73426->83429
63425->73430
73430->83431
83431->93432
93432->103433
103433->113434
113434->123435
113434->123436
103433->113437
103433->113438
113438->123439
83431->93440
93440->103441
53424->63442
63442->73443
73443->83444
83444->93445
83444->93446
73443->83447
73443->83448
53424->63449
63449->73450
23389->33451
33451->43452
33451->43453
33451->43454
43454->53455
43454->53456
53456->63457
63457->73458
73458->83459
73458->83460
73458->83461
63457->73462
73462->83463
83463->93464
83463->93465
73462->83466
33451->43467
43467->53468
53468->63469
63469->73470
73470->83471
83471->93472
73470->83473
63469->73474
73474->83475
83475->93476
93476->103477
103477->113478
113478->123479
113478->123480
103477->113481
103477->113482
113482->123483
83475->93484
93484->103485
53468->63486
63486->73487
73487->83488
83488->93489
83488->93490
73487->83491
73487->83492
53468->63493
63493->73494
23389->33495
33495->43496
43496->53497
43496->53498
53498->63499
63499->73500
73500->83501
83501->93502
93502->103503
103503->113504
83501->93505
73500->83506
83506->93507
93507->103508
103508->113509
83506->93510
63499->73511
73511->83512
83512->93513
93513->103514
73511->83515
33495->43516
43516->53517
53517->63518
63518->73519
73519->83520
73519->83521
83521->93522
83521->93523
93523->103524
53517->63525
63525->73526
73526->83527
73526->83528
83528->93529
83528->93530
93530->103531
53517->63532
63532->73533
73533->83534
83534->93535
93535->103536
103536->113537
113537->123538
73533->83539
83539->93540
83539->93541
93541->103542
103542->113543
113543->123544
123544->133545
93541->103546
53517->63547
63547->73548
73548->83549
53517->63550
63550->73551
73551->83552
73551->83553
83553->93554
83553->93555
63550->73556
73556->83557
73556->83558
63550->73559
73559->83560
63550->73561
73561->83562
83562->93563
93563->103564
103564->113565
103564->113566
113566->123567
113566->123568
123568->133569
123568->133570
83562->93571
93571->103572
103572->113573
103572->113574
113574->123575
93571->103576
103576->113577
113577->123578
123578->133579
133579->143580
133579->143581
143581->153582
123578->133583
133583->143584
143584->153585
153585->163586
143584->153587
113577->123588
123588->133589
133589->143590
133589->143591
133589->143592
93571->103593
103593->113594
113594->123595
123595->133596
133596->143597
133596->143598
123595->133599
53517->63600
63600->73601
73601->83602
73601->83603
83603->93604
83603->93605
83603->93606
83603->93607
83603->93608
23389->33609
33609->43610
43610->53611
43610->53612
53612->63613
63613->73614
73614->83615
83615->93616
83615->93617
73614->83618
83618->93619
93619->103620
103620->113621
83618->93622
73614->83623
83623->93624
93624->103625
103625->113626
83623->93627
73614->83628
83628->93629
93629->103630
103630->113631
113631->123632
123632->133633
83628->93634
63613->73635
73635->83636
83636->93637
93637->103638
73635->83639
33609->43640
43640->53641
53641->63642
63642->73643
73643->83644
83644->93645
93645->103646
73643->83647
83647->93648
83647->93649
93649->103650
93649->103651
53641->63652
63652->73653
73653->83654
73653->83655
53641->63656
63656->73657
73657->83658
73657->83659
73657->83660
63656->73661
73661->83662
83662->93663
83662->93664
93664->103665
73661->83666
83666->93667
93667->103668
93667->103669
83666->93670
63656->73671
73671->83672
63656->73673
73673->83674
83674->93675
93675->103676
93675->103677
103677->113678
113678->123679
113678->123680
103677->113681
103677->113682
103677->113683
103677->113684
53641->63685
63685->73686
73686->83687
73686->83688
83688->93689
53641->63690
63690->73691
73691->83692
73691->83693
83693->93694
83693->93695
63690->73696
73696->83697
73696->83698
83698->93699
63690->73700
73700->83701
63690->73702
73702->83703
83703->93704
93704->103705
103705->113706
103705->113707
113707->123708
113707->123709
123709->133710
123709->133711
83703->93712
93712->103713
103713->113714
103713->113715
113715->123716
113715->123717
113715->123718
113715->123719
113715->123720
83703->93721
93721->103722
103722->113723
103722->113724
113724->123725
113724->123726
123726->133727
123726->133728
53641->63729
63729->73730
73730->83731
73730->83732
83732->93733
83732->93734
93734->103735
93734->103736
63729->73737
73737->83738
73737->83739
63729->73740
73740->83741
63729->73742
73742->83743
83743->93744
93744->103745
103745->113746
103745->113747
113747->123748
113747->123749
123749->133750
123749->133751
83743->93752
93752->103753
103753->113754
103753->113755
113755->123756
113755->123757
123757->133758
123757->133759
23389->33760
33760->43761
43761->53762
43761->53763
53763->63764
63764->73765
73765->83766
73765->83767
63764->73768
73768->83769
83769->93770
93770->103771
73768->83772
33760->43773
43773->53774
53774->63775
63775->73776
63775->73777
73777->83778
83778->93779
73777->83780
83780->93781
73777->83782
23389->33783
33783->43784
43784->53785
43784->53786
53786->63787
63787->73788
73788->83789
83789->93790
93790->103791
103791->113792
83789->93793
73788->83794
83794->93795
93795->103796
103796->113797
83794->93798
63787->73799
73799->83800
83800->93801
93801->103802
73799->83803
33783->43804
43804->53805
53805->63806
63806->73807
73807->83808
53805->63809
63809->73810
73810->83811
73810->83812
83812->93813
83812->93814
93814->103815
53805->63816
63816->73817
73817->83818
83818->93819
93819->103820
73817->83821
83821->93822
83821->93823
93823->103824
103824->113825
53805->63826
63826->73827
73827->83828
73827->83829
83829->93830
83829->93831
53805->63832
63832->73833
73833->83834
83834->93835
93835->103836
73833->83837
83837->93838
83837->93839
93839->103840
103840->113841
93839->103842
53805->63843
63843->73844
73844->83845
73844->83846
83846->93847
83846->93848
63843->73849
73849->83850
73849->83851
63843->73852
73852->83853
63843->73854
73854->83855
83855->93856
93856->103857
93856->103858
103858->113859
53805->63860
63860->73861
73861->83862
73861->83863
83863->93864
83863->93865
53805->63866
63866->73867
73867->83868
83868->93869
93869->103870
103870->113871
113871->123872
103870->113873
93869->103874
103874->113875
103874->113876
63866->73877
73877->83878
83878->93879
93879->103880
103880->113881
113881->123882
113881->123883
103880->113884
113884->123885
113884->123886
123886->133887
123886->133888
123886->133889
133889->143890
83878->93891
93891->103892
103892->113893
103892->113894
113894->123895
113894->123896
113894->123897
113894->123898
113894->123899
113894->123900
83878->93901
93901->103902
103902->113903
103902->113904
103902->113905
113905->123906
113905->123907
23389->33908
33908->43909
43909->53910
43909->53911
53911->63912
63912->73913
73913->83914
83914->93915
93915->103916
103916->113917
83914->93918
73913->83919
83919->93920
93920->103921
103921->113922
83919->93923
73913->83924
83924->93925
93925->103926
103926->113927
83924->93928
73913->83929
83929->93930
93930->103931
93930->103932
83929->93933
73913->83934
83934->93935
93935->103936
103936->113937
83934->93938
63912->73939
73939->83940
83940->93941
93941->103942
73939->83943
33908->43944
43944->53945
53945->63946
63946->73947
73947->83948
73947->83949
83949->93950
83949->93951
93951->103952
103952->113953
113953->123954
123954->133955
113953->123956
103952->113957
113957->123958
113957->123959
123959->133960
133960->143961
123959->133962
103952->113963
113963->123964
53945->63965
63965->73966
73966->83967
73966->83968
83968->93969
83968->93970
93970->103971
103971->113972
113972->123973
123973->133974
113972->123975
103971->113976
113976->123977
113976->123978
123978->133979
133979->143980
123978->133981
103971->113982
113982->123983
53945->63984
63984->73985
73985->83986
73985->83987
83987->93988
83987->93989
53945->63990
63990->73991
73991->83992
73991->83993
63990->73994
73994->83995
83995->93996
93996->103997
93996->103998
103998->113999
103998->114000
83995->94001
94001->104002
94001->104003
104003->114004
83995->94005
94005->104006
83995->94007
94007->104008
104008->114009
114009->124010
124010->134011
134011->144012
134011->144013
124010->134014
114009->124015
124015->134016
134016->144017
134016->144018
124015->134019
104008->114020
114020->124021
124021->134022
134022->144023
144023->154024
144023->154025
144023->154026
124021->134027
53945->64028
64028->74029
74029->84030
84030->94031
84030->94032
74029->84033
84033->94034
94034->104035
94034->104036
84033->94037
64028->74038
74038->84039
84039->94040
94040->104041
104041->114042
104041->114043
114043->124044
114043->124045
124045->134046
124045->134047
84039->94048
94048->104049
104049->114050
104049->114051
114051->124052
114051->124053
84039->94054
94054->104055
104055->114056
104055->114057
114057->124058
124058->134059
114057->124060
84039->94061
94061->104062
104062->114063
104062->114064
114064->124065
124065->134066
134066->144067
124065->134068
114064->124069
64028->74070
74070->84071
84071->94072
94072->104073
104073->114074
104073->114075
94072->104076
104076->114077
114077->124078
114077->124079
104076->114080
84071->94081
74070->84082
84082->94083
94083->104084
104084->114085
114085->124086
114085->124087
124087->134088
124087->134089
134089->144090
134089->144091
94083->104092
104092->114093
114093->124094
114093->124095
124095->134096
124095->134097
94083->104098
104098->114099
114099->124100
114099->124101
124101->134102
134102->144103
124101->134104
74070->84105
84105->94106
94106->104107
104107->114108
104107->114109
94106->104110
104110->114111
84105->94112
94112->104113
104113->114114
114114->124115
124115->134116
124115->134117
134117->144118
104113->114119
114119->124120
124120->134121
124120->134122
134122->144123
134122->144124
104113->114125
114125->124126
124126->134127
134127->144128
134127->144129
-10->04130
04130->14131
14131->24132
24132->34133
34133->44134
44134->54135
54135->64136
64136->74137
04130->14138
14138->24139
14138->24140
24140->34141
34141->44142
34141->44143
24140->34144
34144->44145
34144->44146
24140->34147
34147->44148
34147->44149
24140->34150
34150->44151
34150->44152
-10->04153
04153->14154
14154->24155
24155->34156
34156->44157
44157->54158
04153->14159
14159->24160
24160->34161
34161->44162
44162->54163
04153->14164
14164->24165
24165->34166
34166->44167
44167->54168
54168->64169
64169->74170
04153->14171
14171->24172
24172->34173
34173->44174
44174->54175
54175->64176
64176->74177
04153->14178
14178->24179
24179->34180
34180->44181
44181->54182
54182->64183
64183->74184
04153->14185
14185->24186
24186->34187
34187->44188
44188->54189
54189->64190
64190->74191
74191->84192
04153->14193
14193->24194
24194->34195
34195->44196
44196->54197
54197->64198
64198->74199
04153->14200
14200->24201
24201->34202
34202->44203
44203->54204
54204->64205
64205->74206
04153->14207
14207->24208
24208->34209
34209->44210
44210->54211
54211->64212
64212->74213
74213->84214
84214->94215
04153->14216
14216->24217
24217->34218
34218->44219
44219->54220
54220->64221
64221->74222
74222->84223
84223->94224
04153->14225
14225->24226
24226->34227
34227->44228
44228->54229
54229->64230
64230->74231
04153->14232
14232->24233
24233->34234
34234->44235
44235->54236
54236->64237
64237->74238
04153->14239
14239->24240
24240->34241
34241->44242
44242->54243
54243->64244
64244->74245
04153->14246
14246->24247
24247->34248
34248->44249
44249->54250
54250->64251
04153->14252
14252->24253
24253->34254
34254->44255
44255->54256
54256->64257
04153->14258
14258->24259
24259->34260
34260->44261
44261->54262
54262->64263
04153->14264
14264->24265
24265->34266
34266->44267
04153->14268
14268->24269
24269->34270
04153->14271
14271->24272
24272->34273
34273->44274
04153->14275
14275->24276
24276->34277
34277->44278
04153->14279
14279->24280
24280->34281
34281->44282
04153->14283
14283->24284
24284->34285
34285->44286
04153->14287
14287->24288
14287->24289
24289->34290
14287->24291
24291->34292
34292->44293
34292->44294
44294->54295
44294->54296
44294->54297
54297->64298
34292->44299
44299->54300
54300->64301
64301->74302
74302->84303
84303->94304
94304->104305
74302->84306
84306->94307
84306->94308
94308->104309
94308->104310
54300->64311
64311->74312
64311->74313
64311->74314
64311->74315
74315->84316
84316->94317
94317->104318
94317->104319
24291->34320
34320->44321
34320->44322
34320->44323
44323->54324
44323->54325
54325->64326
64326->74327
64326->74328
34320->44329
44329->54330
54330->64331
64331->74332
74332->84333
84333->94334
94334->104335
94334->104336
104336->114337
104336->114338
114338->124339
114338->124340
124340->134341
74332->84342
84342->94343
94343->104344
94343->104345
104345->114346
104345->114347
114347->124348
74332->84349
84349->94350
94350->104351
94350->104352
94350->104353
104353->114354
104353->114355
114355->124356
114355->124357
74332->84358
84358->94359
94359->104360
94359->104361
94359->104362
104362->114363
104362->114364
114364->124365
114364->124366
74332->84367
84367->94368
94368->104369
94368->104370
94368->104371
104371->114372
104371->114373
114373->124374
114373->124375
74332->84376
84376->94377
94377->104378
94377->104379
94377->104380
104380->114381
104380->114382
114382->124383
114382->124384
74332->84385
84385->94386
94386->104387
94386->104388
94386->104389
104389->114390
104389->114391
114391->124392
114391->124393
74332->84394
84394->94395
94395->104396
94395->104397
94395->104398
104398->114399
104398->114400
114400->124401
114400->124402
74332->84403
84403->94404
94404->104405
94404->104406
94404->104407
104407->114408
104407->114409
114409->124410
114409->124411
74332->84412
84412->94413
94413->104414
94413->104415
94413->104416
104416->114417
104416->114418
114418->124419
114418->124420
74332->84421
84421->94422
94422->104423
94422->104424
94422->104425
104425->114426
104425->114427
114427->124428
114427->124429
74332->84430
84430->94431
94431->104432
94431->104433
94431->104434
104434->114435
104434->114436
114436->124437
114436->124438
74332->84439
84439->94440
94440->104441
94440->104442
94440->104443
104443->114444
104443->114445
114445->124446
114445->124447
74332->84448
84448->94449
94449->104450
94449->104451
94449->104452
104452->114453
104452->114454
114454->124455
114454->124456
74332->84457
84457->94458
94458->104459
94458->104460
94458->104461
104461->114462
104461->114463
114463->124464
114463->124465
74332->84466
84466->94467
94467->104468
94467->104469
94467->104470
104470->114471
104470->114472
114472->124473
114472->124474
74332->84475
84475->94476
94476->104477
94476->104478
94476->104479
104479->114480
104479->114481
114481->124482
114481->124483
74332->84484
84484->94485
94485->104486
94485->104487
94485->104488
104488->114489
104488->114490
114490->124491
114490->124492
74332->84493
84493->94494
94494->104495
94494->104496
94494->104497
104497->114498
104497->114499
114499->124500
114499->124501
74332->84502
84502->94503
94503->104504
94503->104505
94503->104506
104506->114507
104506->114508
114508->124509
114508->124510
74332->84511
84511->94512
94512->104513
94512->104514
94512->104515
104515->114516
104515->114517
114517->124518
114517->124519
74332->84520
84520->94521
94521->104522
104522->114523
94521->104524
84520->94525
94525->104526
104526->114527
114527->124528
124528->134529
124528->134530
134530->144531
134530->144532
144532->154533
154533->164534
164534->174535
104526->114536
114536->124537
124537->134538
124537->134539
104526->114540
114540->124541
124541->134542
104526->114543
114543->124544
124544->134545
134545->144546
124544->134547
134547->144548
134547->144549
54330->64550
64550->74551
74551->84552
74551->84553
64550->74554
74554->84555
84555->94556
94556->104557
24291->34558
34558->44559
34558->44560
34558->44561
44561->54562
44561->54563
54563->64564
64564->74565
74565->84566
74565->84567
64564->74568
74568->84569
74568->84570
34558->44571
44571->54572
54572->64573
64573->74574
74574->84575
74574->84576
74574->84577
84577->94578
84577->94579
94579->104580
104580->114581
114581->124582
114581->124583
104580->114584
94579->104585
54572->64586
64586->74587
74587->84588
74587->84589
84589->94590
94590->104591
94590->104592
84589->94593
94593->104594
94593->104595
24291->34596
34596->44597
34596->44598
44598->54599
44598->54600
44598->54601
54601->64602
34596->44603
44603->54604
54604->64605
64605->74606
74606->84607
74606->84608
74606->84609
84609->94610
84609->94611
54604->64612
64612->74613
74613->84614
74613->84615
84615->94616
84615->94617
94617->104618
104618->114619
114619->124620
124620->134621
114619->124622
114619->124623
124623->134624
124623->134625
134625->144626
144626->154627
144626->154628
114619->124629
124629->134630
134630->144631
144631->154632
154632->164633
134630->144634
134630->144635
144635->154636
134630->144637
144637->154638
154638->164639
154638->164640
154638->164641
154638->164642
164642->174643
174643->184644
184644->194645
194645->204646
194645->204647
184644->194648
194648->204649
204649->214650
194648->204651
204651->214652
174643->184653
184653->194654
194654->204655
204655->214656
204655->214657
214657->224658
54604->64659
64659->74660
74660->84661
74660->84662
24291->34663
34663->44664
34663->44665
44665->54666
44665->54667
44665->54668
54668->64669
34663->44670
44670->54671
54671->64672
64672->74673
74673->84674
84674->94675
84674->94676
74673->84677
84677->94678
84677->94679
94679->104680
104680->114681
114681->124682
54671->64683
64683->74684
74684->84685
74684->84686
84686->94687
84686->94688
94688->104689
104689->114690
114690->124691
124691->134692
134692->144693
144693->154694
154694->164695
134692->144696
114690->124697
54671->64698
64698->74699
74699->84700
64698->74701
74701->84702
84702->94703
94703->104704
104704->114705
104704->114706
114706->124707
114706->124708
124708->134709
84702->94710
94710->104711
104711->114712
114712->124713
114712->124714
104711->114715
114715->124716
114715->124717
124717->134718
124717->134719
84702->94720
94720->104721
104721->114722
104721->114723
114723->124724
114723->124725
124725->134726
134726->144727
134726->144728
124725->134729
134729->144730
144730->154731
154731->164732
154731->164733
134729->144734
84702->94735
94735->104736
104736->114737
104736->114738
114738->124739
114738->124740
124740->134741
134741->144742
134741->144743
124740->134744
134744->144745
144745->154746
154746->164747
154746->164748
134744->144749
84702->94750
94750->104751
104751->114752
104751->114753
114753->124754
114753->124755
124755->134756
124755->134757
134757->144758
134757->144759
84702->94760
94760->104761
104761->114762
114762->124763
114762->124764
104761->114765
114765->124766
114765->124767
124767->134768
124767->134769
134769->144770
134769->144771
84702->94772
94772->104773
104773->114774
114774->124775
114774->124776
104773->114777
114777->124778
124778->134779
134779->144780
144780->154781
134779->144782
124778->134783
134783->144784
144784->154785
134783->144786
94772->104787
104787->114788
114788->124789
124789->134790
134790->144791
144791->154792
134790->144793
114788->124794
84702->94795
94795->104796
104796->114797
104796->114798
84702->94799
94799->104800
104800->114801
54671->64802
64802->74803
74803->84804
24291->34805
34805->44806
34805->44807
44807->54808
44807->54809
44807->54810
54810->64811
34805->44812
44812->54813
54813->64814
64814->74815
74815->84816
84816->94817
94817->104818
74815->84819
84819->94820
84819->94821
94821->104822
104822->114823
54813->64824
64824->74825
74825->84826
84826->94827
84826->94828
74825->84829
84829->94830
84829->94831
94831->104832
104832->114833
114833->124834
54813->64835
64835->74836
74836->84837
64835->74838
74838->84839
84839->94840
94840->104841
104841->114842
104841->114843
114843->124844
114843->124845
124845->134846
84839->94847
94847->104848
104848->114849
114849->124850
114849->124851
104848->114852
114852->124853
114852->124854
124854->134855
134855->144856
144856->154857
144856->154858
134855->144859
124854->134860
134860->144861
84839->94862
94862->104863
104863->114864
114864->124865
114864->124866
104863->114867
114867->124868
124868->134869
94862->104870
104870->114871
114871->124872
124872->134873
124872->134874
134874->144875
134874->144876
54813->64877
64877->74878
74878->84879
74878->84880
84880->94881
84880->94882
94882->104883
94882->104884
104884->114885
114885->124886
54813->64887
64887->74888
74888->84889
74888->84890
84890->94891
94891->104892
104892->114893
104892->114894
64887->74895
64887->74896
74896->84897
64887->74898
74898->84899
84899->94900
94900->104901
104901->114902
104901->114903
114903->124904
114903->124905
124905->134906
84899->94907
94907->104908
104908->114909
104908->114910
114910->124911
114910->124912
124912->134913
134913->144914
124912->134915
134915->144916
84899->94917
94917->104918
104918->114919
114919->124920
124920->134921
134921->144922
124920->134923
114919->124924
124924->134925
124924->134926
104918->114927
114927->124928
114927->124929
94917->104930
104930->114931
114931->124932
124932->134933
134933->144934
144934->154935
144934->154936
134933->144937
144937->154938
144937->154939
154939->164940
154939->164941
114931->124942
124942->134943
134943->144944
144944->154945
144944->154946
134943->144947
144947->154948
154948->164949
164949->174950
174950->184951
174950->184952
164949->174953
174953->184954
174953->184955
154948->164956
164956->174957
174957->184958
164956->174959
124942->134960
134960->144961
144961->154962
154962->164963
164963->174964
174964->184965
164963->174966
144961->154967
154967->164968
164968->174969
174969->184970
164968->174971
54813->64972
64972->74973
74973->84974
74973->84975
84975->94976
94976->104977
-10->04978
04978->14979
14979->24980
24980->34981
34981->44982
44982->54983
54983->64984
04978->14985
14985->24986
24986->34987
34987->44988
44988->54989
54989->64990
64990->74991
04978->14992
14992->24993
24993->34994
34994->44995
04978->14996
14996->24997
24997->34998
34998->44999
04978->15000
15000->25001
25001->35002
35002->45003
04978->15004
15004->25005
25005->35006
35006->45007
04978->15008
15008->25009
25009->35010
04978->15011
15011->25012
25012->35013
35013->45014
45014->55015
04978->15016
15016->25017
15016->25018
25018->35019
15016->25020
25020->35021
35021->45022
35021->45023
35021->45024
45024->55025
25020->35026
35026->45027
35026->45028
35026->45029
45029->55030
25020->35031
35031->45032
35031->45033
45033->55034
25020->35035
35035->45036
45036->55037
45036->55038
35035->45039
25020->35040
35040->45041
35040->45042
45042->55043
45042->55044
35040->45045
25020->35046
35046->45047
35046->45048
45048->55049
45048->55050
35046->45051
25020->35052
35052->45053
35052->45054
35052->45055
25020->35056
35056->45057
35056->45058
45058->55059
35056->45060
25020->35061
35061->45062
35061->45063
45063->55064
45063->55065
55065->65066
65066->75067
75067->85068
85068->95069
85068->95070
55065->65071
35061->45072
45072->55073
55073->65074
65074->75075
65074->75076
25020->35077
35077->45078
35077->45079
45079->55080
55080->65081
65081->75082
75082->85083
85083->95084
45079->55085
55085->65086
65086->75087
65086->75088
35077->45089
45089->55090
55090->65091
65091->75092
75092->85093
75092->85094
85094->95095
85094->95096
55090->65097
65097->75098
75098->85099
75098->85100
85100->95101
85100->95102
55090->65103
65103->75104
75104->85105
85105->95106
95106->105107
105107->115108
115108->125109
75104->85110
85110->95111
85110->95112
95112->105113
105113->115114
115114->125115
125115->135116
55090->65117
65117->75118
75118->85119
75118->85120
85120->95121
85120->95122
65117->75123
75123->85124
75123->85125
85125->95126
65117->75127
75127->85128
65117->75129
75129->85130
85130->95131
95131->105132
105132->115133
105132->115134
105132->115135
115135->125136
115135->125137
125137->135138
125137->135139
135139->145140
135139->145141
85130->95142
95142->105143
105143->115144
105143->115145
115145->125146
115145->125147
115145->125148
85130->95149
95149->105150
105150->115151
55090->65152
65152->75153
25020->35154
35154->45155
35154->45156
45156->55157
45156->55158
55158->65159
65159->75160
75160->85161
75160->85162
65159->75163
75163->85164
85164->95165
95165->105166
75163->85167
35154->45168
45168->55169
55169->65170
65170->75171
75171->85172
75171->85173
85173->95174
85173->95175
55169->65176
65176->75177
75177->85178
75177->85179
85179->95180
85179->95181
55169->65182
65182->75183
75183->85184
75183->85185
85185->95186
85185->95187
65182->75188
75188->85189
75188->85190
85190->95191
65182->75192
75192->85193
65182->75194
75194->85195
85195->95196
95196->105197
105197->115198
105197->115199
105197->115200
115200->125201
115200->125202
125202->135203
125202->135204
135204->145205
135204->145206
85195->95207
95207->105208
105208->115209
115209->125210
115209->125211
105208->115212
115212->125213
115212->125214
125214->135215
125214->135216
85195->95217
95217->105218
105218->115219
105218->115220
95217->105221
105221->115222
115222->125223
115222->125224
115222->125225
115222->125226
125226->135227
135227->145228
145228->155229
145228->155230
155230->165231
165231->175232
165231->175233
175233->185234
175233->185235
155230->165236
155230->165237
165237->175238
165237->175239
85195->95240
95240->105241
105241->115242
25020->35243
35243->45244
35243->45245
45245->55246
45245->55247
55247->65248
65248->75249
75249->85250
85250->95251
85250->95252
75249->85253
65248->75254
75254->85255
85255->95256
95256->105257
75254->85258
35243->45259
45259->55260
55260->65261
65261->75262
75262->85263
75262->85264
85264->95265
85264->95266
55260->65267
65267->75268
75268->85269
75268->85270
85270->95271
85270->95272
55260->65273
65273->75274
65273->75275
65273->75276
65273->75277
75277->85278
85278->95279
95279->105280
105280->115281
105280->115282
105280->115283
115283->125284
115283->125285
125285->135286
125285->135287
85278->95288
95288->105289
105289->115290
115290->125291
115290->125292
105289->115293
115293->125294
115293->125295
125295->135296
125295->135297
85278->95298
95298->105299
105299->115300
105299->115301
95298->105302
105302->115303
115303->125304
115303->125305
115303->125306
115303->125307
125307->135308
135308->145309
145309->155310
145309->155311
155311->165312
165312->175313
165312->175314
175314->185315
175314->185316
155311->165317
155311->165318
165318->175319
165318->175320
85278->95321
95321->105322
105322->115323
25020->35324
35324->45325
35324->45326
45326->55327
45326->55328
55328->65329
65329->75330
75330->85331
85331->95332
85331->95333
75330->85334
65329->75335
75335->85336
85336->95337
95337->105338
75335->85339
35324->45340
45340->55341
55341->65342
65342->75343
75343->85344
75343->85345
85345->95346
85345->95347
55341->65348
65348->75349
75349->85350
75349->85351
85351->95352
85351->95353
55341->65354
65354->75355
65354->75356
65354->75357
65354->75358
75358->85359
85359->95360
95360->105361
105361->115362
105361->115363
105361->115364
115364->125365
115364->125366
125366->135367
125366->135368
85359->95369
95369->105370
105370->115371
115371->125372
115371->125373
105370->115374
115374->125375
115374->125376
125376->135377
125376->135378
85359->95379
95379->105380
105380->115381
105380->115382
95379->105383
105383->115384
115384->125385
115384->125386
115384->125387
115384->125388
125388->135389
135389->145390
145390->155391
145390->155392
155392->165393
165393->175394
165393->175395
175395->185396
175395->185397
155392->165398
155392->165399
165399->175400
165399->175401
155392->165402
85359->95403
95403->105404
105404->115405
25020->35406
35406->45407
35406->45408
45408->55409
45408->55410
55410->65411
65411->75412
65411->75413
45408->55414
55414->65415
35406->45416
45416->55417
55417->65418
65418->75419
75419->85420
75419->85421
55417->65422
65422->75423
75423->85424
75423->85425
85425->95426
85425->95427
65422->75428
75428->85429
75428->85430
65422->75431
75431->85432
65422->75433
75433->85434
85434->95435
95435->105436
105436->115437
105436->115438
115438->125439
115438->125440
85434->95441
95441->105442
105442->115443
105442->115444
115444->125445
115444->125446
85434->95447
95447->105448
105448->115449
105448->115450
115450->125451
115450->125452
85434->95453
95453->105454
105454->115455
105454->115456
115456->125457
125457->135458
115456->125459
125459->135460
125459->135461
135461->145462
135461->145463
85434->95464
95464->105465
105465->115466
105465->115467
95464->105468
105468->115469
115469->125470
125470->135471
125470->135472
95464->105473
105473->115474
115474->125475
125475->135476
135476->145477
135476->145478
145478->155479
115474->125480
125480->135481
125480->135482
125480->135483
125480->135484
135484->145485
145485->155486
155486->165487
155486->165488
55417->65489
65489->75490
75490->85491
75490->85492
85492->95493
55417->65494
65494->75495
65494->75496
65494->75497
65494->75498
75498->85499
85499->95500
95500->105501
95500->105502
25020->35503
35503->45504
35503->45505
45505->55506
45505->55507
55507->65508
65508->75509
65508->75510
45505->55511
55511->65512
35503->45513
45513->55514
55514->65515
65515->75516
75516->85517
75516->85518
55514->65519
65519->75520
75520->85521
75520->85522
55514->65523
65523->75524
75524->85525
75524->85526
55514->65527
65527->75528
75528->85529
75528->85530
55514->65531
65531->75532
75532->85533
75532->85534
25020->35535
35535->45536
35535->45537
45537->55538
45537->55539
55539->65540
65540->75541
75541->85542
75541->85543
65540->75544
75544->85545
85545->95546
85545->95547
75544->85548
45537->55549
55549->65550
65550->75551
65550->75552
35535->45553
45553->55554
55554->65555
65555->75556
75556->85557
75556->85558
75556->85559
85559->95560
95560->105561
95560->105562
85559->95563
95563->105564
55554->65565
65565->75566
75566->85567
75566->85568
75566->85569
85569->95570
95570->105571
95570->105572
85569->95573
95573->105574
55554->65575
65575->75576
75576->85577
75576->85578
75576->85579
85579->95580
95580->105581
95580->105582
85579->95583
95583->105584
55554->65585
65585->75586
75586->85587
75586->85588
75586->85589
85589->95590
95590->105591
95590->105592
85589->95593
95593->105594
55554->65595
65595->75596
75596->85597
75596->85598
75596->85599
85599->95600
95600->105601
95600->105602
85599->95603
95603->105604
55554->65605
65605->75606
75606->85607
75606->85608
75606->85609
25020->35610
35610->45611
35610->45612
45612->55613
45612->55614
55614->65615
65615->75616
75616->85617
75616->85618
65615->75619
75619->85620
85620->95621
85620->95622
75619->85623
35610->45624
45624->55625
55625->65626
65626->75627
75627->85628
75627->85629
65626->75630
75630->85631
55625->65632
65632->75633
75633->85634
75633->85635
75633->85636
85636->95637
55625->65638
65638->75639
75639->85640
75639->85641
75639->85642
85642->95643
85642->95644
95644->105645
105645->115646
105645->115647
55625->65648
65648->75649
75649->85650
75649->85651
75649->85652
85652->95653
85652->95654
95654->105655
105655->115656
105655->115657
55625->65658
65658->75659
75659->85660
75659->85661
75659->85662
85662->95663
85662->95664
95664->105665
105665->115666
105665->115667
55625->65668
65668->75669
75669->85670
75669->85671
75669->85672
85672->95673
85672->95674
95674->105675
105675->115676
105675->115677
85672->95678
55625->65679
65679->75680
75680->85681
75680->85682
55625->65683
65683->75684
75684->85685
75684->85686
85686->95687
85686->95688
65683->75689
75689->85690
75689->85691
65683->75692
75692->85693
65683->75694
75694->85695
85695->95696
95696->105697
105697->115698
115698->125699
115698->125700
105697->115701
105697->115702
115702->125703
85695->95704
95704->105705
105705->115706
115706->125707
115706->125708
105705->115709
105705->115710
115710->125711
85695->95712
95712->105713
105713->115714
115714->125715
115714->125716
105713->115717
105713->115718
115718->125719
85695->95720
95720->105721
105721->115722
105721->115723
105721->115724
115724->125725
85695->95726
95726->105727
105727->115728
105727->115729
95726->105730
85695->95731
95731->105732
105732->115733
115733->125734
115733->125735
105732->115736
105732->115737
115737->125738
115737->125739
125739->135740
85695->95741
95741->105742
105742->115743
105742->115744
115744->125745
115744->125746
95741->105747
105747->115748
105747->115749
115749->125750
125750->135751
125750->135752
115749->125753
95741->105754
105754->115755
95741->105756
105756->115757
115757->125758
125758->135759
135759->145760
135759->145761
135759->145762
135759->145763
125758->135764
125758->135765
135765->145766
55625->65767
65767->75768
75768->85769
75768->85770
75768->85771
85771->95772
55625->65773
65773->75774
75774->85775
75774->85776
75774->85777
85777->95778
85777->95779
95779->105780
55625->65781
65781->75782
75782->85783
75782->85784
85784->95785
85784->95786
65781->75787
75787->85788
75787->85789
85789->95790
65781->75791
75791->85792
65781->75793
75793->85794
85794->95795
95795->105796
105796->115797
105796->115798
95795->105799
95795->105800
105800->115801
55625->65802
65802->75803
75803->85804
75803->85805
75803->85806
55625->65807
65807->75808
25020->35809
35809->45810
35809->45811
45811->55812
45811->55813
55813->65814
65814->75815
65814->75816
35809->45817
45817->55818
55818->65819
65819->75820
75820->85821
75820->85822
85822->95823
85822->95824
95824->105825
95824->105826
55818->65827
65827->75828
75828->85829
75828->85830
65827->75831
75831->85832
85832->95833
95833->105834
95833->105835
55818->65836
65836->75837
25020->35838
35838->45839
35838->45840
45840->55841
45840->55842
55842->65843
65843->75844
75844->85845
75844->85846
65843->75847
75847->85848
75847->85849
35838->45850
45850->55851
55851->65852
65852->75853
75853->85854
75853->85855
85855->95856
85855->95857
95857->105858
95857->105859
55851->65860
65860->75861
75861->85862
75861->85863
65860->75864
75864->85865
85865->95866
95866->105867
105867->115868
115868->125869
115868->125870
105867->115871
105867->115872
85865->95873
95873->105874
55851->65875
65875->75876
25020->35877
35877->45878
35877->45879
45879->55880
45879->55881
55881->65882
65882->75883
65882->75884
35877->45885
45885->55886
55886->65887
65887->75888
65887->75889
25020->35890
35890->45891
35890->45892
45892->55893
35890->45894
45894->55895
55895->65896
65896->75897
65896->75898
75898->85899
85899->95900
95900->105901
105901->115902
105901->115903
95900->105904
105904->115905
105904->115906
85899->95907
95907->105908
95907->105909
55895->65910
25020->35911
35911->45912
35911->45913
45913->55914
35911->45915
45915->55916
55916->65917
65917->75918
65917->75919
75919->85920
85920->95921
95921->105922
105922->115923
105922->115924
95921->105925
105925->115926
105925->115927
95921->105928
105928->115929
105928->115930
85920->95931
95931->105932
95931->105933
55916->65934
25020->35935
35935->45936
35935->45937
45937->55938
35935->45939
45939->55940
55940->65941
55940->65942
55940->65943
55940->65944
45939->55945
55945->65946
55945->65947
55945->65948
55945->65949
45939->55950
55950->65951
55950->65952
55950->65953
55950->65954
45939->55955
55955->65956
55955->65957
65957->75958
65957->75959
75959->85960
85960->95961
95961->105962
95961->105963
85960->95964
95964->105965
95964->105966
75959->85967
85967->95968
85967->95969
55955->65970
65970->75971
75971->85972
85972->95973
95973->105974
105974->115975
95973->105976
95973->105977
75971->85978
85978->95979
95979->105980
105980->115981
95979->105982
95979->105983
75971->85984
85984->95985
95985->105986
105986->115987
95985->105988
95985->105989
45939->55990
55990->65991
65991->75992
55990->65993
55990->65994
65994->75995
65994->75996
55990->65997
65997->75998
75998->85999
85999->96000
85999->96001
96001->106002
96001->106003
96001->106004
96001->106005
25020->36006
36006->46007
36006->46008
46008->56009
46008->56010
56010->66011
66011->76012
76012->86013
76012->86014
66011->76015
76015->86016
76015->86017
36006->46018
46018->56019
56019->66020
66020->76021
76021->86022
76021->86023
86023->96024
86023->96025
96025->106026
96025->106027
106027->116028
106027->116029
56019->66030
66030->76031
76031->86032
76031->86033
86033->96034
66030->76035
76035->86036
86036->96037
96037->106038
106038->116039
106038->116040
106038->116041
116041->126042
116041->126043
86036->96044
96044->106045
106045->116046
106045->116047
106045->116048
116048->126049
116048->126050
126050->136051
126050->136052
56019->66053
66053->76054
25020->36055
36055->46056
36055->46057
46057->56058
46057->56059
56059->66060
66060->76061
76061->86062
86062->96063
86062->96064
76061->86065
86065->96066
86065->96067
66060->76068
76068->86069
86069->96070
96070->106071
106071->116072
116072->126073
76068->86074
36055->46075
46075->56076
56076->66077
66077->76078
76078->86079
86079->96080
86079->96081
76078->86082
86082->96083
86082->96084
96084->106085
96084->106086
56076->66087
66087->76088
76088->86089
76088->86090
66087->76091
76091->86092
86092->96093
86092->96094
86092->96095
86092->96096
96096->106097
106097->116098
116098->126099
116098->126100
126100->136101
136101->146102
126100->136103
136103->146104
146104->156105
146104->156106
156106->166107
156106->166108
136103->146109
136103->146110
146110->156111
146110->156112
25020->36113
36113->46114
36113->46115
46115->56116
46115->56117
56117->66118
66118->76119
76119->86120
76119->86121
66118->76122
76122->86123
76122->86124
36113->46125
46125->56126
56126->66127
66127->76128
76128->86129
76128->86130
86130->96131
86130->96132
56126->66133
66133->76134
76134->86135
76134->86136
56126->66137
66137->76138
76138->86139
76138->86140
76138->86141
86141->96142
96142->106143
96142->106144
86141->96145
56126->66146
66146->76147
76147->86148
76147->86149
86149->96150
86149->96151
66146->76152
76152->86153
86153->96154
86153->96155
86153->96156
96156->106157
96156->106158
66146->76159
76159->86160
86160->96161
56126->66162
66162->76163
76163->86164
76163->86165
76163->86166
56126->66167
66167->76168
25020->36169
36169->46170
36169->46171
46171->56172
46171->56173
56173->66174
66174->76175
76175->86176
76175->86177
66174->76178
76178->86179
76178->86180
36169->46181
46181->56182
56182->66183
66183->76184
76184->86185
76184->86186
86186->96187
86186->96188
96188->106189
96188->106190
56182->66191
66191->76192
76192->86193
76192->86194
56182->66195
66195->76196
76196->86197
76196->86198
76196->86199
86199->96200
96200->106201
96200->106202
86199->96203
56182->66204
66204->76205
76205->86206
76205->86207
86207->96208
86207->96209
66204->76210
76210->86211
86211->96212
96212->106213
106213->116214
106213->116215
96212->106216
106216->116217
86211->96218
96218->106219
106219->116220
56182->66221
66221->76222
25020->36223
36223->46224
36223->46225
46225->56226
46225->56227
56227->66228
66228->76229
76229->86230
86230->96231
96231->106232
96231->106233
66228->76234
36223->46235
46235->56236
56236->66237
66237->76238
66237->76239
25020->36240
36240->46241
36240->46242
46242->56243
46242->56244
56244->66245
66245->76246
76246->86247
76246->86248
66245->76249
76249->86250
86250->96251
96251->106252
106252->116253
106252->116254
116254->126255
126255->136256
136256->146257
136256->146258
76249->86259
36240->46260
46260->56261
56261->66262
66262->76263
76263->86264
66262->76265
76265->86266
86266->96267
96267->106268
106268->116269
106268->116270
116270->126271
116270->126272
126272->136273
136273->146274
146274->156275
156275->166276
166276->176277
156275->166278
86266->96279
96279->106280
106280->116281
106280->116282
116282->126283
86266->96284
96284->106285
106285->116286
106285->116287
116287->126288
126288->136289
136289->146290
136289->146291
116287->126292
126292->136293
126292->136294
56261->66295
66295->76296
76296->86297
76296->86298
86298->96299
96299->106300
106300->116301
106300->116302
66295->76303
66295->76304
76304->86305
86305->96306
76304->86307
66295->76308
76308->86309
86309->96310
96310->106311
96310->106312
106312->116313
116313->126314
126314->136315
126314->136316
106312->116317
116317->126318
126318->136319
136319->146320
126318->136321
116317->126322
126322->136323
56261->66324
66324->76325
76325->86326
25020->36327
36327->46328
36327->46329
46329->56330
46329->56331
56331->66332
66332->76333
66332->76334
36327->46335
46335->56336
56336->66337
66337->76338
66337->76339
76339->86340
76339->86341
76339->86342
76339->86343
25020->36344
36344->46345
36344->46346
46346->56347
46346->56348
56348->66349
66349->76350
76350->86351
86351->96352
86351->96353
76350->86354
86354->96355
86354->96356
76350->86357
86357->96358
86357->96359
66349->76360
76360->86361
76360->86362
36344->46363
46363->56364
56364->66365
66365->76366
76366->86367
76366->86368
66365->76369
76369->86370
86370->96371
86370->96372
86370->96373
96373->106374
56364->66375
66375->76376
76376->86377
76376->86378
66375->76379
76379->86380
86380->96381
86380->96382
86380->96383
56364->66384
66384->76385
76385->86386
76385->86387
86387->96388
86387->96389
96389->106390
56364->66391
66391->76392
76392->86393
86393->96394
86393->96395
76392->86396
86396->96397
86396->96398
96398->106399
56364->66400
66400->76401
76401->86402
76401->86403
86403->96404
86403->96405
96405->106406
96405->106407
56364->66408
66408->76409
76409->86410
76409->86411
56364->66412
66412->76413
76413->86414
76413->86415
86415->96416
86415->96417
66412->76418
76418->86419
76418->86420
66412->76421
76421->86422
66412->76423
76423->86424
86424->96425
96425->106426
106426->116427
106426->116428
106426->116429
116429->126430
126430->136431
126430->136432
136432->146433
136432->146434
146434->156435
156435->166436
156435->166437
116429->126438
86424->96439
96439->106440
106440->116441
106440->116442
116442->126443
116442->126444
96439->106445
106445->116446
116446->126447
116446->126448
116446->126449
126449->136450
126449->136451
96439->106452
106452->116453
56364->66454
66454->76455
76455->86456
76455->86457
76455->86458
56364->66459
66459->76460
76460->86461
76460->86462
86462->96463
86462->96464
96464->106465
96464->106466
56364->66467
66467->76468
76468->86469
86469->96470
86469->96471
96471->106472
96471->106473
76468->86474
86474->96475
86474->96476
66467->76477
76477->86478
86478->96479
96479->106480
96479->106481
96479->106482
106482->116483
116483->126484
106482->116485
56364->66486
66486->76487
25020->36488
36488->46489
36488->46490
46490->56491
46490->56492
56492->66493
66493->76494
76494->86495
86495->96496
96496->106497
96496->106498
86495->96499
76494->86500
86500->96501
86500->96502
76494->86503
86503->96504
86503->96505
66493->76506
76506->86507
76506->86508
36488->46509
46509->56510
56510->66511
66511->76512
76512->86513
76512->86514
86514->96515
86514->96516
96516->106517
56510->66518
66518->76519
76519->86520
76519->86521
86521->96522
86521->96523
96523->106524
96523->106525
56510->66526
66526->76527
76527->86528
76527->86529
56510->66530
66530->76531
76531->86532
76531->86533
86533->96534
86533->96535
66530->76536
76536->86537
76536->86538
66530->76539
76539->86540
66530->76541
76541->86542
86542->96543
96543->106544
106544->116545
106544->116546
106544->116547
116547->126548
126548->136549
126548->136550
136550->146551
136550->146552
146552->156553
156553->166554
156553->166555
116547->126556
86542->96557
96557->106558
106558->116559
106558->116560
116560->126561
116560->126562
96557->106563
106563->116564
116564->126565
116564->126566
116564->126567
126567->136568
126567->136569
96557->106570
106570->116571
56510->66572
66572->76573
76573->86574
76573->86575
76573->86576
56510->66577
66577->76578
76578->86579
76578->86580
86580->96581
86580->96582
96582->106583
96582->106584
56510->66585
66585->76586
76586->86587
86587->96588
86587->96589
96589->106590
96589->106591
76586->86592
86592->96593
86592->96594
66585->76595
76595->86596
86596->96597
96597->106598
96597->106599
96597->106600
106600->116601
116601->126602
106600->116603
56510->66604
66604->76605
25020->36606
36606->46607
36606->46608
36606->46609
46609->56610
56610->66611
66611->76612
76612->86613
86613->96614
86613->96615
56610->66616
66616->76617
66616->76618
76618->86619
86619->96620
96620->106621
96620->106622
46609->56623
56623->66624
56623->66625
66625->76626
66625->76627
76627->86628
86628->96629
96629->106630
96629->106631
86628->96632
96632->106633
96632->106634
56623->66635
66635->76636
76636->86637
86637->96638
96638->106639
96638->106640
106640->116641
106640->116642
116642->126643
116642->126644
76636->86645
86645->96646
96646->106647
96646->106648
86645->96649
96649->106650
106650->116651
116651->126652
116651->126653
116651->126654
76636->86655
86655->96656
96656->106657
96656->106658
96656->106659
106659->116660
106659->116661
116661->126662
116661->126663
126663->136664
126663->136665
76636->86666
86666->96667
96667->106668
96667->106669
106669->116670
106669->116671
46609->56672
56672->66673
66673->76674
56672->66675
56672->66676
66676->76677
66676->76678
56672->66679
66679->76680
76680->86681
86681->96682
96682->106683
96682->106684
106684->116685
106684->116686
76680->86687
86687->96688
96688->106689
96688->106690
106690->116691
116691->126692
126692->136693
126692->136694
86687->96695
86687->96696
96696->106697
86687->96698
96698->106699
106699->116700
116700->126701
126701->136702
126701->136703
136703->146704
136703->146705
146705->156706
106699->116707
116707->126708
126708->136709
126708->136710
136710->146711
136710->146712
146712->156713
106699->116714
116714->126715
126715->136716
126715->136717
126715->136718
136718->146719
146719->156720
156720->166721
166721->176722
166721->176723
176723->186724
176723->186725
156720->166726
146719->156727
136718->146728
76680->86729
86729->96730
46609->56731
56731->66732
56731->66733
66733->76734
66733->76735
56731->66736
66736->76737
76737->86738
86738->96739
96739->106740
86738->96741
25020->36742
36742->46743
36742->46744
46744->56745
46744->56746
36742->46747
46747->56748
56748->66749
66749->76750
76750->86751
76750->86752
66749->76753
66749->76754
76754->86755
25020->36756
36756->46757
36756->46758
46758->56759
56759->66760
56759->66761
56759->66762
66762->76763
66762->76764
46758->56765
56765->66766
56765->66767
56765->66768
66768->76769
46758->56770
56770->66771
56770->66772
56770->66773
46758->56774
56774->66775
56774->66776
56774->66777
46758->56778
56778->66779
56778->66780
56778->66781
46758->56782
56782->66783
56782->66784
56782->66785
46758->56786
56786->66787
66787->76788
66787->76789
56786->66790
56786->66791
66791->76792
66791->76793
76793->86794
86794->96795
96795->106796
106796->116797
116797->126798
116797->126799
86794->96800
56786->66801
66801->76802
76802->86803
86803->96804
96804->106805
96804->106806
96804->106807
106807->116808
116808->126809
116808->126810
106807->116811
116811->126812
126812->136813
116811->126814
76802->86815
86815->96816
96816->106817
96816->106818
96816->106819
106819->116820
106819->116821
116821->126822
126822->136823
76802->86824
86824->96825
96825->106826
106826->116827
116827->126828
96825->106829
106829->116830
106829->116831
116831->126832
76802->86833
86833->96834
96834->106835
96834->106836
76802->86837
86837->96838
96838->106839
96838->106840
76802->86841
86841->96842
96842->106843
96842->106844
96842->106845
76802->86846
86846->96847
96847->106848
76802->86849
86849->96850
96850->106851
96850->106852
96850->106853
76802->86854
86854->96855
96855->106856
46758->56857
56857->66858
56857->66859
66859->76860
66859->76861
76861->86862
86862->96863
96863->106864
96863->106865
86862->96866
96866->106867
96866->106868
56857->66869
66869->76870
76870->86871
86871->96872
96872->106873
96872->106874
106874->116875
106874->116876
116876->126877
116876->126878
76870->86879
86879->96880
86879->96881
86879->96882
96882->106883
86879->96884
96884->106885
106885->116886
116886->126887
116886->126888
116886->126889
126889->136890
126889->136891
76870->86892
86892->96893
96893->106894
96893->106895
76870->86896
86896->96897
96897->106898
106898->116899
106898->116900
96897->106901
96897->106902
106902->116903
46758->56904
56904->66905
56904->66906
66906->76907
66906->76908
76908->86909
86909->96910
96910->106911
106911->116912
86909->96913
56904->66914
66914->76915
76915->86916
86916->96917
96917->106918
96917->106919
106919->116920
106919->116921
76915->86922
86922->96923
86922->96924
86922->96925
86922->96926
96926->106927
106927->116928
116928->126929
116928->126930
126930->136931
126930->136932
136932->146933
136932->146934
46758->56935
56935->66936
56935->66937
66937->76938
66937->76939
56935->66940
66940->76941
76941->86942
86942->96943
96943->106944
96943->106945
96943->106946
106946->116947
106946->116948
116948->126949
126949->136950
126949->136951
76941->86952
86952->96953
96953->106954
106954->116955
106954->116956
96953->106957
96953->106958
106958->116959
106958->116960
76941->86961
86961->96962
96962->106963
96962->106964
96962->106965
106965->116966
106965->116967
116967->126968
126968->136969
126968->136970
106965->116971
76941->86972
86972->96973
96973->106974
106974->116975
116975->126976
96973->106977
106977->116978
106977->116979
116979->126980
126980->136981
76941->86982
86982->96983
86982->96984
86982->96985
96985->106986
96985->106987
96985->106988
86982->96989
96989->106990
106990->116991
116991->126992
126992->136993
126992->136994
136994->146995
146995->156996
146995->156997
136994->146998
106990->116999
116999->127000
127000->137001
127000->137002
106990->117003
117003->127004
127004->137005
127004->137006
76941->87007
87007->97008
97008->107009
107009->117010
87007->97011
97011->107012
107012->117013
117013->127014
127014->137015
127014->137016
137016->147017
137016->147018
147018->157019
107012->117020
117020->127021
117020->127022
117020->127023
127023->137024
117020->127025
127025->137026
137026->147027
147027->157028
157028->167029
157028->167030
167030->177031
167030->177032
177032->187033
177032->187034
137026->147035
147035->157036
157036->167037
157036->167038
137026->147039
147039->157040
157040->167041
157040->167042
167042->177043
167042->177044
177044->187045
137026->147046
147046->157047
157047->167048
167048->177049
167048->177050
157047->167051
147046->157052
157052->167053
167053->177054
177054->187055
177054->187056
177054->187057
187057->197058
137026->147059
147059->157060
157060->167061
157060->167062
167062->177063
167062->177064
177064->187065
177064->187066
137026->147067
147067->157068
157068->167069
157068->167070
167070->177071
167070->177072
137026->147073
147073->157074
157074->167075
157074->167076
167076->177077
137026->147078
147078->157079
157079->167080
157079->167081
46758->57082
57082->67083
57082->67084
67084->77085
67084->77086
77086->87087
87087->97088
87087->97089
57082->67090
67090->77091
77091->87092
87092->97093
97093->107094
107094->117095
117095->127096
97093->107097
107097->117098
107097->117099
117099->127100
77091->87101
87101->97102
97102->107103
107103->117104
107103->117105
97102->107106
107106->117107
117107->127108
107106->117109
87101->97110
77091->87111
87111->97112
97112->107113
97112->107114
107114->117115
117115->127116
107114->117117
117117->127118
117117->127119
127119->137120
137120->147121
77091->87122
87122->97123
97123->107124
107124->117125
117125->127126
97123->107127
107127->117128
107127->117129
117129->127130
77091->87131
87131->97132
97132->107133
97132->107134
107134->117135
107134->117136
87131->97137
97137->107138
97137->107139
107139->117140
87131->97141
97141->107142
87131->97143
97143->107144
107144->117145
117145->127146
127146->137147
127146->137148
117145->127149
117145->127150
127150->137151
77091->87152
87152->97153
97153->107154
107154->117155
117155->127156
127156->137157
107154->117158
117158->127159
97153->107160
97153->107161
46758->57162
57162->67163
57162->67164
67164->77165
67164->77166
77166->87167
87167->97168
97168->107169
107169->117170
87167->97171
57162->67172
67172->77173
77173->87174
87174->97175
97175->107176
97175->107177
97175->107178
77173->87179
87179->97180
97180->107181
97180->107182
97180->107183
107183->117184
77173->87185
87185->97186
97186->107187
97186->107188
107188->117189
107188->117190
77173->87191
87191->97192
97192->107193
107193->117194
107193->117195
97192->107196
97192->107197
77173->87198
87198->97199
97199->107200
97199->107201
97199->107202
77173->87203
87203->97204
97204->107205
97204->107206
107206->117207
107206->117208
117208->127209
117208->127210
77173->87211
87211->97212
97212->107213
107213->117214
117214->127215
127215->137216
127215->137217
137217->147218
147218->157219
157219->167220
157219->167221
97212->107222
107222->117223
107222->117224
117224->127225
127225->137226
137226->147227
137226->147228
147228->157229
157229->167230
167230->177231
167230->177232
117224->127233
127233->137234
137234->147235
127233->137236
127233->137237
77173->87238
87238->97239
97239->107240
97239->107241
107241->117242
107241->117243
77173->87244
87244->97245
97245->107246
97245->107247
46758->57248
57248->67249
57248->67250
67250->77251
67250->77252
77252->87253
87253->97254
87253->97255
57248->67256
67256->77257
77257->87258
87258->97259
97259->107260
107260->117261
107260->117262
97259->107263
107263->117264
107263->117265
117265->127266
117265->127267
127267->137268
77257->87269
87269->97270
97270->107271
107271->117272
107271->117273
97270->107274
107274->117275
107274->117276
117276->127277
117276->127278
127278->137279
77257->87280
87280->97281
97281->107282
97281->107283
107283->117284
117284->127285
107283->117286
117286->127287
117286->127288
127288->137289
77257->87290
87290->97291
97291->107292
97291->107293
87290->97294
97294->107295
107295->117296
117296->127297
127297->137298
127297->137299
137299->147300
137299->147301
137299->147302
137299->147303
137299->147304
107295->117305
117305->127306
127306->137307
127306->137308
137308->147309
137308->147310
137308->147311
137308->147312
137308->147313
107295->117314
117314->127315
127315->137316
127315->137317
137317->147318
137317->147319
137317->147320
137317->147321
137317->147322
77257->87323
87323->97324
97324->107325
97324->107326
97324->107327
77257->87328
87328->97329
97329->107330
97329->107331
97329->107332
77257->87333
87333->97334
97334->107335
97334->107336
97334->107337
77257->87338
87338->97339
97339->107340
97339->107341
97339->107342
46758->57343
57343->67344
57343->67345
67345->77346
67345->77347
77347->87348
87348->97349
97349->107350
107350->117351
117351->127352
117351->127353
127353->137354
137354->147355
147355->157356
147355->157357
87348->97358
57343->67359
67359->77360
77360->87361
87361->97362
97362->107363
97362->107364
107364->117365
107364->117366
77360->87367
87367->97368
97368->107369
97368->107370
107370->117371
107370->117372
117372->127373
127373->137374
127373->137375
137375->147376
147376->157377
157377->167378
167378->177379
167378->177380
157377->167381
147376->157382
137375->147383
117372->127384
77360->87385
87385->97386
97386->107387
97386->107388
107388->117389
107388->117390
77360->87391
87391->97392
97392->107393
97392->107394
107394->117395
107394->117396
77360->87397
87397->97398
97398->107399
97398->107400
87397->97401
97401->107402
107402->117403
107402->117404
117404->127405
117404->127406
77360->87407
87407->97408
97408->107409
97408->107410
107410->117411
117411->127412
127412->137413
137413->147414
117411->127415
127415->137416
137416->147417
137416->147418
127415->137419
137419->147420
147420->157421
147420->157422
157422->167423
157422->167424
117411->127425
127425->137426
137426->147427
147427->157428
147427->157429
137426->147430
127425->137431
137431->147432
147432->157433
157433->167434
167434->177435
147432->157436
127425->137437
137437->147438
147438->157439
147438->157440
137437->147441
147441->157442
157442->167443
167443->177444
177444->187445
177444->187446
177444->187447
157442->167448
167448->177449
177449->187450
177449->187451
177449->187452
117411->127453
127453->137454
137454->147455
137454->147456
137454->147457
147457->157458
147457->157459
157459->167460
167460->177461
167460->177462
157459->167463
117411->127464
127464->137465
137465->147466
137465->147467
147467->157468
157468->167469
157468->167470
167470->177471
177471->187472
177471->187473
187473->197474
197474->207475
187473->197476
167470->177477
127464->137478
137478->147479
147479->157480
157480->167481
167481->177482
167481->177483
177483->187484
177483->187485
187485->197486
197486->207487
207487->217488
207487->217489
217489->227490
227490->237491
227490->237492
217489->227493
227493->237494
237494->247495
237494->247496
187485->197497
187485->197498
197498->207499
207499->217500
207499->217501
197498->207502
207502->217503
217503->227504
217503->227505
147479->157506
157506->167507
167507->177508
167507->177509
177509->187510
177509->187511
187511->197512
197512->207513
197512->207514
117411->127515
127515->137516
137516->147517
137516->147518
127515->137519
117411->127520
127520->137521
137521->147522
137521->147523
147523->157524
147523->157525
127520->137526
137526->147527
137526->147528
147528->157529
127520->137530
137530->147531
127520->137532
137532->147533
147533->157534
157534->167535
157534->167536
167536->177537
167536->177538
177538->187539
187539->197540
187539->197541
177538->187542
147533->157543
137532->147544
117411->127545
77360->87546
87546->97547
97547->107548
107548->117549
117549->127550
117549->127551
107548->117552
117552->127553
127553->137554
137554->147555
137554->147556
127553->137557
97547->107558
87546->97559
97559->107560
107560->117561
107560->117562
107560->117563
77360->87564
87564->97565
97565->107566
107566->117567
107566->117568
97565->107569
97565->107570
77360->87571
87571->97572
97572->107573
97572->107574
97572->107575
107575->117576
117576->127577
127577->137578
127577->137579
137579->147580
147580->157581
147580->157582
157582->167583
167583->177584
167583->177585
177585->187586
187586->197587
177585->187588
157582->167589
137579->147590
107575->117591
107575->117592
117592->127593
127593->137594
127593->137595
137595->147596
147596->157597
147596->157598
157598->167599
167599->177600
157598->167601
137595->147602
117592->127603
77360->87604
87604->97605
97605->107606
97605->107607
107607->117608
117608->127609
127609->137610
127609->137611
87604->97612
87604->97613
87604->97614
97614->107615
107615->117616
117616->127617
127617->137618
127617->137619
137619->147620
137619->147621
147621->157622
117616->127623
117616->127624
77360->87625
87625->97626
97626->107627
97626->107628
107628->117629
117629->127630
127630->137631
127630->137632
87625->97633
87625->97634
87625->97635
97635->107636
107636->117637
117637->127638
127638->137639
137639->147640
147640->157641
157641->167642
157641->167643
167643->177644
177644->187645
187645->197646
187645->197647
127638->137648
137648->147649
137648->147650
147650->157651
157651->167652
167652->177653
167652->177654
177654->187655
187655->197656
197656->207657
197656->207658
147650->157659
157659->167660
167660->177661
177661->187662
167660->177663
167660->177664
167660->177665
157659->167666
107636->117667
117667->127668
127668->137669
137669->147670
137669->147671
147671->157672
157672->167673
147671->157674
127668->137675
117667->127676
127676->137677
137677->147678
147678->157679
157679->167680
167680->177681
167680->177682
177682->187683
177682->187684
187684->197685
157679->167686
157679->167687
167687->177688
177688->187689
187689->197690
197690->207691
207691->217692
197690->207693
177688->187694
137677->147695
147695->157696
157696->167697
117667->127698
127698->137699
137699->147700
147700->157701
157701->167702
157701->167703
167703->177704
167703->177705
177705->187706
177705->187707
137699->147708
147708->157709
157709->167710
167710->177711
167710->177712
177712->187713
177712->187714
187714->197715
157709->167716
157709->167717
107636->117718
117718->127719
127719->137720
137720->147721
127719->137722
137722->147723
137722->147724
147724->157725
77360->87726
87726->97727
46758->57728
57728->67729
57728->67730
67730->77731
67730->77732
57728->67733
67733->77734
77734->87735
87735->97736
97736->107737
97736->107738
107738->117739
117739->127740
107738->117741
117741->127742
117741->127743
127743->137744
137744->147745
137744->147746
77734->87747
87747->97748
97748->107749
97748->107750
107750->117751
107750->117752
107750->117753
107750->117754
107750->117755
77734->87756
87756->97757
97757->107758
97757->107759
97757->107760
77734->87761
87761->97762
97762->107763
97762->107764
107764->117765
117765->127766
107764->117767
117767->127768
117767->127769
127769->137770
137770->147771
137770->147772
77734->87773
87773->97774
97774->107775
97774->107776
107776->117777
107776->117778
107776->117779
107776->117780
107776->117781
77734->87782
87782->97783
97783->107784
97783->107785
97783->107786
-10->07787
07787->17788
17788->27789
27789->37790
37790->47791
47791->57792
57792->67793
07787->17794
17794->27795
27795->37796
37796->47797
47797->57798
57798->67799
67799->77800
07787->17801
17801->27802
27802->37803
37803->47804
47804->57805
57805->67806
67806->77807
07787->17808
17808->27809
27809->37810
37810->47811
47811->57812
57812->67813
67813->77814
07787->17815
17815->27816
27816->37817
37817->47818
47818->57819
57819->67820
07787->17821
17821->27822
27822->37823
37823->47824
47824->57825
57825->67826
07787->17827
17827->27828
27828->37829
37829->47830
47830->57831
57831->67832
67832->77833
77833->87834
07787->17835
17835->27836
27836->37837
37837->47838
47838->57839
57839->67840
07787->17841
17841->27842
27842->37843
37843->47844
47844->57845
57845->67846
67846->77847
07787->17848
17848->27849
27849->37850
37850->47851
47851->57852
57852->67853
07787->17854
17854->27855
27855->37856
37856->47857
47857->57858
57858->67859
07787->17860
17860->27861
27861->37862
37862->47863
07787->17864
17864->27865
27865->37866
07787->17867
17867->27868
17867->27869
27869->37870
17867->27871
27871->37872
37872->47873
47873->57874
57874->67875
67875->77876
67875->77877
37872->47878
27871->37879
37879->47880
47880->57881
37879->47882
37879->47883
47883->57884
57884->67885
67885->77886
47883->57887
57887->67888
67888->77889
77889->87890
77889->87891
67888->77892
37879->47893
47893->57894
57894->67895
67895->77896
77896->87897
77896->87898
67895->77899
77899->87900
87900->97901
97901->107902
107902->117903
107902->117904
87900->97905
97905->107906
107906->117907
57894->67908
67908->77909
77909->87910
77909->87911
87911->97912
87911->97913
77909->87914
87914->97915
87914->97916
97916->107917
97916->107918
107918->117919
117919->127920
57894->67921
67921->77922
77922->87923
77922->87924
87924->97925
87924->97926
57894->67927
67927->77928
77928->87929
77928->87930
87930->97931
87930->97932
77928->87933
87933->97934
87933->97935
97935->107936
107936->117937
97935->107938
107938->117939
107938->117940
117940->127941
127941->137942
97935->107943
57894->67944
67944->77945
77945->87946
77945->87947
87947->97948
87947->97949
97949->107950
107950->117951
117951->127952
117951->127953
97949->107954
107954->117955
117955->127956
127956->137957
117955->127958
117955->127959
127959->137960
127959->137961
137961->147962
147962->157963
157963->167964
167964->177965
167964->177966
157963->167967
167967->177968
167967->177969
147962->157970
157970->167971
167971->177972
167971->177973
157970->167974
117955->127975
127975->137976
137976->147977
147977->157978
157978->167979
157978->167980
167980->177981
167980->177982
177982->187983
177982->187984
137976->147985
147985->157986
157986->167987
157986->167988
167988->177989
167988->177990
147985->157991
157991->167992
167992->177993
177993->187994
187994->197995
197995->207996
197995->207997
187994->197998
187994->197999
167992->178000
178000->188001
188001->198002
178000->188003
188003->198004
198004->208005
208005->218006
218006->228007
218006->228008
208005->218009
208005->218010
218010->228011
228011->238012
218010->228013
57894->68014
68014->78015
78015->88016
88016->98017
98017->108018
78015->88019
88019->98020
88019->98021
98021->108022
108022->118023
57894->68024
68024->78025
78025->88026
68024->78027
78027->88028
88028->98029
98029->108030
98029->108031
108031->118032
108031->118033
88028->98034
98034->108035
98034->108036
108036->118037
88028->98038
98038->108039
108039->118040
118040->128041
128041->138042
128041->138043
118040->128044
108039->118045
118045->128046
128046->138047
138047->148048
148048->158049
148048->158050
158050->168051
158050->168052
168052->178053
168052->178054
128046->138055
138055->148056
148056->158057
148056->158058
158058->168059
138055->148060
148060->158061
138055->148062
148062->158063
158063->168064
168064->178065
178065->188066
178065->188067
168064->178068
158063->168069
128046->138070
138070->148071
148071->158072
158072->168073
168073->178074
148071->158075
158075->168076
158075->168077
168077->178078
168077->178079
178079->188080
178079->188081
178079->188082
128046->138083
138083->148084
138083->148085
138083->148086
138083->148087
148087->158088
158088->168089
168089->178090
178090->188091
188091->198092
168089->178093
178093->188094
178093->188095
158088->168096
168096->178097
178097->188098
188098->198099
198099->208100
208100->218101
208100->218102
198099->208103
198099->208104
208104->218105
218105->228106
178097->188107
188107->198108
198108->208109
208109->218110
208109->218111
198108->208112
198108->208113
208113->218114
178097->188115
188115->198116
198116->208117
198116->208118
198116->208119
208119->218120
208119->218121
128046->138122
138122->148123
148123->158124
148123->158125
148123->158126
108039->118127
118127->128128
128128->138129
138129->148130
57894->68131
68131->78132
78132->88133
78132->88134
88134->98135
88134->98136
68131->78137
78137->88138
78137->88139
88139->98140
68131->78141
78141->88142
88142->98143
98143->108144
108144->118145
108144->118146
118146->128147
118146->128148
128148->138149
138149->148150
148150->158151
158151->168152
158151->168153
158151->168154
168154->178155
168154->178156
138149->148157
148157->158158
158158->168159
148157->158160
158160->168161
168161->178162
178162->188163
188163->198164
188163->198165
178162->188166
168161->178167
178167->188168
168161->178169
178169->188170
178169->188171
148157->158172
88142->98173
98173->108174
108174->118175
118175->128176
108174->118177
108174->118178
88142->98179
98179->108180
108180->118181
108180->118182
88142->98183
98183->108184
108184->118185
108184->118186
108184->118187
118187->128188
118187->128189
57894->68190
68190->78191
27871->38192
38192->48193
38192->48194
48194->58195
38192->48196
48196->58197
48196->58198
58198->68199
68199->78200
78200->88201
88201->98202
78200->88203
78200->88204
58198->68205
68205->78206
78206->88207
88207->98208
78206->88209
78206->88210
27871->38211
38211->48212
38211->48213
48213->58214
48213->58215
58215->68216
68216->78217
78217->88218
88218->98219
88218->98220
98220->108221
98220->108222
58215->68223
38211->48224
48224->58225
48224->58226
58226->68227
68227->78228
78228->88229
78228->88230
78228->88231
88231->98232
98232->108233
108233->118234
108233->118235
58226->68236
68236->78237
78237->88238
78237->88239
58226->68240
68240->78241
78241->88242
78241->88243
27871->38244
38244->48245
48245->58246
38244->48247
38244->48248
48248->58249
48248->58250
58250->68251
68251->78252
68251->78253
38244->48254
48254->58255
58255->68256
68256->78257
27871->38258
38258->48259
38258->48260
48260->58261
58261->68262
68262->78263
78263->88264
78263->88265
48260->58266
38258->48267
48267->58268
58268->68269
27871->38270
38270->48271
38270->48272
48272->58273
48272->58274
58274->68275
68275->78276
78276->88277
88277->98278
98278->108279
98278->108280
68275->78281
38270->48282
48282->58283
58283->68284
68284->78285
78285->88286
68284->78287
68284->78288
27871->38289
38289->48290
38289->48291
48291->58292
48291->58293
58293->68294
68294->78295
68294->78296
38289->48297
48297->58298
58298->68299
68299->78300
78300->88301
78300->88302
78300->88303
88303->98304
98304->108305
108305->118306
108305->118307
58298->68308
68308->78309
78309->88310
88310->98311
98311->108312
108312->118313
108312->118314
118314->128315
118314->128316
78309->88317
88317->98318
88317->98319
58298->68320
68320->78321
78321->88322
88322->98323
98323->108324
98323->108325
98323->108326
108326->118327
108326->118328
68320->78329
78329->88330
88330->98331
88330->98332
78329->88333
88333->98334
98334->108335
108335->118336
118336->128337
118336->128338
128338->138339
128338->138340
138340->148341
138340->148342
98334->108343
108343->118344
58298->68345
68345->78346
78346->88347
88347->98348
88347->98349
78346->88350
88350->98351
98351->108352
68345->78353
78353->88354
88354->98355
98355->108356
98355->108357
58298->68358
68358->78359
-10->08360
08360->18361
18361->28362
28362->38363
38363->48364
48364->58365
08360->18366
18366->28367
28367->38368
38368->48369
48369->58370
58370->68371
68371->78372
78372->88373
08360->18374
18374->28375
28375->38376
38376->48377
48377->58378
58378->68379
68379->78380
78380->88381
08360->18382
18382->28383
28383->38384
38384->48385
48385->58386
58386->68387
68387->78388
08360->18389
18389->28390
28390->38391
38391->48392
48392->58393
58393->68394
68394->78395
08360->18396
18396->28397
28397->38398
38398->48399
48399->58400
58400->68401
68401->78402
08360->18403
18403->28404
28404->38405
38405->48406
08360->18407
18407->28408
28408->38409
08360->18410
18410->28411
18410->28412
28412->38413
18410->28414
28414->38415
38415->48416
38415->48417
48417->58418
48417->58419
48417->58420
58420->68421
38415->48422
48422->58423
58423->68424
68424->78425
78425->88426
78425->88427
88427->98428
88427->98429
58423->68430
68430->78431
78431->88432
78431->88433
58423->68434
68434->78435
78435->88436
78435->88437
58423->68438
68438->78439
78439->88440
78439->88441
58423->68442
68442->78443
78443->88444
78443->88445
58423->68446
68446->78447
78447->88448
88448->98449
98449->108450
78447->88451
88451->98452
88451->98453
98453->108454
98453->108455
58423->68456
68456->78457
78457->88458
88458->98459
78457->88460
28414->38461
38461->48462
38461->48463
48463->58464
48463->58465
48463->58466
58466->68467
38461->48468
48468->58469
58469->68470
68470->78471
78471->88472
88472->98473
98473->108474
108474->118475
108474->118476
78471->88477
88477->98478
88477->98479
98479->108480
108480->118481
118481->128482
118481->128483
58469->68484
68484->78485
78485->88486
88486->98487
88486->98488
78485->88489
88489->98490
88489->98491
98491->108492
98491->108493
98491->108494
108494->118495
118495->128496
118495->128497
118495->128498
118495->128499
58469->68500
68500->78501
68500->78502
68500->78503
68500->78504
78504->88505
88505->98506
98506->108507
98506->108508
108508->118509
108508->118510
58469->68511
68511->78512
78512->88513
88513->98514
98514->108515
78512->88516
88516->98517
88516->98518
98518->108519
108519->118520
58469->68521
68521->78522
78522->88523
78522->88524
58469->68525
68525->78526
78526->88527
78526->88528
88528->98529
88528->98530
98530->108531
108531->118532
98530->108533
108533->118534
118534->128535
128535->138536
118534->128537
118534->128538
128538->138539
128538->138540
138540->148541
148541->158542
158542->168543
168543->178544
168543->178545
158542->168546
168546->178547
168546->178548
148541->158549
158549->168550
158549->168551
118534->128552
128552->138553
138553->148554
148554->158555
158555->168556
148554->158557
158557->168558
158557->168559
158557->168560
158557->168561
28414->38562
38562->48563
38562->48564
48564->58565
48564->58566
48564->58567
58567->68568
38562->48569
48569->58570
58570->68571
68571->78572
78572->88573
88573->98574
98574->108575
108575->118576
108575->118577
78572->88578
88578->98579
88578->98580
98580->108581
108581->118582
118582->128583
118582->128584
58570->68585
68585->78586
78586->88587
88587->98588
88587->98589
78586->88590
88590->98591
88590->98592
98592->108593
58570->68594
68594->78595
78595->88596
68594->78597
78597->88598
88598->98599
98599->108600
108600->118601
108600->118602
118602->128603
118602->128604
128604->138605
88598->98606
98606->108607
108607->118608
108607->118609
118609->128610
118609->128611
58570->68612
68612->78613
78613->88614
88614->98615
98615->108616
78613->88617
88617->98618
88617->98619
98619->108620
108620->118621
58570->68622
68622->78623
78623->88624
78623->88625
58570->68626
68626->78627
68626->78628
68626->78629
78629->88630
68626->78631
78631->88632
88632->98633
98633->108634
98633->108635
108635->118636
108635->118637
118637->128638
118637->128639
28414->38640
38640->48641
38640->48642
48642->58643
48642->58644
48642->58645
58645->68646
38640->48647
48647->58648
58648->68649
68649->78650
78650->88651
88651->98652
98652->108653
108653->118654
108653->118655
78650->88656
88656->98657
88656->98658
98658->108659
108659->118660
118660->128661
118660->128662
58648->68663
68663->78664
78664->88665
88665->98666
88665->98667
78664->88668
88668->98669
88668->98670
98670->108671
98670->108672
98670->108673
108673->118674
118674->128675
118674->128676
118674->128677
118674->128678
58648->68679
68679->78680
68679->78681
68679->78682
68679->78683
78683->88684
88684->98685
98685->108686
98685->108687
108687->118688
108687->118689
58648->68690
68690->78691
78691->88692
88692->98693
98693->108694
78691->88695
88695->98696
88695->98697
98697->108698
108698->118699
58648->68700
68700->78701
78701->88702
78701->88703
58648->68704
68704->78705
78705->88706
88706->98707
78705->88708
88708->98709
88708->98710
28414->38711
38711->48712
38711->48713
48713->58714
48713->58715
48713->58716
58716->68717
38711->48718
28414->38719
38719->48720
38719->48721
48721->58722
48721->58723
48721->58724
58724->68725
38719->48726
48726->58727
58727->68728
68728->78729
78729->88730
88730->98731
98731->108732
108732->118733
108732->118734
78729->88735
88735->98736
88735->98737
98737->108738
108738->118739
118739->128740
118739->128741
58727->68742
68742->78743
78743->88744
88744->98745
88744->98746
78743->88747
88747->98748
88747->98749
98749->108750
58727->68751
68751->78752
78752->88753
68751->78754
78754->88755
88755->98756
98756->108757
108757->118758
108757->118759
118759->128760
118759->128761
128761->138762
138762->148763
128761->138764
138764->148765
148765->158766
138764->148767
88755->98768
98768->108769
108769->118770
108769->118771
118771->128772
118771->128773
58727->68774
68774->78775
78775->88776
78775->88777
88777->98778
88777->98779
58727->68780
68780->78781
78781->88782
78781->88783
88783->98784
58727->68785
68785->78786
78786->88787
88787->98788
98788->108789
78786->88790
88790->98791
88790->98792
98792->108793
108793->118794
58727->68795
68795->78796
78796->88797
78796->88798
58727->68799
68799->78800
68799->78801
68799->78802
78802->88803
68799->78804
78804->88805
88805->98806
98806->108807
108807->118808
118808->128809
128809->138810
108807->118811
118811->128812
118811->128813
128813->138814
128813->138815
88805->98816
98816->108817
108817->118818
118818->128819
128819->138820
108817->118821
118821->128822
118821->128823
128823->138824
138824->148825
88805->98826
98826->108827
98826->108828
98826->108829
98826->108830
108830->118831
118831->128832
128832->138833
128832->138834
138834->148835
148835->158836
138834->148837
148837->158838
88805->98839
98839->108840
108840->118841
118841->128842
128842->138843
138843->148844
148844->158845
158845->168846
138843->148847
148847->158848
158848->168849
108840->118850
118850->128851
118850->128852
128852->138853
128852->138854
88805->98855
98855->108856
108856->118857
118857->128858
128858->138859
108856->118860
118860->128861
118860->128862
128862->138863
138863->148864
88805->98865
98865->108866
108866->118867
118867->128868
128868->138869
108866->118870
118870->128871
128871->138872
98865->108873
98865->108874
98865->108875
108875->118876
118876->128877
128877->138878
128877->138879
138879->148880
148880->158881
138879->148882
148882->158883
158883->168884
168884->178885
158883->168886
88805->98887
98887->108888
108888->118889
108888->118890
118890->128891
118890->128892
28414->38893
38893->48894
38893->48895
48895->58896
48895->58897
48895->58898
58898->68899
38893->48900
48900->58901
58901->68902
68902->78903
78903->88904
88904->98905
98905->108906
108906->118907
108906->118908
78903->88909
88909->98910
88909->98911
98911->108912
108912->118913
118913->128914
118913->128915
58901->68916
68916->78917
78917->88918
88918->98919
88918->98920
78917->88921
88921->98922
88921->98923
98923->108924
58901->68925
68925->78926
78926->88927
68925->78928
78928->88929
88929->98930
98930->108931
108931->118932
108931->118933
118933->128934
118933->128935
128935->138936
138936->148937
128935->138938
138938->148939
148939->158940
138938->148941
88929->98942
98942->108943
108943->118944
108943->118945
118945->128946
118945->128947
58901->68948
68948->78949
78949->88950
78949->88951
88951->98952
88951->98953
58901->68954
68954->78955
78955->88956
78955->88957
88957->98958
58901->68959
68959->78960
78960->88961
88961->98962
98962->108963
78960->88964
88964->98965
88964->98966
98966->108967
108967->118968
58901->68969
68969->78970
78970->88971
78970->88972
88972->98973
88972->98974
98974->108975
58901->68976
68976->78977
78977->88978
78977->88979
58901->68980
68980->78981
78981->88982
88982->98983
78981->88984
88984->98985
98985->108986
98985->108987
108987->118988
118988->128989
128989->138990
118988->128991
88984->98992
58901->68993
68993->78994
78994->88995
88995->98996
98996->108997
78994->88998
88998->98999
88998->99000
99000->109001
99000->109002
58901->69003
69003->79004
79004->89005
79004->89006
79004->89007
89007->99008
58901->69009
69009->79010
69009->79011
69009->79012
69009->79013
79013->89014
89014->99015
99015->109016
109016->119017
119017->129018
129018->139019
139019->149020
149020->159021
159021->169022
139019->149023
149023->159024
159024->169025
109016->119026
119026->129027
119026->129028
129028->139029
129028->139030
89014->99031
99031->109032
109032->119033
119033->129034
129034->139035
109032->119036
119036->129037
129037->139038
99031->109039
99031->109040
99031->109041
109041->119042
119042->129043
129043->139044
139044->149045
139044->149046
149046->159047
149046->159048
159048->169049
119042->129050
129050->139051
139051->149052
139051->149053
149053->159054
149053->159055
159055->169056
119042->129057
129057->139058
139058->149059
139058->149060
149060->159061
159061->169062
159061->169063
169063->179064
169063->179065
149060->159066
159066->169067
58901->69068
69068->79069
79069->89070
89070->99071
79069->89072
89072->99073
89072->99074
99074->109075
109075->119076
99074->109077
28414->39078
39078->49079
39078->49080
49080->59081
49080->59082
49080->59083
59083->69084
39078->49085
49085->59086
59086->69087
69087->79088
79088->89089
89089->99090
99090->109091
109091->119092
109091->119093
79088->89094
89094->99095
89094->99096
99096->109097
109097->119098
119098->129099
119098->129100
59086->69101
69101->79102
79102->89103
89103->99104
89103->99105
79102->89106
89106->99107
89106->99108
99108->109109
99108->109110
99108->109111
109111->119112
119112->129113
119112->129114
119112->129115
119112->129116
59086->69117
69117->79118
69117->79119
69117->79120
69117->79121
79121->89122
89122->99123
99123->109124
99123->109125
109125->119126
109125->119127
59086->69128
69128->79129
79129->89130
79129->89131
89131->99132
89131->99133
59086->69134
69134->79135
79135->89136
79135->89137
89137->99138
59086->69139
69139->79140
69139->79141
69139->79142
69139->79143
79143->89144
89144->99145
99145->109146
99145->109147
109147->119148
109147->119149
59086->69150
69150->79151
79151->89152
79151->89153
89153->99154
89153->99155
59086->69156
69156->79157
79157->89158
79157->89159
89159->99160
89159->99161
-10->09162
09162->19163
19163->29164
29164->39165
39165->49166
49166->59167
59167->69168
09162->19169
19169->29170
29170->39171
39171->49172
49172->59173
59173->69174
69174->79175
09162->19176
19176->29177
29177->39178
39178->49179
49179->59180
59180->69181
69181->79182
09162->19183
19183->29184
29184->39185
39185->49186
49186->59187
59187->69188
69188->79189
09162->19190
19190->29191
29191->39192
39192->49193
49193->59194
59194->69195
69195->79196
09162->19197
19197->29198
29198->39199
39199->49200
49200->59201
59201->69202
09162->19203
19203->29204
29204->39205
39205->49206
09162->19207
19207->29208
29208->39209
39209->49210
09162->19211
19211->29212
29212->39213
39213->49214
09162->19215
19215->29216
19215->29217
29217->39218
19215->29219
29219->39220
39220->49221
49221->59222
59222->69223
39220->49224
29219->39225
39225->49226
49226->59227
49226->59228
39225->49229
29219->39230
39230->49231
39230->49232
49232->59233
39230->49234
49234->59235
59235->69236
69236->79237
69236->79238
69236->79239
79239->89240
89240->99241
29219->39242
39242->49243
39242->49244
49244->59245
49244->59246
59246->69247
69247->79248
69247->79249
39242->49250
49250->59251
59251->69252
69252->79253
69252->79254
29219->39255
39255->49256
39255->49257
49257->59258
49257->59259
59259->69260
69260->79261
79261->89262
89262->99263
99263->109264
99263->109265
69260->79266
39255->49267
49267->59268
59268->69269
69269->79270
79270->89271
79270->89272
79270->89273
89273->99274
89273->99275
99275->109276
109276->119277
59268->69278
69278->79279
79279->89280
79279->89281
89281->99282
99282->109283
109283->119284
109283->119285
69278->79286
69278->79287
79287->89288
69278->79289
79289->89290
89290->99291
99291->109292
109292->119293
109292->119294
119294->129295
99291->109296
99291->109297
109297->119298
59268->69299
69299->79300
79300->89301
79300->89302
29219->39303
39303->49304
39303->49305
49305->59306
49305->59307
59307->69308
69308->79309
79309->89310
79309->89311
69308->79312
39303->49313
49313->59314
59314->69315
69315->79316
69315->79317
29219->39318
39318->49319
39318->49320
49320->59321
49320->59322
59322->69323
69323->79324
69323->79325
39318->49326
49326->59327
59327->69328
69328->79329
69328->79330
29219->39331
39331->49332
39331->49333
49333->59334
49333->59335
39331->49336
49336->59337
59337->69338
69338->79339
29219->39340
39340->49341
39340->49342
49342->59343
49342->59344
59344->69345
69345->79346
69345->79347
49342->59348
59348->69349
39340->49350
49350->59351
59351->69352
69352->79353
79353->89354
79353->89355
89355->99356
59351->69357
69357->79358
69357->79359
69357->79360
69357->79361
79361->89362
89362->99363
99363->109364
99363->109365
109365->119366
109365->119367
29219->39368
39368->49369
39368->49370
49370->59371
49370->59372
59372->69373
69373->79374
69373->79375
39368->49376
49376->59377
59377->69378
69378->79379
79379->89380
79379->89381
79379->89382
89382->99383
89382->99384
99384->109385
109385->119386
59377->69387
69387->79388
79388->89389
89389->99390
99390->109391
109391->119392
109391->119393
79388->89394
89394->99395
89394->99396
99396->109397
109397->119398
119398->129399
119398->129400
59377->69401
69401->79402
79402->89403
79402->89404
89404->99405
89404->99406
69401->79407
79407->89408
79407->89409
89409->99410
69401->79411
79411->89412
69401->79413
79413->89414
89414->99415
99415->109416
109416->119417
119417->129418
119417->129419
109416->119420
109416->119421
119421->129422
89414->99423
99423->109424
109424->119425
109424->119426
119426->129427
129427->139428
129427->139429
119426->129430
59377->69431
69431->79432
79432->89433
89433->99434
89433->99435
79432->89436
}

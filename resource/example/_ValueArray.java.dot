digraph G {
00[label="compilationUnit\n Bud1%@@@@E%DSDB@@@ "]
01[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.bintrie;publicclass_EmptyValueArray<V>extends_ValueArray<V>{public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}}<EOF> "]
12[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.bintrie; "]
23[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie "]
34[label="packageName\n com.hankcs.hanlp.collection.trie "]
45[label="packageName\n com.hankcs.hanlp.collection "]
56[label="packageName\n com.hankcs.hanlp "]
67[label="packageName\n com.hankcs "]
78[label="packageName\n com "]
19[label="normalClassDeclaration\n publicclass_EmptyValueArray<V>extends_ValueArray<V>{public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}} "]
210[label="classModifier\n public "]
211[label="typeParameters\n <V> "]
312[label="typeParameter\n V "]
213[label="superclass\n extends_ValueArray<V> "]
314[label="classType\n _ValueArray<V> "]
415[label="typeArguments\n <V> "]
516[label="classType_lfno_classOrInterfaceType\n V "]
217[label="classBody\n {public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}} "]
318[label="constructorDeclaration\n public_EmptyValueArray(){} "]
419[label="constructorModifier\n public "]
420[label="constructorDeclarator\n _EmptyValueArray() "]
521[label="simpleTypeName\n _EmptyValueArray "]
422[label="constructorBody\n {} "]
323[label="methodDeclaration\n @OverridepublicVnextValue(){returnnull;} "]
424[label="markerAnnotation\n @Override "]
525[label="typeName\n Override "]
426[label="methodModifier\n public "]
427[label="methodHeader\n VnextValue() "]
528[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
529[label="methodDeclarator\n nextValue() "]
430[label="block\n {returnnull;} "]
531[label="returnStatement\n returnnull; "]
632[label="literal\n null "]
033[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.bintrie;publicclass_ValueArray<V>{V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}}<EOF> "]
134[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.bintrie; "]
235[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie "]
336[label="packageName\n com.hankcs.hanlp.collection.trie "]
437[label="packageName\n com.hankcs.hanlp.collection "]
538[label="packageName\n com.hankcs.hanlp "]
639[label="packageName\n com.hankcs "]
740[label="packageName\n com "]
141[label="normalClassDeclaration\n publicclass_ValueArray<V>{V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}} "]
242[label="classModifier\n public "]
243[label="typeParameters\n <V> "]
344[label="typeParameter\n V "]
245[label="classBody\n {V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}} "]
346[label="fieldDeclaration\n V[]value; "]
447[label="unannArrayType\n V[] "]
548[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
549[label="dims\n [] "]
450[label="variableDeclaratorId\n value "]
351[label="fieldDeclaration\n intoffset; "]
452[label="integralType\n int "]
453[label="variableDeclaratorId\n offset "]
354[label="constructorDeclaration\n public_ValueArray(V[]value){this.value=value;} "]
455[label="constructorModifier\n public "]
456[label="constructorDeclarator\n _ValueArray(V[]value) "]
557[label="simpleTypeName\n _ValueArray "]
558[label="formalParameter\n V[]value "]
659[label="unannArrayType\n V[] "]
760[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
761[label="dims\n [] "]
662[label="variableDeclaratorId\n value "]
463[label="constructorBody\n {this.value=value;} "]
564[label="expressionStatement\n this.value=value; "]
665[label="assignment\n this.value=value "]
766[label="fieldAccess\n this.value "]
867[label="primaryNoNewArray_lfno_primary\n this "]
768[label="assignmentOperator\n = "]
769[label="expressionName\n value "]
370[label="methodDeclaration\n publicVnextValue(){returnvalue[offset++];} "]
471[label="methodModifier\n public "]
472[label="methodHeader\n VnextValue() "]
573[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
574[label="methodDeclarator\n nextValue() "]
475[label="block\n {returnvalue[offset++];} "]
576[label="returnStatement\n returnvalue[offset++]; "]
677[label="arrayAccess_lfno_primary\n value[offset++] "]
778[label="expressionName\n value "]
779[label="postfixExpression\n offset++ "]
880[label="expressionName\n offset "]
881[label="postIncrementExpression_lf_postfixExpression\n ++ "]
382[label="constructorDeclaration\n protected_ValueArray(){} "]
483[label="constructorModifier\n protected "]
484[label="constructorDeclarator\n _ValueArray() "]
585[label="simpleTypeName\n _ValueArray "]
486[label="constructorBody\n {} "]
387[label="methodDeclaration\n public_ValueArraysetValue(V[]value){this.value=value;returnthis;} "]
488[label="methodModifier\n public "]
489[label="methodHeader\n _ValueArraysetValue(V[]value) "]
590[label="unannClassType_lfno_unannClassOrInterfaceType\n _ValueArray "]
591[label="methodDeclarator\n setValue(V[]value) "]
692[label="formalParameter\n V[]value "]
793[label="unannArrayType\n V[] "]
894[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
895[label="dims\n [] "]
796[label="variableDeclaratorId\n value "]
497[label="block\n {this.value=value;returnthis;} "]
598[label="blockStatements\n this.value=value;returnthis; "]
699[label="expressionStatement\n this.value=value; "]
7100[label="assignment\n this.value=value "]
8101[label="fieldAccess\n this.value "]
9102[label="primaryNoNewArray_lfno_primary\n this "]
8103[label="assignmentOperator\n = "]
8104[label="expressionName\n value "]
6105[label="returnStatement\n returnthis; "]
7106[label="primaryNoNewArray_lfno_primary\n this "]
-10->01
01->12
12->23
23->34
34->45
45->56
56->67
67->78
01->19
19->210
19->211
211->312
19->213
213->314
314->415
415->516
19->217
217->318
318->419
318->420
420->521
318->422
217->323
323->424
424->525
323->426
323->427
427->528
427->529
323->430
430->531
531->632
-10->033
033->134
134->235
235->336
336->437
437->538
538->639
639->740
033->141
141->242
141->243
243->344
141->245
245->346
346->447
447->548
447->549
346->450
245->351
351->452
351->453
245->354
354->455
354->456
456->557
456->558
558->659
659->760
659->761
558->662
354->463
463->564
564->665
665->766
766->867
665->768
665->769
245->370
370->471
370->472
472->573
472->574
370->475
475->576
576->677
677->778
677->779
779->880
779->881
245->382
382->483
382->484
484->585
382->486
245->387
387->488
387->489
489->590
489->591
591->692
692->793
793->894
793->895
692->796
387->497
497->598
598->699
699->7100
7100->8101
8101->9102
7100->8103
7100->8104
598->6105
6105->7106
}

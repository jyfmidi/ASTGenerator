digraph G {
00[label="compilationUnit\n Bud1%@@@@E%DSDB@@@ "]
01[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.bintrie;publicclass_EmptyValueArray<V>extends_ValueArray<V>{public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}}<EOF> "]
12[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.bintrie; "]
23[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie "]
34[label="packageName\n com.hankcs.hanlp.collection.trie "]
45[label="packageName\n com.hankcs.hanlp.collection "]
56[label="packageName\n com.hankcs.hanlp "]
67[label="packageName\n com.hankcs "]
78[label="packageName\n com "]
19[label="normalClassDeclaration\n publicclass_EmptyValueArray<V>extends_ValueArray<V>{public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}} "]
210[label="classModifier\n public "]
211[label="typeParameters\n <V> "]
312[label="typeParameter\n V "]
213[label="superclass\n extends_ValueArray<V> "]
314[label="classType\n _ValueArray<V> "]
415[label="typeArguments\n <V> "]
516[label="classType_lfno_classOrInterfaceType\n V "]
217[label="classBody\n {public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}} "]
318[label="constructorDeclaration\n public_EmptyValueArray(){} "]
419[label="constructorModifier\n public "]
420[label="constructorDeclarator\n _EmptyValueArray() "]
521[label="simpleTypeName\n _EmptyValueArray "]
422[label="constructorBody\n {} "]
323[label="methodDeclaration\n @OverridepublicVnextValue(){returnnull;} "]
424[label="markerAnnotation\n @Override "]
525[label="typeName\n Override "]
426[label="methodModifier\n public "]
427[label="methodHeader\n VnextValue() "]
528[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
529[label="methodDeclarator\n nextValue() "]
430[label="block\n {returnnull;} "]
531[label="returnStatement\n returnnull; "]
632[label="literal\n null "]
033[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.bintrie;publicclass_ValueArray<V>{V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}}<EOF> "]
134[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.bintrie; "]
235[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie "]
336[label="packageName\n com.hankcs.hanlp.collection.trie "]
437[label="packageName\n com.hankcs.hanlp.collection "]
538[label="packageName\n com.hankcs.hanlp "]
639[label="packageName\n com.hankcs "]
740[label="packageName\n com "]
141[label="normalClassDeclaration\n publicclass_ValueArray<V>{V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}} "]
242[label="classModifier\n public "]
243[label="typeParameters\n <V> "]
344[label="typeParameter\n V "]
245[label="classBody\n {V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}} "]
346[label="fieldDeclaration\n V[]value; "]
447[label="unannArrayType\n V[] "]
548[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
549[label="dims\n [] "]
450[label="variableDeclaratorId\n value "]
351[label="fieldDeclaration\n intoffset; "]
452[label="integralType\n int "]
453[label="variableDeclaratorId\n offset "]
354[label="constructorDeclaration\n public_ValueArray(V[]value){this.value=value;} "]
455[label="constructorModifier\n public "]
456[label="constructorDeclarator\n _ValueArray(V[]value) "]
557[label="simpleTypeName\n _ValueArray "]
558[label="formalParameter\n V[]value "]
659[label="unannArrayType\n V[] "]
760[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
761[label="dims\n [] "]
662[label="variableDeclaratorId\n value "]
463[label="constructorBody\n {this.value=value;} "]
564[label="expressionStatement\n this.value=value; "]
665[label="assignment\n this.value=value "]
766[label="fieldAccess\n this.value "]
867[label="primaryNoNewArray_lfno_primary\n this "]
768[label="assignmentOperator\n = "]
769[label="expressionName\n value "]
370[label="methodDeclaration\n publicVnextValue(){returnvalue[offset++];} "]
471[label="methodModifier\n public "]
472[label="methodHeader\n VnextValue() "]
573[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
574[label="methodDeclarator\n nextValue() "]
475[label="block\n {returnvalue[offset++];} "]
576[label="returnStatement\n returnvalue[offset++]; "]
677[label="arrayAccess_lfno_primary\n value[offset++] "]
778[label="expressionName\n value "]
779[label="postfixExpression\n offset++ "]
880[label="expressionName\n offset "]
881[label="postIncrementExpression_lf_postfixExpression\n ++ "]
382[label="constructorDeclaration\n protected_ValueArray(){} "]
483[label="constructorModifier\n protected "]
484[label="constructorDeclarator\n _ValueArray() "]
585[label="simpleTypeName\n _ValueArray "]
486[label="constructorBody\n {} "]
387[label="methodDeclaration\n public_ValueArraysetValue(V[]value){this.value=value;returnthis;} "]
488[label="methodModifier\n public "]
489[label="methodHeader\n _ValueArraysetValue(V[]value) "]
590[label="unannClassType_lfno_unannClassOrInterfaceType\n _ValueArray "]
591[label="methodDeclarator\n setValue(V[]value) "]
692[label="formalParameter\n V[]value "]
793[label="unannArrayType\n V[] "]
894[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
895[label="dims\n [] "]
796[label="variableDeclaratorId\n value "]
497[label="block\n {this.value=value;returnthis;} "]
598[label="blockStatements\n this.value=value;returnthis; "]
699[label="expressionStatement\n this.value=value; "]
7100[label="assignment\n this.value=value "]
8101[label="fieldAccess\n this.value "]
9102[label="primaryNoNewArray_lfno_primary\n this "]
8103[label="assignmentOperator\n = "]
8104[label="expressionName\n value "]
6105[label="returnStatement\n returnthis; "]
7106[label="primaryNoNewArray_lfno_primary\n this "]
0107[label="compilationUnit\n packagecom.hankcs.hanlp.classification.classifiers;importcom.hankcs.hanlp.classification.corpus.Document;importcom.hankcs.hanlp.classification.corpus.IDataSet;importcom.hankcs.hanlp.classification.corpus.MemoryDataSet;importcom.hankcs.hanlp.classification.models.AbstractModel;importcom.hankcs.hanlp.classification.utilities.CollectionUtility;importcom.hankcs.hanlp.classification.utilities.MathUtility;importjava.io.IOException;importjava.util.Map;importjava.util.TreeMap;importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger;publicabstractclassAbstractClassifierimplementsIClassifier{@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}}<EOF> "]
1108[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.classifiers; "]
2109[label="packageName\n com.hankcs.hanlp.classification.classifiers "]
3110[label="packageName\n com.hankcs.hanlp.classification "]
4111[label="packageName\n com.hankcs.hanlp "]
5112[label="packageName\n com.hankcs "]
6113[label="packageName\n com "]
1114[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.Document; "]
2115[label="typeName\n com.hankcs.hanlp.classification.corpus.Document "]
3116[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4117[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5118[label="packageOrTypeName\n com.hankcs.hanlp "]
6119[label="packageOrTypeName\n com.hankcs "]
7120[label="packageOrTypeName\n com "]
1121[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.IDataSet; "]
2122[label="typeName\n com.hankcs.hanlp.classification.corpus.IDataSet "]
3123[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4124[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5125[label="packageOrTypeName\n com.hankcs.hanlp "]
6126[label="packageOrTypeName\n com.hankcs "]
7127[label="packageOrTypeName\n com "]
1128[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.MemoryDataSet; "]
2129[label="typeName\n com.hankcs.hanlp.classification.corpus.MemoryDataSet "]
3130[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4131[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5132[label="packageOrTypeName\n com.hankcs.hanlp "]
6133[label="packageOrTypeName\n com.hankcs "]
7134[label="packageOrTypeName\n com "]
1135[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.models.AbstractModel; "]
2136[label="typeName\n com.hankcs.hanlp.classification.models.AbstractModel "]
3137[label="packageOrTypeName\n com.hankcs.hanlp.classification.models "]
4138[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5139[label="packageOrTypeName\n com.hankcs.hanlp "]
6140[label="packageOrTypeName\n com.hankcs "]
7141[label="packageOrTypeName\n com "]
1142[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.CollectionUtility; "]
2143[label="typeName\n com.hankcs.hanlp.classification.utilities.CollectionUtility "]
3144[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4145[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5146[label="packageOrTypeName\n com.hankcs.hanlp "]
6147[label="packageOrTypeName\n com.hankcs "]
7148[label="packageOrTypeName\n com "]
1149[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.MathUtility; "]
2150[label="typeName\n com.hankcs.hanlp.classification.utilities.MathUtility "]
3151[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4152[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5153[label="packageOrTypeName\n com.hankcs.hanlp "]
6154[label="packageOrTypeName\n com.hankcs "]
7155[label="packageOrTypeName\n com "]
1156[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
2157[label="typeName\n java.io.IOException "]
3158[label="packageOrTypeName\n java.io "]
4159[label="packageOrTypeName\n java "]
1160[label="singleTypeImportDeclaration\n importjava.util.Map; "]
2161[label="typeName\n java.util.Map "]
3162[label="packageOrTypeName\n java.util "]
4163[label="packageOrTypeName\n java "]
1164[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
2165[label="typeName\n java.util.TreeMap "]
3166[label="packageOrTypeName\n java.util "]
4167[label="packageOrTypeName\n java "]
1168[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger; "]
2169[label="typeName\n com.hankcs.hanlp.classification.utilities.Predefine "]
3170[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4171[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5172[label="packageOrTypeName\n com.hankcs.hanlp "]
6173[label="packageOrTypeName\n com.hankcs "]
7174[label="packageOrTypeName\n com "]
1175[label="normalClassDeclaration\n publicabstractclassAbstractClassifierimplementsIClassifier{@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}} "]
2176[label="classModifier\n public "]
2177[label="classModifier\n abstract "]
2178[label="superinterfaces\n implementsIClassifier "]
3179[label="classType\n IClassifier "]
2180[label="classBody\n {@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}} "]
3181[label="methodDeclaration\n @OverridepublicIClassifierenableProbability(booleanenable){returnthis;} "]
4182[label="markerAnnotation\n @Override "]
5183[label="typeName\n Override "]
4184[label="methodModifier\n public "]
4185[label="methodHeader\n IClassifierenableProbability(booleanenable) "]
5186[label="unannClassType_lfno_unannClassOrInterfaceType\n IClassifier "]
5187[label="methodDeclarator\n enableProbability(booleanenable) "]
6188[label="formalParameter\n booleanenable "]
7189[label="unannPrimitiveType\n boolean "]
7190[label="variableDeclaratorId\n enable "]
4191[label="block\n {returnthis;} "]
5192[label="returnStatement\n returnthis; "]
6193[label="primaryNoNewArray_lfno_primary\n this "]
3194[label="fieldDeclaration\n booleanconfigProbabilityEnabled=true; "]
4195[label="unannPrimitiveType\n boolean "]
4196[label="variableDeclarator\n configProbabilityEnabled=true "]
5197[label="variableDeclaratorId\n configProbabilityEnabled "]
5198[label="literal\n true "]
3199[label="methodDeclaration\n @OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);} "]
4200[label="markerAnnotation\n @Override "]
5201[label="typeName\n Override "]
4202[label="methodModifier\n public "]
4203[label="methodHeader\n Stringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException "]
5204[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
5205[label="methodDeclarator\n classify(Stringtext) "]
6206[label="formalParameter\n Stringtext "]
7207[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
7208[label="variableDeclaratorId\n text "]
5209[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6210[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7211[label="classType\n IllegalArgumentException "]
7212[label="classType\n IllegalStateException "]
4213[label="block\n {Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);} "]
5214[label="blockStatements\n Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap); "]
6215[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=predict(text); "]
7216[label="localVariableDeclaration\n Map<String,Double>scoreMap=predict(text) "]
8217[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9218[label="typeArguments\n <String,Double> "]
10219[label="typeArgumentList\n String,Double "]
11220[label="classType_lfno_classOrInterfaceType\n String "]
11221[label="classType_lfno_classOrInterfaceType\n Double "]
8222[label="variableDeclarator\n scoreMap=predict(text) "]
9223[label="variableDeclaratorId\n scoreMap "]
9224[label="methodInvocation_lfno_primary\n predict(text) "]
10225[label="methodName\n predict "]
10226[label="expressionName\n text "]
6227[label="returnStatement\n returnCollectionUtility.max(scoreMap); "]
7228[label="methodInvocation_lfno_primary\n CollectionUtility.max(scoreMap) "]
8229[label="typeName\n CollectionUtility "]
8230[label="expressionName\n scoreMap "]
3231[label="methodDeclaration\n @OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);} "]
4232[label="markerAnnotation\n @Override "]
5233[label="typeName\n Override "]
4234[label="methodModifier\n public "]
4235[label="methodHeader\n Stringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException "]
5236[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
5237[label="methodDeclarator\n classify(Documentdocument) "]
6238[label="formalParameter\n Documentdocument "]
7239[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7240[label="variableDeclaratorId\n document "]
5241[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6242[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7243[label="classType\n IllegalArgumentException "]
7244[label="classType\n IllegalStateException "]
4245[label="block\n {Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);} "]
5246[label="blockStatements\n Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap); "]
6247[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=predict(document); "]
7248[label="localVariableDeclaration\n Map<String,Double>scoreMap=predict(document) "]
8249[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9250[label="typeArguments\n <String,Double> "]
10251[label="typeArgumentList\n String,Double "]
11252[label="classType_lfno_classOrInterfaceType\n String "]
11253[label="classType_lfno_classOrInterfaceType\n Double "]
8254[label="variableDeclarator\n scoreMap=predict(document) "]
9255[label="variableDeclaratorId\n scoreMap "]
9256[label="methodInvocation_lfno_primary\n predict(document) "]
10257[label="methodName\n predict "]
10258[label="expressionName\n document "]
6259[label="returnStatement\n returnCollectionUtility.max(scoreMap); "]
7260[label="methodInvocation_lfno_primary\n CollectionUtility.max(scoreMap) "]
8261[label="typeName\n CollectionUtility "]
8262[label="expressionName\n scoreMap "]
3263[label="methodDeclaration\n @Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);} "]
4264[label="markerAnnotation\n @Override "]
5265[label="typeName\n Override "]
4266[label="methodModifier\n public "]
4267[label="methodHeader\n voidtrain(StringfolderPath,StringcharsetName)throwsIOException "]
5268[label="result\n void "]
5269[label="methodDeclarator\n train(StringfolderPath,StringcharsetName) "]
6270[label="formalParameterList\n StringfolderPath,StringcharsetName "]
7271[label="formalParameter\n StringfolderPath "]
8272[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8273[label="variableDeclaratorId\n folderPath "]
7274[label="formalParameter\n StringcharsetName "]
8275[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8276[label="variableDeclaratorId\n charsetName "]
5277[label="throws_\n throwsIOException "]
6278[label="classType\n IOException "]
4279[label="block\n {IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);} "]
5280[label="blockStatements\n IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet); "]
6281[label="localVariableDeclarationStatement\n IDataSetdataSet=newMemoryDataSet(); "]
7282[label="localVariableDeclaration\n IDataSetdataSet=newMemoryDataSet() "]
8283[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
8284[label="variableDeclarator\n dataSet=newMemoryDataSet() "]
9285[label="variableDeclaratorId\n dataSet "]
9286[label="classInstanceCreationExpression_lfno_primary\n newMemoryDataSet() "]
6287[label="expressionStatement\n dataSet.load(folderPath,charsetName); "]
7288[label="methodInvocation\n dataSet.load(folderPath,charsetName) "]
8289[label="typeName\n dataSet "]
8290[label="argumentList\n folderPath,charsetName "]
9291[label="expressionName\n folderPath "]
9292[label="expressionName\n charsetName "]
6293[label="expressionStatement\n train(dataSet); "]
7294[label="methodInvocation\n train(dataSet) "]
8295[label="methodName\n train "]
8296[label="expressionName\n dataSet "]
3297[label="methodDeclaration\n @Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);} "]
4298[label="markerAnnotation\n @Override "]
5299[label="typeName\n Override "]
4300[label="methodModifier\n public "]
4301[label="methodHeader\n voidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException "]
5302[label="result\n void "]
5303[label="methodDeclarator\n train(Map<String,String[]>trainingDataSet) "]
6304[label="formalParameter\n Map<String,String[]>trainingDataSet "]
7305[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String[]> "]
8306[label="typeArguments\n <String,String[]> "]
9307[label="typeArgumentList\n String,String[] "]
10308[label="classType_lfno_classOrInterfaceType\n String "]
10309[label="arrayType\n String[] "]
11310[label="classType_lfno_classOrInterfaceType\n String "]
11311[label="dims\n [] "]
7312[label="variableDeclaratorId\n trainingDataSet "]
5313[label="throws_\n throwsIllegalArgumentException "]
6314[label="classType\n IllegalArgumentException "]
4315[label="block\n {IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);} "]
5316[label="blockStatements\n IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet); "]
6317[label="localVariableDeclarationStatement\n IDataSetdataSet=newMemoryDataSet(); "]
7318[label="localVariableDeclaration\n IDataSetdataSet=newMemoryDataSet() "]
8319[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
8320[label="variableDeclarator\n dataSet=newMemoryDataSet() "]
9321[label="variableDeclaratorId\n dataSet "]
9322[label="classInstanceCreationExpression_lfno_primary\n newMemoryDataSet() "]
6323[label="expressionStatement\n logger.start(\"正在构造训练数据集...\"); "]
7324[label="methodInvocation\n logger.start(\"正在构造训练数据集...\") "]
8325[label="typeName\n logger "]
8326[label="literal\n \"正在构造训练数据集...\" "]
6327[label="localVariableDeclarationStatement\n inttotal=trainingDataSet.size(); "]
7328[label="localVariableDeclaration\n inttotal=trainingDataSet.size() "]
8329[label="integralType\n int "]
8330[label="variableDeclarator\n total=trainingDataSet.size() "]
9331[label="variableDeclaratorId\n total "]
9332[label="methodInvocation_lfno_primary\n trainingDataSet.size() "]
10333[label="typeName\n trainingDataSet "]
6334[label="localVariableDeclarationStatement\n intcur=0; "]
7335[label="localVariableDeclaration\n intcur=0 "]
8336[label="integralType\n int "]
8337[label="variableDeclarator\n cur=0 "]
9338[label="variableDeclaratorId\n cur "]
9339[label="literal\n 0 "]
6340[label="enhancedForStatement\n for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));} "]
7341[label="unannClassOrInterfaceType\n Map.Entry<String,String[]> "]
8342[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
8343[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String[]> "]
9344[label="typeArguments\n <String,String[]> "]
10345[label="typeArgumentList\n String,String[] "]
11346[label="classType_lfno_classOrInterfaceType\n String "]
11347[label="arrayType\n String[] "]
12348[label="classType_lfno_classOrInterfaceType\n String "]
12349[label="dims\n [] "]
7350[label="variableDeclaratorId\n entry "]
7351[label="methodInvocation_lfno_primary\n trainingDataSet.entrySet() "]
8352[label="typeName\n trainingDataSet "]
7353[label="block\n {Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));} "]
8354[label="blockStatements\n Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)); "]
9355[label="localVariableDeclarationStatement\n Stringcategory=entry.getKey(); "]
10356[label="localVariableDeclaration\n Stringcategory=entry.getKey() "]
11357[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
11358[label="variableDeclarator\n category=entry.getKey() "]
12359[label="variableDeclaratorId\n category "]
12360[label="methodInvocation_lfno_primary\n entry.getKey() "]
13361[label="typeName\n entry "]
9362[label="expressionStatement\n logger.out(\"[%s]...\",category); "]
10363[label="methodInvocation\n logger.out(\"[%s]...\",category) "]
11364[label="typeName\n logger "]
11365[label="argumentList\n \"[%s]...\",category "]
12366[label="literal\n \"[%s]...\" "]
12367[label="expressionName\n category "]
9368[label="enhancedForStatement\n for(Stringdoc:entry.getValue()){dataSet.add(category,doc);} "]
10369[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
10370[label="variableDeclaratorId\n doc "]
10371[label="methodInvocation_lfno_primary\n entry.getValue() "]
11372[label="typeName\n entry "]
10373[label="block\n {dataSet.add(category,doc);} "]
11374[label="expressionStatement\n dataSet.add(category,doc); "]
12375[label="methodInvocation\n dataSet.add(category,doc) "]
13376[label="typeName\n dataSet "]
13377[label="argumentList\n category,doc "]
14378[label="expressionName\n category "]
14379[label="expressionName\n doc "]
9380[label="expressionStatement\n ++cur; "]
10381[label="preIncrementExpression\n ++cur "]
11382[label="expressionName\n cur "]
9383[label="expressionStatement\n logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)); "]
10384[label="methodInvocation\n logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)) "]
11385[label="typeName\n logger "]
11386[label="argumentList\n \"%.2f%%...\",MathUtility.percentage(cur,total) "]
12387[label="literal\n \"%.2f%%...\" "]
12388[label="methodInvocation_lfno_primary\n MathUtility.percentage(cur,total) "]
13389[label="typeName\n MathUtility "]
13390[label="argumentList\n cur,total "]
14391[label="expressionName\n cur "]
14392[label="expressionName\n total "]
6393[label="expressionStatement\n logger.finish(\" 加载完毕\n\"); "]
7394[label="methodInvocation\n logger.finish(\" 加载完毕\n\") "]
8395[label="typeName\n logger "]
8396[label="literal\n \" 加载完毕\n\" "]
6397[label="expressionStatement\n train(dataSet); "]
7398[label="methodInvocation\n train(dataSet) "]
8399[label="methodName\n train "]
8400[label="expressionName\n dataSet "]
3401[label="methodDeclaration\n @Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");} "]
4402[label="markerAnnotation\n @Override "]
5403[label="typeName\n Override "]
4404[label="methodModifier\n public "]
4405[label="methodHeader\n voidtrain(StringfolderPath)throwsIOException "]
5406[label="result\n void "]
5407[label="methodDeclarator\n train(StringfolderPath) "]
6408[label="formalParameter\n StringfolderPath "]
7409[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
7410[label="variableDeclaratorId\n folderPath "]
5411[label="throws_\n throwsIOException "]
6412[label="classType\n IOException "]
4413[label="block\n {train(folderPath,\"UTF-8\");} "]
5414[label="expressionStatement\n train(folderPath,\"UTF-8\"); "]
6415[label="methodInvocation\n train(folderPath,\"UTF-8\") "]
7416[label="methodName\n train "]
7417[label="argumentList\n folderPath,\"UTF-8\" "]
8418[label="expressionName\n folderPath "]
8419[label="literal\n \"UTF-8\" "]
3420[label="methodDeclaration\n @OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;} "]
4421[label="markerAnnotation\n @Override "]
5422[label="typeName\n Override "]
4423[label="methodModifier\n public "]
4424[label="methodHeader\n Map<String,Double>predict(Documentdocument) "]
5425[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
6426[label="typeArguments\n <String,Double> "]
7427[label="typeArgumentList\n String,Double "]
8428[label="classType_lfno_classOrInterfaceType\n String "]
8429[label="classType_lfno_classOrInterfaceType\n Double "]
5430[label="methodDeclarator\n predict(Documentdocument) "]
6431[label="formalParameter\n Documentdocument "]
7432[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7433[label="variableDeclaratorId\n document "]
4434[label="block\n {AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;} "]
5435[label="blockStatements\n AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap; "]
6436[label="localVariableDeclarationStatement\n AbstractModelmodel=getModel(); "]
7437[label="localVariableDeclaration\n AbstractModelmodel=getModel() "]
8438[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractModel "]
8439[label="variableDeclarator\n model=getModel() "]
9440[label="variableDeclaratorId\n model "]
9441[label="methodInvocation_lfno_primary\n getModel() "]
10442[label="methodName\n getModel "]
6443[label="ifThenStatement\n if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
7444[label="equalityExpression\n model==null "]
8445[label="expressionName\n model "]
8446[label="literal\n null "]
7447[label="block\n {thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
8448[label="throwStatement\n thrownewIllegalStateException(\"未训练模型！无法执行预测！\"); "]
9449[label="classInstanceCreationExpression_lfno_primary\n newIllegalStateException(\"未训练模型！无法执行预测！\") "]
10450[label="literal\n \"未训练模型！无法执行预测！\" "]
6451[label="ifThenStatement\n if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");} "]
7452[label="equalityExpression\n document==null "]
8453[label="expressionName\n document "]
8454[label="literal\n null "]
7455[label="block\n {thrownewIllegalArgumentException(\"参数 text == null\");} "]
8456[label="throwStatement\n thrownewIllegalArgumentException(\"参数 text == null\"); "]
9457[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"参数 text == null\") "]
10458[label="literal\n \"参数 text == null\" "]
6459[label="localVariableDeclarationStatement\n double[]probs=categorize(document); "]
7460[label="localVariableDeclaration\n double[]probs=categorize(document) "]
8461[label="unannArrayType\n double[] "]
9462[label="floatingPointType\n double "]
9463[label="dims\n [] "]
8464[label="variableDeclarator\n probs=categorize(document) "]
9465[label="variableDeclaratorId\n probs "]
9466[label="methodInvocation_lfno_primary\n categorize(document) "]
10467[label="methodName\n categorize "]
10468[label="expressionName\n document "]
6469[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=newTreeMap<String,Double>(); "]
7470[label="localVariableDeclaration\n Map<String,Double>scoreMap=newTreeMap<String,Double>() "]
8471[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9472[label="typeArguments\n <String,Double> "]
10473[label="typeArgumentList\n String,Double "]
11474[label="classType_lfno_classOrInterfaceType\n String "]
11475[label="classType_lfno_classOrInterfaceType\n Double "]
8476[label="variableDeclarator\n scoreMap=newTreeMap<String,Double>() "]
9477[label="variableDeclaratorId\n scoreMap "]
9478[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,Double>() "]
10479[label="typeArguments\n <String,Double> "]
11480[label="typeArgumentList\n String,Double "]
12481[label="classType_lfno_classOrInterfaceType\n String "]
12482[label="classType_lfno_classOrInterfaceType\n Double "]
6483[label="basicForStatement\n for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);} "]
7484[label="localVariableDeclaration\n inti=0 "]
8485[label="integralType\n int "]
8486[label="variableDeclarator\n i=0 "]
9487[label="variableDeclaratorId\n i "]
9488[label="literal\n 0 "]
7489[label="relationalExpression\n i<probs.length "]
8490[label="expressionName\n i "]
8491[label="expressionName\n probs.length "]
9492[label="ambiguousName\n probs "]
7493[label="postIncrementExpression\n i++ "]
8494[label="expressionName\n i "]
7495[label="block\n {scoreMap.put(model.catalog[i],probs[i]);} "]
8496[label="expressionStatement\n scoreMap.put(model.catalog[i],probs[i]); "]
9497[label="methodInvocation\n scoreMap.put(model.catalog[i],probs[i]) "]
10498[label="typeName\n scoreMap "]
10499[label="argumentList\n model.catalog[i],probs[i] "]
11500[label="arrayAccess_lfno_primary\n model.catalog[i] "]
12501[label="expressionName\n model.catalog "]
13502[label="ambiguousName\n model "]
12503[label="expressionName\n i "]
11504[label="arrayAccess_lfno_primary\n probs[i] "]
12505[label="expressionName\n probs "]
12506[label="expressionName\n i "]
6507[label="returnStatement\n returnscoreMap; "]
7508[label="expressionName\n scoreMap "]
3509[label="methodDeclaration\n @Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;} "]
4510[label="markerAnnotation\n @Override "]
5511[label="typeName\n Override "]
4512[label="methodModifier\n public "]
4513[label="methodHeader\n intlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException "]
5514[label="integralType\n int "]
5515[label="methodDeclarator\n label(Documentdocument) "]
6516[label="formalParameter\n Documentdocument "]
7517[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7518[label="variableDeclaratorId\n document "]
5519[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6520[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7521[label="classType\n IllegalArgumentException "]
7522[label="classType\n IllegalStateException "]
4523[label="block\n {AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;} "]
5524[label="blockStatements\n AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest; "]
6525[label="localVariableDeclarationStatement\n AbstractModelmodel=getModel(); "]
7526[label="localVariableDeclaration\n AbstractModelmodel=getModel() "]
8527[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractModel "]
8528[label="variableDeclarator\n model=getModel() "]
9529[label="variableDeclaratorId\n model "]
9530[label="methodInvocation_lfno_primary\n getModel() "]
10531[label="methodName\n getModel "]
6532[label="ifThenStatement\n if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
7533[label="equalityExpression\n model==null "]
8534[label="expressionName\n model "]
8535[label="literal\n null "]
7536[label="block\n {thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
8537[label="throwStatement\n thrownewIllegalStateException(\"未训练模型！无法执行预测！\"); "]
9538[label="classInstanceCreationExpression_lfno_primary\n newIllegalStateException(\"未训练模型！无法执行预测！\") "]
10539[label="literal\n \"未训练模型！无法执行预测！\" "]
6540[label="ifThenStatement\n if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");} "]
7541[label="equalityExpression\n document==null "]
8542[label="expressionName\n document "]
8543[label="literal\n null "]
7544[label="block\n {thrownewIllegalArgumentException(\"参数 text == null\");} "]
8545[label="throwStatement\n thrownewIllegalArgumentException(\"参数 text == null\"); "]
9546[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"参数 text == null\") "]
10547[label="literal\n \"参数 text == null\" "]
6548[label="localVariableDeclarationStatement\n double[]probs=categorize(document); "]
7549[label="localVariableDeclaration\n double[]probs=categorize(document) "]
8550[label="unannArrayType\n double[] "]
9551[label="floatingPointType\n double "]
9552[label="dims\n [] "]
8553[label="variableDeclarator\n probs=categorize(document) "]
9554[label="variableDeclaratorId\n probs "]
9555[label="methodInvocation_lfno_primary\n categorize(document) "]
10556[label="methodName\n categorize "]
10557[label="expressionName\n document "]
6558[label="localVariableDeclarationStatement\n doublemax=Double.NEGATIVE_INFINITY; "]
7559[label="localVariableDeclaration\n doublemax=Double.NEGATIVE_INFINITY "]
8560[label="floatingPointType\n double "]
8561[label="variableDeclarator\n max=Double.NEGATIVE_INFINITY "]
9562[label="variableDeclaratorId\n max "]
9563[label="expressionName\n Double.NEGATIVE_INFINITY "]
10564[label="ambiguousName\n Double "]
6565[label="localVariableDeclarationStatement\n intbest=-1; "]
7566[label="localVariableDeclaration\n intbest=-1 "]
8567[label="integralType\n int "]
8568[label="variableDeclarator\n best=-1 "]
9569[label="variableDeclaratorId\n best "]
9570[label="unaryExpression\n -1 "]
10571[label="literal\n 1 "]
6572[label="basicForStatement\n for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}} "]
7573[label="localVariableDeclaration\n inti=0 "]
8574[label="integralType\n int "]
8575[label="variableDeclarator\n i=0 "]
9576[label="variableDeclaratorId\n i "]
9577[label="literal\n 0 "]
7578[label="relationalExpression\n i<probs.length "]
8579[label="expressionName\n i "]
8580[label="expressionName\n probs.length "]
9581[label="ambiguousName\n probs "]
7582[label="postIncrementExpression\n i++ "]
8583[label="expressionName\n i "]
7584[label="block\n {if(probs[i]>max){max=probs[i];best=i;}} "]
8585[label="ifThenStatement\n if(probs[i]>max){max=probs[i];best=i;} "]
9586[label="relationalExpression\n probs[i]>max "]
10587[label="arrayAccess_lfno_primary\n probs[i] "]
11588[label="expressionName\n probs "]
11589[label="expressionName\n i "]
10590[label="expressionName\n max "]
9591[label="block\n {max=probs[i];best=i;} "]
10592[label="blockStatements\n max=probs[i];best=i; "]
11593[label="expressionStatement\n max=probs[i]; "]
12594[label="assignment\n max=probs[i] "]
13595[label="expressionName\n max "]
13596[label="assignmentOperator\n = "]
13597[label="arrayAccess_lfno_primary\n probs[i] "]
14598[label="expressionName\n probs "]
14599[label="expressionName\n i "]
11600[label="expressionStatement\n best=i; "]
12601[label="assignment\n best=i "]
13602[label="expressionName\n best "]
13603[label="assignmentOperator\n = "]
13604[label="expressionName\n i "]
6605[label="returnStatement\n returnbest; "]
7606[label="expressionName\n best "]
0607[label="compilationUnit\n packagecom.hankcs.hanlp.mining.word2vec;importjava.io.IOException;importjava.util.Scanner;publicabstractclassAbstractClosestVectors{staticfinalintN=40;protectedScannerscanner;protectedfinalVectorsReadervectorsReader;protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);}protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;}protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;}protectedabstractResultgetTargetVector();finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}}protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}}}<EOF> "]
1608[label="packageDeclaration\n packagecom.hankcs.hanlp.mining.word2vec; "]
2609[label="packageName\n com.hankcs.hanlp.mining.word2vec "]
3610[label="packageName\n com.hankcs.hanlp.mining "]
4611[label="packageName\n com.hankcs.hanlp "]
5612[label="packageName\n com.hankcs "]
6613[label="packageName\n com "]
1614[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
2615[label="typeName\n java.io.IOException "]
3616[label="packageOrTypeName\n java.io "]
4617[label="packageOrTypeName\n java "]
1618[label="singleTypeImportDeclaration\n importjava.util.Scanner; "]
2619[label="typeName\n java.util.Scanner "]
3620[label="packageOrTypeName\n java.util "]
4621[label="packageOrTypeName\n java "]
1622[label="normalClassDeclaration\n publicabstractclassAbstractClosestVectors{staticfinalintN=40;protectedScannerscanner;protectedfinalVectorsReadervectorsReader;protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);}protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;}protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;}protectedabstractResultgetTargetVector();finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}}protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}}} "]
2623[label="classModifier\n public "]
2624[label="classModifier\n abstract "]
2625[label="classBody\n {staticfinalintN=40;protectedScannerscanner;protectedfinalVectorsReadervectorsReader;protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);}protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;}protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;}protectedabstractResultgetTargetVector();finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}}protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}}} "]
3626[label="fieldDeclaration\n staticfinalintN=40; "]
4627[label="fieldModifier\n static "]
4628[label="fieldModifier\n final "]
4629[label="integralType\n int "]
4630[label="variableDeclarator\n N=40 "]
5631[label="variableDeclaratorId\n N "]
5632[label="literal\n 40 "]
3633[label="fieldDeclaration\n protectedScannerscanner; "]
4634[label="fieldModifier\n protected "]
4635[label="unannClassType_lfno_unannClassOrInterfaceType\n Scanner "]
4636[label="variableDeclaratorId\n scanner "]
3637[label="fieldDeclaration\n protectedfinalVectorsReadervectorsReader; "]
4638[label="fieldModifier\n protected "]
4639[label="fieldModifier\n final "]
4640[label="unannClassType_lfno_unannClassOrInterfaceType\n VectorsReader "]
4641[label="variableDeclaratorId\n vectorsReader "]
3642[label="constructorDeclaration\n protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);} "]
4643[label="constructorModifier\n protected "]
4644[label="constructorDeclarator\n AbstractClosestVectors(Stringfile) "]
5645[label="simpleTypeName\n AbstractClosestVectors "]
5646[label="formalParameter\n Stringfile "]
6647[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
6648[label="variableDeclaratorId\n file "]
4649[label="constructorBody\n {vectorsReader=newVectorsReader(file);} "]
5650[label="expressionStatement\n vectorsReader=newVectorsReader(file); "]
6651[label="assignment\n vectorsReader=newVectorsReader(file) "]
7652[label="expressionName\n vectorsReader "]
7653[label="assignmentOperator\n = "]
7654[label="classInstanceCreationExpression_lfno_primary\n newVectorsReader(file) "]
8655[label="expressionName\n file "]
3656[label="methodDeclaration\n protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;} "]
4657[label="methodModifier\n protected "]
4658[label="methodHeader\n String[]nextWords(intn,Stringmsg) "]
5659[label="unannArrayType\n String[] "]
6660[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
6661[label="dims\n [] "]
5662[label="methodDeclarator\n nextWords(intn,Stringmsg) "]
6663[label="formalParameterList\n intn,Stringmsg "]
7664[label="formalParameter\n intn "]
8665[label="integralType\n int "]
8666[label="variableDeclaratorId\n n "]
7667[label="formalParameter\n Stringmsg "]
8668[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8669[label="variableDeclaratorId\n msg "]
4670[label="block\n {System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;} "]
5671[label="blockStatements\n System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords; "]
6672[label="expressionStatement\n System.out.println(msg+\" ('q' to break): \"); "]
7673[label="methodInvocation\n System.out.println(msg+\" ('q' to break): \") "]
8674[label="typeName\n System.out "]
9675[label="packageOrTypeName\n System "]
8676[label="additiveExpression\n msg+\" ('q' to break): \" "]
9677[label="expressionName\n msg "]
9678[label="literal\n \" ('q' to break): \" "]
6679[label="localVariableDeclarationStatement\n String[]words=newString[n]; "]
7680[label="localVariableDeclaration\n String[]words=newString[n] "]
8681[label="unannArrayType\n String[] "]
9682[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
9683[label="dims\n [] "]
8684[label="variableDeclarator\n words=newString[n] "]
9685[label="variableDeclaratorId\n words "]
9686[label="arrayCreationExpression\n newString[n] "]
10687[label="classType_lfno_classOrInterfaceType\n String "]
10688[label="dimExpr\n [n] "]
11689[label="expressionName\n n "]
6690[label="basicForStatement\n for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;} "]
7691[label="localVariableDeclaration\n inti=0 "]
8692[label="integralType\n int "]
8693[label="variableDeclarator\n i=0 "]
9694[label="variableDeclaratorId\n i "]
9695[label="literal\n 0 "]
7696[label="relationalExpression\n i<n "]
8697[label="expressionName\n i "]
8698[label="expressionName\n n "]
7699[label="postIncrementExpression\n i++ "]
8700[label="expressionName\n i "]
7701[label="block\n {Stringword=nextWord();if(word==null)returnnull;words[i]=word;} "]
8702[label="blockStatements\n Stringword=nextWord();if(word==null)returnnull;words[i]=word; "]
9703[label="localVariableDeclarationStatement\n Stringword=nextWord(); "]
10704[label="localVariableDeclaration\n Stringword=nextWord() "]
11705[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
11706[label="variableDeclarator\n word=nextWord() "]
12707[label="variableDeclaratorId\n word "]
12708[label="methodInvocation_lfno_primary\n nextWord() "]
13709[label="methodName\n nextWord "]
9710[label="ifThenStatement\n if(word==null)returnnull; "]
10711[label="equalityExpression\n word==null "]
11712[label="expressionName\n word "]
11713[label="literal\n null "]
10714[label="returnStatement\n returnnull; "]
11715[label="literal\n null "]
9716[label="expressionStatement\n words[i]=word; "]
10717[label="assignment\n words[i]=word "]
11718[label="arrayAccess\n words[i] "]
12719[label="expressionName\n words "]
12720[label="expressionName\n i "]
11721[label="assignmentOperator\n = "]
11722[label="expressionName\n word "]
6723[label="returnStatement\n returnwords; "]
7724[label="expressionName\n words "]
3725[label="methodDeclaration\n protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;} "]
4726[label="methodModifier\n protected "]
4727[label="methodHeader\n StringnextWord() "]
5728[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
5729[label="methodDeclarator\n nextWord() "]
4730[label="block\n {Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;} "]
5731[label="blockStatements\n Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word; "]
6732[label="localVariableDeclarationStatement\n Stringword=scanner.next(); "]
7733[label="localVariableDeclaration\n Stringword=scanner.next() "]
8734[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8735[label="variableDeclarator\n word=scanner.next() "]
9736[label="variableDeclaratorId\n word "]
9737[label="methodInvocation_lfno_primary\n scanner.next() "]
10738[label="typeName\n scanner "]
6739[label="returnStatement\n returnword==null||word.length()==0||word.equals(\"q\")?null:word; "]
7740[label="conditionalExpression\n word==null||word.length()==0||word.equals(\"q\")?null:word "]
8741[label="conditionalOrExpression\n word==null||word.length()==0||word.equals(\"q\") "]
9742[label="conditionalOrExpression\n word==null||word.length()==0 "]
10743[label="equalityExpression\n word==null "]
11744[label="expressionName\n word "]
11745[label="literal\n null "]
10746[label="equalityExpression\n word.length()==0 "]
11747[label="methodInvocation_lfno_primary\n word.length() "]
12748[label="typeName\n word "]
11749[label="literal\n 0 "]
9750[label="methodInvocation_lfno_primary\n word.equals(\"q\") "]
10751[label="typeName\n word "]
10752[label="literal\n \"q\" "]
8753[label="literal\n null "]
8754[label="expressionName\n word "]
3755[label="methodDeclaration\n protectedabstractResultgetTargetVector(); "]
4756[label="methodModifier\n protected "]
4757[label="methodModifier\n abstract "]
4758[label="methodHeader\n ResultgetTargetVector() "]
5759[label="unannClassType_lfno_unannClassOrInterfaceType\n Result "]
5760[label="methodDeclarator\n getTargetVector() "]
4761[label="methodBody\n ; "]
3762[label="methodDeclaration\n finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}} "]
4763[label="methodModifier\n final "]
4764[label="methodModifier\n protected "]
4765[label="methodHeader\n voidexecute()throwsIOException "]
5766[label="result\n void "]
5767[label="methodDeclarator\n execute() "]
5768[label="throws_\n throwsIOException "]
6769[label="classType\n IOException "]
4770[label="block\n {vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}} "]
5771[label="blockStatements\n vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();} "]
6772[label="expressionStatement\n vectorsReader.readVectorFile(); "]
7773[label="methodInvocation\n vectorsReader.readVectorFile() "]
8774[label="typeName\n vectorsReader "]
6775[label="localVariableDeclarationStatement\n finalintwords=vectorsReader.getNumWords(); "]
7776[label="localVariableDeclaration\n finalintwords=vectorsReader.getNumWords() "]
8777[label="variableModifier\n final "]
8778[label="integralType\n int "]
8779[label="variableDeclarator\n words=vectorsReader.getNumWords() "]
9780[label="variableDeclaratorId\n words "]
9781[label="methodInvocation_lfno_primary\n vectorsReader.getNumWords() "]
10782[label="typeName\n vectorsReader "]
6783[label="localVariableDeclarationStatement\n finalintsize=vectorsReader.getSize(); "]
7784[label="localVariableDeclaration\n finalintsize=vectorsReader.getSize() "]
8785[label="variableModifier\n final "]
8786[label="integralType\n int "]
8787[label="variableDeclarator\n size=vectorsReader.getSize() "]
9788[label="variableDeclaratorId\n size "]
9789[label="methodInvocation_lfno_primary\n vectorsReader.getSize() "]
10790[label="typeName\n vectorsReader "]
6791[label="tryStatement\n try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();} "]
7792[label="block\n {scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}} "]
8793[label="blockStatements\n scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);} "]
9794[label="expressionStatement\n scanner=newScanner(System.in); "]
10795[label="assignment\n scanner=newScanner(System.in) "]
11796[label="expressionName\n scanner "]
11797[label="assignmentOperator\n = "]
11798[label="classInstanceCreationExpression_lfno_primary\n newScanner(System.in) "]
12799[label="expressionName\n System.in "]
13800[label="ambiguousName\n System "]
9801[label="localVariableDeclarationStatement\n Resultresult=null; "]
10802[label="localVariableDeclaration\n Resultresult=null "]
11803[label="unannClassType_lfno_unannClassOrInterfaceType\n Result "]
11804[label="variableDeclarator\n result=null "]
12805[label="variableDeclaratorId\n result "]
12806[label="literal\n null "]
9807[label="whileStatement\n while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);} "]
10808[label="equalityExpression\n (result=getTargetVector())!=null "]
11809[label="primaryNoNewArray_lfno_primary\n (result=getTargetVector()) "]
12810[label="assignment\n result=getTargetVector() "]
13811[label="expressionName\n result "]
13812[label="assignmentOperator\n = "]
13813[label="methodInvocation_lfno_primary\n getTargetVector() "]
14814[label="methodName\n getTargetVector "]
11815[label="literal\n null "]
10816[label="block\n {double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);} "]
11817[label="blockStatements\n double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]); "]
12818[label="localVariableDeclarationStatement\n double[]bestd=newdouble[N]; "]
13819[label="localVariableDeclaration\n double[]bestd=newdouble[N] "]
14820[label="unannArrayType\n double[] "]
15821[label="floatingPointType\n double "]
15822[label="dims\n [] "]
14823[label="variableDeclarator\n bestd=newdouble[N] "]
15824[label="variableDeclaratorId\n bestd "]
15825[label="arrayCreationExpression\n newdouble[N] "]
16826[label="floatingPointType\n double "]
16827[label="dimExpr\n [N] "]
17828[label="expressionName\n N "]
12829[label="localVariableDeclarationStatement\n String[]bestw=newString[N]; "]
13830[label="localVariableDeclaration\n String[]bestw=newString[N] "]
14831[label="unannArrayType\n String[] "]
15832[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
15833[label="dims\n [] "]
14834[label="variableDeclarator\n bestw=newString[N] "]
15835[label="variableDeclaratorId\n bestw "]
15836[label="arrayCreationExpression\n newString[N] "]
16837[label="classType_lfno_classOrInterfaceType\n String "]
16838[label="dimExpr\n [N] "]
17839[label="expressionName\n N "]
12840[label="labeledStatement\n next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}} "]
13841[label="basicForStatement\n for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}} "]
14842[label="localVariableDeclaration\n inti=0 "]
15843[label="integralType\n int "]
15844[label="variableDeclarator\n i=0 "]
16845[label="variableDeclaratorId\n i "]
16846[label="literal\n 0 "]
14847[label="relationalExpression\n i<words "]
15848[label="expressionName\n i "]
15849[label="expressionName\n words "]
14850[label="postIncrementExpression\n i++ "]
15851[label="expressionName\n i "]
14852[label="block\n {for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}} "]
15853[label="blockStatements\n for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}} "]
16854[label="enhancedForStatement\n for(intbi:result.bi){if(i==bi)continuenext_word;} "]
17855[label="integralType\n int "]
17856[label="variableDeclaratorId\n bi "]
17857[label="expressionName\n result.bi "]
18858[label="ambiguousName\n result "]
17859[label="block\n {if(i==bi)continuenext_word;} "]
18860[label="ifThenStatement\n if(i==bi)continuenext_word; "]
19861[label="equalityExpression\n i==bi "]
20862[label="expressionName\n i "]
20863[label="expressionName\n bi "]
19864[label="continueStatement\n continuenext_word; "]
16865[label="localVariableDeclarationStatement\n doubledist=0; "]
17866[label="localVariableDeclaration\n doubledist=0 "]
18867[label="floatingPointType\n double "]
18868[label="variableDeclarator\n dist=0 "]
19869[label="variableDeclaratorId\n dist "]
19870[label="literal\n 0 "]
16871[label="basicForStatement\n for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);} "]
17872[label="localVariableDeclaration\n intj=0 "]
18873[label="integralType\n int "]
18874[label="variableDeclarator\n j=0 "]
19875[label="variableDeclaratorId\n j "]
19876[label="literal\n 0 "]
17877[label="relationalExpression\n j<size "]
18878[label="expressionName\n j "]
18879[label="expressionName\n size "]
17880[label="postIncrementExpression\n j++ "]
18881[label="expressionName\n j "]
17882[label="block\n {dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);} "]
18883[label="expressionStatement\n dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j); "]
19884[label="assignment\n dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j) "]
20885[label="expressionName\n dist "]
20886[label="assignmentOperator\n += "]
20887[label="multiplicativeExpression\n result.vec[j]*vectorsReader.getMatrixElement(i,j) "]
21888[label="arrayAccess_lfno_primary\n result.vec[j] "]
22889[label="expressionName\n result.vec "]
23890[label="ambiguousName\n result "]
22891[label="expressionName\n j "]
21892[label="methodInvocation_lfno_primary\n vectorsReader.getMatrixElement(i,j) "]
22893[label="typeName\n vectorsReader "]
22894[label="argumentList\n i,j "]
23895[label="expressionName\n i "]
23896[label="expressionName\n j "]
16897[label="basicForStatement\n for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}} "]
17898[label="localVariableDeclaration\n intj=0 "]
18899[label="integralType\n int "]
18900[label="variableDeclarator\n j=0 "]
19901[label="variableDeclaratorId\n j "]
19902[label="literal\n 0 "]
17903[label="relationalExpression\n j<N "]
18904[label="expressionName\n j "]
18905[label="expressionName\n N "]
17906[label="postIncrementExpression\n j++ "]
18907[label="expressionName\n j "]
17908[label="block\n {if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}} "]
18909[label="ifThenStatement\n if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;} "]
19910[label="relationalExpression\n dist>bestd[j] "]
20911[label="expressionName\n dist "]
20912[label="arrayAccess_lfno_primary\n bestd[j] "]
21913[label="expressionName\n bestd "]
21914[label="expressionName\n j "]
19915[label="block\n {for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;} "]
20916[label="blockStatements\n for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break; "]
21917[label="basicForStatement\n for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];} "]
22918[label="localVariableDeclaration\n intk=N-1 "]
23919[label="integralType\n int "]
23920[label="variableDeclarator\n k=N-1 "]
24921[label="variableDeclaratorId\n k "]
24922[label="additiveExpression\n N-1 "]
25923[label="expressionName\n N "]
25924[label="literal\n 1 "]
22925[label="relationalExpression\n k>j "]
23926[label="expressionName\n k "]
23927[label="expressionName\n j "]
22928[label="postDecrementExpression\n k-- "]
23929[label="expressionName\n k "]
22930[label="block\n {bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];} "]
23931[label="blockStatements\n bestd[k]=bestd[k-1];bestw[k]=bestw[k-1]; "]
24932[label="expressionStatement\n bestd[k]=bestd[k-1]; "]
25933[label="assignment\n bestd[k]=bestd[k-1] "]
26934[label="arrayAccess\n bestd[k] "]
27935[label="expressionName\n bestd "]
27936[label="expressionName\n k "]
26937[label="assignmentOperator\n = "]
26938[label="arrayAccess_lfno_primary\n bestd[k-1] "]
27939[label="expressionName\n bestd "]
27940[label="additiveExpression\n k-1 "]
28941[label="expressionName\n k "]
28942[label="literal\n 1 "]
24943[label="expressionStatement\n bestw[k]=bestw[k-1]; "]
25944[label="assignment\n bestw[k]=bestw[k-1] "]
26945[label="arrayAccess\n bestw[k] "]
27946[label="expressionName\n bestw "]
27947[label="expressionName\n k "]
26948[label="assignmentOperator\n = "]
26949[label="arrayAccess_lfno_primary\n bestw[k-1] "]
27950[label="expressionName\n bestw "]
27951[label="additiveExpression\n k-1 "]
28952[label="expressionName\n k "]
28953[label="literal\n 1 "]
21954[label="expressionStatement\n bestd[j]=dist; "]
22955[label="assignment\n bestd[j]=dist "]
23956[label="arrayAccess\n bestd[j] "]
24957[label="expressionName\n bestd "]
24958[label="expressionName\n j "]
23959[label="assignmentOperator\n = "]
23960[label="expressionName\n dist "]
21961[label="expressionStatement\n bestw[j]=vectorsReader.getWord(i); "]
22962[label="assignment\n bestw[j]=vectorsReader.getWord(i) "]
23963[label="arrayAccess\n bestw[j] "]
24964[label="expressionName\n bestw "]
24965[label="expressionName\n j "]
23966[label="assignmentOperator\n = "]
23967[label="methodInvocation_lfno_primary\n vectorsReader.getWord(i) "]
24968[label="typeName\n vectorsReader "]
24969[label="expressionName\n i "]
21970[label="breakStatement\n break; "]
12971[label="expressionStatement\n System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\"); "]
13972[label="methodInvocation\n System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\") "]
14973[label="typeName\n System.out "]
15974[label="packageOrTypeName\n System "]
14975[label="literal\n \"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\" "]
12976[label="basicForStatement\n for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]); "]
13977[label="localVariableDeclaration\n intj=0 "]
14978[label="integralType\n int "]
14979[label="variableDeclarator\n j=0 "]
15980[label="variableDeclaratorId\n j "]
15981[label="literal\n 0 "]
13982[label="relationalExpression\n j<N "]
14983[label="expressionName\n j "]
14984[label="expressionName\n N "]
13985[label="postIncrementExpression\n j++ "]
14986[label="expressionName\n j "]
13987[label="expressionStatement\n System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]); "]
14988[label="methodInvocation\n System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]) "]
15989[label="typeName\n System.out "]
16990[label="packageOrTypeName\n System "]
15991[label="argumentList\n \"%50s\t\t%f\n\",bestw[j],bestd[j] "]
16992[label="literal\n \"%50s\t\t%f\n\" "]
16993[label="arrayAccess_lfno_primary\n bestw[j] "]
17994[label="expressionName\n bestw "]
17995[label="expressionName\n j "]
16996[label="arrayAccess_lfno_primary\n bestd[j] "]
17997[label="expressionName\n bestd "]
17998[label="expressionName\n j "]
7999[label="finally_\n finally{scanner.close();} "]
81000[label="block\n {scanner.close();} "]
91001[label="expressionStatement\n scanner.close(); "]
101002[label="methodInvocation\n scanner.close() "]
111003[label="typeName\n scanner "]
31004[label="normalClassDeclaration\n protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}} "]
41005[label="classModifier\n protected "]
41006[label="classModifier\n static "]
41007[label="classBody\n {float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}} "]
51008[label="fieldDeclaration\n float[]vec; "]
61009[label="unannArrayType\n float[] "]
71010[label="floatingPointType\n float "]
71011[label="dims\n [] "]
61012[label="variableDeclaratorId\n vec "]
51013[label="fieldDeclaration\n int[]bi; "]
61014[label="unannArrayType\n int[] "]
71015[label="integralType\n int "]
71016[label="dims\n [] "]
61017[label="variableDeclaratorId\n bi "]
51018[label="constructorDeclaration\n publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;} "]
61019[label="constructorModifier\n public "]
61020[label="constructorDeclarator\n Result(float[]vec,int[]bi) "]
71021[label="simpleTypeName\n Result "]
71022[label="formalParameterList\n float[]vec,int[]bi "]
81023[label="formalParameter\n float[]vec "]
91024[label="unannArrayType\n float[] "]
101025[label="floatingPointType\n float "]
101026[label="dims\n [] "]
91027[label="variableDeclaratorId\n vec "]
81028[label="formalParameter\n int[]bi "]
91029[label="unannArrayType\n int[] "]
101030[label="integralType\n int "]
101031[label="dims\n [] "]
91032[label="variableDeclaratorId\n bi "]
61033[label="constructorBody\n {this.vec=vec;this.bi=bi;} "]
71034[label="blockStatements\n this.vec=vec;this.bi=bi; "]
81035[label="expressionStatement\n this.vec=vec; "]
91036[label="assignment\n this.vec=vec "]
101037[label="fieldAccess\n this.vec "]
111038[label="primaryNoNewArray_lfno_primary\n this "]
101039[label="assignmentOperator\n = "]
101040[label="expressionName\n vec "]
81041[label="expressionStatement\n this.bi=bi; "]
91042[label="assignment\n this.bi=bi "]
101043[label="fieldAccess\n this.bi "]
111044[label="primaryNoNewArray_lfno_primary\n this "]
101045[label="assignmentOperator\n = "]
101046[label="expressionName\n bi "]
01047[label="compilationUnit\n packagecom.hankcs.hanlp.classification.corpus;importcom.hankcs.hanlp.classification.models.AbstractModel;importcom.hankcs.hanlp.classification.tokenizers.BigramTokenizer;importcom.hankcs.hanlp.classification.tokenizers.HanLPTokenizer;importcom.hankcs.hanlp.classification.tokenizers.ITokenizer;importcom.hankcs.hanlp.classification.utilities.MathUtility;importcom.hankcs.hanlp.classification.utilities.TextProcessUtility;importjava.io.File;importjava.io.IOException;importjava.util.Map;importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger;publicabstractclassAbstractDataSetimplementsIDataSet{protectedITokenizertokenizer;protectedCatalogcatalog;protectedLexiconlexicon;protectedbooleantestingDataSet;publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;}publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();}publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;}publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);}publicITokenizergetTokenizer(){returntokenizer;}publicCataloggetCatalog(){returncatalog;}publicLexicongetLexicon(){returnlexicon;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);}@OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");}@OverridepublicbooleanisTestingDataSet(){returntestingDataSet;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;}@OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;}@OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;}}<EOF> "]
11048[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.corpus; "]
21049[label="packageName\n com.hankcs.hanlp.classification.corpus "]
31050[label="packageName\n com.hankcs.hanlp.classification "]
41051[label="packageName\n com.hankcs.hanlp "]
51052[label="packageName\n com.hankcs "]
61053[label="packageName\n com "]
11054[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.models.AbstractModel; "]
21055[label="typeName\n com.hankcs.hanlp.classification.models.AbstractModel "]
31056[label="packageOrTypeName\n com.hankcs.hanlp.classification.models "]
41057[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51058[label="packageOrTypeName\n com.hankcs.hanlp "]
61059[label="packageOrTypeName\n com.hankcs "]
71060[label="packageOrTypeName\n com "]
11061[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.BigramTokenizer; "]
21062[label="typeName\n com.hankcs.hanlp.classification.tokenizers.BigramTokenizer "]
31063[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
41064[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51065[label="packageOrTypeName\n com.hankcs.hanlp "]
61066[label="packageOrTypeName\n com.hankcs "]
71067[label="packageOrTypeName\n com "]
11068[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.HanLPTokenizer; "]
21069[label="typeName\n com.hankcs.hanlp.classification.tokenizers.HanLPTokenizer "]
31070[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
41071[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51072[label="packageOrTypeName\n com.hankcs.hanlp "]
61073[label="packageOrTypeName\n com.hankcs "]
71074[label="packageOrTypeName\n com "]
11075[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.ITokenizer; "]
21076[label="typeName\n com.hankcs.hanlp.classification.tokenizers.ITokenizer "]
31077[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
41078[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51079[label="packageOrTypeName\n com.hankcs.hanlp "]
61080[label="packageOrTypeName\n com.hankcs "]
71081[label="packageOrTypeName\n com "]
11082[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.MathUtility; "]
21083[label="typeName\n com.hankcs.hanlp.classification.utilities.MathUtility "]
31084[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
41085[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51086[label="packageOrTypeName\n com.hankcs.hanlp "]
61087[label="packageOrTypeName\n com.hankcs "]
71088[label="packageOrTypeName\n com "]
11089[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.TextProcessUtility; "]
21090[label="typeName\n com.hankcs.hanlp.classification.utilities.TextProcessUtility "]
31091[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
41092[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51093[label="packageOrTypeName\n com.hankcs.hanlp "]
61094[label="packageOrTypeName\n com.hankcs "]
71095[label="packageOrTypeName\n com "]
11096[label="singleTypeImportDeclaration\n importjava.io.File; "]
21097[label="typeName\n java.io.File "]
31098[label="packageOrTypeName\n java.io "]
41099[label="packageOrTypeName\n java "]
11100[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
21101[label="typeName\n java.io.IOException "]
31102[label="packageOrTypeName\n java.io "]
41103[label="packageOrTypeName\n java "]
11104[label="singleTypeImportDeclaration\n importjava.util.Map; "]
21105[label="typeName\n java.util.Map "]
31106[label="packageOrTypeName\n java.util "]
41107[label="packageOrTypeName\n java "]
11108[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger; "]
21109[label="typeName\n com.hankcs.hanlp.classification.utilities.Predefine "]
31110[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
41111[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51112[label="packageOrTypeName\n com.hankcs.hanlp "]
61113[label="packageOrTypeName\n com.hankcs "]
71114[label="packageOrTypeName\n com "]
11115[label="normalClassDeclaration\n publicabstractclassAbstractDataSetimplementsIDataSet{protectedITokenizertokenizer;protectedCatalogcatalog;protectedLexiconlexicon;protectedbooleantestingDataSet;publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;}publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();}publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;}publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);}publicITokenizergetTokenizer(){returntokenizer;}publicCataloggetCatalog(){returncatalog;}publicLexicongetLexicon(){returnlexicon;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);}@OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");}@OverridepublicbooleanisTestingDataSet(){returntestingDataSet;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;}@OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;}@OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;}} "]
21116[label="classModifier\n public "]
21117[label="classModifier\n abstract "]
21118[label="superinterfaces\n implementsIDataSet "]
31119[label="classType\n IDataSet "]
21120[label="classBody\n {protectedITokenizertokenizer;protectedCatalogcatalog;protectedLexiconlexicon;protectedbooleantestingDataSet;publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;}publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();}publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;}publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);}publicITokenizergetTokenizer(){returntokenizer;}publicCataloggetCatalog(){returncatalog;}publicLexicongetLexicon(){returnlexicon;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);}@OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");}@OverridepublicbooleanisTestingDataSet(){returntestingDataSet;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;}@OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;}@OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;}} "]
31121[label="fieldDeclaration\n protectedITokenizertokenizer; "]
41122[label="fieldModifier\n protected "]
41123[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
41124[label="variableDeclaratorId\n tokenizer "]
31125[label="fieldDeclaration\n protectedCatalogcatalog; "]
41126[label="fieldModifier\n protected "]
41127[label="unannClassType_lfno_unannClassOrInterfaceType\n Catalog "]
41128[label="variableDeclaratorId\n catalog "]
31129[label="fieldDeclaration\n protectedLexiconlexicon; "]
41130[label="fieldModifier\n protected "]
41131[label="unannClassType_lfno_unannClassOrInterfaceType\n Lexicon "]
41132[label="variableDeclaratorId\n lexicon "]
31133[label="fieldDeclaration\n protectedbooleantestingDataSet; "]
41134[label="fieldModifier\n protected "]
41135[label="unannPrimitiveType\n boolean "]
41136[label="variableDeclaratorId\n testingDataSet "]
31137[label="constructorDeclaration\n publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;} "]
41138[label="constructorModifier\n public "]
41139[label="constructorDeclarator\n AbstractDataSet(AbstractModelmodel) "]
51140[label="simpleTypeName\n AbstractDataSet "]
51141[label="formalParameter\n AbstractModelmodel "]
61142[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractModel "]
61143[label="variableDeclaratorId\n model "]
41144[label="constructorBody\n {lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;} "]
51145[label="blockStatements\n lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true; "]
61146[label="expressionStatement\n lexicon=newLexicon(model.wordIdTrie); "]
71147[label="assignment\n lexicon=newLexicon(model.wordIdTrie) "]
81148[label="expressionName\n lexicon "]
81149[label="assignmentOperator\n = "]
81150[label="classInstanceCreationExpression_lfno_primary\n newLexicon(model.wordIdTrie) "]
91151[label="expressionName\n model.wordIdTrie "]
101152[label="ambiguousName\n model "]
61153[label="expressionStatement\n tokenizer=model.tokenizer; "]
71154[label="assignment\n tokenizer=model.tokenizer "]
81155[label="expressionName\n tokenizer "]
81156[label="assignmentOperator\n = "]
81157[label="expressionName\n model.tokenizer "]
91158[label="ambiguousName\n model "]
61159[label="expressionStatement\n catalog=newCatalog(model.catalog); "]
71160[label="assignment\n catalog=newCatalog(model.catalog) "]
81161[label="expressionName\n catalog "]
81162[label="assignmentOperator\n = "]
81163[label="classInstanceCreationExpression_lfno_primary\n newCatalog(model.catalog) "]
91164[label="expressionName\n model.catalog "]
101165[label="ambiguousName\n model "]
61166[label="expressionStatement\n testingDataSet=true; "]
71167[label="assignment\n testingDataSet=true "]
81168[label="expressionName\n testingDataSet "]
81169[label="assignmentOperator\n = "]
81170[label="literal\n true "]
31171[label="constructorDeclaration\n publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();} "]
41172[label="constructorModifier\n public "]
41173[label="constructorDeclarator\n AbstractDataSet() "]
51174[label="simpleTypeName\n AbstractDataSet "]
41175[label="constructorBody\n {tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();} "]
51176[label="blockStatements\n tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon(); "]
61177[label="expressionStatement\n tokenizer=newHanLPTokenizer(); "]
71178[label="assignment\n tokenizer=newHanLPTokenizer() "]
81179[label="expressionName\n tokenizer "]
81180[label="assignmentOperator\n = "]
81181[label="classInstanceCreationExpression_lfno_primary\n newHanLPTokenizer() "]
61182[label="expressionStatement\n catalog=newCatalog(); "]
71183[label="assignment\n catalog=newCatalog() "]
81184[label="expressionName\n catalog "]
81185[label="assignmentOperator\n = "]
81186[label="classInstanceCreationExpression_lfno_primary\n newCatalog() "]
61187[label="expressionStatement\n lexicon=newLexicon(); "]
71188[label="assignment\n lexicon=newLexicon() "]
81189[label="expressionName\n lexicon "]
81190[label="assignmentOperator\n = "]
81191[label="classInstanceCreationExpression_lfno_primary\n newLexicon() "]
31192[label="methodDeclaration\n publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;} "]
41193[label="methodModifier\n public "]
41194[label="methodHeader\n IDataSetsetTokenizer(ITokenizertokenizer) "]
51195[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51196[label="methodDeclarator\n setTokenizer(ITokenizertokenizer) "]
61197[label="formalParameter\n ITokenizertokenizer "]
71198[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
71199[label="variableDeclaratorId\n tokenizer "]
41200[label="block\n {this.tokenizer=tokenizer;returnthis;} "]
51201[label="blockStatements\n this.tokenizer=tokenizer;returnthis; "]
61202[label="expressionStatement\n this.tokenizer=tokenizer; "]
71203[label="assignment\n this.tokenizer=tokenizer "]
81204[label="fieldAccess\n this.tokenizer "]
91205[label="primaryNoNewArray_lfno_primary\n this "]
81206[label="assignmentOperator\n = "]
81207[label="expressionName\n tokenizer "]
61208[label="returnStatement\n returnthis; "]
71209[label="primaryNoNewArray_lfno_primary\n this "]
31210[label="methodDeclaration\n publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);} "]
41211[label="methodModifier\n public "]
41212[label="methodHeader\n Documentconvert(Stringcategory,Stringtext) "]
51213[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
51214[label="methodDeclarator\n convert(Stringcategory,Stringtext) "]
61215[label="formalParameterList\n Stringcategory,Stringtext "]
71216[label="formalParameter\n Stringcategory "]
81217[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81218[label="variableDeclaratorId\n category "]
71219[label="formalParameter\n Stringtext "]
81220[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81221[label="variableDeclaratorId\n text "]
41222[label="block\n {String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);} "]
51223[label="blockStatements\n String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray); "]
61224[label="localVariableDeclarationStatement\n String[]tokenArray=tokenizer.segment(text); "]
71225[label="localVariableDeclaration\n String[]tokenArray=tokenizer.segment(text) "]
81226[label="unannArrayType\n String[] "]
91227[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91228[label="dims\n [] "]
81229[label="variableDeclarator\n tokenArray=tokenizer.segment(text) "]
91230[label="variableDeclaratorId\n tokenArray "]
91231[label="methodInvocation_lfno_primary\n tokenizer.segment(text) "]
101232[label="typeName\n tokenizer "]
101233[label="expressionName\n text "]
61234[label="returnStatement\n returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray); "]
71235[label="conditionalExpression\n testingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray) "]
81236[label="expressionName\n testingDataSet "]
81237[label="classInstanceCreationExpression_lfno_primary\n newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray) "]
91238[label="argumentList\n catalog.categoryId,lexicon.wordId,category,tokenArray "]
101239[label="expressionName\n catalog.categoryId "]
111240[label="ambiguousName\n catalog "]
101241[label="expressionName\n lexicon.wordId "]
111242[label="ambiguousName\n lexicon "]
101243[label="expressionName\n category "]
101244[label="expressionName\n tokenArray "]
81245[label="classInstanceCreationExpression_lfno_primary\n newDocument(catalog,lexicon,category,tokenArray) "]
91246[label="argumentList\n catalog,lexicon,category,tokenArray "]
101247[label="expressionName\n catalog "]
101248[label="expressionName\n lexicon "]
101249[label="expressionName\n category "]
101250[label="expressionName\n tokenArray "]
31251[label="methodDeclaration\n publicITokenizergetTokenizer(){returntokenizer;} "]
41252[label="methodModifier\n public "]
41253[label="methodHeader\n ITokenizergetTokenizer() "]
51254[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
51255[label="methodDeclarator\n getTokenizer() "]
41256[label="block\n {returntokenizer;} "]
51257[label="returnStatement\n returntokenizer; "]
61258[label="expressionName\n tokenizer "]
31259[label="methodDeclaration\n publicCataloggetCatalog(){returncatalog;} "]
41260[label="methodModifier\n public "]
41261[label="methodHeader\n CataloggetCatalog() "]
51262[label="unannClassType_lfno_unannClassOrInterfaceType\n Catalog "]
51263[label="methodDeclarator\n getCatalog() "]
41264[label="block\n {returncatalog;} "]
51265[label="returnStatement\n returncatalog; "]
61266[label="expressionName\n catalog "]
31267[label="methodDeclaration\n publicLexicongetLexicon(){returnlexicon;} "]
41268[label="methodModifier\n public "]
41269[label="methodHeader\n LexicongetLexicon() "]
51270[label="unannClassType_lfno_unannClassOrInterfaceType\n Lexicon "]
51271[label="methodDeclarator\n getLexicon() "]
41272[label="block\n {returnlexicon;} "]
51273[label="returnStatement\n returnlexicon; "]
61274[label="expressionName\n lexicon "]
31275[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);} "]
41276[label="markerAnnotation\n @Override "]
51277[label="typeName\n Override "]
41278[label="methodModifier\n public "]
41279[label="methodHeader\n IDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException "]
51280[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51281[label="methodDeclarator\n load(StringfolderPath,StringcharsetName) "]
61282[label="formalParameterList\n StringfolderPath,StringcharsetName "]
71283[label="formalParameter\n StringfolderPath "]
81284[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81285[label="variableDeclaratorId\n folderPath "]
71286[label="formalParameter\n StringcharsetName "]
81287[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81288[label="variableDeclaratorId\n charsetName "]
51289[label="throws_\n throwsIllegalArgumentException,IOException "]
61290[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71291[label="classType\n IllegalArgumentException "]
71292[label="classType\n IOException "]
41293[label="block\n {returnload(folderPath,charsetName,1.);} "]
51294[label="returnStatement\n returnload(folderPath,charsetName,1.); "]
61295[label="methodInvocation_lfno_primary\n load(folderPath,charsetName,1.) "]
71296[label="methodName\n load "]
71297[label="argumentList\n folderPath,charsetName,1. "]
81298[label="expressionName\n folderPath "]
81299[label="expressionName\n charsetName "]
81300[label="literal\n 1. "]
31301[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");} "]
41302[label="markerAnnotation\n @Override "]
51303[label="typeName\n Override "]
41304[label="methodModifier\n public "]
41305[label="methodHeader\n IDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException "]
51306[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51307[label="methodDeclarator\n load(StringfolderPath) "]
61308[label="formalParameter\n StringfolderPath "]
71309[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
71310[label="variableDeclaratorId\n folderPath "]
51311[label="throws_\n throwsIllegalArgumentException,IOException "]
61312[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71313[label="classType\n IllegalArgumentException "]
71314[label="classType\n IOException "]
41315[label="block\n {returnload(folderPath,\"UTF-8\");} "]
51316[label="returnStatement\n returnload(folderPath,\"UTF-8\"); "]
61317[label="methodInvocation_lfno_primary\n load(folderPath,\"UTF-8\") "]
71318[label="methodName\n load "]
71319[label="argumentList\n folderPath,\"UTF-8\" "]
81320[label="expressionName\n folderPath "]
81321[label="literal\n \"UTF-8\" "]
31322[label="methodDeclaration\n @OverridepublicbooleanisTestingDataSet(){returntestingDataSet;} "]
41323[label="markerAnnotation\n @Override "]
51324[label="typeName\n Override "]
41325[label="methodModifier\n public "]
41326[label="methodHeader\n booleanisTestingDataSet() "]
51327[label="unannPrimitiveType\n boolean "]
51328[label="methodDeclarator\n isTestingDataSet() "]
41329[label="block\n {returntestingDataSet;} "]
51330[label="returnStatement\n returntestingDataSet; "]
61331[label="expressionName\n testingDataSet "]
31332[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;} "]
41333[label="markerAnnotation\n @Override "]
51334[label="typeName\n Override "]
41335[label="methodModifier\n public "]
41336[label="methodHeader\n IDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException "]
51337[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51338[label="methodDeclarator\n load(StringfolderPath,StringcharsetName,doublepercentage) "]
61339[label="formalParameterList\n StringfolderPath,StringcharsetName,doublepercentage "]
71340[label="formalParameters\n StringfolderPath,StringcharsetName "]
81341[label="formalParameter\n StringfolderPath "]
91342[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91343[label="variableDeclaratorId\n folderPath "]
81344[label="formalParameter\n StringcharsetName "]
91345[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91346[label="variableDeclaratorId\n charsetName "]
71347[label="formalParameter\n doublepercentage "]
81348[label="floatingPointType\n double "]
81349[label="variableDeclaratorId\n percentage "]
51350[label="throws_\n throwsIllegalArgumentException,IOException "]
61351[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71352[label="classType\n IllegalArgumentException "]
71353[label="classType\n IOException "]
41354[label="block\n {if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;} "]
51355[label="blockStatements\n if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis; "]
61356[label="ifThenStatement\n if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\"); "]
71357[label="equalityExpression\n folderPath==null "]
81358[label="expressionName\n folderPath "]
81359[label="literal\n null "]
71360[label="throwStatement\n thrownewIllegalArgumentException(\"参数 folderPath == null\"); "]
81361[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"参数 folderPath == null\") "]
91362[label="literal\n \"参数 folderPath == null\" "]
61363[label="localVariableDeclarationStatement\n Fileroot=newFile(folderPath); "]
71364[label="localVariableDeclaration\n Fileroot=newFile(folderPath) "]
81365[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
81366[label="variableDeclarator\n root=newFile(folderPath) "]
91367[label="variableDeclaratorId\n root "]
91368[label="classInstanceCreationExpression_lfno_primary\n newFile(folderPath) "]
101369[label="expressionName\n folderPath "]
61370[label="ifThenStatement\n if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath())); "]
71371[label="unaryExpressionNotPlusMinus\n !root.exists() "]
81372[label="methodInvocation_lfno_primary\n root.exists() "]
91373[label="typeName\n root "]
71374[label="throwStatement\n thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath())); "]
81375[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath())) "]
91376[label="methodInvocation_lfno_primary\n String.format(\"目录 %s 不存在\",root.getAbsolutePath()) "]
101377[label="typeName\n String "]
101378[label="argumentList\n \"目录 %s 不存在\",root.getAbsolutePath() "]
111379[label="literal\n \"目录 %s 不存在\" "]
111380[label="methodInvocation_lfno_primary\n root.getAbsolutePath() "]
121381[label="typeName\n root "]
61382[label="ifThenStatement\n if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath())); "]
71383[label="unaryExpressionNotPlusMinus\n !root.isDirectory() "]
81384[label="methodInvocation_lfno_primary\n root.isDirectory() "]
91385[label="typeName\n root "]
71386[label="throwStatement\n thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath())); "]
81387[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath())) "]
91388[label="methodInvocation_lfno_primary\n String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()) "]
101389[label="typeName\n String "]
101390[label="argumentList\n \"目录 %s 不是一个目录\",root.getAbsolutePath() "]
111391[label="literal\n \"目录 %s 不是一个目录\" "]
111392[label="methodInvocation_lfno_primary\n root.getAbsolutePath() "]
121393[label="typeName\n root "]
61394[label="ifThenStatement\n if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\"); "]
71395[label="conditionalOrExpression\n percentage>1.0||percentage<-1.0 "]
81396[label="relationalExpression\n percentage>1.0 "]
91397[label="expressionName\n percentage "]
91398[label="literal\n 1.0 "]
81399[label="relationalExpression\n percentage<-1.0 "]
91400[label="expressionName\n percentage "]
91401[label="unaryExpression\n -1.0 "]
101402[label="literal\n 1.0 "]
71403[label="throwStatement\n thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\"); "]
81404[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\") "]
91405[label="literal\n \"percentage 的绝对值必须介于[0, 1]之间\" "]
61406[label="localVariableDeclarationStatement\n File[]folders=root.listFiles(); "]
71407[label="localVariableDeclaration\n File[]folders=root.listFiles() "]
81408[label="unannArrayType\n File[] "]
91409[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
91410[label="dims\n [] "]
81411[label="variableDeclarator\n folders=root.listFiles() "]
91412[label="variableDeclaratorId\n folders "]
91413[label="methodInvocation_lfno_primary\n root.listFiles() "]
101414[label="typeName\n root "]
61415[label="ifThenStatement\n if(folders==null)returnnull; "]
71416[label="equalityExpression\n folders==null "]
81417[label="expressionName\n folders "]
81418[label="literal\n null "]
71419[label="returnStatement\n returnnull; "]
81420[label="literal\n null "]
61421[label="expressionStatement\n logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath); "]
71422[label="methodInvocation\n logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath) "]
81423[label="typeName\n logger "]
81424[label="argumentList\n \"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath "]
91425[label="literal\n \"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\" "]
91426[label="conditionalExpression\n testingDataSet?\"测试集\":\"训练集\" "]
101427[label="expressionName\n testingDataSet "]
101428[label="literal\n \"测试集\" "]
101429[label="literal\n \"训练集\" "]
91430[label="expressionName\n charsetName "]
91431[label="expressionName\n folderPath "]
61432[label="enhancedForStatement\n for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);} "]
71433[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
71434[label="variableDeclaratorId\n folder "]
71435[label="expressionName\n folders "]
71436[label="block\n {if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);} "]
81437[label="blockStatements\n if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b); "]
91438[label="ifThenStatement\n if(folder.isFile())continue; "]
101439[label="methodInvocation_lfno_primary\n folder.isFile() "]
111440[label="typeName\n folder "]
101441[label="continueStatement\n continue; "]
91442[label="localVariableDeclarationStatement\n File[]files=folder.listFiles(); "]
101443[label="localVariableDeclaration\n File[]files=folder.listFiles() "]
111444[label="unannArrayType\n File[] "]
121445[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
121446[label="dims\n [] "]
111447[label="variableDeclarator\n files=folder.listFiles() "]
121448[label="variableDeclaratorId\n files "]
121449[label="methodInvocation_lfno_primary\n folder.listFiles() "]
131450[label="typeName\n folder "]
91451[label="ifThenStatement\n if(files==null)continue; "]
101452[label="equalityExpression\n files==null "]
111453[label="expressionName\n files "]
111454[label="literal\n null "]
101455[label="continueStatement\n continue; "]
91456[label="localVariableDeclarationStatement\n Stringcategory=folder.getName(); "]
101457[label="localVariableDeclaration\n Stringcategory=folder.getName() "]
111458[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
111459[label="variableDeclarator\n category=folder.getName() "]
121460[label="variableDeclaratorId\n category "]
121461[label="methodInvocation_lfno_primary\n folder.getName() "]
131462[label="typeName\n folder "]
91463[label="expressionStatement\n logger.out(\"[%s]...\",category); "]
101464[label="methodInvocation\n logger.out(\"[%s]...\",category) "]
111465[label="typeName\n logger "]
111466[label="argumentList\n \"[%s]...\",category "]
121467[label="literal\n \"[%s]...\" "]
121468[label="expressionName\n category "]
91469[label="localVariableDeclarationStatement\n intb,e; "]
101470[label="localVariableDeclaration\n intb,e "]
111471[label="integralType\n int "]
111472[label="variableDeclaratorList\n b,e "]
121473[label="variableDeclaratorId\n b "]
121474[label="variableDeclaratorId\n e "]
91475[label="ifThenElseStatement\n if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;} "]
101476[label="relationalExpression\n percentage>0 "]
111477[label="expressionName\n percentage "]
111478[label="literal\n 0 "]
101479[label="block\n {b=0;e=(int)(files.length*percentage);} "]
111480[label="blockStatements\n b=0;e=(int)(files.length*percentage); "]
121481[label="expressionStatement\n b=0; "]
131482[label="assignment\n b=0 "]
141483[label="expressionName\n b "]
141484[label="assignmentOperator\n = "]
141485[label="literal\n 0 "]
121486[label="expressionStatement\n e=(int)(files.length*percentage); "]
131487[label="assignment\n e=(int)(files.length*percentage) "]
141488[label="expressionName\n e "]
141489[label="assignmentOperator\n = "]
141490[label="castExpression\n (int)(files.length*percentage) "]
151491[label="integralType\n int "]
151492[label="primaryNoNewArray_lfno_primary\n (files.length*percentage) "]
161493[label="multiplicativeExpression\n files.length*percentage "]
171494[label="expressionName\n files.length "]
181495[label="ambiguousName\n files "]
171496[label="expressionName\n percentage "]
101497[label="block\n {b=(int)(files.length*(1+percentage));e=files.length;} "]
111498[label="blockStatements\n b=(int)(files.length*(1+percentage));e=files.length; "]
121499[label="expressionStatement\n b=(int)(files.length*(1+percentage)); "]
131500[label="assignment\n b=(int)(files.length*(1+percentage)) "]
141501[label="expressionName\n b "]
141502[label="assignmentOperator\n = "]
141503[label="castExpression\n (int)(files.length*(1+percentage)) "]
151504[label="integralType\n int "]
151505[label="primaryNoNewArray_lfno_primary\n (files.length*(1+percentage)) "]
161506[label="multiplicativeExpression\n files.length*(1+percentage) "]
171507[label="expressionName\n files.length "]
181508[label="ambiguousName\n files "]
171509[label="primaryNoNewArray_lfno_primary\n (1+percentage) "]
181510[label="additiveExpression\n 1+percentage "]
191511[label="literal\n 1 "]
191512[label="expressionName\n percentage "]
121513[label="expressionStatement\n e=files.length; "]
131514[label="assignment\n e=files.length "]
141515[label="expressionName\n e "]
141516[label="assignmentOperator\n = "]
141517[label="expressionName\n files.length "]
151518[label="ambiguousName\n files "]
91519[label="localVariableDeclarationStatement\n intlogEvery=(int)Math.ceil((e-b)/10000f); "]
101520[label="localVariableDeclaration\n intlogEvery=(int)Math.ceil((e-b)/10000f) "]
111521[label="integralType\n int "]
111522[label="variableDeclarator\n logEvery=(int)Math.ceil((e-b)/10000f) "]
121523[label="variableDeclaratorId\n logEvery "]
121524[label="castExpression\n (int)Math.ceil((e-b)/10000f) "]
131525[label="integralType\n int "]
131526[label="methodInvocation_lfno_primary\n Math.ceil((e-b)/10000f) "]
141527[label="typeName\n Math "]
141528[label="multiplicativeExpression\n (e-b)/10000f "]
151529[label="primaryNoNewArray_lfno_primary\n (e-b) "]
161530[label="additiveExpression\n e-b "]
171531[label="expressionName\n e "]
171532[label="expressionName\n b "]
151533[label="literal\n 10000f "]
91534[label="basicForStatement\n for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}} "]
101535[label="localVariableDeclaration\n inti=b "]
111536[label="integralType\n int "]
111537[label="variableDeclarator\n i=b "]
121538[label="variableDeclaratorId\n i "]
121539[label="expressionName\n b "]
101540[label="relationalExpression\n i<e "]
111541[label="expressionName\n i "]
111542[label="expressionName\n e "]
101543[label="postIncrementExpression\n i++ "]
111544[label="expressionName\n i "]
101545[label="block\n {add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}} "]
111546[label="blockStatements\n add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));} "]
121547[label="expressionStatement\n add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName)); "]
131548[label="methodInvocation\n add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName)) "]
141549[label="methodName\n add "]
141550[label="argumentList\n folder.getName(),TextProcessUtility.readTxt(files[i],charsetName) "]
151551[label="methodInvocation_lfno_primary\n folder.getName() "]
161552[label="typeName\n folder "]
151553[label="methodInvocation_lfno_primary\n TextProcessUtility.readTxt(files[i],charsetName) "]
161554[label="typeName\n TextProcessUtility "]
161555[label="argumentList\n files[i],charsetName "]
171556[label="arrayAccess_lfno_primary\n files[i] "]
181557[label="expressionName\n files "]
181558[label="expressionName\n i "]
171559[label="expressionName\n charsetName "]
121560[label="ifThenStatement\n if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));} "]
131561[label="equalityExpression\n i%logEvery==0 "]
141562[label="multiplicativeExpression\n i%logEvery "]
151563[label="expressionName\n i "]
151564[label="expressionName\n logEvery "]
141565[label="literal\n 0 "]
131566[label="block\n {logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));} "]
141567[label="expressionStatement\n logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b)); "]
151568[label="methodInvocation\n logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b)) "]
161569[label="typeName\n logger "]
161570[label="argumentList\n \"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b) "]
171571[label="literal\n \"%c[%s]...%.2f%%\" "]
171572[label="literal\n 13 "]
171573[label="expressionName\n category "]
171574[label="methodInvocation_lfno_primary\n MathUtility.percentage(i-b+1,e-b) "]
181575[label="typeName\n MathUtility "]
181576[label="argumentList\n i-b+1,e-b "]
191577[label="additiveExpression\n i-b+1 "]
201578[label="additiveExpression\n i-b "]
211579[label="expressionName\n i "]
211580[label="expressionName\n b "]
201581[label="literal\n 1 "]
191582[label="additiveExpression\n e-b "]
201583[label="expressionName\n e "]
201584[label="expressionName\n b "]
91585[label="expressionStatement\n logger.out(\" %d 篇文档\n\",e-b); "]
101586[label="methodInvocation\n logger.out(\" %d 篇文档\n\",e-b) "]
111587[label="typeName\n logger "]
111588[label="argumentList\n \" %d 篇文档\n\",e-b "]
121589[label="literal\n \" %d 篇文档\n\" "]
121590[label="additiveExpression\n e-b "]
131591[label="expressionName\n e "]
131592[label="expressionName\n b "]
61593[label="expressionStatement\n logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size()); "]
71594[label="methodInvocation\n logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size()) "]
81595[label="typeName\n logger "]
81596[label="argumentList\n \" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size() "]
91597[label="literal\n \" 加载了 %d 个类目,共 %d 篇文档\n\" "]
91598[label="primary\n getCatalog().size() "]
101599[label="methodInvocation_lfno_primary\n getCatalog() "]
111600[label="methodName\n getCatalog "]
101601[label="methodInvocation_lf_primary\n .size() "]
91602[label="methodInvocation_lfno_primary\n size() "]
101603[label="methodName\n size "]
61604[label="returnStatement\n returnthis; "]
71605[label="primaryNoNewArray_lfno_primary\n this "]
31606[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;} "]
41607[label="markerAnnotation\n @Override "]
51608[label="typeName\n Override "]
41609[label="methodModifier\n public "]
41610[label="methodHeader\n IDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException "]
51611[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51612[label="methodDeclarator\n load(StringfolderPath,doublerate) "]
61613[label="formalParameterList\n StringfolderPath,doublerate "]
71614[label="formalParameter\n StringfolderPath "]
81615[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81616[label="variableDeclaratorId\n folderPath "]
71617[label="formalParameter\n doublerate "]
81618[label="floatingPointType\n double "]
81619[label="variableDeclaratorId\n rate "]
51620[label="throws_\n throwsIllegalArgumentException,IOException "]
61621[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71622[label="classType\n IllegalArgumentException "]
71623[label="classType\n IOException "]
41624[label="block\n {returnnull;} "]
51625[label="returnStatement\n returnnull; "]
61626[label="literal\n null "]
31627[label="methodDeclaration\n @OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;} "]
41628[label="markerAnnotation\n @Override "]
51629[label="typeName\n Override "]
41630[label="methodModifier\n public "]
41631[label="methodHeader\n IDataSetadd(Map<String,String[]>testingDataSet) "]
51632[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51633[label="methodDeclarator\n add(Map<String,String[]>testingDataSet) "]
61634[label="formalParameter\n Map<String,String[]>testingDataSet "]
71635[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String[]> "]
81636[label="typeArguments\n <String,String[]> "]
91637[label="typeArgumentList\n String,String[] "]
101638[label="classType_lfno_classOrInterfaceType\n String "]
101639[label="arrayType\n String[] "]
111640[label="classType_lfno_classOrInterfaceType\n String "]
111641[label="dims\n [] "]
71642[label="variableDeclaratorId\n testingDataSet "]
41643[label="block\n {for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;} "]
51644[label="blockStatements\n for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis; "]
61645[label="enhancedForStatement\n for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}} "]
71646[label="unannClassOrInterfaceType\n Map.Entry<String,String[]> "]
81647[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
81648[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String[]> "]
91649[label="typeArguments\n <String,String[]> "]
101650[label="typeArgumentList\n String,String[] "]
111651[label="classType_lfno_classOrInterfaceType\n String "]
111652[label="arrayType\n String[] "]
121653[label="classType_lfno_classOrInterfaceType\n String "]
121654[label="dims\n [] "]
71655[label="variableDeclaratorId\n entry "]
71656[label="methodInvocation_lfno_primary\n testingDataSet.entrySet() "]
81657[label="typeName\n testingDataSet "]
71658[label="block\n {for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}} "]
81659[label="enhancedForStatement\n for(Stringdocument:entry.getValue()){add(entry.getKey(),document);} "]
91660[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91661[label="variableDeclaratorId\n document "]
91662[label="methodInvocation_lfno_primary\n entry.getValue() "]
101663[label="typeName\n entry "]
91664[label="block\n {add(entry.getKey(),document);} "]
101665[label="expressionStatement\n add(entry.getKey(),document); "]
111666[label="methodInvocation\n add(entry.getKey(),document) "]
121667[label="methodName\n add "]
121668[label="argumentList\n entry.getKey(),document "]
131669[label="methodInvocation_lfno_primary\n entry.getKey() "]
141670[label="typeName\n entry "]
131671[label="expressionName\n document "]
61672[label="returnStatement\n returnthis; "]
71673[label="primaryNoNewArray_lfno_primary\n this "]
01674[label="compilationUnit\n packagecom.hankcs.hanlp.dependency;importcom.hankcs.hanlp.HanLP;importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLSentence;importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLWord;importcom.hankcs.hanlp.corpus.io.IOUtil;importcom.hankcs.hanlp.seg.Segment;importcom.hankcs.hanlp.tokenizer.NLPTokenizer;importcom.hankcs.hanlp.utility.GlobalObjectPool;importjava.util.Map;importjava.util.TreeMap;publicabstractclassAbstractDependencyParserimplementsIDependencyParser{privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true);privateMap<String,String>deprelTranslater;privatebooleanenableDeprelTranslater;@OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;}@OverridepublicSegmentgetSegment(){returnsegment;}@OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;}@OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;}@OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;}publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;}@OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;}}<EOF> "]
11675[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency; "]
21676[label="packageName\n com.hankcs.hanlp.dependency "]
31677[label="packageName\n com.hankcs.hanlp "]
41678[label="packageName\n com.hankcs "]
51679[label="packageName\n com "]
11680[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.HanLP; "]
21681[label="typeName\n com.hankcs.hanlp.HanLP "]
31682[label="packageOrTypeName\n com.hankcs.hanlp "]
41683[label="packageOrTypeName\n com.hankcs "]
51684[label="packageOrTypeName\n com "]
11685[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLSentence; "]
21686[label="typeName\n com.hankcs.hanlp.corpus.dependency.CoNll.CoNLLSentence "]
31687[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency.CoNll "]
41688[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency "]
51689[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
61690[label="packageOrTypeName\n com.hankcs.hanlp "]
71691[label="packageOrTypeName\n com.hankcs "]
81692[label="packageOrTypeName\n com "]
11693[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLWord; "]
21694[label="typeName\n com.hankcs.hanlp.corpus.dependency.CoNll.CoNLLWord "]
31695[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency.CoNll "]
41696[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency "]
51697[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
61698[label="packageOrTypeName\n com.hankcs.hanlp "]
71699[label="packageOrTypeName\n com.hankcs "]
81700[label="packageOrTypeName\n com "]
11701[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
21702[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
31703[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
41704[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
51705[label="packageOrTypeName\n com.hankcs.hanlp "]
61706[label="packageOrTypeName\n com.hankcs "]
71707[label="packageOrTypeName\n com "]
11708[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.Segment; "]
21709[label="typeName\n com.hankcs.hanlp.seg.Segment "]
31710[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
41711[label="packageOrTypeName\n com.hankcs.hanlp "]
51712[label="packageOrTypeName\n com.hankcs "]
61713[label="packageOrTypeName\n com "]
11714[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.tokenizer.NLPTokenizer; "]
21715[label="typeName\n com.hankcs.hanlp.tokenizer.NLPTokenizer "]
31716[label="packageOrTypeName\n com.hankcs.hanlp.tokenizer "]
41717[label="packageOrTypeName\n com.hankcs.hanlp "]
51718[label="packageOrTypeName\n com.hankcs "]
61719[label="packageOrTypeName\n com "]
11720[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.GlobalObjectPool; "]
21721[label="typeName\n com.hankcs.hanlp.utility.GlobalObjectPool "]
31722[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
41723[label="packageOrTypeName\n com.hankcs.hanlp "]
51724[label="packageOrTypeName\n com.hankcs "]
61725[label="packageOrTypeName\n com "]
11726[label="singleTypeImportDeclaration\n importjava.util.Map; "]
21727[label="typeName\n java.util.Map "]
31728[label="packageOrTypeName\n java.util "]
41729[label="packageOrTypeName\n java "]
11730[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
21731[label="typeName\n java.util.TreeMap "]
31732[label="packageOrTypeName\n java.util "]
41733[label="packageOrTypeName\n java "]
11734[label="normalClassDeclaration\n publicabstractclassAbstractDependencyParserimplementsIDependencyParser{privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true);privateMap<String,String>deprelTranslater;privatebooleanenableDeprelTranslater;@OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;}@OverridepublicSegmentgetSegment(){returnsegment;}@OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;}@OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;}@OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;}publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;}@OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;}} "]
21735[label="classModifier\n public "]
21736[label="classModifier\n abstract "]
21737[label="superinterfaces\n implementsIDependencyParser "]
31738[label="classType\n IDependencyParser "]
21739[label="classBody\n {privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true);privateMap<String,String>deprelTranslater;privatebooleanenableDeprelTranslater;@OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;}@OverridepublicSegmentgetSegment(){returnsegment;}@OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;}@OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;}@OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;}publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;}@OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;}} "]
31740[label="fieldDeclaration\n privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true); "]
41741[label="fieldModifier\n private "]
41742[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
41743[label="variableDeclarator\n segment=HanLP.newSegment().enablePartOfSpeechTagging(true) "]
51744[label="variableDeclaratorId\n segment "]
51745[label="primary\n HanLP.newSegment().enablePartOfSpeechTagging(true) "]
61746[label="methodInvocation_lfno_primary\n HanLP.newSegment() "]
71747[label="typeName\n HanLP "]
61748[label="methodInvocation_lf_primary\n .enablePartOfSpeechTagging(true) "]
71749[label="literal\n true "]
31750[label="fieldDeclaration\n privateMap<String,String>deprelTranslater; "]
41751[label="fieldModifier\n private "]
41752[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
51753[label="typeArguments\n <String,String> "]
61754[label="typeArgumentList\n String,String "]
71755[label="classType_lfno_classOrInterfaceType\n String "]
71756[label="classType_lfno_classOrInterfaceType\n String "]
41757[label="variableDeclaratorId\n deprelTranslater "]
31758[label="fieldDeclaration\n privatebooleanenableDeprelTranslater; "]
41759[label="fieldModifier\n private "]
41760[label="unannPrimitiveType\n boolean "]
41761[label="variableDeclaratorId\n enableDeprelTranslater "]
31762[label="methodDeclaration\n @OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;} "]
41763[label="markerAnnotation\n @Override "]
51764[label="typeName\n Override "]
41765[label="methodModifier\n public "]
41766[label="methodHeader\n CoNLLSentenceparse(Stringsentence) "]
51767[label="unannClassType_lfno_unannClassOrInterfaceType\n CoNLLSentence "]
51768[label="methodDeclarator\n parse(Stringsentence) "]
61769[label="formalParameter\n Stringsentence "]
71770[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
71771[label="variableDeclaratorId\n sentence "]
41772[label="block\n {assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;} "]
51773[label="blockStatements\n assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput; "]
61774[label="assertStatement\n assertsentence!=null; "]
71775[label="equalityExpression\n sentence!=null "]
81776[label="expressionName\n sentence "]
81777[label="literal\n null "]
61778[label="localVariableDeclarationStatement\n CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray())); "]
71779[label="localVariableDeclaration\n CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray())) "]
81780[label="unannClassType_lfno_unannClassOrInterfaceType\n CoNLLSentence "]
81781[label="variableDeclarator\n output=parse(segment.seg(sentence.toCharArray())) "]
91782[label="variableDeclaratorId\n output "]
91783[label="methodInvocation_lfno_primary\n parse(segment.seg(sentence.toCharArray())) "]
101784[label="methodName\n parse "]
101785[label="methodInvocation_lfno_primary\n segment.seg(sentence.toCharArray()) "]
111786[label="typeName\n segment "]
111787[label="methodInvocation_lfno_primary\n sentence.toCharArray() "]
121788[label="typeName\n sentence "]
61789[label="ifThenStatement\n if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}} "]
71790[label="conditionalAndExpression\n enableDeprelTranslater&&deprelTranslater!=null "]
81791[label="expressionName\n enableDeprelTranslater "]
81792[label="equalityExpression\n deprelTranslater!=null "]
91793[label="expressionName\n deprelTranslater "]
91794[label="literal\n null "]
71795[label="block\n {for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}} "]
81796[label="enhancedForStatement\n for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;} "]
91797[label="unannClassType_lfno_unannClassOrInterfaceType\n CoNLLWord "]
91798[label="variableDeclaratorId\n word "]
91799[label="expressionName\n output "]
91800[label="block\n {StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;} "]
101801[label="blockStatements\n StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel; "]
111802[label="localVariableDeclarationStatement\n StringtranslatedDeprel=deprelTranslater.get(word.DEPREL); "]
121803[label="localVariableDeclaration\n StringtranslatedDeprel=deprelTranslater.get(word.DEPREL) "]
131804[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
131805[label="variableDeclarator\n translatedDeprel=deprelTranslater.get(word.DEPREL) "]
141806[label="variableDeclaratorId\n translatedDeprel "]
141807[label="methodInvocation_lfno_primary\n deprelTranslater.get(word.DEPREL) "]
151808[label="typeName\n deprelTranslater "]
151809[label="expressionName\n word.DEPREL "]
161810[label="ambiguousName\n word "]
111811[label="expressionStatement\n word.DEPREL=translatedDeprel; "]
121812[label="assignment\n word.DEPREL=translatedDeprel "]
131813[label="expressionName\n word.DEPREL "]
141814[label="ambiguousName\n word "]
131815[label="assignmentOperator\n = "]
131816[label="expressionName\n translatedDeprel "]
61817[label="returnStatement\n returnoutput; "]
71818[label="expressionName\n output "]
31819[label="methodDeclaration\n @OverridepublicSegmentgetSegment(){returnsegment;} "]
41820[label="markerAnnotation\n @Override "]
51821[label="typeName\n Override "]
41822[label="methodModifier\n public "]
41823[label="methodHeader\n SegmentgetSegment() "]
51824[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
51825[label="methodDeclarator\n getSegment() "]
41826[label="block\n {returnsegment;} "]
51827[label="returnStatement\n returnsegment; "]
61828[label="expressionName\n segment "]
31829[label="methodDeclaration\n @OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;} "]
41830[label="markerAnnotation\n @Override "]
51831[label="typeName\n Override "]
41832[label="methodModifier\n public "]
41833[label="methodHeader\n IDependencyParsersetSegment(Segmentsegment) "]
51834[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51835[label="methodDeclarator\n setSegment(Segmentsegment) "]
61836[label="formalParameter\n Segmentsegment "]
71837[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
71838[label="variableDeclaratorId\n segment "]
41839[label="block\n {this.segment=segment;returnthis;} "]
51840[label="blockStatements\n this.segment=segment;returnthis; "]
61841[label="expressionStatement\n this.segment=segment; "]
71842[label="assignment\n this.segment=segment "]
81843[label="fieldAccess\n this.segment "]
91844[label="primaryNoNewArray_lfno_primary\n this "]
81845[label="assignmentOperator\n = "]
81846[label="expressionName\n segment "]
61847[label="returnStatement\n returnthis; "]
71848[label="primaryNoNewArray_lfno_primary\n this "]
31849[label="methodDeclaration\n @OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;} "]
41850[label="markerAnnotation\n @Override "]
51851[label="typeName\n Override "]
41852[label="methodModifier\n public "]
41853[label="methodHeader\n Map<String,String>getDeprelTranslator() "]
51854[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
61855[label="typeArguments\n <String,String> "]
71856[label="typeArgumentList\n String,String "]
81857[label="classType_lfno_classOrInterfaceType\n String "]
81858[label="classType_lfno_classOrInterfaceType\n String "]
51859[label="methodDeclarator\n getDeprelTranslator() "]
41860[label="block\n {returndeprelTranslater;} "]
51861[label="returnStatement\n returndeprelTranslater; "]
61862[label="expressionName\n deprelTranslater "]
31863[label="methodDeclaration\n @OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;} "]
41864[label="markerAnnotation\n @Override "]
51865[label="typeName\n Override "]
41866[label="methodModifier\n public "]
41867[label="methodHeader\n IDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator) "]
51868[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51869[label="methodDeclarator\n setDeprelTranslator(Map<String,String>deprelTranslator) "]
61870[label="formalParameter\n Map<String,String>deprelTranslator "]
71871[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
81872[label="typeArguments\n <String,String> "]
91873[label="typeArgumentList\n String,String "]
101874[label="classType_lfno_classOrInterfaceType\n String "]
101875[label="classType_lfno_classOrInterfaceType\n String "]
71876[label="variableDeclaratorId\n deprelTranslator "]
41877[label="block\n {this.deprelTranslater=deprelTranslator;returnthis;} "]
51878[label="blockStatements\n this.deprelTranslater=deprelTranslator;returnthis; "]
61879[label="expressionStatement\n this.deprelTranslater=deprelTranslator; "]
71880[label="assignment\n this.deprelTranslater=deprelTranslator "]
81881[label="fieldAccess\n this.deprelTranslater "]
91882[label="primaryNoNewArray_lfno_primary\n this "]
81883[label="assignmentOperator\n = "]
81884[label="expressionName\n deprelTranslator "]
61885[label="returnStatement\n returnthis; "]
71886[label="primaryNoNewArray_lfno_primary\n this "]
31887[label="methodDeclaration\n publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;} "]
41888[label="methodModifier\n public "]
41889[label="methodHeader\n IDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath) "]
51890[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51891[label="methodDeclarator\n setDeprelTranslater(StringdeprelTranslatorPath) "]
61892[label="formalParameter\n StringdeprelTranslatorPath "]
71893[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
71894[label="variableDeclaratorId\n deprelTranslatorPath "]
41895[label="block\n {deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;} "]
51896[label="blockStatements\n deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis; "]
61897[label="expressionStatement\n deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath); "]
71898[label="assignment\n deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath) "]
81899[label="expressionName\n deprelTranslater "]
81900[label="assignmentOperator\n = "]
81901[label="methodInvocation_lfno_primary\n GlobalObjectPool.get(deprelTranslatorPath) "]
91902[label="typeName\n GlobalObjectPool "]
91903[label="expressionName\n deprelTranslatorPath "]
61904[label="ifThenStatement\n if(deprelTranslater!=null)returnthis; "]
71905[label="equalityExpression\n deprelTranslater!=null "]
81906[label="expressionName\n deprelTranslater "]
81907[label="literal\n null "]
71908[label="returnStatement\n returnthis; "]
81909[label="primaryNoNewArray_lfno_primary\n this "]
61910[label="localVariableDeclarationStatement\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath); "]
71911[label="localVariableDeclaration\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath) "]
81912[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
91913[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
91914[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
81915[label="variableDeclarator\n iterator=newIOUtil.LineIterator(deprelTranslatorPath) "]
91916[label="variableDeclaratorId\n iterator "]
91917[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(deprelTranslatorPath) "]
101918[label="expressionName\n deprelTranslatorPath "]
61919[label="expressionStatement\n deprelTranslater=newTreeMap<String,String>(); "]
71920[label="assignment\n deprelTranslater=newTreeMap<String,String>() "]
81921[label="expressionName\n deprelTranslater "]
81922[label="assignmentOperator\n = "]
81923[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
91924[label="typeArguments\n <String,String> "]
101925[label="typeArgumentList\n String,String "]
111926[label="classType_lfno_classOrInterfaceType\n String "]
111927[label="classType_lfno_classOrInterfaceType\n String "]
61928[label="whileStatement\n while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);} "]
71929[label="methodInvocation_lfno_primary\n iterator.hasNext() "]
81930[label="typeName\n iterator "]
71931[label="block\n {String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);} "]
81932[label="blockStatements\n String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]); "]
91933[label="localVariableDeclarationStatement\n String[]args=iterator.next().split(\"\\s\"); "]
101934[label="localVariableDeclaration\n String[]args=iterator.next().split(\"\\s\") "]
111935[label="unannArrayType\n String[] "]
121936[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
121937[label="dims\n [] "]
111938[label="variableDeclarator\n args=iterator.next().split(\"\\s\") "]
121939[label="variableDeclaratorId\n args "]
121940[label="primary\n iterator.next().split(\"\\s\") "]
131941[label="methodInvocation_lfno_primary\n iterator.next() "]
141942[label="typeName\n iterator "]
131943[label="methodInvocation_lf_primary\n .split(\"\\s\") "]
141944[label="literal\n \"\\s\" "]
91945[label="expressionStatement\n deprelTranslater.put(args[0],args[1]); "]
101946[label="methodInvocation\n deprelTranslater.put(args[0],args[1]) "]
111947[label="typeName\n deprelTranslater "]
111948[label="argumentList\n args[0],args[1] "]
121949[label="arrayAccess_lfno_primary\n args[0] "]
131950[label="expressionName\n args "]
131951[label="literal\n 0 "]
121952[label="arrayAccess_lfno_primary\n args[1] "]
131953[label="expressionName\n args "]
131954[label="literal\n 1 "]
61955[label="ifThenStatement\n if(deprelTranslater.size()==0){deprelTranslater=null;} "]
71956[label="equalityExpression\n deprelTranslater.size()==0 "]
81957[label="methodInvocation_lfno_primary\n deprelTranslater.size() "]
91958[label="typeName\n deprelTranslater "]
81959[label="literal\n 0 "]
71960[label="block\n {deprelTranslater=null;} "]
81961[label="expressionStatement\n deprelTranslater=null; "]
91962[label="assignment\n deprelTranslater=null "]
101963[label="expressionName\n deprelTranslater "]
101964[label="assignmentOperator\n = "]
101965[label="literal\n null "]
61966[label="expressionStatement\n GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater); "]
71967[label="methodInvocation\n GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater) "]
81968[label="typeName\n GlobalObjectPool "]
81969[label="argumentList\n deprelTranslatorPath,deprelTranslater "]
91970[label="expressionName\n deprelTranslatorPath "]
91971[label="expressionName\n deprelTranslater "]
61972[label="returnStatement\n returnthis; "]
71973[label="primaryNoNewArray_lfno_primary\n this "]
31974[label="methodDeclaration\n @OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;} "]
41975[label="markerAnnotation\n @Override "]
51976[label="typeName\n Override "]
41977[label="methodModifier\n public "]
41978[label="methodHeader\n IDependencyParserenableDeprelTranslator(booleanenable) "]
51979[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51980[label="methodDeclarator\n enableDeprelTranslator(booleanenable) "]
61981[label="formalParameter\n booleanenable "]
71982[label="unannPrimitiveType\n boolean "]
71983[label="variableDeclaratorId\n enable "]
41984[label="block\n {enableDeprelTranslater=enable;returnthis;} "]
51985[label="blockStatements\n enableDeprelTranslater=enable;returnthis; "]
61986[label="expressionStatement\n enableDeprelTranslater=enable; "]
71987[label="assignment\n enableDeprelTranslater=enable "]
81988[label="expressionName\n enableDeprelTranslater "]
81989[label="assignmentOperator\n = "]
81990[label="expressionName\n enable "]
61991[label="returnStatement\n returnthis; "]
71992[label="primaryNoNewArray_lfno_primary\n this "]
01993[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;publicclassAbstractInexactActionimplementsComparable<AbstractInexactAction>{intseed;publicAbstractInexactAction(){}AbstractInexactAction(intname,intrel){seed=rel<<6|name;}publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);}@Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;}publicintname(){return(seed&0x3f);}publicintrel(){return(seed>>6);}}<EOF> "]
11994[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
21995[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
31996[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
41997[label="packageName\n com.hankcs.hanlp.dependency "]
51998[label="packageName\n com.hankcs.hanlp "]
61999[label="packageName\n com.hankcs "]
72000[label="packageName\n com "]
12001[label="normalClassDeclaration\n publicclassAbstractInexactActionimplementsComparable<AbstractInexactAction>{intseed;publicAbstractInexactAction(){}AbstractInexactAction(intname,intrel){seed=rel<<6|name;}publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);}@Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;}publicintname(){return(seed&0x3f);}publicintrel(){return(seed>>6);}} "]
22002[label="classModifier\n public "]
22003[label="superinterfaces\n implementsComparable<AbstractInexactAction> "]
32004[label="classType\n Comparable<AbstractInexactAction> "]
42005[label="typeArguments\n <AbstractInexactAction> "]
52006[label="classType_lfno_classOrInterfaceType\n AbstractInexactAction "]
22007[label="classBody\n {intseed;publicAbstractInexactAction(){}AbstractInexactAction(intname,intrel){seed=rel<<6|name;}publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);}@Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;}publicintname(){return(seed&0x3f);}publicintrel(){return(seed>>6);}} "]
32008[label="fieldDeclaration\n intseed; "]
42009[label="integralType\n int "]
42010[label="variableDeclaratorId\n seed "]
32011[label="constructorDeclaration\n publicAbstractInexactAction(){} "]
42012[label="constructorModifier\n public "]
42013[label="constructorDeclarator\n AbstractInexactAction() "]
52014[label="simpleTypeName\n AbstractInexactAction "]
42015[label="constructorBody\n {} "]
32016[label="constructorDeclaration\n AbstractInexactAction(intname,intrel){seed=rel<<6|name;} "]
42017[label="constructorDeclarator\n AbstractInexactAction(intname,intrel) "]
52018[label="simpleTypeName\n AbstractInexactAction "]
52019[label="formalParameterList\n intname,intrel "]
62020[label="formalParameter\n intname "]
72021[label="integralType\n int "]
72022[label="variableDeclaratorId\n name "]
62023[label="formalParameter\n intrel "]
72024[label="integralType\n int "]
72025[label="variableDeclaratorId\n rel "]
42026[label="constructorBody\n {seed=rel<<6|name;} "]
52027[label="expressionStatement\n seed=rel<<6|name; "]
62028[label="assignment\n seed=rel<<6|name "]
72029[label="expressionName\n seed "]
72030[label="assignmentOperator\n = "]
72031[label="inclusiveOrExpression\n rel<<6|name "]
82032[label="shiftExpression\n rel<<6 "]
92033[label="expressionName\n rel "]
92034[label="literal\n 6 "]
82035[label="expressionName\n name "]
32036[label="methodDeclaration\n publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);} "]
42037[label="methodModifier\n public "]
42038[label="methodHeader\n intcompareTo(AbstractInexactActiono) "]
52039[label="integralType\n int "]
52040[label="methodDeclarator\n compareTo(AbstractInexactActiono) "]
62041[label="formalParameter\n AbstractInexactActiono "]
72042[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractInexactAction "]
72043[label="variableDeclaratorId\n o "]
42044[label="block\n {returnnewInteger(seed).compareTo(o.seed);} "]
52045[label="returnStatement\n returnnewInteger(seed).compareTo(o.seed); "]
62046[label="primary\n newInteger(seed).compareTo(o.seed) "]
72047[label="classInstanceCreationExpression_lfno_primary\n newInteger(seed) "]
82048[label="expressionName\n seed "]
72049[label="methodInvocation_lf_primary\n .compareTo(o.seed) "]
82050[label="expressionName\n o.seed "]
92051[label="ambiguousName\n o "]
32052[label="methodDeclaration\n @Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;} "]
42053[label="markerAnnotation\n @Override "]
52054[label="typeName\n Override "]
42055[label="methodModifier\n public "]
42056[label="methodHeader\n booleanequals(Objectobj) "]
52057[label="unannPrimitiveType\n boolean "]
52058[label="methodDeclarator\n equals(Objectobj) "]
62059[label="formalParameter\n Objectobj "]
72060[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
72061[label="variableDeclaratorId\n obj "]
42062[label="block\n {if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;} "]
52063[label="blockStatements\n if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed; "]
62064[label="ifThenStatement\n if(!(objinstanceofAbstractInexactAction))returnfalse; "]
72065[label="unaryExpressionNotPlusMinus\n !(objinstanceofAbstractInexactAction) "]
82066[label="primaryNoNewArray_lfno_primary\n (objinstanceofAbstractInexactAction) "]
92067[label="relationalExpression\n objinstanceofAbstractInexactAction "]
102068[label="expressionName\n obj "]
102069[label="classType_lfno_classOrInterfaceType\n AbstractInexactAction "]
72070[label="returnStatement\n returnfalse; "]
82071[label="literal\n false "]
62072[label="localVariableDeclarationStatement\n AbstractInexactActiono=(AbstractInexactAction)obj; "]
72073[label="localVariableDeclaration\n AbstractInexactActiono=(AbstractInexactAction)obj "]
82074[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractInexactAction "]
82075[label="variableDeclarator\n o=(AbstractInexactAction)obj "]
92076[label="variableDeclaratorId\n o "]
92077[label="castExpression\n (AbstractInexactAction)obj "]
102078[label="classType_lfno_classOrInterfaceType\n AbstractInexactAction "]
102079[label="expressionName\n obj "]
62080[label="returnStatement\n returnseed==o.seed; "]
72081[label="equalityExpression\n seed==o.seed "]
82082[label="expressionName\n seed "]
82083[label="expressionName\n o.seed "]
92084[label="ambiguousName\n o "]
32085[label="methodDeclaration\n publicintname(){return(seed&0x3f);} "]
42086[label="methodModifier\n public "]
42087[label="methodHeader\n intname() "]
52088[label="integralType\n int "]
52089[label="methodDeclarator\n name() "]
42090[label="block\n {return(seed&0x3f);} "]
52091[label="returnStatement\n return(seed&0x3f); "]
62092[label="primaryNoNewArray_lfno_primary\n (seed&0x3f) "]
72093[label="andExpression\n seed&0x3f "]
82094[label="expressionName\n seed "]
82095[label="literal\n 0x3f "]
32096[label="methodDeclaration\n publicintrel(){return(seed>>6);} "]
42097[label="methodModifier\n public "]
42098[label="methodHeader\n intrel() "]
52099[label="integralType\n int "]
52100[label="methodDeclarator\n rel() "]
42101[label="block\n {return(seed>>6);} "]
52102[label="returnStatement\n return(seed>>6); "]
62103[label="primaryNoNewArray_lfno_primary\n (seed>>6) "]
72104[label="shiftExpression\n seed>>6 "]
82105[label="expressionName\n seed "]
82106[label="literal\n 6 "]
-10->01
01->12
12->23
23->34
34->45
45->56
56->67
67->78
01->19
19->210
19->211
211->312
19->213
213->314
314->415
415->516
19->217
217->318
318->419
318->420
420->521
318->422
217->323
323->424
424->525
323->426
323->427
427->528
427->529
323->430
430->531
531->632
-10->033
033->134
134->235
235->336
336->437
437->538
538->639
639->740
033->141
141->242
141->243
243->344
141->245
245->346
346->447
447->548
447->549
346->450
245->351
351->452
351->453
245->354
354->455
354->456
456->557
456->558
558->659
659->760
659->761
558->662
354->463
463->564
564->665
665->766
766->867
665->768
665->769
245->370
370->471
370->472
472->573
472->574
370->475
475->576
576->677
677->778
677->779
779->880
779->881
245->382
382->483
382->484
484->585
382->486
245->387
387->488
387->489
489->590
489->591
591->692
692->793
793->894
793->895
692->796
387->497
497->598
598->699
699->7100
7100->8101
8101->9102
7100->8103
7100->8104
598->6105
6105->7106
-10->0107
0107->1108
1108->2109
2109->3110
3110->4111
4111->5112
5112->6113
0107->1114
1114->2115
2115->3116
3116->4117
4117->5118
5118->6119
6119->7120
0107->1121
1121->2122
2122->3123
3123->4124
4124->5125
5125->6126
6126->7127
0107->1128
1128->2129
2129->3130
3130->4131
4131->5132
5132->6133
6133->7134
0107->1135
1135->2136
2136->3137
3137->4138
4138->5139
5139->6140
6140->7141
0107->1142
1142->2143
2143->3144
3144->4145
4145->5146
5146->6147
6147->7148
0107->1149
1149->2150
2150->3151
3151->4152
4152->5153
5153->6154
6154->7155
0107->1156
1156->2157
2157->3158
3158->4159
0107->1160
1160->2161
2161->3162
3162->4163
0107->1164
1164->2165
2165->3166
3166->4167
0107->1168
1168->2169
2169->3170
3170->4171
4171->5172
5172->6173
6173->7174
0107->1175
1175->2176
1175->2177
1175->2178
2178->3179
1175->2180
2180->3181
3181->4182
4182->5183
3181->4184
3181->4185
4185->5186
4185->5187
5187->6188
6188->7189
6188->7190
3181->4191
4191->5192
5192->6193
2180->3194
3194->4195
3194->4196
4196->5197
4196->5198
2180->3199
3199->4200
4200->5201
3199->4202
3199->4203
4203->5204
4203->5205
5205->6206
6206->7207
6206->7208
4203->5209
5209->6210
6210->7211
6210->7212
3199->4213
4213->5214
5214->6215
6215->7216
7216->8217
8217->9218
9218->10219
10219->11220
10219->11221
7216->8222
8222->9223
8222->9224
9224->10225
9224->10226
5214->6227
6227->7228
7228->8229
7228->8230
2180->3231
3231->4232
4232->5233
3231->4234
3231->4235
4235->5236
4235->5237
5237->6238
6238->7239
6238->7240
4235->5241
5241->6242
6242->7243
6242->7244
3231->4245
4245->5246
5246->6247
6247->7248
7248->8249
8249->9250
9250->10251
10251->11252
10251->11253
7248->8254
8254->9255
8254->9256
9256->10257
9256->10258
5246->6259
6259->7260
7260->8261
7260->8262
2180->3263
3263->4264
4264->5265
3263->4266
3263->4267
4267->5268
4267->5269
5269->6270
6270->7271
7271->8272
7271->8273
6270->7274
7274->8275
7274->8276
4267->5277
5277->6278
3263->4279
4279->5280
5280->6281
6281->7282
7282->8283
7282->8284
8284->9285
8284->9286
5280->6287
6287->7288
7288->8289
7288->8290
8290->9291
8290->9292
5280->6293
6293->7294
7294->8295
7294->8296
2180->3297
3297->4298
4298->5299
3297->4300
3297->4301
4301->5302
4301->5303
5303->6304
6304->7305
7305->8306
8306->9307
9307->10308
9307->10309
10309->11310
10309->11311
6304->7312
4301->5313
5313->6314
3297->4315
4315->5316
5316->6317
6317->7318
7318->8319
7318->8320
8320->9321
8320->9322
5316->6323
6323->7324
7324->8325
7324->8326
5316->6327
6327->7328
7328->8329
7328->8330
8330->9331
8330->9332
9332->10333
5316->6334
6334->7335
7335->8336
7335->8337
8337->9338
8337->9339
5316->6340
6340->7341
7341->8342
7341->8343
8343->9344
9344->10345
10345->11346
10345->11347
11347->12348
11347->12349
6340->7350
6340->7351
7351->8352
6340->7353
7353->8354
8354->9355
9355->10356
10356->11357
10356->11358
11358->12359
11358->12360
12360->13361
8354->9362
9362->10363
10363->11364
10363->11365
11365->12366
11365->12367
8354->9368
9368->10369
9368->10370
9368->10371
10371->11372
9368->10373
10373->11374
11374->12375
12375->13376
12375->13377
13377->14378
13377->14379
8354->9380
9380->10381
10381->11382
8354->9383
9383->10384
10384->11385
10384->11386
11386->12387
11386->12388
12388->13389
12388->13390
13390->14391
13390->14392
5316->6393
6393->7394
7394->8395
7394->8396
5316->6397
6397->7398
7398->8399
7398->8400
2180->3401
3401->4402
4402->5403
3401->4404
3401->4405
4405->5406
4405->5407
5407->6408
6408->7409
6408->7410
4405->5411
5411->6412
3401->4413
4413->5414
5414->6415
6415->7416
6415->7417
7417->8418
7417->8419
2180->3420
3420->4421
4421->5422
3420->4423
3420->4424
4424->5425
5425->6426
6426->7427
7427->8428
7427->8429
4424->5430
5430->6431
6431->7432
6431->7433
3420->4434
4434->5435
5435->6436
6436->7437
7437->8438
7437->8439
8439->9440
8439->9441
9441->10442
5435->6443
6443->7444
7444->8445
7444->8446
6443->7447
7447->8448
8448->9449
9449->10450
5435->6451
6451->7452
7452->8453
7452->8454
6451->7455
7455->8456
8456->9457
9457->10458
5435->6459
6459->7460
7460->8461
8461->9462
8461->9463
7460->8464
8464->9465
8464->9466
9466->10467
9466->10468
5435->6469
6469->7470
7470->8471
8471->9472
9472->10473
10473->11474
10473->11475
7470->8476
8476->9477
8476->9478
9478->10479
10479->11480
11480->12481
11480->12482
5435->6483
6483->7484
7484->8485
7484->8486
8486->9487
8486->9488
6483->7489
7489->8490
7489->8491
8491->9492
6483->7493
7493->8494
6483->7495
7495->8496
8496->9497
9497->10498
9497->10499
10499->11500
11500->12501
12501->13502
11500->12503
10499->11504
11504->12505
11504->12506
5435->6507
6507->7508
2180->3509
3509->4510
4510->5511
3509->4512
3509->4513
4513->5514
4513->5515
5515->6516
6516->7517
6516->7518
4513->5519
5519->6520
6520->7521
6520->7522
3509->4523
4523->5524
5524->6525
6525->7526
7526->8527
7526->8528
8528->9529
8528->9530
9530->10531
5524->6532
6532->7533
7533->8534
7533->8535
6532->7536
7536->8537
8537->9538
9538->10539
5524->6540
6540->7541
7541->8542
7541->8543
6540->7544
7544->8545
8545->9546
9546->10547
5524->6548
6548->7549
7549->8550
8550->9551
8550->9552
7549->8553
8553->9554
8553->9555
9555->10556
9555->10557
5524->6558
6558->7559
7559->8560
7559->8561
8561->9562
8561->9563
9563->10564
5524->6565
6565->7566
7566->8567
7566->8568
8568->9569
8568->9570
9570->10571
5524->6572
6572->7573
7573->8574
7573->8575
8575->9576
8575->9577
6572->7578
7578->8579
7578->8580
8580->9581
6572->7582
7582->8583
6572->7584
7584->8585
8585->9586
9586->10587
10587->11588
10587->11589
9586->10590
8585->9591
9591->10592
10592->11593
11593->12594
12594->13595
12594->13596
12594->13597
13597->14598
13597->14599
10592->11600
11600->12601
12601->13602
12601->13603
12601->13604
5524->6605
6605->7606
-10->0607
0607->1608
1608->2609
2609->3610
3610->4611
4611->5612
5612->6613
0607->1614
1614->2615
2615->3616
3616->4617
0607->1618
1618->2619
2619->3620
3620->4621
0607->1622
1622->2623
1622->2624
1622->2625
2625->3626
3626->4627
3626->4628
3626->4629
3626->4630
4630->5631
4630->5632
2625->3633
3633->4634
3633->4635
3633->4636
2625->3637
3637->4638
3637->4639
3637->4640
3637->4641
2625->3642
3642->4643
3642->4644
4644->5645
4644->5646
5646->6647
5646->6648
3642->4649
4649->5650
5650->6651
6651->7652
6651->7653
6651->7654
7654->8655
2625->3656
3656->4657
3656->4658
4658->5659
5659->6660
5659->6661
4658->5662
5662->6663
6663->7664
7664->8665
7664->8666
6663->7667
7667->8668
7667->8669
3656->4670
4670->5671
5671->6672
6672->7673
7673->8674
8674->9675
7673->8676
8676->9677
8676->9678
5671->6679
6679->7680
7680->8681
8681->9682
8681->9683
7680->8684
8684->9685
8684->9686
9686->10687
9686->10688
10688->11689
5671->6690
6690->7691
7691->8692
7691->8693
8693->9694
8693->9695
6690->7696
7696->8697
7696->8698
6690->7699
7699->8700
6690->7701
7701->8702
8702->9703
9703->10704
10704->11705
10704->11706
11706->12707
11706->12708
12708->13709
8702->9710
9710->10711
10711->11712
10711->11713
9710->10714
10714->11715
8702->9716
9716->10717
10717->11718
11718->12719
11718->12720
10717->11721
10717->11722
5671->6723
6723->7724
2625->3725
3725->4726
3725->4727
4727->5728
4727->5729
3725->4730
4730->5731
5731->6732
6732->7733
7733->8734
7733->8735
8735->9736
8735->9737
9737->10738
5731->6739
6739->7740
7740->8741
8741->9742
9742->10743
10743->11744
10743->11745
9742->10746
10746->11747
11747->12748
10746->11749
8741->9750
9750->10751
9750->10752
7740->8753
7740->8754
2625->3755
3755->4756
3755->4757
3755->4758
4758->5759
4758->5760
3755->4761
2625->3762
3762->4763
3762->4764
3762->4765
4765->5766
4765->5767
4765->5768
5768->6769
3762->4770
4770->5771
5771->6772
6772->7773
7773->8774
5771->6775
6775->7776
7776->8777
7776->8778
7776->8779
8779->9780
8779->9781
9781->10782
5771->6783
6783->7784
7784->8785
7784->8786
7784->8787
8787->9788
8787->9789
9789->10790
5771->6791
6791->7792
7792->8793
8793->9794
9794->10795
10795->11796
10795->11797
10795->11798
11798->12799
12799->13800
8793->9801
9801->10802
10802->11803
10802->11804
11804->12805
11804->12806
8793->9807
9807->10808
10808->11809
11809->12810
12810->13811
12810->13812
12810->13813
13813->14814
10808->11815
9807->10816
10816->11817
11817->12818
12818->13819
13819->14820
14820->15821
14820->15822
13819->14823
14823->15824
14823->15825
15825->16826
15825->16827
16827->17828
11817->12829
12829->13830
13830->14831
14831->15832
14831->15833
13830->14834
14834->15835
14834->15836
15836->16837
15836->16838
16838->17839
11817->12840
12840->13841
13841->14842
14842->15843
14842->15844
15844->16845
15844->16846
13841->14847
14847->15848
14847->15849
13841->14850
14850->15851
13841->14852
14852->15853
15853->16854
16854->17855
16854->17856
16854->17857
17857->18858
16854->17859
17859->18860
18860->19861
19861->20862
19861->20863
18860->19864
15853->16865
16865->17866
17866->18867
17866->18868
18868->19869
18868->19870
15853->16871
16871->17872
17872->18873
17872->18874
18874->19875
18874->19876
16871->17877
17877->18878
17877->18879
16871->17880
17880->18881
16871->17882
17882->18883
18883->19884
19884->20885
19884->20886
19884->20887
20887->21888
21888->22889
22889->23890
21888->22891
20887->21892
21892->22893
21892->22894
22894->23895
22894->23896
15853->16897
16897->17898
17898->18899
17898->18900
18900->19901
18900->19902
16897->17903
17903->18904
17903->18905
16897->17906
17906->18907
16897->17908
17908->18909
18909->19910
19910->20911
19910->20912
20912->21913
20912->21914
18909->19915
19915->20916
20916->21917
21917->22918
22918->23919
22918->23920
23920->24921
23920->24922
24922->25923
24922->25924
21917->22925
22925->23926
22925->23927
21917->22928
22928->23929
21917->22930
22930->23931
23931->24932
24932->25933
25933->26934
26934->27935
26934->27936
25933->26937
25933->26938
26938->27939
26938->27940
27940->28941
27940->28942
23931->24943
24943->25944
25944->26945
26945->27946
26945->27947
25944->26948
25944->26949
26949->27950
26949->27951
27951->28952
27951->28953
20916->21954
21954->22955
22955->23956
23956->24957
23956->24958
22955->23959
22955->23960
20916->21961
21961->22962
22962->23963
23963->24964
23963->24965
22962->23966
22962->23967
23967->24968
23967->24969
20916->21970
11817->12971
12971->13972
13972->14973
14973->15974
13972->14975
11817->12976
12976->13977
13977->14978
13977->14979
14979->15980
14979->15981
12976->13982
13982->14983
13982->14984
12976->13985
13985->14986
12976->13987
13987->14988
14988->15989
15989->16990
14988->15991
15991->16992
15991->16993
16993->17994
16993->17995
15991->16996
16996->17997
16996->17998
6791->7999
7999->81000
81000->91001
91001->101002
101002->111003
2625->31004
31004->41005
31004->41006
31004->41007
41007->51008
51008->61009
61009->71010
61009->71011
51008->61012
41007->51013
51013->61014
61014->71015
61014->71016
51013->61017
41007->51018
51018->61019
51018->61020
61020->71021
61020->71022
71022->81023
81023->91024
91024->101025
91024->101026
81023->91027
71022->81028
81028->91029
91029->101030
91029->101031
81028->91032
51018->61033
61033->71034
71034->81035
81035->91036
91036->101037
101037->111038
91036->101039
91036->101040
71034->81041
81041->91042
91042->101043
101043->111044
91042->101045
91042->101046
-10->01047
01047->11048
11048->21049
21049->31050
31050->41051
41051->51052
51052->61053
01047->11054
11054->21055
21055->31056
31056->41057
41057->51058
51058->61059
61059->71060
01047->11061
11061->21062
21062->31063
31063->41064
41064->51065
51065->61066
61066->71067
01047->11068
11068->21069
21069->31070
31070->41071
41071->51072
51072->61073
61073->71074
01047->11075
11075->21076
21076->31077
31077->41078
41078->51079
51079->61080
61080->71081
01047->11082
11082->21083
21083->31084
31084->41085
41085->51086
51086->61087
61087->71088
01047->11089
11089->21090
21090->31091
31091->41092
41092->51093
51093->61094
61094->71095
01047->11096
11096->21097
21097->31098
31098->41099
01047->11100
11100->21101
21101->31102
31102->41103
01047->11104
11104->21105
21105->31106
31106->41107
01047->11108
11108->21109
21109->31110
31110->41111
41111->51112
51112->61113
61113->71114
01047->11115
11115->21116
11115->21117
11115->21118
21118->31119
11115->21120
21120->31121
31121->41122
31121->41123
31121->41124
21120->31125
31125->41126
31125->41127
31125->41128
21120->31129
31129->41130
31129->41131
31129->41132
21120->31133
31133->41134
31133->41135
31133->41136
21120->31137
31137->41138
31137->41139
41139->51140
41139->51141
51141->61142
51141->61143
31137->41144
41144->51145
51145->61146
61146->71147
71147->81148
71147->81149
71147->81150
81150->91151
91151->101152
51145->61153
61153->71154
71154->81155
71154->81156
71154->81157
81157->91158
51145->61159
61159->71160
71160->81161
71160->81162
71160->81163
81163->91164
91164->101165
51145->61166
61166->71167
71167->81168
71167->81169
71167->81170
21120->31171
31171->41172
31171->41173
41173->51174
31171->41175
41175->51176
51176->61177
61177->71178
71178->81179
71178->81180
71178->81181
51176->61182
61182->71183
71183->81184
71183->81185
71183->81186
51176->61187
61187->71188
71188->81189
71188->81190
71188->81191
21120->31192
31192->41193
31192->41194
41194->51195
41194->51196
51196->61197
61197->71198
61197->71199
31192->41200
41200->51201
51201->61202
61202->71203
71203->81204
81204->91205
71203->81206
71203->81207
51201->61208
61208->71209
21120->31210
31210->41211
31210->41212
41212->51213
41212->51214
51214->61215
61215->71216
71216->81217
71216->81218
61215->71219
71219->81220
71219->81221
31210->41222
41222->51223
51223->61224
61224->71225
71225->81226
81226->91227
81226->91228
71225->81229
81229->91230
81229->91231
91231->101232
91231->101233
51223->61234
61234->71235
71235->81236
71235->81237
81237->91238
91238->101239
101239->111240
91238->101241
101241->111242
91238->101243
91238->101244
71235->81245
81245->91246
91246->101247
91246->101248
91246->101249
91246->101250
21120->31251
31251->41252
31251->41253
41253->51254
41253->51255
31251->41256
41256->51257
51257->61258
21120->31259
31259->41260
31259->41261
41261->51262
41261->51263
31259->41264
41264->51265
51265->61266
21120->31267
31267->41268
31267->41269
41269->51270
41269->51271
31267->41272
41272->51273
51273->61274
21120->31275
31275->41276
41276->51277
31275->41278
31275->41279
41279->51280
41279->51281
51281->61282
61282->71283
71283->81284
71283->81285
61282->71286
71286->81287
71286->81288
41279->51289
51289->61290
61290->71291
61290->71292
31275->41293
41293->51294
51294->61295
61295->71296
61295->71297
71297->81298
71297->81299
71297->81300
21120->31301
31301->41302
41302->51303
31301->41304
31301->41305
41305->51306
41305->51307
51307->61308
61308->71309
61308->71310
41305->51311
51311->61312
61312->71313
61312->71314
31301->41315
41315->51316
51316->61317
61317->71318
61317->71319
71319->81320
71319->81321
21120->31322
31322->41323
41323->51324
31322->41325
31322->41326
41326->51327
41326->51328
31322->41329
41329->51330
51330->61331
21120->31332
31332->41333
41333->51334
31332->41335
31332->41336
41336->51337
41336->51338
51338->61339
61339->71340
71340->81341
81341->91342
81341->91343
71340->81344
81344->91345
81344->91346
61339->71347
71347->81348
71347->81349
41336->51350
51350->61351
61351->71352
61351->71353
31332->41354
41354->51355
51355->61356
61356->71357
71357->81358
71357->81359
61356->71360
71360->81361
81361->91362
51355->61363
61363->71364
71364->81365
71364->81366
81366->91367
81366->91368
91368->101369
51355->61370
61370->71371
71371->81372
81372->91373
61370->71374
71374->81375
81375->91376
91376->101377
91376->101378
101378->111379
101378->111380
111380->121381
51355->61382
61382->71383
71383->81384
81384->91385
61382->71386
71386->81387
81387->91388
91388->101389
91388->101390
101390->111391
101390->111392
111392->121393
51355->61394
61394->71395
71395->81396
81396->91397
81396->91398
71395->81399
81399->91400
81399->91401
91401->101402
61394->71403
71403->81404
81404->91405
51355->61406
61406->71407
71407->81408
81408->91409
81408->91410
71407->81411
81411->91412
81411->91413
91413->101414
51355->61415
61415->71416
71416->81417
71416->81418
61415->71419
71419->81420
51355->61421
61421->71422
71422->81423
71422->81424
81424->91425
81424->91426
91426->101427
91426->101428
91426->101429
81424->91430
81424->91431
51355->61432
61432->71433
61432->71434
61432->71435
61432->71436
71436->81437
81437->91438
91438->101439
101439->111440
91438->101441
81437->91442
91442->101443
101443->111444
111444->121445
111444->121446
101443->111447
111447->121448
111447->121449
121449->131450
81437->91451
91451->101452
101452->111453
101452->111454
91451->101455
81437->91456
91456->101457
101457->111458
101457->111459
111459->121460
111459->121461
121461->131462
81437->91463
91463->101464
101464->111465
101464->111466
111466->121467
111466->121468
81437->91469
91469->101470
101470->111471
101470->111472
111472->121473
111472->121474
81437->91475
91475->101476
101476->111477
101476->111478
91475->101479
101479->111480
111480->121481
121481->131482
131482->141483
131482->141484
131482->141485
111480->121486
121486->131487
131487->141488
131487->141489
131487->141490
141490->151491
141490->151492
151492->161493
161493->171494
171494->181495
161493->171496
91475->101497
101497->111498
111498->121499
121499->131500
131500->141501
131500->141502
131500->141503
141503->151504
141503->151505
151505->161506
161506->171507
171507->181508
161506->171509
171509->181510
181510->191511
181510->191512
111498->121513
121513->131514
131514->141515
131514->141516
131514->141517
141517->151518
81437->91519
91519->101520
101520->111521
101520->111522
111522->121523
111522->121524
121524->131525
121524->131526
131526->141527
131526->141528
141528->151529
151529->161530
161530->171531
161530->171532
141528->151533
81437->91534
91534->101535
101535->111536
101535->111537
111537->121538
111537->121539
91534->101540
101540->111541
101540->111542
91534->101543
101543->111544
91534->101545
101545->111546
111546->121547
121547->131548
131548->141549
131548->141550
141550->151551
151551->161552
141550->151553
151553->161554
151553->161555
161555->171556
171556->181557
171556->181558
161555->171559
111546->121560
121560->131561
131561->141562
141562->151563
141562->151564
131561->141565
121560->131566
131566->141567
141567->151568
151568->161569
151568->161570
161570->171571
161570->171572
161570->171573
161570->171574
171574->181575
171574->181576
181576->191577
191577->201578
201578->211579
201578->211580
191577->201581
181576->191582
191582->201583
191582->201584
81437->91585
91585->101586
101586->111587
101586->111588
111588->121589
111588->121590
121590->131591
121590->131592
51355->61593
61593->71594
71594->81595
71594->81596
81596->91597
81596->91598
91598->101599
101599->111600
91598->101601
81596->91602
91602->101603
51355->61604
61604->71605
21120->31606
31606->41607
41607->51608
31606->41609
31606->41610
41610->51611
41610->51612
51612->61613
61613->71614
71614->81615
71614->81616
61613->71617
71617->81618
71617->81619
41610->51620
51620->61621
61621->71622
61621->71623
31606->41624
41624->51625
51625->61626
21120->31627
31627->41628
41628->51629
31627->41630
31627->41631
41631->51632
41631->51633
51633->61634
61634->71635
71635->81636
81636->91637
91637->101638
91637->101639
101639->111640
101639->111641
61634->71642
31627->41643
41643->51644
51644->61645
61645->71646
71646->81647
71646->81648
81648->91649
91649->101650
101650->111651
101650->111652
111652->121653
111652->121654
61645->71655
61645->71656
71656->81657
61645->71658
71658->81659
81659->91660
81659->91661
81659->91662
91662->101663
81659->91664
91664->101665
101665->111666
111666->121667
111666->121668
121668->131669
131669->141670
121668->131671
51644->61672
61672->71673
-10->01674
01674->11675
11675->21676
21676->31677
31677->41678
41678->51679
01674->11680
11680->21681
21681->31682
31682->41683
41683->51684
01674->11685
11685->21686
21686->31687
31687->41688
41688->51689
51689->61690
61690->71691
71691->81692
01674->11693
11693->21694
21694->31695
31695->41696
41696->51697
51697->61698
61698->71699
71699->81700
01674->11701
11701->21702
21702->31703
31703->41704
41704->51705
51705->61706
61706->71707
01674->11708
11708->21709
21709->31710
31710->41711
41711->51712
51712->61713
01674->11714
11714->21715
21715->31716
31716->41717
41717->51718
51718->61719
01674->11720
11720->21721
21721->31722
31722->41723
41723->51724
51724->61725
01674->11726
11726->21727
21727->31728
31728->41729
01674->11730
11730->21731
21731->31732
31732->41733
01674->11734
11734->21735
11734->21736
11734->21737
21737->31738
11734->21739
21739->31740
31740->41741
31740->41742
31740->41743
41743->51744
41743->51745
51745->61746
61746->71747
51745->61748
61748->71749
21739->31750
31750->41751
31750->41752
41752->51753
51753->61754
61754->71755
61754->71756
31750->41757
21739->31758
31758->41759
31758->41760
31758->41761
21739->31762
31762->41763
41763->51764
31762->41765
31762->41766
41766->51767
41766->51768
51768->61769
61769->71770
61769->71771
31762->41772
41772->51773
51773->61774
61774->71775
71775->81776
71775->81777
51773->61778
61778->71779
71779->81780
71779->81781
81781->91782
81781->91783
91783->101784
91783->101785
101785->111786
101785->111787
111787->121788
51773->61789
61789->71790
71790->81791
71790->81792
81792->91793
81792->91794
61789->71795
71795->81796
81796->91797
81796->91798
81796->91799
81796->91800
91800->101801
101801->111802
111802->121803
121803->131804
121803->131805
131805->141806
131805->141807
141807->151808
141807->151809
151809->161810
101801->111811
111811->121812
121812->131813
131813->141814
121812->131815
121812->131816
51773->61817
61817->71818
21739->31819
31819->41820
41820->51821
31819->41822
31819->41823
41823->51824
41823->51825
31819->41826
41826->51827
51827->61828
21739->31829
31829->41830
41830->51831
31829->41832
31829->41833
41833->51834
41833->51835
51835->61836
61836->71837
61836->71838
31829->41839
41839->51840
51840->61841
61841->71842
71842->81843
81843->91844
71842->81845
71842->81846
51840->61847
61847->71848
21739->31849
31849->41850
41850->51851
31849->41852
31849->41853
41853->51854
51854->61855
61855->71856
71856->81857
71856->81858
41853->51859
31849->41860
41860->51861
51861->61862
21739->31863
31863->41864
41864->51865
31863->41866
31863->41867
41867->51868
41867->51869
51869->61870
61870->71871
71871->81872
81872->91873
91873->101874
91873->101875
61870->71876
31863->41877
41877->51878
51878->61879
61879->71880
71880->81881
81881->91882
71880->81883
71880->81884
51878->61885
61885->71886
21739->31887
31887->41888
31887->41889
41889->51890
41889->51891
51891->61892
61892->71893
61892->71894
31887->41895
41895->51896
51896->61897
61897->71898
71898->81899
71898->81900
71898->81901
81901->91902
81901->91903
51896->61904
61904->71905
71905->81906
71905->81907
61904->71908
71908->81909
51896->61910
61910->71911
71911->81912
81912->91913
81912->91914
71911->81915
81915->91916
81915->91917
91917->101918
51896->61919
61919->71920
71920->81921
71920->81922
71920->81923
81923->91924
91924->101925
101925->111926
101925->111927
51896->61928
61928->71929
71929->81930
61928->71931
71931->81932
81932->91933
91933->101934
101934->111935
111935->121936
111935->121937
101934->111938
111938->121939
111938->121940
121940->131941
131941->141942
121940->131943
131943->141944
81932->91945
91945->101946
101946->111947
101946->111948
111948->121949
121949->131950
121949->131951
111948->121952
121952->131953
121952->131954
51896->61955
61955->71956
71956->81957
81957->91958
71956->81959
61955->71960
71960->81961
81961->91962
91962->101963
91962->101964
91962->101965
51896->61966
61966->71967
71967->81968
71967->81969
81969->91970
81969->91971
51896->61972
61972->71973
21739->31974
31974->41975
41975->51976
31974->41977
31974->41978
41978->51979
41978->51980
51980->61981
61981->71982
61981->71983
31974->41984
41984->51985
51985->61986
61986->71987
71987->81988
71987->81989
71987->81990
51985->61991
61991->71992
-10->01993
01993->11994
11994->21995
21995->31996
31996->41997
41997->51998
51998->61999
61999->72000
01993->12001
12001->22002
12001->22003
22003->32004
32004->42005
42005->52006
12001->22007
22007->32008
32008->42009
32008->42010
22007->32011
32011->42012
32011->42013
42013->52014
32011->42015
22007->32016
32016->42017
42017->52018
42017->52019
52019->62020
62020->72021
62020->72022
52019->62023
62023->72024
62023->72025
32016->42026
42026->52027
52027->62028
62028->72029
62028->72030
62028->72031
72031->82032
82032->92033
82032->92034
72031->82035
22007->32036
32036->42037
32036->42038
42038->52039
42038->52040
52040->62041
62041->72042
62041->72043
32036->42044
42044->52045
52045->62046
62046->72047
72047->82048
62046->72049
72049->82050
82050->92051
22007->32052
32052->42053
42053->52054
32052->42055
32052->42056
42056->52057
42056->52058
52058->62059
62059->72060
62059->72061
32052->42062
42062->52063
52063->62064
62064->72065
72065->82066
82066->92067
92067->102068
92067->102069
62064->72070
72070->82071
52063->62072
62072->72073
72073->82074
72073->82075
82075->92076
82075->92077
92077->102078
92077->102079
52063->62080
62080->72081
72081->82082
72081->82083
82083->92084
22007->32085
32085->42086
32085->42087
42087->52088
42087->52089
32085->42090
42090->52091
52091->62092
62092->72093
72093->82094
72093->82095
22007->32096
32096->42097
32096->42098
42098->52099
42098->52100
32096->42101
42101->52102
52102->62103
62103->72104
72104->82105
72104->82106
}

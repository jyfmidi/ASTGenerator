digraph G {
00[label="compilationUnit\n Bud1%@@@@E%DSDB@@@ "]
01[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.bintrie;publicclass_EmptyValueArray<V>extends_ValueArray<V>{public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}}<EOF> "]
12[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.bintrie; "]
23[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie "]
34[label="packageName\n com.hankcs.hanlp.collection.trie "]
45[label="packageName\n com.hankcs.hanlp.collection "]
56[label="packageName\n com.hankcs.hanlp "]
67[label="packageName\n com.hankcs "]
78[label="packageName\n com "]
19[label="normalClassDeclaration\n publicclass_EmptyValueArray<V>extends_ValueArray<V>{public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}} "]
210[label="classModifier\n public "]
211[label="typeParameters\n <V> "]
312[label="typeParameter\n V "]
213[label="superclass\n extends_ValueArray<V> "]
314[label="classType\n _ValueArray<V> "]
415[label="typeArguments\n <V> "]
516[label="classType_lfno_classOrInterfaceType\n V "]
217[label="classBody\n {public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}} "]
318[label="constructorDeclaration\n public_EmptyValueArray(){} "]
419[label="constructorModifier\n public "]
420[label="constructorDeclarator\n _EmptyValueArray() "]
521[label="simpleTypeName\n _EmptyValueArray "]
422[label="constructorBody\n {} "]
323[label="methodDeclaration\n @OverridepublicVnextValue(){returnnull;} "]
424[label="markerAnnotation\n @Override "]
525[label="typeName\n Override "]
426[label="methodModifier\n public "]
427[label="methodHeader\n VnextValue() "]
528[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
529[label="methodDeclarator\n nextValue() "]
430[label="block\n {returnnull;} "]
531[label="returnStatement\n returnnull; "]
632[label="literal\n null "]
033[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.bintrie;publicclass_ValueArray<V>{V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}}<EOF> "]
134[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.bintrie; "]
235[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie "]
336[label="packageName\n com.hankcs.hanlp.collection.trie "]
437[label="packageName\n com.hankcs.hanlp.collection "]
538[label="packageName\n com.hankcs.hanlp "]
639[label="packageName\n com.hankcs "]
740[label="packageName\n com "]
141[label="normalClassDeclaration\n publicclass_ValueArray<V>{V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}} "]
242[label="classModifier\n public "]
243[label="typeParameters\n <V> "]
344[label="typeParameter\n V "]
245[label="classBody\n {V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}} "]
346[label="fieldDeclaration\n V[]value; "]
447[label="unannArrayType\n V[] "]
548[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
549[label="dims\n [] "]
450[label="variableDeclaratorId\n value "]
351[label="fieldDeclaration\n intoffset; "]
452[label="integralType\n int "]
453[label="variableDeclaratorId\n offset "]
354[label="constructorDeclaration\n public_ValueArray(V[]value){this.value=value;} "]
455[label="constructorModifier\n public "]
456[label="constructorDeclarator\n _ValueArray(V[]value) "]
557[label="simpleTypeName\n _ValueArray "]
558[label="formalParameter\n V[]value "]
659[label="unannArrayType\n V[] "]
760[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
761[label="dims\n [] "]
662[label="variableDeclaratorId\n value "]
463[label="constructorBody\n {this.value=value;} "]
564[label="expressionStatement\n this.value=value; "]
665[label="assignment\n this.value=value "]
766[label="fieldAccess\n this.value "]
867[label="primaryNoNewArray_lfno_primary\n this "]
768[label="assignmentOperator\n = "]
769[label="expressionName\n value "]
370[label="methodDeclaration\n publicVnextValue(){returnvalue[offset++];} "]
471[label="methodModifier\n public "]
472[label="methodHeader\n VnextValue() "]
573[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
574[label="methodDeclarator\n nextValue() "]
475[label="block\n {returnvalue[offset++];} "]
576[label="returnStatement\n returnvalue[offset++]; "]
677[label="arrayAccess_lfno_primary\n value[offset++] "]
778[label="expressionName\n value "]
779[label="postfixExpression\n offset++ "]
880[label="expressionName\n offset "]
881[label="postIncrementExpression_lf_postfixExpression\n ++ "]
382[label="constructorDeclaration\n protected_ValueArray(){} "]
483[label="constructorModifier\n protected "]
484[label="constructorDeclarator\n _ValueArray() "]
585[label="simpleTypeName\n _ValueArray "]
486[label="constructorBody\n {} "]
387[label="methodDeclaration\n public_ValueArraysetValue(V[]value){this.value=value;returnthis;} "]
488[label="methodModifier\n public "]
489[label="methodHeader\n _ValueArraysetValue(V[]value) "]
590[label="unannClassType_lfno_unannClassOrInterfaceType\n _ValueArray "]
591[label="methodDeclarator\n setValue(V[]value) "]
692[label="formalParameter\n V[]value "]
793[label="unannArrayType\n V[] "]
894[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
895[label="dims\n [] "]
796[label="variableDeclaratorId\n value "]
497[label="block\n {this.value=value;returnthis;} "]
598[label="blockStatements\n this.value=value;returnthis; "]
699[label="expressionStatement\n this.value=value; "]
7100[label="assignment\n this.value=value "]
8101[label="fieldAccess\n this.value "]
9102[label="primaryNoNewArray_lfno_primary\n this "]
8103[label="assignmentOperator\n = "]
8104[label="expressionName\n value "]
6105[label="returnStatement\n returnthis; "]
7106[label="primaryNoNewArray_lfno_primary\n this "]
0107[label="compilationUnit\n packagecom.hankcs.hanlp.classification.classifiers;importcom.hankcs.hanlp.classification.corpus.Document;importcom.hankcs.hanlp.classification.corpus.IDataSet;importcom.hankcs.hanlp.classification.corpus.MemoryDataSet;importcom.hankcs.hanlp.classification.models.AbstractModel;importcom.hankcs.hanlp.classification.utilities.CollectionUtility;importcom.hankcs.hanlp.classification.utilities.MathUtility;importjava.io.IOException;importjava.util.Map;importjava.util.TreeMap;importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger;publicabstractclassAbstractClassifierimplementsIClassifier{@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}}<EOF> "]
1108[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.classifiers; "]
2109[label="packageName\n com.hankcs.hanlp.classification.classifiers "]
3110[label="packageName\n com.hankcs.hanlp.classification "]
4111[label="packageName\n com.hankcs.hanlp "]
5112[label="packageName\n com.hankcs "]
6113[label="packageName\n com "]
1114[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.Document; "]
2115[label="typeName\n com.hankcs.hanlp.classification.corpus.Document "]
3116[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4117[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5118[label="packageOrTypeName\n com.hankcs.hanlp "]
6119[label="packageOrTypeName\n com.hankcs "]
7120[label="packageOrTypeName\n com "]
1121[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.IDataSet; "]
2122[label="typeName\n com.hankcs.hanlp.classification.corpus.IDataSet "]
3123[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4124[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5125[label="packageOrTypeName\n com.hankcs.hanlp "]
6126[label="packageOrTypeName\n com.hankcs "]
7127[label="packageOrTypeName\n com "]
1128[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.MemoryDataSet; "]
2129[label="typeName\n com.hankcs.hanlp.classification.corpus.MemoryDataSet "]
3130[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4131[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5132[label="packageOrTypeName\n com.hankcs.hanlp "]
6133[label="packageOrTypeName\n com.hankcs "]
7134[label="packageOrTypeName\n com "]
1135[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.models.AbstractModel; "]
2136[label="typeName\n com.hankcs.hanlp.classification.models.AbstractModel "]
3137[label="packageOrTypeName\n com.hankcs.hanlp.classification.models "]
4138[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5139[label="packageOrTypeName\n com.hankcs.hanlp "]
6140[label="packageOrTypeName\n com.hankcs "]
7141[label="packageOrTypeName\n com "]
1142[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.CollectionUtility; "]
2143[label="typeName\n com.hankcs.hanlp.classification.utilities.CollectionUtility "]
3144[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4145[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5146[label="packageOrTypeName\n com.hankcs.hanlp "]
6147[label="packageOrTypeName\n com.hankcs "]
7148[label="packageOrTypeName\n com "]
1149[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.MathUtility; "]
2150[label="typeName\n com.hankcs.hanlp.classification.utilities.MathUtility "]
3151[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4152[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5153[label="packageOrTypeName\n com.hankcs.hanlp "]
6154[label="packageOrTypeName\n com.hankcs "]
7155[label="packageOrTypeName\n com "]
1156[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
2157[label="typeName\n java.io.IOException "]
3158[label="packageOrTypeName\n java.io "]
4159[label="packageOrTypeName\n java "]
1160[label="singleTypeImportDeclaration\n importjava.util.Map; "]
2161[label="typeName\n java.util.Map "]
3162[label="packageOrTypeName\n java.util "]
4163[label="packageOrTypeName\n java "]
1164[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
2165[label="typeName\n java.util.TreeMap "]
3166[label="packageOrTypeName\n java.util "]
4167[label="packageOrTypeName\n java "]
1168[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger; "]
2169[label="typeName\n com.hankcs.hanlp.classification.utilities.Predefine "]
3170[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4171[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5172[label="packageOrTypeName\n com.hankcs.hanlp "]
6173[label="packageOrTypeName\n com.hankcs "]
7174[label="packageOrTypeName\n com "]
1175[label="normalClassDeclaration\n publicabstractclassAbstractClassifierimplementsIClassifier{@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}} "]
2176[label="classModifier\n public "]
2177[label="classModifier\n abstract "]
2178[label="superinterfaces\n implementsIClassifier "]
3179[label="classType\n IClassifier "]
2180[label="classBody\n {@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}} "]
3181[label="methodDeclaration\n @OverridepublicIClassifierenableProbability(booleanenable){returnthis;} "]
4182[label="markerAnnotation\n @Override "]
5183[label="typeName\n Override "]
4184[label="methodModifier\n public "]
4185[label="methodHeader\n IClassifierenableProbability(booleanenable) "]
5186[label="unannClassType_lfno_unannClassOrInterfaceType\n IClassifier "]
5187[label="methodDeclarator\n enableProbability(booleanenable) "]
6188[label="formalParameter\n booleanenable "]
7189[label="unannPrimitiveType\n boolean "]
7190[label="variableDeclaratorId\n enable "]
4191[label="block\n {returnthis;} "]
5192[label="returnStatement\n returnthis; "]
6193[label="primaryNoNewArray_lfno_primary\n this "]
3194[label="fieldDeclaration\n booleanconfigProbabilityEnabled=true; "]
4195[label="unannPrimitiveType\n boolean "]
4196[label="variableDeclarator\n configProbabilityEnabled=true "]
5197[label="variableDeclaratorId\n configProbabilityEnabled "]
5198[label="literal\n true "]
3199[label="methodDeclaration\n @OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);} "]
4200[label="markerAnnotation\n @Override "]
5201[label="typeName\n Override "]
4202[label="methodModifier\n public "]
4203[label="methodHeader\n Stringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException "]
5204[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
5205[label="methodDeclarator\n classify(Stringtext) "]
6206[label="formalParameter\n Stringtext "]
7207[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
7208[label="variableDeclaratorId\n text "]
5209[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6210[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7211[label="classType\n IllegalArgumentException "]
7212[label="classType\n IllegalStateException "]
4213[label="block\n {Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);} "]
5214[label="blockStatements\n Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap); "]
6215[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=predict(text); "]
7216[label="localVariableDeclaration\n Map<String,Double>scoreMap=predict(text) "]
8217[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9218[label="typeArguments\n <String,Double> "]
10219[label="typeArgumentList\n String,Double "]
11220[label="classType_lfno_classOrInterfaceType\n String "]
11221[label="classType_lfno_classOrInterfaceType\n Double "]
8222[label="variableDeclarator\n scoreMap=predict(text) "]
9223[label="variableDeclaratorId\n scoreMap "]
9224[label="methodInvocation_lfno_primary\n predict(text) "]
10225[label="methodName\n predict "]
10226[label="expressionName\n text "]
6227[label="returnStatement\n returnCollectionUtility.max(scoreMap); "]
7228[label="methodInvocation_lfno_primary\n CollectionUtility.max(scoreMap) "]
8229[label="typeName\n CollectionUtility "]
8230[label="expressionName\n scoreMap "]
3231[label="methodDeclaration\n @OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);} "]
4232[label="markerAnnotation\n @Override "]
5233[label="typeName\n Override "]
4234[label="methodModifier\n public "]
4235[label="methodHeader\n Stringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException "]
5236[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
5237[label="methodDeclarator\n classify(Documentdocument) "]
6238[label="formalParameter\n Documentdocument "]
7239[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7240[label="variableDeclaratorId\n document "]
5241[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6242[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7243[label="classType\n IllegalArgumentException "]
7244[label="classType\n IllegalStateException "]
4245[label="block\n {Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);} "]
5246[label="blockStatements\n Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap); "]
6247[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=predict(document); "]
7248[label="localVariableDeclaration\n Map<String,Double>scoreMap=predict(document) "]
8249[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9250[label="typeArguments\n <String,Double> "]
10251[label="typeArgumentList\n String,Double "]
11252[label="classType_lfno_classOrInterfaceType\n String "]
11253[label="classType_lfno_classOrInterfaceType\n Double "]
8254[label="variableDeclarator\n scoreMap=predict(document) "]
9255[label="variableDeclaratorId\n scoreMap "]
9256[label="methodInvocation_lfno_primary\n predict(document) "]
10257[label="methodName\n predict "]
10258[label="expressionName\n document "]
6259[label="returnStatement\n returnCollectionUtility.max(scoreMap); "]
7260[label="methodInvocation_lfno_primary\n CollectionUtility.max(scoreMap) "]
8261[label="typeName\n CollectionUtility "]
8262[label="expressionName\n scoreMap "]
3263[label="methodDeclaration\n @Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);} "]
4264[label="markerAnnotation\n @Override "]
5265[label="typeName\n Override "]
4266[label="methodModifier\n public "]
4267[label="methodHeader\n voidtrain(StringfolderPath,StringcharsetName)throwsIOException "]
5268[label="result\n void "]
5269[label="methodDeclarator\n train(StringfolderPath,StringcharsetName) "]
6270[label="formalParameterList\n StringfolderPath,StringcharsetName "]
7271[label="formalParameter\n StringfolderPath "]
8272[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8273[label="variableDeclaratorId\n folderPath "]
7274[label="formalParameter\n StringcharsetName "]
8275[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8276[label="variableDeclaratorId\n charsetName "]
5277[label="throws_\n throwsIOException "]
6278[label="classType\n IOException "]
4279[label="block\n {IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);} "]
5280[label="blockStatements\n IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet); "]
6281[label="localVariableDeclarationStatement\n IDataSetdataSet=newMemoryDataSet(); "]
7282[label="localVariableDeclaration\n IDataSetdataSet=newMemoryDataSet() "]
8283[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
8284[label="variableDeclarator\n dataSet=newMemoryDataSet() "]
9285[label="variableDeclaratorId\n dataSet "]
9286[label="classInstanceCreationExpression_lfno_primary\n newMemoryDataSet() "]
6287[label="expressionStatement\n dataSet.load(folderPath,charsetName); "]
7288[label="methodInvocation\n dataSet.load(folderPath,charsetName) "]
8289[label="typeName\n dataSet "]
8290[label="argumentList\n folderPath,charsetName "]
9291[label="expressionName\n folderPath "]
9292[label="expressionName\n charsetName "]
6293[label="expressionStatement\n train(dataSet); "]
7294[label="methodInvocation\n train(dataSet) "]
8295[label="methodName\n train "]
8296[label="expressionName\n dataSet "]
3297[label="methodDeclaration\n @Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);} "]
4298[label="markerAnnotation\n @Override "]
5299[label="typeName\n Override "]
4300[label="methodModifier\n public "]
4301[label="methodHeader\n voidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException "]
5302[label="result\n void "]
5303[label="methodDeclarator\n train(Map<String,String[]>trainingDataSet) "]
6304[label="formalParameter\n Map<String,String[]>trainingDataSet "]
7305[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String[]> "]
8306[label="typeArguments\n <String,String[]> "]
9307[label="typeArgumentList\n String,String[] "]
10308[label="classType_lfno_classOrInterfaceType\n String "]
10309[label="arrayType\n String[] "]
11310[label="classType_lfno_classOrInterfaceType\n String "]
11311[label="dims\n [] "]
7312[label="variableDeclaratorId\n trainingDataSet "]
5313[label="throws_\n throwsIllegalArgumentException "]
6314[label="classType\n IllegalArgumentException "]
4315[label="block\n {IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);} "]
5316[label="blockStatements\n IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet); "]
6317[label="localVariableDeclarationStatement\n IDataSetdataSet=newMemoryDataSet(); "]
7318[label="localVariableDeclaration\n IDataSetdataSet=newMemoryDataSet() "]
8319[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
8320[label="variableDeclarator\n dataSet=newMemoryDataSet() "]
9321[label="variableDeclaratorId\n dataSet "]
9322[label="classInstanceCreationExpression_lfno_primary\n newMemoryDataSet() "]
6323[label="expressionStatement\n logger.start(\"正在构造训练数据集...\"); "]
7324[label="methodInvocation\n logger.start(\"正在构造训练数据集...\") "]
8325[label="typeName\n logger "]
8326[label="literal\n \"正在构造训练数据集...\" "]
6327[label="localVariableDeclarationStatement\n inttotal=trainingDataSet.size(); "]
7328[label="localVariableDeclaration\n inttotal=trainingDataSet.size() "]
8329[label="integralType\n int "]
8330[label="variableDeclarator\n total=trainingDataSet.size() "]
9331[label="variableDeclaratorId\n total "]
9332[label="methodInvocation_lfno_primary\n trainingDataSet.size() "]
10333[label="typeName\n trainingDataSet "]
6334[label="localVariableDeclarationStatement\n intcur=0; "]
7335[label="localVariableDeclaration\n intcur=0 "]
8336[label="integralType\n int "]
8337[label="variableDeclarator\n cur=0 "]
9338[label="variableDeclaratorId\n cur "]
9339[label="literal\n 0 "]
6340[label="enhancedForStatement\n for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));} "]
7341[label="unannClassOrInterfaceType\n Map.Entry<String,String[]> "]
8342[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
8343[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String[]> "]
9344[label="typeArguments\n <String,String[]> "]
10345[label="typeArgumentList\n String,String[] "]
11346[label="classType_lfno_classOrInterfaceType\n String "]
11347[label="arrayType\n String[] "]
12348[label="classType_lfno_classOrInterfaceType\n String "]
12349[label="dims\n [] "]
7350[label="variableDeclaratorId\n entry "]
7351[label="methodInvocation_lfno_primary\n trainingDataSet.entrySet() "]
8352[label="typeName\n trainingDataSet "]
7353[label="block\n {Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));} "]
8354[label="blockStatements\n Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)); "]
9355[label="localVariableDeclarationStatement\n Stringcategory=entry.getKey(); "]
10356[label="localVariableDeclaration\n Stringcategory=entry.getKey() "]
11357[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
11358[label="variableDeclarator\n category=entry.getKey() "]
12359[label="variableDeclaratorId\n category "]
12360[label="methodInvocation_lfno_primary\n entry.getKey() "]
13361[label="typeName\n entry "]
9362[label="expressionStatement\n logger.out(\"[%s]...\",category); "]
10363[label="methodInvocation\n logger.out(\"[%s]...\",category) "]
11364[label="typeName\n logger "]
11365[label="argumentList\n \"[%s]...\",category "]
12366[label="literal\n \"[%s]...\" "]
12367[label="expressionName\n category "]
9368[label="enhancedForStatement\n for(Stringdoc:entry.getValue()){dataSet.add(category,doc);} "]
10369[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
10370[label="variableDeclaratorId\n doc "]
10371[label="methodInvocation_lfno_primary\n entry.getValue() "]
11372[label="typeName\n entry "]
10373[label="block\n {dataSet.add(category,doc);} "]
11374[label="expressionStatement\n dataSet.add(category,doc); "]
12375[label="methodInvocation\n dataSet.add(category,doc) "]
13376[label="typeName\n dataSet "]
13377[label="argumentList\n category,doc "]
14378[label="expressionName\n category "]
14379[label="expressionName\n doc "]
9380[label="expressionStatement\n ++cur; "]
10381[label="preIncrementExpression\n ++cur "]
11382[label="expressionName\n cur "]
9383[label="expressionStatement\n logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)); "]
10384[label="methodInvocation\n logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)) "]
11385[label="typeName\n logger "]
11386[label="argumentList\n \"%.2f%%...\",MathUtility.percentage(cur,total) "]
12387[label="literal\n \"%.2f%%...\" "]
12388[label="methodInvocation_lfno_primary\n MathUtility.percentage(cur,total) "]
13389[label="typeName\n MathUtility "]
13390[label="argumentList\n cur,total "]
14391[label="expressionName\n cur "]
14392[label="expressionName\n total "]
6393[label="expressionStatement\n logger.finish(\" 加载完毕\n\"); "]
7394[label="methodInvocation\n logger.finish(\" 加载完毕\n\") "]
8395[label="typeName\n logger "]
8396[label="literal\n \" 加载完毕\n\" "]
6397[label="expressionStatement\n train(dataSet); "]
7398[label="methodInvocation\n train(dataSet) "]
8399[label="methodName\n train "]
8400[label="expressionName\n dataSet "]
3401[label="methodDeclaration\n @Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");} "]
4402[label="markerAnnotation\n @Override "]
5403[label="typeName\n Override "]
4404[label="methodModifier\n public "]
4405[label="methodHeader\n voidtrain(StringfolderPath)throwsIOException "]
5406[label="result\n void "]
5407[label="methodDeclarator\n train(StringfolderPath) "]
6408[label="formalParameter\n StringfolderPath "]
7409[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
7410[label="variableDeclaratorId\n folderPath "]
5411[label="throws_\n throwsIOException "]
6412[label="classType\n IOException "]
4413[label="block\n {train(folderPath,\"UTF-8\");} "]
5414[label="expressionStatement\n train(folderPath,\"UTF-8\"); "]
6415[label="methodInvocation\n train(folderPath,\"UTF-8\") "]
7416[label="methodName\n train "]
7417[label="argumentList\n folderPath,\"UTF-8\" "]
8418[label="expressionName\n folderPath "]
8419[label="literal\n \"UTF-8\" "]
3420[label="methodDeclaration\n @OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;} "]
4421[label="markerAnnotation\n @Override "]
5422[label="typeName\n Override "]
4423[label="methodModifier\n public "]
4424[label="methodHeader\n Map<String,Double>predict(Documentdocument) "]
5425[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
6426[label="typeArguments\n <String,Double> "]
7427[label="typeArgumentList\n String,Double "]
8428[label="classType_lfno_classOrInterfaceType\n String "]
8429[label="classType_lfno_classOrInterfaceType\n Double "]
5430[label="methodDeclarator\n predict(Documentdocument) "]
6431[label="formalParameter\n Documentdocument "]
7432[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7433[label="variableDeclaratorId\n document "]
4434[label="block\n {AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;} "]
5435[label="blockStatements\n AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap; "]
6436[label="localVariableDeclarationStatement\n AbstractModelmodel=getModel(); "]
7437[label="localVariableDeclaration\n AbstractModelmodel=getModel() "]
8438[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractModel "]
8439[label="variableDeclarator\n model=getModel() "]
9440[label="variableDeclaratorId\n model "]
9441[label="methodInvocation_lfno_primary\n getModel() "]
10442[label="methodName\n getModel "]
6443[label="ifThenStatement\n if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
7444[label="equalityExpression\n model==null "]
8445[label="expressionName\n model "]
8446[label="literal\n null "]
7447[label="block\n {thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
8448[label="throwStatement\n thrownewIllegalStateException(\"未训练模型！无法执行预测！\"); "]
9449[label="classInstanceCreationExpression_lfno_primary\n newIllegalStateException(\"未训练模型！无法执行预测！\") "]
10450[label="literal\n \"未训练模型！无法执行预测！\" "]
6451[label="ifThenStatement\n if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");} "]
7452[label="equalityExpression\n document==null "]
8453[label="expressionName\n document "]
8454[label="literal\n null "]
7455[label="block\n {thrownewIllegalArgumentException(\"参数 text == null\");} "]
8456[label="throwStatement\n thrownewIllegalArgumentException(\"参数 text == null\"); "]
9457[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"参数 text == null\") "]
10458[label="literal\n \"参数 text == null\" "]
6459[label="localVariableDeclarationStatement\n double[]probs=categorize(document); "]
7460[label="localVariableDeclaration\n double[]probs=categorize(document) "]
8461[label="unannArrayType\n double[] "]
9462[label="floatingPointType\n double "]
9463[label="dims\n [] "]
8464[label="variableDeclarator\n probs=categorize(document) "]
9465[label="variableDeclaratorId\n probs "]
9466[label="methodInvocation_lfno_primary\n categorize(document) "]
10467[label="methodName\n categorize "]
10468[label="expressionName\n document "]
6469[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=newTreeMap<String,Double>(); "]
7470[label="localVariableDeclaration\n Map<String,Double>scoreMap=newTreeMap<String,Double>() "]
8471[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9472[label="typeArguments\n <String,Double> "]
10473[label="typeArgumentList\n String,Double "]
11474[label="classType_lfno_classOrInterfaceType\n String "]
11475[label="classType_lfno_classOrInterfaceType\n Double "]
8476[label="variableDeclarator\n scoreMap=newTreeMap<String,Double>() "]
9477[label="variableDeclaratorId\n scoreMap "]
9478[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,Double>() "]
10479[label="typeArguments\n <String,Double> "]
11480[label="typeArgumentList\n String,Double "]
12481[label="classType_lfno_classOrInterfaceType\n String "]
12482[label="classType_lfno_classOrInterfaceType\n Double "]
6483[label="basicForStatement\n for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);} "]
7484[label="localVariableDeclaration\n inti=0 "]
8485[label="integralType\n int "]
8486[label="variableDeclarator\n i=0 "]
9487[label="variableDeclaratorId\n i "]
9488[label="literal\n 0 "]
7489[label="relationalExpression\n i<probs.length "]
8490[label="expressionName\n i "]
8491[label="expressionName\n probs.length "]
9492[label="ambiguousName\n probs "]
7493[label="postIncrementExpression\n i++ "]
8494[label="expressionName\n i "]
7495[label="block\n {scoreMap.put(model.catalog[i],probs[i]);} "]
8496[label="expressionStatement\n scoreMap.put(model.catalog[i],probs[i]); "]
9497[label="methodInvocation\n scoreMap.put(model.catalog[i],probs[i]) "]
10498[label="typeName\n scoreMap "]
10499[label="argumentList\n model.catalog[i],probs[i] "]
11500[label="arrayAccess_lfno_primary\n model.catalog[i] "]
12501[label="expressionName\n model.catalog "]
13502[label="ambiguousName\n model "]
12503[label="expressionName\n i "]
11504[label="arrayAccess_lfno_primary\n probs[i] "]
12505[label="expressionName\n probs "]
12506[label="expressionName\n i "]
6507[label="returnStatement\n returnscoreMap; "]
7508[label="expressionName\n scoreMap "]
3509[label="methodDeclaration\n @Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;} "]
4510[label="markerAnnotation\n @Override "]
5511[label="typeName\n Override "]
4512[label="methodModifier\n public "]
4513[label="methodHeader\n intlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException "]
5514[label="integralType\n int "]
5515[label="methodDeclarator\n label(Documentdocument) "]
6516[label="formalParameter\n Documentdocument "]
7517[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7518[label="variableDeclaratorId\n document "]
5519[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6520[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7521[label="classType\n IllegalArgumentException "]
7522[label="classType\n IllegalStateException "]
4523[label="block\n {AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;} "]
5524[label="blockStatements\n AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest; "]
6525[label="localVariableDeclarationStatement\n AbstractModelmodel=getModel(); "]
7526[label="localVariableDeclaration\n AbstractModelmodel=getModel() "]
8527[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractModel "]
8528[label="variableDeclarator\n model=getModel() "]
9529[label="variableDeclaratorId\n model "]
9530[label="methodInvocation_lfno_primary\n getModel() "]
10531[label="methodName\n getModel "]
6532[label="ifThenStatement\n if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
7533[label="equalityExpression\n model==null "]
8534[label="expressionName\n model "]
8535[label="literal\n null "]
7536[label="block\n {thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
8537[label="throwStatement\n thrownewIllegalStateException(\"未训练模型！无法执行预测！\"); "]
9538[label="classInstanceCreationExpression_lfno_primary\n newIllegalStateException(\"未训练模型！无法执行预测！\") "]
10539[label="literal\n \"未训练模型！无法执行预测！\" "]
6540[label="ifThenStatement\n if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");} "]
7541[label="equalityExpression\n document==null "]
8542[label="expressionName\n document "]
8543[label="literal\n null "]
7544[label="block\n {thrownewIllegalArgumentException(\"参数 text == null\");} "]
8545[label="throwStatement\n thrownewIllegalArgumentException(\"参数 text == null\"); "]
9546[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"参数 text == null\") "]
10547[label="literal\n \"参数 text == null\" "]
6548[label="localVariableDeclarationStatement\n double[]probs=categorize(document); "]
7549[label="localVariableDeclaration\n double[]probs=categorize(document) "]
8550[label="unannArrayType\n double[] "]
9551[label="floatingPointType\n double "]
9552[label="dims\n [] "]
8553[label="variableDeclarator\n probs=categorize(document) "]
9554[label="variableDeclaratorId\n probs "]
9555[label="methodInvocation_lfno_primary\n categorize(document) "]
10556[label="methodName\n categorize "]
10557[label="expressionName\n document "]
6558[label="localVariableDeclarationStatement\n doublemax=Double.NEGATIVE_INFINITY; "]
7559[label="localVariableDeclaration\n doublemax=Double.NEGATIVE_INFINITY "]
8560[label="floatingPointType\n double "]
8561[label="variableDeclarator\n max=Double.NEGATIVE_INFINITY "]
9562[label="variableDeclaratorId\n max "]
9563[label="expressionName\n Double.NEGATIVE_INFINITY "]
10564[label="ambiguousName\n Double "]
6565[label="localVariableDeclarationStatement\n intbest=-1; "]
7566[label="localVariableDeclaration\n intbest=-1 "]
8567[label="integralType\n int "]
8568[label="variableDeclarator\n best=-1 "]
9569[label="variableDeclaratorId\n best "]
9570[label="unaryExpression\n -1 "]
10571[label="literal\n 1 "]
6572[label="basicForStatement\n for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}} "]
7573[label="localVariableDeclaration\n inti=0 "]
8574[label="integralType\n int "]
8575[label="variableDeclarator\n i=0 "]
9576[label="variableDeclaratorId\n i "]
9577[label="literal\n 0 "]
7578[label="relationalExpression\n i<probs.length "]
8579[label="expressionName\n i "]
8580[label="expressionName\n probs.length "]
9581[label="ambiguousName\n probs "]
7582[label="postIncrementExpression\n i++ "]
8583[label="expressionName\n i "]
7584[label="block\n {if(probs[i]>max){max=probs[i];best=i;}} "]
8585[label="ifThenStatement\n if(probs[i]>max){max=probs[i];best=i;} "]
9586[label="relationalExpression\n probs[i]>max "]
10587[label="arrayAccess_lfno_primary\n probs[i] "]
11588[label="expressionName\n probs "]
11589[label="expressionName\n i "]
10590[label="expressionName\n max "]
9591[label="block\n {max=probs[i];best=i;} "]
10592[label="blockStatements\n max=probs[i];best=i; "]
11593[label="expressionStatement\n max=probs[i]; "]
12594[label="assignment\n max=probs[i] "]
13595[label="expressionName\n max "]
13596[label="assignmentOperator\n = "]
13597[label="arrayAccess_lfno_primary\n probs[i] "]
14598[label="expressionName\n probs "]
14599[label="expressionName\n i "]
11600[label="expressionStatement\n best=i; "]
12601[label="assignment\n best=i "]
13602[label="expressionName\n best "]
13603[label="assignmentOperator\n = "]
13604[label="expressionName\n i "]
6605[label="returnStatement\n returnbest; "]
7606[label="expressionName\n best "]
0607[label="compilationUnit\n packagecom.hankcs.hanlp.mining.word2vec;importjava.io.IOException;importjava.util.Scanner;publicabstractclassAbstractClosestVectors{staticfinalintN=40;protectedScannerscanner;protectedfinalVectorsReadervectorsReader;protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);}protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;}protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;}protectedabstractResultgetTargetVector();finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}}protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}}}<EOF> "]
1608[label="packageDeclaration\n packagecom.hankcs.hanlp.mining.word2vec; "]
2609[label="packageName\n com.hankcs.hanlp.mining.word2vec "]
3610[label="packageName\n com.hankcs.hanlp.mining "]
4611[label="packageName\n com.hankcs.hanlp "]
5612[label="packageName\n com.hankcs "]
6613[label="packageName\n com "]
1614[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
2615[label="typeName\n java.io.IOException "]
3616[label="packageOrTypeName\n java.io "]
4617[label="packageOrTypeName\n java "]
1618[label="singleTypeImportDeclaration\n importjava.util.Scanner; "]
2619[label="typeName\n java.util.Scanner "]
3620[label="packageOrTypeName\n java.util "]
4621[label="packageOrTypeName\n java "]
1622[label="normalClassDeclaration\n publicabstractclassAbstractClosestVectors{staticfinalintN=40;protectedScannerscanner;protectedfinalVectorsReadervectorsReader;protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);}protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;}protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;}protectedabstractResultgetTargetVector();finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}}protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}}} "]
2623[label="classModifier\n public "]
2624[label="classModifier\n abstract "]
2625[label="classBody\n {staticfinalintN=40;protectedScannerscanner;protectedfinalVectorsReadervectorsReader;protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);}protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;}protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;}protectedabstractResultgetTargetVector();finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}}protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}}} "]
3626[label="fieldDeclaration\n staticfinalintN=40; "]
4627[label="fieldModifier\n static "]
4628[label="fieldModifier\n final "]
4629[label="integralType\n int "]
4630[label="variableDeclarator\n N=40 "]
5631[label="variableDeclaratorId\n N "]
5632[label="literal\n 40 "]
3633[label="fieldDeclaration\n protectedScannerscanner; "]
4634[label="fieldModifier\n protected "]
4635[label="unannClassType_lfno_unannClassOrInterfaceType\n Scanner "]
4636[label="variableDeclaratorId\n scanner "]
3637[label="fieldDeclaration\n protectedfinalVectorsReadervectorsReader; "]
4638[label="fieldModifier\n protected "]
4639[label="fieldModifier\n final "]
4640[label="unannClassType_lfno_unannClassOrInterfaceType\n VectorsReader "]
4641[label="variableDeclaratorId\n vectorsReader "]
3642[label="constructorDeclaration\n protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);} "]
4643[label="constructorModifier\n protected "]
4644[label="constructorDeclarator\n AbstractClosestVectors(Stringfile) "]
5645[label="simpleTypeName\n AbstractClosestVectors "]
5646[label="formalParameter\n Stringfile "]
6647[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
6648[label="variableDeclaratorId\n file "]
4649[label="constructorBody\n {vectorsReader=newVectorsReader(file);} "]
5650[label="expressionStatement\n vectorsReader=newVectorsReader(file); "]
6651[label="assignment\n vectorsReader=newVectorsReader(file) "]
7652[label="expressionName\n vectorsReader "]
7653[label="assignmentOperator\n = "]
7654[label="classInstanceCreationExpression_lfno_primary\n newVectorsReader(file) "]
8655[label="expressionName\n file "]
3656[label="methodDeclaration\n protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;} "]
4657[label="methodModifier\n protected "]
4658[label="methodHeader\n String[]nextWords(intn,Stringmsg) "]
5659[label="unannArrayType\n String[] "]
6660[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
6661[label="dims\n [] "]
5662[label="methodDeclarator\n nextWords(intn,Stringmsg) "]
6663[label="formalParameterList\n intn,Stringmsg "]
7664[label="formalParameter\n intn "]
8665[label="integralType\n int "]
8666[label="variableDeclaratorId\n n "]
7667[label="formalParameter\n Stringmsg "]
8668[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8669[label="variableDeclaratorId\n msg "]
4670[label="block\n {System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;} "]
5671[label="blockStatements\n System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords; "]
6672[label="expressionStatement\n System.out.println(msg+\" ('q' to break): \"); "]
7673[label="methodInvocation\n System.out.println(msg+\" ('q' to break): \") "]
8674[label="typeName\n System.out "]
9675[label="packageOrTypeName\n System "]
8676[label="additiveExpression\n msg+\" ('q' to break): \" "]
9677[label="expressionName\n msg "]
9678[label="literal\n \" ('q' to break): \" "]
6679[label="localVariableDeclarationStatement\n String[]words=newString[n]; "]
7680[label="localVariableDeclaration\n String[]words=newString[n] "]
8681[label="unannArrayType\n String[] "]
9682[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
9683[label="dims\n [] "]
8684[label="variableDeclarator\n words=newString[n] "]
9685[label="variableDeclaratorId\n words "]
9686[label="arrayCreationExpression\n newString[n] "]
10687[label="classType_lfno_classOrInterfaceType\n String "]
10688[label="dimExpr\n [n] "]
11689[label="expressionName\n n "]
6690[label="basicForStatement\n for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;} "]
7691[label="localVariableDeclaration\n inti=0 "]
8692[label="integralType\n int "]
8693[label="variableDeclarator\n i=0 "]
9694[label="variableDeclaratorId\n i "]
9695[label="literal\n 0 "]
7696[label="relationalExpression\n i<n "]
8697[label="expressionName\n i "]
8698[label="expressionName\n n "]
7699[label="postIncrementExpression\n i++ "]
8700[label="expressionName\n i "]
7701[label="block\n {Stringword=nextWord();if(word==null)returnnull;words[i]=word;} "]
8702[label="blockStatements\n Stringword=nextWord();if(word==null)returnnull;words[i]=word; "]
9703[label="localVariableDeclarationStatement\n Stringword=nextWord(); "]
10704[label="localVariableDeclaration\n Stringword=nextWord() "]
11705[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
11706[label="variableDeclarator\n word=nextWord() "]
12707[label="variableDeclaratorId\n word "]
12708[label="methodInvocation_lfno_primary\n nextWord() "]
13709[label="methodName\n nextWord "]
9710[label="ifThenStatement\n if(word==null)returnnull; "]
10711[label="equalityExpression\n word==null "]
11712[label="expressionName\n word "]
11713[label="literal\n null "]
10714[label="returnStatement\n returnnull; "]
11715[label="literal\n null "]
9716[label="expressionStatement\n words[i]=word; "]
10717[label="assignment\n words[i]=word "]
11718[label="arrayAccess\n words[i] "]
12719[label="expressionName\n words "]
12720[label="expressionName\n i "]
11721[label="assignmentOperator\n = "]
11722[label="expressionName\n word "]
6723[label="returnStatement\n returnwords; "]
7724[label="expressionName\n words "]
3725[label="methodDeclaration\n protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;} "]
4726[label="methodModifier\n protected "]
4727[label="methodHeader\n StringnextWord() "]
5728[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
5729[label="methodDeclarator\n nextWord() "]
4730[label="block\n {Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;} "]
5731[label="blockStatements\n Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word; "]
6732[label="localVariableDeclarationStatement\n Stringword=scanner.next(); "]
7733[label="localVariableDeclaration\n Stringword=scanner.next() "]
8734[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8735[label="variableDeclarator\n word=scanner.next() "]
9736[label="variableDeclaratorId\n word "]
9737[label="methodInvocation_lfno_primary\n scanner.next() "]
10738[label="typeName\n scanner "]
6739[label="returnStatement\n returnword==null||word.length()==0||word.equals(\"q\")?null:word; "]
7740[label="conditionalExpression\n word==null||word.length()==0||word.equals(\"q\")?null:word "]
8741[label="conditionalOrExpression\n word==null||word.length()==0||word.equals(\"q\") "]
9742[label="conditionalOrExpression\n word==null||word.length()==0 "]
10743[label="equalityExpression\n word==null "]
11744[label="expressionName\n word "]
11745[label="literal\n null "]
10746[label="equalityExpression\n word.length()==0 "]
11747[label="methodInvocation_lfno_primary\n word.length() "]
12748[label="typeName\n word "]
11749[label="literal\n 0 "]
9750[label="methodInvocation_lfno_primary\n word.equals(\"q\") "]
10751[label="typeName\n word "]
10752[label="literal\n \"q\" "]
8753[label="literal\n null "]
8754[label="expressionName\n word "]
3755[label="methodDeclaration\n protectedabstractResultgetTargetVector(); "]
4756[label="methodModifier\n protected "]
4757[label="methodModifier\n abstract "]
4758[label="methodHeader\n ResultgetTargetVector() "]
5759[label="unannClassType_lfno_unannClassOrInterfaceType\n Result "]
5760[label="methodDeclarator\n getTargetVector() "]
4761[label="methodBody\n ; "]
3762[label="methodDeclaration\n finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}} "]
4763[label="methodModifier\n final "]
4764[label="methodModifier\n protected "]
4765[label="methodHeader\n voidexecute()throwsIOException "]
5766[label="result\n void "]
5767[label="methodDeclarator\n execute() "]
5768[label="throws_\n throwsIOException "]
6769[label="classType\n IOException "]
4770[label="block\n {vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}} "]
5771[label="blockStatements\n vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();} "]
6772[label="expressionStatement\n vectorsReader.readVectorFile(); "]
7773[label="methodInvocation\n vectorsReader.readVectorFile() "]
8774[label="typeName\n vectorsReader "]
6775[label="localVariableDeclarationStatement\n finalintwords=vectorsReader.getNumWords(); "]
7776[label="localVariableDeclaration\n finalintwords=vectorsReader.getNumWords() "]
8777[label="variableModifier\n final "]
8778[label="integralType\n int "]
8779[label="variableDeclarator\n words=vectorsReader.getNumWords() "]
9780[label="variableDeclaratorId\n words "]
9781[label="methodInvocation_lfno_primary\n vectorsReader.getNumWords() "]
10782[label="typeName\n vectorsReader "]
6783[label="localVariableDeclarationStatement\n finalintsize=vectorsReader.getSize(); "]
7784[label="localVariableDeclaration\n finalintsize=vectorsReader.getSize() "]
8785[label="variableModifier\n final "]
8786[label="integralType\n int "]
8787[label="variableDeclarator\n size=vectorsReader.getSize() "]
9788[label="variableDeclaratorId\n size "]
9789[label="methodInvocation_lfno_primary\n vectorsReader.getSize() "]
10790[label="typeName\n vectorsReader "]
6791[label="tryStatement\n try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();} "]
7792[label="block\n {scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}} "]
8793[label="blockStatements\n scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);} "]
9794[label="expressionStatement\n scanner=newScanner(System.in); "]
10795[label="assignment\n scanner=newScanner(System.in) "]
11796[label="expressionName\n scanner "]
11797[label="assignmentOperator\n = "]
11798[label="classInstanceCreationExpression_lfno_primary\n newScanner(System.in) "]
12799[label="expressionName\n System.in "]
13800[label="ambiguousName\n System "]
9801[label="localVariableDeclarationStatement\n Resultresult=null; "]
10802[label="localVariableDeclaration\n Resultresult=null "]
11803[label="unannClassType_lfno_unannClassOrInterfaceType\n Result "]
11804[label="variableDeclarator\n result=null "]
12805[label="variableDeclaratorId\n result "]
12806[label="literal\n null "]
9807[label="whileStatement\n while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);} "]
10808[label="equalityExpression\n (result=getTargetVector())!=null "]
11809[label="primaryNoNewArray_lfno_primary\n (result=getTargetVector()) "]
12810[label="assignment\n result=getTargetVector() "]
13811[label="expressionName\n result "]
13812[label="assignmentOperator\n = "]
13813[label="methodInvocation_lfno_primary\n getTargetVector() "]
14814[label="methodName\n getTargetVector "]
11815[label="literal\n null "]
10816[label="block\n {double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);} "]
11817[label="blockStatements\n double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]); "]
12818[label="localVariableDeclarationStatement\n double[]bestd=newdouble[N]; "]
13819[label="localVariableDeclaration\n double[]bestd=newdouble[N] "]
14820[label="unannArrayType\n double[] "]
15821[label="floatingPointType\n double "]
15822[label="dims\n [] "]
14823[label="variableDeclarator\n bestd=newdouble[N] "]
15824[label="variableDeclaratorId\n bestd "]
15825[label="arrayCreationExpression\n newdouble[N] "]
16826[label="floatingPointType\n double "]
16827[label="dimExpr\n [N] "]
17828[label="expressionName\n N "]
12829[label="localVariableDeclarationStatement\n String[]bestw=newString[N]; "]
13830[label="localVariableDeclaration\n String[]bestw=newString[N] "]
14831[label="unannArrayType\n String[] "]
15832[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
15833[label="dims\n [] "]
14834[label="variableDeclarator\n bestw=newString[N] "]
15835[label="variableDeclaratorId\n bestw "]
15836[label="arrayCreationExpression\n newString[N] "]
16837[label="classType_lfno_classOrInterfaceType\n String "]
16838[label="dimExpr\n [N] "]
17839[label="expressionName\n N "]
12840[label="labeledStatement\n next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}} "]
13841[label="basicForStatement\n for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}} "]
14842[label="localVariableDeclaration\n inti=0 "]
15843[label="integralType\n int "]
15844[label="variableDeclarator\n i=0 "]
16845[label="variableDeclaratorId\n i "]
16846[label="literal\n 0 "]
14847[label="relationalExpression\n i<words "]
15848[label="expressionName\n i "]
15849[label="expressionName\n words "]
14850[label="postIncrementExpression\n i++ "]
15851[label="expressionName\n i "]
14852[label="block\n {for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}} "]
15853[label="blockStatements\n for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}} "]
16854[label="enhancedForStatement\n for(intbi:result.bi){if(i==bi)continuenext_word;} "]
17855[label="integralType\n int "]
17856[label="variableDeclaratorId\n bi "]
17857[label="expressionName\n result.bi "]
18858[label="ambiguousName\n result "]
17859[label="block\n {if(i==bi)continuenext_word;} "]
18860[label="ifThenStatement\n if(i==bi)continuenext_word; "]
19861[label="equalityExpression\n i==bi "]
20862[label="expressionName\n i "]
20863[label="expressionName\n bi "]
19864[label="continueStatement\n continuenext_word; "]
16865[label="localVariableDeclarationStatement\n doubledist=0; "]
17866[label="localVariableDeclaration\n doubledist=0 "]
18867[label="floatingPointType\n double "]
18868[label="variableDeclarator\n dist=0 "]
19869[label="variableDeclaratorId\n dist "]
19870[label="literal\n 0 "]
16871[label="basicForStatement\n for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);} "]
17872[label="localVariableDeclaration\n intj=0 "]
18873[label="integralType\n int "]
18874[label="variableDeclarator\n j=0 "]
19875[label="variableDeclaratorId\n j "]
19876[label="literal\n 0 "]
17877[label="relationalExpression\n j<size "]
18878[label="expressionName\n j "]
18879[label="expressionName\n size "]
17880[label="postIncrementExpression\n j++ "]
18881[label="expressionName\n j "]
17882[label="block\n {dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);} "]
18883[label="expressionStatement\n dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j); "]
19884[label="assignment\n dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j) "]
20885[label="expressionName\n dist "]
20886[label="assignmentOperator\n += "]
20887[label="multiplicativeExpression\n result.vec[j]*vectorsReader.getMatrixElement(i,j) "]
21888[label="arrayAccess_lfno_primary\n result.vec[j] "]
22889[label="expressionName\n result.vec "]
23890[label="ambiguousName\n result "]
22891[label="expressionName\n j "]
21892[label="methodInvocation_lfno_primary\n vectorsReader.getMatrixElement(i,j) "]
22893[label="typeName\n vectorsReader "]
22894[label="argumentList\n i,j "]
23895[label="expressionName\n i "]
23896[label="expressionName\n j "]
16897[label="basicForStatement\n for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}} "]
17898[label="localVariableDeclaration\n intj=0 "]
18899[label="integralType\n int "]
18900[label="variableDeclarator\n j=0 "]
19901[label="variableDeclaratorId\n j "]
19902[label="literal\n 0 "]
17903[label="relationalExpression\n j<N "]
18904[label="expressionName\n j "]
18905[label="expressionName\n N "]
17906[label="postIncrementExpression\n j++ "]
18907[label="expressionName\n j "]
17908[label="block\n {if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}} "]
18909[label="ifThenStatement\n if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;} "]
19910[label="relationalExpression\n dist>bestd[j] "]
20911[label="expressionName\n dist "]
20912[label="arrayAccess_lfno_primary\n bestd[j] "]
21913[label="expressionName\n bestd "]
21914[label="expressionName\n j "]
19915[label="block\n {for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;} "]
20916[label="blockStatements\n for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break; "]
21917[label="basicForStatement\n for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];} "]
22918[label="localVariableDeclaration\n intk=N-1 "]
23919[label="integralType\n int "]
23920[label="variableDeclarator\n k=N-1 "]
24921[label="variableDeclaratorId\n k "]
24922[label="additiveExpression\n N-1 "]
25923[label="expressionName\n N "]
25924[label="literal\n 1 "]
22925[label="relationalExpression\n k>j "]
23926[label="expressionName\n k "]
23927[label="expressionName\n j "]
22928[label="postDecrementExpression\n k-- "]
23929[label="expressionName\n k "]
22930[label="block\n {bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];} "]
23931[label="blockStatements\n bestd[k]=bestd[k-1];bestw[k]=bestw[k-1]; "]
24932[label="expressionStatement\n bestd[k]=bestd[k-1]; "]
25933[label="assignment\n bestd[k]=bestd[k-1] "]
26934[label="arrayAccess\n bestd[k] "]
27935[label="expressionName\n bestd "]
27936[label="expressionName\n k "]
26937[label="assignmentOperator\n = "]
26938[label="arrayAccess_lfno_primary\n bestd[k-1] "]
27939[label="expressionName\n bestd "]
27940[label="additiveExpression\n k-1 "]
28941[label="expressionName\n k "]
28942[label="literal\n 1 "]
24943[label="expressionStatement\n bestw[k]=bestw[k-1]; "]
25944[label="assignment\n bestw[k]=bestw[k-1] "]
26945[label="arrayAccess\n bestw[k] "]
27946[label="expressionName\n bestw "]
27947[label="expressionName\n k "]
26948[label="assignmentOperator\n = "]
26949[label="arrayAccess_lfno_primary\n bestw[k-1] "]
27950[label="expressionName\n bestw "]
27951[label="additiveExpression\n k-1 "]
28952[label="expressionName\n k "]
28953[label="literal\n 1 "]
21954[label="expressionStatement\n bestd[j]=dist; "]
22955[label="assignment\n bestd[j]=dist "]
23956[label="arrayAccess\n bestd[j] "]
24957[label="expressionName\n bestd "]
24958[label="expressionName\n j "]
23959[label="assignmentOperator\n = "]
23960[label="expressionName\n dist "]
21961[label="expressionStatement\n bestw[j]=vectorsReader.getWord(i); "]
22962[label="assignment\n bestw[j]=vectorsReader.getWord(i) "]
23963[label="arrayAccess\n bestw[j] "]
24964[label="expressionName\n bestw "]
24965[label="expressionName\n j "]
23966[label="assignmentOperator\n = "]
23967[label="methodInvocation_lfno_primary\n vectorsReader.getWord(i) "]
24968[label="typeName\n vectorsReader "]
24969[label="expressionName\n i "]
21970[label="breakStatement\n break; "]
12971[label="expressionStatement\n System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\"); "]
13972[label="methodInvocation\n System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\") "]
14973[label="typeName\n System.out "]
15974[label="packageOrTypeName\n System "]
14975[label="literal\n \"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\" "]
12976[label="basicForStatement\n for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]); "]
13977[label="localVariableDeclaration\n intj=0 "]
14978[label="integralType\n int "]
14979[label="variableDeclarator\n j=0 "]
15980[label="variableDeclaratorId\n j "]
15981[label="literal\n 0 "]
13982[label="relationalExpression\n j<N "]
14983[label="expressionName\n j "]
14984[label="expressionName\n N "]
13985[label="postIncrementExpression\n j++ "]
14986[label="expressionName\n j "]
13987[label="expressionStatement\n System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]); "]
14988[label="methodInvocation\n System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]) "]
15989[label="typeName\n System.out "]
16990[label="packageOrTypeName\n System "]
15991[label="argumentList\n \"%50s\t\t%f\n\",bestw[j],bestd[j] "]
16992[label="literal\n \"%50s\t\t%f\n\" "]
16993[label="arrayAccess_lfno_primary\n bestw[j] "]
17994[label="expressionName\n bestw "]
17995[label="expressionName\n j "]
16996[label="arrayAccess_lfno_primary\n bestd[j] "]
17997[label="expressionName\n bestd "]
17998[label="expressionName\n j "]
7999[label="finally_\n finally{scanner.close();} "]
81000[label="block\n {scanner.close();} "]
91001[label="expressionStatement\n scanner.close(); "]
101002[label="methodInvocation\n scanner.close() "]
111003[label="typeName\n scanner "]
31004[label="normalClassDeclaration\n protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}} "]
41005[label="classModifier\n protected "]
41006[label="classModifier\n static "]
41007[label="classBody\n {float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}} "]
51008[label="fieldDeclaration\n float[]vec; "]
61009[label="unannArrayType\n float[] "]
71010[label="floatingPointType\n float "]
71011[label="dims\n [] "]
61012[label="variableDeclaratorId\n vec "]
51013[label="fieldDeclaration\n int[]bi; "]
61014[label="unannArrayType\n int[] "]
71015[label="integralType\n int "]
71016[label="dims\n [] "]
61017[label="variableDeclaratorId\n bi "]
51018[label="constructorDeclaration\n publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;} "]
61019[label="constructorModifier\n public "]
61020[label="constructorDeclarator\n Result(float[]vec,int[]bi) "]
71021[label="simpleTypeName\n Result "]
71022[label="formalParameterList\n float[]vec,int[]bi "]
81023[label="formalParameter\n float[]vec "]
91024[label="unannArrayType\n float[] "]
101025[label="floatingPointType\n float "]
101026[label="dims\n [] "]
91027[label="variableDeclaratorId\n vec "]
81028[label="formalParameter\n int[]bi "]
91029[label="unannArrayType\n int[] "]
101030[label="integralType\n int "]
101031[label="dims\n [] "]
91032[label="variableDeclaratorId\n bi "]
61033[label="constructorBody\n {this.vec=vec;this.bi=bi;} "]
71034[label="blockStatements\n this.vec=vec;this.bi=bi; "]
81035[label="expressionStatement\n this.vec=vec; "]
91036[label="assignment\n this.vec=vec "]
101037[label="fieldAccess\n this.vec "]
111038[label="primaryNoNewArray_lfno_primary\n this "]
101039[label="assignmentOperator\n = "]
101040[label="expressionName\n vec "]
81041[label="expressionStatement\n this.bi=bi; "]
91042[label="assignment\n this.bi=bi "]
101043[label="fieldAccess\n this.bi "]
111044[label="primaryNoNewArray_lfno_primary\n this "]
101045[label="assignmentOperator\n = "]
101046[label="expressionName\n bi "]
01047[label="compilationUnit\n packagecom.hankcs.hanlp.classification.corpus;importcom.hankcs.hanlp.classification.models.AbstractModel;importcom.hankcs.hanlp.classification.tokenizers.BigramTokenizer;importcom.hankcs.hanlp.classification.tokenizers.HanLPTokenizer;importcom.hankcs.hanlp.classification.tokenizers.ITokenizer;importcom.hankcs.hanlp.classification.utilities.MathUtility;importcom.hankcs.hanlp.classification.utilities.TextProcessUtility;importjava.io.File;importjava.io.IOException;importjava.util.Map;importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger;publicabstractclassAbstractDataSetimplementsIDataSet{protectedITokenizertokenizer;protectedCatalogcatalog;protectedLexiconlexicon;protectedbooleantestingDataSet;publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;}publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();}publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;}publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);}publicITokenizergetTokenizer(){returntokenizer;}publicCataloggetCatalog(){returncatalog;}publicLexicongetLexicon(){returnlexicon;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);}@OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");}@OverridepublicbooleanisTestingDataSet(){returntestingDataSet;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;}@OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;}@OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;}}<EOF> "]
11048[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.corpus; "]
21049[label="packageName\n com.hankcs.hanlp.classification.corpus "]
31050[label="packageName\n com.hankcs.hanlp.classification "]
41051[label="packageName\n com.hankcs.hanlp "]
51052[label="packageName\n com.hankcs "]
61053[label="packageName\n com "]
11054[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.models.AbstractModel; "]
21055[label="typeName\n com.hankcs.hanlp.classification.models.AbstractModel "]
31056[label="packageOrTypeName\n com.hankcs.hanlp.classification.models "]
41057[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51058[label="packageOrTypeName\n com.hankcs.hanlp "]
61059[label="packageOrTypeName\n com.hankcs "]
71060[label="packageOrTypeName\n com "]
11061[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.BigramTokenizer; "]
21062[label="typeName\n com.hankcs.hanlp.classification.tokenizers.BigramTokenizer "]
31063[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
41064[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51065[label="packageOrTypeName\n com.hankcs.hanlp "]
61066[label="packageOrTypeName\n com.hankcs "]
71067[label="packageOrTypeName\n com "]
11068[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.HanLPTokenizer; "]
21069[label="typeName\n com.hankcs.hanlp.classification.tokenizers.HanLPTokenizer "]
31070[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
41071[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51072[label="packageOrTypeName\n com.hankcs.hanlp "]
61073[label="packageOrTypeName\n com.hankcs "]
71074[label="packageOrTypeName\n com "]
11075[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.ITokenizer; "]
21076[label="typeName\n com.hankcs.hanlp.classification.tokenizers.ITokenizer "]
31077[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
41078[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51079[label="packageOrTypeName\n com.hankcs.hanlp "]
61080[label="packageOrTypeName\n com.hankcs "]
71081[label="packageOrTypeName\n com "]
11082[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.MathUtility; "]
21083[label="typeName\n com.hankcs.hanlp.classification.utilities.MathUtility "]
31084[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
41085[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51086[label="packageOrTypeName\n com.hankcs.hanlp "]
61087[label="packageOrTypeName\n com.hankcs "]
71088[label="packageOrTypeName\n com "]
11089[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.TextProcessUtility; "]
21090[label="typeName\n com.hankcs.hanlp.classification.utilities.TextProcessUtility "]
31091[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
41092[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51093[label="packageOrTypeName\n com.hankcs.hanlp "]
61094[label="packageOrTypeName\n com.hankcs "]
71095[label="packageOrTypeName\n com "]
11096[label="singleTypeImportDeclaration\n importjava.io.File; "]
21097[label="typeName\n java.io.File "]
31098[label="packageOrTypeName\n java.io "]
41099[label="packageOrTypeName\n java "]
11100[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
21101[label="typeName\n java.io.IOException "]
31102[label="packageOrTypeName\n java.io "]
41103[label="packageOrTypeName\n java "]
11104[label="singleTypeImportDeclaration\n importjava.util.Map; "]
21105[label="typeName\n java.util.Map "]
31106[label="packageOrTypeName\n java.util "]
41107[label="packageOrTypeName\n java "]
11108[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger; "]
21109[label="typeName\n com.hankcs.hanlp.classification.utilities.Predefine "]
31110[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
41111[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51112[label="packageOrTypeName\n com.hankcs.hanlp "]
61113[label="packageOrTypeName\n com.hankcs "]
71114[label="packageOrTypeName\n com "]
11115[label="normalClassDeclaration\n publicabstractclassAbstractDataSetimplementsIDataSet{protectedITokenizertokenizer;protectedCatalogcatalog;protectedLexiconlexicon;protectedbooleantestingDataSet;publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;}publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();}publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;}publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);}publicITokenizergetTokenizer(){returntokenizer;}publicCataloggetCatalog(){returncatalog;}publicLexicongetLexicon(){returnlexicon;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);}@OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");}@OverridepublicbooleanisTestingDataSet(){returntestingDataSet;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;}@OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;}@OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;}} "]
21116[label="classModifier\n public "]
21117[label="classModifier\n abstract "]
21118[label="superinterfaces\n implementsIDataSet "]
31119[label="classType\n IDataSet "]
21120[label="classBody\n {protectedITokenizertokenizer;protectedCatalogcatalog;protectedLexiconlexicon;protectedbooleantestingDataSet;publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;}publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();}publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;}publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);}publicITokenizergetTokenizer(){returntokenizer;}publicCataloggetCatalog(){returncatalog;}publicLexicongetLexicon(){returnlexicon;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);}@OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");}@OverridepublicbooleanisTestingDataSet(){returntestingDataSet;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;}@OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;}@OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;}} "]
31121[label="fieldDeclaration\n protectedITokenizertokenizer; "]
41122[label="fieldModifier\n protected "]
41123[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
41124[label="variableDeclaratorId\n tokenizer "]
31125[label="fieldDeclaration\n protectedCatalogcatalog; "]
41126[label="fieldModifier\n protected "]
41127[label="unannClassType_lfno_unannClassOrInterfaceType\n Catalog "]
41128[label="variableDeclaratorId\n catalog "]
31129[label="fieldDeclaration\n protectedLexiconlexicon; "]
41130[label="fieldModifier\n protected "]
41131[label="unannClassType_lfno_unannClassOrInterfaceType\n Lexicon "]
41132[label="variableDeclaratorId\n lexicon "]
31133[label="fieldDeclaration\n protectedbooleantestingDataSet; "]
41134[label="fieldModifier\n protected "]
41135[label="unannPrimitiveType\n boolean "]
41136[label="variableDeclaratorId\n testingDataSet "]
31137[label="constructorDeclaration\n publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;} "]
41138[label="constructorModifier\n public "]
41139[label="constructorDeclarator\n AbstractDataSet(AbstractModelmodel) "]
51140[label="simpleTypeName\n AbstractDataSet "]
51141[label="formalParameter\n AbstractModelmodel "]
61142[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractModel "]
61143[label="variableDeclaratorId\n model "]
41144[label="constructorBody\n {lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;} "]
51145[label="blockStatements\n lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true; "]
61146[label="expressionStatement\n lexicon=newLexicon(model.wordIdTrie); "]
71147[label="assignment\n lexicon=newLexicon(model.wordIdTrie) "]
81148[label="expressionName\n lexicon "]
81149[label="assignmentOperator\n = "]
81150[label="classInstanceCreationExpression_lfno_primary\n newLexicon(model.wordIdTrie) "]
91151[label="expressionName\n model.wordIdTrie "]
101152[label="ambiguousName\n model "]
61153[label="expressionStatement\n tokenizer=model.tokenizer; "]
71154[label="assignment\n tokenizer=model.tokenizer "]
81155[label="expressionName\n tokenizer "]
81156[label="assignmentOperator\n = "]
81157[label="expressionName\n model.tokenizer "]
91158[label="ambiguousName\n model "]
61159[label="expressionStatement\n catalog=newCatalog(model.catalog); "]
71160[label="assignment\n catalog=newCatalog(model.catalog) "]
81161[label="expressionName\n catalog "]
81162[label="assignmentOperator\n = "]
81163[label="classInstanceCreationExpression_lfno_primary\n newCatalog(model.catalog) "]
91164[label="expressionName\n model.catalog "]
101165[label="ambiguousName\n model "]
61166[label="expressionStatement\n testingDataSet=true; "]
71167[label="assignment\n testingDataSet=true "]
81168[label="expressionName\n testingDataSet "]
81169[label="assignmentOperator\n = "]
81170[label="literal\n true "]
31171[label="constructorDeclaration\n publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();} "]
41172[label="constructorModifier\n public "]
41173[label="constructorDeclarator\n AbstractDataSet() "]
51174[label="simpleTypeName\n AbstractDataSet "]
41175[label="constructorBody\n {tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();} "]
51176[label="blockStatements\n tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon(); "]
61177[label="expressionStatement\n tokenizer=newHanLPTokenizer(); "]
71178[label="assignment\n tokenizer=newHanLPTokenizer() "]
81179[label="expressionName\n tokenizer "]
81180[label="assignmentOperator\n = "]
81181[label="classInstanceCreationExpression_lfno_primary\n newHanLPTokenizer() "]
61182[label="expressionStatement\n catalog=newCatalog(); "]
71183[label="assignment\n catalog=newCatalog() "]
81184[label="expressionName\n catalog "]
81185[label="assignmentOperator\n = "]
81186[label="classInstanceCreationExpression_lfno_primary\n newCatalog() "]
61187[label="expressionStatement\n lexicon=newLexicon(); "]
71188[label="assignment\n lexicon=newLexicon() "]
81189[label="expressionName\n lexicon "]
81190[label="assignmentOperator\n = "]
81191[label="classInstanceCreationExpression_lfno_primary\n newLexicon() "]
31192[label="methodDeclaration\n publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;} "]
41193[label="methodModifier\n public "]
41194[label="methodHeader\n IDataSetsetTokenizer(ITokenizertokenizer) "]
51195[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51196[label="methodDeclarator\n setTokenizer(ITokenizertokenizer) "]
61197[label="formalParameter\n ITokenizertokenizer "]
71198[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
71199[label="variableDeclaratorId\n tokenizer "]
41200[label="block\n {this.tokenizer=tokenizer;returnthis;} "]
51201[label="blockStatements\n this.tokenizer=tokenizer;returnthis; "]
61202[label="expressionStatement\n this.tokenizer=tokenizer; "]
71203[label="assignment\n this.tokenizer=tokenizer "]
81204[label="fieldAccess\n this.tokenizer "]
91205[label="primaryNoNewArray_lfno_primary\n this "]
81206[label="assignmentOperator\n = "]
81207[label="expressionName\n tokenizer "]
61208[label="returnStatement\n returnthis; "]
71209[label="primaryNoNewArray_lfno_primary\n this "]
31210[label="methodDeclaration\n publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);} "]
41211[label="methodModifier\n public "]
41212[label="methodHeader\n Documentconvert(Stringcategory,Stringtext) "]
51213[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
51214[label="methodDeclarator\n convert(Stringcategory,Stringtext) "]
61215[label="formalParameterList\n Stringcategory,Stringtext "]
71216[label="formalParameter\n Stringcategory "]
81217[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81218[label="variableDeclaratorId\n category "]
71219[label="formalParameter\n Stringtext "]
81220[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81221[label="variableDeclaratorId\n text "]
41222[label="block\n {String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);} "]
51223[label="blockStatements\n String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray); "]
61224[label="localVariableDeclarationStatement\n String[]tokenArray=tokenizer.segment(text); "]
71225[label="localVariableDeclaration\n String[]tokenArray=tokenizer.segment(text) "]
81226[label="unannArrayType\n String[] "]
91227[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91228[label="dims\n [] "]
81229[label="variableDeclarator\n tokenArray=tokenizer.segment(text) "]
91230[label="variableDeclaratorId\n tokenArray "]
91231[label="methodInvocation_lfno_primary\n tokenizer.segment(text) "]
101232[label="typeName\n tokenizer "]
101233[label="expressionName\n text "]
61234[label="returnStatement\n returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray); "]
71235[label="conditionalExpression\n testingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray) "]
81236[label="expressionName\n testingDataSet "]
81237[label="classInstanceCreationExpression_lfno_primary\n newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray) "]
91238[label="argumentList\n catalog.categoryId,lexicon.wordId,category,tokenArray "]
101239[label="expressionName\n catalog.categoryId "]
111240[label="ambiguousName\n catalog "]
101241[label="expressionName\n lexicon.wordId "]
111242[label="ambiguousName\n lexicon "]
101243[label="expressionName\n category "]
101244[label="expressionName\n tokenArray "]
81245[label="classInstanceCreationExpression_lfno_primary\n newDocument(catalog,lexicon,category,tokenArray) "]
91246[label="argumentList\n catalog,lexicon,category,tokenArray "]
101247[label="expressionName\n catalog "]
101248[label="expressionName\n lexicon "]
101249[label="expressionName\n category "]
101250[label="expressionName\n tokenArray "]
31251[label="methodDeclaration\n publicITokenizergetTokenizer(){returntokenizer;} "]
41252[label="methodModifier\n public "]
41253[label="methodHeader\n ITokenizergetTokenizer() "]
51254[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
51255[label="methodDeclarator\n getTokenizer() "]
41256[label="block\n {returntokenizer;} "]
51257[label="returnStatement\n returntokenizer; "]
61258[label="expressionName\n tokenizer "]
31259[label="methodDeclaration\n publicCataloggetCatalog(){returncatalog;} "]
41260[label="methodModifier\n public "]
41261[label="methodHeader\n CataloggetCatalog() "]
51262[label="unannClassType_lfno_unannClassOrInterfaceType\n Catalog "]
51263[label="methodDeclarator\n getCatalog() "]
41264[label="block\n {returncatalog;} "]
51265[label="returnStatement\n returncatalog; "]
61266[label="expressionName\n catalog "]
31267[label="methodDeclaration\n publicLexicongetLexicon(){returnlexicon;} "]
41268[label="methodModifier\n public "]
41269[label="methodHeader\n LexicongetLexicon() "]
51270[label="unannClassType_lfno_unannClassOrInterfaceType\n Lexicon "]
51271[label="methodDeclarator\n getLexicon() "]
41272[label="block\n {returnlexicon;} "]
51273[label="returnStatement\n returnlexicon; "]
61274[label="expressionName\n lexicon "]
31275[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);} "]
41276[label="markerAnnotation\n @Override "]
51277[label="typeName\n Override "]
41278[label="methodModifier\n public "]
41279[label="methodHeader\n IDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException "]
51280[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51281[label="methodDeclarator\n load(StringfolderPath,StringcharsetName) "]
61282[label="formalParameterList\n StringfolderPath,StringcharsetName "]
71283[label="formalParameter\n StringfolderPath "]
81284[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81285[label="variableDeclaratorId\n folderPath "]
71286[label="formalParameter\n StringcharsetName "]
81287[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81288[label="variableDeclaratorId\n charsetName "]
51289[label="throws_\n throwsIllegalArgumentException,IOException "]
61290[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71291[label="classType\n IllegalArgumentException "]
71292[label="classType\n IOException "]
41293[label="block\n {returnload(folderPath,charsetName,1.);} "]
51294[label="returnStatement\n returnload(folderPath,charsetName,1.); "]
61295[label="methodInvocation_lfno_primary\n load(folderPath,charsetName,1.) "]
71296[label="methodName\n load "]
71297[label="argumentList\n folderPath,charsetName,1. "]
81298[label="expressionName\n folderPath "]
81299[label="expressionName\n charsetName "]
81300[label="literal\n 1. "]
31301[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");} "]
41302[label="markerAnnotation\n @Override "]
51303[label="typeName\n Override "]
41304[label="methodModifier\n public "]
41305[label="methodHeader\n IDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException "]
51306[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51307[label="methodDeclarator\n load(StringfolderPath) "]
61308[label="formalParameter\n StringfolderPath "]
71309[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
71310[label="variableDeclaratorId\n folderPath "]
51311[label="throws_\n throwsIllegalArgumentException,IOException "]
61312[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71313[label="classType\n IllegalArgumentException "]
71314[label="classType\n IOException "]
41315[label="block\n {returnload(folderPath,\"UTF-8\");} "]
51316[label="returnStatement\n returnload(folderPath,\"UTF-8\"); "]
61317[label="methodInvocation_lfno_primary\n load(folderPath,\"UTF-8\") "]
71318[label="methodName\n load "]
71319[label="argumentList\n folderPath,\"UTF-8\" "]
81320[label="expressionName\n folderPath "]
81321[label="literal\n \"UTF-8\" "]
31322[label="methodDeclaration\n @OverridepublicbooleanisTestingDataSet(){returntestingDataSet;} "]
41323[label="markerAnnotation\n @Override "]
51324[label="typeName\n Override "]
41325[label="methodModifier\n public "]
41326[label="methodHeader\n booleanisTestingDataSet() "]
51327[label="unannPrimitiveType\n boolean "]
51328[label="methodDeclarator\n isTestingDataSet() "]
41329[label="block\n {returntestingDataSet;} "]
51330[label="returnStatement\n returntestingDataSet; "]
61331[label="expressionName\n testingDataSet "]
31332[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;} "]
41333[label="markerAnnotation\n @Override "]
51334[label="typeName\n Override "]
41335[label="methodModifier\n public "]
41336[label="methodHeader\n IDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException "]
51337[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51338[label="methodDeclarator\n load(StringfolderPath,StringcharsetName,doublepercentage) "]
61339[label="formalParameterList\n StringfolderPath,StringcharsetName,doublepercentage "]
71340[label="formalParameters\n StringfolderPath,StringcharsetName "]
81341[label="formalParameter\n StringfolderPath "]
91342[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91343[label="variableDeclaratorId\n folderPath "]
81344[label="formalParameter\n StringcharsetName "]
91345[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91346[label="variableDeclaratorId\n charsetName "]
71347[label="formalParameter\n doublepercentage "]
81348[label="floatingPointType\n double "]
81349[label="variableDeclaratorId\n percentage "]
51350[label="throws_\n throwsIllegalArgumentException,IOException "]
61351[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71352[label="classType\n IllegalArgumentException "]
71353[label="classType\n IOException "]
41354[label="block\n {if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;} "]
51355[label="blockStatements\n if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis; "]
61356[label="ifThenStatement\n if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\"); "]
71357[label="equalityExpression\n folderPath==null "]
81358[label="expressionName\n folderPath "]
81359[label="literal\n null "]
71360[label="throwStatement\n thrownewIllegalArgumentException(\"参数 folderPath == null\"); "]
81361[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"参数 folderPath == null\") "]
91362[label="literal\n \"参数 folderPath == null\" "]
61363[label="localVariableDeclarationStatement\n Fileroot=newFile(folderPath); "]
71364[label="localVariableDeclaration\n Fileroot=newFile(folderPath) "]
81365[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
81366[label="variableDeclarator\n root=newFile(folderPath) "]
91367[label="variableDeclaratorId\n root "]
91368[label="classInstanceCreationExpression_lfno_primary\n newFile(folderPath) "]
101369[label="expressionName\n folderPath "]
61370[label="ifThenStatement\n if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath())); "]
71371[label="unaryExpressionNotPlusMinus\n !root.exists() "]
81372[label="methodInvocation_lfno_primary\n root.exists() "]
91373[label="typeName\n root "]
71374[label="throwStatement\n thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath())); "]
81375[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath())) "]
91376[label="methodInvocation_lfno_primary\n String.format(\"目录 %s 不存在\",root.getAbsolutePath()) "]
101377[label="typeName\n String "]
101378[label="argumentList\n \"目录 %s 不存在\",root.getAbsolutePath() "]
111379[label="literal\n \"目录 %s 不存在\" "]
111380[label="methodInvocation_lfno_primary\n root.getAbsolutePath() "]
121381[label="typeName\n root "]
61382[label="ifThenStatement\n if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath())); "]
71383[label="unaryExpressionNotPlusMinus\n !root.isDirectory() "]
81384[label="methodInvocation_lfno_primary\n root.isDirectory() "]
91385[label="typeName\n root "]
71386[label="throwStatement\n thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath())); "]
81387[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath())) "]
91388[label="methodInvocation_lfno_primary\n String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()) "]
101389[label="typeName\n String "]
101390[label="argumentList\n \"目录 %s 不是一个目录\",root.getAbsolutePath() "]
111391[label="literal\n \"目录 %s 不是一个目录\" "]
111392[label="methodInvocation_lfno_primary\n root.getAbsolutePath() "]
121393[label="typeName\n root "]
61394[label="ifThenStatement\n if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\"); "]
71395[label="conditionalOrExpression\n percentage>1.0||percentage<-1.0 "]
81396[label="relationalExpression\n percentage>1.0 "]
91397[label="expressionName\n percentage "]
91398[label="literal\n 1.0 "]
81399[label="relationalExpression\n percentage<-1.0 "]
91400[label="expressionName\n percentage "]
91401[label="unaryExpression\n -1.0 "]
101402[label="literal\n 1.0 "]
71403[label="throwStatement\n thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\"); "]
81404[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\") "]
91405[label="literal\n \"percentage 的绝对值必须介于[0, 1]之间\" "]
61406[label="localVariableDeclarationStatement\n File[]folders=root.listFiles(); "]
71407[label="localVariableDeclaration\n File[]folders=root.listFiles() "]
81408[label="unannArrayType\n File[] "]
91409[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
91410[label="dims\n [] "]
81411[label="variableDeclarator\n folders=root.listFiles() "]
91412[label="variableDeclaratorId\n folders "]
91413[label="methodInvocation_lfno_primary\n root.listFiles() "]
101414[label="typeName\n root "]
61415[label="ifThenStatement\n if(folders==null)returnnull; "]
71416[label="equalityExpression\n folders==null "]
81417[label="expressionName\n folders "]
81418[label="literal\n null "]
71419[label="returnStatement\n returnnull; "]
81420[label="literal\n null "]
61421[label="expressionStatement\n logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath); "]
71422[label="methodInvocation\n logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath) "]
81423[label="typeName\n logger "]
81424[label="argumentList\n \"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath "]
91425[label="literal\n \"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\" "]
91426[label="conditionalExpression\n testingDataSet?\"测试集\":\"训练集\" "]
101427[label="expressionName\n testingDataSet "]
101428[label="literal\n \"测试集\" "]
101429[label="literal\n \"训练集\" "]
91430[label="expressionName\n charsetName "]
91431[label="expressionName\n folderPath "]
61432[label="enhancedForStatement\n for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);} "]
71433[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
71434[label="variableDeclaratorId\n folder "]
71435[label="expressionName\n folders "]
71436[label="block\n {if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);} "]
81437[label="blockStatements\n if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b); "]
91438[label="ifThenStatement\n if(folder.isFile())continue; "]
101439[label="methodInvocation_lfno_primary\n folder.isFile() "]
111440[label="typeName\n folder "]
101441[label="continueStatement\n continue; "]
91442[label="localVariableDeclarationStatement\n File[]files=folder.listFiles(); "]
101443[label="localVariableDeclaration\n File[]files=folder.listFiles() "]
111444[label="unannArrayType\n File[] "]
121445[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
121446[label="dims\n [] "]
111447[label="variableDeclarator\n files=folder.listFiles() "]
121448[label="variableDeclaratorId\n files "]
121449[label="methodInvocation_lfno_primary\n folder.listFiles() "]
131450[label="typeName\n folder "]
91451[label="ifThenStatement\n if(files==null)continue; "]
101452[label="equalityExpression\n files==null "]
111453[label="expressionName\n files "]
111454[label="literal\n null "]
101455[label="continueStatement\n continue; "]
91456[label="localVariableDeclarationStatement\n Stringcategory=folder.getName(); "]
101457[label="localVariableDeclaration\n Stringcategory=folder.getName() "]
111458[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
111459[label="variableDeclarator\n category=folder.getName() "]
121460[label="variableDeclaratorId\n category "]
121461[label="methodInvocation_lfno_primary\n folder.getName() "]
131462[label="typeName\n folder "]
91463[label="expressionStatement\n logger.out(\"[%s]...\",category); "]
101464[label="methodInvocation\n logger.out(\"[%s]...\",category) "]
111465[label="typeName\n logger "]
111466[label="argumentList\n \"[%s]...\",category "]
121467[label="literal\n \"[%s]...\" "]
121468[label="expressionName\n category "]
91469[label="localVariableDeclarationStatement\n intb,e; "]
101470[label="localVariableDeclaration\n intb,e "]
111471[label="integralType\n int "]
111472[label="variableDeclaratorList\n b,e "]
121473[label="variableDeclaratorId\n b "]
121474[label="variableDeclaratorId\n e "]
91475[label="ifThenElseStatement\n if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;} "]
101476[label="relationalExpression\n percentage>0 "]
111477[label="expressionName\n percentage "]
111478[label="literal\n 0 "]
101479[label="block\n {b=0;e=(int)(files.length*percentage);} "]
111480[label="blockStatements\n b=0;e=(int)(files.length*percentage); "]
121481[label="expressionStatement\n b=0; "]
131482[label="assignment\n b=0 "]
141483[label="expressionName\n b "]
141484[label="assignmentOperator\n = "]
141485[label="literal\n 0 "]
121486[label="expressionStatement\n e=(int)(files.length*percentage); "]
131487[label="assignment\n e=(int)(files.length*percentage) "]
141488[label="expressionName\n e "]
141489[label="assignmentOperator\n = "]
141490[label="castExpression\n (int)(files.length*percentage) "]
151491[label="integralType\n int "]
151492[label="primaryNoNewArray_lfno_primary\n (files.length*percentage) "]
161493[label="multiplicativeExpression\n files.length*percentage "]
171494[label="expressionName\n files.length "]
181495[label="ambiguousName\n files "]
171496[label="expressionName\n percentage "]
101497[label="block\n {b=(int)(files.length*(1+percentage));e=files.length;} "]
111498[label="blockStatements\n b=(int)(files.length*(1+percentage));e=files.length; "]
121499[label="expressionStatement\n b=(int)(files.length*(1+percentage)); "]
131500[label="assignment\n b=(int)(files.length*(1+percentage)) "]
141501[label="expressionName\n b "]
141502[label="assignmentOperator\n = "]
141503[label="castExpression\n (int)(files.length*(1+percentage)) "]
151504[label="integralType\n int "]
151505[label="primaryNoNewArray_lfno_primary\n (files.length*(1+percentage)) "]
161506[label="multiplicativeExpression\n files.length*(1+percentage) "]
171507[label="expressionName\n files.length "]
181508[label="ambiguousName\n files "]
171509[label="primaryNoNewArray_lfno_primary\n (1+percentage) "]
181510[label="additiveExpression\n 1+percentage "]
191511[label="literal\n 1 "]
191512[label="expressionName\n percentage "]
121513[label="expressionStatement\n e=files.length; "]
131514[label="assignment\n e=files.length "]
141515[label="expressionName\n e "]
141516[label="assignmentOperator\n = "]
141517[label="expressionName\n files.length "]
151518[label="ambiguousName\n files "]
91519[label="localVariableDeclarationStatement\n intlogEvery=(int)Math.ceil((e-b)/10000f); "]
101520[label="localVariableDeclaration\n intlogEvery=(int)Math.ceil((e-b)/10000f) "]
111521[label="integralType\n int "]
111522[label="variableDeclarator\n logEvery=(int)Math.ceil((e-b)/10000f) "]
121523[label="variableDeclaratorId\n logEvery "]
121524[label="castExpression\n (int)Math.ceil((e-b)/10000f) "]
131525[label="integralType\n int "]
131526[label="methodInvocation_lfno_primary\n Math.ceil((e-b)/10000f) "]
141527[label="typeName\n Math "]
141528[label="multiplicativeExpression\n (e-b)/10000f "]
151529[label="primaryNoNewArray_lfno_primary\n (e-b) "]
161530[label="additiveExpression\n e-b "]
171531[label="expressionName\n e "]
171532[label="expressionName\n b "]
151533[label="literal\n 10000f "]
91534[label="basicForStatement\n for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}} "]
101535[label="localVariableDeclaration\n inti=b "]
111536[label="integralType\n int "]
111537[label="variableDeclarator\n i=b "]
121538[label="variableDeclaratorId\n i "]
121539[label="expressionName\n b "]
101540[label="relationalExpression\n i<e "]
111541[label="expressionName\n i "]
111542[label="expressionName\n e "]
101543[label="postIncrementExpression\n i++ "]
111544[label="expressionName\n i "]
101545[label="block\n {add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}} "]
111546[label="blockStatements\n add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));} "]
121547[label="expressionStatement\n add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName)); "]
131548[label="methodInvocation\n add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName)) "]
141549[label="methodName\n add "]
141550[label="argumentList\n folder.getName(),TextProcessUtility.readTxt(files[i],charsetName) "]
151551[label="methodInvocation_lfno_primary\n folder.getName() "]
161552[label="typeName\n folder "]
151553[label="methodInvocation_lfno_primary\n TextProcessUtility.readTxt(files[i],charsetName) "]
161554[label="typeName\n TextProcessUtility "]
161555[label="argumentList\n files[i],charsetName "]
171556[label="arrayAccess_lfno_primary\n files[i] "]
181557[label="expressionName\n files "]
181558[label="expressionName\n i "]
171559[label="expressionName\n charsetName "]
121560[label="ifThenStatement\n if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));} "]
131561[label="equalityExpression\n i%logEvery==0 "]
141562[label="multiplicativeExpression\n i%logEvery "]
151563[label="expressionName\n i "]
151564[label="expressionName\n logEvery "]
141565[label="literal\n 0 "]
131566[label="block\n {logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));} "]
141567[label="expressionStatement\n logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b)); "]
151568[label="methodInvocation\n logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b)) "]
161569[label="typeName\n logger "]
161570[label="argumentList\n \"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b) "]
171571[label="literal\n \"%c[%s]...%.2f%%\" "]
171572[label="literal\n 13 "]
171573[label="expressionName\n category "]
171574[label="methodInvocation_lfno_primary\n MathUtility.percentage(i-b+1,e-b) "]
181575[label="typeName\n MathUtility "]
181576[label="argumentList\n i-b+1,e-b "]
191577[label="additiveExpression\n i-b+1 "]
201578[label="additiveExpression\n i-b "]
211579[label="expressionName\n i "]
211580[label="expressionName\n b "]
201581[label="literal\n 1 "]
191582[label="additiveExpression\n e-b "]
201583[label="expressionName\n e "]
201584[label="expressionName\n b "]
91585[label="expressionStatement\n logger.out(\" %d 篇文档\n\",e-b); "]
101586[label="methodInvocation\n logger.out(\" %d 篇文档\n\",e-b) "]
111587[label="typeName\n logger "]
111588[label="argumentList\n \" %d 篇文档\n\",e-b "]
121589[label="literal\n \" %d 篇文档\n\" "]
121590[label="additiveExpression\n e-b "]
131591[label="expressionName\n e "]
131592[label="expressionName\n b "]
61593[label="expressionStatement\n logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size()); "]
71594[label="methodInvocation\n logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size()) "]
81595[label="typeName\n logger "]
81596[label="argumentList\n \" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size() "]
91597[label="literal\n \" 加载了 %d 个类目,共 %d 篇文档\n\" "]
91598[label="primary\n getCatalog().size() "]
101599[label="methodInvocation_lfno_primary\n getCatalog() "]
111600[label="methodName\n getCatalog "]
101601[label="methodInvocation_lf_primary\n .size() "]
91602[label="methodInvocation_lfno_primary\n size() "]
101603[label="methodName\n size "]
61604[label="returnStatement\n returnthis; "]
71605[label="primaryNoNewArray_lfno_primary\n this "]
31606[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;} "]
41607[label="markerAnnotation\n @Override "]
51608[label="typeName\n Override "]
41609[label="methodModifier\n public "]
41610[label="methodHeader\n IDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException "]
51611[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51612[label="methodDeclarator\n load(StringfolderPath,doublerate) "]
61613[label="formalParameterList\n StringfolderPath,doublerate "]
71614[label="formalParameter\n StringfolderPath "]
81615[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81616[label="variableDeclaratorId\n folderPath "]
71617[label="formalParameter\n doublerate "]
81618[label="floatingPointType\n double "]
81619[label="variableDeclaratorId\n rate "]
51620[label="throws_\n throwsIllegalArgumentException,IOException "]
61621[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71622[label="classType\n IllegalArgumentException "]
71623[label="classType\n IOException "]
41624[label="block\n {returnnull;} "]
51625[label="returnStatement\n returnnull; "]
61626[label="literal\n null "]
31627[label="methodDeclaration\n @OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;} "]
41628[label="markerAnnotation\n @Override "]
51629[label="typeName\n Override "]
41630[label="methodModifier\n public "]
41631[label="methodHeader\n IDataSetadd(Map<String,String[]>testingDataSet) "]
51632[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51633[label="methodDeclarator\n add(Map<String,String[]>testingDataSet) "]
61634[label="formalParameter\n Map<String,String[]>testingDataSet "]
71635[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String[]> "]
81636[label="typeArguments\n <String,String[]> "]
91637[label="typeArgumentList\n String,String[] "]
101638[label="classType_lfno_classOrInterfaceType\n String "]
101639[label="arrayType\n String[] "]
111640[label="classType_lfno_classOrInterfaceType\n String "]
111641[label="dims\n [] "]
71642[label="variableDeclaratorId\n testingDataSet "]
41643[label="block\n {for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;} "]
51644[label="blockStatements\n for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis; "]
61645[label="enhancedForStatement\n for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}} "]
71646[label="unannClassOrInterfaceType\n Map.Entry<String,String[]> "]
81647[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
81648[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String[]> "]
91649[label="typeArguments\n <String,String[]> "]
101650[label="typeArgumentList\n String,String[] "]
111651[label="classType_lfno_classOrInterfaceType\n String "]
111652[label="arrayType\n String[] "]
121653[label="classType_lfno_classOrInterfaceType\n String "]
121654[label="dims\n [] "]
71655[label="variableDeclaratorId\n entry "]
71656[label="methodInvocation_lfno_primary\n testingDataSet.entrySet() "]
81657[label="typeName\n testingDataSet "]
71658[label="block\n {for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}} "]
81659[label="enhancedForStatement\n for(Stringdocument:entry.getValue()){add(entry.getKey(),document);} "]
91660[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91661[label="variableDeclaratorId\n document "]
91662[label="methodInvocation_lfno_primary\n entry.getValue() "]
101663[label="typeName\n entry "]
91664[label="block\n {add(entry.getKey(),document);} "]
101665[label="expressionStatement\n add(entry.getKey(),document); "]
111666[label="methodInvocation\n add(entry.getKey(),document) "]
121667[label="methodName\n add "]
121668[label="argumentList\n entry.getKey(),document "]
131669[label="methodInvocation_lfno_primary\n entry.getKey() "]
141670[label="typeName\n entry "]
131671[label="expressionName\n document "]
61672[label="returnStatement\n returnthis; "]
71673[label="primaryNoNewArray_lfno_primary\n this "]
01674[label="compilationUnit\n packagecom.hankcs.hanlp.dependency;importcom.hankcs.hanlp.HanLP;importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLSentence;importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLWord;importcom.hankcs.hanlp.corpus.io.IOUtil;importcom.hankcs.hanlp.seg.Segment;importcom.hankcs.hanlp.tokenizer.NLPTokenizer;importcom.hankcs.hanlp.utility.GlobalObjectPool;importjava.util.Map;importjava.util.TreeMap;publicabstractclassAbstractDependencyParserimplementsIDependencyParser{privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true);privateMap<String,String>deprelTranslater;privatebooleanenableDeprelTranslater;@OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;}@OverridepublicSegmentgetSegment(){returnsegment;}@OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;}@OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;}@OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;}publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;}@OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;}}<EOF> "]
11675[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency; "]
21676[label="packageName\n com.hankcs.hanlp.dependency "]
31677[label="packageName\n com.hankcs.hanlp "]
41678[label="packageName\n com.hankcs "]
51679[label="packageName\n com "]
11680[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.HanLP; "]
21681[label="typeName\n com.hankcs.hanlp.HanLP "]
31682[label="packageOrTypeName\n com.hankcs.hanlp "]
41683[label="packageOrTypeName\n com.hankcs "]
51684[label="packageOrTypeName\n com "]
11685[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLSentence; "]
21686[label="typeName\n com.hankcs.hanlp.corpus.dependency.CoNll.CoNLLSentence "]
31687[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency.CoNll "]
41688[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency "]
51689[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
61690[label="packageOrTypeName\n com.hankcs.hanlp "]
71691[label="packageOrTypeName\n com.hankcs "]
81692[label="packageOrTypeName\n com "]
11693[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLWord; "]
21694[label="typeName\n com.hankcs.hanlp.corpus.dependency.CoNll.CoNLLWord "]
31695[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency.CoNll "]
41696[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency "]
51697[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
61698[label="packageOrTypeName\n com.hankcs.hanlp "]
71699[label="packageOrTypeName\n com.hankcs "]
81700[label="packageOrTypeName\n com "]
11701[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
21702[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
31703[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
41704[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
51705[label="packageOrTypeName\n com.hankcs.hanlp "]
61706[label="packageOrTypeName\n com.hankcs "]
71707[label="packageOrTypeName\n com "]
11708[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.Segment; "]
21709[label="typeName\n com.hankcs.hanlp.seg.Segment "]
31710[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
41711[label="packageOrTypeName\n com.hankcs.hanlp "]
51712[label="packageOrTypeName\n com.hankcs "]
61713[label="packageOrTypeName\n com "]
11714[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.tokenizer.NLPTokenizer; "]
21715[label="typeName\n com.hankcs.hanlp.tokenizer.NLPTokenizer "]
31716[label="packageOrTypeName\n com.hankcs.hanlp.tokenizer "]
41717[label="packageOrTypeName\n com.hankcs.hanlp "]
51718[label="packageOrTypeName\n com.hankcs "]
61719[label="packageOrTypeName\n com "]
11720[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.GlobalObjectPool; "]
21721[label="typeName\n com.hankcs.hanlp.utility.GlobalObjectPool "]
31722[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
41723[label="packageOrTypeName\n com.hankcs.hanlp "]
51724[label="packageOrTypeName\n com.hankcs "]
61725[label="packageOrTypeName\n com "]
11726[label="singleTypeImportDeclaration\n importjava.util.Map; "]
21727[label="typeName\n java.util.Map "]
31728[label="packageOrTypeName\n java.util "]
41729[label="packageOrTypeName\n java "]
11730[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
21731[label="typeName\n java.util.TreeMap "]
31732[label="packageOrTypeName\n java.util "]
41733[label="packageOrTypeName\n java "]
11734[label="normalClassDeclaration\n publicabstractclassAbstractDependencyParserimplementsIDependencyParser{privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true);privateMap<String,String>deprelTranslater;privatebooleanenableDeprelTranslater;@OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;}@OverridepublicSegmentgetSegment(){returnsegment;}@OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;}@OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;}@OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;}publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;}@OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;}} "]
21735[label="classModifier\n public "]
21736[label="classModifier\n abstract "]
21737[label="superinterfaces\n implementsIDependencyParser "]
31738[label="classType\n IDependencyParser "]
21739[label="classBody\n {privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true);privateMap<String,String>deprelTranslater;privatebooleanenableDeprelTranslater;@OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;}@OverridepublicSegmentgetSegment(){returnsegment;}@OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;}@OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;}@OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;}publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;}@OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;}} "]
31740[label="fieldDeclaration\n privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true); "]
41741[label="fieldModifier\n private "]
41742[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
41743[label="variableDeclarator\n segment=HanLP.newSegment().enablePartOfSpeechTagging(true) "]
51744[label="variableDeclaratorId\n segment "]
51745[label="primary\n HanLP.newSegment().enablePartOfSpeechTagging(true) "]
61746[label="methodInvocation_lfno_primary\n HanLP.newSegment() "]
71747[label="typeName\n HanLP "]
61748[label="methodInvocation_lf_primary\n .enablePartOfSpeechTagging(true) "]
71749[label="literal\n true "]
31750[label="fieldDeclaration\n privateMap<String,String>deprelTranslater; "]
41751[label="fieldModifier\n private "]
41752[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
51753[label="typeArguments\n <String,String> "]
61754[label="typeArgumentList\n String,String "]
71755[label="classType_lfno_classOrInterfaceType\n String "]
71756[label="classType_lfno_classOrInterfaceType\n String "]
41757[label="variableDeclaratorId\n deprelTranslater "]
31758[label="fieldDeclaration\n privatebooleanenableDeprelTranslater; "]
41759[label="fieldModifier\n private "]
41760[label="unannPrimitiveType\n boolean "]
41761[label="variableDeclaratorId\n enableDeprelTranslater "]
31762[label="methodDeclaration\n @OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;} "]
41763[label="markerAnnotation\n @Override "]
51764[label="typeName\n Override "]
41765[label="methodModifier\n public "]
41766[label="methodHeader\n CoNLLSentenceparse(Stringsentence) "]
51767[label="unannClassType_lfno_unannClassOrInterfaceType\n CoNLLSentence "]
51768[label="methodDeclarator\n parse(Stringsentence) "]
61769[label="formalParameter\n Stringsentence "]
71770[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
71771[label="variableDeclaratorId\n sentence "]
41772[label="block\n {assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;} "]
51773[label="blockStatements\n assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput; "]
61774[label="assertStatement\n assertsentence!=null; "]
71775[label="equalityExpression\n sentence!=null "]
81776[label="expressionName\n sentence "]
81777[label="literal\n null "]
61778[label="localVariableDeclarationStatement\n CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray())); "]
71779[label="localVariableDeclaration\n CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray())) "]
81780[label="unannClassType_lfno_unannClassOrInterfaceType\n CoNLLSentence "]
81781[label="variableDeclarator\n output=parse(segment.seg(sentence.toCharArray())) "]
91782[label="variableDeclaratorId\n output "]
91783[label="methodInvocation_lfno_primary\n parse(segment.seg(sentence.toCharArray())) "]
101784[label="methodName\n parse "]
101785[label="methodInvocation_lfno_primary\n segment.seg(sentence.toCharArray()) "]
111786[label="typeName\n segment "]
111787[label="methodInvocation_lfno_primary\n sentence.toCharArray() "]
121788[label="typeName\n sentence "]
61789[label="ifThenStatement\n if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}} "]
71790[label="conditionalAndExpression\n enableDeprelTranslater&&deprelTranslater!=null "]
81791[label="expressionName\n enableDeprelTranslater "]
81792[label="equalityExpression\n deprelTranslater!=null "]
91793[label="expressionName\n deprelTranslater "]
91794[label="literal\n null "]
71795[label="block\n {for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}} "]
81796[label="enhancedForStatement\n for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;} "]
91797[label="unannClassType_lfno_unannClassOrInterfaceType\n CoNLLWord "]
91798[label="variableDeclaratorId\n word "]
91799[label="expressionName\n output "]
91800[label="block\n {StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;} "]
101801[label="blockStatements\n StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel; "]
111802[label="localVariableDeclarationStatement\n StringtranslatedDeprel=deprelTranslater.get(word.DEPREL); "]
121803[label="localVariableDeclaration\n StringtranslatedDeprel=deprelTranslater.get(word.DEPREL) "]
131804[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
131805[label="variableDeclarator\n translatedDeprel=deprelTranslater.get(word.DEPREL) "]
141806[label="variableDeclaratorId\n translatedDeprel "]
141807[label="methodInvocation_lfno_primary\n deprelTranslater.get(word.DEPREL) "]
151808[label="typeName\n deprelTranslater "]
151809[label="expressionName\n word.DEPREL "]
161810[label="ambiguousName\n word "]
111811[label="expressionStatement\n word.DEPREL=translatedDeprel; "]
121812[label="assignment\n word.DEPREL=translatedDeprel "]
131813[label="expressionName\n word.DEPREL "]
141814[label="ambiguousName\n word "]
131815[label="assignmentOperator\n = "]
131816[label="expressionName\n translatedDeprel "]
61817[label="returnStatement\n returnoutput; "]
71818[label="expressionName\n output "]
31819[label="methodDeclaration\n @OverridepublicSegmentgetSegment(){returnsegment;} "]
41820[label="markerAnnotation\n @Override "]
51821[label="typeName\n Override "]
41822[label="methodModifier\n public "]
41823[label="methodHeader\n SegmentgetSegment() "]
51824[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
51825[label="methodDeclarator\n getSegment() "]
41826[label="block\n {returnsegment;} "]
51827[label="returnStatement\n returnsegment; "]
61828[label="expressionName\n segment "]
31829[label="methodDeclaration\n @OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;} "]
41830[label="markerAnnotation\n @Override "]
51831[label="typeName\n Override "]
41832[label="methodModifier\n public "]
41833[label="methodHeader\n IDependencyParsersetSegment(Segmentsegment) "]
51834[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51835[label="methodDeclarator\n setSegment(Segmentsegment) "]
61836[label="formalParameter\n Segmentsegment "]
71837[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
71838[label="variableDeclaratorId\n segment "]
41839[label="block\n {this.segment=segment;returnthis;} "]
51840[label="blockStatements\n this.segment=segment;returnthis; "]
61841[label="expressionStatement\n this.segment=segment; "]
71842[label="assignment\n this.segment=segment "]
81843[label="fieldAccess\n this.segment "]
91844[label="primaryNoNewArray_lfno_primary\n this "]
81845[label="assignmentOperator\n = "]
81846[label="expressionName\n segment "]
61847[label="returnStatement\n returnthis; "]
71848[label="primaryNoNewArray_lfno_primary\n this "]
31849[label="methodDeclaration\n @OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;} "]
41850[label="markerAnnotation\n @Override "]
51851[label="typeName\n Override "]
41852[label="methodModifier\n public "]
41853[label="methodHeader\n Map<String,String>getDeprelTranslator() "]
51854[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
61855[label="typeArguments\n <String,String> "]
71856[label="typeArgumentList\n String,String "]
81857[label="classType_lfno_classOrInterfaceType\n String "]
81858[label="classType_lfno_classOrInterfaceType\n String "]
51859[label="methodDeclarator\n getDeprelTranslator() "]
41860[label="block\n {returndeprelTranslater;} "]
51861[label="returnStatement\n returndeprelTranslater; "]
61862[label="expressionName\n deprelTranslater "]
31863[label="methodDeclaration\n @OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;} "]
41864[label="markerAnnotation\n @Override "]
51865[label="typeName\n Override "]
41866[label="methodModifier\n public "]
41867[label="methodHeader\n IDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator) "]
51868[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51869[label="methodDeclarator\n setDeprelTranslator(Map<String,String>deprelTranslator) "]
61870[label="formalParameter\n Map<String,String>deprelTranslator "]
71871[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
81872[label="typeArguments\n <String,String> "]
91873[label="typeArgumentList\n String,String "]
101874[label="classType_lfno_classOrInterfaceType\n String "]
101875[label="classType_lfno_classOrInterfaceType\n String "]
71876[label="variableDeclaratorId\n deprelTranslator "]
41877[label="block\n {this.deprelTranslater=deprelTranslator;returnthis;} "]
51878[label="blockStatements\n this.deprelTranslater=deprelTranslator;returnthis; "]
61879[label="expressionStatement\n this.deprelTranslater=deprelTranslator; "]
71880[label="assignment\n this.deprelTranslater=deprelTranslator "]
81881[label="fieldAccess\n this.deprelTranslater "]
91882[label="primaryNoNewArray_lfno_primary\n this "]
81883[label="assignmentOperator\n = "]
81884[label="expressionName\n deprelTranslator "]
61885[label="returnStatement\n returnthis; "]
71886[label="primaryNoNewArray_lfno_primary\n this "]
31887[label="methodDeclaration\n publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;} "]
41888[label="methodModifier\n public "]
41889[label="methodHeader\n IDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath) "]
51890[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51891[label="methodDeclarator\n setDeprelTranslater(StringdeprelTranslatorPath) "]
61892[label="formalParameter\n StringdeprelTranslatorPath "]
71893[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
71894[label="variableDeclaratorId\n deprelTranslatorPath "]
41895[label="block\n {deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;} "]
51896[label="blockStatements\n deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis; "]
61897[label="expressionStatement\n deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath); "]
71898[label="assignment\n deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath) "]
81899[label="expressionName\n deprelTranslater "]
81900[label="assignmentOperator\n = "]
81901[label="methodInvocation_lfno_primary\n GlobalObjectPool.get(deprelTranslatorPath) "]
91902[label="typeName\n GlobalObjectPool "]
91903[label="expressionName\n deprelTranslatorPath "]
61904[label="ifThenStatement\n if(deprelTranslater!=null)returnthis; "]
71905[label="equalityExpression\n deprelTranslater!=null "]
81906[label="expressionName\n deprelTranslater "]
81907[label="literal\n null "]
71908[label="returnStatement\n returnthis; "]
81909[label="primaryNoNewArray_lfno_primary\n this "]
61910[label="localVariableDeclarationStatement\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath); "]
71911[label="localVariableDeclaration\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath) "]
81912[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
91913[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
91914[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
81915[label="variableDeclarator\n iterator=newIOUtil.LineIterator(deprelTranslatorPath) "]
91916[label="variableDeclaratorId\n iterator "]
91917[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(deprelTranslatorPath) "]
101918[label="expressionName\n deprelTranslatorPath "]
61919[label="expressionStatement\n deprelTranslater=newTreeMap<String,String>(); "]
71920[label="assignment\n deprelTranslater=newTreeMap<String,String>() "]
81921[label="expressionName\n deprelTranslater "]
81922[label="assignmentOperator\n = "]
81923[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
91924[label="typeArguments\n <String,String> "]
101925[label="typeArgumentList\n String,String "]
111926[label="classType_lfno_classOrInterfaceType\n String "]
111927[label="classType_lfno_classOrInterfaceType\n String "]
61928[label="whileStatement\n while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);} "]
71929[label="methodInvocation_lfno_primary\n iterator.hasNext() "]
81930[label="typeName\n iterator "]
71931[label="block\n {String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);} "]
81932[label="blockStatements\n String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]); "]
91933[label="localVariableDeclarationStatement\n String[]args=iterator.next().split(\"\\s\"); "]
101934[label="localVariableDeclaration\n String[]args=iterator.next().split(\"\\s\") "]
111935[label="unannArrayType\n String[] "]
121936[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
121937[label="dims\n [] "]
111938[label="variableDeclarator\n args=iterator.next().split(\"\\s\") "]
121939[label="variableDeclaratorId\n args "]
121940[label="primary\n iterator.next().split(\"\\s\") "]
131941[label="methodInvocation_lfno_primary\n iterator.next() "]
141942[label="typeName\n iterator "]
131943[label="methodInvocation_lf_primary\n .split(\"\\s\") "]
141944[label="literal\n \"\\s\" "]
91945[label="expressionStatement\n deprelTranslater.put(args[0],args[1]); "]
101946[label="methodInvocation\n deprelTranslater.put(args[0],args[1]) "]
111947[label="typeName\n deprelTranslater "]
111948[label="argumentList\n args[0],args[1] "]
121949[label="arrayAccess_lfno_primary\n args[0] "]
131950[label="expressionName\n args "]
131951[label="literal\n 0 "]
121952[label="arrayAccess_lfno_primary\n args[1] "]
131953[label="expressionName\n args "]
131954[label="literal\n 1 "]
61955[label="ifThenStatement\n if(deprelTranslater.size()==0){deprelTranslater=null;} "]
71956[label="equalityExpression\n deprelTranslater.size()==0 "]
81957[label="methodInvocation_lfno_primary\n deprelTranslater.size() "]
91958[label="typeName\n deprelTranslater "]
81959[label="literal\n 0 "]
71960[label="block\n {deprelTranslater=null;} "]
81961[label="expressionStatement\n deprelTranslater=null; "]
91962[label="assignment\n deprelTranslater=null "]
101963[label="expressionName\n deprelTranslater "]
101964[label="assignmentOperator\n = "]
101965[label="literal\n null "]
61966[label="expressionStatement\n GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater); "]
71967[label="methodInvocation\n GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater) "]
81968[label="typeName\n GlobalObjectPool "]
81969[label="argumentList\n deprelTranslatorPath,deprelTranslater "]
91970[label="expressionName\n deprelTranslatorPath "]
91971[label="expressionName\n deprelTranslater "]
61972[label="returnStatement\n returnthis; "]
71973[label="primaryNoNewArray_lfno_primary\n this "]
31974[label="methodDeclaration\n @OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;} "]
41975[label="markerAnnotation\n @Override "]
51976[label="typeName\n Override "]
41977[label="methodModifier\n public "]
41978[label="methodHeader\n IDependencyParserenableDeprelTranslator(booleanenable) "]
51979[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51980[label="methodDeclarator\n enableDeprelTranslator(booleanenable) "]
61981[label="formalParameter\n booleanenable "]
71982[label="unannPrimitiveType\n boolean "]
71983[label="variableDeclaratorId\n enable "]
41984[label="block\n {enableDeprelTranslater=enable;returnthis;} "]
51985[label="blockStatements\n enableDeprelTranslater=enable;returnthis; "]
61986[label="expressionStatement\n enableDeprelTranslater=enable; "]
71987[label="assignment\n enableDeprelTranslater=enable "]
81988[label="expressionName\n enableDeprelTranslater "]
81989[label="assignmentOperator\n = "]
81990[label="expressionName\n enable "]
61991[label="returnStatement\n returnthis; "]
71992[label="primaryNoNewArray_lfno_primary\n this "]
01993[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;publicclassAbstractInexactActionimplementsComparable<AbstractInexactAction>{intseed;publicAbstractInexactAction(){}AbstractInexactAction(intname,intrel){seed=rel<<6|name;}publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);}@Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;}publicintname(){return(seed&0x3f);}publicintrel(){return(seed>>6);}}<EOF> "]
11994[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
21995[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
31996[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
41997[label="packageName\n com.hankcs.hanlp.dependency "]
51998[label="packageName\n com.hankcs.hanlp "]
61999[label="packageName\n com.hankcs "]
72000[label="packageName\n com "]
12001[label="normalClassDeclaration\n publicclassAbstractInexactActionimplementsComparable<AbstractInexactAction>{intseed;publicAbstractInexactAction(){}AbstractInexactAction(intname,intrel){seed=rel<<6|name;}publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);}@Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;}publicintname(){return(seed&0x3f);}publicintrel(){return(seed>>6);}} "]
22002[label="classModifier\n public "]
22003[label="superinterfaces\n implementsComparable<AbstractInexactAction> "]
32004[label="classType\n Comparable<AbstractInexactAction> "]
42005[label="typeArguments\n <AbstractInexactAction> "]
52006[label="classType_lfno_classOrInterfaceType\n AbstractInexactAction "]
22007[label="classBody\n {intseed;publicAbstractInexactAction(){}AbstractInexactAction(intname,intrel){seed=rel<<6|name;}publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);}@Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;}publicintname(){return(seed&0x3f);}publicintrel(){return(seed>>6);}} "]
32008[label="fieldDeclaration\n intseed; "]
42009[label="integralType\n int "]
42010[label="variableDeclaratorId\n seed "]
32011[label="constructorDeclaration\n publicAbstractInexactAction(){} "]
42012[label="constructorModifier\n public "]
42013[label="constructorDeclarator\n AbstractInexactAction() "]
52014[label="simpleTypeName\n AbstractInexactAction "]
42015[label="constructorBody\n {} "]
32016[label="constructorDeclaration\n AbstractInexactAction(intname,intrel){seed=rel<<6|name;} "]
42017[label="constructorDeclarator\n AbstractInexactAction(intname,intrel) "]
52018[label="simpleTypeName\n AbstractInexactAction "]
52019[label="formalParameterList\n intname,intrel "]
62020[label="formalParameter\n intname "]
72021[label="integralType\n int "]
72022[label="variableDeclaratorId\n name "]
62023[label="formalParameter\n intrel "]
72024[label="integralType\n int "]
72025[label="variableDeclaratorId\n rel "]
42026[label="constructorBody\n {seed=rel<<6|name;} "]
52027[label="expressionStatement\n seed=rel<<6|name; "]
62028[label="assignment\n seed=rel<<6|name "]
72029[label="expressionName\n seed "]
72030[label="assignmentOperator\n = "]
72031[label="inclusiveOrExpression\n rel<<6|name "]
82032[label="shiftExpression\n rel<<6 "]
92033[label="expressionName\n rel "]
92034[label="literal\n 6 "]
82035[label="expressionName\n name "]
32036[label="methodDeclaration\n publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);} "]
42037[label="methodModifier\n public "]
42038[label="methodHeader\n intcompareTo(AbstractInexactActiono) "]
52039[label="integralType\n int "]
52040[label="methodDeclarator\n compareTo(AbstractInexactActiono) "]
62041[label="formalParameter\n AbstractInexactActiono "]
72042[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractInexactAction "]
72043[label="variableDeclaratorId\n o "]
42044[label="block\n {returnnewInteger(seed).compareTo(o.seed);} "]
52045[label="returnStatement\n returnnewInteger(seed).compareTo(o.seed); "]
62046[label="primary\n newInteger(seed).compareTo(o.seed) "]
72047[label="classInstanceCreationExpression_lfno_primary\n newInteger(seed) "]
82048[label="expressionName\n seed "]
72049[label="methodInvocation_lf_primary\n .compareTo(o.seed) "]
82050[label="expressionName\n o.seed "]
92051[label="ambiguousName\n o "]
32052[label="methodDeclaration\n @Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;} "]
42053[label="markerAnnotation\n @Override "]
52054[label="typeName\n Override "]
42055[label="methodModifier\n public "]
42056[label="methodHeader\n booleanequals(Objectobj) "]
52057[label="unannPrimitiveType\n boolean "]
52058[label="methodDeclarator\n equals(Objectobj) "]
62059[label="formalParameter\n Objectobj "]
72060[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
72061[label="variableDeclaratorId\n obj "]
42062[label="block\n {if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;} "]
52063[label="blockStatements\n if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed; "]
62064[label="ifThenStatement\n if(!(objinstanceofAbstractInexactAction))returnfalse; "]
72065[label="unaryExpressionNotPlusMinus\n !(objinstanceofAbstractInexactAction) "]
82066[label="primaryNoNewArray_lfno_primary\n (objinstanceofAbstractInexactAction) "]
92067[label="relationalExpression\n objinstanceofAbstractInexactAction "]
102068[label="expressionName\n obj "]
102069[label="classType_lfno_classOrInterfaceType\n AbstractInexactAction "]
72070[label="returnStatement\n returnfalse; "]
82071[label="literal\n false "]
62072[label="localVariableDeclarationStatement\n AbstractInexactActiono=(AbstractInexactAction)obj; "]
72073[label="localVariableDeclaration\n AbstractInexactActiono=(AbstractInexactAction)obj "]
82074[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractInexactAction "]
82075[label="variableDeclarator\n o=(AbstractInexactAction)obj "]
92076[label="variableDeclaratorId\n o "]
92077[label="castExpression\n (AbstractInexactAction)obj "]
102078[label="classType_lfno_classOrInterfaceType\n AbstractInexactAction "]
102079[label="expressionName\n obj "]
62080[label="returnStatement\n returnseed==o.seed; "]
72081[label="equalityExpression\n seed==o.seed "]
82082[label="expressionName\n seed "]
82083[label="expressionName\n o.seed "]
92084[label="ambiguousName\n o "]
32085[label="methodDeclaration\n publicintname(){return(seed&0x3f);} "]
42086[label="methodModifier\n public "]
42087[label="methodHeader\n intname() "]
52088[label="integralType\n int "]
52089[label="methodDeclarator\n name() "]
42090[label="block\n {return(seed&0x3f);} "]
52091[label="returnStatement\n return(seed&0x3f); "]
62092[label="primaryNoNewArray_lfno_primary\n (seed&0x3f) "]
72093[label="andExpression\n seed&0x3f "]
82094[label="expressionName\n seed "]
82095[label="literal\n 0x3f "]
32096[label="methodDeclaration\n publicintrel(){return(seed>>6);} "]
42097[label="methodModifier\n public "]
42098[label="methodHeader\n intrel() "]
52099[label="integralType\n int "]
52100[label="methodDeclarator\n rel() "]
42101[label="block\n {return(seed>>6);} "]
52102[label="returnStatement\n return(seed>>6); "]
62103[label="primaryNoNewArray_lfno_primary\n (seed>>6) "]
72104[label="shiftExpression\n seed>>6 "]
82105[label="expressionName\n seed "]
82106[label="literal\n 6 "]
02107[label="compilationUnit\n packagecom.hankcs.hanlp.classification.models;importcom.hankcs.hanlp.collection.trie.bintrie.BinTrie;importcom.hankcs.hanlp.classification.tokenizers.ITokenizer;importjava.io.*;publicclassAbstractModelimplementsSerializable{publicString[]catalog;publicITokenizertokenizer;publicBinTrie<Integer>wordIdTrie;}<EOF> "]
12108[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.models; "]
22109[label="packageName\n com.hankcs.hanlp.classification.models "]
32110[label="packageName\n com.hankcs.hanlp.classification "]
42111[label="packageName\n com.hankcs.hanlp "]
52112[label="packageName\n com.hankcs "]
62113[label="packageName\n com "]
12114[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.bintrie.BinTrie; "]
22115[label="typeName\n com.hankcs.hanlp.collection.trie.bintrie.BinTrie "]
32116[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie.bintrie "]
42117[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
52118[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
62119[label="packageOrTypeName\n com.hankcs.hanlp "]
72120[label="packageOrTypeName\n com.hankcs "]
82121[label="packageOrTypeName\n com "]
12122[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.ITokenizer; "]
22123[label="typeName\n com.hankcs.hanlp.classification.tokenizers.ITokenizer "]
32124[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
42125[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
52126[label="packageOrTypeName\n com.hankcs.hanlp "]
62127[label="packageOrTypeName\n com.hankcs "]
72128[label="packageOrTypeName\n com "]
12129[label="typeImportOnDemandDeclaration\n importjava.io.*; "]
22130[label="packageOrTypeName\n java.io "]
32131[label="packageOrTypeName\n java "]
12132[label="normalClassDeclaration\n publicclassAbstractModelimplementsSerializable{publicString[]catalog;publicITokenizertokenizer;publicBinTrie<Integer>wordIdTrie;} "]
22133[label="classModifier\n public "]
22134[label="superinterfaces\n implementsSerializable "]
32135[label="classType\n Serializable "]
22136[label="classBody\n {publicString[]catalog;publicITokenizertokenizer;publicBinTrie<Integer>wordIdTrie;} "]
32137[label="fieldDeclaration\n publicString[]catalog; "]
42138[label="fieldModifier\n public "]
42139[label="unannArrayType\n String[] "]
52140[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
52141[label="dims\n [] "]
42142[label="variableDeclaratorId\n catalog "]
32143[label="fieldDeclaration\n publicITokenizertokenizer; "]
42144[label="fieldModifier\n public "]
42145[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
42146[label="variableDeclaratorId\n tokenizer "]
32147[label="fieldDeclaration\n publicBinTrie<Integer>wordIdTrie; "]
42148[label="fieldModifier\n public "]
42149[label="unannClassType_lfno_unannClassOrInterfaceType\n BinTrie<Integer> "]
52150[label="typeArguments\n <Integer> "]
62151[label="classType_lfno_classOrInterfaceType\n Integer "]
42152[label="variableDeclaratorId\n wordIdTrie "]
02153[label="compilationUnit\n packagecom.hankcs.hanlp.mining.word2vec;publicabstractclassAbstractTrainer{protectedabstractvoidlocalUsage();protectedvoidparamDesc(Stringparam,Stringdesc){System.err.printf(\"\t%s\n\t\t%s\n\",param,desc);}protectedvoidusage(){System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0);}protectedintargPos(Stringparam,String[]args){returnargPos(param,args,true);}protectedintargPos(Stringparam,String[]args,booleancheckArgNum){for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1;}protectedvoidsetConfig(String[]args,Configconfig){inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1]));}}<EOF> "]
12154[label="packageDeclaration\n packagecom.hankcs.hanlp.mining.word2vec; "]
22155[label="packageName\n com.hankcs.hanlp.mining.word2vec "]
32156[label="packageName\n com.hankcs.hanlp.mining "]
42157[label="packageName\n com.hankcs.hanlp "]
52158[label="packageName\n com.hankcs "]
62159[label="packageName\n com "]
12160[label="normalClassDeclaration\n publicabstractclassAbstractTrainer{protectedabstractvoidlocalUsage();protectedvoidparamDesc(Stringparam,Stringdesc){System.err.printf(\"\t%s\n\t\t%s\n\",param,desc);}protectedvoidusage(){System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0);}protectedintargPos(Stringparam,String[]args){returnargPos(param,args,true);}protectedintargPos(Stringparam,String[]args,booleancheckArgNum){for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1;}protectedvoidsetConfig(String[]args,Configconfig){inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1]));}} "]
22161[label="classModifier\n public "]
22162[label="classModifier\n abstract "]
22163[label="classBody\n {protectedabstractvoidlocalUsage();protectedvoidparamDesc(Stringparam,Stringdesc){System.err.printf(\"\t%s\n\t\t%s\n\",param,desc);}protectedvoidusage(){System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0);}protectedintargPos(Stringparam,String[]args){returnargPos(param,args,true);}protectedintargPos(Stringparam,String[]args,booleancheckArgNum){for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1;}protectedvoidsetConfig(String[]args,Configconfig){inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1]));}} "]
32164[label="methodDeclaration\n protectedabstractvoidlocalUsage(); "]
42165[label="methodModifier\n protected "]
42166[label="methodModifier\n abstract "]
42167[label="methodHeader\n voidlocalUsage() "]
52168[label="result\n void "]
52169[label="methodDeclarator\n localUsage() "]
42170[label="methodBody\n ; "]
32171[label="methodDeclaration\n protectedvoidparamDesc(Stringparam,Stringdesc){System.err.printf(\"\t%s\n\t\t%s\n\",param,desc);} "]
42172[label="methodModifier\n protected "]
42173[label="methodHeader\n voidparamDesc(Stringparam,Stringdesc) "]
52174[label="result\n void "]
52175[label="methodDeclarator\n paramDesc(Stringparam,Stringdesc) "]
62176[label="formalParameterList\n Stringparam,Stringdesc "]
72177[label="formalParameter\n Stringparam "]
82178[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
82179[label="variableDeclaratorId\n param "]
72180[label="formalParameter\n Stringdesc "]
82181[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
82182[label="variableDeclaratorId\n desc "]
42183[label="block\n {System.err.printf(\"\t%s\n\t\t%s\n\",param,desc);} "]
52184[label="expressionStatement\n System.err.printf(\"\t%s\n\t\t%s\n\",param,desc); "]
62185[label="methodInvocation\n System.err.printf(\"\t%s\n\t\t%s\n\",param,desc) "]
72186[label="typeName\n System.err "]
82187[label="packageOrTypeName\n System "]
72188[label="argumentList\n \"\t%s\n\t\t%s\n\",param,desc "]
82189[label="literal\n \"\t%s\n\t\t%s\n\" "]
82190[label="expressionName\n param "]
82191[label="expressionName\n desc "]
32192[label="methodDeclaration\n protectedvoidusage(){System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0);} "]
42193[label="methodModifier\n protected "]
42194[label="methodHeader\n voidusage() "]
52195[label="result\n void "]
52196[label="methodDeclarator\n usage() "]
42197[label="block\n {System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0);} "]
52198[label="blockStatements\n System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0); "]
62199[label="expressionStatement\n System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\"); "]
72200[label="methodInvocation\n System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\") "]
82201[label="typeName\n System.err "]
92202[label="packageOrTypeName\n System "]
82203[label="literal\n \"word2vec Java toolkit v 0.1c\n\n\" "]
62204[label="expressionStatement\n System.err.printf(\"Options:\n\"); "]
72205[label="methodInvocation\n System.err.printf(\"Options:\n\") "]
82206[label="typeName\n System.err "]
92207[label="packageOrTypeName\n System "]
82208[label="literal\n \"Options:\n\" "]
62209[label="expressionStatement\n System.err.printf(\"Parameters for training:\n\"); "]
72210[label="methodInvocation\n System.err.printf(\"Parameters for training:\n\") "]
82211[label="typeName\n System.err "]
92212[label="packageOrTypeName\n System "]
82213[label="literal\n \"Parameters for training:\n\" "]
62214[label="expressionStatement\n paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\"); "]
72215[label="methodInvocation\n paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\") "]
82216[label="methodName\n paramDesc "]
82217[label="argumentList\n \"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\" "]
92218[label="literal\n \"-output <file>\" "]
92219[label="literal\n \"Use <file> to save the resulting word vectors / word clusters\" "]
62220[label="expressionStatement\n paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\"); "]
72221[label="methodInvocation\n paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\") "]
82222[label="methodName\n paramDesc "]
82223[label="argumentList\n \"-size <int>\",\"Set size of word vectors; default is 100\" "]
92224[label="literal\n \"-size <int>\" "]
92225[label="literal\n \"Set size of word vectors; default is 100\" "]
62226[label="expressionStatement\n paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\"); "]
72227[label="methodInvocation\n paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\") "]
82228[label="methodName\n paramDesc "]
82229[label="argumentList\n \"-window <int>\",\"Set max skip length between words; default is 5\" "]
92230[label="literal\n \"-window <int>\" "]
92231[label="literal\n \"Set max skip length between words; default is 5\" "]
62232[label="expressionStatement\n paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\"); "]
72233[label="methodInvocation\n paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\") "]
82234[label="methodName\n paramDesc "]
82235[label="argumentList\n \"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\" "]
92236[label="literal\n \"-sample <float>\" "]
92237[label="additiveExpression\n \"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\" "]
102238[label="literal\n \"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\" "]
102239[label="literal\n \" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\" "]
62240[label="expressionStatement\n paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\"); "]
72241[label="methodInvocation\n paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\") "]
82242[label="methodName\n paramDesc "]
82243[label="argumentList\n \"-hs\",\"Use Hierarchical Softmax; default is not used\" "]
92244[label="literal\n \"-hs\" "]
92245[label="literal\n \"Use Hierarchical Softmax; default is not used\" "]
62246[label="expressionStatement\n paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\"); "]
72247[label="methodInvocation\n paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\") "]
82248[label="methodName\n paramDesc "]
82249[label="argumentList\n \"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\" "]
92250[label="literal\n \"-negative <int>\" "]
92251[label="literal\n \"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\" "]
62252[label="expressionStatement\n paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\"); "]
72253[label="methodInvocation\n paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\") "]
82254[label="methodName\n paramDesc "]
82255[label="argumentList\n \"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\" "]
92256[label="literal\n \"-threads <int>\" "]
92257[label="literal\n \"Use <int> threads (default is the cores of local machine)\" "]
62258[label="expressionStatement\n paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\"); "]
72259[label="methodInvocation\n paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\") "]
82260[label="methodName\n paramDesc "]
82261[label="argumentList\n \"-iter <int>\",\"Run more training iterations (default 5)\" "]
92262[label="literal\n \"-iter <int>\" "]
92263[label="literal\n \"Run more training iterations (default 5)\" "]
62264[label="expressionStatement\n paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\"); "]
72265[label="methodInvocation\n paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\") "]
82266[label="methodName\n paramDesc "]
82267[label="argumentList\n \"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\" "]
92268[label="literal\n \"-min-count <int>\" "]
92269[label="literal\n \"This will discard words that appear less than <int> times; default is 5\" "]
62270[label="expressionStatement\n paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\"); "]
72271[label="methodInvocation\n paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\") "]
82272[label="methodName\n paramDesc "]
82273[label="argumentList\n \"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\" "]
92274[label="literal\n \"-alpha <float>\" "]
92275[label="literal\n \"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\" "]
62276[label="expressionStatement\n paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\"); "]
72277[label="methodInvocation\n paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\") "]
82278[label="methodName\n paramDesc "]
82279[label="argumentList\n \"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\" "]
92280[label="literal\n \"-cbow\" "]
92281[label="literal\n \"Use the continuous bag of words model; default is skip-gram model\" "]
62282[label="expressionStatement\n localUsage(); "]
72283[label="methodInvocation\n localUsage() "]
82284[label="methodName\n localUsage "]
62285[label="expressionStatement\n System.exit(0); "]
72286[label="methodInvocation\n System.exit(0) "]
82287[label="typeName\n System "]
82288[label="literal\n 0 "]
32289[label="methodDeclaration\n protectedintargPos(Stringparam,String[]args){returnargPos(param,args,true);} "]
42290[label="methodModifier\n protected "]
42291[label="methodHeader\n intargPos(Stringparam,String[]args) "]
52292[label="integralType\n int "]
52293[label="methodDeclarator\n argPos(Stringparam,String[]args) "]
62294[label="formalParameterList\n Stringparam,String[]args "]
72295[label="formalParameter\n Stringparam "]
82296[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
82297[label="variableDeclaratorId\n param "]
72298[label="formalParameter\n String[]args "]
82299[label="unannArrayType\n String[] "]
92300[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
92301[label="dims\n [] "]
82302[label="variableDeclaratorId\n args "]
42303[label="block\n {returnargPos(param,args,true);} "]
52304[label="returnStatement\n returnargPos(param,args,true); "]
62305[label="methodInvocation_lfno_primary\n argPos(param,args,true) "]
72306[label="methodName\n argPos "]
72307[label="argumentList\n param,args,true "]
82308[label="expressionName\n param "]
82309[label="expressionName\n args "]
82310[label="literal\n true "]
32311[label="methodDeclaration\n protectedintargPos(Stringparam,String[]args,booleancheckArgNum){for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1;} "]
42312[label="methodModifier\n protected "]
42313[label="methodHeader\n intargPos(Stringparam,String[]args,booleancheckArgNum) "]
52314[label="integralType\n int "]
52315[label="methodDeclarator\n argPos(Stringparam,String[]args,booleancheckArgNum) "]
62316[label="formalParameterList\n Stringparam,String[]args,booleancheckArgNum "]
72317[label="formalParameters\n Stringparam,String[]args "]
82318[label="formalParameter\n Stringparam "]
92319[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
92320[label="variableDeclaratorId\n param "]
82321[label="formalParameter\n String[]args "]
92322[label="unannArrayType\n String[] "]
102323[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
102324[label="dims\n [] "]
92325[label="variableDeclaratorId\n args "]
72326[label="formalParameter\n booleancheckArgNum "]
82327[label="unannPrimitiveType\n boolean "]
82328[label="variableDeclaratorId\n checkArgNum "]
42329[label="block\n {for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1;} "]
52330[label="blockStatements\n for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1; "]
62331[label="basicForStatement\n for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}} "]
72332[label="localVariableDeclaration\n inti=0 "]
82333[label="integralType\n int "]
82334[label="variableDeclarator\n i=0 "]
92335[label="variableDeclaratorId\n i "]
92336[label="literal\n 0 "]
72337[label="relationalExpression\n i<args.length "]
82338[label="expressionName\n i "]
82339[label="expressionName\n args.length "]
92340[label="ambiguousName\n args "]
72341[label="postIncrementExpression\n i++ "]
82342[label="expressionName\n i "]
72343[label="block\n {if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}} "]
82344[label="ifThenStatement\n if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;} "]
92345[label="methodInvocation_lfno_primary\n param.equals(args[i]) "]
102346[label="typeName\n param "]
102347[label="arrayAccess_lfno_primary\n args[i] "]
112348[label="expressionName\n args "]
112349[label="expressionName\n i "]
92350[label="block\n {if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;} "]
102351[label="blockStatements\n if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni; "]
112352[label="ifThenStatement\n if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param)); "]
122353[label="conditionalAndExpression\n checkArgNum&&(i==args.length-1) "]
132354[label="expressionName\n checkArgNum "]
132355[label="primaryNoNewArray_lfno_primary\n (i==args.length-1) "]
142356[label="equalityExpression\n i==args.length-1 "]
152357[label="expressionName\n i "]
152358[label="additiveExpression\n args.length-1 "]
162359[label="expressionName\n args.length "]
172360[label="ambiguousName\n args "]
162361[label="literal\n 1 "]
122362[label="throwStatement\n thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param)); "]
132363[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(String.format(\"Argument missing for %s\",param)) "]
142364[label="methodInvocation_lfno_primary\n String.format(\"Argument missing for %s\",param) "]
152365[label="typeName\n String "]
152366[label="argumentList\n \"Argument missing for %s\",param "]
162367[label="literal\n \"Argument missing for %s\" "]
162368[label="expressionName\n param "]
112369[label="returnStatement\n returni; "]
122370[label="expressionName\n i "]
62371[label="returnStatement\n return-1; "]
72372[label="unaryExpression\n -1 "]
82373[label="literal\n 1 "]
32374[label="methodDeclaration\n protectedvoidsetConfig(String[]args,Configconfig){inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1]));} "]
42375[label="methodModifier\n protected "]
42376[label="methodHeader\n voidsetConfig(String[]args,Configconfig) "]
52377[label="result\n void "]
52378[label="methodDeclarator\n setConfig(String[]args,Configconfig) "]
62379[label="formalParameterList\n String[]args,Configconfig "]
72380[label="formalParameter\n String[]args "]
82381[label="unannArrayType\n String[] "]
92382[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
92383[label="dims\n [] "]
82384[label="variableDeclaratorId\n args "]
72385[label="formalParameter\n Configconfig "]
82386[label="unannClassType_lfno_unannClassOrInterfaceType\n Config "]
82387[label="variableDeclaratorId\n config "]
42388[label="block\n {inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1]));} "]
52389[label="blockStatements\n inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1])); "]
62390[label="localVariableDeclarationStatement\n inti; "]
72391[label="localVariableDeclaration\n inti "]
82392[label="integralType\n int "]
82393[label="variableDeclaratorId\n i "]
62394[label="ifThenStatement\n if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1])); "]
72395[label="relationalExpression\n (i=argPos(\"-size\",args))>=0 "]
82396[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-size\",args)) "]
92397[label="assignment\n i=argPos(\"-size\",args) "]
102398[label="expressionName\n i "]
102399[label="assignmentOperator\n = "]
102400[label="methodInvocation_lfno_primary\n argPos(\"-size\",args) "]
112401[label="methodName\n argPos "]
112402[label="argumentList\n \"-size\",args "]
122403[label="literal\n \"-size\" "]
122404[label="expressionName\n args "]
82405[label="literal\n 0 "]
72406[label="expressionStatement\n config.setLayer1Size(Integer.parseInt(args[i+1])); "]
82407[label="methodInvocation\n config.setLayer1Size(Integer.parseInt(args[i+1])) "]
92408[label="typeName\n config "]
92409[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102410[label="typeName\n Integer "]
102411[label="arrayAccess_lfno_primary\n args[i+1] "]
112412[label="expressionName\n args "]
112413[label="additiveExpression\n i+1 "]
122414[label="expressionName\n i "]
122415[label="literal\n 1 "]
62416[label="ifThenStatement\n if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]); "]
72417[label="relationalExpression\n (i=argPos(\"-output\",args))>=0 "]
82418[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-output\",args)) "]
92419[label="assignment\n i=argPos(\"-output\",args) "]
102420[label="expressionName\n i "]
102421[label="assignmentOperator\n = "]
102422[label="methodInvocation_lfno_primary\n argPos(\"-output\",args) "]
112423[label="methodName\n argPos "]
112424[label="argumentList\n \"-output\",args "]
122425[label="literal\n \"-output\" "]
122426[label="expressionName\n args "]
82427[label="literal\n 0 "]
72428[label="expressionStatement\n config.setOutputFile(args[i+1]); "]
82429[label="methodInvocation\n config.setOutputFile(args[i+1]) "]
92430[label="typeName\n config "]
92431[label="arrayAccess_lfno_primary\n args[i+1] "]
102432[label="expressionName\n args "]
102433[label="additiveExpression\n i+1 "]
112434[label="expressionName\n i "]
112435[label="literal\n 1 "]
62436[label="ifThenStatement\n if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1); "]
72437[label="relationalExpression\n (i=argPos(\"-cbow\",args))>=0 "]
82438[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-cbow\",args)) "]
92439[label="assignment\n i=argPos(\"-cbow\",args) "]
102440[label="expressionName\n i "]
102441[label="assignmentOperator\n = "]
102442[label="methodInvocation_lfno_primary\n argPos(\"-cbow\",args) "]
112443[label="methodName\n argPos "]
112444[label="argumentList\n \"-cbow\",args "]
122445[label="literal\n \"-cbow\" "]
122446[label="expressionName\n args "]
82447[label="literal\n 0 "]
72448[label="expressionStatement\n config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1); "]
82449[label="methodInvocation\n config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1) "]
92450[label="typeName\n config "]
92451[label="equalityExpression\n Integer.parseInt(args[i+1])==1 "]
102452[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
112453[label="typeName\n Integer "]
112454[label="arrayAccess_lfno_primary\n args[i+1] "]
122455[label="expressionName\n args "]
122456[label="additiveExpression\n i+1 "]
132457[label="expressionName\n i "]
132458[label="literal\n 1 "]
102459[label="literal\n 1 "]
62460[label="ifThenStatement\n if(config.useContinuousBagOfWords())config.setAlpha(0.05f); "]
72461[label="methodInvocation_lfno_primary\n config.useContinuousBagOfWords() "]
82462[label="typeName\n config "]
72463[label="expressionStatement\n config.setAlpha(0.05f); "]
82464[label="methodInvocation\n config.setAlpha(0.05f) "]
92465[label="typeName\n config "]
92466[label="literal\n 0.05f "]
62467[label="ifThenStatement\n if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1])); "]
72468[label="relationalExpression\n (i=argPos(\"-alpha\",args))>=0 "]
82469[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-alpha\",args)) "]
92470[label="assignment\n i=argPos(\"-alpha\",args) "]
102471[label="expressionName\n i "]
102472[label="assignmentOperator\n = "]
102473[label="methodInvocation_lfno_primary\n argPos(\"-alpha\",args) "]
112474[label="methodName\n argPos "]
112475[label="argumentList\n \"-alpha\",args "]
122476[label="literal\n \"-alpha\" "]
122477[label="expressionName\n args "]
82478[label="literal\n 0 "]
72479[label="expressionStatement\n config.setAlpha(Float.parseFloat(args[i+1])); "]
82480[label="methodInvocation\n config.setAlpha(Float.parseFloat(args[i+1])) "]
92481[label="typeName\n config "]
92482[label="methodInvocation_lfno_primary\n Float.parseFloat(args[i+1]) "]
102483[label="typeName\n Float "]
102484[label="arrayAccess_lfno_primary\n args[i+1] "]
112485[label="expressionName\n args "]
112486[label="additiveExpression\n i+1 "]
122487[label="expressionName\n i "]
122488[label="literal\n 1 "]
62489[label="ifThenStatement\n if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1])); "]
72490[label="relationalExpression\n (i=argPos(\"-window\",args))>=0 "]
82491[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-window\",args)) "]
92492[label="assignment\n i=argPos(\"-window\",args) "]
102493[label="expressionName\n i "]
102494[label="assignmentOperator\n = "]
102495[label="methodInvocation_lfno_primary\n argPos(\"-window\",args) "]
112496[label="methodName\n argPos "]
112497[label="argumentList\n \"-window\",args "]
122498[label="literal\n \"-window\" "]
122499[label="expressionName\n args "]
82500[label="literal\n 0 "]
72501[label="expressionStatement\n config.setWindow(Integer.parseInt(args[i+1])); "]
82502[label="methodInvocation\n config.setWindow(Integer.parseInt(args[i+1])) "]
92503[label="typeName\n config "]
92504[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102505[label="typeName\n Integer "]
102506[label="arrayAccess_lfno_primary\n args[i+1] "]
112507[label="expressionName\n args "]
112508[label="additiveExpression\n i+1 "]
122509[label="expressionName\n i "]
122510[label="literal\n 1 "]
62511[label="ifThenStatement\n if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1])); "]
72512[label="relationalExpression\n (i=argPos(\"-sample\",args))>=0 "]
82513[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-sample\",args)) "]
92514[label="assignment\n i=argPos(\"-sample\",args) "]
102515[label="expressionName\n i "]
102516[label="assignmentOperator\n = "]
102517[label="methodInvocation_lfno_primary\n argPos(\"-sample\",args) "]
112518[label="methodName\n argPos "]
112519[label="argumentList\n \"-sample\",args "]
122520[label="literal\n \"-sample\" "]
122521[label="expressionName\n args "]
82522[label="literal\n 0 "]
72523[label="expressionStatement\n config.setSample(Float.parseFloat(args[i+1])); "]
82524[label="methodInvocation\n config.setSample(Float.parseFloat(args[i+1])) "]
92525[label="typeName\n config "]
92526[label="methodInvocation_lfno_primary\n Float.parseFloat(args[i+1]) "]
102527[label="typeName\n Float "]
102528[label="arrayAccess_lfno_primary\n args[i+1] "]
112529[label="expressionName\n args "]
112530[label="additiveExpression\n i+1 "]
122531[label="expressionName\n i "]
122532[label="literal\n 1 "]
62533[label="ifThenStatement\n if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1); "]
72534[label="relationalExpression\n (i=argPos(\"-hs\",args))>=0 "]
82535[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-hs\",args)) "]
92536[label="assignment\n i=argPos(\"-hs\",args) "]
102537[label="expressionName\n i "]
102538[label="assignmentOperator\n = "]
102539[label="methodInvocation_lfno_primary\n argPos(\"-hs\",args) "]
112540[label="methodName\n argPos "]
112541[label="argumentList\n \"-hs\",args "]
122542[label="literal\n \"-hs\" "]
122543[label="expressionName\n args "]
82544[label="literal\n 0 "]
72545[label="expressionStatement\n config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1); "]
82546[label="methodInvocation\n config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1) "]
92547[label="typeName\n config "]
92548[label="equalityExpression\n Integer.parseInt(args[i+1])==1 "]
102549[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
112550[label="typeName\n Integer "]
112551[label="arrayAccess_lfno_primary\n args[i+1] "]
122552[label="expressionName\n args "]
122553[label="additiveExpression\n i+1 "]
132554[label="expressionName\n i "]
132555[label="literal\n 1 "]
102556[label="literal\n 1 "]
62557[label="ifThenStatement\n if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1])); "]
72558[label="relationalExpression\n (i=argPos(\"-negative\",args))>=0 "]
82559[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-negative\",args)) "]
92560[label="assignment\n i=argPos(\"-negative\",args) "]
102561[label="expressionName\n i "]
102562[label="assignmentOperator\n = "]
102563[label="methodInvocation_lfno_primary\n argPos(\"-negative\",args) "]
112564[label="methodName\n argPos "]
112565[label="argumentList\n \"-negative\",args "]
122566[label="literal\n \"-negative\" "]
122567[label="expressionName\n args "]
82568[label="literal\n 0 "]
72569[label="expressionStatement\n config.setNegative(Integer.parseInt(args[i+1])); "]
82570[label="methodInvocation\n config.setNegative(Integer.parseInt(args[i+1])) "]
92571[label="typeName\n config "]
92572[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102573[label="typeName\n Integer "]
102574[label="arrayAccess_lfno_primary\n args[i+1] "]
112575[label="expressionName\n args "]
112576[label="additiveExpression\n i+1 "]
122577[label="expressionName\n i "]
122578[label="literal\n 1 "]
62579[label="ifThenStatement\n if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1])); "]
72580[label="relationalExpression\n (i=argPos(\"-threads\",args))>=0 "]
82581[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-threads\",args)) "]
92582[label="assignment\n i=argPos(\"-threads\",args) "]
102583[label="expressionName\n i "]
102584[label="assignmentOperator\n = "]
102585[label="methodInvocation_lfno_primary\n argPos(\"-threads\",args) "]
112586[label="methodName\n argPos "]
112587[label="argumentList\n \"-threads\",args "]
122588[label="literal\n \"-threads\" "]
122589[label="expressionName\n args "]
82590[label="literal\n 0 "]
72591[label="expressionStatement\n config.setNumThreads(Integer.parseInt(args[i+1])); "]
82592[label="methodInvocation\n config.setNumThreads(Integer.parseInt(args[i+1])) "]
92593[label="typeName\n config "]
92594[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102595[label="typeName\n Integer "]
102596[label="arrayAccess_lfno_primary\n args[i+1] "]
112597[label="expressionName\n args "]
112598[label="additiveExpression\n i+1 "]
122599[label="expressionName\n i "]
122600[label="literal\n 1 "]
62601[label="ifThenStatement\n if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1])); "]
72602[label="relationalExpression\n (i=argPos(\"-iter\",args))>=0 "]
82603[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-iter\",args)) "]
92604[label="assignment\n i=argPos(\"-iter\",args) "]
102605[label="expressionName\n i "]
102606[label="assignmentOperator\n = "]
102607[label="methodInvocation_lfno_primary\n argPos(\"-iter\",args) "]
112608[label="methodName\n argPos "]
112609[label="argumentList\n \"-iter\",args "]
122610[label="literal\n \"-iter\" "]
122611[label="expressionName\n args "]
82612[label="literal\n 0 "]
72613[label="expressionStatement\n config.setIter(Integer.parseInt(args[i+1])); "]
82614[label="methodInvocation\n config.setIter(Integer.parseInt(args[i+1])) "]
92615[label="typeName\n config "]
92616[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102617[label="typeName\n Integer "]
102618[label="arrayAccess_lfno_primary\n args[i+1] "]
112619[label="expressionName\n args "]
112620[label="additiveExpression\n i+1 "]
122621[label="expressionName\n i "]
122622[label="literal\n 1 "]
62623[label="ifThenStatement\n if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1])); "]
72624[label="relationalExpression\n (i=argPos(\"-min-count\",args))>=0 "]
82625[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-min-count\",args)) "]
92626[label="assignment\n i=argPos(\"-min-count\",args) "]
102627[label="expressionName\n i "]
102628[label="assignmentOperator\n = "]
102629[label="methodInvocation_lfno_primary\n argPos(\"-min-count\",args) "]
112630[label="methodName\n argPos "]
112631[label="argumentList\n \"-min-count\",args "]
122632[label="literal\n \"-min-count\" "]
122633[label="expressionName\n args "]
82634[label="literal\n 0 "]
72635[label="expressionStatement\n config.setMinCount(Integer.parseInt(args[i+1])); "]
82636[label="methodInvocation\n config.setMinCount(Integer.parseInt(args[i+1])) "]
92637[label="typeName\n config "]
92638[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102639[label="typeName\n Integer "]
102640[label="arrayAccess_lfno_primary\n args[i+1] "]
112641[label="expressionName\n args "]
112642[label="additiveExpression\n i+1 "]
122643[label="expressionName\n i "]
122644[label="literal\n 1 "]
02645[label="compilationUnit\n packagecom.hankcs.hanlp.mining.word2vec;importcom.hankcs.hanlp.algorithm.MaxHeap;importjava.util.*;publicabstractclassAbstractVectorModel<K>{Map<K,Vector>storage;publicAbstractVectorModel(Map<K,Vector>storage){this.storage=storage;}publicAbstractVectorModel(){storage=newTreeMap<K,Vector>();}finalpublicVectorvector(Kkey){Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector;}publicfloatsimilarity(Kwhat,Kwith){VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith);}publicList<Map.Entry<K,Float>>nearest(Kkey,intsize){Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size);}privateList<Map.Entry<K,Float>>nearest(Kkey,Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector){returnnearest(vector,10);}publicList<Map.Entry<K,Float>>nearest(Kkey){returnnearest(key,10);}finalList<Map.Entry<K,Float>>queryNearest(Stringquery,intsize){if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();}}publicabstractVectorquery(Stringquery);publicintsize(){returnstorage.size();}publicintdimension(){if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size();}publicVectorremove(Kkey){returnstorage.remove(key);}}<EOF> "]
12646[label="packageDeclaration\n packagecom.hankcs.hanlp.mining.word2vec; "]
22647[label="packageName\n com.hankcs.hanlp.mining.word2vec "]
32648[label="packageName\n com.hankcs.hanlp.mining "]
42649[label="packageName\n com.hankcs.hanlp "]
52650[label="packageName\n com.hankcs "]
62651[label="packageName\n com "]
12652[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.algorithm.MaxHeap; "]
22653[label="typeName\n com.hankcs.hanlp.algorithm.MaxHeap "]
32654[label="packageOrTypeName\n com.hankcs.hanlp.algorithm "]
42655[label="packageOrTypeName\n com.hankcs.hanlp "]
52656[label="packageOrTypeName\n com.hankcs "]
62657[label="packageOrTypeName\n com "]
12658[label="typeImportOnDemandDeclaration\n importjava.util.*; "]
22659[label="packageOrTypeName\n java.util "]
32660[label="packageOrTypeName\n java "]
12661[label="normalClassDeclaration\n publicabstractclassAbstractVectorModel<K>{Map<K,Vector>storage;publicAbstractVectorModel(Map<K,Vector>storage){this.storage=storage;}publicAbstractVectorModel(){storage=newTreeMap<K,Vector>();}finalpublicVectorvector(Kkey){Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector;}publicfloatsimilarity(Kwhat,Kwith){VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith);}publicList<Map.Entry<K,Float>>nearest(Kkey,intsize){Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size);}privateList<Map.Entry<K,Float>>nearest(Kkey,Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector){returnnearest(vector,10);}publicList<Map.Entry<K,Float>>nearest(Kkey){returnnearest(key,10);}finalList<Map.Entry<K,Float>>queryNearest(Stringquery,intsize){if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();}}publicabstractVectorquery(Stringquery);publicintsize(){returnstorage.size();}publicintdimension(){if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size();}publicVectorremove(Kkey){returnstorage.remove(key);}} "]
22662[label="classModifier\n public "]
22663[label="classModifier\n abstract "]
22664[label="typeParameters\n <K> "]
32665[label="typeParameter\n K "]
22666[label="classBody\n {Map<K,Vector>storage;publicAbstractVectorModel(Map<K,Vector>storage){this.storage=storage;}publicAbstractVectorModel(){storage=newTreeMap<K,Vector>();}finalpublicVectorvector(Kkey){Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector;}publicfloatsimilarity(Kwhat,Kwith){VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith);}publicList<Map.Entry<K,Float>>nearest(Kkey,intsize){Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size);}privateList<Map.Entry<K,Float>>nearest(Kkey,Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector){returnnearest(vector,10);}publicList<Map.Entry<K,Float>>nearest(Kkey){returnnearest(key,10);}finalList<Map.Entry<K,Float>>queryNearest(Stringquery,intsize){if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();}}publicabstractVectorquery(Stringquery);publicintsize(){returnstorage.size();}publicintdimension(){if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size();}publicVectorremove(Kkey){returnstorage.remove(key);}} "]
32667[label="fieldDeclaration\n Map<K,Vector>storage; "]
42668[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<K,Vector> "]
52669[label="typeArguments\n <K,Vector> "]
62670[label="typeArgumentList\n K,Vector "]
72671[label="classType_lfno_classOrInterfaceType\n K "]
72672[label="classType_lfno_classOrInterfaceType\n Vector "]
42673[label="variableDeclaratorId\n storage "]
32674[label="constructorDeclaration\n publicAbstractVectorModel(Map<K,Vector>storage){this.storage=storage;} "]
42675[label="constructorModifier\n public "]
42676[label="constructorDeclarator\n AbstractVectorModel(Map<K,Vector>storage) "]
52677[label="simpleTypeName\n AbstractVectorModel "]
52678[label="formalParameter\n Map<K,Vector>storage "]
62679[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<K,Vector> "]
72680[label="typeArguments\n <K,Vector> "]
82681[label="typeArgumentList\n K,Vector "]
92682[label="classType_lfno_classOrInterfaceType\n K "]
92683[label="classType_lfno_classOrInterfaceType\n Vector "]
62684[label="variableDeclaratorId\n storage "]
42685[label="constructorBody\n {this.storage=storage;} "]
52686[label="expressionStatement\n this.storage=storage; "]
62687[label="assignment\n this.storage=storage "]
72688[label="fieldAccess\n this.storage "]
82689[label="primaryNoNewArray_lfno_primary\n this "]
72690[label="assignmentOperator\n = "]
72691[label="expressionName\n storage "]
32692[label="constructorDeclaration\n publicAbstractVectorModel(){storage=newTreeMap<K,Vector>();} "]
42693[label="constructorModifier\n public "]
42694[label="constructorDeclarator\n AbstractVectorModel() "]
52695[label="simpleTypeName\n AbstractVectorModel "]
42696[label="constructorBody\n {storage=newTreeMap<K,Vector>();} "]
52697[label="expressionStatement\n storage=newTreeMap<K,Vector>(); "]
62698[label="assignment\n storage=newTreeMap<K,Vector>() "]
72699[label="expressionName\n storage "]
72700[label="assignmentOperator\n = "]
72701[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<K,Vector>() "]
82702[label="typeArguments\n <K,Vector> "]
92703[label="typeArgumentList\n K,Vector "]
102704[label="classType_lfno_classOrInterfaceType\n K "]
102705[label="classType_lfno_classOrInterfaceType\n Vector "]
32706[label="methodDeclaration\n finalpublicVectorvector(Kkey){Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector;} "]
42707[label="methodModifier\n final "]
42708[label="methodModifier\n public "]
42709[label="methodHeader\n Vectorvector(Kkey) "]
52710[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
52711[label="methodDeclarator\n vector(Kkey) "]
62712[label="formalParameter\n Kkey "]
72713[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
72714[label="variableDeclaratorId\n key "]
42715[label="block\n {Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector;} "]
52716[label="blockStatements\n Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector; "]
62717[label="localVariableDeclarationStatement\n Vectorvector=storage.get(key); "]
72718[label="localVariableDeclaration\n Vectorvector=storage.get(key) "]
82719[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
82720[label="variableDeclarator\n vector=storage.get(key) "]
92721[label="variableDeclaratorId\n vector "]
92722[label="methodInvocation_lfno_primary\n storage.get(key) "]
102723[label="typeName\n storage "]
102724[label="expressionName\n key "]
62725[label="ifThenStatement\n if(vector==null)returnnull; "]
72726[label="equalityExpression\n vector==null "]
82727[label="expressionName\n vector "]
82728[label="literal\n null "]
72729[label="returnStatement\n returnnull; "]
82730[label="literal\n null "]
62731[label="returnStatement\n returnvector; "]
72732[label="expressionName\n vector "]
32733[label="methodDeclaration\n publicfloatsimilarity(Kwhat,Kwith){VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith);} "]
42734[label="methodModifier\n public "]
42735[label="methodHeader\n floatsimilarity(Kwhat,Kwith) "]
52736[label="floatingPointType\n float "]
52737[label="methodDeclarator\n similarity(Kwhat,Kwith) "]
62738[label="formalParameterList\n Kwhat,Kwith "]
72739[label="formalParameter\n Kwhat "]
82740[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
82741[label="variableDeclaratorId\n what "]
72742[label="formalParameter\n Kwith "]
82743[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
82744[label="variableDeclaratorId\n with "]
42745[label="block\n {VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith);} "]
52746[label="blockStatements\n VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith); "]
62747[label="localVariableDeclarationStatement\n VectorvectorWhat=storage.get(what); "]
72748[label="localVariableDeclaration\n VectorvectorWhat=storage.get(what) "]
82749[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
82750[label="variableDeclarator\n vectorWhat=storage.get(what) "]
92751[label="variableDeclaratorId\n vectorWhat "]
92752[label="methodInvocation_lfno_primary\n storage.get(what) "]
102753[label="typeName\n storage "]
102754[label="expressionName\n what "]
62755[label="ifThenStatement\n if(vectorWhat==null){return-1f;} "]
72756[label="equalityExpression\n vectorWhat==null "]
82757[label="expressionName\n vectorWhat "]
82758[label="literal\n null "]
72759[label="block\n {return-1f;} "]
82760[label="returnStatement\n return-1f; "]
92761[label="unaryExpression\n -1f "]
102762[label="literal\n 1f "]
62763[label="localVariableDeclarationStatement\n VectorvectorWith=storage.get(with); "]
72764[label="localVariableDeclaration\n VectorvectorWith=storage.get(with) "]
82765[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
82766[label="variableDeclarator\n vectorWith=storage.get(with) "]
92767[label="variableDeclaratorId\n vectorWith "]
92768[label="methodInvocation_lfno_primary\n storage.get(with) "]
102769[label="typeName\n storage "]
102770[label="expressionName\n with "]
62771[label="ifThenStatement\n if(vectorWith==null){return-1f;} "]
72772[label="equalityExpression\n vectorWith==null "]
82773[label="expressionName\n vectorWith "]
82774[label="literal\n null "]
72775[label="block\n {return-1f;} "]
82776[label="returnStatement\n return-1f; "]
92777[label="unaryExpression\n -1f "]
102778[label="literal\n 1f "]
62779[label="returnStatement\n returnvectorWhat.cosineForUnitVector(vectorWith); "]
72780[label="methodInvocation_lfno_primary\n vectorWhat.cosineForUnitVector(vectorWith) "]
82781[label="typeName\n vectorWhat "]
82782[label="expressionName\n vectorWith "]
32783[label="methodDeclaration\n publicList<Map.Entry<K,Float>>nearest(Kkey,intsize){Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size);} "]
42784[label="methodModifier\n public "]
42785[label="methodHeader\n List<Map.Entry<K,Float>>nearest(Kkey,intsize) "]
52786[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
62787[label="typeArguments\n <Map.Entry<K,Float>> "]
72788[label="classOrInterfaceType\n Map.Entry<K,Float> "]
82789[label="classType_lfno_classOrInterfaceType\n Map "]
82790[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
92791[label="typeArguments\n <K,Float> "]
102792[label="typeArgumentList\n K,Float "]
112793[label="classType_lfno_classOrInterfaceType\n K "]
112794[label="classType_lfno_classOrInterfaceType\n Float "]
52795[label="methodDeclarator\n nearest(Kkey,intsize) "]
62796[label="formalParameterList\n Kkey,intsize "]
72797[label="formalParameter\n Kkey "]
82798[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
82799[label="variableDeclaratorId\n key "]
72800[label="formalParameter\n intsize "]
82801[label="integralType\n int "]
82802[label="variableDeclaratorId\n size "]
42803[label="block\n {Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size);} "]
52804[label="blockStatements\n Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size); "]
62805[label="localVariableDeclarationStatement\n Vectorvector=storage.get(key); "]
72806[label="localVariableDeclaration\n Vectorvector=storage.get(key) "]
82807[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
82808[label="variableDeclarator\n vector=storage.get(key) "]
92809[label="variableDeclaratorId\n vector "]
92810[label="methodInvocation_lfno_primary\n storage.get(key) "]
102811[label="typeName\n storage "]
102812[label="expressionName\n key "]
62813[label="ifThenStatement\n if(vector==null){returnCollections.emptyList();} "]
72814[label="equalityExpression\n vector==null "]
82815[label="expressionName\n vector "]
82816[label="literal\n null "]
72817[label="block\n {returnCollections.emptyList();} "]
82818[label="returnStatement\n returnCollections.emptyList(); "]
92819[label="methodInvocation_lfno_primary\n Collections.emptyList() "]
102820[label="typeName\n Collections "]
62821[label="returnStatement\n returnnearest(key,vector,size); "]
72822[label="methodInvocation_lfno_primary\n nearest(key,vector,size) "]
82823[label="methodName\n nearest "]
82824[label="argumentList\n key,vector,size "]
92825[label="expressionName\n key "]
92826[label="expressionName\n vector "]
92827[label="expressionName\n size "]
32828[label="methodDeclaration\n privateList<Map.Entry<K,Float>>nearest(Kkey,Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();} "]
42829[label="methodModifier\n private "]
42830[label="methodHeader\n List<Map.Entry<K,Float>>nearest(Kkey,Vectorvector,intsize) "]
52831[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
62832[label="typeArguments\n <Map.Entry<K,Float>> "]
72833[label="classOrInterfaceType\n Map.Entry<K,Float> "]
82834[label="classType_lfno_classOrInterfaceType\n Map "]
82835[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
92836[label="typeArguments\n <K,Float> "]
102837[label="typeArgumentList\n K,Float "]
112838[label="classType_lfno_classOrInterfaceType\n K "]
112839[label="classType_lfno_classOrInterfaceType\n Float "]
52840[label="methodDeclarator\n nearest(Kkey,Vectorvector,intsize) "]
62841[label="formalParameterList\n Kkey,Vectorvector,intsize "]
72842[label="formalParameters\n Kkey,Vectorvector "]
82843[label="formalParameter\n Kkey "]
92844[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
92845[label="variableDeclaratorId\n key "]
82846[label="formalParameter\n Vectorvector "]
92847[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
92848[label="variableDeclaratorId\n vector "]
72849[label="formalParameter\n intsize "]
82850[label="integralType\n int "]
82851[label="variableDeclaratorId\n size "]
42852[label="block\n {MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();} "]
52853[label="blockStatements\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList(); "]
62854[label="localVariableDeclarationStatement\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}); "]
72855[label="localVariableDeclaration\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
82856[label="unannClassType_lfno_unannClassOrInterfaceType\n MaxHeap<Map.Entry<K,Float>> "]
92857[label="typeArguments\n <Map.Entry<K,Float>> "]
102858[label="classOrInterfaceType\n Map.Entry<K,Float> "]
112859[label="classType_lfno_classOrInterfaceType\n Map "]
112860[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
122861[label="typeArguments\n <K,Float> "]
132862[label="typeArgumentList\n K,Float "]
142863[label="classType_lfno_classOrInterfaceType\n K "]
142864[label="classType_lfno_classOrInterfaceType\n Float "]
82865[label="variableDeclarator\n maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
92866[label="variableDeclaratorId\n maxHeap "]
92867[label="classInstanceCreationExpression_lfno_primary\n newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
102868[label="typeArguments\n <Map.Entry<K,Float>> "]
112869[label="classOrInterfaceType\n Map.Entry<K,Float> "]
122870[label="classType_lfno_classOrInterfaceType\n Map "]
122871[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
132872[label="typeArguments\n <K,Float> "]
142873[label="typeArgumentList\n K,Float "]
152874[label="classType_lfno_classOrInterfaceType\n K "]
152875[label="classType_lfno_classOrInterfaceType\n Float "]
102876[label="argumentList\n size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
112877[label="expressionName\n size "]
112878[label="classInstanceCreationExpression_lfno_primary\n newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
122879[label="typeArguments\n <Map.Entry<K,Float>> "]
132880[label="classOrInterfaceType\n Map.Entry<K,Float> "]
142881[label="classType_lfno_classOrInterfaceType\n Map "]
142882[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
152883[label="typeArguments\n <K,Float> "]
162884[label="typeArgumentList\n K,Float "]
172885[label="classType_lfno_classOrInterfaceType\n K "]
172886[label="classType_lfno_classOrInterfaceType\n Float "]
122887[label="classBody\n {@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
132888[label="methodDeclaration\n @Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());} "]
142889[label="markerAnnotation\n @Override "]
152890[label="typeName\n Override "]
142891[label="methodModifier\n public "]
142892[label="methodHeader\n intcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2) "]
152893[label="integralType\n int "]
152894[label="methodDeclarator\n compare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2) "]
162895[label="formalParameterList\n Map.Entry<K,Float>o1,Map.Entry<K,Float>o2 "]
172896[label="formalParameter\n Map.Entry<K,Float>o1 "]
182897[label="unannClassOrInterfaceType\n Map.Entry<K,Float> "]
192898[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
192899[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Float> "]
202900[label="typeArguments\n <K,Float> "]
212901[label="typeArgumentList\n K,Float "]
222902[label="classType_lfno_classOrInterfaceType\n K "]
222903[label="classType_lfno_classOrInterfaceType\n Float "]
182904[label="variableDeclaratorId\n o1 "]
172905[label="formalParameter\n Map.Entry<K,Float>o2 "]
182906[label="unannClassOrInterfaceType\n Map.Entry<K,Float> "]
192907[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
192908[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Float> "]
202909[label="typeArguments\n <K,Float> "]
212910[label="typeArgumentList\n K,Float "]
222911[label="classType_lfno_classOrInterfaceType\n K "]
222912[label="classType_lfno_classOrInterfaceType\n Float "]
182913[label="variableDeclaratorId\n o2 "]
142914[label="block\n {returno1.getValue().compareTo(o2.getValue());} "]
152915[label="returnStatement\n returno1.getValue().compareTo(o2.getValue()); "]
162916[label="primary\n o1.getValue().compareTo(o2.getValue()) "]
172917[label="methodInvocation_lfno_primary\n o1.getValue() "]
182918[label="typeName\n o1 "]
172919[label="methodInvocation_lf_primary\n .compareTo(o2.getValue()) "]
182920[label="methodInvocation_lfno_primary\n o2.getValue() "]
192921[label="typeName\n o2 "]
62922[label="enhancedForStatement\n for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));} "]
72923[label="unannClassOrInterfaceType\n Map.Entry<K,Vector> "]
82924[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
82925[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Vector> "]
92926[label="typeArguments\n <K,Vector> "]
102927[label="typeArgumentList\n K,Vector "]
112928[label="classType_lfno_classOrInterfaceType\n K "]
112929[label="classType_lfno_classOrInterfaceType\n Vector "]
72930[label="variableDeclaratorId\n entry "]
72931[label="methodInvocation_lfno_primary\n storage.entrySet() "]
82932[label="typeName\n storage "]
72933[label="block\n {if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));} "]
82934[label="blockStatements\n if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector))); "]
92935[label="ifThenStatement\n if(entry.getKey().equals(key)){continue;} "]
102936[label="primary\n entry.getKey().equals(key) "]
112937[label="methodInvocation_lfno_primary\n entry.getKey() "]
122938[label="typeName\n entry "]
112939[label="methodInvocation_lf_primary\n .equals(key) "]
122940[label="expressionName\n key "]
102941[label="block\n {continue;} "]
112942[label="continueStatement\n continue; "]
92943[label="expressionStatement\n maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector))); "]
102944[label="methodInvocation\n maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector))) "]
112945[label="typeName\n maxHeap "]
112946[label="classInstanceCreationExpression_lfno_primary\n newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)) "]
122947[label="typeArguments\n <K,Float> "]
132948[label="typeArgumentList\n K,Float "]
142949[label="classType_lfno_classOrInterfaceType\n K "]
142950[label="classType_lfno_classOrInterfaceType\n Float "]
122951[label="argumentList\n entry.getKey(),entry.getValue().cosineForUnitVector(vector) "]
132952[label="methodInvocation_lfno_primary\n entry.getKey() "]
142953[label="typeName\n entry "]
132954[label="primary\n entry.getValue().cosineForUnitVector(vector) "]
142955[label="methodInvocation_lfno_primary\n entry.getValue() "]
152956[label="typeName\n entry "]
142957[label="methodInvocation_lf_primary\n .cosineForUnitVector(vector) "]
152958[label="expressionName\n vector "]
62959[label="returnStatement\n returnmaxHeap.toList(); "]
72960[label="methodInvocation_lfno_primary\n maxHeap.toList() "]
82961[label="typeName\n maxHeap "]
32962[label="methodDeclaration\n publicList<Map.Entry<K,Float>>nearest(Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();} "]
42963[label="methodModifier\n public "]
42964[label="methodHeader\n List<Map.Entry<K,Float>>nearest(Vectorvector,intsize) "]
52965[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
62966[label="typeArguments\n <Map.Entry<K,Float>> "]
72967[label="classOrInterfaceType\n Map.Entry<K,Float> "]
82968[label="classType_lfno_classOrInterfaceType\n Map "]
82969[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
92970[label="typeArguments\n <K,Float> "]
102971[label="typeArgumentList\n K,Float "]
112972[label="classType_lfno_classOrInterfaceType\n K "]
112973[label="classType_lfno_classOrInterfaceType\n Float "]
52974[label="methodDeclarator\n nearest(Vectorvector,intsize) "]
62975[label="formalParameterList\n Vectorvector,intsize "]
72976[label="formalParameter\n Vectorvector "]
82977[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
82978[label="variableDeclaratorId\n vector "]
72979[label="formalParameter\n intsize "]
82980[label="integralType\n int "]
82981[label="variableDeclaratorId\n size "]
42982[label="block\n {MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();} "]
52983[label="blockStatements\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList(); "]
62984[label="localVariableDeclarationStatement\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}); "]
72985[label="localVariableDeclaration\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
82986[label="unannClassType_lfno_unannClassOrInterfaceType\n MaxHeap<Map.Entry<K,Float>> "]
92987[label="typeArguments\n <Map.Entry<K,Float>> "]
102988[label="classOrInterfaceType\n Map.Entry<K,Float> "]
112989[label="classType_lfno_classOrInterfaceType\n Map "]
112990[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
122991[label="typeArguments\n <K,Float> "]
132992[label="typeArgumentList\n K,Float "]
142993[label="classType_lfno_classOrInterfaceType\n K "]
142994[label="classType_lfno_classOrInterfaceType\n Float "]
82995[label="variableDeclarator\n maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
92996[label="variableDeclaratorId\n maxHeap "]
92997[label="classInstanceCreationExpression_lfno_primary\n newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
102998[label="typeArguments\n <Map.Entry<K,Float>> "]
112999[label="classOrInterfaceType\n Map.Entry<K,Float> "]
123000[label="classType_lfno_classOrInterfaceType\n Map "]
123001[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
133002[label="typeArguments\n <K,Float> "]
143003[label="typeArgumentList\n K,Float "]
153004[label="classType_lfno_classOrInterfaceType\n K "]
153005[label="classType_lfno_classOrInterfaceType\n Float "]
103006[label="argumentList\n size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
113007[label="expressionName\n size "]
113008[label="classInstanceCreationExpression_lfno_primary\n newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
123009[label="typeArguments\n <Map.Entry<K,Float>> "]
133010[label="classOrInterfaceType\n Map.Entry<K,Float> "]
143011[label="classType_lfno_classOrInterfaceType\n Map "]
143012[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
153013[label="typeArguments\n <K,Float> "]
163014[label="typeArgumentList\n K,Float "]
173015[label="classType_lfno_classOrInterfaceType\n K "]
173016[label="classType_lfno_classOrInterfaceType\n Float "]
123017[label="classBody\n {@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
133018[label="methodDeclaration\n @Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());} "]
143019[label="markerAnnotation\n @Override "]
153020[label="typeName\n Override "]
143021[label="methodModifier\n public "]
143022[label="methodHeader\n intcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2) "]
153023[label="integralType\n int "]
153024[label="methodDeclarator\n compare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2) "]
163025[label="formalParameterList\n Map.Entry<K,Float>o1,Map.Entry<K,Float>o2 "]
173026[label="formalParameter\n Map.Entry<K,Float>o1 "]
183027[label="unannClassOrInterfaceType\n Map.Entry<K,Float> "]
193028[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
193029[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Float> "]
203030[label="typeArguments\n <K,Float> "]
213031[label="typeArgumentList\n K,Float "]
223032[label="classType_lfno_classOrInterfaceType\n K "]
223033[label="classType_lfno_classOrInterfaceType\n Float "]
183034[label="variableDeclaratorId\n o1 "]
173035[label="formalParameter\n Map.Entry<K,Float>o2 "]
183036[label="unannClassOrInterfaceType\n Map.Entry<K,Float> "]
193037[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
193038[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Float> "]
203039[label="typeArguments\n <K,Float> "]
213040[label="typeArgumentList\n K,Float "]
223041[label="classType_lfno_classOrInterfaceType\n K "]
223042[label="classType_lfno_classOrInterfaceType\n Float "]
183043[label="variableDeclaratorId\n o2 "]
143044[label="block\n {returno1.getValue().compareTo(o2.getValue());} "]
153045[label="returnStatement\n returno1.getValue().compareTo(o2.getValue()); "]
163046[label="primary\n o1.getValue().compareTo(o2.getValue()) "]
173047[label="methodInvocation_lfno_primary\n o1.getValue() "]
183048[label="typeName\n o1 "]
173049[label="methodInvocation_lf_primary\n .compareTo(o2.getValue()) "]
183050[label="methodInvocation_lfno_primary\n o2.getValue() "]
193051[label="typeName\n o2 "]
63052[label="enhancedForStatement\n for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));} "]
73053[label="unannClassOrInterfaceType\n Map.Entry<K,Vector> "]
83054[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
83055[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Vector> "]
93056[label="typeArguments\n <K,Vector> "]
103057[label="typeArgumentList\n K,Vector "]
113058[label="classType_lfno_classOrInterfaceType\n K "]
113059[label="classType_lfno_classOrInterfaceType\n Vector "]
73060[label="variableDeclaratorId\n entry "]
73061[label="methodInvocation_lfno_primary\n storage.entrySet() "]
83062[label="typeName\n storage "]
73063[label="block\n {maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));} "]
83064[label="expressionStatement\n maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector))); "]
93065[label="methodInvocation\n maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector))) "]
103066[label="typeName\n maxHeap "]
103067[label="classInstanceCreationExpression_lfno_primary\n newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)) "]
113068[label="typeArguments\n <K,Float> "]
123069[label="typeArgumentList\n K,Float "]
133070[label="classType_lfno_classOrInterfaceType\n K "]
133071[label="classType_lfno_classOrInterfaceType\n Float "]
113072[label="argumentList\n entry.getKey(),entry.getValue().cosineForUnitVector(vector) "]
123073[label="methodInvocation_lfno_primary\n entry.getKey() "]
133074[label="typeName\n entry "]
123075[label="primary\n entry.getValue().cosineForUnitVector(vector) "]
133076[label="methodInvocation_lfno_primary\n entry.getValue() "]
143077[label="typeName\n entry "]
133078[label="methodInvocation_lf_primary\n .cosineForUnitVector(vector) "]
143079[label="expressionName\n vector "]
63080[label="returnStatement\n returnmaxHeap.toList(); "]
73081[label="methodInvocation_lfno_primary\n maxHeap.toList() "]
83082[label="typeName\n maxHeap "]
33083[label="methodDeclaration\n publicList<Map.Entry<K,Float>>nearest(Vectorvector){returnnearest(vector,10);} "]
43084[label="methodModifier\n public "]
43085[label="methodHeader\n List<Map.Entry<K,Float>>nearest(Vectorvector) "]
53086[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
63087[label="typeArguments\n <Map.Entry<K,Float>> "]
73088[label="classOrInterfaceType\n Map.Entry<K,Float> "]
83089[label="classType_lfno_classOrInterfaceType\n Map "]
83090[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
93091[label="typeArguments\n <K,Float> "]
103092[label="typeArgumentList\n K,Float "]
113093[label="classType_lfno_classOrInterfaceType\n K "]
113094[label="classType_lfno_classOrInterfaceType\n Float "]
53095[label="methodDeclarator\n nearest(Vectorvector) "]
63096[label="formalParameter\n Vectorvector "]
73097[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
73098[label="variableDeclaratorId\n vector "]
43099[label="block\n {returnnearest(vector,10);} "]
53100[label="returnStatement\n returnnearest(vector,10); "]
63101[label="methodInvocation_lfno_primary\n nearest(vector,10) "]
73102[label="methodName\n nearest "]
73103[label="argumentList\n vector,10 "]
83104[label="expressionName\n vector "]
83105[label="literal\n 10 "]
33106[label="methodDeclaration\n publicList<Map.Entry<K,Float>>nearest(Kkey){returnnearest(key,10);} "]
43107[label="methodModifier\n public "]
43108[label="methodHeader\n List<Map.Entry<K,Float>>nearest(Kkey) "]
53109[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
63110[label="typeArguments\n <Map.Entry<K,Float>> "]
73111[label="classOrInterfaceType\n Map.Entry<K,Float> "]
83112[label="classType_lfno_classOrInterfaceType\n Map "]
83113[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
93114[label="typeArguments\n <K,Float> "]
103115[label="typeArgumentList\n K,Float "]
113116[label="classType_lfno_classOrInterfaceType\n K "]
113117[label="classType_lfno_classOrInterfaceType\n Float "]
53118[label="methodDeclarator\n nearest(Kkey) "]
63119[label="formalParameter\n Kkey "]
73120[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
73121[label="variableDeclaratorId\n key "]
43122[label="block\n {returnnearest(key,10);} "]
53123[label="returnStatement\n returnnearest(key,10); "]
63124[label="methodInvocation_lfno_primary\n nearest(key,10) "]
73125[label="methodName\n nearest "]
73126[label="argumentList\n key,10 "]
83127[label="expressionName\n key "]
83128[label="literal\n 10 "]
33129[label="methodDeclaration\n finalList<Map.Entry<K,Float>>queryNearest(Stringquery,intsize){if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();}} "]
43130[label="methodModifier\n final "]
43131[label="methodHeader\n List<Map.Entry<K,Float>>queryNearest(Stringquery,intsize) "]
53132[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
63133[label="typeArguments\n <Map.Entry<K,Float>> "]
73134[label="classOrInterfaceType\n Map.Entry<K,Float> "]
83135[label="classType_lfno_classOrInterfaceType\n Map "]
83136[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
93137[label="typeArguments\n <K,Float> "]
103138[label="typeArgumentList\n K,Float "]
113139[label="classType_lfno_classOrInterfaceType\n K "]
113140[label="classType_lfno_classOrInterfaceType\n Float "]
53141[label="methodDeclarator\n queryNearest(Stringquery,intsize) "]
63142[label="formalParameterList\n Stringquery,intsize "]
73143[label="formalParameter\n Stringquery "]
83144[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
83145[label="variableDeclaratorId\n query "]
73146[label="formalParameter\n intsize "]
83147[label="integralType\n int "]
83148[label="variableDeclaratorId\n size "]
43149[label="block\n {if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();}} "]
53150[label="blockStatements\n if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();} "]
63151[label="ifThenStatement\n if(query==null||query.length()==0){returnCollections.emptyList();} "]
73152[label="conditionalOrExpression\n query==null||query.length()==0 "]
83153[label="equalityExpression\n query==null "]
93154[label="expressionName\n query "]
93155[label="literal\n null "]
83156[label="equalityExpression\n query.length()==0 "]
93157[label="methodInvocation_lfno_primary\n query.length() "]
103158[label="typeName\n query "]
93159[label="literal\n 0 "]
73160[label="block\n {returnCollections.emptyList();} "]
83161[label="returnStatement\n returnCollections.emptyList(); "]
93162[label="methodInvocation_lfno_primary\n Collections.emptyList() "]
103163[label="typeName\n Collections "]
63164[label="tryStatement\n try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();} "]
73165[label="block\n {returnnearest(query(query),size);} "]
83166[label="returnStatement\n returnnearest(query(query),size); "]
93167[label="methodInvocation_lfno_primary\n nearest(query(query),size) "]
103168[label="methodName\n nearest "]
103169[label="argumentList\n query(query),size "]
113170[label="methodInvocation_lfno_primary\n query(query) "]
123171[label="methodName\n query "]
123172[label="expressionName\n query "]
113173[label="expressionName\n size "]
73174[label="catchClause\n catch(Exceptione){returnCollections.emptyList();} "]
83175[label="catchFormalParameter\n Exceptione "]
93176[label="unannClassType\n Exception "]
93177[label="variableDeclaratorId\n e "]
83178[label="block\n {returnCollections.emptyList();} "]
93179[label="returnStatement\n returnCollections.emptyList(); "]
103180[label="methodInvocation_lfno_primary\n Collections.emptyList() "]
113181[label="typeName\n Collections "]
33182[label="methodDeclaration\n publicabstractVectorquery(Stringquery); "]
43183[label="methodModifier\n public "]
43184[label="methodModifier\n abstract "]
43185[label="methodHeader\n Vectorquery(Stringquery) "]
53186[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
53187[label="methodDeclarator\n query(Stringquery) "]
63188[label="formalParameter\n Stringquery "]
73189[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
73190[label="variableDeclaratorId\n query "]
43191[label="methodBody\n ; "]
33192[label="methodDeclaration\n publicintsize(){returnstorage.size();} "]
43193[label="methodModifier\n public "]
43194[label="methodHeader\n intsize() "]
53195[label="integralType\n int "]
53196[label="methodDeclarator\n size() "]
43197[label="block\n {returnstorage.size();} "]
53198[label="returnStatement\n returnstorage.size(); "]
63199[label="methodInvocation_lfno_primary\n storage.size() "]
73200[label="typeName\n storage "]
33201[label="methodDeclaration\n publicintdimension(){if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size();} "]
43202[label="methodModifier\n public "]
43203[label="methodHeader\n intdimension() "]
53204[label="integralType\n int "]
53205[label="methodDeclarator\n dimension() "]
43206[label="block\n {if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size();} "]
53207[label="blockStatements\n if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size(); "]
63208[label="ifThenStatement\n if(storage==null||storage.isEmpty()){return0;} "]
73209[label="conditionalOrExpression\n storage==null||storage.isEmpty() "]
83210[label="equalityExpression\n storage==null "]
93211[label="expressionName\n storage "]
93212[label="literal\n null "]
83213[label="methodInvocation_lfno_primary\n storage.isEmpty() "]
93214[label="typeName\n storage "]
73215[label="block\n {return0;} "]
83216[label="returnStatement\n return0; "]
93217[label="literal\n 0 "]
63218[label="returnStatement\n returnstorage.values().iterator().next().size(); "]
73219[label="primary\n storage.values().iterator().next().size() "]
83220[label="methodInvocation_lfno_primary\n storage.values() "]
93221[label="typeName\n storage "]
83222[label="methodInvocation_lf_primary\n .iterator() "]
83223[label="methodInvocation_lf_primary\n .next() "]
83224[label="methodInvocation_lf_primary\n .size() "]
33225[label="methodDeclaration\n publicVectorremove(Kkey){returnstorage.remove(key);} "]
43226[label="methodModifier\n public "]
43227[label="methodHeader\n Vectorremove(Kkey) "]
53228[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
53229[label="methodDeclarator\n remove(Kkey) "]
63230[label="formalParameter\n Kkey "]
73231[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
73232[label="variableDeclaratorId\n key "]
43233[label="block\n {returnstorage.remove(key);} "]
53234[label="returnStatement\n returnstorage.remove(key); "]
63235[label="methodInvocation_lfno_primary\n storage.remove(key) "]
73236[label="typeName\n storage "]
73237[label="expressionName\n key "]
03238[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;publicclassActionextendsAbstractInexactActionimplementsActionType{publicAction(){}publicAction(intname,intrel){super(name,rel);}}<EOF> "]
13239[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
23240[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
33241[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
43242[label="packageName\n com.hankcs.hanlp.dependency "]
53243[label="packageName\n com.hankcs.hanlp "]
63244[label="packageName\n com.hankcs "]
73245[label="packageName\n com "]
13246[label="normalClassDeclaration\n publicclassActionextendsAbstractInexactActionimplementsActionType{publicAction(){}publicAction(intname,intrel){super(name,rel);}} "]
23247[label="classModifier\n public "]
23248[label="superclass\n extendsAbstractInexactAction "]
33249[label="classType\n AbstractInexactAction "]
23250[label="superinterfaces\n implementsActionType "]
33251[label="classType\n ActionType "]
23252[label="classBody\n {publicAction(){}publicAction(intname,intrel){super(name,rel);}} "]
33253[label="constructorDeclaration\n publicAction(){} "]
43254[label="constructorModifier\n public "]
43255[label="constructorDeclarator\n Action() "]
53256[label="simpleTypeName\n Action "]
43257[label="constructorBody\n {} "]
33258[label="constructorDeclaration\n publicAction(intname,intrel){super(name,rel);} "]
43259[label="constructorModifier\n public "]
43260[label="constructorDeclarator\n Action(intname,intrel) "]
53261[label="simpleTypeName\n Action "]
53262[label="formalParameterList\n intname,intrel "]
63263[label="formalParameter\n intname "]
73264[label="integralType\n int "]
73265[label="variableDeclaratorId\n name "]
63266[label="formalParameter\n intrel "]
73267[label="integralType\n int "]
73268[label="variableDeclaratorId\n rel "]
43269[label="constructorBody\n {super(name,rel);} "]
53270[label="explicitConstructorInvocation\n super(name,rel); "]
63271[label="argumentList\n name,rel "]
73272[label="expressionName\n name "]
73273[label="expressionName\n rel "]
03274[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;publicclassActionFactoryimplementsActionType{publicstaticActionmake_shift(){returnnewAction(kShift,0);}publicstaticActionmake_left_arc(finalintrel){returnnewAction(kLeftArc,rel);}publicstaticActionmake_right_arc(finalintrel){returnnewAction(kRightArc,rel);}}<EOF> "]
13275[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
23276[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
33277[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
43278[label="packageName\n com.hankcs.hanlp.dependency "]
53279[label="packageName\n com.hankcs.hanlp "]
63280[label="packageName\n com.hankcs "]
73281[label="packageName\n com "]
13282[label="normalClassDeclaration\n publicclassActionFactoryimplementsActionType{publicstaticActionmake_shift(){returnnewAction(kShift,0);}publicstaticActionmake_left_arc(finalintrel){returnnewAction(kLeftArc,rel);}publicstaticActionmake_right_arc(finalintrel){returnnewAction(kRightArc,rel);}} "]
23283[label="classModifier\n public "]
23284[label="superinterfaces\n implementsActionType "]
33285[label="classType\n ActionType "]
23286[label="classBody\n {publicstaticActionmake_shift(){returnnewAction(kShift,0);}publicstaticActionmake_left_arc(finalintrel){returnnewAction(kLeftArc,rel);}publicstaticActionmake_right_arc(finalintrel){returnnewAction(kRightArc,rel);}} "]
33287[label="methodDeclaration\n publicstaticActionmake_shift(){returnnewAction(kShift,0);} "]
43288[label="methodModifier\n public "]
43289[label="methodModifier\n static "]
43290[label="methodHeader\n Actionmake_shift() "]
53291[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
53292[label="methodDeclarator\n make_shift() "]
43293[label="block\n {returnnewAction(kShift,0);} "]
53294[label="returnStatement\n returnnewAction(kShift,0); "]
63295[label="classInstanceCreationExpression_lfno_primary\n newAction(kShift,0) "]
73296[label="argumentList\n kShift,0 "]
83297[label="expressionName\n kShift "]
83298[label="literal\n 0 "]
33299[label="methodDeclaration\n publicstaticActionmake_left_arc(finalintrel){returnnewAction(kLeftArc,rel);} "]
43300[label="methodModifier\n public "]
43301[label="methodModifier\n static "]
43302[label="methodHeader\n Actionmake_left_arc(finalintrel) "]
53303[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
53304[label="methodDeclarator\n make_left_arc(finalintrel) "]
63305[label="formalParameter\n finalintrel "]
73306[label="variableModifier\n final "]
73307[label="integralType\n int "]
73308[label="variableDeclaratorId\n rel "]
43309[label="block\n {returnnewAction(kLeftArc,rel);} "]
53310[label="returnStatement\n returnnewAction(kLeftArc,rel); "]
63311[label="classInstanceCreationExpression_lfno_primary\n newAction(kLeftArc,rel) "]
73312[label="argumentList\n kLeftArc,rel "]
83313[label="expressionName\n kLeftArc "]
83314[label="expressionName\n rel "]
33315[label="methodDeclaration\n publicstaticActionmake_right_arc(finalintrel){returnnewAction(kRightArc,rel);} "]
43316[label="methodModifier\n public "]
43317[label="methodModifier\n static "]
43318[label="methodHeader\n Actionmake_right_arc(finalintrel) "]
53319[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
53320[label="methodDeclarator\n make_right_arc(finalintrel) "]
63321[label="formalParameter\n finalintrel "]
73322[label="variableModifier\n final "]
73323[label="integralType\n int "]
73324[label="variableDeclaratorId\n rel "]
43325[label="block\n {returnnewAction(kRightArc,rel);} "]
53326[label="returnStatement\n returnnewAction(kRightArc,rel); "]
63327[label="classInstanceCreationExpression_lfno_primary\n newAction(kRightArc,rel) "]
73328[label="argumentList\n kRightArc,rel "]
83329[label="expressionName\n kRightArc "]
83330[label="expressionName\n rel "]
03331[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;publicinterfaceActionType{intkNone=0;intkShift=1;intkLeftArc=2;intkRightArc=3;}<EOF> "]
13332[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
23333[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
33334[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
43335[label="packageName\n com.hankcs.hanlp.dependency "]
53336[label="packageName\n com.hankcs.hanlp "]
63337[label="packageName\n com.hankcs "]
73338[label="packageName\n com "]
13339[label="normalInterfaceDeclaration\n publicinterfaceActionType{intkNone=0;intkShift=1;intkLeftArc=2;intkRightArc=3;} "]
23340[label="interfaceModifier\n public "]
23341[label="interfaceBody\n {intkNone=0;intkShift=1;intkLeftArc=2;intkRightArc=3;} "]
33342[label="constantDeclaration\n intkNone=0; "]
43343[label="integralType\n int "]
43344[label="variableDeclarator\n kNone=0 "]
53345[label="variableDeclaratorId\n kNone "]
53346[label="literal\n 0 "]
33347[label="constantDeclaration\n intkShift=1; "]
43348[label="integralType\n int "]
43349[label="variableDeclarator\n kShift=1 "]
53350[label="variableDeclaratorId\n kShift "]
53351[label="literal\n 1 "]
33352[label="constantDeclaration\n intkLeftArc=2; "]
43353[label="integralType\n int "]
43354[label="variableDeclarator\n kLeftArc=2 "]
53355[label="variableDeclaratorId\n kLeftArc "]
53356[label="literal\n 2 "]
33357[label="constantDeclaration\n intkRightArc=3; "]
43358[label="integralType\n int "]
43359[label="variableDeclarator\n kRightArc=3 "]
53360[label="variableDeclaratorId\n kRightArc "]
53361[label="literal\n 3 "]
03362[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;importcom.hankcs.hanlp.dependency.nnparser.Dependency;importjava.util.ArrayList;importjava.util.List;publicclassActionUtilsimplementsActionType{publicstaticbooleanis_shift(finalActionact){return(act.name()==kShift);}publicstaticbooleanis_left_arc(finalActionact,int[]deprel){if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}publicstaticbooleanis_right_arc(finalActionact,int[]deprel){if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}voidget_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions){intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions);}voidget_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions){List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));}}voidget_oracle_actions2(Dependencyinstance,List<Action>actions){get_oracle_actions2(instance.heads,instance.deprels,actions);}voidget_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions){actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];}}voidget_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions){inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];}}}<EOF> "]
13363[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
23364[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
33365[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
43366[label="packageName\n com.hankcs.hanlp.dependency "]
53367[label="packageName\n com.hankcs.hanlp "]
63368[label="packageName\n com.hankcs "]
73369[label="packageName\n com "]
13370[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dependency.nnparser.Dependency; "]
23371[label="typeName\n com.hankcs.hanlp.dependency.nnparser.Dependency "]
33372[label="packageOrTypeName\n com.hankcs.hanlp.dependency.nnparser "]
43373[label="packageOrTypeName\n com.hankcs.hanlp.dependency "]
53374[label="packageOrTypeName\n com.hankcs.hanlp "]
63375[label="packageOrTypeName\n com.hankcs "]
73376[label="packageOrTypeName\n com "]
13377[label="singleTypeImportDeclaration\n importjava.util.ArrayList; "]
23378[label="typeName\n java.util.ArrayList "]
33379[label="packageOrTypeName\n java.util "]
43380[label="packageOrTypeName\n java "]
13381[label="singleTypeImportDeclaration\n importjava.util.List; "]
23382[label="typeName\n java.util.List "]
33383[label="packageOrTypeName\n java.util "]
43384[label="packageOrTypeName\n java "]
13385[label="normalClassDeclaration\n publicclassActionUtilsimplementsActionType{publicstaticbooleanis_shift(finalActionact){return(act.name()==kShift);}publicstaticbooleanis_left_arc(finalActionact,int[]deprel){if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}publicstaticbooleanis_right_arc(finalActionact,int[]deprel){if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}voidget_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions){intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions);}voidget_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions){List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));}}voidget_oracle_actions2(Dependencyinstance,List<Action>actions){get_oracle_actions2(instance.heads,instance.deprels,actions);}voidget_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions){actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];}}voidget_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions){inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];}}} "]
23386[label="classModifier\n public "]
23387[label="superinterfaces\n implementsActionType "]
33388[label="classType\n ActionType "]
23389[label="classBody\n {publicstaticbooleanis_shift(finalActionact){return(act.name()==kShift);}publicstaticbooleanis_left_arc(finalActionact,int[]deprel){if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}publicstaticbooleanis_right_arc(finalActionact,int[]deprel){if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}voidget_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions){intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions);}voidget_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions){List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));}}voidget_oracle_actions2(Dependencyinstance,List<Action>actions){get_oracle_actions2(instance.heads,instance.deprels,actions);}voidget_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions){actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];}}voidget_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions){inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];}}} "]
33390[label="methodDeclaration\n publicstaticbooleanis_shift(finalActionact){return(act.name()==kShift);} "]
43391[label="methodModifier\n public "]
43392[label="methodModifier\n static "]
43393[label="methodHeader\n booleanis_shift(finalActionact) "]
53394[label="unannPrimitiveType\n boolean "]
53395[label="methodDeclarator\n is_shift(finalActionact) "]
63396[label="formalParameter\n finalActionact "]
73397[label="variableModifier\n final "]
73398[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
73399[label="variableDeclaratorId\n act "]
43400[label="block\n {return(act.name()==kShift);} "]
53401[label="returnStatement\n return(act.name()==kShift); "]
63402[label="primaryNoNewArray_lfno_primary\n (act.name()==kShift) "]
73403[label="equalityExpression\n act.name()==kShift "]
83404[label="methodInvocation_lfno_primary\n act.name() "]
93405[label="typeName\n act "]
83406[label="expressionName\n kShift "]
33407[label="methodDeclaration\n publicstaticbooleanis_left_arc(finalActionact,int[]deprel){if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;} "]
43408[label="methodModifier\n public "]
43409[label="methodModifier\n static "]
43410[label="methodHeader\n booleanis_left_arc(finalActionact,int[]deprel) "]
53411[label="unannPrimitiveType\n boolean "]
53412[label="methodDeclarator\n is_left_arc(finalActionact,int[]deprel) "]
63413[label="formalParameterList\n finalActionact,int[]deprel "]
73414[label="formalParameter\n finalActionact "]
83415[label="variableModifier\n final "]
83416[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
83417[label="variableDeclaratorId\n act "]
73418[label="formalParameter\n int[]deprel "]
83419[label="unannArrayType\n int[] "]
93420[label="integralType\n int "]
93421[label="dims\n [] "]
83422[label="variableDeclaratorId\n deprel "]
43423[label="block\n {if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;} "]
53424[label="blockStatements\n if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse; "]
63425[label="ifThenStatement\n if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;} "]
73426[label="equalityExpression\n act.name()==kLeftArc "]
83427[label="methodInvocation_lfno_primary\n act.name() "]
93428[label="typeName\n act "]
83429[label="expressionName\n kLeftArc "]
73430[label="block\n {deprel[0]=act.rel();returntrue;} "]
83431[label="blockStatements\n deprel[0]=act.rel();returntrue; "]
93432[label="expressionStatement\n deprel[0]=act.rel(); "]
103433[label="assignment\n deprel[0]=act.rel() "]
113434[label="arrayAccess\n deprel[0] "]
123435[label="expressionName\n deprel "]
123436[label="literal\n 0 "]
113437[label="assignmentOperator\n = "]
113438[label="methodInvocation_lfno_primary\n act.rel() "]
123439[label="typeName\n act "]
93440[label="returnStatement\n returntrue; "]
103441[label="literal\n true "]
63442[label="expressionStatement\n deprel[0]=0; "]
73443[label="assignment\n deprel[0]=0 "]
83444[label="arrayAccess\n deprel[0] "]
93445[label="expressionName\n deprel "]
93446[label="literal\n 0 "]
83447[label="assignmentOperator\n = "]
83448[label="literal\n 0 "]
63449[label="returnStatement\n returnfalse; "]
73450[label="literal\n false "]
33451[label="methodDeclaration\n publicstaticbooleanis_right_arc(finalActionact,int[]deprel){if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;} "]
43452[label="methodModifier\n public "]
43453[label="methodModifier\n static "]
43454[label="methodHeader\n booleanis_right_arc(finalActionact,int[]deprel) "]
53455[label="unannPrimitiveType\n boolean "]
53456[label="methodDeclarator\n is_right_arc(finalActionact,int[]deprel) "]
63457[label="formalParameterList\n finalActionact,int[]deprel "]
73458[label="formalParameter\n finalActionact "]
83459[label="variableModifier\n final "]
83460[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
83461[label="variableDeclaratorId\n act "]
73462[label="formalParameter\n int[]deprel "]
83463[label="unannArrayType\n int[] "]
93464[label="integralType\n int "]
93465[label="dims\n [] "]
83466[label="variableDeclaratorId\n deprel "]
43467[label="block\n {if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;} "]
53468[label="blockStatements\n if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse; "]
63469[label="ifThenStatement\n if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;} "]
73470[label="equalityExpression\n act.name()==kRightArc "]
83471[label="methodInvocation_lfno_primary\n act.name() "]
93472[label="typeName\n act "]
83473[label="expressionName\n kRightArc "]
73474[label="block\n {deprel[0]=act.rel();returntrue;} "]
83475[label="blockStatements\n deprel[0]=act.rel();returntrue; "]
93476[label="expressionStatement\n deprel[0]=act.rel(); "]
103477[label="assignment\n deprel[0]=act.rel() "]
113478[label="arrayAccess\n deprel[0] "]
123479[label="expressionName\n deprel "]
123480[label="literal\n 0 "]
113481[label="assignmentOperator\n = "]
113482[label="methodInvocation_lfno_primary\n act.rel() "]
123483[label="typeName\n act "]
93484[label="returnStatement\n returntrue; "]
103485[label="literal\n true "]
63486[label="expressionStatement\n deprel[0]=0; "]
73487[label="assignment\n deprel[0]=0 "]
83488[label="arrayAccess\n deprel[0] "]
93489[label="expressionName\n deprel "]
93490[label="literal\n 0 "]
83491[label="assignmentOperator\n = "]
83492[label="literal\n 0 "]
63493[label="returnStatement\n returnfalse; "]
73494[label="literal\n false "]
33495[label="methodDeclaration\n voidget_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions){intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions);} "]
43496[label="methodHeader\n voidget_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions) "]
53497[label="result\n void "]
53498[label="methodDeclarator\n get_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions) "]
63499[label="formalParameterList\n List<Integer>heads,List<Integer>deprels,List<Action>actions "]
73500[label="formalParameters\n List<Integer>heads,List<Integer>deprels "]
83501[label="formalParameter\n List<Integer>heads "]
93502[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103503[label="typeArguments\n <Integer> "]
113504[label="classType_lfno_classOrInterfaceType\n Integer "]
93505[label="variableDeclaratorId\n heads "]
83506[label="formalParameter\n List<Integer>deprels "]
93507[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103508[label="typeArguments\n <Integer> "]
113509[label="classType_lfno_classOrInterfaceType\n Integer "]
93510[label="variableDeclaratorId\n deprels "]
73511[label="formalParameter\n List<Action>actions "]
83512[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Action> "]
93513[label="typeArguments\n <Action> "]
103514[label="classType_lfno_classOrInterfaceType\n Action "]
83515[label="variableDeclaratorId\n actions "]
43516[label="block\n {intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions);} "]
53517[label="blockStatements\n intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions); "]
63518[label="localVariableDeclarationStatement\n intN=heads.size(); "]
73519[label="localVariableDeclaration\n intN=heads.size() "]
83520[label="integralType\n int "]
83521[label="variableDeclarator\n N=heads.size() "]
93522[label="variableDeclaratorId\n N "]
93523[label="methodInvocation_lfno_primary\n heads.size() "]
103524[label="typeName\n heads "]
63525[label="localVariableDeclarationStatement\n introot=-1; "]
73526[label="localVariableDeclaration\n introot=-1 "]
83527[label="integralType\n int "]
83528[label="variableDeclarator\n root=-1 "]
93529[label="variableDeclaratorId\n root "]
93530[label="unaryExpression\n -1 "]
103531[label="literal\n 1 "]
63532[label="localVariableDeclarationStatement\n List<List<Integer>>tree=newArrayList<List<Integer>>(N); "]
73533[label="localVariableDeclaration\n List<List<Integer>>tree=newArrayList<List<Integer>>(N) "]
83534[label="unannClassType_lfno_unannClassOrInterfaceType\n List<List<Integer>> "]
93535[label="typeArguments\n <List<Integer>> "]
103536[label="classType_lfno_classOrInterfaceType\n List<Integer> "]
113537[label="typeArguments\n <Integer> "]
123538[label="classType_lfno_classOrInterfaceType\n Integer "]
83539[label="variableDeclarator\n tree=newArrayList<List<Integer>>(N) "]
93540[label="variableDeclaratorId\n tree "]
93541[label="classInstanceCreationExpression_lfno_primary\n newArrayList<List<Integer>>(N) "]
103542[label="typeArguments\n <List<Integer>> "]
113543[label="classType_lfno_classOrInterfaceType\n List<Integer> "]
123544[label="typeArguments\n <Integer> "]
133545[label="classType_lfno_classOrInterfaceType\n Integer "]
103546[label="expressionName\n N "]
63547[label="expressionStatement\n actions.clear(); "]
73548[label="methodInvocation\n actions.clear() "]
83549[label="typeName\n actions "]
63550[label="basicForStatement\n for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}} "]
73551[label="localVariableDeclaration\n inti=0 "]
83552[label="integralType\n int "]
83553[label="variableDeclarator\n i=0 "]
93554[label="variableDeclaratorId\n i "]
93555[label="literal\n 0 "]
73556[label="relationalExpression\n i<N "]
83557[label="expressionName\n i "]
83558[label="expressionName\n N "]
73559[label="preIncrementExpression\n ++i "]
83560[label="expressionName\n i "]
73561[label="block\n {inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}} "]
83562[label="blockStatements\n inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);} "]
93563[label="localVariableDeclarationStatement\n inthead=heads.get(i); "]
103564[label="localVariableDeclaration\n inthead=heads.get(i) "]
113565[label="integralType\n int "]
113566[label="variableDeclarator\n head=heads.get(i) "]
123567[label="variableDeclaratorId\n head "]
123568[label="methodInvocation_lfno_primary\n heads.get(i) "]
133569[label="typeName\n heads "]
133570[label="expressionName\n i "]
93571[label="ifThenElseStatement\n if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);} "]
103572[label="equalityExpression\n head==-1 "]
113573[label="expressionName\n head "]
113574[label="unaryExpression\n -1 "]
123575[label="literal\n 1 "]
103576[label="block\n {if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;} "]
113577[label="blockStatements\n if(root==-1)System.err.println(\"error: there should be only one root.\");root=i; "]
123578[label="ifThenStatement\n if(root==-1)System.err.println(\"error: there should be only one root.\"); "]
133579[label="equalityExpression\n root==-1 "]
143580[label="expressionName\n root "]
143581[label="unaryExpression\n -1 "]
153582[label="literal\n 1 "]
133583[label="expressionStatement\n System.err.println(\"error: there should be only one root.\"); "]
143584[label="methodInvocation\n System.err.println(\"error: there should be only one root.\") "]
153585[label="typeName\n System.err "]
163586[label="packageOrTypeName\n System "]
153587[label="literal\n \"error: there should be only one root.\" "]
123588[label="expressionStatement\n root=i; "]
133589[label="assignment\n root=i "]
143590[label="expressionName\n root "]
143591[label="assignmentOperator\n = "]
143592[label="expressionName\n i "]
103593[label="block\n {tree.get(head).add(i);} "]
113594[label="expressionStatement\n tree.get(head).add(i); "]
123595[label="methodInvocation\n tree.get(head).add(i) "]
133596[label="methodInvocation_lfno_primary\n tree.get(head) "]
143597[label="typeName\n tree "]
143598[label="expressionName\n head "]
133599[label="expressionName\n i "]
63600[label="expressionStatement\n get_oracle_actions_travel(root,heads,deprels,tree,actions); "]
73601[label="methodInvocation\n get_oracle_actions_travel(root,heads,deprels,tree,actions) "]
83602[label="methodName\n get_oracle_actions_travel "]
83603[label="argumentList\n root,heads,deprels,tree,actions "]
93604[label="expressionName\n root "]
93605[label="expressionName\n heads "]
93606[label="expressionName\n deprels "]
93607[label="expressionName\n tree "]
93608[label="expressionName\n actions "]
33609[label="methodDeclaration\n voidget_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions){List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));}} "]
43610[label="methodHeader\n voidget_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions) "]
53611[label="result\n void "]
53612[label="methodDeclarator\n get_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions) "]
63613[label="formalParameterList\n introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions "]
73614[label="formalParameters\n introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree "]
83615[label="formalParameter\n introot "]
93616[label="integralType\n int "]
93617[label="variableDeclaratorId\n root "]
83618[label="formalParameter\n List<Integer>heads "]
93619[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103620[label="typeArguments\n <Integer> "]
113621[label="classType_lfno_classOrInterfaceType\n Integer "]
93622[label="variableDeclaratorId\n heads "]
83623[label="formalParameter\n List<Integer>deprels "]
93624[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103625[label="typeArguments\n <Integer> "]
113626[label="classType_lfno_classOrInterfaceType\n Integer "]
93627[label="variableDeclaratorId\n deprels "]
83628[label="formalParameter\n List<List<Integer>>tree "]
93629[label="unannClassType_lfno_unannClassOrInterfaceType\n List<List<Integer>> "]
103630[label="typeArguments\n <List<Integer>> "]
113631[label="classType_lfno_classOrInterfaceType\n List<Integer> "]
123632[label="typeArguments\n <Integer> "]
133633[label="classType_lfno_classOrInterfaceType\n Integer "]
93634[label="variableDeclaratorId\n tree "]
73635[label="formalParameter\n List<Action>actions "]
83636[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Action> "]
93637[label="typeArguments\n <Action> "]
103638[label="classType_lfno_classOrInterfaceType\n Action "]
83639[label="variableDeclaratorId\n actions "]
43640[label="block\n {List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));}} "]
53641[label="blockStatements\n List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));} "]
63642[label="localVariableDeclarationStatement\n List<Integer>children=tree.get(root); "]
73643[label="localVariableDeclaration\n List<Integer>children=tree.get(root) "]
83644[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
93645[label="typeArguments\n <Integer> "]
103646[label="classType_lfno_classOrInterfaceType\n Integer "]
83647[label="variableDeclarator\n children=tree.get(root) "]
93648[label="variableDeclaratorId\n children "]
93649[label="methodInvocation_lfno_primary\n tree.get(root) "]
103650[label="typeName\n tree "]
103651[label="expressionName\n root "]
63652[label="localVariableDeclarationStatement\n inti; "]
73653[label="localVariableDeclaration\n inti "]
83654[label="integralType\n int "]
83655[label="variableDeclaratorId\n i "]
63656[label="basicForStatement\n for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);} "]
73657[label="assignment\n i=0 "]
83658[label="expressionName\n i "]
83659[label="assignmentOperator\n = "]
83660[label="literal\n 0 "]
73661[label="conditionalAndExpression\n i<children.size()&&children.get(i)<root "]
83662[label="relationalExpression\n i<children.size() "]
93663[label="expressionName\n i "]
93664[label="methodInvocation_lfno_primary\n children.size() "]
103665[label="typeName\n children "]
83666[label="relationalExpression\n children.get(i)<root "]
93667[label="methodInvocation_lfno_primary\n children.get(i) "]
103668[label="typeName\n children "]
103669[label="expressionName\n i "]
93670[label="expressionName\n root "]
73671[label="preIncrementExpression\n ++i "]
83672[label="expressionName\n i "]
73673[label="block\n {get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);} "]
83674[label="expressionStatement\n get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions); "]
93675[label="methodInvocation\n get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions) "]
103676[label="methodName\n get_oracle_actions_travel "]
103677[label="argumentList\n children.get(i),heads,deprels,tree,actions "]
113678[label="methodInvocation_lfno_primary\n children.get(i) "]
123679[label="typeName\n children "]
123680[label="expressionName\n i "]
113681[label="expressionName\n heads "]
113682[label="expressionName\n deprels "]
113683[label="expressionName\n tree "]
113684[label="expressionName\n actions "]
63685[label="expressionStatement\n actions.add(ActionFactory.make_shift()); "]
73686[label="methodInvocation\n actions.add(ActionFactory.make_shift()) "]
83687[label="typeName\n actions "]
83688[label="methodInvocation_lfno_primary\n ActionFactory.make_shift() "]
93689[label="typeName\n ActionFactory "]
63690[label="basicForStatement\n for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));} "]
73691[label="localVariableDeclaration\n intj=i "]
83692[label="integralType\n int "]
83693[label="variableDeclarator\n j=i "]
93694[label="variableDeclaratorId\n j "]
93695[label="expressionName\n i "]
73696[label="relationalExpression\n j<children.size() "]
83697[label="expressionName\n j "]
83698[label="methodInvocation_lfno_primary\n children.size() "]
93699[label="typeName\n children "]
73700[label="preIncrementExpression\n ++j "]
83701[label="expressionName\n j "]
73702[label="block\n {intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));} "]
83703[label="blockStatements\n intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child))); "]
93704[label="localVariableDeclarationStatement\n intchild=children.get(j); "]
103705[label="localVariableDeclaration\n intchild=children.get(j) "]
113706[label="integralType\n int "]
113707[label="variableDeclarator\n child=children.get(j) "]
123708[label="variableDeclaratorId\n child "]
123709[label="methodInvocation_lfno_primary\n children.get(j) "]
133710[label="typeName\n children "]
133711[label="expressionName\n j "]
93712[label="expressionStatement\n get_oracle_actions_travel(child,heads,deprels,tree,actions); "]
103713[label="methodInvocation\n get_oracle_actions_travel(child,heads,deprels,tree,actions) "]
113714[label="methodName\n get_oracle_actions_travel "]
113715[label="argumentList\n child,heads,deprels,tree,actions "]
123716[label="expressionName\n child "]
123717[label="expressionName\n heads "]
123718[label="expressionName\n deprels "]
123719[label="expressionName\n tree "]
123720[label="expressionName\n actions "]
93721[label="expressionStatement\n actions.add(ActionFactory.make_right_arc(deprels.get(child))); "]
103722[label="methodInvocation\n actions.add(ActionFactory.make_right_arc(deprels.get(child))) "]
113723[label="typeName\n actions "]
113724[label="methodInvocation_lfno_primary\n ActionFactory.make_right_arc(deprels.get(child)) "]
123725[label="typeName\n ActionFactory "]
123726[label="methodInvocation_lfno_primary\n deprels.get(child) "]
133727[label="typeName\n deprels "]
133728[label="expressionName\n child "]
63729[label="basicForStatement\n for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));} "]
73730[label="localVariableDeclaration\n intj=i-1 "]
83731[label="integralType\n int "]
83732[label="variableDeclarator\n j=i-1 "]
93733[label="variableDeclaratorId\n j "]
93734[label="additiveExpression\n i-1 "]
103735[label="expressionName\n i "]
103736[label="literal\n 1 "]
73737[label="relationalExpression\n j>=0 "]
83738[label="expressionName\n j "]
83739[label="literal\n 0 "]
73740[label="preDecrementExpression\n --j "]
83741[label="expressionName\n j "]
73742[label="block\n {intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));} "]
83743[label="blockStatements\n intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child))); "]
93744[label="localVariableDeclarationStatement\n intchild=children.get(j); "]
103745[label="localVariableDeclaration\n intchild=children.get(j) "]
113746[label="integralType\n int "]
113747[label="variableDeclarator\n child=children.get(j) "]
123748[label="variableDeclaratorId\n child "]
123749[label="methodInvocation_lfno_primary\n children.get(j) "]
133750[label="typeName\n children "]
133751[label="expressionName\n j "]
93752[label="expressionStatement\n actions.add(ActionFactory.make_left_arc(deprels.get(child))); "]
103753[label="methodInvocation\n actions.add(ActionFactory.make_left_arc(deprels.get(child))) "]
113754[label="typeName\n actions "]
113755[label="methodInvocation_lfno_primary\n ActionFactory.make_left_arc(deprels.get(child)) "]
123756[label="typeName\n ActionFactory "]
123757[label="methodInvocation_lfno_primary\n deprels.get(child) "]
133758[label="typeName\n deprels "]
133759[label="expressionName\n child "]
33760[label="methodDeclaration\n voidget_oracle_actions2(Dependencyinstance,List<Action>actions){get_oracle_actions2(instance.heads,instance.deprels,actions);} "]
43761[label="methodHeader\n voidget_oracle_actions2(Dependencyinstance,List<Action>actions) "]
53762[label="result\n void "]
53763[label="methodDeclarator\n get_oracle_actions2(Dependencyinstance,List<Action>actions) "]
63764[label="formalParameterList\n Dependencyinstance,List<Action>actions "]
73765[label="formalParameter\n Dependencyinstance "]
83766[label="unannClassType_lfno_unannClassOrInterfaceType\n Dependency "]
83767[label="variableDeclaratorId\n instance "]
73768[label="formalParameter\n List<Action>actions "]
83769[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Action> "]
93770[label="typeArguments\n <Action> "]
103771[label="classType_lfno_classOrInterfaceType\n Action "]
83772[label="variableDeclaratorId\n actions "]
43773[label="block\n {get_oracle_actions2(instance.heads,instance.deprels,actions);} "]
53774[label="expressionStatement\n get_oracle_actions2(instance.heads,instance.deprels,actions); "]
63775[label="methodInvocation\n get_oracle_actions2(instance.heads,instance.deprels,actions) "]
73776[label="methodName\n get_oracle_actions2 "]
73777[label="argumentList\n instance.heads,instance.deprels,actions "]
83778[label="expressionName\n instance.heads "]
93779[label="ambiguousName\n instance "]
83780[label="expressionName\n instance.deprels "]
93781[label="ambiguousName\n instance "]
83782[label="expressionName\n actions "]
33783[label="methodDeclaration\n voidget_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions){actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];}} "]
43784[label="methodHeader\n voidget_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions) "]
53785[label="result\n void "]
53786[label="methodDeclarator\n get_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions) "]
63787[label="formalParameterList\n List<Integer>heads,List<Integer>deprels,List<Action>actions "]
73788[label="formalParameters\n List<Integer>heads,List<Integer>deprels "]
83789[label="formalParameter\n List<Integer>heads "]
93790[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103791[label="typeArguments\n <Integer> "]
113792[label="classType_lfno_classOrInterfaceType\n Integer "]
93793[label="variableDeclaratorId\n heads "]
83794[label="formalParameter\n List<Integer>deprels "]
93795[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103796[label="typeArguments\n <Integer> "]
113797[label="classType_lfno_classOrInterfaceType\n Integer "]
93798[label="variableDeclaratorId\n deprels "]
73799[label="formalParameter\n List<Action>actions "]
83800[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Action> "]
93801[label="typeArguments\n <Action> "]
103802[label="classType_lfno_classOrInterfaceType\n Action "]
83803[label="variableDeclaratorId\n actions "]
43804[label="block\n {actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];}} "]
53805[label="blockStatements\n actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];} "]
63806[label="expressionStatement\n actions.clear(); "]
73807[label="methodInvocation\n actions.clear() "]
83808[label="typeName\n actions "]
63809[label="localVariableDeclarationStatement\n intlen=heads.size(); "]
73810[label="localVariableDeclaration\n intlen=heads.size() "]
83811[label="integralType\n int "]
83812[label="variableDeclarator\n len=heads.size() "]
93813[label="variableDeclaratorId\n len "]
93814[label="methodInvocation_lfno_primary\n heads.size() "]
103815[label="typeName\n heads "]
63816[label="localVariableDeclarationStatement\n List<Integer>sigma=newArrayList<Integer>(); "]
73817[label="localVariableDeclaration\n List<Integer>sigma=newArrayList<Integer>() "]
83818[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
93819[label="typeArguments\n <Integer> "]
103820[label="classType_lfno_classOrInterfaceType\n Integer "]
83821[label="variableDeclarator\n sigma=newArrayList<Integer>() "]
93822[label="variableDeclaratorId\n sigma "]
93823[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Integer>() "]
103824[label="typeArguments\n <Integer> "]
113825[label="classType_lfno_classOrInterfaceType\n Integer "]
63826[label="localVariableDeclarationStatement\n intbeta=0; "]
73827[label="localVariableDeclaration\n intbeta=0 "]
83828[label="integralType\n int "]
83829[label="variableDeclarator\n beta=0 "]
93830[label="variableDeclaratorId\n beta "]
93831[label="literal\n 0 "]
63832[label="localVariableDeclarationStatement\n List<Integer>output=newArrayList<Integer>(len); "]
73833[label="localVariableDeclaration\n List<Integer>output=newArrayList<Integer>(len) "]
83834[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
93835[label="typeArguments\n <Integer> "]
103836[label="classType_lfno_classOrInterfaceType\n Integer "]
83837[label="variableDeclarator\n output=newArrayList<Integer>(len) "]
93838[label="variableDeclaratorId\n output "]
93839[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Integer>(len) "]
103840[label="typeArguments\n <Integer> "]
113841[label="classType_lfno_classOrInterfaceType\n Integer "]
103842[label="expressionName\n len "]
63843[label="basicForStatement\n for(inti=0;i<len;i++){output.add(-1);} "]
73844[label="localVariableDeclaration\n inti=0 "]
83845[label="integralType\n int "]
83846[label="variableDeclarator\n i=0 "]
93847[label="variableDeclaratorId\n i "]
93848[label="literal\n 0 "]
73849[label="relationalExpression\n i<len "]
83850[label="expressionName\n i "]
83851[label="expressionName\n len "]
73852[label="postIncrementExpression\n i++ "]
83853[label="expressionName\n i "]
73854[label="block\n {output.add(-1);} "]
83855[label="expressionStatement\n output.add(-1); "]
93856[label="methodInvocation\n output.add(-1) "]
103857[label="typeName\n output "]
103858[label="unaryExpression\n -1 "]
113859[label="literal\n 1 "]
63860[label="localVariableDeclarationStatement\n intstep=0; "]
73861[label="localVariableDeclaration\n intstep=0 "]
83862[label="integralType\n int "]
83863[label="variableDeclarator\n step=0 "]
93864[label="variableDeclaratorId\n step "]
93865[label="literal\n 0 "]
63866[label="whileStatement\n while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];} "]
73867[label="unaryExpressionNotPlusMinus\n !(sigma.size()==1&&beta==len) "]
83868[label="primaryNoNewArray_lfno_primary\n (sigma.size()==1&&beta==len) "]
93869[label="conditionalAndExpression\n sigma.size()==1&&beta==len "]
103870[label="equalityExpression\n sigma.size()==1 "]
113871[label="methodInvocation_lfno_primary\n sigma.size() "]
123872[label="typeName\n sigma "]
113873[label="literal\n 1 "]
103874[label="equalityExpression\n beta==len "]
113875[label="expressionName\n beta "]
113876[label="expressionName\n len "]
73877[label="block\n {int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];} "]
83878[label="blockStatements\n int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0]; "]
93879[label="localVariableDeclarationStatement\n int[]beta_reference=newint[]{beta}; "]
103880[label="localVariableDeclaration\n int[]beta_reference=newint[]{beta} "]
113881[label="unannArrayType\n int[] "]
123882[label="integralType\n int "]
123883[label="dims\n [] "]
113884[label="variableDeclarator\n beta_reference=newint[]{beta} "]
123885[label="variableDeclaratorId\n beta_reference "]
123886[label="arrayCreationExpression\n newint[]{beta} "]
133887[label="integralType\n int "]
133888[label="dims\n [] "]
133889[label="arrayInitializer\n {beta} "]
143890[label="expressionName\n beta "]
93891[label="expressionStatement\n get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions); "]
103892[label="methodInvocation\n get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions) "]
113893[label="methodName\n get_oracle_actions_onestep "]
113894[label="argumentList\n heads,deprels,sigma,beta_reference,output,actions "]
123895[label="expressionName\n heads "]
123896[label="expressionName\n deprels "]
123897[label="expressionName\n sigma "]
123898[label="expressionName\n beta_reference "]
123899[label="expressionName\n output "]
123900[label="expressionName\n actions "]
93901[label="expressionStatement\n beta=beta_reference[0]; "]
103902[label="assignment\n beta=beta_reference[0] "]
113903[label="expressionName\n beta "]
113904[label="assignmentOperator\n = "]
113905[label="arrayAccess_lfno_primary\n beta_reference[0] "]
123906[label="expressionName\n beta_reference "]
123907[label="literal\n 0 "]
33908[label="methodDeclaration\n voidget_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions){inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];}} "]
43909[label="methodHeader\n voidget_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions) "]
53910[label="result\n void "]
53911[label="methodDeclarator\n get_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions) "]
63912[label="formalParameterList\n List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions "]
73913[label="formalParameters\n List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output "]
83914[label="formalParameter\n List<Integer>heads "]
93915[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103916[label="typeArguments\n <Integer> "]
113917[label="classType_lfno_classOrInterfaceType\n Integer "]
93918[label="variableDeclaratorId\n heads "]
83919[label="formalParameter\n List<Integer>deprels "]
93920[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103921[label="typeArguments\n <Integer> "]
113922[label="classType_lfno_classOrInterfaceType\n Integer "]
93923[label="variableDeclaratorId\n deprels "]
83924[label="formalParameter\n List<Integer>sigma "]
93925[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103926[label="typeArguments\n <Integer> "]
113927[label="classType_lfno_classOrInterfaceType\n Integer "]
93928[label="variableDeclaratorId\n sigma "]
83929[label="formalParameter\n int[]beta "]
93930[label="unannArrayType\n int[] "]
103931[label="integralType\n int "]
103932[label="dims\n [] "]
93933[label="variableDeclaratorId\n beta "]
83934[label="formalParameter\n List<Integer>output "]
93935[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103936[label="typeArguments\n <Integer> "]
113937[label="classType_lfno_classOrInterfaceType\n Integer "]
93938[label="variableDeclaratorId\n output "]
73939[label="formalParameter\n List<Action>actions "]
83940[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Action> "]
93941[label="typeArguments\n <Action> "]
103942[label="classType_lfno_classOrInterfaceType\n Action "]
83943[label="variableDeclaratorId\n actions "]
43944[label="block\n {inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];}} "]
53945[label="blockStatements\n inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];} "]
63946[label="localVariableDeclarationStatement\n inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1); "]
73947[label="localVariableDeclaration\n inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1) "]
83948[label="integralType\n int "]
83949[label="variableDeclarator\n top0=(sigma.size()>0?sigma.get(sigma.size()-1):-1) "]
93950[label="variableDeclaratorId\n top0 "]
93951[label="primaryNoNewArray_lfno_primary\n (sigma.size()>0?sigma.get(sigma.size()-1):-1) "]
103952[label="conditionalExpression\n sigma.size()>0?sigma.get(sigma.size()-1):-1 "]
113953[label="relationalExpression\n sigma.size()>0 "]
123954[label="methodInvocation_lfno_primary\n sigma.size() "]
133955[label="typeName\n sigma "]
123956[label="literal\n 0 "]
113957[label="methodInvocation_lfno_primary\n sigma.get(sigma.size()-1) "]
123958[label="typeName\n sigma "]
123959[label="additiveExpression\n sigma.size()-1 "]
133960[label="methodInvocation_lfno_primary\n sigma.size() "]
143961[label="typeName\n sigma "]
133962[label="literal\n 1 "]
113963[label="unaryExpression\n -1 "]
123964[label="literal\n 1 "]
63965[label="localVariableDeclarationStatement\n inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1); "]
73966[label="localVariableDeclaration\n inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1) "]
83967[label="integralType\n int "]
83968[label="variableDeclarator\n top1=(sigma.size()>1?sigma.get(sigma.size()-2):-1) "]
93969[label="variableDeclaratorId\n top1 "]
93970[label="primaryNoNewArray_lfno_primary\n (sigma.size()>1?sigma.get(sigma.size()-2):-1) "]
103971[label="conditionalExpression\n sigma.size()>1?sigma.get(sigma.size()-2):-1 "]
113972[label="relationalExpression\n sigma.size()>1 "]
123973[label="methodInvocation_lfno_primary\n sigma.size() "]
133974[label="typeName\n sigma "]
123975[label="literal\n 1 "]
113976[label="methodInvocation_lfno_primary\n sigma.get(sigma.size()-2) "]
123977[label="typeName\n sigma "]
123978[label="additiveExpression\n sigma.size()-2 "]
133979[label="methodInvocation_lfno_primary\n sigma.size() "]
143980[label="typeName\n sigma "]
133981[label="literal\n 2 "]
113982[label="unaryExpression\n -1 "]
123983[label="literal\n 1 "]
63984[label="localVariableDeclarationStatement\n booleanall_descendents_reduced=true; "]
73985[label="localVariableDeclaration\n booleanall_descendents_reduced=true "]
83986[label="unannPrimitiveType\n boolean "]
83987[label="variableDeclarator\n all_descendents_reduced=true "]
93988[label="variableDeclaratorId\n all_descendents_reduced "]
93989[label="literal\n true "]
63990[label="ifThenStatement\n if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}} "]
73991[label="relationalExpression\n top0>=0 "]
83992[label="expressionName\n top0 "]
83993[label="literal\n 0 "]
73994[label="block\n {for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}} "]
83995[label="basicForStatement\n for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}} "]
93996[label="localVariableDeclaration\n inti=0 "]
103997[label="integralType\n int "]
103998[label="variableDeclarator\n i=0 "]
113999[label="variableDeclaratorId\n i "]
114000[label="literal\n 0 "]
94001[label="relationalExpression\n i<heads.size() "]
104002[label="expressionName\n i "]
104003[label="methodInvocation_lfno_primary\n heads.size() "]
114004[label="typeName\n heads "]
94005[label="preIncrementExpression\n ++i "]
104006[label="expressionName\n i "]
94007[label="block\n {if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}} "]
104008[label="ifThenStatement\n if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;} "]
114009[label="conditionalAndExpression\n heads.get(i)==top0&&output.get(i)!=top0 "]
124010[label="equalityExpression\n heads.get(i)==top0 "]
134011[label="methodInvocation_lfno_primary\n heads.get(i) "]
144012[label="typeName\n heads "]
144013[label="expressionName\n i "]
134014[label="expressionName\n top0 "]
124015[label="equalityExpression\n output.get(i)!=top0 "]
134016[label="methodInvocation_lfno_primary\n output.get(i) "]
144017[label="typeName\n output "]
144018[label="expressionName\n i "]
134019[label="expressionName\n top0 "]
114020[label="block\n {all_descendents_reduced=false;break;} "]
124021[label="blockStatements\n all_descendents_reduced=false;break; "]
134022[label="expressionStatement\n all_descendents_reduced=false; "]
144023[label="assignment\n all_descendents_reduced=false "]
154024[label="expressionName\n all_descendents_reduced "]
154025[label="assignmentOperator\n = "]
154026[label="literal\n false "]
134027[label="breakStatement\n break; "]
64028[label="ifThenElseStatement\n if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];} "]
74029[label="conditionalAndExpression\n top1>=0&&heads.get(top1)==top0 "]
84030[label="relationalExpression\n top1>=0 "]
94031[label="expressionName\n top1 "]
94032[label="literal\n 0 "]
84033[label="equalityExpression\n heads.get(top1)==top0 "]
94034[label="methodInvocation_lfno_primary\n heads.get(top1) "]
104035[label="typeName\n heads "]
104036[label="expressionName\n top1 "]
94037[label="expressionName\n top0 "]
74038[label="block\n {actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);} "]
84039[label="blockStatements\n actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0); "]
94040[label="expressionStatement\n actions.add(ActionFactory.make_left_arc(deprels.get(top1))); "]
104041[label="methodInvocation\n actions.add(ActionFactory.make_left_arc(deprels.get(top1))) "]
114042[label="typeName\n actions "]
114043[label="methodInvocation_lfno_primary\n ActionFactory.make_left_arc(deprels.get(top1)) "]
124044[label="typeName\n ActionFactory "]
124045[label="methodInvocation_lfno_primary\n deprels.get(top1) "]
134046[label="typeName\n deprels "]
134047[label="expressionName\n top1 "]
94048[label="expressionStatement\n output.set(top1,top0); "]
104049[label="methodInvocation\n output.set(top1,top0) "]
114050[label="typeName\n output "]
114051[label="argumentList\n top1,top0 "]
124052[label="expressionName\n top1 "]
124053[label="expressionName\n top0 "]
94054[label="expressionStatement\n sigma.remove(sigma.size()-1); "]
104055[label="methodInvocation\n sigma.remove(sigma.size()-1) "]
114056[label="typeName\n sigma "]
114057[label="additiveExpression\n sigma.size()-1 "]
124058[label="methodInvocation_lfno_primary\n sigma.size() "]
134059[label="typeName\n sigma "]
124060[label="literal\n 1 "]
94061[label="expressionStatement\n sigma.set(sigma.size()-1,top0); "]
104062[label="methodInvocation\n sigma.set(sigma.size()-1,top0) "]
114063[label="typeName\n sigma "]
114064[label="argumentList\n sigma.size()-1,top0 "]
124065[label="additiveExpression\n sigma.size()-1 "]
134066[label="methodInvocation_lfno_primary\n sigma.size() "]
144067[label="typeName\n sigma "]
134068[label="literal\n 1 "]
124069[label="expressionName\n top0 "]
74070[label="ifThenElseStatement\n if(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];} "]
84071[label="conditionalAndExpression\n top1>=0&&heads.get(top0)==top1&&all_descendents_reduced "]
94072[label="conditionalAndExpression\n top1>=0&&heads.get(top0)==top1 "]
104073[label="relationalExpression\n top1>=0 "]
114074[label="expressionName\n top1 "]
114075[label="literal\n 0 "]
104076[label="equalityExpression\n heads.get(top0)==top1 "]
114077[label="methodInvocation_lfno_primary\n heads.get(top0) "]
124078[label="typeName\n heads "]
124079[label="expressionName\n top0 "]
114080[label="expressionName\n top1 "]
94081[label="expressionName\n all_descendents_reduced "]
84082[label="block\n {actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);} "]
94083[label="blockStatements\n actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1); "]
104084[label="expressionStatement\n actions.add(ActionFactory.make_right_arc(deprels.get(top0))); "]
114085[label="methodInvocation\n actions.add(ActionFactory.make_right_arc(deprels.get(top0))) "]
124086[label="typeName\n actions "]
124087[label="methodInvocation_lfno_primary\n ActionFactory.make_right_arc(deprels.get(top0)) "]
134088[label="typeName\n ActionFactory "]
134089[label="methodInvocation_lfno_primary\n deprels.get(top0) "]
144090[label="typeName\n deprels "]
144091[label="expressionName\n top0 "]
104092[label="expressionStatement\n output.set(top0,top1); "]
114093[label="methodInvocation\n output.set(top0,top1) "]
124094[label="typeName\n output "]
124095[label="argumentList\n top0,top1 "]
134096[label="expressionName\n top0 "]
134097[label="expressionName\n top1 "]
104098[label="expressionStatement\n sigma.remove(sigma.size()-1); "]
114099[label="methodInvocation\n sigma.remove(sigma.size()-1) "]
124100[label="typeName\n sigma "]
124101[label="additiveExpression\n sigma.size()-1 "]
134102[label="methodInvocation_lfno_primary\n sigma.size() "]
144103[label="typeName\n sigma "]
134104[label="literal\n 1 "]
84105[label="ifThenStatement\n if(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];} "]
94106[label="relationalExpression\n beta[0]<heads.size() "]
104107[label="arrayAccess_lfno_primary\n beta[0] "]
114108[label="expressionName\n beta "]
114109[label="literal\n 0 "]
104110[label="methodInvocation_lfno_primary\n heads.size() "]
114111[label="typeName\n heads "]
94112[label="block\n {actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];} "]
104113[label="blockStatements\n actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0]; "]
114114[label="expressionStatement\n actions.add(ActionFactory.make_shift()); "]
124115[label="methodInvocation\n actions.add(ActionFactory.make_shift()) "]
134116[label="typeName\n actions "]
134117[label="methodInvocation_lfno_primary\n ActionFactory.make_shift() "]
144118[label="typeName\n ActionFactory "]
114119[label="expressionStatement\n sigma.add(beta[0]); "]
124120[label="methodInvocation\n sigma.add(beta[0]) "]
134121[label="typeName\n sigma "]
134122[label="arrayAccess_lfno_primary\n beta[0] "]
144123[label="expressionName\n beta "]
144124[label="literal\n 0 "]
114125[label="expressionStatement\n ++beta[0]; "]
124126[label="preIncrementExpression\n ++beta[0] "]
134127[label="arrayAccess_lfno_primary\n beta[0] "]
144128[label="expressionName\n beta "]
144129[label="literal\n 0 "]
04130[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.option;publicclassAdaOption{doubleada_eps;doubleada_alpha;doublelambda;doubledropout_probability;}<EOF> "]
14131[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.option; "]
24132[label="packageName\n com.hankcs.hanlp.dependency.nnparser.option "]
34133[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
44134[label="packageName\n com.hankcs.hanlp.dependency "]
54135[label="packageName\n com.hankcs.hanlp "]
64136[label="packageName\n com.hankcs "]
74137[label="packageName\n com "]
14138[label="normalClassDeclaration\n publicclassAdaOption{doubleada_eps;doubleada_alpha;doublelambda;doubledropout_probability;} "]
24139[label="classModifier\n public "]
24140[label="classBody\n {doubleada_eps;doubleada_alpha;doublelambda;doubledropout_probability;} "]
34141[label="fieldDeclaration\n doubleada_eps; "]
44142[label="floatingPointType\n double "]
44143[label="variableDeclaratorId\n ada_eps "]
34144[label="fieldDeclaration\n doubleada_alpha; "]
44145[label="floatingPointType\n double "]
44146[label="variableDeclaratorId\n ada_alpha "]
34147[label="fieldDeclaration\n doublelambda; "]
44148[label="floatingPointType\n double "]
44149[label="variableDeclaratorId\n lambda "]
34150[label="fieldDeclaration\n doubledropout_probability; "]
44151[label="floatingPointType\n double "]
44152[label="variableDeclaratorId\n dropout_probability "]
04153[label="compilationUnit\n packagecom.hankcs.test.corpus;importcom.hankcs.hanlp.HanLP;importcom.hankcs.hanlp.corpus.dictionary.DictionaryMaker;importcom.hankcs.hanlp.corpus.dictionary.EasyDictionary;importcom.hankcs.hanlp.corpus.dictionary.TFDictionary;importcom.hankcs.hanlp.corpus.dictionary.item.Item;importcom.hankcs.hanlp.corpus.document.CorpusLoader;importcom.hankcs.hanlp.corpus.document.Document;importcom.hankcs.hanlp.corpus.document.sentence.word.CompoundWord;importcom.hankcs.hanlp.corpus.document.sentence.word.IWord;importcom.hankcs.hanlp.corpus.io.FolderWalker;importcom.hankcs.hanlp.corpus.io.IOUtil;importcom.hankcs.hanlp.corpus.occurrence.TermFrequency;importcom.hankcs.hanlp.dictionary.CoreBiGramTableDictionary;importcom.hankcs.hanlp.dictionary.CoreDictionary;importcom.hankcs.hanlp.utility.Predefine;importjunit.framework.TestCase;importjava.io.*;importjava.util.List;importjava.util.Map;importjava.util.Set;importjava.util.TreeSet;publicclassAdjustCorpusextendsTestCase{publicvoidtestAdjust()throwsException{List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\");for(Filefile:fileList){handle(file);}}privatestaticvoidhandle(Filefile){try{Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}}catch(Exceptione){e.printStackTrace();}}privatestaticStringaddW(Stringtext,Stringc){text=text.replaceAll(\"\\\"+c+\"/w \",c);returntext.replaceAll(\"\\\"+c,c+\"/w \");}publicvoidtestPlay()throwsException{finalTFDictionarytfDictionary=newTFDictionary();CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}});tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\");}publicvoidtestAdjustNGram()throwsException{IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\"));while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();}bw.close();}publicvoidtestRemoveLabelD()throwsException{Set<String>nameFollowers=newTreeSet<String>();IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}}DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath);for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}}dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath);}}<EOF> "]
14154[label="packageDeclaration\n packagecom.hankcs.test.corpus; "]
24155[label="packageName\n com.hankcs.test.corpus "]
34156[label="packageName\n com.hankcs.test "]
44157[label="packageName\n com.hankcs "]
54158[label="packageName\n com "]
14159[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.HanLP; "]
24160[label="typeName\n com.hankcs.hanlp.HanLP "]
34161[label="packageOrTypeName\n com.hankcs.hanlp "]
44162[label="packageOrTypeName\n com.hankcs "]
54163[label="packageOrTypeName\n com "]
14164[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dictionary.DictionaryMaker; "]
24165[label="typeName\n com.hankcs.hanlp.corpus.dictionary.DictionaryMaker "]
34166[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dictionary "]
44167[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54168[label="packageOrTypeName\n com.hankcs.hanlp "]
64169[label="packageOrTypeName\n com.hankcs "]
74170[label="packageOrTypeName\n com "]
14171[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dictionary.EasyDictionary; "]
24172[label="typeName\n com.hankcs.hanlp.corpus.dictionary.EasyDictionary "]
34173[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dictionary "]
44174[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54175[label="packageOrTypeName\n com.hankcs.hanlp "]
64176[label="packageOrTypeName\n com.hankcs "]
74177[label="packageOrTypeName\n com "]
14178[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dictionary.TFDictionary; "]
24179[label="typeName\n com.hankcs.hanlp.corpus.dictionary.TFDictionary "]
34180[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dictionary "]
44181[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54182[label="packageOrTypeName\n com.hankcs.hanlp "]
64183[label="packageOrTypeName\n com.hankcs "]
74184[label="packageOrTypeName\n com "]
14185[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dictionary.item.Item; "]
24186[label="typeName\n com.hankcs.hanlp.corpus.dictionary.item.Item "]
34187[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dictionary.item "]
44188[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dictionary "]
54189[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
64190[label="packageOrTypeName\n com.hankcs.hanlp "]
74191[label="packageOrTypeName\n com.hankcs "]
84192[label="packageOrTypeName\n com "]
14193[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.document.CorpusLoader; "]
24194[label="typeName\n com.hankcs.hanlp.corpus.document.CorpusLoader "]
34195[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document "]
44196[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54197[label="packageOrTypeName\n com.hankcs.hanlp "]
64198[label="packageOrTypeName\n com.hankcs "]
74199[label="packageOrTypeName\n com "]
14200[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.document.Document; "]
24201[label="typeName\n com.hankcs.hanlp.corpus.document.Document "]
34202[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document "]
44203[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54204[label="packageOrTypeName\n com.hankcs.hanlp "]
64205[label="packageOrTypeName\n com.hankcs "]
74206[label="packageOrTypeName\n com "]
14207[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.document.sentence.word.CompoundWord; "]
24208[label="typeName\n com.hankcs.hanlp.corpus.document.sentence.word.CompoundWord "]
34209[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document.sentence.word "]
44210[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document.sentence "]
54211[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document "]
64212[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
74213[label="packageOrTypeName\n com.hankcs.hanlp "]
84214[label="packageOrTypeName\n com.hankcs "]
94215[label="packageOrTypeName\n com "]
14216[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.document.sentence.word.IWord; "]
24217[label="typeName\n com.hankcs.hanlp.corpus.document.sentence.word.IWord "]
34218[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document.sentence.word "]
44219[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document.sentence "]
54220[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document "]
64221[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
74222[label="packageOrTypeName\n com.hankcs.hanlp "]
84223[label="packageOrTypeName\n com.hankcs "]
94224[label="packageOrTypeName\n com "]
14225[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.FolderWalker; "]
24226[label="typeName\n com.hankcs.hanlp.corpus.io.FolderWalker "]
34227[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
44228[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54229[label="packageOrTypeName\n com.hankcs.hanlp "]
64230[label="packageOrTypeName\n com.hankcs "]
74231[label="packageOrTypeName\n com "]
14232[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
24233[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
34234[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
44235[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54236[label="packageOrTypeName\n com.hankcs.hanlp "]
64237[label="packageOrTypeName\n com.hankcs "]
74238[label="packageOrTypeName\n com "]
14239[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.occurrence.TermFrequency; "]
24240[label="typeName\n com.hankcs.hanlp.corpus.occurrence.TermFrequency "]
34241[label="packageOrTypeName\n com.hankcs.hanlp.corpus.occurrence "]
44242[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54243[label="packageOrTypeName\n com.hankcs.hanlp "]
64244[label="packageOrTypeName\n com.hankcs "]
74245[label="packageOrTypeName\n com "]
14246[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dictionary.CoreBiGramTableDictionary; "]
24247[label="typeName\n com.hankcs.hanlp.dictionary.CoreBiGramTableDictionary "]
34248[label="packageOrTypeName\n com.hankcs.hanlp.dictionary "]
44249[label="packageOrTypeName\n com.hankcs.hanlp "]
54250[label="packageOrTypeName\n com.hankcs "]
64251[label="packageOrTypeName\n com "]
14252[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dictionary.CoreDictionary; "]
24253[label="typeName\n com.hankcs.hanlp.dictionary.CoreDictionary "]
34254[label="packageOrTypeName\n com.hankcs.hanlp.dictionary "]
44255[label="packageOrTypeName\n com.hankcs.hanlp "]
54256[label="packageOrTypeName\n com.hankcs "]
64257[label="packageOrTypeName\n com "]
14258[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.Predefine; "]
24259[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
34260[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
44261[label="packageOrTypeName\n com.hankcs.hanlp "]
54262[label="packageOrTypeName\n com.hankcs "]
64263[label="packageOrTypeName\n com "]
14264[label="singleTypeImportDeclaration\n importjunit.framework.TestCase; "]
24265[label="typeName\n junit.framework.TestCase "]
34266[label="packageOrTypeName\n junit.framework "]
44267[label="packageOrTypeName\n junit "]
14268[label="typeImportOnDemandDeclaration\n importjava.io.*; "]
24269[label="packageOrTypeName\n java.io "]
34270[label="packageOrTypeName\n java "]
14271[label="singleTypeImportDeclaration\n importjava.util.List; "]
24272[label="typeName\n java.util.List "]
34273[label="packageOrTypeName\n java.util "]
44274[label="packageOrTypeName\n java "]
14275[label="singleTypeImportDeclaration\n importjava.util.Map; "]
24276[label="typeName\n java.util.Map "]
34277[label="packageOrTypeName\n java.util "]
44278[label="packageOrTypeName\n java "]
14279[label="singleTypeImportDeclaration\n importjava.util.Set; "]
24280[label="typeName\n java.util.Set "]
34281[label="packageOrTypeName\n java.util "]
44282[label="packageOrTypeName\n java "]
14283[label="singleTypeImportDeclaration\n importjava.util.TreeSet; "]
24284[label="typeName\n java.util.TreeSet "]
34285[label="packageOrTypeName\n java.util "]
44286[label="packageOrTypeName\n java "]
14287[label="normalClassDeclaration\n publicclassAdjustCorpusextendsTestCase{publicvoidtestAdjust()throwsException{List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\");for(Filefile:fileList){handle(file);}}privatestaticvoidhandle(Filefile){try{Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}}catch(Exceptione){e.printStackTrace();}}privatestaticStringaddW(Stringtext,Stringc){text=text.replaceAll(\"\\\"+c+\"/w \",c);returntext.replaceAll(\"\\\"+c,c+\"/w \");}publicvoidtestPlay()throwsException{finalTFDictionarytfDictionary=newTFDictionary();CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}});tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\");}publicvoidtestAdjustNGram()throwsException{IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\"));while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();}bw.close();}publicvoidtestRemoveLabelD()throwsException{Set<String>nameFollowers=newTreeSet<String>();IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}}DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath);for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}}dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath);}} "]
24288[label="classModifier\n public "]
24289[label="superclass\n extendsTestCase "]
34290[label="classType\n TestCase "]
24291[label="classBody\n {publicvoidtestAdjust()throwsException{List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\");for(Filefile:fileList){handle(file);}}privatestaticvoidhandle(Filefile){try{Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}}catch(Exceptione){e.printStackTrace();}}privatestaticStringaddW(Stringtext,Stringc){text=text.replaceAll(\"\\\"+c+\"/w \",c);returntext.replaceAll(\"\\\"+c,c+\"/w \");}publicvoidtestPlay()throwsException{finalTFDictionarytfDictionary=newTFDictionary();CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}});tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\");}publicvoidtestAdjustNGram()throwsException{IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\"));while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();}bw.close();}publicvoidtestRemoveLabelD()throwsException{Set<String>nameFollowers=newTreeSet<String>();IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}}DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath);for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}}dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath);}} "]
34292[label="methodDeclaration\n publicvoidtestAdjust()throwsException{List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\");for(Filefile:fileList){handle(file);}} "]
44293[label="methodModifier\n public "]
44294[label="methodHeader\n voidtestAdjust()throwsException "]
54295[label="result\n void "]
54296[label="methodDeclarator\n testAdjust() "]
54297[label="throws_\n throwsException "]
64298[label="classType\n Exception "]
44299[label="block\n {List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\");for(Filefile:fileList){handle(file);}} "]
54300[label="blockStatements\n List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\");for(Filefile:fileList){handle(file);} "]
64301[label="localVariableDeclarationStatement\n List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\"); "]
74302[label="localVariableDeclaration\n List<File>fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\") "]
84303[label="unannClassType_lfno_unannClassOrInterfaceType\n List<File> "]
94304[label="typeArguments\n <File> "]
104305[label="classType_lfno_classOrInterfaceType\n File "]
84306[label="variableDeclarator\n fileList=FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\") "]
94307[label="variableDeclaratorId\n fileList "]
94308[label="methodInvocation_lfno_primary\n FolderWalker.open(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\") "]
104309[label="typeName\n FolderWalker "]
104310[label="literal\n \"D:\\JavaProjects\\CorpusToolBox\\data\\2014\\\" "]
64311[label="enhancedForStatement\n for(Filefile:fileList){handle(file);} "]
74312[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
74313[label="variableDeclaratorId\n file "]
74314[label="expressionName\n fileList "]
74315[label="block\n {handle(file);} "]
84316[label="expressionStatement\n handle(file); "]
94317[label="methodInvocation\n handle(file) "]
104318[label="methodName\n handle "]
104319[label="expressionName\n file "]
34320[label="methodDeclaration\n privatestaticvoidhandle(Filefile){try{Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}}catch(Exceptione){e.printStackTrace();}} "]
44321[label="methodModifier\n private "]
44322[label="methodModifier\n static "]
44323[label="methodHeader\n voidhandle(Filefile) "]
54324[label="result\n void "]
54325[label="methodDeclarator\n handle(Filefile) "]
64326[label="formalParameter\n Filefile "]
74327[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
74328[label="variableDeclaratorId\n file "]
44329[label="block\n {try{Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}}catch(Exceptione){e.printStackTrace();}} "]
54330[label="tryStatement\n try{Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}}catch(Exceptione){e.printStackTrace();} "]
64331[label="block\n {Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);}} "]
74332[label="blockStatements\n Stringtext=IOUtil.readTxt(file.getPath());intlength=text.length();text=addW(text,\"：\");text=addW(text,\"？\");text=addW(text,\"，\");text=addW(text,\"）\");text=addW(text,\"（\");text=addW(text,\"！\");text=addW(text,\"(\");text=addW(text,\")\");text=addW(text,\",\");text=addW(text,\"‘\");text=addW(text,\"’\");text=addW(text,\"“\");text=addW(text,\"”\");text=addW(text,\";\");text=addW(text,\"……\");text=addW(text,\"。\");text=addW(text,\"、\");text=addW(text,\"《\");text=addW(text,\"》\");if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);} "]
84333[label="localVariableDeclarationStatement\n Stringtext=IOUtil.readTxt(file.getPath()); "]
94334[label="localVariableDeclaration\n Stringtext=IOUtil.readTxt(file.getPath()) "]
104335[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
104336[label="variableDeclarator\n text=IOUtil.readTxt(file.getPath()) "]
114337[label="variableDeclaratorId\n text "]
114338[label="methodInvocation_lfno_primary\n IOUtil.readTxt(file.getPath()) "]
124339[label="typeName\n IOUtil "]
124340[label="methodInvocation_lfno_primary\n file.getPath() "]
134341[label="typeName\n file "]
84342[label="localVariableDeclarationStatement\n intlength=text.length(); "]
94343[label="localVariableDeclaration\n intlength=text.length() "]
104344[label="integralType\n int "]
104345[label="variableDeclarator\n length=text.length() "]
114346[label="variableDeclaratorId\n length "]
114347[label="methodInvocation_lfno_primary\n text.length() "]
124348[label="typeName\n text "]
84349[label="expressionStatement\n text=addW(text,\"：\"); "]
94350[label="assignment\n text=addW(text,\"：\") "]
104351[label="expressionName\n text "]
104352[label="assignmentOperator\n = "]
104353[label="methodInvocation_lfno_primary\n addW(text,\"：\") "]
114354[label="methodName\n addW "]
114355[label="argumentList\n text,\"：\" "]
124356[label="expressionName\n text "]
124357[label="literal\n \"：\" "]
84358[label="expressionStatement\n text=addW(text,\"？\"); "]
94359[label="assignment\n text=addW(text,\"？\") "]
104360[label="expressionName\n text "]
104361[label="assignmentOperator\n = "]
104362[label="methodInvocation_lfno_primary\n addW(text,\"？\") "]
114363[label="methodName\n addW "]
114364[label="argumentList\n text,\"？\" "]
124365[label="expressionName\n text "]
124366[label="literal\n \"？\" "]
84367[label="expressionStatement\n text=addW(text,\"，\"); "]
94368[label="assignment\n text=addW(text,\"，\") "]
104369[label="expressionName\n text "]
104370[label="assignmentOperator\n = "]
104371[label="methodInvocation_lfno_primary\n addW(text,\"，\") "]
114372[label="methodName\n addW "]
114373[label="argumentList\n text,\"，\" "]
124374[label="expressionName\n text "]
124375[label="literal\n \"，\" "]
84376[label="expressionStatement\n text=addW(text,\"）\"); "]
94377[label="assignment\n text=addW(text,\"）\") "]
104378[label="expressionName\n text "]
104379[label="assignmentOperator\n = "]
104380[label="methodInvocation_lfno_primary\n addW(text,\"）\") "]
114381[label="methodName\n addW "]
114382[label="argumentList\n text,\"）\" "]
124383[label="expressionName\n text "]
124384[label="literal\n \"）\" "]
84385[label="expressionStatement\n text=addW(text,\"（\"); "]
94386[label="assignment\n text=addW(text,\"（\") "]
104387[label="expressionName\n text "]
104388[label="assignmentOperator\n = "]
104389[label="methodInvocation_lfno_primary\n addW(text,\"（\") "]
114390[label="methodName\n addW "]
114391[label="argumentList\n text,\"（\" "]
124392[label="expressionName\n text "]
124393[label="literal\n \"（\" "]
84394[label="expressionStatement\n text=addW(text,\"！\"); "]
94395[label="assignment\n text=addW(text,\"！\") "]
104396[label="expressionName\n text "]
104397[label="assignmentOperator\n = "]
104398[label="methodInvocation_lfno_primary\n addW(text,\"！\") "]
114399[label="methodName\n addW "]
114400[label="argumentList\n text,\"！\" "]
124401[label="expressionName\n text "]
124402[label="literal\n \"！\" "]
84403[label="expressionStatement\n text=addW(text,\"(\"); "]
94404[label="assignment\n text=addW(text,\"(\") "]
104405[label="expressionName\n text "]
104406[label="assignmentOperator\n = "]
104407[label="methodInvocation_lfno_primary\n addW(text,\"(\") "]
114408[label="methodName\n addW "]
114409[label="argumentList\n text,\"(\" "]
124410[label="expressionName\n text "]
124411[label="literal\n \"(\" "]
84412[label="expressionStatement\n text=addW(text,\")\"); "]
94413[label="assignment\n text=addW(text,\")\") "]
104414[label="expressionName\n text "]
104415[label="assignmentOperator\n = "]
104416[label="methodInvocation_lfno_primary\n addW(text,\")\") "]
114417[label="methodName\n addW "]
114418[label="argumentList\n text,\")\" "]
124419[label="expressionName\n text "]
124420[label="literal\n \")\" "]
84421[label="expressionStatement\n text=addW(text,\",\"); "]
94422[label="assignment\n text=addW(text,\",\") "]
104423[label="expressionName\n text "]
104424[label="assignmentOperator\n = "]
104425[label="methodInvocation_lfno_primary\n addW(text,\",\") "]
114426[label="methodName\n addW "]
114427[label="argumentList\n text,\",\" "]
124428[label="expressionName\n text "]
124429[label="literal\n \",\" "]
84430[label="expressionStatement\n text=addW(text,\"‘\"); "]
94431[label="assignment\n text=addW(text,\"‘\") "]
104432[label="expressionName\n text "]
104433[label="assignmentOperator\n = "]
104434[label="methodInvocation_lfno_primary\n addW(text,\"‘\") "]
114435[label="methodName\n addW "]
114436[label="argumentList\n text,\"‘\" "]
124437[label="expressionName\n text "]
124438[label="literal\n \"‘\" "]
84439[label="expressionStatement\n text=addW(text,\"’\"); "]
94440[label="assignment\n text=addW(text,\"’\") "]
104441[label="expressionName\n text "]
104442[label="assignmentOperator\n = "]
104443[label="methodInvocation_lfno_primary\n addW(text,\"’\") "]
114444[label="methodName\n addW "]
114445[label="argumentList\n text,\"’\" "]
124446[label="expressionName\n text "]
124447[label="literal\n \"’\" "]
84448[label="expressionStatement\n text=addW(text,\"“\"); "]
94449[label="assignment\n text=addW(text,\"“\") "]
104450[label="expressionName\n text "]
104451[label="assignmentOperator\n = "]
104452[label="methodInvocation_lfno_primary\n addW(text,\"“\") "]
114453[label="methodName\n addW "]
114454[label="argumentList\n text,\"“\" "]
124455[label="expressionName\n text "]
124456[label="literal\n \"“\" "]
84457[label="expressionStatement\n text=addW(text,\"”\"); "]
94458[label="assignment\n text=addW(text,\"”\") "]
104459[label="expressionName\n text "]
104460[label="assignmentOperator\n = "]
104461[label="methodInvocation_lfno_primary\n addW(text,\"”\") "]
114462[label="methodName\n addW "]
114463[label="argumentList\n text,\"”\" "]
124464[label="expressionName\n text "]
124465[label="literal\n \"”\" "]
84466[label="expressionStatement\n text=addW(text,\";\"); "]
94467[label="assignment\n text=addW(text,\";\") "]
104468[label="expressionName\n text "]
104469[label="assignmentOperator\n = "]
104470[label="methodInvocation_lfno_primary\n addW(text,\";\") "]
114471[label="methodName\n addW "]
114472[label="argumentList\n text,\";\" "]
124473[label="expressionName\n text "]
124474[label="literal\n \";\" "]
84475[label="expressionStatement\n text=addW(text,\"……\"); "]
94476[label="assignment\n text=addW(text,\"……\") "]
104477[label="expressionName\n text "]
104478[label="assignmentOperator\n = "]
104479[label="methodInvocation_lfno_primary\n addW(text,\"……\") "]
114480[label="methodName\n addW "]
114481[label="argumentList\n text,\"……\" "]
124482[label="expressionName\n text "]
124483[label="literal\n \"……\" "]
84484[label="expressionStatement\n text=addW(text,\"。\"); "]
94485[label="assignment\n text=addW(text,\"。\") "]
104486[label="expressionName\n text "]
104487[label="assignmentOperator\n = "]
104488[label="methodInvocation_lfno_primary\n addW(text,\"。\") "]
114489[label="methodName\n addW "]
114490[label="argumentList\n text,\"。\" "]
124491[label="expressionName\n text "]
124492[label="literal\n \"。\" "]
84493[label="expressionStatement\n text=addW(text,\"、\"); "]
94494[label="assignment\n text=addW(text,\"、\") "]
104495[label="expressionName\n text "]
104496[label="assignmentOperator\n = "]
104497[label="methodInvocation_lfno_primary\n addW(text,\"、\") "]
114498[label="methodName\n addW "]
114499[label="argumentList\n text,\"、\" "]
124500[label="expressionName\n text "]
124501[label="literal\n \"、\" "]
84502[label="expressionStatement\n text=addW(text,\"《\"); "]
94503[label="assignment\n text=addW(text,\"《\") "]
104504[label="expressionName\n text "]
104505[label="assignmentOperator\n = "]
104506[label="methodInvocation_lfno_primary\n addW(text,\"《\") "]
114507[label="methodName\n addW "]
114508[label="argumentList\n text,\"《\" "]
124509[label="expressionName\n text "]
124510[label="literal\n \"《\" "]
84511[label="expressionStatement\n text=addW(text,\"》\"); "]
94512[label="assignment\n text=addW(text,\"》\") "]
104513[label="expressionName\n text "]
104514[label="assignmentOperator\n = "]
104515[label="methodInvocation_lfno_primary\n addW(text,\"》\") "]
114516[label="methodName\n addW "]
114517[label="argumentList\n text,\"》\" "]
124518[label="expressionName\n text "]
124519[label="literal\n \"》\" "]
84520[label="ifThenStatement\n if(text.length()!=length){BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);} "]
94521[label="equalityExpression\n text.length()!=length "]
104522[label="methodInvocation_lfno_primary\n text.length() "]
114523[label="typeName\n text "]
104524[label="expressionName\n length "]
94525[label="block\n {BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file);} "]
104526[label="blockStatements\n BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file)));bw.write(text);bw.close();System.out.println(\"修正了\"+file); "]
114527[label="localVariableDeclarationStatement\n BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file))); "]
124528[label="localVariableDeclaration\n BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file))) "]
134529[label="unannClassType_lfno_unannClassOrInterfaceType\n BufferedWriter "]
134530[label="variableDeclarator\n bw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file))) "]
144531[label="variableDeclaratorId\n bw "]
144532[label="classInstanceCreationExpression_lfno_primary\n newBufferedWriter(newOutputStreamWriter(newFileOutputStream(file))) "]
154533[label="classInstanceCreationExpression_lfno_primary\n newOutputStreamWriter(newFileOutputStream(file)) "]
164534[label="classInstanceCreationExpression_lfno_primary\n newFileOutputStream(file) "]
174535[label="expressionName\n file "]
114536[label="expressionStatement\n bw.write(text); "]
124537[label="methodInvocation\n bw.write(text) "]
134538[label="typeName\n bw "]
134539[label="expressionName\n text "]
114540[label="expressionStatement\n bw.close(); "]
124541[label="methodInvocation\n bw.close() "]
134542[label="typeName\n bw "]
114543[label="expressionStatement\n System.out.println(\"修正了\"+file); "]
124544[label="methodInvocation\n System.out.println(\"修正了\"+file) "]
134545[label="typeName\n System.out "]
144546[label="packageOrTypeName\n System "]
134547[label="additiveExpression\n \"修正了\"+file "]
144548[label="literal\n \"修正了\" "]
144549[label="expressionName\n file "]
64550[label="catchClause\n catch(Exceptione){e.printStackTrace();} "]
74551[label="catchFormalParameter\n Exceptione "]
84552[label="unannClassType\n Exception "]
84553[label="variableDeclaratorId\n e "]
74554[label="block\n {e.printStackTrace();} "]
84555[label="expressionStatement\n e.printStackTrace(); "]
94556[label="methodInvocation\n e.printStackTrace() "]
104557[label="typeName\n e "]
34558[label="methodDeclaration\n privatestaticStringaddW(Stringtext,Stringc){text=text.replaceAll(\"\\\"+c+\"/w \",c);returntext.replaceAll(\"\\\"+c,c+\"/w \");} "]
44559[label="methodModifier\n private "]
44560[label="methodModifier\n static "]
44561[label="methodHeader\n StringaddW(Stringtext,Stringc) "]
54562[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
54563[label="methodDeclarator\n addW(Stringtext,Stringc) "]
64564[label="formalParameterList\n Stringtext,Stringc "]
74565[label="formalParameter\n Stringtext "]
84566[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
84567[label="variableDeclaratorId\n text "]
74568[label="formalParameter\n Stringc "]
84569[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
84570[label="variableDeclaratorId\n c "]
44571[label="block\n {text=text.replaceAll(\"\\\"+c+\"/w \",c);returntext.replaceAll(\"\\\"+c,c+\"/w \");} "]
54572[label="blockStatements\n text=text.replaceAll(\"\\\"+c+\"/w \",c);returntext.replaceAll(\"\\\"+c,c+\"/w \"); "]
64573[label="expressionStatement\n text=text.replaceAll(\"\\\"+c+\"/w \",c); "]
74574[label="assignment\n text=text.replaceAll(\"\\\"+c+\"/w \",c) "]
84575[label="expressionName\n text "]
84576[label="assignmentOperator\n = "]
84577[label="methodInvocation_lfno_primary\n text.replaceAll(\"\\\"+c+\"/w \",c) "]
94578[label="typeName\n text "]
94579[label="argumentList\n \"\\\"+c+\"/w \",c "]
104580[label="additiveExpression\n \"\\\"+c+\"/w \" "]
114581[label="additiveExpression\n \"\\\"+c "]
124582[label="literal\n \"\\\" "]
124583[label="expressionName\n c "]
114584[label="literal\n \"/w \" "]
104585[label="expressionName\n c "]
64586[label="returnStatement\n returntext.replaceAll(\"\\\"+c,c+\"/w \"); "]
74587[label="methodInvocation_lfno_primary\n text.replaceAll(\"\\\"+c,c+\"/w \") "]
84588[label="typeName\n text "]
84589[label="argumentList\n \"\\\"+c,c+\"/w \" "]
94590[label="additiveExpression\n \"\\\"+c "]
104591[label="literal\n \"\\\" "]
104592[label="expressionName\n c "]
94593[label="additiveExpression\n c+\"/w \" "]
104594[label="expressionName\n c "]
104595[label="literal\n \"/w \" "]
34596[label="methodDeclaration\n publicvoidtestPlay()throwsException{finalTFDictionarytfDictionary=newTFDictionary();CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}});tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\");} "]
44597[label="methodModifier\n public "]
44598[label="methodHeader\n voidtestPlay()throwsException "]
54599[label="result\n void "]
54600[label="methodDeclarator\n testPlay() "]
54601[label="throws_\n throwsException "]
64602[label="classType\n Exception "]
44603[label="block\n {finalTFDictionarytfDictionary=newTFDictionary();CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}});tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\");} "]
54604[label="blockStatements\n finalTFDictionarytfDictionary=newTFDictionary();CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}});tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\"); "]
64605[label="localVariableDeclarationStatement\n finalTFDictionarytfDictionary=newTFDictionary(); "]
74606[label="localVariableDeclaration\n finalTFDictionarytfDictionary=newTFDictionary() "]
84607[label="variableModifier\n final "]
84608[label="unannClassType_lfno_unannClassOrInterfaceType\n TFDictionary "]
84609[label="variableDeclarator\n tfDictionary=newTFDictionary() "]
94610[label="variableDeclaratorId\n tfDictionary "]
94611[label="classInstanceCreationExpression_lfno_primary\n newTFDictionary() "]
64612[label="expressionStatement\n CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}}); "]
74613[label="methodInvocation\n CorpusLoader.walk(\"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}}) "]
84614[label="typeName\n CorpusLoader "]
84615[label="argumentList\n \"D:\\JavaProjects\\CorpusToolBox\\data\\2014\",newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}} "]
94616[label="literal\n \"D:\\JavaProjects\\CorpusToolBox\\data\\2014\" "]
94617[label="classInstanceCreationExpression_lfno_primary\n newCorpusLoader.Handler(){@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}} "]
104618[label="classBody\n {@Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}}} "]
114619[label="methodDeclaration\n @Overridepublicvoidhandle(Documentdocument){for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}} "]
124620[label="markerAnnotation\n @Override "]
134621[label="typeName\n Override "]
124622[label="methodModifier\n public "]
124623[label="methodHeader\n voidhandle(Documentdocument) "]
134624[label="result\n void "]
134625[label="methodDeclarator\n handle(Documentdocument) "]
144626[label="formalParameter\n Documentdocument "]
154627[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
154628[label="variableDeclaratorId\n document "]
124629[label="block\n {for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}}} "]
134630[label="enhancedForStatement\n for(List<IWord>wordList:document.getComplexSentenceList()){for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}} "]
144631[label="unannClassType_lfno_unannClassOrInterfaceType\n List<IWord> "]
154632[label="typeArguments\n <IWord> "]
164633[label="classType_lfno_classOrInterfaceType\n IWord "]
144634[label="variableDeclaratorId\n wordList "]
144635[label="methodInvocation_lfno_primary\n document.getComplexSentenceList() "]
154636[label="typeName\n document "]
144637[label="block\n {for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}}} "]
154638[label="enhancedForStatement\n for(IWordword:wordList){if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}} "]
164639[label="unannClassType_lfno_unannClassOrInterfaceType\n IWord "]
164640[label="variableDeclaratorId\n word "]
164641[label="expressionName\n wordList "]
164642[label="block\n {if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());}} "]
174643[label="ifThenStatement\n if(wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\")){tfDictionary.add(word.toString());} "]
184644[label="conditionalAndExpression\n wordinstanceofCompoundWord&&word.getLabel().equals(\"ns\") "]
194645[label="relationalExpression\n wordinstanceofCompoundWord "]
204646[label="expressionName\n word "]
204647[label="classType_lfno_classOrInterfaceType\n CompoundWord "]
194648[label="primary\n word.getLabel().equals(\"ns\") "]
204649[label="methodInvocation_lfno_primary\n word.getLabel() "]
214650[label="typeName\n word "]
204651[label="methodInvocation_lf_primary\n .equals(\"ns\") "]
214652[label="literal\n \"ns\" "]
184653[label="block\n {tfDictionary.add(word.toString());} "]
194654[label="expressionStatement\n tfDictionary.add(word.toString()); "]
204655[label="methodInvocation\n tfDictionary.add(word.toString()) "]
214656[label="typeName\n tfDictionary "]
214657[label="methodInvocation_lfno_primary\n word.toString() "]
224658[label="typeName\n word "]
64659[label="expressionStatement\n tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\"); "]
74660[label="methodInvocation\n tfDictionary.saveTxtTo(\"data/test/complex_ns.txt\") "]
84661[label="typeName\n tfDictionary "]
84662[label="literal\n \"data/test/complex_ns.txt\" "]
34663[label="methodDeclaration\n publicvoidtestAdjustNGram()throwsException{IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\"));while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();}bw.close();} "]
44664[label="methodModifier\n public "]
44665[label="methodHeader\n voidtestAdjustNGram()throwsException "]
54666[label="result\n void "]
54667[label="methodDeclarator\n testAdjustNGram() "]
54668[label="throws_\n throwsException "]
64669[label="classType\n Exception "]
44670[label="block\n {IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\"));while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();}bw.close();} "]
54671[label="blockStatements\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\"));while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();}bw.close(); "]
64672[label="localVariableDeclarationStatement\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath); "]
74673[label="localVariableDeclaration\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath) "]
84674[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
94675[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
94676[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
84677[label="variableDeclarator\n iterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath) "]
94678[label="variableDeclaratorId\n iterator "]
94679[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath) "]
104680[label="expressionName\n HanLP.Config.BiGramDictionaryPath "]
114681[label="ambiguousName\n HanLP.Config "]
124682[label="ambiguousName\n HanLP "]
64683[label="localVariableDeclarationStatement\n BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\")); "]
74684[label="localVariableDeclaration\n BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\")) "]
84685[label="unannClassType_lfno_unannClassOrInterfaceType\n BufferedWriter "]
84686[label="variableDeclarator\n bw=newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\")) "]
94687[label="variableDeclaratorId\n bw "]
94688[label="classInstanceCreationExpression_lfno_primary\n newBufferedWriter(newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\")) "]
104689[label="classInstanceCreationExpression_lfno_primary\n newOutputStreamWriter(newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\") "]
114690[label="argumentList\n newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\"),\"UTF-8\" "]
124691[label="classInstanceCreationExpression_lfno_primary\n newFileOutputStream(HanLP.Config.BiGramDictionaryPath+\"adjust.txt\") "]
134692[label="additiveExpression\n HanLP.Config.BiGramDictionaryPath+\"adjust.txt\" "]
144693[label="expressionName\n HanLP.Config.BiGramDictionaryPath "]
154694[label="ambiguousName\n HanLP.Config "]
164695[label="ambiguousName\n HanLP "]
144696[label="literal\n \"adjust.txt\" "]
124697[label="literal\n \"UTF-8\" "]
64698[label="whileStatement\n while(iterator.hasNext()){Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();} "]
74699[label="methodInvocation_lfno_primary\n iterator.hasNext() "]
84700[label="typeName\n iterator "]
74701[label="block\n {Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine();} "]
84702[label="blockStatements\n Stringline=iterator.next();String[]params=line.split(\" \");Stringfirst=params[0].split(\"@\",2)[0];Stringsecond=params[0].split(\"@\",2)[1];intbiFrequency=Integer.parseInt(params[1]);CoreDictionary.Attributeattribute=CoreDictionary.get(first+second);if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;}bw.write(line);bw.newLine(); "]
94703[label="localVariableDeclarationStatement\n Stringline=iterator.next(); "]
104704[label="localVariableDeclaration\n Stringline=iterator.next() "]
114705[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
114706[label="variableDeclarator\n line=iterator.next() "]
124707[label="variableDeclaratorId\n line "]
124708[label="methodInvocation_lfno_primary\n iterator.next() "]
134709[label="typeName\n iterator "]
94710[label="localVariableDeclarationStatement\n String[]params=line.split(\" \"); "]
104711[label="localVariableDeclaration\n String[]params=line.split(\" \") "]
114712[label="unannArrayType\n String[] "]
124713[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
124714[label="dims\n [] "]
114715[label="variableDeclarator\n params=line.split(\" \") "]
124716[label="variableDeclaratorId\n params "]
124717[label="methodInvocation_lfno_primary\n line.split(\" \") "]
134718[label="typeName\n line "]
134719[label="literal\n \" \" "]
94720[label="localVariableDeclarationStatement\n Stringfirst=params[0].split(\"@\",2)[0]; "]
104721[label="localVariableDeclaration\n Stringfirst=params[0].split(\"@\",2)[0] "]
114722[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
114723[label="variableDeclarator\n first=params[0].split(\"@\",2)[0] "]
124724[label="variableDeclaratorId\n first "]
124725[label="primary\n params[0].split(\"@\",2)[0] "]
134726[label="arrayAccess_lfno_primary\n params[0] "]
144727[label="expressionName\n params "]
144728[label="literal\n 0 "]
134729[label="arrayAccess_lf_primary\n .split(\"@\",2)[0] "]
144730[label="methodInvocation_lf_primary\n .split(\"@\",2) "]
154731[label="argumentList\n \"@\",2 "]
164732[label="literal\n \"@\" "]
164733[label="literal\n 2 "]
144734[label="literal\n 0 "]
94735[label="localVariableDeclarationStatement\n Stringsecond=params[0].split(\"@\",2)[1]; "]
104736[label="localVariableDeclaration\n Stringsecond=params[0].split(\"@\",2)[1] "]
114737[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
114738[label="variableDeclarator\n second=params[0].split(\"@\",2)[1] "]
124739[label="variableDeclaratorId\n second "]
124740[label="primary\n params[0].split(\"@\",2)[1] "]
134741[label="arrayAccess_lfno_primary\n params[0] "]
144742[label="expressionName\n params "]
144743[label="literal\n 0 "]
134744[label="arrayAccess_lf_primary\n .split(\"@\",2)[1] "]
144745[label="methodInvocation_lf_primary\n .split(\"@\",2) "]
154746[label="argumentList\n \"@\",2 "]
164747[label="literal\n \"@\" "]
164748[label="literal\n 2 "]
144749[label="literal\n 1 "]
94750[label="localVariableDeclarationStatement\n intbiFrequency=Integer.parseInt(params[1]); "]
104751[label="localVariableDeclaration\n intbiFrequency=Integer.parseInt(params[1]) "]
114752[label="integralType\n int "]
114753[label="variableDeclarator\n biFrequency=Integer.parseInt(params[1]) "]
124754[label="variableDeclaratorId\n biFrequency "]
124755[label="methodInvocation_lfno_primary\n Integer.parseInt(params[1]) "]
134756[label="typeName\n Integer "]
134757[label="arrayAccess_lfno_primary\n params[1] "]
144758[label="expressionName\n params "]
144759[label="literal\n 1 "]
94760[label="localVariableDeclarationStatement\n CoreDictionary.Attributeattribute=CoreDictionary.get(first+second); "]
104761[label="localVariableDeclaration\n CoreDictionary.Attributeattribute=CoreDictionary.get(first+second) "]
114762[label="unannClassOrInterfaceType\n CoreDictionary.Attribute "]
124763[label="unannClassType_lfno_unannClassOrInterfaceType\n CoreDictionary "]
124764[label="unannClassType_lf_unannClassOrInterfaceType\n .Attribute "]
114765[label="variableDeclarator\n attribute=CoreDictionary.get(first+second) "]
124766[label="variableDeclaratorId\n attribute "]
124767[label="methodInvocation_lfno_primary\n CoreDictionary.get(first+second) "]
134768[label="typeName\n CoreDictionary "]
134769[label="additiveExpression\n first+second "]
144770[label="expressionName\n first "]
144771[label="expressionName\n second "]
94772[label="ifThenStatement\n if(attribute!=null&&(first.length()==1||second.length()==1)){System.out.println(line);continue;} "]
104773[label="conditionalAndExpression\n attribute!=null&&(first.length()==1||second.length()==1) "]
114774[label="equalityExpression\n attribute!=null "]
124775[label="expressionName\n attribute "]
124776[label="literal\n null "]
114777[label="primaryNoNewArray_lfno_primary\n (first.length()==1||second.length()==1) "]
124778[label="conditionalOrExpression\n first.length()==1||second.length()==1 "]
134779[label="equalityExpression\n first.length()==1 "]
144780[label="methodInvocation_lfno_primary\n first.length() "]
154781[label="typeName\n first "]
144782[label="literal\n 1 "]
134783[label="equalityExpression\n second.length()==1 "]
144784[label="methodInvocation_lfno_primary\n second.length() "]
154785[label="typeName\n second "]
144786[label="literal\n 1 "]
104787[label="block\n {System.out.println(line);continue;} "]
114788[label="blockStatements\n System.out.println(line);continue; "]
124789[label="expressionStatement\n System.out.println(line); "]
134790[label="methodInvocation\n System.out.println(line) "]
144791[label="typeName\n System.out "]
154792[label="packageOrTypeName\n System "]
144793[label="expressionName\n line "]
124794[label="continueStatement\n continue; "]
94795[label="expressionStatement\n bw.write(line); "]
104796[label="methodInvocation\n bw.write(line) "]
114797[label="typeName\n bw "]
114798[label="expressionName\n line "]
94799[label="expressionStatement\n bw.newLine(); "]
104800[label="methodInvocation\n bw.newLine() "]
114801[label="typeName\n bw "]
64802[label="expressionStatement\n bw.close(); "]
74803[label="methodInvocation\n bw.close() "]
84804[label="typeName\n bw "]
34805[label="methodDeclaration\n publicvoidtestRemoveLabelD()throwsException{Set<String>nameFollowers=newTreeSet<String>();IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}}DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath);for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}}dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath);} "]
44806[label="methodModifier\n public "]
44807[label="methodHeader\n voidtestRemoveLabelD()throwsException "]
54808[label="result\n void "]
54809[label="methodDeclarator\n testRemoveLabelD() "]
54810[label="throws_\n throwsException "]
64811[label="classType\n Exception "]
44812[label="block\n {Set<String>nameFollowers=newTreeSet<String>();IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}}DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath);for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}}dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath);} "]
54813[label="blockStatements\n Set<String>nameFollowers=newTreeSet<String>();IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath);while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}}DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath);for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}}dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath); "]
64814[label="localVariableDeclarationStatement\n Set<String>nameFollowers=newTreeSet<String>(); "]
74815[label="localVariableDeclaration\n Set<String>nameFollowers=newTreeSet<String>() "]
84816[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
94817[label="typeArguments\n <String> "]
104818[label="classType_lfno_classOrInterfaceType\n String "]
84819[label="variableDeclarator\n nameFollowers=newTreeSet<String>() "]
94820[label="variableDeclaratorId\n nameFollowers "]
94821[label="classInstanceCreationExpression_lfno_primary\n newTreeSet<String>() "]
104822[label="typeArguments\n <String> "]
114823[label="classType_lfno_classOrInterfaceType\n String "]
64824[label="localVariableDeclarationStatement\n IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath); "]
74825[label="localVariableDeclaration\n IOUtil.LineIteratorlineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath) "]
84826[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
94827[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
94828[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
84829[label="variableDeclarator\n lineIterator=newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath) "]
94830[label="variableDeclaratorId\n lineIterator "]
94831[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(HanLP.Config.BiGramDictionaryPath) "]
104832[label="expressionName\n HanLP.Config.BiGramDictionaryPath "]
114833[label="ambiguousName\n HanLP.Config "]
124834[label="ambiguousName\n HanLP "]
64835[label="whileStatement\n while(lineIterator.hasNext()){Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}} "]
74836[label="methodInvocation_lfno_primary\n lineIterator.hasNext() "]
84837[label="typeName\n lineIterator "]
74838[label="block\n {Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);}} "]
84839[label="blockStatements\n Stringline=lineIterator.next();String[]words=line.split(\"\\s\")[0].split(\"@\");if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);} "]
94840[label="localVariableDeclarationStatement\n Stringline=lineIterator.next(); "]
104841[label="localVariableDeclaration\n Stringline=lineIterator.next() "]
114842[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
114843[label="variableDeclarator\n line=lineIterator.next() "]
124844[label="variableDeclaratorId\n line "]
124845[label="methodInvocation_lfno_primary\n lineIterator.next() "]
134846[label="typeName\n lineIterator "]
94847[label="localVariableDeclarationStatement\n String[]words=line.split(\"\\s\")[0].split(\"@\"); "]
104848[label="localVariableDeclaration\n String[]words=line.split(\"\\s\")[0].split(\"@\") "]
114849[label="unannArrayType\n String[] "]
124850[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
124851[label="dims\n [] "]
114852[label="variableDeclarator\n words=line.split(\"\\s\")[0].split(\"@\") "]
124853[label="variableDeclaratorId\n words "]
124854[label="primary\n line.split(\"\\s\")[0].split(\"@\") "]
134855[label="arrayAccess_lfno_primary\n line.split(\"\\s\")[0] "]
144856[label="methodInvocation_lfno_primary\n line.split(\"\\s\") "]
154857[label="typeName\n line "]
154858[label="literal\n \"\\s\" "]
144859[label="literal\n 0 "]
134860[label="methodInvocation_lf_primary\n .split(\"@\") "]
144861[label="literal\n \"@\" "]
94862[label="ifThenStatement\n if(words[0].equals(Predefine.TAG_PEOPLE)){nameFollowers.add(words[1]);} "]
104863[label="primary\n words[0].equals(Predefine.TAG_PEOPLE) "]
114864[label="arrayAccess_lfno_primary\n words[0] "]
124865[label="expressionName\n words "]
124866[label="literal\n 0 "]
114867[label="methodInvocation_lf_primary\n .equals(Predefine.TAG_PEOPLE) "]
124868[label="expressionName\n Predefine.TAG_PEOPLE "]
134869[label="ambiguousName\n Predefine "]
104870[label="block\n {nameFollowers.add(words[1]);} "]
114871[label="expressionStatement\n nameFollowers.add(words[1]); "]
124872[label="methodInvocation\n nameFollowers.add(words[1]) "]
134873[label="typeName\n nameFollowers "]
134874[label="arrayAccess_lfno_primary\n words[1] "]
144875[label="expressionName\n words "]
144876[label="literal\n 1 "]
64877[label="localVariableDeclarationStatement\n DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath); "]
74878[label="localVariableDeclaration\n DictionaryMakerdictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath) "]
84879[label="unannClassType_lfno_unannClassOrInterfaceType\n DictionaryMaker "]
84880[label="variableDeclarator\n dictionary=DictionaryMaker.load(HanLP.Config.PersonDictionaryPath) "]
94881[label="variableDeclaratorId\n dictionary "]
94882[label="methodInvocation_lfno_primary\n DictionaryMaker.load(HanLP.Config.PersonDictionaryPath) "]
104883[label="typeName\n DictionaryMaker "]
104884[label="expressionName\n HanLP.Config.PersonDictionaryPath "]
114885[label="ambiguousName\n HanLP.Config "]
124886[label="ambiguousName\n HanLP "]
64887[label="enhancedForStatement\n for(Map.Entry<String,Item>entry:dictionary.entrySet()){Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}} "]
74888[label="unannClassOrInterfaceType\n Map.Entry<String,Item> "]
84889[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
84890[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,Item> "]
94891[label="typeArguments\n <String,Item> "]
104892[label="typeArgumentList\n String,Item "]
114893[label="classType_lfno_classOrInterfaceType\n String "]
114894[label="classType_lfno_classOrInterfaceType\n Item "]
74895[label="variableDeclaratorId\n entry "]
74896[label="methodInvocation_lfno_primary\n dictionary.entrySet() "]
84897[label="typeName\n dictionary "]
74898[label="block\n {Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}}} "]
84899[label="blockStatements\n Stringkey=entry.getKey();intdF=entry.getValue().getFrequency(\"D\");if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}} "]
94900[label="localVariableDeclarationStatement\n Stringkey=entry.getKey(); "]
104901[label="localVariableDeclaration\n Stringkey=entry.getKey() "]
114902[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
114903[label="variableDeclarator\n key=entry.getKey() "]
124904[label="variableDeclaratorId\n key "]
124905[label="methodInvocation_lfno_primary\n entry.getKey() "]
134906[label="typeName\n entry "]
94907[label="localVariableDeclarationStatement\n intdF=entry.getValue().getFrequency(\"D\"); "]
104908[label="localVariableDeclaration\n intdF=entry.getValue().getFrequency(\"D\") "]
114909[label="integralType\n int "]
114910[label="variableDeclarator\n dF=entry.getValue().getFrequency(\"D\") "]
124911[label="variableDeclaratorId\n dF "]
124912[label="primary\n entry.getValue().getFrequency(\"D\") "]
134913[label="methodInvocation_lfno_primary\n entry.getValue() "]
144914[label="typeName\n entry "]
134915[label="methodInvocation_lf_primary\n .getFrequency(\"D\") "]
144916[label="literal\n \"D\" "]
94917[label="ifThenStatement\n if(key.length()==1&&0<dF&&dF<100){CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}} "]
104918[label="conditionalAndExpression\n key.length()==1&&0<dF&&dF<100 "]
114919[label="conditionalAndExpression\n key.length()==1&&0<dF "]
124920[label="equalityExpression\n key.length()==1 "]
134921[label="methodInvocation_lfno_primary\n key.length() "]
144922[label="typeName\n key "]
134923[label="literal\n 1 "]
124924[label="relationalExpression\n 0<dF "]
134925[label="literal\n 0 "]
134926[label="expressionName\n dF "]
114927[label="relationalExpression\n dF<100 "]
124928[label="expressionName\n dF "]
124929[label="literal\n 100 "]
104930[label="block\n {CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");}} "]
114931[label="blockStatements\n CoreDictionary.Attributeattribute=CoreDictionary.get(key);if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");} "]
124932[label="localVariableDeclarationStatement\n CoreDictionary.Attributeattribute=CoreDictionary.get(key); "]
134933[label="localVariableDeclaration\n CoreDictionary.Attributeattribute=CoreDictionary.get(key) "]
144934[label="unannClassOrInterfaceType\n CoreDictionary.Attribute "]
154935[label="unannClassType_lfno_unannClassOrInterfaceType\n CoreDictionary "]
154936[label="unannClassType_lf_unannClassOrInterfaceType\n .Attribute "]
144937[label="variableDeclarator\n attribute=CoreDictionary.get(key) "]
154938[label="variableDeclaratorId\n attribute "]
154939[label="methodInvocation_lfno_primary\n CoreDictionary.get(key) "]
164940[label="typeName\n CoreDictionary "]
164941[label="expressionName\n key "]
124942[label="ifThenStatement\n if(nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000)){System.out.println(key);entry.getValue().removeLabel(\"D\");} "]
134943[label="conditionalOrExpression\n nameFollowers.contains(key)||(attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000) "]
144944[label="methodInvocation_lfno_primary\n nameFollowers.contains(key) "]
154945[label="typeName\n nameFollowers "]
154946[label="expressionName\n key "]
144947[label="primaryNoNewArray_lfno_primary\n (attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000) "]
154948[label="conditionalAndExpression\n attribute!=null&&attribute.hasNatureStartsWith(\"v\")&&attribute.totalFrequency>1000 "]
164949[label="conditionalAndExpression\n attribute!=null&&attribute.hasNatureStartsWith(\"v\") "]
174950[label="equalityExpression\n attribute!=null "]
184951[label="expressionName\n attribute "]
184952[label="literal\n null "]
174953[label="methodInvocation_lfno_primary\n attribute.hasNatureStartsWith(\"v\") "]
184954[label="typeName\n attribute "]
184955[label="literal\n \"v\" "]
164956[label="relationalExpression\n attribute.totalFrequency>1000 "]
174957[label="expressionName\n attribute.totalFrequency "]
184958[label="ambiguousName\n attribute "]
174959[label="literal\n 1000 "]
134960[label="block\n {System.out.println(key);entry.getValue().removeLabel(\"D\");} "]
144961[label="blockStatements\n System.out.println(key);entry.getValue().removeLabel(\"D\"); "]
154962[label="expressionStatement\n System.out.println(key); "]
164963[label="methodInvocation\n System.out.println(key) "]
174964[label="typeName\n System.out "]
184965[label="packageOrTypeName\n System "]
174966[label="expressionName\n key "]
154967[label="expressionStatement\n entry.getValue().removeLabel(\"D\"); "]
164968[label="methodInvocation\n entry.getValue().removeLabel(\"D\") "]
174969[label="methodInvocation_lfno_primary\n entry.getValue() "]
184970[label="typeName\n entry "]
174971[label="literal\n \"D\" "]
64972[label="expressionStatement\n dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath); "]
74973[label="methodInvocation\n dictionary.saveTxtTo(HanLP.Config.PersonDictionaryPath) "]
84974[label="typeName\n dictionary "]
84975[label="expressionName\n HanLP.Config.PersonDictionaryPath "]
94976[label="ambiguousName\n HanLP.Config "]
104977[label="ambiguousName\n HanLP "]
04978[label="compilationUnit\n packagecom.hankcs.hanlp.collection.AhoCorasick;importcom.hankcs.hanlp.corpus.io.ByteArray;importjava.io.DataOutputStream;importjava.io.IOException;importjava.io.ObjectInputStream;importjava.io.ObjectOutputStream;importjava.util.*;importjava.util.concurrent.LinkedBlockingDeque;publicclassAhoCorasickDoubleArrayTrie<V>{protectedintcheck[];protectedintbase[];intfail[];int[][]output;protectedV[]v;protectedint[]l;protectedintsize;publicAhoCorasickDoubleArrayTrie(){}publicAhoCorasickDoubleArrayTrie(TreeMap<String,V>dictionary){build(dictionary);}publicList<Hit<V>>parseText(Stringtext){intposition=1;intcurrentState=0;List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>();for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;}returncollectedEmits;}publicvoidparseText(Stringtext,IHit<V>processor){intposition=1;intcurrentState=0;for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}}publicvoidparseText(char[]text,IHit<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}}publicvoidparseText(char[]text,IHitFull<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;}}publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(size);for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}}out.writeInt(l.length);for(intlength:l){out.writeInt(length);}}publicvoidsave(ObjectOutputStreamout)throwsIOException{out.writeObject(base);out.writeObject(check);out.writeObject(fail);out.writeObject(output);out.writeObject(l);}publicvoidload(ObjectInputStreamin,V[]value)throwsIOException,ClassNotFoundException{base=(int[])in.readObject();check=(int[])in.readObject();fail=(int[])in.readObject();output=(int[][])in.readObject();l=(int[])in.readObject();v=value;}publicbooleanload(ByteArraybyteArray,V[]value){if(byteArray==null)returnfalse;size=byteArray.nextInt();base=newint[size+65535];check=newint[size+65535];fail=newint[size+65535];output=newint[size+65535][];intlength;for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}}length=byteArray.nextInt();l=newint[length];for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();}v=value;returntrue;}publicVget(Stringkey){intindex=exactMatchSearch(key);if(index>=0){returnv[index];}returnnull;}publicbooleanset(Stringkey,Vvalue){intindex=exactMatchSearch(key);if(index>=0){v[index]=value;returntrue;}returnfalse;}publicVget(intindex){returnv[index];}publicinterfaceIHit<V>{voidhit(intbegin,intend,Vvalue);}publicinterfaceIHitFull<V>{voidhit(intbegin,intend,Vvalue,intindex);}publicclassHit<V>{publicfinalintbegin;publicfinalintend;publicfinalVvalue;publicHit(intbegin,intend,Vvalue){this.begin=begin;this.end=end;this.value=value;}@OverridepublicStringtoString(){returnString.format(\"[%d:%d]=%s\",begin,end,value);}}privateintgetState(intcurrentState,charcharacter){intnewCurrentState=transitionWithRoot(currentState,character);while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);}returnnewCurrentState;}privatevoidstoreEmits(intposition,intcurrentState,List<Hit<V>>collectedEmits){int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}}}protectedinttransition(intcurrent,charc){intb=current;intp;p=b+c+1;if(b==check[p])b=base[p];elsereturn-1;p=b;returnp;}protectedinttransitionWithRoot(intnodePos,charc){intb=base[nodePos];intp;p=b+c+1;if(b!=check[p]){if(nodePos==0)return0;return-1;}returnp;}publicvoidbuild(TreeMap<String,V>map){newBuilder().build(map);}privateintfetch(Stateparent,List<Map.Entry<Integer,State>>siblings){if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));}for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));}returnsiblings.size();}publicintexactMatchSearch(Stringkey){returnexactMatchSearch(key,0,0,0);}privateintexactMatchSearch(Stringkey,intpos,intlen,intnodePos){if(len<=0)len=key.length();if(nodePos<=0)nodePos=0;intresult=-1;char[]keyChars=key.toCharArray();intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;}privateintexactMatchSearch(char[]keyChars,intpos,intlen,intnodePos){intresult=-1;intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;}privatestaticclassDebugArray{Map<String,String>nameValueMap=newLinkedHashMap<String,String>();publicvoidadd(Stringname,intvalue){StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);}@OverridepublicStringtoString(){Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;}publicvoidprintln(){System.out.print(this);}}publicintsize(){returnv==null?0:v.length;}privateclassBuilder{privateStaterootState=newState();privatebooleanused[];privateintallocSize;privateintprogress;privateintnextCheckPos;privateintkeySize;@SuppressWarnings(\"unchecked\")publicvoidbuild(TreeMap<String,V>map){v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();}privatevoidaddKeyword(Stringkeyword,intindex){StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();}privatevoidaddAllKeyword(Collection<String>keywordSet){inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}}privatevoidconstructFailureStates(){fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}}privatevoidconstructOutput(StatetargetState){Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;}privatevoidbuildDoubleArrayTrie(Set<String>keySet){progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);}privateintresize(intnewSize){int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;}privateintinsert(List<Map.Entry<Integer,State>>siblings){intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;}privatevoidloseWeight(){intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;}}}<EOF> "]
14979[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.AhoCorasick; "]
24980[label="packageName\n com.hankcs.hanlp.collection.AhoCorasick "]
34981[label="packageName\n com.hankcs.hanlp.collection "]
44982[label="packageName\n com.hankcs.hanlp "]
54983[label="packageName\n com.hankcs "]
64984[label="packageName\n com "]
14985[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.ByteArray; "]
24986[label="typeName\n com.hankcs.hanlp.corpus.io.ByteArray "]
34987[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
44988[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
54989[label="packageOrTypeName\n com.hankcs.hanlp "]
64990[label="packageOrTypeName\n com.hankcs "]
74991[label="packageOrTypeName\n com "]
14992[label="singleTypeImportDeclaration\n importjava.io.DataOutputStream; "]
24993[label="typeName\n java.io.DataOutputStream "]
34994[label="packageOrTypeName\n java.io "]
44995[label="packageOrTypeName\n java "]
14996[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
24997[label="typeName\n java.io.IOException "]
34998[label="packageOrTypeName\n java.io "]
44999[label="packageOrTypeName\n java "]
15000[label="singleTypeImportDeclaration\n importjava.io.ObjectInputStream; "]
25001[label="typeName\n java.io.ObjectInputStream "]
35002[label="packageOrTypeName\n java.io "]
45003[label="packageOrTypeName\n java "]
15004[label="singleTypeImportDeclaration\n importjava.io.ObjectOutputStream; "]
25005[label="typeName\n java.io.ObjectOutputStream "]
35006[label="packageOrTypeName\n java.io "]
45007[label="packageOrTypeName\n java "]
15008[label="typeImportOnDemandDeclaration\n importjava.util.*; "]
25009[label="packageOrTypeName\n java.util "]
35010[label="packageOrTypeName\n java "]
15011[label="singleTypeImportDeclaration\n importjava.util.concurrent.LinkedBlockingDeque; "]
25012[label="typeName\n java.util.concurrent.LinkedBlockingDeque "]
35013[label="packageOrTypeName\n java.util.concurrent "]
45014[label="packageOrTypeName\n java.util "]
55015[label="packageOrTypeName\n java "]
15016[label="normalClassDeclaration\n publicclassAhoCorasickDoubleArrayTrie<V>{protectedintcheck[];protectedintbase[];intfail[];int[][]output;protectedV[]v;protectedint[]l;protectedintsize;publicAhoCorasickDoubleArrayTrie(){}publicAhoCorasickDoubleArrayTrie(TreeMap<String,V>dictionary){build(dictionary);}publicList<Hit<V>>parseText(Stringtext){intposition=1;intcurrentState=0;List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>();for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;}returncollectedEmits;}publicvoidparseText(Stringtext,IHit<V>processor){intposition=1;intcurrentState=0;for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}}publicvoidparseText(char[]text,IHit<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}}publicvoidparseText(char[]text,IHitFull<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;}}publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(size);for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}}out.writeInt(l.length);for(intlength:l){out.writeInt(length);}}publicvoidsave(ObjectOutputStreamout)throwsIOException{out.writeObject(base);out.writeObject(check);out.writeObject(fail);out.writeObject(output);out.writeObject(l);}publicvoidload(ObjectInputStreamin,V[]value)throwsIOException,ClassNotFoundException{base=(int[])in.readObject();check=(int[])in.readObject();fail=(int[])in.readObject();output=(int[][])in.readObject();l=(int[])in.readObject();v=value;}publicbooleanload(ByteArraybyteArray,V[]value){if(byteArray==null)returnfalse;size=byteArray.nextInt();base=newint[size+65535];check=newint[size+65535];fail=newint[size+65535];output=newint[size+65535][];intlength;for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}}length=byteArray.nextInt();l=newint[length];for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();}v=value;returntrue;}publicVget(Stringkey){intindex=exactMatchSearch(key);if(index>=0){returnv[index];}returnnull;}publicbooleanset(Stringkey,Vvalue){intindex=exactMatchSearch(key);if(index>=0){v[index]=value;returntrue;}returnfalse;}publicVget(intindex){returnv[index];}publicinterfaceIHit<V>{voidhit(intbegin,intend,Vvalue);}publicinterfaceIHitFull<V>{voidhit(intbegin,intend,Vvalue,intindex);}publicclassHit<V>{publicfinalintbegin;publicfinalintend;publicfinalVvalue;publicHit(intbegin,intend,Vvalue){this.begin=begin;this.end=end;this.value=value;}@OverridepublicStringtoString(){returnString.format(\"[%d:%d]=%s\",begin,end,value);}}privateintgetState(intcurrentState,charcharacter){intnewCurrentState=transitionWithRoot(currentState,character);while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);}returnnewCurrentState;}privatevoidstoreEmits(intposition,intcurrentState,List<Hit<V>>collectedEmits){int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}}}protectedinttransition(intcurrent,charc){intb=current;intp;p=b+c+1;if(b==check[p])b=base[p];elsereturn-1;p=b;returnp;}protectedinttransitionWithRoot(intnodePos,charc){intb=base[nodePos];intp;p=b+c+1;if(b!=check[p]){if(nodePos==0)return0;return-1;}returnp;}publicvoidbuild(TreeMap<String,V>map){newBuilder().build(map);}privateintfetch(Stateparent,List<Map.Entry<Integer,State>>siblings){if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));}for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));}returnsiblings.size();}publicintexactMatchSearch(Stringkey){returnexactMatchSearch(key,0,0,0);}privateintexactMatchSearch(Stringkey,intpos,intlen,intnodePos){if(len<=0)len=key.length();if(nodePos<=0)nodePos=0;intresult=-1;char[]keyChars=key.toCharArray();intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;}privateintexactMatchSearch(char[]keyChars,intpos,intlen,intnodePos){intresult=-1;intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;}privatestaticclassDebugArray{Map<String,String>nameValueMap=newLinkedHashMap<String,String>();publicvoidadd(Stringname,intvalue){StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);}@OverridepublicStringtoString(){Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;}publicvoidprintln(){System.out.print(this);}}publicintsize(){returnv==null?0:v.length;}privateclassBuilder{privateStaterootState=newState();privatebooleanused[];privateintallocSize;privateintprogress;privateintnextCheckPos;privateintkeySize;@SuppressWarnings(\"unchecked\")publicvoidbuild(TreeMap<String,V>map){v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();}privatevoidaddKeyword(Stringkeyword,intindex){StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();}privatevoidaddAllKeyword(Collection<String>keywordSet){inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}}privatevoidconstructFailureStates(){fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}}privatevoidconstructOutput(StatetargetState){Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;}privatevoidbuildDoubleArrayTrie(Set<String>keySet){progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);}privateintresize(intnewSize){int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;}privateintinsert(List<Map.Entry<Integer,State>>siblings){intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;}privatevoidloseWeight(){intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;}}} "]
25017[label="classModifier\n public "]
25018[label="typeParameters\n <V> "]
35019[label="typeParameter\n V "]
25020[label="classBody\n {protectedintcheck[];protectedintbase[];intfail[];int[][]output;protectedV[]v;protectedint[]l;protectedintsize;publicAhoCorasickDoubleArrayTrie(){}publicAhoCorasickDoubleArrayTrie(TreeMap<String,V>dictionary){build(dictionary);}publicList<Hit<V>>parseText(Stringtext){intposition=1;intcurrentState=0;List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>();for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;}returncollectedEmits;}publicvoidparseText(Stringtext,IHit<V>processor){intposition=1;intcurrentState=0;for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}}publicvoidparseText(char[]text,IHit<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}}publicvoidparseText(char[]text,IHitFull<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;}}publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(size);for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}}out.writeInt(l.length);for(intlength:l){out.writeInt(length);}}publicvoidsave(ObjectOutputStreamout)throwsIOException{out.writeObject(base);out.writeObject(check);out.writeObject(fail);out.writeObject(output);out.writeObject(l);}publicvoidload(ObjectInputStreamin,V[]value)throwsIOException,ClassNotFoundException{base=(int[])in.readObject();check=(int[])in.readObject();fail=(int[])in.readObject();output=(int[][])in.readObject();l=(int[])in.readObject();v=value;}publicbooleanload(ByteArraybyteArray,V[]value){if(byteArray==null)returnfalse;size=byteArray.nextInt();base=newint[size+65535];check=newint[size+65535];fail=newint[size+65535];output=newint[size+65535][];intlength;for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}}length=byteArray.nextInt();l=newint[length];for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();}v=value;returntrue;}publicVget(Stringkey){intindex=exactMatchSearch(key);if(index>=0){returnv[index];}returnnull;}publicbooleanset(Stringkey,Vvalue){intindex=exactMatchSearch(key);if(index>=0){v[index]=value;returntrue;}returnfalse;}publicVget(intindex){returnv[index];}publicinterfaceIHit<V>{voidhit(intbegin,intend,Vvalue);}publicinterfaceIHitFull<V>{voidhit(intbegin,intend,Vvalue,intindex);}publicclassHit<V>{publicfinalintbegin;publicfinalintend;publicfinalVvalue;publicHit(intbegin,intend,Vvalue){this.begin=begin;this.end=end;this.value=value;}@OverridepublicStringtoString(){returnString.format(\"[%d:%d]=%s\",begin,end,value);}}privateintgetState(intcurrentState,charcharacter){intnewCurrentState=transitionWithRoot(currentState,character);while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);}returnnewCurrentState;}privatevoidstoreEmits(intposition,intcurrentState,List<Hit<V>>collectedEmits){int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}}}protectedinttransition(intcurrent,charc){intb=current;intp;p=b+c+1;if(b==check[p])b=base[p];elsereturn-1;p=b;returnp;}protectedinttransitionWithRoot(intnodePos,charc){intb=base[nodePos];intp;p=b+c+1;if(b!=check[p]){if(nodePos==0)return0;return-1;}returnp;}publicvoidbuild(TreeMap<String,V>map){newBuilder().build(map);}privateintfetch(Stateparent,List<Map.Entry<Integer,State>>siblings){if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));}for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));}returnsiblings.size();}publicintexactMatchSearch(Stringkey){returnexactMatchSearch(key,0,0,0);}privateintexactMatchSearch(Stringkey,intpos,intlen,intnodePos){if(len<=0)len=key.length();if(nodePos<=0)nodePos=0;intresult=-1;char[]keyChars=key.toCharArray();intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;}privateintexactMatchSearch(char[]keyChars,intpos,intlen,intnodePos){intresult=-1;intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;}privatestaticclassDebugArray{Map<String,String>nameValueMap=newLinkedHashMap<String,String>();publicvoidadd(Stringname,intvalue){StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);}@OverridepublicStringtoString(){Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;}publicvoidprintln(){System.out.print(this);}}publicintsize(){returnv==null?0:v.length;}privateclassBuilder{privateStaterootState=newState();privatebooleanused[];privateintallocSize;privateintprogress;privateintnextCheckPos;privateintkeySize;@SuppressWarnings(\"unchecked\")publicvoidbuild(TreeMap<String,V>map){v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();}privatevoidaddKeyword(Stringkeyword,intindex){StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();}privatevoidaddAllKeyword(Collection<String>keywordSet){inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}}privatevoidconstructFailureStates(){fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}}privatevoidconstructOutput(StatetargetState){Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;}privatevoidbuildDoubleArrayTrie(Set<String>keySet){progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);}privateintresize(intnewSize){int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;}privateintinsert(List<Map.Entry<Integer,State>>siblings){intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;}privatevoidloseWeight(){intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;}}} "]
35021[label="fieldDeclaration\n protectedintcheck[]; "]
45022[label="fieldModifier\n protected "]
45023[label="integralType\n int "]
45024[label="variableDeclaratorId\n check[] "]
55025[label="dims\n [] "]
35026[label="fieldDeclaration\n protectedintbase[]; "]
45027[label="fieldModifier\n protected "]
45028[label="integralType\n int "]
45029[label="variableDeclaratorId\n base[] "]
55030[label="dims\n [] "]
35031[label="fieldDeclaration\n intfail[]; "]
45032[label="integralType\n int "]
45033[label="variableDeclaratorId\n fail[] "]
55034[label="dims\n [] "]
35035[label="fieldDeclaration\n int[][]output; "]
45036[label="unannArrayType\n int[][] "]
55037[label="integralType\n int "]
55038[label="dims\n [][] "]
45039[label="variableDeclaratorId\n output "]
35040[label="fieldDeclaration\n protectedV[]v; "]
45041[label="fieldModifier\n protected "]
45042[label="unannArrayType\n V[] "]
55043[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
55044[label="dims\n [] "]
45045[label="variableDeclaratorId\n v "]
35046[label="fieldDeclaration\n protectedint[]l; "]
45047[label="fieldModifier\n protected "]
45048[label="unannArrayType\n int[] "]
55049[label="integralType\n int "]
55050[label="dims\n [] "]
45051[label="variableDeclaratorId\n l "]
35052[label="fieldDeclaration\n protectedintsize; "]
45053[label="fieldModifier\n protected "]
45054[label="integralType\n int "]
45055[label="variableDeclaratorId\n size "]
35056[label="constructorDeclaration\n publicAhoCorasickDoubleArrayTrie(){} "]
45057[label="constructorModifier\n public "]
45058[label="constructorDeclarator\n AhoCorasickDoubleArrayTrie() "]
55059[label="simpleTypeName\n AhoCorasickDoubleArrayTrie "]
45060[label="constructorBody\n {} "]
35061[label="constructorDeclaration\n publicAhoCorasickDoubleArrayTrie(TreeMap<String,V>dictionary){build(dictionary);} "]
45062[label="constructorModifier\n public "]
45063[label="constructorDeclarator\n AhoCorasickDoubleArrayTrie(TreeMap<String,V>dictionary) "]
55064[label="simpleTypeName\n AhoCorasickDoubleArrayTrie "]
55065[label="formalParameter\n TreeMap<String,V>dictionary "]
65066[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,V> "]
75067[label="typeArguments\n <String,V> "]
85068[label="typeArgumentList\n String,V "]
95069[label="classType_lfno_classOrInterfaceType\n String "]
95070[label="classType_lfno_classOrInterfaceType\n V "]
65071[label="variableDeclaratorId\n dictionary "]
45072[label="constructorBody\n {build(dictionary);} "]
55073[label="expressionStatement\n build(dictionary); "]
65074[label="methodInvocation\n build(dictionary) "]
75075[label="methodName\n build "]
75076[label="expressionName\n dictionary "]
35077[label="methodDeclaration\n publicList<Hit<V>>parseText(Stringtext){intposition=1;intcurrentState=0;List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>();for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;}returncollectedEmits;} "]
45078[label="methodModifier\n public "]
45079[label="methodHeader\n List<Hit<V>>parseText(Stringtext) "]
55080[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Hit<V>> "]
65081[label="typeArguments\n <Hit<V>> "]
75082[label="classType_lfno_classOrInterfaceType\n Hit<V> "]
85083[label="typeArguments\n <V> "]
95084[label="classType_lfno_classOrInterfaceType\n V "]
55085[label="methodDeclarator\n parseText(Stringtext) "]
65086[label="formalParameter\n Stringtext "]
75087[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
75088[label="variableDeclaratorId\n text "]
45089[label="block\n {intposition=1;intcurrentState=0;List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>();for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;}returncollectedEmits;} "]
55090[label="blockStatements\n intposition=1;intcurrentState=0;List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>();for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;}returncollectedEmits; "]
65091[label="localVariableDeclarationStatement\n intposition=1; "]
75092[label="localVariableDeclaration\n intposition=1 "]
85093[label="integralType\n int "]
85094[label="variableDeclarator\n position=1 "]
95095[label="variableDeclaratorId\n position "]
95096[label="literal\n 1 "]
65097[label="localVariableDeclarationStatement\n intcurrentState=0; "]
75098[label="localVariableDeclaration\n intcurrentState=0 "]
85099[label="integralType\n int "]
85100[label="variableDeclarator\n currentState=0 "]
95101[label="variableDeclaratorId\n currentState "]
95102[label="literal\n 0 "]
65103[label="localVariableDeclarationStatement\n List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>(); "]
75104[label="localVariableDeclaration\n List<Hit<V>>collectedEmits=newLinkedList<Hit<V>>() "]
85105[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Hit<V>> "]
95106[label="typeArguments\n <Hit<V>> "]
105107[label="classType_lfno_classOrInterfaceType\n Hit<V> "]
115108[label="typeArguments\n <V> "]
125109[label="classType_lfno_classOrInterfaceType\n V "]
85110[label="variableDeclarator\n collectedEmits=newLinkedList<Hit<V>>() "]
95111[label="variableDeclaratorId\n collectedEmits "]
95112[label="classInstanceCreationExpression_lfno_primary\n newLinkedList<Hit<V>>() "]
105113[label="typeArguments\n <Hit<V>> "]
115114[label="classType_lfno_classOrInterfaceType\n Hit<V> "]
125115[label="typeArguments\n <V> "]
135116[label="classType_lfno_classOrInterfaceType\n V "]
65117[label="basicForStatement\n for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;} "]
75118[label="localVariableDeclaration\n inti=0 "]
85119[label="integralType\n int "]
85120[label="variableDeclarator\n i=0 "]
95121[label="variableDeclaratorId\n i "]
95122[label="literal\n 0 "]
75123[label="relationalExpression\n i<text.length() "]
85124[label="expressionName\n i "]
85125[label="methodInvocation_lfno_primary\n text.length() "]
95126[label="typeName\n text "]
75127[label="preIncrementExpression\n ++i "]
85128[label="expressionName\n i "]
75129[label="block\n {currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position;} "]
85130[label="blockStatements\n currentState=getState(currentState,text.charAt(i));storeEmits(position,currentState,collectedEmits);++position; "]
95131[label="expressionStatement\n currentState=getState(currentState,text.charAt(i)); "]
105132[label="assignment\n currentState=getState(currentState,text.charAt(i)) "]
115133[label="expressionName\n currentState "]
115134[label="assignmentOperator\n = "]
115135[label="methodInvocation_lfno_primary\n getState(currentState,text.charAt(i)) "]
125136[label="methodName\n getState "]
125137[label="argumentList\n currentState,text.charAt(i) "]
135138[label="expressionName\n currentState "]
135139[label="methodInvocation_lfno_primary\n text.charAt(i) "]
145140[label="typeName\n text "]
145141[label="expressionName\n i "]
95142[label="expressionStatement\n storeEmits(position,currentState,collectedEmits); "]
105143[label="methodInvocation\n storeEmits(position,currentState,collectedEmits) "]
115144[label="methodName\n storeEmits "]
115145[label="argumentList\n position,currentState,collectedEmits "]
125146[label="expressionName\n position "]
125147[label="expressionName\n currentState "]
125148[label="expressionName\n collectedEmits "]
95149[label="expressionStatement\n ++position; "]
105150[label="preIncrementExpression\n ++position "]
115151[label="expressionName\n position "]
65152[label="returnStatement\n returncollectedEmits; "]
75153[label="expressionName\n collectedEmits "]
35154[label="methodDeclaration\n publicvoidparseText(Stringtext,IHit<V>processor){intposition=1;intcurrentState=0;for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}} "]
45155[label="methodModifier\n public "]
45156[label="methodHeader\n voidparseText(Stringtext,IHit<V>processor) "]
55157[label="result\n void "]
55158[label="methodDeclarator\n parseText(Stringtext,IHit<V>processor) "]
65159[label="formalParameterList\n Stringtext,IHit<V>processor "]
75160[label="formalParameter\n Stringtext "]
85161[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
85162[label="variableDeclaratorId\n text "]
75163[label="formalParameter\n IHit<V>processor "]
85164[label="unannClassType_lfno_unannClassOrInterfaceType\n IHit<V> "]
95165[label="typeArguments\n <V> "]
105166[label="classType_lfno_classOrInterfaceType\n V "]
85167[label="variableDeclaratorId\n processor "]
45168[label="block\n {intposition=1;intcurrentState=0;for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}} "]
55169[label="blockStatements\n intposition=1;intcurrentState=0;for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;} "]
65170[label="localVariableDeclarationStatement\n intposition=1; "]
75171[label="localVariableDeclaration\n intposition=1 "]
85172[label="integralType\n int "]
85173[label="variableDeclarator\n position=1 "]
95174[label="variableDeclaratorId\n position "]
95175[label="literal\n 1 "]
65176[label="localVariableDeclarationStatement\n intcurrentState=0; "]
75177[label="localVariableDeclaration\n intcurrentState=0 "]
85178[label="integralType\n int "]
85179[label="variableDeclarator\n currentState=0 "]
95180[label="variableDeclaratorId\n currentState "]
95181[label="literal\n 0 "]
65182[label="basicForStatement\n for(inti=0;i<text.length();++i){currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;} "]
75183[label="localVariableDeclaration\n inti=0 "]
85184[label="integralType\n int "]
85185[label="variableDeclarator\n i=0 "]
95186[label="variableDeclaratorId\n i "]
95187[label="literal\n 0 "]
75188[label="relationalExpression\n i<text.length() "]
85189[label="expressionName\n i "]
85190[label="methodInvocation_lfno_primary\n text.length() "]
95191[label="typeName\n text "]
75192[label="preIncrementExpression\n ++i "]
85193[label="expressionName\n i "]
75194[label="block\n {currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;} "]
85195[label="blockStatements\n currentState=getState(currentState,text.charAt(i));int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position; "]
95196[label="expressionStatement\n currentState=getState(currentState,text.charAt(i)); "]
105197[label="assignment\n currentState=getState(currentState,text.charAt(i)) "]
115198[label="expressionName\n currentState "]
115199[label="assignmentOperator\n = "]
115200[label="methodInvocation_lfno_primary\n getState(currentState,text.charAt(i)) "]
125201[label="methodName\n getState "]
125202[label="argumentList\n currentState,text.charAt(i) "]
135203[label="expressionName\n currentState "]
135204[label="methodInvocation_lfno_primary\n text.charAt(i) "]
145205[label="typeName\n text "]
145206[label="expressionName\n i "]
95207[label="localVariableDeclarationStatement\n int[]hitArray=output[currentState]; "]
105208[label="localVariableDeclaration\n int[]hitArray=output[currentState] "]
115209[label="unannArrayType\n int[] "]
125210[label="integralType\n int "]
125211[label="dims\n [] "]
115212[label="variableDeclarator\n hitArray=output[currentState] "]
125213[label="variableDeclaratorId\n hitArray "]
125214[label="arrayAccess_lfno_primary\n output[currentState] "]
135215[label="expressionName\n output "]
135216[label="expressionName\n currentState "]
95217[label="ifThenStatement\n if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}} "]
105218[label="equalityExpression\n hitArray!=null "]
115219[label="expressionName\n hitArray "]
115220[label="literal\n null "]
105221[label="block\n {for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}} "]
115222[label="enhancedForStatement\n for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);} "]
125223[label="integralType\n int "]
125224[label="variableDeclaratorId\n hit "]
125225[label="expressionName\n hitArray "]
125226[label="block\n {processor.hit(position-l[hit],position,v[hit]);} "]
135227[label="expressionStatement\n processor.hit(position-l[hit],position,v[hit]); "]
145228[label="methodInvocation\n processor.hit(position-l[hit],position,v[hit]) "]
155229[label="typeName\n processor "]
155230[label="argumentList\n position-l[hit],position,v[hit] "]
165231[label="additiveExpression\n position-l[hit] "]
175232[label="expressionName\n position "]
175233[label="arrayAccess_lfno_primary\n l[hit] "]
185234[label="expressionName\n l "]
185235[label="expressionName\n hit "]
165236[label="expressionName\n position "]
165237[label="arrayAccess_lfno_primary\n v[hit] "]
175238[label="expressionName\n v "]
175239[label="expressionName\n hit "]
95240[label="expressionStatement\n ++position; "]
105241[label="preIncrementExpression\n ++position "]
115242[label="expressionName\n position "]
35243[label="methodDeclaration\n publicvoidparseText(char[]text,IHit<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}} "]
45244[label="methodModifier\n public "]
45245[label="methodHeader\n voidparseText(char[]text,IHit<V>processor) "]
55246[label="result\n void "]
55247[label="methodDeclarator\n parseText(char[]text,IHit<V>processor) "]
65248[label="formalParameterList\n char[]text,IHit<V>processor "]
75249[label="formalParameter\n char[]text "]
85250[label="unannArrayType\n char[] "]
95251[label="integralType\n char "]
95252[label="dims\n [] "]
85253[label="variableDeclaratorId\n text "]
75254[label="formalParameter\n IHit<V>processor "]
85255[label="unannClassType_lfno_unannClassOrInterfaceType\n IHit<V> "]
95256[label="typeArguments\n <V> "]
105257[label="classType_lfno_classOrInterfaceType\n V "]
85258[label="variableDeclaratorId\n processor "]
45259[label="block\n {intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;}} "]
55260[label="blockStatements\n intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;} "]
65261[label="localVariableDeclarationStatement\n intposition=1; "]
75262[label="localVariableDeclaration\n intposition=1 "]
85263[label="integralType\n int "]
85264[label="variableDeclarator\n position=1 "]
95265[label="variableDeclaratorId\n position "]
95266[label="literal\n 1 "]
65267[label="localVariableDeclarationStatement\n intcurrentState=0; "]
75268[label="localVariableDeclaration\n intcurrentState=0 "]
85269[label="integralType\n int "]
85270[label="variableDeclarator\n currentState=0 "]
95271[label="variableDeclaratorId\n currentState "]
95272[label="literal\n 0 "]
65273[label="enhancedForStatement\n for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;} "]
75274[label="integralType\n char "]
75275[label="variableDeclaratorId\n c "]
75276[label="expressionName\n text "]
75277[label="block\n {currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position;} "]
85278[label="blockStatements\n currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}}++position; "]
95279[label="expressionStatement\n currentState=getState(currentState,c); "]
105280[label="assignment\n currentState=getState(currentState,c) "]
115281[label="expressionName\n currentState "]
115282[label="assignmentOperator\n = "]
115283[label="methodInvocation_lfno_primary\n getState(currentState,c) "]
125284[label="methodName\n getState "]
125285[label="argumentList\n currentState,c "]
135286[label="expressionName\n currentState "]
135287[label="expressionName\n c "]
95288[label="localVariableDeclarationStatement\n int[]hitArray=output[currentState]; "]
105289[label="localVariableDeclaration\n int[]hitArray=output[currentState] "]
115290[label="unannArrayType\n int[] "]
125291[label="integralType\n int "]
125292[label="dims\n [] "]
115293[label="variableDeclarator\n hitArray=output[currentState] "]
125294[label="variableDeclaratorId\n hitArray "]
125295[label="arrayAccess_lfno_primary\n output[currentState] "]
135296[label="expressionName\n output "]
135297[label="expressionName\n currentState "]
95298[label="ifThenStatement\n if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}} "]
105299[label="equalityExpression\n hitArray!=null "]
115300[label="expressionName\n hitArray "]
115301[label="literal\n null "]
105302[label="block\n {for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);}} "]
115303[label="enhancedForStatement\n for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit]);} "]
125304[label="integralType\n int "]
125305[label="variableDeclaratorId\n hit "]
125306[label="expressionName\n hitArray "]
125307[label="block\n {processor.hit(position-l[hit],position,v[hit]);} "]
135308[label="expressionStatement\n processor.hit(position-l[hit],position,v[hit]); "]
145309[label="methodInvocation\n processor.hit(position-l[hit],position,v[hit]) "]
155310[label="typeName\n processor "]
155311[label="argumentList\n position-l[hit],position,v[hit] "]
165312[label="additiveExpression\n position-l[hit] "]
175313[label="expressionName\n position "]
175314[label="arrayAccess_lfno_primary\n l[hit] "]
185315[label="expressionName\n l "]
185316[label="expressionName\n hit "]
165317[label="expressionName\n position "]
165318[label="arrayAccess_lfno_primary\n v[hit] "]
175319[label="expressionName\n v "]
175320[label="expressionName\n hit "]
95321[label="expressionStatement\n ++position; "]
105322[label="preIncrementExpression\n ++position "]
115323[label="expressionName\n position "]
35324[label="methodDeclaration\n publicvoidparseText(char[]text,IHitFull<V>processor){intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;}} "]
45325[label="methodModifier\n public "]
45326[label="methodHeader\n voidparseText(char[]text,IHitFull<V>processor) "]
55327[label="result\n void "]
55328[label="methodDeclarator\n parseText(char[]text,IHitFull<V>processor) "]
65329[label="formalParameterList\n char[]text,IHitFull<V>processor "]
75330[label="formalParameter\n char[]text "]
85331[label="unannArrayType\n char[] "]
95332[label="integralType\n char "]
95333[label="dims\n [] "]
85334[label="variableDeclaratorId\n text "]
75335[label="formalParameter\n IHitFull<V>processor "]
85336[label="unannClassType_lfno_unannClassOrInterfaceType\n IHitFull<V> "]
95337[label="typeArguments\n <V> "]
105338[label="classType_lfno_classOrInterfaceType\n V "]
85339[label="variableDeclaratorId\n processor "]
45340[label="block\n {intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;}} "]
55341[label="blockStatements\n intposition=1;intcurrentState=0;for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;} "]
65342[label="localVariableDeclarationStatement\n intposition=1; "]
75343[label="localVariableDeclaration\n intposition=1 "]
85344[label="integralType\n int "]
85345[label="variableDeclarator\n position=1 "]
95346[label="variableDeclaratorId\n position "]
95347[label="literal\n 1 "]
65348[label="localVariableDeclarationStatement\n intcurrentState=0; "]
75349[label="localVariableDeclaration\n intcurrentState=0 "]
85350[label="integralType\n int "]
85351[label="variableDeclarator\n currentState=0 "]
95352[label="variableDeclaratorId\n currentState "]
95353[label="literal\n 0 "]
65354[label="enhancedForStatement\n for(charc:text){currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;} "]
75355[label="integralType\n char "]
75356[label="variableDeclaratorId\n c "]
75357[label="expressionName\n text "]
75358[label="block\n {currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position;} "]
85359[label="blockStatements\n currentState=getState(currentState,c);int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}}++position; "]
95360[label="expressionStatement\n currentState=getState(currentState,c); "]
105361[label="assignment\n currentState=getState(currentState,c) "]
115362[label="expressionName\n currentState "]
115363[label="assignmentOperator\n = "]
115364[label="methodInvocation_lfno_primary\n getState(currentState,c) "]
125365[label="methodName\n getState "]
125366[label="argumentList\n currentState,c "]
135367[label="expressionName\n currentState "]
135368[label="expressionName\n c "]
95369[label="localVariableDeclarationStatement\n int[]hitArray=output[currentState]; "]
105370[label="localVariableDeclaration\n int[]hitArray=output[currentState] "]
115371[label="unannArrayType\n int[] "]
125372[label="integralType\n int "]
125373[label="dims\n [] "]
115374[label="variableDeclarator\n hitArray=output[currentState] "]
125375[label="variableDeclaratorId\n hitArray "]
125376[label="arrayAccess_lfno_primary\n output[currentState] "]
135377[label="expressionName\n output "]
135378[label="expressionName\n currentState "]
95379[label="ifThenStatement\n if(hitArray!=null){for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}} "]
105380[label="equalityExpression\n hitArray!=null "]
115381[label="expressionName\n hitArray "]
115382[label="literal\n null "]
105383[label="block\n {for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);}} "]
115384[label="enhancedForStatement\n for(inthit:hitArray){processor.hit(position-l[hit],position,v[hit],hit);} "]
125385[label="integralType\n int "]
125386[label="variableDeclaratorId\n hit "]
125387[label="expressionName\n hitArray "]
125388[label="block\n {processor.hit(position-l[hit],position,v[hit],hit);} "]
135389[label="expressionStatement\n processor.hit(position-l[hit],position,v[hit],hit); "]
145390[label="methodInvocation\n processor.hit(position-l[hit],position,v[hit],hit) "]
155391[label="typeName\n processor "]
155392[label="argumentList\n position-l[hit],position,v[hit],hit "]
165393[label="additiveExpression\n position-l[hit] "]
175394[label="expressionName\n position "]
175395[label="arrayAccess_lfno_primary\n l[hit] "]
185396[label="expressionName\n l "]
185397[label="expressionName\n hit "]
165398[label="expressionName\n position "]
165399[label="arrayAccess_lfno_primary\n v[hit] "]
175400[label="expressionName\n v "]
175401[label="expressionName\n hit "]
165402[label="expressionName\n hit "]
95403[label="expressionStatement\n ++position; "]
105404[label="preIncrementExpression\n ++position "]
115405[label="expressionName\n position "]
35406[label="methodDeclaration\n publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(size);for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}}out.writeInt(l.length);for(intlength:l){out.writeInt(length);}} "]
45407[label="methodModifier\n public "]
45408[label="methodHeader\n voidsave(DataOutputStreamout)throwsException "]
55409[label="result\n void "]
55410[label="methodDeclarator\n save(DataOutputStreamout) "]
65411[label="formalParameter\n DataOutputStreamout "]
75412[label="unannClassType_lfno_unannClassOrInterfaceType\n DataOutputStream "]
75413[label="variableDeclaratorId\n out "]
55414[label="throws_\n throwsException "]
65415[label="classType\n Exception "]
45416[label="block\n {out.writeInt(size);for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}}out.writeInt(l.length);for(intlength:l){out.writeInt(length);}} "]
55417[label="blockStatements\n out.writeInt(size);for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}}out.writeInt(l.length);for(intlength:l){out.writeInt(length);} "]
65418[label="expressionStatement\n out.writeInt(size); "]
75419[label="methodInvocation\n out.writeInt(size) "]
85420[label="typeName\n out "]
85421[label="expressionName\n size "]
65422[label="basicForStatement\n for(inti=0;i<size;i++){out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}} "]
75423[label="localVariableDeclaration\n inti=0 "]
85424[label="integralType\n int "]
85425[label="variableDeclarator\n i=0 "]
95426[label="variableDeclaratorId\n i "]
95427[label="literal\n 0 "]
75428[label="relationalExpression\n i<size "]
85429[label="expressionName\n i "]
85430[label="expressionName\n size "]
75431[label="postIncrementExpression\n i++ "]
85432[label="expressionName\n i "]
75433[label="block\n {out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}}} "]
85434[label="blockStatements\n out.writeInt(base[i]);out.writeInt(check[i]);out.writeInt(fail[i]);intoutput[]=this.output[i];if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}} "]
95435[label="expressionStatement\n out.writeInt(base[i]); "]
105436[label="methodInvocation\n out.writeInt(base[i]) "]
115437[label="typeName\n out "]
115438[label="arrayAccess_lfno_primary\n base[i] "]
125439[label="expressionName\n base "]
125440[label="expressionName\n i "]
95441[label="expressionStatement\n out.writeInt(check[i]); "]
105442[label="methodInvocation\n out.writeInt(check[i]) "]
115443[label="typeName\n out "]
115444[label="arrayAccess_lfno_primary\n check[i] "]
125445[label="expressionName\n check "]
125446[label="expressionName\n i "]
95447[label="expressionStatement\n out.writeInt(fail[i]); "]
105448[label="methodInvocation\n out.writeInt(fail[i]) "]
115449[label="typeName\n out "]
115450[label="arrayAccess_lfno_primary\n fail[i] "]
125451[label="expressionName\n fail "]
125452[label="expressionName\n i "]
95453[label="localVariableDeclarationStatement\n intoutput[]=this.output[i]; "]
105454[label="localVariableDeclaration\n intoutput[]=this.output[i] "]
115455[label="integralType\n int "]
115456[label="variableDeclarator\n output[]=this.output[i] "]
125457[label="variableDeclaratorId\n output[] "]
135458[label="dims\n [] "]
125459[label="primary\n this.output[i] "]
135460[label="primaryNoNewArray_lfno_primary\n this "]
135461[label="arrayAccess_lf_primary\n .output[i] "]
145462[label="fieldAccess_lf_primary\n .output "]
145463[label="expressionName\n i "]
95464[label="ifThenElseStatement\n if(output==null){out.writeInt(0);}else{out.writeInt(output.length);for(into:output){out.writeInt(o);}} "]
105465[label="equalityExpression\n output==null "]
115466[label="expressionName\n output "]
115467[label="literal\n null "]
105468[label="block\n {out.writeInt(0);} "]
115469[label="expressionStatement\n out.writeInt(0); "]
125470[label="methodInvocation\n out.writeInt(0) "]
135471[label="typeName\n out "]
135472[label="literal\n 0 "]
105473[label="block\n {out.writeInt(output.length);for(into:output){out.writeInt(o);}} "]
115474[label="blockStatements\n out.writeInt(output.length);for(into:output){out.writeInt(o);} "]
125475[label="expressionStatement\n out.writeInt(output.length); "]
135476[label="methodInvocation\n out.writeInt(output.length) "]
145477[label="typeName\n out "]
145478[label="expressionName\n output.length "]
155479[label="ambiguousName\n output "]
125480[label="enhancedForStatement\n for(into:output){out.writeInt(o);} "]
135481[label="integralType\n int "]
135482[label="variableDeclaratorId\n o "]
135483[label="expressionName\n output "]
135484[label="block\n {out.writeInt(o);} "]
145485[label="expressionStatement\n out.writeInt(o); "]
155486[label="methodInvocation\n out.writeInt(o) "]
165487[label="typeName\n out "]
165488[label="expressionName\n o "]
65489[label="expressionStatement\n out.writeInt(l.length); "]
75490[label="methodInvocation\n out.writeInt(l.length) "]
85491[label="typeName\n out "]
85492[label="expressionName\n l.length "]
95493[label="ambiguousName\n l "]
65494[label="enhancedForStatement\n for(intlength:l){out.writeInt(length);} "]
75495[label="integralType\n int "]
75496[label="variableDeclaratorId\n length "]
75497[label="expressionName\n l "]
75498[label="block\n {out.writeInt(length);} "]
85499[label="expressionStatement\n out.writeInt(length); "]
95500[label="methodInvocation\n out.writeInt(length) "]
105501[label="typeName\n out "]
105502[label="expressionName\n length "]
35503[label="methodDeclaration\n publicvoidsave(ObjectOutputStreamout)throwsIOException{out.writeObject(base);out.writeObject(check);out.writeObject(fail);out.writeObject(output);out.writeObject(l);} "]
45504[label="methodModifier\n public "]
45505[label="methodHeader\n voidsave(ObjectOutputStreamout)throwsIOException "]
55506[label="result\n void "]
55507[label="methodDeclarator\n save(ObjectOutputStreamout) "]
65508[label="formalParameter\n ObjectOutputStreamout "]
75509[label="unannClassType_lfno_unannClassOrInterfaceType\n ObjectOutputStream "]
75510[label="variableDeclaratorId\n out "]
55511[label="throws_\n throwsIOException "]
65512[label="classType\n IOException "]
45513[label="block\n {out.writeObject(base);out.writeObject(check);out.writeObject(fail);out.writeObject(output);out.writeObject(l);} "]
55514[label="blockStatements\n out.writeObject(base);out.writeObject(check);out.writeObject(fail);out.writeObject(output);out.writeObject(l); "]
65515[label="expressionStatement\n out.writeObject(base); "]
75516[label="methodInvocation\n out.writeObject(base) "]
85517[label="typeName\n out "]
85518[label="expressionName\n base "]
65519[label="expressionStatement\n out.writeObject(check); "]
75520[label="methodInvocation\n out.writeObject(check) "]
85521[label="typeName\n out "]
85522[label="expressionName\n check "]
65523[label="expressionStatement\n out.writeObject(fail); "]
75524[label="methodInvocation\n out.writeObject(fail) "]
85525[label="typeName\n out "]
85526[label="expressionName\n fail "]
65527[label="expressionStatement\n out.writeObject(output); "]
75528[label="methodInvocation\n out.writeObject(output) "]
85529[label="typeName\n out "]
85530[label="expressionName\n output "]
65531[label="expressionStatement\n out.writeObject(l); "]
75532[label="methodInvocation\n out.writeObject(l) "]
85533[label="typeName\n out "]
85534[label="expressionName\n l "]
35535[label="methodDeclaration\n publicvoidload(ObjectInputStreamin,V[]value)throwsIOException,ClassNotFoundException{base=(int[])in.readObject();check=(int[])in.readObject();fail=(int[])in.readObject();output=(int[][])in.readObject();l=(int[])in.readObject();v=value;} "]
45536[label="methodModifier\n public "]
45537[label="methodHeader\n voidload(ObjectInputStreamin,V[]value)throwsIOException,ClassNotFoundException "]
55538[label="result\n void "]
55539[label="methodDeclarator\n load(ObjectInputStreamin,V[]value) "]
65540[label="formalParameterList\n ObjectInputStreamin,V[]value "]
75541[label="formalParameter\n ObjectInputStreamin "]
85542[label="unannClassType_lfno_unannClassOrInterfaceType\n ObjectInputStream "]
85543[label="variableDeclaratorId\n in "]
75544[label="formalParameter\n V[]value "]
85545[label="unannArrayType\n V[] "]
95546[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
95547[label="dims\n [] "]
85548[label="variableDeclaratorId\n value "]
55549[label="throws_\n throwsIOException,ClassNotFoundException "]
65550[label="exceptionTypeList\n IOException,ClassNotFoundException "]
75551[label="classType\n IOException "]
75552[label="classType\n ClassNotFoundException "]
45553[label="block\n {base=(int[])in.readObject();check=(int[])in.readObject();fail=(int[])in.readObject();output=(int[][])in.readObject();l=(int[])in.readObject();v=value;} "]
55554[label="blockStatements\n base=(int[])in.readObject();check=(int[])in.readObject();fail=(int[])in.readObject();output=(int[][])in.readObject();l=(int[])in.readObject();v=value; "]
65555[label="expressionStatement\n base=(int[])in.readObject(); "]
75556[label="assignment\n base=(int[])in.readObject() "]
85557[label="expressionName\n base "]
85558[label="assignmentOperator\n = "]
85559[label="castExpression\n (int[])in.readObject() "]
95560[label="arrayType\n int[] "]
105561[label="integralType\n int "]
105562[label="dims\n [] "]
95563[label="methodInvocation_lfno_primary\n in.readObject() "]
105564[label="typeName\n in "]
65565[label="expressionStatement\n check=(int[])in.readObject(); "]
75566[label="assignment\n check=(int[])in.readObject() "]
85567[label="expressionName\n check "]
85568[label="assignmentOperator\n = "]
85569[label="castExpression\n (int[])in.readObject() "]
95570[label="arrayType\n int[] "]
105571[label="integralType\n int "]
105572[label="dims\n [] "]
95573[label="methodInvocation_lfno_primary\n in.readObject() "]
105574[label="typeName\n in "]
65575[label="expressionStatement\n fail=(int[])in.readObject(); "]
75576[label="assignment\n fail=(int[])in.readObject() "]
85577[label="expressionName\n fail "]
85578[label="assignmentOperator\n = "]
85579[label="castExpression\n (int[])in.readObject() "]
95580[label="arrayType\n int[] "]
105581[label="integralType\n int "]
105582[label="dims\n [] "]
95583[label="methodInvocation_lfno_primary\n in.readObject() "]
105584[label="typeName\n in "]
65585[label="expressionStatement\n output=(int[][])in.readObject(); "]
75586[label="assignment\n output=(int[][])in.readObject() "]
85587[label="expressionName\n output "]
85588[label="assignmentOperator\n = "]
85589[label="castExpression\n (int[][])in.readObject() "]
95590[label="arrayType\n int[][] "]
105591[label="integralType\n int "]
105592[label="dims\n [][] "]
95593[label="methodInvocation_lfno_primary\n in.readObject() "]
105594[label="typeName\n in "]
65595[label="expressionStatement\n l=(int[])in.readObject(); "]
75596[label="assignment\n l=(int[])in.readObject() "]
85597[label="expressionName\n l "]
85598[label="assignmentOperator\n = "]
85599[label="castExpression\n (int[])in.readObject() "]
95600[label="arrayType\n int[] "]
105601[label="integralType\n int "]
105602[label="dims\n [] "]
95603[label="methodInvocation_lfno_primary\n in.readObject() "]
105604[label="typeName\n in "]
65605[label="expressionStatement\n v=value; "]
75606[label="assignment\n v=value "]
85607[label="expressionName\n v "]
85608[label="assignmentOperator\n = "]
85609[label="expressionName\n value "]
35610[label="methodDeclaration\n publicbooleanload(ByteArraybyteArray,V[]value){if(byteArray==null)returnfalse;size=byteArray.nextInt();base=newint[size+65535];check=newint[size+65535];fail=newint[size+65535];output=newint[size+65535][];intlength;for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}}length=byteArray.nextInt();l=newint[length];for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();}v=value;returntrue;} "]
45611[label="methodModifier\n public "]
45612[label="methodHeader\n booleanload(ByteArraybyteArray,V[]value) "]
55613[label="unannPrimitiveType\n boolean "]
55614[label="methodDeclarator\n load(ByteArraybyteArray,V[]value) "]
65615[label="formalParameterList\n ByteArraybyteArray,V[]value "]
75616[label="formalParameter\n ByteArraybyteArray "]
85617[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
85618[label="variableDeclaratorId\n byteArray "]
75619[label="formalParameter\n V[]value "]
85620[label="unannArrayType\n V[] "]
95621[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
95622[label="dims\n [] "]
85623[label="variableDeclaratorId\n value "]
45624[label="block\n {if(byteArray==null)returnfalse;size=byteArray.nextInt();base=newint[size+65535];check=newint[size+65535];fail=newint[size+65535];output=newint[size+65535][];intlength;for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}}length=byteArray.nextInt();l=newint[length];for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();}v=value;returntrue;} "]
55625[label="blockStatements\n if(byteArray==null)returnfalse;size=byteArray.nextInt();base=newint[size+65535];check=newint[size+65535];fail=newint[size+65535];output=newint[size+65535][];intlength;for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}}length=byteArray.nextInt();l=newint[length];for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();}v=value;returntrue; "]
65626[label="ifThenStatement\n if(byteArray==null)returnfalse; "]
75627[label="equalityExpression\n byteArray==null "]
85628[label="expressionName\n byteArray "]
85629[label="literal\n null "]
75630[label="returnStatement\n returnfalse; "]
85631[label="literal\n false "]
65632[label="expressionStatement\n size=byteArray.nextInt(); "]
75633[label="assignment\n size=byteArray.nextInt() "]
85634[label="expressionName\n size "]
85635[label="assignmentOperator\n = "]
85636[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
95637[label="typeName\n byteArray "]
65638[label="expressionStatement\n base=newint[size+65535]; "]
75639[label="assignment\n base=newint[size+65535] "]
85640[label="expressionName\n base "]
85641[label="assignmentOperator\n = "]
85642[label="arrayCreationExpression\n newint[size+65535] "]
95643[label="integralType\n int "]
95644[label="dimExpr\n [size+65535] "]
105645[label="additiveExpression\n size+65535 "]
115646[label="expressionName\n size "]
115647[label="literal\n 65535 "]
65648[label="expressionStatement\n check=newint[size+65535]; "]
75649[label="assignment\n check=newint[size+65535] "]
85650[label="expressionName\n check "]
85651[label="assignmentOperator\n = "]
85652[label="arrayCreationExpression\n newint[size+65535] "]
95653[label="integralType\n int "]
95654[label="dimExpr\n [size+65535] "]
105655[label="additiveExpression\n size+65535 "]
115656[label="expressionName\n size "]
115657[label="literal\n 65535 "]
65658[label="expressionStatement\n fail=newint[size+65535]; "]
75659[label="assignment\n fail=newint[size+65535] "]
85660[label="expressionName\n fail "]
85661[label="assignmentOperator\n = "]
85662[label="arrayCreationExpression\n newint[size+65535] "]
95663[label="integralType\n int "]
95664[label="dimExpr\n [size+65535] "]
105665[label="additiveExpression\n size+65535 "]
115666[label="expressionName\n size "]
115667[label="literal\n 65535 "]
65668[label="expressionStatement\n output=newint[size+65535][]; "]
75669[label="assignment\n output=newint[size+65535][] "]
85670[label="expressionName\n output "]
85671[label="assignmentOperator\n = "]
85672[label="arrayCreationExpression\n newint[size+65535][] "]
95673[label="integralType\n int "]
95674[label="dimExpr\n [size+65535] "]
105675[label="additiveExpression\n size+65535 "]
115676[label="expressionName\n size "]
115677[label="literal\n 65535 "]
95678[label="dims\n [] "]
65679[label="localVariableDeclarationStatement\n intlength; "]
75680[label="localVariableDeclaration\n intlength "]
85681[label="integralType\n int "]
85682[label="variableDeclaratorId\n length "]
65683[label="basicForStatement\n for(inti=0;i<size;++i){base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}} "]
75684[label="localVariableDeclaration\n inti=0 "]
85685[label="integralType\n int "]
85686[label="variableDeclarator\n i=0 "]
95687[label="variableDeclaratorId\n i "]
95688[label="literal\n 0 "]
75689[label="relationalExpression\n i<size "]
85690[label="expressionName\n i "]
85691[label="expressionName\n size "]
75692[label="preIncrementExpression\n ++i "]
85693[label="expressionName\n i "]
75694[label="block\n {base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();}} "]
85695[label="blockStatements\n base[i]=byteArray.nextInt();check[i]=byteArray.nextInt();fail[i]=byteArray.nextInt();length=byteArray.nextInt();if(length==0)continue;output[i]=newint[length];for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();} "]
95696[label="expressionStatement\n base[i]=byteArray.nextInt(); "]
105697[label="assignment\n base[i]=byteArray.nextInt() "]
115698[label="arrayAccess\n base[i] "]
125699[label="expressionName\n base "]
125700[label="expressionName\n i "]
115701[label="assignmentOperator\n = "]
115702[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
125703[label="typeName\n byteArray "]
95704[label="expressionStatement\n check[i]=byteArray.nextInt(); "]
105705[label="assignment\n check[i]=byteArray.nextInt() "]
115706[label="arrayAccess\n check[i] "]
125707[label="expressionName\n check "]
125708[label="expressionName\n i "]
115709[label="assignmentOperator\n = "]
115710[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
125711[label="typeName\n byteArray "]
95712[label="expressionStatement\n fail[i]=byteArray.nextInt(); "]
105713[label="assignment\n fail[i]=byteArray.nextInt() "]
115714[label="arrayAccess\n fail[i] "]
125715[label="expressionName\n fail "]
125716[label="expressionName\n i "]
115717[label="assignmentOperator\n = "]
115718[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
125719[label="typeName\n byteArray "]
95720[label="expressionStatement\n length=byteArray.nextInt(); "]
105721[label="assignment\n length=byteArray.nextInt() "]
115722[label="expressionName\n length "]
115723[label="assignmentOperator\n = "]
115724[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
125725[label="typeName\n byteArray "]
95726[label="ifThenStatement\n if(length==0)continue; "]
105727[label="equalityExpression\n length==0 "]
115728[label="expressionName\n length "]
115729[label="literal\n 0 "]
105730[label="continueStatement\n continue; "]
95731[label="expressionStatement\n output[i]=newint[length]; "]
105732[label="assignment\n output[i]=newint[length] "]
115733[label="arrayAccess\n output[i] "]
125734[label="expressionName\n output "]
125735[label="expressionName\n i "]
115736[label="assignmentOperator\n = "]
115737[label="arrayCreationExpression\n newint[length] "]
125738[label="integralType\n int "]
125739[label="dimExpr\n [length] "]
135740[label="expressionName\n length "]
95741[label="basicForStatement\n for(intj=0;j<output[i].length;++j){output[i][j]=byteArray.nextInt();} "]
105742[label="localVariableDeclaration\n intj=0 "]
115743[label="integralType\n int "]
115744[label="variableDeclarator\n j=0 "]
125745[label="variableDeclaratorId\n j "]
125746[label="literal\n 0 "]
105747[label="relationalExpression\n j<output[i].length "]
115748[label="expressionName\n j "]
115749[label="primary\n output[i].length "]
125750[label="arrayAccess_lfno_primary\n output[i] "]
135751[label="expressionName\n output "]
135752[label="expressionName\n i "]
125753[label="fieldAccess_lf_primary\n .length "]
105754[label="preIncrementExpression\n ++j "]
115755[label="expressionName\n j "]
105756[label="block\n {output[i][j]=byteArray.nextInt();} "]
115757[label="expressionStatement\n output[i][j]=byteArray.nextInt(); "]
125758[label="assignment\n output[i][j]=byteArray.nextInt() "]
135759[label="arrayAccess\n output[i][j] "]
145760[label="expressionName\n output "]
145761[label="expressionName\n i "]
145762[label="primaryNoNewArray_lf_arrayAccess\n  "]
145763[label="expressionName\n j "]
135764[label="assignmentOperator\n = "]
135765[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
145766[label="typeName\n byteArray "]
65767[label="expressionStatement\n length=byteArray.nextInt(); "]
75768[label="assignment\n length=byteArray.nextInt() "]
85769[label="expressionName\n length "]
85770[label="assignmentOperator\n = "]
85771[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
95772[label="typeName\n byteArray "]
65773[label="expressionStatement\n l=newint[length]; "]
75774[label="assignment\n l=newint[length] "]
85775[label="expressionName\n l "]
85776[label="assignmentOperator\n = "]
85777[label="arrayCreationExpression\n newint[length] "]
95778[label="integralType\n int "]
95779[label="dimExpr\n [length] "]
105780[label="expressionName\n length "]
65781[label="basicForStatement\n for(inti=0;i<l.length;++i){l[i]=byteArray.nextInt();} "]
75782[label="localVariableDeclaration\n inti=0 "]
85783[label="integralType\n int "]
85784[label="variableDeclarator\n i=0 "]
95785[label="variableDeclaratorId\n i "]
95786[label="literal\n 0 "]
75787[label="relationalExpression\n i<l.length "]
85788[label="expressionName\n i "]
85789[label="expressionName\n l.length "]
95790[label="ambiguousName\n l "]
75791[label="preIncrementExpression\n ++i "]
85792[label="expressionName\n i "]
75793[label="block\n {l[i]=byteArray.nextInt();} "]
85794[label="expressionStatement\n l[i]=byteArray.nextInt(); "]
95795[label="assignment\n l[i]=byteArray.nextInt() "]
105796[label="arrayAccess\n l[i] "]
115797[label="expressionName\n l "]
115798[label="expressionName\n i "]
105799[label="assignmentOperator\n = "]
105800[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
115801[label="typeName\n byteArray "]
65802[label="expressionStatement\n v=value; "]
75803[label="assignment\n v=value "]
85804[label="expressionName\n v "]
85805[label="assignmentOperator\n = "]
85806[label="expressionName\n value "]
65807[label="returnStatement\n returntrue; "]
75808[label="literal\n true "]
35809[label="methodDeclaration\n publicVget(Stringkey){intindex=exactMatchSearch(key);if(index>=0){returnv[index];}returnnull;} "]
45810[label="methodModifier\n public "]
45811[label="methodHeader\n Vget(Stringkey) "]
55812[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
55813[label="methodDeclarator\n get(Stringkey) "]
65814[label="formalParameter\n Stringkey "]
75815[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
75816[label="variableDeclaratorId\n key "]
45817[label="block\n {intindex=exactMatchSearch(key);if(index>=0){returnv[index];}returnnull;} "]
55818[label="blockStatements\n intindex=exactMatchSearch(key);if(index>=0){returnv[index];}returnnull; "]
65819[label="localVariableDeclarationStatement\n intindex=exactMatchSearch(key); "]
75820[label="localVariableDeclaration\n intindex=exactMatchSearch(key) "]
85821[label="integralType\n int "]
85822[label="variableDeclarator\n index=exactMatchSearch(key) "]
95823[label="variableDeclaratorId\n index "]
95824[label="methodInvocation_lfno_primary\n exactMatchSearch(key) "]
105825[label="methodName\n exactMatchSearch "]
105826[label="expressionName\n key "]
65827[label="ifThenStatement\n if(index>=0){returnv[index];} "]
75828[label="relationalExpression\n index>=0 "]
85829[label="expressionName\n index "]
85830[label="literal\n 0 "]
75831[label="block\n {returnv[index];} "]
85832[label="returnStatement\n returnv[index]; "]
95833[label="arrayAccess_lfno_primary\n v[index] "]
105834[label="expressionName\n v "]
105835[label="expressionName\n index "]
65836[label="returnStatement\n returnnull; "]
75837[label="literal\n null "]
35838[label="methodDeclaration\n publicbooleanset(Stringkey,Vvalue){intindex=exactMatchSearch(key);if(index>=0){v[index]=value;returntrue;}returnfalse;} "]
45839[label="methodModifier\n public "]
45840[label="methodHeader\n booleanset(Stringkey,Vvalue) "]
55841[label="unannPrimitiveType\n boolean "]
55842[label="methodDeclarator\n set(Stringkey,Vvalue) "]
65843[label="formalParameterList\n Stringkey,Vvalue "]
75844[label="formalParameter\n Stringkey "]
85845[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
85846[label="variableDeclaratorId\n key "]
75847[label="formalParameter\n Vvalue "]
85848[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
85849[label="variableDeclaratorId\n value "]
45850[label="block\n {intindex=exactMatchSearch(key);if(index>=0){v[index]=value;returntrue;}returnfalse;} "]
55851[label="blockStatements\n intindex=exactMatchSearch(key);if(index>=0){v[index]=value;returntrue;}returnfalse; "]
65852[label="localVariableDeclarationStatement\n intindex=exactMatchSearch(key); "]
75853[label="localVariableDeclaration\n intindex=exactMatchSearch(key) "]
85854[label="integralType\n int "]
85855[label="variableDeclarator\n index=exactMatchSearch(key) "]
95856[label="variableDeclaratorId\n index "]
95857[label="methodInvocation_lfno_primary\n exactMatchSearch(key) "]
105858[label="methodName\n exactMatchSearch "]
105859[label="expressionName\n key "]
65860[label="ifThenStatement\n if(index>=0){v[index]=value;returntrue;} "]
75861[label="relationalExpression\n index>=0 "]
85862[label="expressionName\n index "]
85863[label="literal\n 0 "]
75864[label="block\n {v[index]=value;returntrue;} "]
85865[label="blockStatements\n v[index]=value;returntrue; "]
95866[label="expressionStatement\n v[index]=value; "]
105867[label="assignment\n v[index]=value "]
115868[label="arrayAccess\n v[index] "]
125869[label="expressionName\n v "]
125870[label="expressionName\n index "]
115871[label="assignmentOperator\n = "]
115872[label="expressionName\n value "]
95873[label="returnStatement\n returntrue; "]
105874[label="literal\n true "]
65875[label="returnStatement\n returnfalse; "]
75876[label="literal\n false "]
35877[label="methodDeclaration\n publicVget(intindex){returnv[index];} "]
45878[label="methodModifier\n public "]
45879[label="methodHeader\n Vget(intindex) "]
55880[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
55881[label="methodDeclarator\n get(intindex) "]
65882[label="formalParameter\n intindex "]
75883[label="integralType\n int "]
75884[label="variableDeclaratorId\n index "]
45885[label="block\n {returnv[index];} "]
55886[label="returnStatement\n returnv[index]; "]
65887[label="arrayAccess_lfno_primary\n v[index] "]
75888[label="expressionName\n v "]
75889[label="expressionName\n index "]
35890[label="normalInterfaceDeclaration\n publicinterfaceIHit<V>{voidhit(intbegin,intend,Vvalue);} "]
45891[label="interfaceModifier\n public "]
45892[label="typeParameters\n <V> "]
55893[label="typeParameter\n V "]
45894[label="interfaceBody\n {voidhit(intbegin,intend,Vvalue);} "]
55895[label="interfaceMethodDeclaration\n voidhit(intbegin,intend,Vvalue); "]
65896[label="methodHeader\n voidhit(intbegin,intend,Vvalue) "]
75897[label="result\n void "]
75898[label="methodDeclarator\n hit(intbegin,intend,Vvalue) "]
85899[label="formalParameterList\n intbegin,intend,Vvalue "]
95900[label="formalParameters\n intbegin,intend "]
105901[label="formalParameter\n intbegin "]
115902[label="integralType\n int "]
115903[label="variableDeclaratorId\n begin "]
105904[label="formalParameter\n intend "]
115905[label="integralType\n int "]
115906[label="variableDeclaratorId\n end "]
95907[label="formalParameter\n Vvalue "]
105908[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
105909[label="variableDeclaratorId\n value "]
65910[label="methodBody\n ; "]
35911[label="normalInterfaceDeclaration\n publicinterfaceIHitFull<V>{voidhit(intbegin,intend,Vvalue,intindex);} "]
45912[label="interfaceModifier\n public "]
45913[label="typeParameters\n <V> "]
55914[label="typeParameter\n V "]
45915[label="interfaceBody\n {voidhit(intbegin,intend,Vvalue,intindex);} "]
55916[label="interfaceMethodDeclaration\n voidhit(intbegin,intend,Vvalue,intindex); "]
65917[label="methodHeader\n voidhit(intbegin,intend,Vvalue,intindex) "]
75918[label="result\n void "]
75919[label="methodDeclarator\n hit(intbegin,intend,Vvalue,intindex) "]
85920[label="formalParameterList\n intbegin,intend,Vvalue,intindex "]
95921[label="formalParameters\n intbegin,intend,Vvalue "]
105922[label="formalParameter\n intbegin "]
115923[label="integralType\n int "]
115924[label="variableDeclaratorId\n begin "]
105925[label="formalParameter\n intend "]
115926[label="integralType\n int "]
115927[label="variableDeclaratorId\n end "]
105928[label="formalParameter\n Vvalue "]
115929[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
115930[label="variableDeclaratorId\n value "]
95931[label="formalParameter\n intindex "]
105932[label="integralType\n int "]
105933[label="variableDeclaratorId\n index "]
65934[label="methodBody\n ; "]
35935[label="normalClassDeclaration\n publicclassHit<V>{publicfinalintbegin;publicfinalintend;publicfinalVvalue;publicHit(intbegin,intend,Vvalue){this.begin=begin;this.end=end;this.value=value;}@OverridepublicStringtoString(){returnString.format(\"[%d:%d]=%s\",begin,end,value);}} "]
45936[label="classModifier\n public "]
45937[label="typeParameters\n <V> "]
55938[label="typeParameter\n V "]
45939[label="classBody\n {publicfinalintbegin;publicfinalintend;publicfinalVvalue;publicHit(intbegin,intend,Vvalue){this.begin=begin;this.end=end;this.value=value;}@OverridepublicStringtoString(){returnString.format(\"[%d:%d]=%s\",begin,end,value);}} "]
55940[label="fieldDeclaration\n publicfinalintbegin; "]
65941[label="fieldModifier\n public "]
65942[label="fieldModifier\n final "]
65943[label="integralType\n int "]
65944[label="variableDeclaratorId\n begin "]
55945[label="fieldDeclaration\n publicfinalintend; "]
65946[label="fieldModifier\n public "]
65947[label="fieldModifier\n final "]
65948[label="integralType\n int "]
65949[label="variableDeclaratorId\n end "]
55950[label="fieldDeclaration\n publicfinalVvalue; "]
65951[label="fieldModifier\n public "]
65952[label="fieldModifier\n final "]
65953[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
65954[label="variableDeclaratorId\n value "]
55955[label="constructorDeclaration\n publicHit(intbegin,intend,Vvalue){this.begin=begin;this.end=end;this.value=value;} "]
65956[label="constructorModifier\n public "]
65957[label="constructorDeclarator\n Hit(intbegin,intend,Vvalue) "]
75958[label="simpleTypeName\n Hit "]
75959[label="formalParameterList\n intbegin,intend,Vvalue "]
85960[label="formalParameters\n intbegin,intend "]
95961[label="formalParameter\n intbegin "]
105962[label="integralType\n int "]
105963[label="variableDeclaratorId\n begin "]
95964[label="formalParameter\n intend "]
105965[label="integralType\n int "]
105966[label="variableDeclaratorId\n end "]
85967[label="formalParameter\n Vvalue "]
95968[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
95969[label="variableDeclaratorId\n value "]
65970[label="constructorBody\n {this.begin=begin;this.end=end;this.value=value;} "]
75971[label="blockStatements\n this.begin=begin;this.end=end;this.value=value; "]
85972[label="expressionStatement\n this.begin=begin; "]
95973[label="assignment\n this.begin=begin "]
105974[label="fieldAccess\n this.begin "]
115975[label="primaryNoNewArray_lfno_primary\n this "]
105976[label="assignmentOperator\n = "]
105977[label="expressionName\n begin "]
85978[label="expressionStatement\n this.end=end; "]
95979[label="assignment\n this.end=end "]
105980[label="fieldAccess\n this.end "]
115981[label="primaryNoNewArray_lfno_primary\n this "]
105982[label="assignmentOperator\n = "]
105983[label="expressionName\n end "]
85984[label="expressionStatement\n this.value=value; "]
95985[label="assignment\n this.value=value "]
105986[label="fieldAccess\n this.value "]
115987[label="primaryNoNewArray_lfno_primary\n this "]
105988[label="assignmentOperator\n = "]
105989[label="expressionName\n value "]
55990[label="methodDeclaration\n @OverridepublicStringtoString(){returnString.format(\"[%d:%d]=%s\",begin,end,value);} "]
65991[label="markerAnnotation\n @Override "]
75992[label="typeName\n Override "]
65993[label="methodModifier\n public "]
65994[label="methodHeader\n StringtoString() "]
75995[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
75996[label="methodDeclarator\n toString() "]
65997[label="block\n {returnString.format(\"[%d:%d]=%s\",begin,end,value);} "]
75998[label="returnStatement\n returnString.format(\"[%d:%d]=%s\",begin,end,value); "]
85999[label="methodInvocation_lfno_primary\n String.format(\"[%d:%d]=%s\",begin,end,value) "]
96000[label="typeName\n String "]
96001[label="argumentList\n \"[%d:%d]=%s\",begin,end,value "]
106002[label="literal\n \"[%d:%d]=%s\" "]
106003[label="expressionName\n begin "]
106004[label="expressionName\n end "]
106005[label="expressionName\n value "]
36006[label="methodDeclaration\n privateintgetState(intcurrentState,charcharacter){intnewCurrentState=transitionWithRoot(currentState,character);while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);}returnnewCurrentState;} "]
46007[label="methodModifier\n private "]
46008[label="methodHeader\n intgetState(intcurrentState,charcharacter) "]
56009[label="integralType\n int "]
56010[label="methodDeclarator\n getState(intcurrentState,charcharacter) "]
66011[label="formalParameterList\n intcurrentState,charcharacter "]
76012[label="formalParameter\n intcurrentState "]
86013[label="integralType\n int "]
86014[label="variableDeclaratorId\n currentState "]
76015[label="formalParameter\n charcharacter "]
86016[label="integralType\n char "]
86017[label="variableDeclaratorId\n character "]
46018[label="block\n {intnewCurrentState=transitionWithRoot(currentState,character);while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);}returnnewCurrentState;} "]
56019[label="blockStatements\n intnewCurrentState=transitionWithRoot(currentState,character);while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);}returnnewCurrentState; "]
66020[label="localVariableDeclarationStatement\n intnewCurrentState=transitionWithRoot(currentState,character); "]
76021[label="localVariableDeclaration\n intnewCurrentState=transitionWithRoot(currentState,character) "]
86022[label="integralType\n int "]
86023[label="variableDeclarator\n newCurrentState=transitionWithRoot(currentState,character) "]
96024[label="variableDeclaratorId\n newCurrentState "]
96025[label="methodInvocation_lfno_primary\n transitionWithRoot(currentState,character) "]
106026[label="methodName\n transitionWithRoot "]
106027[label="argumentList\n currentState,character "]
116028[label="expressionName\n currentState "]
116029[label="expressionName\n character "]
66030[label="whileStatement\n while(newCurrentState==-1){currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);} "]
76031[label="equalityExpression\n newCurrentState==-1 "]
86032[label="expressionName\n newCurrentState "]
86033[label="unaryExpression\n -1 "]
96034[label="literal\n 1 "]
76035[label="block\n {currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character);} "]
86036[label="blockStatements\n currentState=fail[currentState];newCurrentState=transitionWithRoot(currentState,character); "]
96037[label="expressionStatement\n currentState=fail[currentState]; "]
106038[label="assignment\n currentState=fail[currentState] "]
116039[label="expressionName\n currentState "]
116040[label="assignmentOperator\n = "]
116041[label="arrayAccess_lfno_primary\n fail[currentState] "]
126042[label="expressionName\n fail "]
126043[label="expressionName\n currentState "]
96044[label="expressionStatement\n newCurrentState=transitionWithRoot(currentState,character); "]
106045[label="assignment\n newCurrentState=transitionWithRoot(currentState,character) "]
116046[label="expressionName\n newCurrentState "]
116047[label="assignmentOperator\n = "]
116048[label="methodInvocation_lfno_primary\n transitionWithRoot(currentState,character) "]
126049[label="methodName\n transitionWithRoot "]
126050[label="argumentList\n currentState,character "]
136051[label="expressionName\n currentState "]
136052[label="expressionName\n character "]
66053[label="returnStatement\n returnnewCurrentState; "]
76054[label="expressionName\n newCurrentState "]
36055[label="methodDeclaration\n privatevoidstoreEmits(intposition,intcurrentState,List<Hit<V>>collectedEmits){int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}}} "]
46056[label="methodModifier\n private "]
46057[label="methodHeader\n voidstoreEmits(intposition,intcurrentState,List<Hit<V>>collectedEmits) "]
56058[label="result\n void "]
56059[label="methodDeclarator\n storeEmits(intposition,intcurrentState,List<Hit<V>>collectedEmits) "]
66060[label="formalParameterList\n intposition,intcurrentState,List<Hit<V>>collectedEmits "]
76061[label="formalParameters\n intposition,intcurrentState "]
86062[label="formalParameter\n intposition "]
96063[label="integralType\n int "]
96064[label="variableDeclaratorId\n position "]
86065[label="formalParameter\n intcurrentState "]
96066[label="integralType\n int "]
96067[label="variableDeclaratorId\n currentState "]
76068[label="formalParameter\n List<Hit<V>>collectedEmits "]
86069[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Hit<V>> "]
96070[label="typeArguments\n <Hit<V>> "]
106071[label="classType_lfno_classOrInterfaceType\n Hit<V> "]
116072[label="typeArguments\n <V> "]
126073[label="classType_lfno_classOrInterfaceType\n V "]
86074[label="variableDeclaratorId\n collectedEmits "]
46075[label="block\n {int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}}} "]
56076[label="blockStatements\n int[]hitArray=output[currentState];if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}} "]
66077[label="localVariableDeclarationStatement\n int[]hitArray=output[currentState]; "]
76078[label="localVariableDeclaration\n int[]hitArray=output[currentState] "]
86079[label="unannArrayType\n int[] "]
96080[label="integralType\n int "]
96081[label="dims\n [] "]
86082[label="variableDeclarator\n hitArray=output[currentState] "]
96083[label="variableDeclaratorId\n hitArray "]
96084[label="arrayAccess_lfno_primary\n output[currentState] "]
106085[label="expressionName\n output "]
106086[label="expressionName\n currentState "]
66087[label="ifThenStatement\n if(hitArray!=null){for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}} "]
76088[label="equalityExpression\n hitArray!=null "]
86089[label="expressionName\n hitArray "]
86090[label="literal\n null "]
76091[label="block\n {for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));}} "]
86092[label="enhancedForStatement\n for(inthit:hitArray){collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));} "]
96093[label="integralType\n int "]
96094[label="variableDeclaratorId\n hit "]
96095[label="expressionName\n hitArray "]
96096[label="block\n {collectedEmits.add(newHit<V>(position-l[hit],position,v[hit]));} "]
106097[label="expressionStatement\n collectedEmits.add(newHit<V>(position-l[hit],position,v[hit])); "]
116098[label="methodInvocation\n collectedEmits.add(newHit<V>(position-l[hit],position,v[hit])) "]
126099[label="typeName\n collectedEmits "]
126100[label="classInstanceCreationExpression_lfno_primary\n newHit<V>(position-l[hit],position,v[hit]) "]
136101[label="typeArguments\n <V> "]
146102[label="classType_lfno_classOrInterfaceType\n V "]
136103[label="argumentList\n position-l[hit],position,v[hit] "]
146104[label="additiveExpression\n position-l[hit] "]
156105[label="expressionName\n position "]
156106[label="arrayAccess_lfno_primary\n l[hit] "]
166107[label="expressionName\n l "]
166108[label="expressionName\n hit "]
146109[label="expressionName\n position "]
146110[label="arrayAccess_lfno_primary\n v[hit] "]
156111[label="expressionName\n v "]
156112[label="expressionName\n hit "]
36113[label="methodDeclaration\n protectedinttransition(intcurrent,charc){intb=current;intp;p=b+c+1;if(b==check[p])b=base[p];elsereturn-1;p=b;returnp;} "]
46114[label="methodModifier\n protected "]
46115[label="methodHeader\n inttransition(intcurrent,charc) "]
56116[label="integralType\n int "]
56117[label="methodDeclarator\n transition(intcurrent,charc) "]
66118[label="formalParameterList\n intcurrent,charc "]
76119[label="formalParameter\n intcurrent "]
86120[label="integralType\n int "]
86121[label="variableDeclaratorId\n current "]
76122[label="formalParameter\n charc "]
86123[label="integralType\n char "]
86124[label="variableDeclaratorId\n c "]
46125[label="block\n {intb=current;intp;p=b+c+1;if(b==check[p])b=base[p];elsereturn-1;p=b;returnp;} "]
56126[label="blockStatements\n intb=current;intp;p=b+c+1;if(b==check[p])b=base[p];elsereturn-1;p=b;returnp; "]
66127[label="localVariableDeclarationStatement\n intb=current; "]
76128[label="localVariableDeclaration\n intb=current "]
86129[label="integralType\n int "]
86130[label="variableDeclarator\n b=current "]
96131[label="variableDeclaratorId\n b "]
96132[label="expressionName\n current "]
66133[label="localVariableDeclarationStatement\n intp; "]
76134[label="localVariableDeclaration\n intp "]
86135[label="integralType\n int "]
86136[label="variableDeclaratorId\n p "]
66137[label="expressionStatement\n p=b+c+1; "]
76138[label="assignment\n p=b+c+1 "]
86139[label="expressionName\n p "]
86140[label="assignmentOperator\n = "]
86141[label="additiveExpression\n b+c+1 "]
96142[label="additiveExpression\n b+c "]
106143[label="expressionName\n b "]
106144[label="expressionName\n c "]
96145[label="literal\n 1 "]
66146[label="ifThenElseStatement\n if(b==check[p])b=base[p];elsereturn-1; "]
76147[label="equalityExpression\n b==check[p] "]
86148[label="expressionName\n b "]
86149[label="arrayAccess_lfno_primary\n check[p] "]
96150[label="expressionName\n check "]
96151[label="expressionName\n p "]
76152[label="expressionStatement\n b=base[p]; "]
86153[label="assignment\n b=base[p] "]
96154[label="expressionName\n b "]
96155[label="assignmentOperator\n = "]
96156[label="arrayAccess_lfno_primary\n base[p] "]
106157[label="expressionName\n base "]
106158[label="expressionName\n p "]
76159[label="returnStatement\n return-1; "]
86160[label="unaryExpression\n -1 "]
96161[label="literal\n 1 "]
66162[label="expressionStatement\n p=b; "]
76163[label="assignment\n p=b "]
86164[label="expressionName\n p "]
86165[label="assignmentOperator\n = "]
86166[label="expressionName\n b "]
66167[label="returnStatement\n returnp; "]
76168[label="expressionName\n p "]
36169[label="methodDeclaration\n protectedinttransitionWithRoot(intnodePos,charc){intb=base[nodePos];intp;p=b+c+1;if(b!=check[p]){if(nodePos==0)return0;return-1;}returnp;} "]
46170[label="methodModifier\n protected "]
46171[label="methodHeader\n inttransitionWithRoot(intnodePos,charc) "]
56172[label="integralType\n int "]
56173[label="methodDeclarator\n transitionWithRoot(intnodePos,charc) "]
66174[label="formalParameterList\n intnodePos,charc "]
76175[label="formalParameter\n intnodePos "]
86176[label="integralType\n int "]
86177[label="variableDeclaratorId\n nodePos "]
76178[label="formalParameter\n charc "]
86179[label="integralType\n char "]
86180[label="variableDeclaratorId\n c "]
46181[label="block\n {intb=base[nodePos];intp;p=b+c+1;if(b!=check[p]){if(nodePos==0)return0;return-1;}returnp;} "]
56182[label="blockStatements\n intb=base[nodePos];intp;p=b+c+1;if(b!=check[p]){if(nodePos==0)return0;return-1;}returnp; "]
66183[label="localVariableDeclarationStatement\n intb=base[nodePos]; "]
76184[label="localVariableDeclaration\n intb=base[nodePos] "]
86185[label="integralType\n int "]
86186[label="variableDeclarator\n b=base[nodePos] "]
96187[label="variableDeclaratorId\n b "]
96188[label="arrayAccess_lfno_primary\n base[nodePos] "]
106189[label="expressionName\n base "]
106190[label="expressionName\n nodePos "]
66191[label="localVariableDeclarationStatement\n intp; "]
76192[label="localVariableDeclaration\n intp "]
86193[label="integralType\n int "]
86194[label="variableDeclaratorId\n p "]
66195[label="expressionStatement\n p=b+c+1; "]
76196[label="assignment\n p=b+c+1 "]
86197[label="expressionName\n p "]
86198[label="assignmentOperator\n = "]
86199[label="additiveExpression\n b+c+1 "]
96200[label="additiveExpression\n b+c "]
106201[label="expressionName\n b "]
106202[label="expressionName\n c "]
96203[label="literal\n 1 "]
66204[label="ifThenStatement\n if(b!=check[p]){if(nodePos==0)return0;return-1;} "]
76205[label="equalityExpression\n b!=check[p] "]
86206[label="expressionName\n b "]
86207[label="arrayAccess_lfno_primary\n check[p] "]
96208[label="expressionName\n check "]
96209[label="expressionName\n p "]
76210[label="block\n {if(nodePos==0)return0;return-1;} "]
86211[label="blockStatements\n if(nodePos==0)return0;return-1; "]
96212[label="ifThenStatement\n if(nodePos==0)return0; "]
106213[label="equalityExpression\n nodePos==0 "]
116214[label="expressionName\n nodePos "]
116215[label="literal\n 0 "]
106216[label="returnStatement\n return0; "]
116217[label="literal\n 0 "]
96218[label="returnStatement\n return-1; "]
106219[label="unaryExpression\n -1 "]
116220[label="literal\n 1 "]
66221[label="returnStatement\n returnp; "]
76222[label="expressionName\n p "]
36223[label="methodDeclaration\n publicvoidbuild(TreeMap<String,V>map){newBuilder().build(map);} "]
46224[label="methodModifier\n public "]
46225[label="methodHeader\n voidbuild(TreeMap<String,V>map) "]
56226[label="result\n void "]
56227[label="methodDeclarator\n build(TreeMap<String,V>map) "]
66228[label="formalParameter\n TreeMap<String,V>map "]
76229[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,V> "]
86230[label="typeArguments\n <String,V> "]
96231[label="typeArgumentList\n String,V "]
106232[label="classType_lfno_classOrInterfaceType\n String "]
106233[label="classType_lfno_classOrInterfaceType\n V "]
76234[label="variableDeclaratorId\n map "]
46235[label="block\n {newBuilder().build(map);} "]
56236[label="expressionStatement\n newBuilder().build(map); "]
66237[label="methodInvocation\n newBuilder().build(map) "]
76238[label="classInstanceCreationExpression_lfno_primary\n newBuilder() "]
76239[label="expressionName\n map "]
36240[label="methodDeclaration\n privateintfetch(Stateparent,List<Map.Entry<Integer,State>>siblings){if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));}for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));}returnsiblings.size();} "]
46241[label="methodModifier\n private "]
46242[label="methodHeader\n intfetch(Stateparent,List<Map.Entry<Integer,State>>siblings) "]
56243[label="integralType\n int "]
56244[label="methodDeclarator\n fetch(Stateparent,List<Map.Entry<Integer,State>>siblings) "]
66245[label="formalParameterList\n Stateparent,List<Map.Entry<Integer,State>>siblings "]
76246[label="formalParameter\n Stateparent "]
86247[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
86248[label="variableDeclaratorId\n parent "]
76249[label="formalParameter\n List<Map.Entry<Integer,State>>siblings "]
86250[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<Integer,State>> "]
96251[label="typeArguments\n <Map.Entry<Integer,State>> "]
106252[label="classOrInterfaceType\n Map.Entry<Integer,State> "]
116253[label="classType_lfno_classOrInterfaceType\n Map "]
116254[label="classType_lf_classOrInterfaceType\n .Entry<Integer,State> "]
126255[label="typeArguments\n <Integer,State> "]
136256[label="typeArgumentList\n Integer,State "]
146257[label="classType_lfno_classOrInterfaceType\n Integer "]
146258[label="classType_lfno_classOrInterfaceType\n State "]
86259[label="variableDeclaratorId\n siblings "]
46260[label="block\n {if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));}for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));}returnsiblings.size();} "]
56261[label="blockStatements\n if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));}for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));}returnsiblings.size(); "]
66262[label="ifThenStatement\n if(parent.isAcceptable()){StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));} "]
76263[label="methodInvocation_lfno_primary\n parent.isAcceptable() "]
86264[label="typeName\n parent "]
76265[label="block\n {StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode));} "]
86266[label="blockStatements\n StatefakeNode=newState(-(parent.getDepth()+1));fakeNode.addEmit(parent.getLargestValueId());siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode)); "]
96267[label="localVariableDeclarationStatement\n StatefakeNode=newState(-(parent.getDepth()+1)); "]
106268[label="localVariableDeclaration\n StatefakeNode=newState(-(parent.getDepth()+1)) "]
116269[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
116270[label="variableDeclarator\n fakeNode=newState(-(parent.getDepth()+1)) "]
126271[label="variableDeclaratorId\n fakeNode "]
126272[label="classInstanceCreationExpression_lfno_primary\n newState(-(parent.getDepth()+1)) "]
136273[label="unaryExpression\n -(parent.getDepth()+1) "]
146274[label="primaryNoNewArray_lfno_primary\n (parent.getDepth()+1) "]
156275[label="additiveExpression\n parent.getDepth()+1 "]
166276[label="methodInvocation_lfno_primary\n parent.getDepth() "]
176277[label="typeName\n parent "]
166278[label="literal\n 1 "]
96279[label="expressionStatement\n fakeNode.addEmit(parent.getLargestValueId()); "]
106280[label="methodInvocation\n fakeNode.addEmit(parent.getLargestValueId()) "]
116281[label="typeName\n fakeNode "]
116282[label="methodInvocation_lfno_primary\n parent.getLargestValueId() "]
126283[label="typeName\n parent "]
96284[label="expressionStatement\n siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode)); "]
106285[label="methodInvocation\n siblings.add(newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode)) "]
116286[label="typeName\n siblings "]
116287[label="classInstanceCreationExpression_lfno_primary\n newAbstractMap.SimpleEntry<Integer,State>(0,fakeNode) "]
126288[label="typeArguments\n <Integer,State> "]
136289[label="typeArgumentList\n Integer,State "]
146290[label="classType_lfno_classOrInterfaceType\n Integer "]
146291[label="classType_lfno_classOrInterfaceType\n State "]
126292[label="argumentList\n 0,fakeNode "]
136293[label="literal\n 0 "]
136294[label="expressionName\n fakeNode "]
66295[label="enhancedForStatement\n for(Map.Entry<Character,State>entry:parent.getSuccess().entrySet()){siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));} "]
76296[label="unannClassOrInterfaceType\n Map.Entry<Character,State> "]
86297[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
86298[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<Character,State> "]
96299[label="typeArguments\n <Character,State> "]
106300[label="typeArgumentList\n Character,State "]
116301[label="classType_lfno_classOrInterfaceType\n Character "]
116302[label="classType_lfno_classOrInterfaceType\n State "]
76303[label="variableDeclaratorId\n entry "]
76304[label="primary\n parent.getSuccess().entrySet() "]
86305[label="methodInvocation_lfno_primary\n parent.getSuccess() "]
96306[label="typeName\n parent "]
86307[label="methodInvocation_lf_primary\n .entrySet() "]
76308[label="block\n {siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()));} "]
86309[label="expressionStatement\n siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue())); "]
96310[label="methodInvocation\n siblings.add(newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue())) "]
106311[label="typeName\n siblings "]
106312[label="classInstanceCreationExpression_lfno_primary\n newAbstractMap.SimpleEntry<Integer,State>(entry.getKey()+1,entry.getValue()) "]
116313[label="typeArguments\n <Integer,State> "]
126314[label="typeArgumentList\n Integer,State "]
136315[label="classType_lfno_classOrInterfaceType\n Integer "]
136316[label="classType_lfno_classOrInterfaceType\n State "]
116317[label="argumentList\n entry.getKey()+1,entry.getValue() "]
126318[label="additiveExpression\n entry.getKey()+1 "]
136319[label="methodInvocation_lfno_primary\n entry.getKey() "]
146320[label="typeName\n entry "]
136321[label="literal\n 1 "]
126322[label="methodInvocation_lfno_primary\n entry.getValue() "]
136323[label="typeName\n entry "]
66324[label="returnStatement\n returnsiblings.size(); "]
76325[label="methodInvocation_lfno_primary\n siblings.size() "]
86326[label="typeName\n siblings "]
36327[label="methodDeclaration\n publicintexactMatchSearch(Stringkey){returnexactMatchSearch(key,0,0,0);} "]
46328[label="methodModifier\n public "]
46329[label="methodHeader\n intexactMatchSearch(Stringkey) "]
56330[label="integralType\n int "]
56331[label="methodDeclarator\n exactMatchSearch(Stringkey) "]
66332[label="formalParameter\n Stringkey "]
76333[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
76334[label="variableDeclaratorId\n key "]
46335[label="block\n {returnexactMatchSearch(key,0,0,0);} "]
56336[label="returnStatement\n returnexactMatchSearch(key,0,0,0); "]
66337[label="methodInvocation_lfno_primary\n exactMatchSearch(key,0,0,0) "]
76338[label="methodName\n exactMatchSearch "]
76339[label="argumentList\n key,0,0,0 "]
86340[label="expressionName\n key "]
86341[label="literal\n 0 "]
86342[label="literal\n 0 "]
86343[label="literal\n 0 "]
36344[label="methodDeclaration\n privateintexactMatchSearch(Stringkey,intpos,intlen,intnodePos){if(len<=0)len=key.length();if(nodePos<=0)nodePos=0;intresult=-1;char[]keyChars=key.toCharArray();intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;} "]
46345[label="methodModifier\n private "]
46346[label="methodHeader\n intexactMatchSearch(Stringkey,intpos,intlen,intnodePos) "]
56347[label="integralType\n int "]
56348[label="methodDeclarator\n exactMatchSearch(Stringkey,intpos,intlen,intnodePos) "]
66349[label="formalParameterList\n Stringkey,intpos,intlen,intnodePos "]
76350[label="formalParameters\n Stringkey,intpos,intlen "]
86351[label="formalParameter\n Stringkey "]
96352[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
96353[label="variableDeclaratorId\n key "]
86354[label="formalParameter\n intpos "]
96355[label="integralType\n int "]
96356[label="variableDeclaratorId\n pos "]
86357[label="formalParameter\n intlen "]
96358[label="integralType\n int "]
96359[label="variableDeclaratorId\n len "]
76360[label="formalParameter\n intnodePos "]
86361[label="integralType\n int "]
86362[label="variableDeclaratorId\n nodePos "]
46363[label="block\n {if(len<=0)len=key.length();if(nodePos<=0)nodePos=0;intresult=-1;char[]keyChars=key.toCharArray();intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;} "]
56364[label="blockStatements\n if(len<=0)len=key.length();if(nodePos<=0)nodePos=0;intresult=-1;char[]keyChars=key.toCharArray();intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult; "]
66365[label="ifThenStatement\n if(len<=0)len=key.length(); "]
76366[label="relationalExpression\n len<=0 "]
86367[label="expressionName\n len "]
86368[label="literal\n 0 "]
76369[label="expressionStatement\n len=key.length(); "]
86370[label="assignment\n len=key.length() "]
96371[label="expressionName\n len "]
96372[label="assignmentOperator\n = "]
96373[label="methodInvocation_lfno_primary\n key.length() "]
106374[label="typeName\n key "]
66375[label="ifThenStatement\n if(nodePos<=0)nodePos=0; "]
76376[label="relationalExpression\n nodePos<=0 "]
86377[label="expressionName\n nodePos "]
86378[label="literal\n 0 "]
76379[label="expressionStatement\n nodePos=0; "]
86380[label="assignment\n nodePos=0 "]
96381[label="expressionName\n nodePos "]
96382[label="assignmentOperator\n = "]
96383[label="literal\n 0 "]
66384[label="localVariableDeclarationStatement\n intresult=-1; "]
76385[label="localVariableDeclaration\n intresult=-1 "]
86386[label="integralType\n int "]
86387[label="variableDeclarator\n result=-1 "]
96388[label="variableDeclaratorId\n result "]
96389[label="unaryExpression\n -1 "]
106390[label="literal\n 1 "]
66391[label="localVariableDeclarationStatement\n char[]keyChars=key.toCharArray(); "]
76392[label="localVariableDeclaration\n char[]keyChars=key.toCharArray() "]
86393[label="unannArrayType\n char[] "]
96394[label="integralType\n char "]
96395[label="dims\n [] "]
86396[label="variableDeclarator\n keyChars=key.toCharArray() "]
96397[label="variableDeclaratorId\n keyChars "]
96398[label="methodInvocation_lfno_primary\n key.toCharArray() "]
106399[label="typeName\n key "]
66400[label="localVariableDeclarationStatement\n intb=base[nodePos]; "]
76401[label="localVariableDeclaration\n intb=base[nodePos] "]
86402[label="integralType\n int "]
86403[label="variableDeclarator\n b=base[nodePos] "]
96404[label="variableDeclaratorId\n b "]
96405[label="arrayAccess_lfno_primary\n base[nodePos] "]
106406[label="expressionName\n base "]
106407[label="expressionName\n nodePos "]
66408[label="localVariableDeclarationStatement\n intp; "]
76409[label="localVariableDeclaration\n intp "]
86410[label="integralType\n int "]
86411[label="variableDeclaratorId\n p "]
66412[label="basicForStatement\n for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;} "]
76413[label="localVariableDeclaration\n inti=pos "]
86414[label="integralType\n int "]
86415[label="variableDeclarator\n i=pos "]
96416[label="variableDeclaratorId\n i "]
96417[label="expressionName\n pos "]
76418[label="relationalExpression\n i<len "]
86419[label="expressionName\n i "]
86420[label="expressionName\n len "]
76421[label="postIncrementExpression\n i++ "]
86422[label="expressionName\n i "]
76423[label="block\n {p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;} "]
86424[label="blockStatements\n p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult; "]
96425[label="expressionStatement\n p=b+(int)(keyChars[i])+1; "]
106426[label="assignment\n p=b+(int)(keyChars[i])+1 "]
116427[label="expressionName\n p "]
116428[label="assignmentOperator\n = "]
116429[label="additiveExpression\n b+(int)(keyChars[i])+1 "]
126430[label="additiveExpression\n b+(int)(keyChars[i]) "]
136431[label="expressionName\n b "]
136432[label="castExpression\n (int)(keyChars[i]) "]
146433[label="integralType\n int "]
146434[label="primaryNoNewArray_lfno_primary\n (keyChars[i]) "]
156435[label="arrayAccess_lfno_primary\n keyChars[i] "]
166436[label="expressionName\n keyChars "]
166437[label="expressionName\n i "]
126438[label="literal\n 1 "]
96439[label="ifThenElseStatement\n if(b==check[p])b=base[p];elsereturnresult; "]
106440[label="equalityExpression\n b==check[p] "]
116441[label="expressionName\n b "]
116442[label="arrayAccess_lfno_primary\n check[p] "]
126443[label="expressionName\n check "]
126444[label="expressionName\n p "]
106445[label="expressionStatement\n b=base[p]; "]
116446[label="assignment\n b=base[p] "]
126447[label="expressionName\n b "]
126448[label="assignmentOperator\n = "]
126449[label="arrayAccess_lfno_primary\n base[p] "]
136450[label="expressionName\n base "]
136451[label="expressionName\n p "]
106452[label="returnStatement\n returnresult; "]
116453[label="expressionName\n result "]
66454[label="expressionStatement\n p=b; "]
76455[label="assignment\n p=b "]
86456[label="expressionName\n p "]
86457[label="assignmentOperator\n = "]
86458[label="expressionName\n b "]
66459[label="localVariableDeclarationStatement\n intn=base[p]; "]
76460[label="localVariableDeclaration\n intn=base[p] "]
86461[label="integralType\n int "]
86462[label="variableDeclarator\n n=base[p] "]
96463[label="variableDeclaratorId\n n "]
96464[label="arrayAccess_lfno_primary\n base[p] "]
106465[label="expressionName\n base "]
106466[label="expressionName\n p "]
66467[label="ifThenStatement\n if(b==check[p]&&n<0){result=-n-1;} "]
76468[label="conditionalAndExpression\n b==check[p]&&n<0 "]
86469[label="equalityExpression\n b==check[p] "]
96470[label="expressionName\n b "]
96471[label="arrayAccess_lfno_primary\n check[p] "]
106472[label="expressionName\n check "]
106473[label="expressionName\n p "]
86474[label="relationalExpression\n n<0 "]
96475[label="expressionName\n n "]
96476[label="literal\n 0 "]
76477[label="block\n {result=-n-1;} "]
86478[label="expressionStatement\n result=-n-1; "]
96479[label="assignment\n result=-n-1 "]
106480[label="expressionName\n result "]
106481[label="assignmentOperator\n = "]
106482[label="additiveExpression\n -n-1 "]
116483[label="unaryExpression\n -n "]
126484[label="expressionName\n n "]
116485[label="literal\n 1 "]
66486[label="returnStatement\n returnresult; "]
76487[label="expressionName\n result "]
36488[label="methodDeclaration\n privateintexactMatchSearch(char[]keyChars,intpos,intlen,intnodePos){intresult=-1;intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;} "]
46489[label="methodModifier\n private "]
46490[label="methodHeader\n intexactMatchSearch(char[]keyChars,intpos,intlen,intnodePos) "]
56491[label="integralType\n int "]
56492[label="methodDeclarator\n exactMatchSearch(char[]keyChars,intpos,intlen,intnodePos) "]
66493[label="formalParameterList\n char[]keyChars,intpos,intlen,intnodePos "]
76494[label="formalParameters\n char[]keyChars,intpos,intlen "]
86495[label="formalParameter\n char[]keyChars "]
96496[label="unannArrayType\n char[] "]
106497[label="integralType\n char "]
106498[label="dims\n [] "]
96499[label="variableDeclaratorId\n keyChars "]
86500[label="formalParameter\n intpos "]
96501[label="integralType\n int "]
96502[label="variableDeclaratorId\n pos "]
86503[label="formalParameter\n intlen "]
96504[label="integralType\n int "]
96505[label="variableDeclaratorId\n len "]
76506[label="formalParameter\n intnodePos "]
86507[label="integralType\n int "]
86508[label="variableDeclaratorId\n nodePos "]
46509[label="block\n {intresult=-1;intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult;} "]
56510[label="blockStatements\n intresult=-1;intb=base[nodePos];intp;for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;}p=b;intn=base[p];if(b==check[p]&&n<0){result=-n-1;}returnresult; "]
66511[label="localVariableDeclarationStatement\n intresult=-1; "]
76512[label="localVariableDeclaration\n intresult=-1 "]
86513[label="integralType\n int "]
86514[label="variableDeclarator\n result=-1 "]
96515[label="variableDeclaratorId\n result "]
96516[label="unaryExpression\n -1 "]
106517[label="literal\n 1 "]
66518[label="localVariableDeclarationStatement\n intb=base[nodePos]; "]
76519[label="localVariableDeclaration\n intb=base[nodePos] "]
86520[label="integralType\n int "]
86521[label="variableDeclarator\n b=base[nodePos] "]
96522[label="variableDeclaratorId\n b "]
96523[label="arrayAccess_lfno_primary\n base[nodePos] "]
106524[label="expressionName\n base "]
106525[label="expressionName\n nodePos "]
66526[label="localVariableDeclarationStatement\n intp; "]
76527[label="localVariableDeclaration\n intp "]
86528[label="integralType\n int "]
86529[label="variableDeclaratorId\n p "]
66530[label="basicForStatement\n for(inti=pos;i<len;i++){p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;} "]
76531[label="localVariableDeclaration\n inti=pos "]
86532[label="integralType\n int "]
86533[label="variableDeclarator\n i=pos "]
96534[label="variableDeclaratorId\n i "]
96535[label="expressionName\n pos "]
76536[label="relationalExpression\n i<len "]
86537[label="expressionName\n i "]
86538[label="expressionName\n len "]
76539[label="postIncrementExpression\n i++ "]
86540[label="expressionName\n i "]
76541[label="block\n {p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult;} "]
86542[label="blockStatements\n p=b+(int)(keyChars[i])+1;if(b==check[p])b=base[p];elsereturnresult; "]
96543[label="expressionStatement\n p=b+(int)(keyChars[i])+1; "]
106544[label="assignment\n p=b+(int)(keyChars[i])+1 "]
116545[label="expressionName\n p "]
116546[label="assignmentOperator\n = "]
116547[label="additiveExpression\n b+(int)(keyChars[i])+1 "]
126548[label="additiveExpression\n b+(int)(keyChars[i]) "]
136549[label="expressionName\n b "]
136550[label="castExpression\n (int)(keyChars[i]) "]
146551[label="integralType\n int "]
146552[label="primaryNoNewArray_lfno_primary\n (keyChars[i]) "]
156553[label="arrayAccess_lfno_primary\n keyChars[i] "]
166554[label="expressionName\n keyChars "]
166555[label="expressionName\n i "]
126556[label="literal\n 1 "]
96557[label="ifThenElseStatement\n if(b==check[p])b=base[p];elsereturnresult; "]
106558[label="equalityExpression\n b==check[p] "]
116559[label="expressionName\n b "]
116560[label="arrayAccess_lfno_primary\n check[p] "]
126561[label="expressionName\n check "]
126562[label="expressionName\n p "]
106563[label="expressionStatement\n b=base[p]; "]
116564[label="assignment\n b=base[p] "]
126565[label="expressionName\n b "]
126566[label="assignmentOperator\n = "]
126567[label="arrayAccess_lfno_primary\n base[p] "]
136568[label="expressionName\n base "]
136569[label="expressionName\n p "]
106570[label="returnStatement\n returnresult; "]
116571[label="expressionName\n result "]
66572[label="expressionStatement\n p=b; "]
76573[label="assignment\n p=b "]
86574[label="expressionName\n p "]
86575[label="assignmentOperator\n = "]
86576[label="expressionName\n b "]
66577[label="localVariableDeclarationStatement\n intn=base[p]; "]
76578[label="localVariableDeclaration\n intn=base[p] "]
86579[label="integralType\n int "]
86580[label="variableDeclarator\n n=base[p] "]
96581[label="variableDeclaratorId\n n "]
96582[label="arrayAccess_lfno_primary\n base[p] "]
106583[label="expressionName\n base "]
106584[label="expressionName\n p "]
66585[label="ifThenStatement\n if(b==check[p]&&n<0){result=-n-1;} "]
76586[label="conditionalAndExpression\n b==check[p]&&n<0 "]
86587[label="equalityExpression\n b==check[p] "]
96588[label="expressionName\n b "]
96589[label="arrayAccess_lfno_primary\n check[p] "]
106590[label="expressionName\n check "]
106591[label="expressionName\n p "]
86592[label="relationalExpression\n n<0 "]
96593[label="expressionName\n n "]
96594[label="literal\n 0 "]
76595[label="block\n {result=-n-1;} "]
86596[label="expressionStatement\n result=-n-1; "]
96597[label="assignment\n result=-n-1 "]
106598[label="expressionName\n result "]
106599[label="assignmentOperator\n = "]
106600[label="additiveExpression\n -n-1 "]
116601[label="unaryExpression\n -n "]
126602[label="expressionName\n n "]
116603[label="literal\n 1 "]
66604[label="returnStatement\n returnresult; "]
76605[label="expressionName\n result "]
36606[label="normalClassDeclaration\n privatestaticclassDebugArray{Map<String,String>nameValueMap=newLinkedHashMap<String,String>();publicvoidadd(Stringname,intvalue){StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);}@OverridepublicStringtoString(){Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;}publicvoidprintln(){System.out.print(this);}} "]
46607[label="classModifier\n private "]
46608[label="classModifier\n static "]
46609[label="classBody\n {Map<String,String>nameValueMap=newLinkedHashMap<String,String>();publicvoidadd(Stringname,intvalue){StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);}@OverridepublicStringtoString(){Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;}publicvoidprintln(){System.out.print(this);}} "]
56610[label="fieldDeclaration\n Map<String,String>nameValueMap=newLinkedHashMap<String,String>(); "]
66611[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
76612[label="typeArguments\n <String,String> "]
86613[label="typeArgumentList\n String,String "]
96614[label="classType_lfno_classOrInterfaceType\n String "]
96615[label="classType_lfno_classOrInterfaceType\n String "]
66616[label="variableDeclarator\n nameValueMap=newLinkedHashMap<String,String>() "]
76617[label="variableDeclaratorId\n nameValueMap "]
76618[label="classInstanceCreationExpression_lfno_primary\n newLinkedHashMap<String,String>() "]
86619[label="typeArguments\n <String,String> "]
96620[label="typeArgumentList\n String,String "]
106621[label="classType_lfno_classOrInterfaceType\n String "]
106622[label="classType_lfno_classOrInterfaceType\n String "]
56623[label="methodDeclaration\n publicvoidadd(Stringname,intvalue){StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);} "]
66624[label="methodModifier\n public "]
66625[label="methodHeader\n voidadd(Stringname,intvalue) "]
76626[label="result\n void "]
76627[label="methodDeclarator\n add(Stringname,intvalue) "]
86628[label="formalParameterList\n Stringname,intvalue "]
96629[label="formalParameter\n Stringname "]
106630[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
106631[label="variableDeclaratorId\n name "]
96632[label="formalParameter\n intvalue "]
106633[label="integralType\n int "]
106634[label="variableDeclaratorId\n value "]
66635[label="block\n {StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap);} "]
76636[label="blockStatements\n StringvalueInMap=nameValueMap.get(name);if(valueInMap==null){valueInMap=\"\";}valueInMap+=\" \"+String.format(\"%5d\",value);nameValueMap.put(name,valueInMap); "]
86637[label="localVariableDeclarationStatement\n StringvalueInMap=nameValueMap.get(name); "]
96638[label="localVariableDeclaration\n StringvalueInMap=nameValueMap.get(name) "]
106639[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
106640[label="variableDeclarator\n valueInMap=nameValueMap.get(name) "]
116641[label="variableDeclaratorId\n valueInMap "]
116642[label="methodInvocation_lfno_primary\n nameValueMap.get(name) "]
126643[label="typeName\n nameValueMap "]
126644[label="expressionName\n name "]
86645[label="ifThenStatement\n if(valueInMap==null){valueInMap=\"\";} "]
96646[label="equalityExpression\n valueInMap==null "]
106647[label="expressionName\n valueInMap "]
106648[label="literal\n null "]
96649[label="block\n {valueInMap=\"\";} "]
106650[label="expressionStatement\n valueInMap=\"\"; "]
116651[label="assignment\n valueInMap=\"\" "]
126652[label="expressionName\n valueInMap "]
126653[label="assignmentOperator\n = "]
126654[label="literal\n \"\" "]
86655[label="expressionStatement\n valueInMap+=\" \"+String.format(\"%5d\",value); "]
96656[label="assignment\n valueInMap+=\" \"+String.format(\"%5d\",value) "]
106657[label="expressionName\n valueInMap "]
106658[label="assignmentOperator\n += "]
106659[label="additiveExpression\n \" \"+String.format(\"%5d\",value) "]
116660[label="literal\n \" \" "]
116661[label="methodInvocation_lfno_primary\n String.format(\"%5d\",value) "]
126662[label="typeName\n String "]
126663[label="argumentList\n \"%5d\",value "]
136664[label="literal\n \"%5d\" "]
136665[label="expressionName\n value "]
86666[label="expressionStatement\n nameValueMap.put(name,valueInMap); "]
96667[label="methodInvocation\n nameValueMap.put(name,valueInMap) "]
106668[label="typeName\n nameValueMap "]
106669[label="argumentList\n name,valueInMap "]
116670[label="expressionName\n name "]
116671[label="expressionName\n valueInMap "]
56672[label="methodDeclaration\n @OverridepublicStringtoString(){Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;} "]
66673[label="markerAnnotation\n @Override "]
76674[label="typeName\n Override "]
66675[label="methodModifier\n public "]
66676[label="methodHeader\n StringtoString() "]
76677[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
76678[label="methodDeclarator\n toString() "]
66679[label="block\n {Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext;} "]
76680[label="blockStatements\n Stringtext=\"\";for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';}returntext; "]
86681[label="localVariableDeclarationStatement\n Stringtext=\"\"; "]
96682[label="localVariableDeclaration\n Stringtext=\"\" "]
106683[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
106684[label="variableDeclarator\n text=\"\" "]
116685[label="variableDeclaratorId\n text "]
116686[label="literal\n \"\" "]
86687[label="enhancedForStatement\n for(Map.Entry<String,String>entry:nameValueMap.entrySet()){Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';} "]
96688[label="unannClassOrInterfaceType\n Map.Entry<String,String> "]
106689[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
106690[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String> "]
116691[label="typeArguments\n <String,String> "]
126692[label="typeArgumentList\n String,String "]
136693[label="classType_lfno_classOrInterfaceType\n String "]
136694[label="classType_lfno_classOrInterfaceType\n String "]
96695[label="variableDeclaratorId\n entry "]
96696[label="methodInvocation_lfno_primary\n nameValueMap.entrySet() "]
106697[label="typeName\n nameValueMap "]
96698[label="block\n {Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n';} "]
106699[label="blockStatements\n Stringname=entry.getKey();Stringvalue=entry.getValue();text+=String.format(\"%-5s\",name)+\"= \"+value+'\n'; "]
116700[label="localVariableDeclarationStatement\n Stringname=entry.getKey(); "]
126701[label="localVariableDeclaration\n Stringname=entry.getKey() "]
136702[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
136703[label="variableDeclarator\n name=entry.getKey() "]
146704[label="variableDeclaratorId\n name "]
146705[label="methodInvocation_lfno_primary\n entry.getKey() "]
156706[label="typeName\n entry "]
116707[label="localVariableDeclarationStatement\n Stringvalue=entry.getValue(); "]
126708[label="localVariableDeclaration\n Stringvalue=entry.getValue() "]
136709[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
136710[label="variableDeclarator\n value=entry.getValue() "]
146711[label="variableDeclaratorId\n value "]
146712[label="methodInvocation_lfno_primary\n entry.getValue() "]
156713[label="typeName\n entry "]
116714[label="expressionStatement\n text+=String.format(\"%-5s\",name)+\"= \"+value+'\n'; "]
126715[label="assignment\n text+=String.format(\"%-5s\",name)+\"= \"+value+'\n' "]
136716[label="expressionName\n text "]
136717[label="assignmentOperator\n += "]
136718[label="additiveExpression\n String.format(\"%-5s\",name)+\"= \"+value+'\n' "]
146719[label="additiveExpression\n String.format(\"%-5s\",name)+\"= \"+value "]
156720[label="additiveExpression\n String.format(\"%-5s\",name)+\"= \" "]
166721[label="methodInvocation_lfno_primary\n String.format(\"%-5s\",name) "]
176722[label="typeName\n String "]
176723[label="argumentList\n \"%-5s\",name "]
186724[label="literal\n \"%-5s\" "]
186725[label="expressionName\n name "]
166726[label="literal\n \"= \" "]
156727[label="expressionName\n value "]
146728[label="literal\n '\n' "]
86729[label="returnStatement\n returntext; "]
96730[label="expressionName\n text "]
56731[label="methodDeclaration\n publicvoidprintln(){System.out.print(this);} "]
66732[label="methodModifier\n public "]
66733[label="methodHeader\n voidprintln() "]
76734[label="result\n void "]
76735[label="methodDeclarator\n println() "]
66736[label="block\n {System.out.print(this);} "]
76737[label="expressionStatement\n System.out.print(this); "]
86738[label="methodInvocation\n System.out.print(this) "]
96739[label="typeName\n System.out "]
106740[label="packageOrTypeName\n System "]
96741[label="primaryNoNewArray_lfno_primary\n this "]
36742[label="methodDeclaration\n publicintsize(){returnv==null?0:v.length;} "]
46743[label="methodModifier\n public "]
46744[label="methodHeader\n intsize() "]
56745[label="integralType\n int "]
56746[label="methodDeclarator\n size() "]
46747[label="block\n {returnv==null?0:v.length;} "]
56748[label="returnStatement\n returnv==null?0:v.length; "]
66749[label="conditionalExpression\n v==null?0:v.length "]
76750[label="equalityExpression\n v==null "]
86751[label="expressionName\n v "]
86752[label="literal\n null "]
76753[label="literal\n 0 "]
76754[label="expressionName\n v.length "]
86755[label="ambiguousName\n v "]
36756[label="normalClassDeclaration\n privateclassBuilder{privateStaterootState=newState();privatebooleanused[];privateintallocSize;privateintprogress;privateintnextCheckPos;privateintkeySize;@SuppressWarnings(\"unchecked\")publicvoidbuild(TreeMap<String,V>map){v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();}privatevoidaddKeyword(Stringkeyword,intindex){StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();}privatevoidaddAllKeyword(Collection<String>keywordSet){inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}}privatevoidconstructFailureStates(){fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}}privatevoidconstructOutput(StatetargetState){Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;}privatevoidbuildDoubleArrayTrie(Set<String>keySet){progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);}privateintresize(intnewSize){int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;}privateintinsert(List<Map.Entry<Integer,State>>siblings){intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;}privatevoidloseWeight(){intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;}} "]
46757[label="classModifier\n private "]
46758[label="classBody\n {privateStaterootState=newState();privatebooleanused[];privateintallocSize;privateintprogress;privateintnextCheckPos;privateintkeySize;@SuppressWarnings(\"unchecked\")publicvoidbuild(TreeMap<String,V>map){v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();}privatevoidaddKeyword(Stringkeyword,intindex){StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();}privatevoidaddAllKeyword(Collection<String>keywordSet){inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}}privatevoidconstructFailureStates(){fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}}privatevoidconstructOutput(StatetargetState){Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;}privatevoidbuildDoubleArrayTrie(Set<String>keySet){progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);}privateintresize(intnewSize){int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;}privateintinsert(List<Map.Entry<Integer,State>>siblings){intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;}privatevoidloseWeight(){intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;}} "]
56759[label="fieldDeclaration\n privateStaterootState=newState(); "]
66760[label="fieldModifier\n private "]
66761[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
66762[label="variableDeclarator\n rootState=newState() "]
76763[label="variableDeclaratorId\n rootState "]
76764[label="classInstanceCreationExpression_lfno_primary\n newState() "]
56765[label="fieldDeclaration\n privatebooleanused[]; "]
66766[label="fieldModifier\n private "]
66767[label="unannPrimitiveType\n boolean "]
66768[label="variableDeclaratorId\n used[] "]
76769[label="dims\n [] "]
56770[label="fieldDeclaration\n privateintallocSize; "]
66771[label="fieldModifier\n private "]
66772[label="integralType\n int "]
66773[label="variableDeclaratorId\n allocSize "]
56774[label="fieldDeclaration\n privateintprogress; "]
66775[label="fieldModifier\n private "]
66776[label="integralType\n int "]
66777[label="variableDeclaratorId\n progress "]
56778[label="fieldDeclaration\n privateintnextCheckPos; "]
66779[label="fieldModifier\n private "]
66780[label="integralType\n int "]
66781[label="variableDeclaratorId\n nextCheckPos "]
56782[label="fieldDeclaration\n privateintkeySize; "]
66783[label="fieldModifier\n private "]
66784[label="integralType\n int "]
66785[label="variableDeclaratorId\n keySize "]
56786[label="methodDeclaration\n @SuppressWarnings(\"unchecked\")publicvoidbuild(TreeMap<String,V>map){v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();} "]
66787[label="singleElementAnnotation\n @SuppressWarnings(\"unchecked\") "]
76788[label="typeName\n SuppressWarnings "]
76789[label="literal\n \"unchecked\" "]
66790[label="methodModifier\n public "]
66791[label="methodHeader\n voidbuild(TreeMap<String,V>map) "]
76792[label="result\n void "]
76793[label="methodDeclarator\n build(TreeMap<String,V>map) "]
86794[label="formalParameter\n TreeMap<String,V>map "]
96795[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,V> "]
106796[label="typeArguments\n <String,V> "]
116797[label="typeArgumentList\n String,V "]
126798[label="classType_lfno_classOrInterfaceType\n String "]
126799[label="classType_lfno_classOrInterfaceType\n V "]
96800[label="variableDeclaratorId\n map "]
66801[label="block\n {v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight();} "]
76802[label="blockStatements\n v=(V[])map.values().toArray();l=newint[v.length];Set<String>keySet=map.keySet();addAllKeyword(keySet);buildDoubleArrayTrie(keySet);used=null;constructFailureStates();rootState=null;loseWeight(); "]
86803[label="expressionStatement\n v=(V[])map.values().toArray(); "]
96804[label="assignment\n v=(V[])map.values().toArray() "]
106805[label="expressionName\n v "]
106806[label="assignmentOperator\n = "]
106807[label="castExpression\n (V[])map.values().toArray() "]
116808[label="arrayType\n V[] "]
126809[label="classType_lfno_classOrInterfaceType\n V "]
126810[label="dims\n [] "]
116811[label="primary\n map.values().toArray() "]
126812[label="methodInvocation_lfno_primary\n map.values() "]
136813[label="typeName\n map "]
126814[label="methodInvocation_lf_primary\n .toArray() "]
86815[label="expressionStatement\n l=newint[v.length]; "]
96816[label="assignment\n l=newint[v.length] "]
106817[label="expressionName\n l "]
106818[label="assignmentOperator\n = "]
106819[label="arrayCreationExpression\n newint[v.length] "]
116820[label="integralType\n int "]
116821[label="dimExpr\n [v.length] "]
126822[label="expressionName\n v.length "]
136823[label="ambiguousName\n v "]
86824[label="localVariableDeclarationStatement\n Set<String>keySet=map.keySet(); "]
96825[label="localVariableDeclaration\n Set<String>keySet=map.keySet() "]
106826[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
116827[label="typeArguments\n <String> "]
126828[label="classType_lfno_classOrInterfaceType\n String "]
106829[label="variableDeclarator\n keySet=map.keySet() "]
116830[label="variableDeclaratorId\n keySet "]
116831[label="methodInvocation_lfno_primary\n map.keySet() "]
126832[label="typeName\n map "]
86833[label="expressionStatement\n addAllKeyword(keySet); "]
96834[label="methodInvocation\n addAllKeyword(keySet) "]
106835[label="methodName\n addAllKeyword "]
106836[label="expressionName\n keySet "]
86837[label="expressionStatement\n buildDoubleArrayTrie(keySet); "]
96838[label="methodInvocation\n buildDoubleArrayTrie(keySet) "]
106839[label="methodName\n buildDoubleArrayTrie "]
106840[label="expressionName\n keySet "]
86841[label="expressionStatement\n used=null; "]
96842[label="assignment\n used=null "]
106843[label="expressionName\n used "]
106844[label="assignmentOperator\n = "]
106845[label="literal\n null "]
86846[label="expressionStatement\n constructFailureStates(); "]
96847[label="methodInvocation\n constructFailureStates() "]
106848[label="methodName\n constructFailureStates "]
86849[label="expressionStatement\n rootState=null; "]
96850[label="assignment\n rootState=null "]
106851[label="expressionName\n rootState "]
106852[label="assignmentOperator\n = "]
106853[label="literal\n null "]
86854[label="expressionStatement\n loseWeight(); "]
96855[label="methodInvocation\n loseWeight() "]
106856[label="methodName\n loseWeight "]
56857[label="methodDeclaration\n privatevoidaddKeyword(Stringkeyword,intindex){StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();} "]
66858[label="methodModifier\n private "]
66859[label="methodHeader\n voidaddKeyword(Stringkeyword,intindex) "]
76860[label="result\n void "]
76861[label="methodDeclarator\n addKeyword(Stringkeyword,intindex) "]
86862[label="formalParameterList\n Stringkeyword,intindex "]
96863[label="formalParameter\n Stringkeyword "]
106864[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
106865[label="variableDeclaratorId\n keyword "]
96866[label="formalParameter\n intindex "]
106867[label="integralType\n int "]
106868[label="variableDeclaratorId\n index "]
66869[label="block\n {StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length();} "]
76870[label="blockStatements\n StatecurrentState=this.rootState;for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);}currentState.addEmit(index);l[index]=keyword.length(); "]
86871[label="localVariableDeclarationStatement\n StatecurrentState=this.rootState; "]
96872[label="localVariableDeclaration\n StatecurrentState=this.rootState "]
106873[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
106874[label="variableDeclarator\n currentState=this.rootState "]
116875[label="variableDeclaratorId\n currentState "]
116876[label="primary\n this.rootState "]
126877[label="primaryNoNewArray_lfno_primary\n this "]
126878[label="fieldAccess_lf_primary\n .rootState "]
86879[label="enhancedForStatement\n for(Charactercharacter:keyword.toCharArray()){currentState=currentState.addState(character);} "]
96880[label="unannClassType_lfno_unannClassOrInterfaceType\n Character "]
96881[label="variableDeclaratorId\n character "]
96882[label="methodInvocation_lfno_primary\n keyword.toCharArray() "]
106883[label="typeName\n keyword "]
96884[label="block\n {currentState=currentState.addState(character);} "]
106885[label="expressionStatement\n currentState=currentState.addState(character); "]
116886[label="assignment\n currentState=currentState.addState(character) "]
126887[label="expressionName\n currentState "]
126888[label="assignmentOperator\n = "]
126889[label="methodInvocation_lfno_primary\n currentState.addState(character) "]
136890[label="typeName\n currentState "]
136891[label="expressionName\n character "]
86892[label="expressionStatement\n currentState.addEmit(index); "]
96893[label="methodInvocation\n currentState.addEmit(index) "]
106894[label="typeName\n currentState "]
106895[label="expressionName\n index "]
86896[label="expressionStatement\n l[index]=keyword.length(); "]
96897[label="assignment\n l[index]=keyword.length() "]
106898[label="arrayAccess\n l[index] "]
116899[label="expressionName\n l "]
116900[label="expressionName\n index "]
106901[label="assignmentOperator\n = "]
106902[label="methodInvocation_lfno_primary\n keyword.length() "]
116903[label="typeName\n keyword "]
56904[label="methodDeclaration\n privatevoidaddAllKeyword(Collection<String>keywordSet){inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}} "]
66905[label="methodModifier\n private "]
66906[label="methodHeader\n voidaddAllKeyword(Collection<String>keywordSet) "]
76907[label="result\n void "]
76908[label="methodDeclarator\n addAllKeyword(Collection<String>keywordSet) "]
86909[label="formalParameter\n Collection<String>keywordSet "]
96910[label="unannClassType_lfno_unannClassOrInterfaceType\n Collection<String> "]
106911[label="typeArguments\n <String> "]
116912[label="classType_lfno_classOrInterfaceType\n String "]
96913[label="variableDeclaratorId\n keywordSet "]
66914[label="block\n {inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);}} "]
76915[label="blockStatements\n inti=0;for(Stringkeyword:keywordSet){addKeyword(keyword,i++);} "]
86916[label="localVariableDeclarationStatement\n inti=0; "]
96917[label="localVariableDeclaration\n inti=0 "]
106918[label="integralType\n int "]
106919[label="variableDeclarator\n i=0 "]
116920[label="variableDeclaratorId\n i "]
116921[label="literal\n 0 "]
86922[label="enhancedForStatement\n for(Stringkeyword:keywordSet){addKeyword(keyword,i++);} "]
96923[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
96924[label="variableDeclaratorId\n keyword "]
96925[label="expressionName\n keywordSet "]
96926[label="block\n {addKeyword(keyword,i++);} "]
106927[label="expressionStatement\n addKeyword(keyword,i++); "]
116928[label="methodInvocation\n addKeyword(keyword,i++) "]
126929[label="methodName\n addKeyword "]
126930[label="argumentList\n keyword,i++ "]
136931[label="expressionName\n keyword "]
136932[label="postfixExpression\n i++ "]
146933[label="expressionName\n i "]
146934[label="postIncrementExpression_lf_postfixExpression\n ++ "]
56935[label="methodDeclaration\n privatevoidconstructFailureStates(){fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}} "]
66936[label="methodModifier\n private "]
66937[label="methodHeader\n voidconstructFailureStates() "]
76938[label="result\n void "]
76939[label="methodDeclarator\n constructFailureStates() "]
66940[label="block\n {fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}}} "]
76941[label="blockStatements\n fail=newint[size+1];fail[1]=base[0];output=newint[size+1][];Queue<State>queue=newLinkedBlockingDeque<State>();for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);}while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}} "]
86942[label="expressionStatement\n fail=newint[size+1]; "]
96943[label="assignment\n fail=newint[size+1] "]
106944[label="expressionName\n fail "]
106945[label="assignmentOperator\n = "]
106946[label="arrayCreationExpression\n newint[size+1] "]
116947[label="integralType\n int "]
116948[label="dimExpr\n [size+1] "]
126949[label="additiveExpression\n size+1 "]
136950[label="expressionName\n size "]
136951[label="literal\n 1 "]
86952[label="expressionStatement\n fail[1]=base[0]; "]
96953[label="assignment\n fail[1]=base[0] "]
106954[label="arrayAccess\n fail[1] "]
116955[label="expressionName\n fail "]
116956[label="literal\n 1 "]
106957[label="assignmentOperator\n = "]
106958[label="arrayAccess_lfno_primary\n base[0] "]
116959[label="expressionName\n base "]
116960[label="literal\n 0 "]
86961[label="expressionStatement\n output=newint[size+1][]; "]
96962[label="assignment\n output=newint[size+1][] "]
106963[label="expressionName\n output "]
106964[label="assignmentOperator\n = "]
106965[label="arrayCreationExpression\n newint[size+1][] "]
116966[label="integralType\n int "]
116967[label="dimExpr\n [size+1] "]
126968[label="additiveExpression\n size+1 "]
136969[label="expressionName\n size "]
136970[label="literal\n 1 "]
116971[label="dims\n [] "]
86972[label="localVariableDeclarationStatement\n Queue<State>queue=newLinkedBlockingDeque<State>(); "]
96973[label="localVariableDeclaration\n Queue<State>queue=newLinkedBlockingDeque<State>() "]
106974[label="unannClassType_lfno_unannClassOrInterfaceType\n Queue<State> "]
116975[label="typeArguments\n <State> "]
126976[label="classType_lfno_classOrInterfaceType\n State "]
106977[label="variableDeclarator\n queue=newLinkedBlockingDeque<State>() "]
116978[label="variableDeclaratorId\n queue "]
116979[label="classInstanceCreationExpression_lfno_primary\n newLinkedBlockingDeque<State>() "]
126980[label="typeArguments\n <State> "]
136981[label="classType_lfno_classOrInterfaceType\n State "]
86982[label="enhancedForStatement\n for(StatedepthOneState:this.rootState.getStates()){depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);} "]
96983[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
96984[label="variableDeclaratorId\n depthOneState "]
96985[label="primary\n this.rootState.getStates() "]
106986[label="primaryNoNewArray_lfno_primary\n this "]
106987[label="fieldAccess_lf_primary\n .rootState "]
106988[label="methodInvocation_lf_primary\n .getStates() "]
96989[label="block\n {depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState);} "]
106990[label="blockStatements\n depthOneState.setFailure(this.rootState,fail);queue.add(depthOneState);constructOutput(depthOneState); "]
116991[label="expressionStatement\n depthOneState.setFailure(this.rootState,fail); "]
126992[label="methodInvocation\n depthOneState.setFailure(this.rootState,fail) "]
136993[label="typeName\n depthOneState "]
136994[label="argumentList\n this.rootState,fail "]
146995[label="primary\n this.rootState "]
156996[label="primaryNoNewArray_lfno_primary\n this "]
156997[label="fieldAccess_lf_primary\n .rootState "]
146998[label="expressionName\n fail "]
116999[label="expressionStatement\n queue.add(depthOneState); "]
127000[label="methodInvocation\n queue.add(depthOneState) "]
137001[label="typeName\n queue "]
137002[label="expressionName\n depthOneState "]
117003[label="expressionStatement\n constructOutput(depthOneState); "]
127004[label="methodInvocation\n constructOutput(depthOneState) "]
137005[label="methodName\n constructOutput "]
137006[label="expressionName\n depthOneState "]
87007[label="whileStatement\n while(!queue.isEmpty()){StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}} "]
97008[label="unaryExpressionNotPlusMinus\n !queue.isEmpty() "]
107009[label="methodInvocation_lfno_primary\n queue.isEmpty() "]
117010[label="typeName\n queue "]
97011[label="block\n {StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);}} "]
107012[label="blockStatements\n StatecurrentState=queue.remove();for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);} "]
117013[label="localVariableDeclarationStatement\n StatecurrentState=queue.remove(); "]
127014[label="localVariableDeclaration\n StatecurrentState=queue.remove() "]
137015[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
137016[label="variableDeclarator\n currentState=queue.remove() "]
147017[label="variableDeclaratorId\n currentState "]
147018[label="methodInvocation_lfno_primary\n queue.remove() "]
157019[label="typeName\n queue "]
117020[label="enhancedForStatement\n for(Charactertransition:currentState.getTransitions()){StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);} "]
127021[label="unannClassType_lfno_unannClassOrInterfaceType\n Character "]
127022[label="variableDeclaratorId\n transition "]
127023[label="methodInvocation_lfno_primary\n currentState.getTransitions() "]
137024[label="typeName\n currentState "]
127025[label="block\n {StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState);} "]
137026[label="blockStatements\n StatetargetState=currentState.nextState(transition);queue.add(targetState);StatetraceFailureState=currentState.failure();while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();}StatenewFailureState=traceFailureState.nextState(transition);targetState.setFailure(newFailureState,fail);targetState.addEmit(newFailureState.emit());constructOutput(targetState); "]
147027[label="localVariableDeclarationStatement\n StatetargetState=currentState.nextState(transition); "]
157028[label="localVariableDeclaration\n StatetargetState=currentState.nextState(transition) "]
167029[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
167030[label="variableDeclarator\n targetState=currentState.nextState(transition) "]
177031[label="variableDeclaratorId\n targetState "]
177032[label="methodInvocation_lfno_primary\n currentState.nextState(transition) "]
187033[label="typeName\n currentState "]
187034[label="expressionName\n transition "]
147035[label="expressionStatement\n queue.add(targetState); "]
157036[label="methodInvocation\n queue.add(targetState) "]
167037[label="typeName\n queue "]
167038[label="expressionName\n targetState "]
147039[label="localVariableDeclarationStatement\n StatetraceFailureState=currentState.failure(); "]
157040[label="localVariableDeclaration\n StatetraceFailureState=currentState.failure() "]
167041[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
167042[label="variableDeclarator\n traceFailureState=currentState.failure() "]
177043[label="variableDeclaratorId\n traceFailureState "]
177044[label="methodInvocation_lfno_primary\n currentState.failure() "]
187045[label="typeName\n currentState "]
147046[label="whileStatement\n while(traceFailureState.nextState(transition)==null){traceFailureState=traceFailureState.failure();} "]
157047[label="equalityExpression\n traceFailureState.nextState(transition)==null "]
167048[label="methodInvocation_lfno_primary\n traceFailureState.nextState(transition) "]
177049[label="typeName\n traceFailureState "]
177050[label="expressionName\n transition "]
167051[label="literal\n null "]
157052[label="block\n {traceFailureState=traceFailureState.failure();} "]
167053[label="expressionStatement\n traceFailureState=traceFailureState.failure(); "]
177054[label="assignment\n traceFailureState=traceFailureState.failure() "]
187055[label="expressionName\n traceFailureState "]
187056[label="assignmentOperator\n = "]
187057[label="methodInvocation_lfno_primary\n traceFailureState.failure() "]
197058[label="typeName\n traceFailureState "]
147059[label="localVariableDeclarationStatement\n StatenewFailureState=traceFailureState.nextState(transition); "]
157060[label="localVariableDeclaration\n StatenewFailureState=traceFailureState.nextState(transition) "]
167061[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
167062[label="variableDeclarator\n newFailureState=traceFailureState.nextState(transition) "]
177063[label="variableDeclaratorId\n newFailureState "]
177064[label="methodInvocation_lfno_primary\n traceFailureState.nextState(transition) "]
187065[label="typeName\n traceFailureState "]
187066[label="expressionName\n transition "]
147067[label="expressionStatement\n targetState.setFailure(newFailureState,fail); "]
157068[label="methodInvocation\n targetState.setFailure(newFailureState,fail) "]
167069[label="typeName\n targetState "]
167070[label="argumentList\n newFailureState,fail "]
177071[label="expressionName\n newFailureState "]
177072[label="expressionName\n fail "]
147073[label="expressionStatement\n targetState.addEmit(newFailureState.emit()); "]
157074[label="methodInvocation\n targetState.addEmit(newFailureState.emit()) "]
167075[label="typeName\n targetState "]
167076[label="methodInvocation_lfno_primary\n newFailureState.emit() "]
177077[label="typeName\n newFailureState "]
147078[label="expressionStatement\n constructOutput(targetState); "]
157079[label="methodInvocation\n constructOutput(targetState) "]
167080[label="methodName\n constructOutput "]
167081[label="expressionName\n targetState "]
57082[label="methodDeclaration\n privatevoidconstructOutput(StatetargetState){Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;} "]
67083[label="methodModifier\n private "]
67084[label="methodHeader\n voidconstructOutput(StatetargetState) "]
77085[label="result\n void "]
77086[label="methodDeclarator\n constructOutput(StatetargetState) "]
87087[label="formalParameter\n StatetargetState "]
97088[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
97089[label="variableDeclaratorId\n targetState "]
67090[label="block\n {Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output;} "]
77091[label="blockStatements\n Collection<Integer>emit=targetState.emit();if(emit==null||emit.size()==0)return;intoutput[]=newint[emit.size()];Iterator<Integer>it=emit.iterator();for(inti=0;i<output.length;++i){output[i]=it.next();}AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output; "]
87092[label="localVariableDeclarationStatement\n Collection<Integer>emit=targetState.emit(); "]
97093[label="localVariableDeclaration\n Collection<Integer>emit=targetState.emit() "]
107094[label="unannClassType_lfno_unannClassOrInterfaceType\n Collection<Integer> "]
117095[label="typeArguments\n <Integer> "]
127096[label="classType_lfno_classOrInterfaceType\n Integer "]
107097[label="variableDeclarator\n emit=targetState.emit() "]
117098[label="variableDeclaratorId\n emit "]
117099[label="methodInvocation_lfno_primary\n targetState.emit() "]
127100[label="typeName\n targetState "]
87101[label="ifThenStatement\n if(emit==null||emit.size()==0)return; "]
97102[label="conditionalOrExpression\n emit==null||emit.size()==0 "]
107103[label="equalityExpression\n emit==null "]
117104[label="expressionName\n emit "]
117105[label="literal\n null "]
107106[label="equalityExpression\n emit.size()==0 "]
117107[label="methodInvocation_lfno_primary\n emit.size() "]
127108[label="typeName\n emit "]
117109[label="literal\n 0 "]
97110[label="returnStatement\n return; "]
87111[label="localVariableDeclarationStatement\n intoutput[]=newint[emit.size()]; "]
97112[label="localVariableDeclaration\n intoutput[]=newint[emit.size()] "]
107113[label="integralType\n int "]
107114[label="variableDeclarator\n output[]=newint[emit.size()] "]
117115[label="variableDeclaratorId\n output[] "]
127116[label="dims\n [] "]
117117[label="arrayCreationExpression\n newint[emit.size()] "]
127118[label="integralType\n int "]
127119[label="dimExpr\n [emit.size()] "]
137120[label="methodInvocation_lfno_primary\n emit.size() "]
147121[label="typeName\n emit "]
87122[label="localVariableDeclarationStatement\n Iterator<Integer>it=emit.iterator(); "]
97123[label="localVariableDeclaration\n Iterator<Integer>it=emit.iterator() "]
107124[label="unannClassType_lfno_unannClassOrInterfaceType\n Iterator<Integer> "]
117125[label="typeArguments\n <Integer> "]
127126[label="classType_lfno_classOrInterfaceType\n Integer "]
107127[label="variableDeclarator\n it=emit.iterator() "]
117128[label="variableDeclaratorId\n it "]
117129[label="methodInvocation_lfno_primary\n emit.iterator() "]
127130[label="typeName\n emit "]
87131[label="basicForStatement\n for(inti=0;i<output.length;++i){output[i]=it.next();} "]
97132[label="localVariableDeclaration\n inti=0 "]
107133[label="integralType\n int "]
107134[label="variableDeclarator\n i=0 "]
117135[label="variableDeclaratorId\n i "]
117136[label="literal\n 0 "]
97137[label="relationalExpression\n i<output.length "]
107138[label="expressionName\n i "]
107139[label="expressionName\n output.length "]
117140[label="ambiguousName\n output "]
97141[label="preIncrementExpression\n ++i "]
107142[label="expressionName\n i "]
97143[label="block\n {output[i]=it.next();} "]
107144[label="expressionStatement\n output[i]=it.next(); "]
117145[label="assignment\n output[i]=it.next() "]
127146[label="arrayAccess\n output[i] "]
137147[label="expressionName\n output "]
137148[label="expressionName\n i "]
127149[label="assignmentOperator\n = "]
127150[label="methodInvocation_lfno_primary\n it.next() "]
137151[label="typeName\n it "]
87152[label="expressionStatement\n AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output; "]
97153[label="assignment\n AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()]=output "]
107154[label="arrayAccess\n AhoCorasickDoubleArrayTrie.this.output[targetState.getIndex()] "]
117155[label="fieldAccess\n AhoCorasickDoubleArrayTrie.this.output "]
127156[label="primaryNoNewArray_lfno_primary\n AhoCorasickDoubleArrayTrie.this "]
137157[label="typeName\n AhoCorasickDoubleArrayTrie "]
117158[label="methodInvocation_lfno_primary\n targetState.getIndex() "]
127159[label="typeName\n targetState "]
107160[label="assignmentOperator\n = "]
107161[label="expressionName\n output "]
57162[label="methodDeclaration\n privatevoidbuildDoubleArrayTrie(Set<String>keySet){progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);} "]
67163[label="methodModifier\n private "]
67164[label="methodHeader\n voidbuildDoubleArrayTrie(Set<String>keySet) "]
77165[label="result\n void "]
77166[label="methodDeclarator\n buildDoubleArrayTrie(Set<String>keySet) "]
87167[label="formalParameter\n Set<String>keySet "]
97168[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
107169[label="typeArguments\n <String> "]
117170[label="classType_lfno_classOrInterfaceType\n String "]
97171[label="variableDeclaratorId\n keySet "]
67172[label="block\n {progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings);} "]
77173[label="blockStatements\n progress=0;keySize=keySet.size();resize(65536*32);base[0]=1;nextCheckPos=0;Stateroot_node=this.rootState;List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size());fetch(root_node,siblings);insert(siblings); "]
87174[label="expressionStatement\n progress=0; "]
97175[label="assignment\n progress=0 "]
107176[label="expressionName\n progress "]
107177[label="assignmentOperator\n = "]
107178[label="literal\n 0 "]
87179[label="expressionStatement\n keySize=keySet.size(); "]
97180[label="assignment\n keySize=keySet.size() "]
107181[label="expressionName\n keySize "]
107182[label="assignmentOperator\n = "]
107183[label="methodInvocation_lfno_primary\n keySet.size() "]
117184[label="typeName\n keySet "]
87185[label="expressionStatement\n resize(65536*32); "]
97186[label="methodInvocation\n resize(65536*32) "]
107187[label="methodName\n resize "]
107188[label="multiplicativeExpression\n 65536*32 "]
117189[label="literal\n 65536 "]
117190[label="literal\n 32 "]
87191[label="expressionStatement\n base[0]=1; "]
97192[label="assignment\n base[0]=1 "]
107193[label="arrayAccess\n base[0] "]
117194[label="expressionName\n base "]
117195[label="literal\n 0 "]
107196[label="assignmentOperator\n = "]
107197[label="literal\n 1 "]
87198[label="expressionStatement\n nextCheckPos=0; "]
97199[label="assignment\n nextCheckPos=0 "]
107200[label="expressionName\n nextCheckPos "]
107201[label="assignmentOperator\n = "]
107202[label="literal\n 0 "]
87203[label="localVariableDeclarationStatement\n Stateroot_node=this.rootState; "]
97204[label="localVariableDeclaration\n Stateroot_node=this.rootState "]
107205[label="unannClassType_lfno_unannClassOrInterfaceType\n State "]
107206[label="variableDeclarator\n root_node=this.rootState "]
117207[label="variableDeclaratorId\n root_node "]
117208[label="primary\n this.rootState "]
127209[label="primaryNoNewArray_lfno_primary\n this "]
127210[label="fieldAccess_lf_primary\n .rootState "]
87211[label="localVariableDeclarationStatement\n List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size()); "]
97212[label="localVariableDeclaration\n List<Map.Entry<Integer,State>>siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size()) "]
107213[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<Integer,State>> "]
117214[label="typeArguments\n <Map.Entry<Integer,State>> "]
127215[label="classOrInterfaceType\n Map.Entry<Integer,State> "]
137216[label="classType_lfno_classOrInterfaceType\n Map "]
137217[label="classType_lf_classOrInterfaceType\n .Entry<Integer,State> "]
147218[label="typeArguments\n <Integer,State> "]
157219[label="typeArgumentList\n Integer,State "]
167220[label="classType_lfno_classOrInterfaceType\n Integer "]
167221[label="classType_lfno_classOrInterfaceType\n State "]
107222[label="variableDeclarator\n siblings=newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size()) "]
117223[label="variableDeclaratorId\n siblings "]
117224[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Map.Entry<Integer,State>>(root_node.getSuccess().entrySet().size()) "]
127225[label="typeArguments\n <Map.Entry<Integer,State>> "]
137226[label="classOrInterfaceType\n Map.Entry<Integer,State> "]
147227[label="classType_lfno_classOrInterfaceType\n Map "]
147228[label="classType_lf_classOrInterfaceType\n .Entry<Integer,State> "]
157229[label="typeArguments\n <Integer,State> "]
167230[label="typeArgumentList\n Integer,State "]
177231[label="classType_lfno_classOrInterfaceType\n Integer "]
177232[label="classType_lfno_classOrInterfaceType\n State "]
127233[label="primary\n root_node.getSuccess().entrySet().size() "]
137234[label="methodInvocation_lfno_primary\n root_node.getSuccess() "]
147235[label="typeName\n root_node "]
137236[label="methodInvocation_lf_primary\n .entrySet() "]
137237[label="methodInvocation_lf_primary\n .size() "]
87238[label="expressionStatement\n fetch(root_node,siblings); "]
97239[label="methodInvocation\n fetch(root_node,siblings) "]
107240[label="methodName\n fetch "]
107241[label="argumentList\n root_node,siblings "]
117242[label="expressionName\n root_node "]
117243[label="expressionName\n siblings "]
87244[label="expressionStatement\n insert(siblings); "]
97245[label="methodInvocation\n insert(siblings) "]
107246[label="methodName\n insert "]
107247[label="expressionName\n siblings "]
57248[label="methodDeclaration\n privateintresize(intnewSize){int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;} "]
67249[label="methodModifier\n private "]
67250[label="methodHeader\n intresize(intnewSize) "]
77251[label="integralType\n int "]
77252[label="methodDeclarator\n resize(intnewSize) "]
87253[label="formalParameter\n intnewSize "]
97254[label="integralType\n int "]
97255[label="variableDeclaratorId\n newSize "]
67256[label="block\n {int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize;} "]
77257[label="blockStatements\n int[]base2=newint[newSize];int[]check2=newint[newSize];booleanused2[]=newboolean[newSize];if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);}base=base2;check=check2;used=used2;returnallocSize=newSize; "]
87258[label="localVariableDeclarationStatement\n int[]base2=newint[newSize]; "]
97259[label="localVariableDeclaration\n int[]base2=newint[newSize] "]
107260[label="unannArrayType\n int[] "]
117261[label="integralType\n int "]
117262[label="dims\n [] "]
107263[label="variableDeclarator\n base2=newint[newSize] "]
117264[label="variableDeclaratorId\n base2 "]
117265[label="arrayCreationExpression\n newint[newSize] "]
127266[label="integralType\n int "]
127267[label="dimExpr\n [newSize] "]
137268[label="expressionName\n newSize "]
87269[label="localVariableDeclarationStatement\n int[]check2=newint[newSize]; "]
97270[label="localVariableDeclaration\n int[]check2=newint[newSize] "]
107271[label="unannArrayType\n int[] "]
117272[label="integralType\n int "]
117273[label="dims\n [] "]
107274[label="variableDeclarator\n check2=newint[newSize] "]
117275[label="variableDeclaratorId\n check2 "]
117276[label="arrayCreationExpression\n newint[newSize] "]
127277[label="integralType\n int "]
127278[label="dimExpr\n [newSize] "]
137279[label="expressionName\n newSize "]
87280[label="localVariableDeclarationStatement\n booleanused2[]=newboolean[newSize]; "]
97281[label="localVariableDeclaration\n booleanused2[]=newboolean[newSize] "]
107282[label="unannPrimitiveType\n boolean "]
107283[label="variableDeclarator\n used2[]=newboolean[newSize] "]
117284[label="variableDeclaratorId\n used2[] "]
127285[label="dims\n [] "]
117286[label="arrayCreationExpression\n newboolean[newSize] "]
127287[label="primitiveType\n boolean "]
127288[label="dimExpr\n [newSize] "]
137289[label="expressionName\n newSize "]
87290[label="ifThenStatement\n if(allocSize>0){System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);} "]
97291[label="relationalExpression\n allocSize>0 "]
107292[label="expressionName\n allocSize "]
107293[label="literal\n 0 "]
97294[label="block\n {System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize);} "]
107295[label="blockStatements\n System.arraycopy(base,0,base2,0,allocSize);System.arraycopy(check,0,check2,0,allocSize);System.arraycopy(used,0,used2,0,allocSize); "]
117296[label="expressionStatement\n System.arraycopy(base,0,base2,0,allocSize); "]
127297[label="methodInvocation\n System.arraycopy(base,0,base2,0,allocSize) "]
137298[label="typeName\n System "]
137299[label="argumentList\n base,0,base2,0,allocSize "]
147300[label="expressionName\n base "]
147301[label="literal\n 0 "]
147302[label="expressionName\n base2 "]
147303[label="literal\n 0 "]
147304[label="expressionName\n allocSize "]
117305[label="expressionStatement\n System.arraycopy(check,0,check2,0,allocSize); "]
127306[label="methodInvocation\n System.arraycopy(check,0,check2,0,allocSize) "]
137307[label="typeName\n System "]
137308[label="argumentList\n check,0,check2,0,allocSize "]
147309[label="expressionName\n check "]
147310[label="literal\n 0 "]
147311[label="expressionName\n check2 "]
147312[label="literal\n 0 "]
147313[label="expressionName\n allocSize "]
117314[label="expressionStatement\n System.arraycopy(used,0,used2,0,allocSize); "]
127315[label="methodInvocation\n System.arraycopy(used,0,used2,0,allocSize) "]
137316[label="typeName\n System "]
137317[label="argumentList\n used,0,used2,0,allocSize "]
147318[label="expressionName\n used "]
147319[label="literal\n 0 "]
147320[label="expressionName\n used2 "]
147321[label="literal\n 0 "]
147322[label="expressionName\n allocSize "]
87323[label="expressionStatement\n base=base2; "]
97324[label="assignment\n base=base2 "]
107325[label="expressionName\n base "]
107326[label="assignmentOperator\n = "]
107327[label="expressionName\n base2 "]
87328[label="expressionStatement\n check=check2; "]
97329[label="assignment\n check=check2 "]
107330[label="expressionName\n check "]
107331[label="assignmentOperator\n = "]
107332[label="expressionName\n check2 "]
87333[label="expressionStatement\n used=used2; "]
97334[label="assignment\n used=used2 "]
107335[label="expressionName\n used "]
107336[label="assignmentOperator\n = "]
107337[label="expressionName\n used2 "]
87338[label="returnStatement\n returnallocSize=newSize; "]
97339[label="assignment\n allocSize=newSize "]
107340[label="expressionName\n allocSize "]
107341[label="assignmentOperator\n = "]
107342[label="expressionName\n newSize "]
57343[label="methodDeclaration\n privateintinsert(List<Map.Entry<Integer,State>>siblings){intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;} "]
67344[label="methodModifier\n private "]
67345[label="methodHeader\n intinsert(List<Map.Entry<Integer,State>>siblings) "]
77346[label="integralType\n int "]
77347[label="methodDeclarator\n insert(List<Map.Entry<Integer,State>>siblings) "]
87348[label="formalParameter\n List<Map.Entry<Integer,State>>siblings "]
97349[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<Integer,State>> "]
107350[label="typeArguments\n <Map.Entry<Integer,State>> "]
117351[label="classOrInterfaceType\n Map.Entry<Integer,State> "]
127352[label="classType_lfno_classOrInterfaceType\n Map "]
127353[label="classType_lf_classOrInterfaceType\n .Entry<Integer,State> "]
137354[label="typeArguments\n <Integer,State> "]
147355[label="typeArgumentList\n Integer,State "]
157356[label="classType_lfno_classOrInterfaceType\n Integer "]
157357[label="classType_lfno_classOrInterfaceType\n State "]
97358[label="variableDeclaratorId\n siblings "]
67359[label="block\n {intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin;} "]
77360[label="blockStatements\n intbegin=0;intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1;intnonzero_num=0;intfirst=0;if(allocSize<=pos)resize(pos+1);outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;}if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos;used[begin]=true;size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1;for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;}for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());}returnbegin; "]
87361[label="localVariableDeclarationStatement\n intbegin=0; "]
97362[label="localVariableDeclaration\n intbegin=0 "]
107363[label="integralType\n int "]
107364[label="variableDeclarator\n begin=0 "]
117365[label="variableDeclaratorId\n begin "]
117366[label="literal\n 0 "]
87367[label="localVariableDeclarationStatement\n intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1; "]
97368[label="localVariableDeclaration\n intpos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1 "]
107369[label="integralType\n int "]
107370[label="variableDeclarator\n pos=Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1 "]
117371[label="variableDeclaratorId\n pos "]
117372[label="additiveExpression\n Math.max(siblings.get(0).getKey()+1,nextCheckPos)-1 "]
127373[label="methodInvocation_lfno_primary\n Math.max(siblings.get(0).getKey()+1,nextCheckPos) "]
137374[label="typeName\n Math "]
137375[label="argumentList\n siblings.get(0).getKey()+1,nextCheckPos "]
147376[label="additiveExpression\n siblings.get(0).getKey()+1 "]
157377[label="primary\n siblings.get(0).getKey() "]
167378[label="methodInvocation_lfno_primary\n siblings.get(0) "]
177379[label="typeName\n siblings "]
177380[label="literal\n 0 "]
167381[label="methodInvocation_lf_primary\n .getKey() "]
157382[label="literal\n 1 "]
147383[label="expressionName\n nextCheckPos "]
127384[label="literal\n 1 "]
87385[label="localVariableDeclarationStatement\n intnonzero_num=0; "]
97386[label="localVariableDeclaration\n intnonzero_num=0 "]
107387[label="integralType\n int "]
107388[label="variableDeclarator\n nonzero_num=0 "]
117389[label="variableDeclaratorId\n nonzero_num "]
117390[label="literal\n 0 "]
87391[label="localVariableDeclarationStatement\n intfirst=0; "]
97392[label="localVariableDeclaration\n intfirst=0 "]
107393[label="integralType\n int "]
107394[label="variableDeclarator\n first=0 "]
117395[label="variableDeclaratorId\n first "]
117396[label="literal\n 0 "]
87397[label="ifThenStatement\n if(allocSize<=pos)resize(pos+1); "]
97398[label="relationalExpression\n allocSize<=pos "]
107399[label="expressionName\n allocSize "]
107400[label="expressionName\n pos "]
97401[label="expressionStatement\n resize(pos+1); "]
107402[label="methodInvocation\n resize(pos+1) "]
117403[label="methodName\n resize "]
117404[label="additiveExpression\n pos+1 "]
127405[label="expressionName\n pos "]
127406[label="literal\n 1 "]
87407[label="labeledStatement\n outer:while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;} "]
97408[label="whileStatement\n while(true){pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;} "]
107409[label="literal\n true "]
107410[label="block\n {pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break;} "]
117411[label="blockStatements\n pos++;if(allocSize<=pos)resize(pos+1);if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;}begin=pos-siblings.get(0).getKey();if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));}if(used[begin])continue;for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter;break; "]
127412[label="expressionStatement\n pos++; "]
137413[label="postIncrementExpression\n pos++ "]
147414[label="expressionName\n pos "]
127415[label="ifThenStatement\n if(allocSize<=pos)resize(pos+1); "]
137416[label="relationalExpression\n allocSize<=pos "]
147417[label="expressionName\n allocSize "]
147418[label="expressionName\n pos "]
137419[label="expressionStatement\n resize(pos+1); "]
147420[label="methodInvocation\n resize(pos+1) "]
157421[label="methodName\n resize "]
157422[label="additiveExpression\n pos+1 "]
167423[label="expressionName\n pos "]
167424[label="literal\n 1 "]
127425[label="ifThenElseStatement\n if(check[pos]!=0){nonzero_num++;continue;}elseif(first==0){nextCheckPos=pos;first=1;} "]
137426[label="equalityExpression\n check[pos]!=0 "]
147427[label="arrayAccess_lfno_primary\n check[pos] "]
157428[label="expressionName\n check "]
157429[label="expressionName\n pos "]
147430[label="literal\n 0 "]
137431[label="block\n {nonzero_num++;continue;} "]
147432[label="blockStatements\n nonzero_num++;continue; "]
157433[label="expressionStatement\n nonzero_num++; "]
167434[label="postIncrementExpression\n nonzero_num++ "]
177435[label="expressionName\n nonzero_num "]
157436[label="continueStatement\n continue; "]
137437[label="ifThenStatement\n if(first==0){nextCheckPos=pos;first=1;} "]
147438[label="equalityExpression\n first==0 "]
157439[label="expressionName\n first "]
157440[label="literal\n 0 "]
147441[label="block\n {nextCheckPos=pos;first=1;} "]
157442[label="blockStatements\n nextCheckPos=pos;first=1; "]
167443[label="expressionStatement\n nextCheckPos=pos; "]
177444[label="assignment\n nextCheckPos=pos "]
187445[label="expressionName\n nextCheckPos "]
187446[label="assignmentOperator\n = "]
187447[label="expressionName\n pos "]
167448[label="expressionStatement\n first=1; "]
177449[label="assignment\n first=1 "]
187450[label="expressionName\n first "]
187451[label="assignmentOperator\n = "]
187452[label="literal\n 1 "]
127453[label="expressionStatement\n begin=pos-siblings.get(0).getKey(); "]
137454[label="assignment\n begin=pos-siblings.get(0).getKey() "]
147455[label="expressionName\n begin "]
147456[label="assignmentOperator\n = "]
147457[label="additiveExpression\n pos-siblings.get(0).getKey() "]
157458[label="expressionName\n pos "]
157459[label="primary\n siblings.get(0).getKey() "]
167460[label="methodInvocation_lfno_primary\n siblings.get(0) "]
177461[label="typeName\n siblings "]
177462[label="literal\n 0 "]
167463[label="methodInvocation_lf_primary\n .getKey() "]
127464[label="ifThenStatement\n if(allocSize<=(begin+siblings.get(siblings.size()-1).getKey())){doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));} "]
137465[label="relationalExpression\n allocSize<=(begin+siblings.get(siblings.size()-1).getKey()) "]
147466[label="expressionName\n allocSize "]
147467[label="primaryNoNewArray_lfno_primary\n (begin+siblings.get(siblings.size()-1).getKey()) "]
157468[label="additiveExpression\n begin+siblings.get(siblings.size()-1).getKey() "]
167469[label="expressionName\n begin "]
167470[label="primary\n siblings.get(siblings.size()-1).getKey() "]
177471[label="methodInvocation_lfno_primary\n siblings.get(siblings.size()-1) "]
187472[label="typeName\n siblings "]
187473[label="additiveExpression\n siblings.size()-1 "]
197474[label="methodInvocation_lfno_primary\n siblings.size() "]
207475[label="typeName\n siblings "]
197476[label="literal\n 1 "]
177477[label="methodInvocation_lf_primary\n .getKey() "]
137478[label="block\n {doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l));} "]
147479[label="blockStatements\n doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1);resize((int)(allocSize*l)); "]
157480[label="localVariableDeclarationStatement\n doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1); "]
167481[label="localVariableDeclaration\n doublel=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1) "]
177482[label="floatingPointType\n double "]
177483[label="variableDeclarator\n l=(1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1) "]
187484[label="variableDeclaratorId\n l "]
187485[label="conditionalExpression\n (1.05>1.0*keySize/(progress+1))?1.05:1.0*keySize/(progress+1) "]
197486[label="primaryNoNewArray_lfno_primary\n (1.05>1.0*keySize/(progress+1)) "]
207487[label="relationalExpression\n 1.05>1.0*keySize/(progress+1) "]
217488[label="literal\n 1.05 "]
217489[label="multiplicativeExpression\n 1.0*keySize/(progress+1) "]
227490[label="multiplicativeExpression\n 1.0*keySize "]
237491[label="literal\n 1.0 "]
237492[label="expressionName\n keySize "]
227493[label="primaryNoNewArray_lfno_primary\n (progress+1) "]
237494[label="additiveExpression\n progress+1 "]
247495[label="expressionName\n progress "]
247496[label="literal\n 1 "]
197497[label="literal\n 1.05 "]
197498[label="multiplicativeExpression\n 1.0*keySize/(progress+1) "]
207499[label="multiplicativeExpression\n 1.0*keySize "]
217500[label="literal\n 1.0 "]
217501[label="expressionName\n keySize "]
207502[label="primaryNoNewArray_lfno_primary\n (progress+1) "]
217503[label="additiveExpression\n progress+1 "]
227504[label="expressionName\n progress "]
227505[label="literal\n 1 "]
157506[label="expressionStatement\n resize((int)(allocSize*l)); "]
167507[label="methodInvocation\n resize((int)(allocSize*l)) "]
177508[label="methodName\n resize "]
177509[label="castExpression\n (int)(allocSize*l) "]
187510[label="integralType\n int "]
187511[label="primaryNoNewArray_lfno_primary\n (allocSize*l) "]
197512[label="multiplicativeExpression\n allocSize*l "]
207513[label="expressionName\n allocSize "]
207514[label="expressionName\n l "]
127515[label="ifThenStatement\n if(used[begin])continue; "]
137516[label="arrayAccess_lfno_primary\n used[begin] "]
147517[label="expressionName\n used "]
147518[label="expressionName\n begin "]
137519[label="continueStatement\n continue; "]
127520[label="basicForStatement\n for(inti=1;i<siblings.size();i++)if(check[begin+siblings.get(i).getKey()]!=0)continueouter; "]
137521[label="localVariableDeclaration\n inti=1 "]
147522[label="integralType\n int "]
147523[label="variableDeclarator\n i=1 "]
157524[label="variableDeclaratorId\n i "]
157525[label="literal\n 1 "]
137526[label="relationalExpression\n i<siblings.size() "]
147527[label="expressionName\n i "]
147528[label="methodInvocation_lfno_primary\n siblings.size() "]
157529[label="typeName\n siblings "]
137530[label="postIncrementExpression\n i++ "]
147531[label="expressionName\n i "]
137532[label="ifThenStatement\n if(check[begin+siblings.get(i).getKey()]!=0)continueouter; "]
147533[label="equalityExpression\n check[begin+siblings.get(i).getKey()]!=0 "]
157534[label="arrayAccess_lfno_primary\n check[begin+siblings.get(i).getKey()] "]
167535[label="expressionName\n check "]
167536[label="additiveExpression\n begin+siblings.get(i).getKey() "]
177537[label="expressionName\n begin "]
177538[label="primary\n siblings.get(i).getKey() "]
187539[label="methodInvocation_lfno_primary\n siblings.get(i) "]
197540[label="typeName\n siblings "]
197541[label="expressionName\n i "]
187542[label="methodInvocation_lf_primary\n .getKey() "]
157543[label="literal\n 0 "]
147544[label="continueStatement\n continueouter; "]
127545[label="breakStatement\n break; "]
87546[label="ifThenStatement\n if(1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95)nextCheckPos=pos; "]
97547[label="relationalExpression\n 1.0*nonzero_num/(pos-nextCheckPos+1)>=0.95 "]
107548[label="multiplicativeExpression\n 1.0*nonzero_num/(pos-nextCheckPos+1) "]
117549[label="multiplicativeExpression\n 1.0*nonzero_num "]
127550[label="literal\n 1.0 "]
127551[label="expressionName\n nonzero_num "]
117552[label="primaryNoNewArray_lfno_primary\n (pos-nextCheckPos+1) "]
127553[label="additiveExpression\n pos-nextCheckPos+1 "]
137554[label="additiveExpression\n pos-nextCheckPos "]
147555[label="expressionName\n pos "]
147556[label="expressionName\n nextCheckPos "]
137557[label="literal\n 1 "]
107558[label="literal\n 0.95 "]
97559[label="expressionStatement\n nextCheckPos=pos; "]
107560[label="assignment\n nextCheckPos=pos "]
117561[label="expressionName\n nextCheckPos "]
117562[label="assignmentOperator\n = "]
117563[label="expressionName\n pos "]
87564[label="expressionStatement\n used[begin]=true; "]
97565[label="assignment\n used[begin]=true "]
107566[label="arrayAccess\n used[begin] "]
117567[label="expressionName\n used "]
117568[label="expressionName\n begin "]
107569[label="assignmentOperator\n = "]
107570[label="literal\n true "]
87571[label="expressionStatement\n size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1; "]
97572[label="assignment\n size=(size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1 "]
107573[label="expressionName\n size "]
107574[label="assignmentOperator\n = "]
107575[label="conditionalExpression\n (size>begin+siblings.get(siblings.size()-1).getKey()+1)?size:begin+siblings.get(siblings.size()-1).getKey()+1 "]
117576[label="primaryNoNewArray_lfno_primary\n (size>begin+siblings.get(siblings.size()-1).getKey()+1) "]
127577[label="relationalExpression\n size>begin+siblings.get(siblings.size()-1).getKey()+1 "]
137578[label="expressionName\n size "]
137579[label="additiveExpression\n begin+siblings.get(siblings.size()-1).getKey()+1 "]
147580[label="additiveExpression\n begin+siblings.get(siblings.size()-1).getKey() "]
157581[label="expressionName\n begin "]
157582[label="primary\n siblings.get(siblings.size()-1).getKey() "]
167583[label="methodInvocation_lfno_primary\n siblings.get(siblings.size()-1) "]
177584[label="typeName\n siblings "]
177585[label="additiveExpression\n siblings.size()-1 "]
187586[label="methodInvocation_lfno_primary\n siblings.size() "]
197587[label="typeName\n siblings "]
187588[label="literal\n 1 "]
167589[label="methodInvocation_lf_primary\n .getKey() "]
147590[label="literal\n 1 "]
117591[label="expressionName\n size "]
117592[label="additiveExpression\n begin+siblings.get(siblings.size()-1).getKey()+1 "]
127593[label="additiveExpression\n begin+siblings.get(siblings.size()-1).getKey() "]
137594[label="expressionName\n begin "]
137595[label="primary\n siblings.get(siblings.size()-1).getKey() "]
147596[label="methodInvocation_lfno_primary\n siblings.get(siblings.size()-1) "]
157597[label="typeName\n siblings "]
157598[label="additiveExpression\n siblings.size()-1 "]
167599[label="methodInvocation_lfno_primary\n siblings.size() "]
177600[label="typeName\n siblings "]
167601[label="literal\n 1 "]
147602[label="methodInvocation_lf_primary\n .getKey() "]
127603[label="literal\n 1 "]
87604[label="enhancedForStatement\n for(Map.Entry<Integer,State>sibling:siblings){check[begin+sibling.getKey()]=begin;} "]
97605[label="unannClassOrInterfaceType\n Map.Entry<Integer,State> "]
107606[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
107607[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<Integer,State> "]
117608[label="typeArguments\n <Integer,State> "]
127609[label="typeArgumentList\n Integer,State "]
137610[label="classType_lfno_classOrInterfaceType\n Integer "]
137611[label="classType_lfno_classOrInterfaceType\n State "]
97612[label="variableDeclaratorId\n sibling "]
97613[label="expressionName\n siblings "]
97614[label="block\n {check[begin+sibling.getKey()]=begin;} "]
107615[label="expressionStatement\n check[begin+sibling.getKey()]=begin; "]
117616[label="assignment\n check[begin+sibling.getKey()]=begin "]
127617[label="arrayAccess\n check[begin+sibling.getKey()] "]
137618[label="expressionName\n check "]
137619[label="additiveExpression\n begin+sibling.getKey() "]
147620[label="expressionName\n begin "]
147621[label="methodInvocation_lfno_primary\n sibling.getKey() "]
157622[label="typeName\n sibling "]
127623[label="assignmentOperator\n = "]
127624[label="expressionName\n begin "]
87625[label="enhancedForStatement\n for(Map.Entry<Integer,State>sibling:siblings){List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());} "]
97626[label="unannClassOrInterfaceType\n Map.Entry<Integer,State> "]
107627[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
107628[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<Integer,State> "]
117629[label="typeArguments\n <Integer,State> "]
127630[label="typeArgumentList\n Integer,State "]
137631[label="classType_lfno_classOrInterfaceType\n Integer "]
137632[label="classType_lfno_classOrInterfaceType\n State "]
97633[label="variableDeclaratorId\n sibling "]
97634[label="expressionName\n siblings "]
97635[label="block\n {List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey());} "]
107636[label="blockStatements\n List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1);if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;}sibling.getValue().setIndex(begin+sibling.getKey()); "]
117637[label="localVariableDeclarationStatement\n List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1); "]
127638[label="localVariableDeclaration\n List<Map.Entry<Integer,State>>new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1) "]
137639[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<Integer,State>> "]
147640[label="typeArguments\n <Map.Entry<Integer,State>> "]
157641[label="classOrInterfaceType\n Map.Entry<Integer,State> "]
167642[label="classType_lfno_classOrInterfaceType\n Map "]
167643[label="classType_lf_classOrInterfaceType\n .Entry<Integer,State> "]
177644[label="typeArguments\n <Integer,State> "]
187645[label="typeArgumentList\n Integer,State "]
197646[label="classType_lfno_classOrInterfaceType\n Integer "]
197647[label="classType_lfno_classOrInterfaceType\n State "]
137648[label="variableDeclarator\n new_siblings=newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1) "]
147649[label="variableDeclaratorId\n new_siblings "]
147650[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Map.Entry<Integer,State>>(sibling.getValue().getSuccess().entrySet().size()+1) "]
157651[label="typeArguments\n <Map.Entry<Integer,State>> "]
167652[label="classOrInterfaceType\n Map.Entry<Integer,State> "]
177653[label="classType_lfno_classOrInterfaceType\n Map "]
177654[label="classType_lf_classOrInterfaceType\n .Entry<Integer,State> "]
187655[label="typeArguments\n <Integer,State> "]
197656[label="typeArgumentList\n Integer,State "]
207657[label="classType_lfno_classOrInterfaceType\n Integer "]
207658[label="classType_lfno_classOrInterfaceType\n State "]
157659[label="additiveExpression\n sibling.getValue().getSuccess().entrySet().size()+1 "]
167660[label="primary\n sibling.getValue().getSuccess().entrySet().size() "]
177661[label="methodInvocation_lfno_primary\n sibling.getValue() "]
187662[label="typeName\n sibling "]
177663[label="methodInvocation_lf_primary\n .getSuccess() "]
177664[label="methodInvocation_lf_primary\n .entrySet() "]
177665[label="methodInvocation_lf_primary\n .size() "]
167666[label="literal\n 1 "]
117667[label="ifThenElseStatement\n if(fetch(sibling.getValue(),new_siblings)==0){base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;}else{inth=insert(new_siblings);base[begin+sibling.getKey()]=h;} "]
127668[label="equalityExpression\n fetch(sibling.getValue(),new_siblings)==0 "]
137669[label="methodInvocation_lfno_primary\n fetch(sibling.getValue(),new_siblings) "]
147670[label="methodName\n fetch "]
147671[label="argumentList\n sibling.getValue(),new_siblings "]
157672[label="methodInvocation_lfno_primary\n sibling.getValue() "]
167673[label="typeName\n sibling "]
157674[label="expressionName\n new_siblings "]
137675[label="literal\n 0 "]
127676[label="block\n {base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++;} "]
137677[label="blockStatements\n base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1);progress++; "]
147678[label="expressionStatement\n base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1); "]
157679[label="assignment\n base[begin+sibling.getKey()]=(-sibling.getValue().getLargestValueId()-1) "]
167680[label="arrayAccess\n base[begin+sibling.getKey()] "]
177681[label="expressionName\n base "]
177682[label="additiveExpression\n begin+sibling.getKey() "]
187683[label="expressionName\n begin "]
187684[label="methodInvocation_lfno_primary\n sibling.getKey() "]
197685[label="typeName\n sibling "]
167686[label="assignmentOperator\n = "]
167687[label="primaryNoNewArray_lfno_primary\n (-sibling.getValue().getLargestValueId()-1) "]
177688[label="additiveExpression\n -sibling.getValue().getLargestValueId()-1 "]
187689[label="unaryExpression\n -sibling.getValue().getLargestValueId() "]
197690[label="primary\n sibling.getValue().getLargestValueId() "]
207691[label="methodInvocation_lfno_primary\n sibling.getValue() "]
217692[label="typeName\n sibling "]
207693[label="methodInvocation_lf_primary\n .getLargestValueId() "]
187694[label="literal\n 1 "]
147695[label="expressionStatement\n progress++; "]
157696[label="postIncrementExpression\n progress++ "]
167697[label="expressionName\n progress "]
127698[label="block\n {inth=insert(new_siblings);base[begin+sibling.getKey()]=h;} "]
137699[label="blockStatements\n inth=insert(new_siblings);base[begin+sibling.getKey()]=h; "]
147700[label="localVariableDeclarationStatement\n inth=insert(new_siblings); "]
157701[label="localVariableDeclaration\n inth=insert(new_siblings) "]
167702[label="integralType\n int "]
167703[label="variableDeclarator\n h=insert(new_siblings) "]
177704[label="variableDeclaratorId\n h "]
177705[label="methodInvocation_lfno_primary\n insert(new_siblings) "]
187706[label="methodName\n insert "]
187707[label="expressionName\n new_siblings "]
147708[label="expressionStatement\n base[begin+sibling.getKey()]=h; "]
157709[label="assignment\n base[begin+sibling.getKey()]=h "]
167710[label="arrayAccess\n base[begin+sibling.getKey()] "]
177711[label="expressionName\n base "]
177712[label="additiveExpression\n begin+sibling.getKey() "]
187713[label="expressionName\n begin "]
187714[label="methodInvocation_lfno_primary\n sibling.getKey() "]
197715[label="typeName\n sibling "]
167716[label="assignmentOperator\n = "]
167717[label="expressionName\n h "]
117718[label="expressionStatement\n sibling.getValue().setIndex(begin+sibling.getKey()); "]
127719[label="methodInvocation\n sibling.getValue().setIndex(begin+sibling.getKey()) "]
137720[label="methodInvocation_lfno_primary\n sibling.getValue() "]
147721[label="typeName\n sibling "]
137722[label="additiveExpression\n begin+sibling.getKey() "]
147723[label="expressionName\n begin "]
147724[label="methodInvocation_lfno_primary\n sibling.getKey() "]
157725[label="typeName\n sibling "]
87726[label="returnStatement\n returnbegin; "]
97727[label="expressionName\n begin "]
57728[label="methodDeclaration\n privatevoidloseWeight(){intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;} "]
67729[label="methodModifier\n private "]
67730[label="methodHeader\n voidloseWeight() "]
77731[label="result\n void "]
77732[label="methodDeclarator\n loseWeight() "]
67733[label="block\n {intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck;} "]
77734[label="blockStatements\n intnbase[]=newint[size+65535];System.arraycopy(base,0,nbase,0,size);base=nbase;intncheck[]=newint[size+65535];System.arraycopy(check,0,ncheck,0,size);check=ncheck; "]
87735[label="localVariableDeclarationStatement\n intnbase[]=newint[size+65535]; "]
97736[label="localVariableDeclaration\n intnbase[]=newint[size+65535] "]
107737[label="integralType\n int "]
107738[label="variableDeclarator\n nbase[]=newint[size+65535] "]
117739[label="variableDeclaratorId\n nbase[] "]
127740[label="dims\n [] "]
117741[label="arrayCreationExpression\n newint[size+65535] "]
127742[label="integralType\n int "]
127743[label="dimExpr\n [size+65535] "]
137744[label="additiveExpression\n size+65535 "]
147745[label="expressionName\n size "]
147746[label="literal\n 65535 "]
87747[label="expressionStatement\n System.arraycopy(base,0,nbase,0,size); "]
97748[label="methodInvocation\n System.arraycopy(base,0,nbase,0,size) "]
107749[label="typeName\n System "]
107750[label="argumentList\n base,0,nbase,0,size "]
117751[label="expressionName\n base "]
117752[label="literal\n 0 "]
117753[label="expressionName\n nbase "]
117754[label="literal\n 0 "]
117755[label="expressionName\n size "]
87756[label="expressionStatement\n base=nbase; "]
97757[label="assignment\n base=nbase "]
107758[label="expressionName\n base "]
107759[label="assignmentOperator\n = "]
107760[label="expressionName\n nbase "]
87761[label="localVariableDeclarationStatement\n intncheck[]=newint[size+65535]; "]
97762[label="localVariableDeclaration\n intncheck[]=newint[size+65535] "]
107763[label="integralType\n int "]
107764[label="variableDeclarator\n ncheck[]=newint[size+65535] "]
117765[label="variableDeclaratorId\n ncheck[] "]
127766[label="dims\n [] "]
117767[label="arrayCreationExpression\n newint[size+65535] "]
127768[label="integralType\n int "]
127769[label="dimExpr\n [size+65535] "]
137770[label="additiveExpression\n size+65535 "]
147771[label="expressionName\n size "]
147772[label="literal\n 65535 "]
87773[label="expressionStatement\n System.arraycopy(check,0,ncheck,0,size); "]
97774[label="methodInvocation\n System.arraycopy(check,0,ncheck,0,size) "]
107775[label="typeName\n System "]
107776[label="argumentList\n check,0,ncheck,0,size "]
117777[label="expressionName\n check "]
117778[label="literal\n 0 "]
117779[label="expressionName\n ncheck "]
117780[label="literal\n 0 "]
117781[label="expressionName\n size "]
87782[label="expressionStatement\n check=ncheck; "]
97783[label="assignment\n check=ncheck "]
107784[label="expressionName\n check "]
107785[label="assignmentOperator\n = "]
107786[label="expressionName\n ncheck "]
07787[label="compilationUnit\n packagecom.hankcs.hanlp.seg.Other;importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie;importcom.hankcs.hanlp.corpus.io.IOUtil;importcom.hankcs.hanlp.corpus.tag.Nature;importcom.hankcs.hanlp.dictionary.CoreDictionary;importcom.hankcs.hanlp.seg.DictionaryBasedSegment;importcom.hankcs.hanlp.seg.NShort.Path.AtomNode;importcom.hankcs.hanlp.seg.Segment;importcom.hankcs.hanlp.seg.common.Term;importcom.hankcs.hanlp.utility.TextUtility;importstaticcom.hankcs.hanlp.utility.Predefine.logger;importjava.io.IOException;importjava.util.*;publicclassAhoCorasickDoubleArrayTrieSegmentextendsDictionaryBasedSegment{AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie;@OverrideprotectedList<Term>segSentence(char[]sentence){if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();}finalint[]wordNet=newint[sentence.length];Arrays.fill(wordNet,1);finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null;trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}});LinkedList<Term>termList=newLinkedList<Term>();if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}}for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];}returntermList;}publicAhoCorasickDoubleArrayTrieSegment(){super();config.useCustomDictionary=false;config.speechTagging=true;}publicAhoCorasickDoubleArrayTrieSegment(TreeMap<String,CoreDictionary.Attribute>dictionary){this();trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();trie.build(dictionary);setTrie(trie);}@OverridepublicSegmentenableCustomDictionary(booleanenable){thrownewUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\");}publicAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>getTrie(){returntrie;}publicvoidsetTrie(AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie){this.trie=trie;}publicAhoCorasickDoubleArrayTrieSegmentloadDictionary(String...pathArray){trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();TreeMap<String,CoreDictionary.Attribute>map=null;try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;}if(map!=null&&!map.isEmpty()){trie.build(map);}returnthis;}}<EOF> "]
17788[label="packageDeclaration\n packagecom.hankcs.hanlp.seg.Other; "]
27789[label="packageName\n com.hankcs.hanlp.seg.Other "]
37790[label="packageName\n com.hankcs.hanlp.seg "]
47791[label="packageName\n com.hankcs.hanlp "]
57792[label="packageName\n com.hankcs "]
67793[label="packageName\n com "]
17794[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie; "]
27795[label="typeName\n com.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie "]
37796[label="packageOrTypeName\n com.hankcs.hanlp.collection.AhoCorasick "]
47797[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
57798[label="packageOrTypeName\n com.hankcs.hanlp "]
67799[label="packageOrTypeName\n com.hankcs "]
77800[label="packageOrTypeName\n com "]
17801[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
27802[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
37803[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
47804[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
57805[label="packageOrTypeName\n com.hankcs.hanlp "]
67806[label="packageOrTypeName\n com.hankcs "]
77807[label="packageOrTypeName\n com "]
17808[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.tag.Nature; "]
27809[label="typeName\n com.hankcs.hanlp.corpus.tag.Nature "]
37810[label="packageOrTypeName\n com.hankcs.hanlp.corpus.tag "]
47811[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
57812[label="packageOrTypeName\n com.hankcs.hanlp "]
67813[label="packageOrTypeName\n com.hankcs "]
77814[label="packageOrTypeName\n com "]
17815[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dictionary.CoreDictionary; "]
27816[label="typeName\n com.hankcs.hanlp.dictionary.CoreDictionary "]
37817[label="packageOrTypeName\n com.hankcs.hanlp.dictionary "]
47818[label="packageOrTypeName\n com.hankcs.hanlp "]
57819[label="packageOrTypeName\n com.hankcs "]
67820[label="packageOrTypeName\n com "]
17821[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.DictionaryBasedSegment; "]
27822[label="typeName\n com.hankcs.hanlp.seg.DictionaryBasedSegment "]
37823[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
47824[label="packageOrTypeName\n com.hankcs.hanlp "]
57825[label="packageOrTypeName\n com.hankcs "]
67826[label="packageOrTypeName\n com "]
17827[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.NShort.Path.AtomNode; "]
27828[label="typeName\n com.hankcs.hanlp.seg.NShort.Path.AtomNode "]
37829[label="packageOrTypeName\n com.hankcs.hanlp.seg.NShort.Path "]
47830[label="packageOrTypeName\n com.hankcs.hanlp.seg.NShort "]
57831[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
67832[label="packageOrTypeName\n com.hankcs.hanlp "]
77833[label="packageOrTypeName\n com.hankcs "]
87834[label="packageOrTypeName\n com "]
17835[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.Segment; "]
27836[label="typeName\n com.hankcs.hanlp.seg.Segment "]
37837[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
47838[label="packageOrTypeName\n com.hankcs.hanlp "]
57839[label="packageOrTypeName\n com.hankcs "]
67840[label="packageOrTypeName\n com "]
17841[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.common.Term; "]
27842[label="typeName\n com.hankcs.hanlp.seg.common.Term "]
37843[label="packageOrTypeName\n com.hankcs.hanlp.seg.common "]
47844[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
57845[label="packageOrTypeName\n com.hankcs.hanlp "]
67846[label="packageOrTypeName\n com.hankcs "]
77847[label="packageOrTypeName\n com "]
17848[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.TextUtility; "]
27849[label="typeName\n com.hankcs.hanlp.utility.TextUtility "]
37850[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
47851[label="packageOrTypeName\n com.hankcs.hanlp "]
57852[label="packageOrTypeName\n com.hankcs "]
67853[label="packageOrTypeName\n com "]
17854[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.utility.Predefine.logger; "]
27855[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
37856[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
47857[label="packageOrTypeName\n com.hankcs.hanlp "]
57858[label="packageOrTypeName\n com.hankcs "]
67859[label="packageOrTypeName\n com "]
17860[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
27861[label="typeName\n java.io.IOException "]
37862[label="packageOrTypeName\n java.io "]
47863[label="packageOrTypeName\n java "]
17864[label="typeImportOnDemandDeclaration\n importjava.util.*; "]
27865[label="packageOrTypeName\n java.util "]
37866[label="packageOrTypeName\n java "]
17867[label="normalClassDeclaration\n publicclassAhoCorasickDoubleArrayTrieSegmentextendsDictionaryBasedSegment{AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie;@OverrideprotectedList<Term>segSentence(char[]sentence){if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();}finalint[]wordNet=newint[sentence.length];Arrays.fill(wordNet,1);finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null;trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}});LinkedList<Term>termList=newLinkedList<Term>();if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}}for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];}returntermList;}publicAhoCorasickDoubleArrayTrieSegment(){super();config.useCustomDictionary=false;config.speechTagging=true;}publicAhoCorasickDoubleArrayTrieSegment(TreeMap<String,CoreDictionary.Attribute>dictionary){this();trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();trie.build(dictionary);setTrie(trie);}@OverridepublicSegmentenableCustomDictionary(booleanenable){thrownewUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\");}publicAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>getTrie(){returntrie;}publicvoidsetTrie(AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie){this.trie=trie;}publicAhoCorasickDoubleArrayTrieSegmentloadDictionary(String...pathArray){trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();TreeMap<String,CoreDictionary.Attribute>map=null;try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;}if(map!=null&&!map.isEmpty()){trie.build(map);}returnthis;}} "]
27868[label="classModifier\n public "]
27869[label="superclass\n extendsDictionaryBasedSegment "]
37870[label="classType\n DictionaryBasedSegment "]
27871[label="classBody\n {AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie;@OverrideprotectedList<Term>segSentence(char[]sentence){if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();}finalint[]wordNet=newint[sentence.length];Arrays.fill(wordNet,1);finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null;trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}});LinkedList<Term>termList=newLinkedList<Term>();if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}}for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];}returntermList;}publicAhoCorasickDoubleArrayTrieSegment(){super();config.useCustomDictionary=false;config.speechTagging=true;}publicAhoCorasickDoubleArrayTrieSegment(TreeMap<String,CoreDictionary.Attribute>dictionary){this();trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();trie.build(dictionary);setTrie(trie);}@OverridepublicSegmentenableCustomDictionary(booleanenable){thrownewUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\");}publicAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>getTrie(){returntrie;}publicvoidsetTrie(AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie){this.trie=trie;}publicAhoCorasickDoubleArrayTrieSegmentloadDictionary(String...pathArray){trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();TreeMap<String,CoreDictionary.Attribute>map=null;try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;}if(map!=null&&!map.isEmpty()){trie.build(map);}returnthis;}} "]
37872[label="fieldDeclaration\n AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie; "]
47873[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute> "]
57874[label="typeArguments\n <CoreDictionary.Attribute> "]
67875[label="classOrInterfaceType\n CoreDictionary.Attribute "]
77876[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
77877[label="classType_lf_classOrInterfaceType\n .Attribute "]
47878[label="variableDeclaratorId\n trie "]
37879[label="methodDeclaration\n @OverrideprotectedList<Term>segSentence(char[]sentence){if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();}finalint[]wordNet=newint[sentence.length];Arrays.fill(wordNet,1);finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null;trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}});LinkedList<Term>termList=newLinkedList<Term>();if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}}for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];}returntermList;} "]
47880[label="markerAnnotation\n @Override "]
57881[label="typeName\n Override "]
47882[label="methodModifier\n protected "]
47883[label="methodHeader\n List<Term>segSentence(char[]sentence) "]
57884[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Term> "]
67885[label="typeArguments\n <Term> "]
77886[label="classType_lfno_classOrInterfaceType\n Term "]
57887[label="methodDeclarator\n segSentence(char[]sentence) "]
67888[label="formalParameter\n char[]sentence "]
77889[label="unannArrayType\n char[] "]
87890[label="integralType\n char "]
87891[label="dims\n [] "]
77892[label="variableDeclaratorId\n sentence "]
47893[label="block\n {if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();}finalint[]wordNet=newint[sentence.length];Arrays.fill(wordNet,1);finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null;trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}});LinkedList<Term>termList=newLinkedList<Term>();if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}}for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];}returntermList;} "]
57894[label="blockStatements\n if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();}finalint[]wordNet=newint[sentence.length];Arrays.fill(wordNet,1);finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null;trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}});LinkedList<Term>termList=newLinkedList<Term>();if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}}for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];}returntermList; "]
67895[label="ifThenStatement\n if(trie==null){logger.warning(\"还未加载任何词典\");returnCollections.emptyList();} "]
77896[label="equalityExpression\n trie==null "]
87897[label="expressionName\n trie "]
87898[label="literal\n null "]
77899[label="block\n {logger.warning(\"还未加载任何词典\");returnCollections.emptyList();} "]
87900[label="blockStatements\n logger.warning(\"还未加载任何词典\");returnCollections.emptyList(); "]
97901[label="expressionStatement\n logger.warning(\"还未加载任何词典\"); "]
107902[label="methodInvocation\n logger.warning(\"还未加载任何词典\") "]
117903[label="typeName\n logger "]
117904[label="literal\n \"还未加载任何词典\" "]
97905[label="returnStatement\n returnCollections.emptyList(); "]
107906[label="methodInvocation_lfno_primary\n Collections.emptyList() "]
117907[label="typeName\n Collections "]
67908[label="localVariableDeclarationStatement\n finalint[]wordNet=newint[sentence.length]; "]
77909[label="localVariableDeclaration\n finalint[]wordNet=newint[sentence.length] "]
87910[label="variableModifier\n final "]
87911[label="unannArrayType\n int[] "]
97912[label="integralType\n int "]
97913[label="dims\n [] "]
87914[label="variableDeclarator\n wordNet=newint[sentence.length] "]
97915[label="variableDeclaratorId\n wordNet "]
97916[label="arrayCreationExpression\n newint[sentence.length] "]
107917[label="integralType\n int "]
107918[label="dimExpr\n [sentence.length] "]
117919[label="expressionName\n sentence.length "]
127920[label="ambiguousName\n sentence "]
67921[label="expressionStatement\n Arrays.fill(wordNet,1); "]
77922[label="methodInvocation\n Arrays.fill(wordNet,1) "]
87923[label="typeName\n Arrays "]
87924[label="argumentList\n wordNet,1 "]
97925[label="expressionName\n wordNet "]
97926[label="literal\n 1 "]
67927[label="localVariableDeclarationStatement\n finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null; "]
77928[label="localVariableDeclaration\n finalNature[]natureArray=config.speechTagging?newNature[sentence.length]:null "]
87929[label="variableModifier\n final "]
87930[label="unannArrayType\n Nature[] "]
97931[label="unannClassType_lfno_unannClassOrInterfaceType\n Nature "]
97932[label="dims\n [] "]
87933[label="variableDeclarator\n natureArray=config.speechTagging?newNature[sentence.length]:null "]
97934[label="variableDeclaratorId\n natureArray "]
97935[label="conditionalExpression\n config.speechTagging?newNature[sentence.length]:null "]
107936[label="expressionName\n config.speechTagging "]
117937[label="ambiguousName\n config "]
107938[label="arrayCreationExpression\n newNature[sentence.length] "]
117939[label="classType_lfno_classOrInterfaceType\n Nature "]
117940[label="dimExpr\n [sentence.length] "]
127941[label="expressionName\n sentence.length "]
137942[label="ambiguousName\n sentence "]
107943[label="literal\n null "]
67944[label="expressionStatement\n trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}}); "]
77945[label="methodInvocation\n trie.parseText(sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}}) "]
87946[label="typeName\n trie "]
87947[label="argumentList\n sentence,newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}} "]
97948[label="expressionName\n sentence "]
97949[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>(){@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}} "]
107950[label="typeArguments\n <CoreDictionary.Attribute> "]
117951[label="classOrInterfaceType\n CoreDictionary.Attribute "]
127952[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
127953[label="classType_lf_classOrInterfaceType\n .Attribute "]
107954[label="classBody\n {@Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}}} "]
117955[label="methodDeclaration\n @Overridepublicvoidhit(intbegin,intend,CoreDictionary.Attributevalue){intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}} "]
127956[label="markerAnnotation\n @Override "]
137957[label="typeName\n Override "]
127958[label="methodModifier\n public "]
127959[label="methodHeader\n voidhit(intbegin,intend,CoreDictionary.Attributevalue) "]
137960[label="result\n void "]
137961[label="methodDeclarator\n hit(intbegin,intend,CoreDictionary.Attributevalue) "]
147962[label="formalParameterList\n intbegin,intend,CoreDictionary.Attributevalue "]
157963[label="formalParameters\n intbegin,intend "]
167964[label="formalParameter\n intbegin "]
177965[label="integralType\n int "]
177966[label="variableDeclaratorId\n begin "]
167967[label="formalParameter\n intend "]
177968[label="integralType\n int "]
177969[label="variableDeclaratorId\n end "]
157970[label="formalParameter\n CoreDictionary.Attributevalue "]
167971[label="unannClassOrInterfaceType\n CoreDictionary.Attribute "]
177972[label="unannClassType_lfno_unannClassOrInterfaceType\n CoreDictionary "]
177973[label="unannClassType_lf_unannClassOrInterfaceType\n .Attribute "]
167974[label="variableDeclaratorId\n value "]
127975[label="block\n {intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}}} "]
137976[label="blockStatements\n intlength=end-begin;if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}} "]
147977[label="localVariableDeclarationStatement\n intlength=end-begin; "]
157978[label="localVariableDeclaration\n intlength=end-begin "]
167979[label="integralType\n int "]
167980[label="variableDeclarator\n length=end-begin "]
177981[label="variableDeclaratorId\n length "]
177982[label="additiveExpression\n end-begin "]
187983[label="expressionName\n end "]
187984[label="expressionName\n begin "]
147985[label="ifThenStatement\n if(length>wordNet[begin]){wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}} "]
157986[label="relationalExpression\n length>wordNet[begin] "]
167987[label="expressionName\n length "]
167988[label="arrayAccess_lfno_primary\n wordNet[begin] "]
177989[label="expressionName\n wordNet "]
177990[label="expressionName\n begin "]
157991[label="block\n {wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];}} "]
167992[label="blockStatements\n wordNet[begin]=length;if(config.speechTagging){natureArray[begin]=value.nature[0];} "]
177993[label="expressionStatement\n wordNet[begin]=length; "]
187994[label="assignment\n wordNet[begin]=length "]
197995[label="arrayAccess\n wordNet[begin] "]
207996[label="expressionName\n wordNet "]
207997[label="expressionName\n begin "]
197998[label="assignmentOperator\n = "]
197999[label="expressionName\n length "]
178000[label="ifThenStatement\n if(config.speechTagging){natureArray[begin]=value.nature[0];} "]
188001[label="expressionName\n config.speechTagging "]
198002[label="ambiguousName\n config "]
188003[label="block\n {natureArray[begin]=value.nature[0];} "]
198004[label="expressionStatement\n natureArray[begin]=value.nature[0]; "]
208005[label="assignment\n natureArray[begin]=value.nature[0] "]
218006[label="arrayAccess\n natureArray[begin] "]
228007[label="expressionName\n natureArray "]
228008[label="expressionName\n begin "]
218009[label="assignmentOperator\n = "]
218010[label="arrayAccess_lfno_primary\n value.nature[0] "]
228011[label="expressionName\n value.nature "]
238012[label="ambiguousName\n value "]
228013[label="literal\n 0 "]
68014[label="localVariableDeclarationStatement\n LinkedList<Term>termList=newLinkedList<Term>(); "]
78015[label="localVariableDeclaration\n LinkedList<Term>termList=newLinkedList<Term>() "]
88016[label="unannClassType_lfno_unannClassOrInterfaceType\n LinkedList<Term> "]
98017[label="typeArguments\n <Term> "]
108018[label="classType_lfno_classOrInterfaceType\n Term "]
88019[label="variableDeclarator\n termList=newLinkedList<Term>() "]
98020[label="variableDeclaratorId\n termList "]
98021[label="classInstanceCreationExpression_lfno_primary\n newLinkedList<Term>() "]
108022[label="typeArguments\n <Term> "]
118023[label="classType_lfno_classOrInterfaceType\n Term "]
68024[label="ifThenStatement\n if(config.speechTagging){for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}} "]
78025[label="expressionName\n config.speechTagging "]
88026[label="ambiguousName\n config "]
78027[label="block\n {for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}}} "]
88028[label="basicForStatement\n for(inti=0;i<natureArray.length;){if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}} "]
98029[label="localVariableDeclaration\n inti=0 "]
108030[label="integralType\n int "]
108031[label="variableDeclarator\n i=0 "]
118032[label="variableDeclaratorId\n i "]
118033[label="literal\n 0 "]
98034[label="relationalExpression\n i<natureArray.length "]
108035[label="expressionName\n i "]
108036[label="expressionName\n natureArray.length "]
118037[label="ambiguousName\n natureArray "]
98038[label="block\n {if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;}} "]
108039[label="ifThenElseStatement\n if(natureArray[i]==null){intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;}else{++i;} "]
118040[label="equalityExpression\n natureArray[i]==null "]
128041[label="arrayAccess_lfno_primary\n natureArray[i] "]
138042[label="expressionName\n natureArray "]
138043[label="expressionName\n i "]
128044[label="literal\n null "]
118045[label="block\n {intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j;} "]
128046[label="blockStatements\n intj=i+1;for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;}List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j);for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}}i=j; "]
138047[label="localVariableDeclarationStatement\n intj=i+1; "]
148048[label="localVariableDeclaration\n intj=i+1 "]
158049[label="integralType\n int "]
158050[label="variableDeclarator\n j=i+1 "]
168051[label="variableDeclaratorId\n j "]
168052[label="additiveExpression\n i+1 "]
178053[label="expressionName\n i "]
178054[label="literal\n 1 "]
138055[label="basicForStatement\n for(;j<natureArray.length;++j){if(natureArray[j]!=null)break;} "]
148056[label="relationalExpression\n j<natureArray.length "]
158057[label="expressionName\n j "]
158058[label="expressionName\n natureArray.length "]
168059[label="ambiguousName\n natureArray "]
148060[label="preIncrementExpression\n ++j "]
158061[label="expressionName\n j "]
148062[label="block\n {if(natureArray[j]!=null)break;} "]
158063[label="ifThenStatement\n if(natureArray[j]!=null)break; "]
168064[label="equalityExpression\n natureArray[j]!=null "]
178065[label="arrayAccess_lfno_primary\n natureArray[j] "]
188066[label="expressionName\n natureArray "]
188067[label="expressionName\n j "]
178068[label="literal\n null "]
168069[label="breakStatement\n break; "]
138070[label="localVariableDeclarationStatement\n List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j); "]
148071[label="localVariableDeclaration\n List<AtomNode>atomNodeList=quickAtomSegment(sentence,i,j) "]
158072[label="unannClassType_lfno_unannClassOrInterfaceType\n List<AtomNode> "]
168073[label="typeArguments\n <AtomNode> "]
178074[label="classType_lfno_classOrInterfaceType\n AtomNode "]
158075[label="variableDeclarator\n atomNodeList=quickAtomSegment(sentence,i,j) "]
168076[label="variableDeclaratorId\n atomNodeList "]
168077[label="methodInvocation_lfno_primary\n quickAtomSegment(sentence,i,j) "]
178078[label="methodName\n quickAtomSegment "]
178079[label="argumentList\n sentence,i,j "]
188080[label="expressionName\n sentence "]
188081[label="expressionName\n i "]
188082[label="expressionName\n j "]
138083[label="enhancedForStatement\n for(AtomNodeatomNode:atomNodeList){if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}} "]
148084[label="unannClassType_lfno_unannClassOrInterfaceType\n AtomNode "]
148085[label="variableDeclaratorId\n atomNode "]
148086[label="expressionName\n atomNodeList "]
148087[label="block\n {if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];}} "]
158088[label="ifThenStatement\n if(atomNode.sWord.length()>=wordNet[i]){wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];} "]
168089[label="relationalExpression\n atomNode.sWord.length()>=wordNet[i] "]
178090[label="methodInvocation_lfno_primary\n atomNode.sWord.length() "]
188091[label="typeName\n atomNode.sWord "]
198092[label="packageOrTypeName\n atomNode "]
178093[label="arrayAccess_lfno_primary\n wordNet[i] "]
188094[label="expressionName\n wordNet "]
188095[label="expressionName\n i "]
168096[label="block\n {wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i];} "]
178097[label="blockStatements\n wordNet[i]=atomNode.sWord.length();natureArray[i]=atomNode.getNature();i+=wordNet[i]; "]
188098[label="expressionStatement\n wordNet[i]=atomNode.sWord.length(); "]
198099[label="assignment\n wordNet[i]=atomNode.sWord.length() "]
208100[label="arrayAccess\n wordNet[i] "]
218101[label="expressionName\n wordNet "]
218102[label="expressionName\n i "]
208103[label="assignmentOperator\n = "]
208104[label="methodInvocation_lfno_primary\n atomNode.sWord.length() "]
218105[label="typeName\n atomNode.sWord "]
228106[label="packageOrTypeName\n atomNode "]
188107[label="expressionStatement\n natureArray[i]=atomNode.getNature(); "]
198108[label="assignment\n natureArray[i]=atomNode.getNature() "]
208109[label="arrayAccess\n natureArray[i] "]
218110[label="expressionName\n natureArray "]
218111[label="expressionName\n i "]
208112[label="assignmentOperator\n = "]
208113[label="methodInvocation_lfno_primary\n atomNode.getNature() "]
218114[label="typeName\n atomNode "]
188115[label="expressionStatement\n i+=wordNet[i]; "]
198116[label="assignment\n i+=wordNet[i] "]
208117[label="expressionName\n i "]
208118[label="assignmentOperator\n += "]
208119[label="arrayAccess_lfno_primary\n wordNet[i] "]
218120[label="expressionName\n wordNet "]
218121[label="expressionName\n i "]
138122[label="expressionStatement\n i=j; "]
148123[label="assignment\n i=j "]
158124[label="expressionName\n i "]
158125[label="assignmentOperator\n = "]
158126[label="expressionName\n j "]
118127[label="block\n {++i;} "]
128128[label="expressionStatement\n ++i; "]
138129[label="preIncrementExpression\n ++i "]
148130[label="expressionName\n i "]
68131[label="basicForStatement\n for(inti=0;i<wordNet.length;){Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];} "]
78132[label="localVariableDeclaration\n inti=0 "]
88133[label="integralType\n int "]
88134[label="variableDeclarator\n i=0 "]
98135[label="variableDeclaratorId\n i "]
98136[label="literal\n 0 "]
78137[label="relationalExpression\n i<wordNet.length "]
88138[label="expressionName\n i "]
88139[label="expressionName\n wordNet.length "]
98140[label="ambiguousName\n wordNet "]
78141[label="block\n {Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i];} "]
88142[label="blockStatements\n Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null);term.offset=i;termList.add(term);i+=wordNet[i]; "]
98143[label="localVariableDeclarationStatement\n Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null); "]
108144[label="localVariableDeclaration\n Termterm=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null) "]
118145[label="unannClassType_lfno_unannClassOrInterfaceType\n Term "]
118146[label="variableDeclarator\n term=newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null) "]
128147[label="variableDeclaratorId\n term "]
128148[label="classInstanceCreationExpression_lfno_primary\n newTerm(newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null) "]
138149[label="argumentList\n newString(sentence,i,wordNet[i]),config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null "]
148150[label="classInstanceCreationExpression_lfno_primary\n newString(sentence,i,wordNet[i]) "]
158151[label="argumentList\n sentence,i,wordNet[i] "]
168152[label="expressionName\n sentence "]
168153[label="expressionName\n i "]
168154[label="arrayAccess_lfno_primary\n wordNet[i] "]
178155[label="expressionName\n wordNet "]
178156[label="expressionName\n i "]
148157[label="conditionalExpression\n config.speechTagging?(natureArray[i]==null?Nature.nz:natureArray[i]):null "]
158158[label="expressionName\n config.speechTagging "]
168159[label="ambiguousName\n config "]
158160[label="primaryNoNewArray_lfno_primary\n (natureArray[i]==null?Nature.nz:natureArray[i]) "]
168161[label="conditionalExpression\n natureArray[i]==null?Nature.nz:natureArray[i] "]
178162[label="equalityExpression\n natureArray[i]==null "]
188163[label="arrayAccess_lfno_primary\n natureArray[i] "]
198164[label="expressionName\n natureArray "]
198165[label="expressionName\n i "]
188166[label="literal\n null "]
178167[label="expressionName\n Nature.nz "]
188168[label="ambiguousName\n Nature "]
178169[label="arrayAccess_lfno_primary\n natureArray[i] "]
188170[label="expressionName\n natureArray "]
188171[label="expressionName\n i "]
158172[label="literal\n null "]
98173[label="expressionStatement\n term.offset=i; "]
108174[label="assignment\n term.offset=i "]
118175[label="expressionName\n term.offset "]
128176[label="ambiguousName\n term "]
118177[label="assignmentOperator\n = "]
118178[label="expressionName\n i "]
98179[label="expressionStatement\n termList.add(term); "]
108180[label="methodInvocation\n termList.add(term) "]
118181[label="typeName\n termList "]
118182[label="expressionName\n term "]
98183[label="expressionStatement\n i+=wordNet[i]; "]
108184[label="assignment\n i+=wordNet[i] "]
118185[label="expressionName\n i "]
118186[label="assignmentOperator\n += "]
118187[label="arrayAccess_lfno_primary\n wordNet[i] "]
128188[label="expressionName\n wordNet "]
128189[label="expressionName\n i "]
68190[label="returnStatement\n returntermList; "]
78191[label="expressionName\n termList "]
38192[label="constructorDeclaration\n publicAhoCorasickDoubleArrayTrieSegment(){super();config.useCustomDictionary=false;config.speechTagging=true;} "]
48193[label="constructorModifier\n public "]
48194[label="constructorDeclarator\n AhoCorasickDoubleArrayTrieSegment() "]
58195[label="simpleTypeName\n AhoCorasickDoubleArrayTrieSegment "]
48196[label="constructorBody\n {super();config.useCustomDictionary=false;config.speechTagging=true;} "]
58197[label="explicitConstructorInvocation\n super(); "]
58198[label="blockStatements\n config.useCustomDictionary=false;config.speechTagging=true; "]
68199[label="expressionStatement\n config.useCustomDictionary=false; "]
78200[label="assignment\n config.useCustomDictionary=false "]
88201[label="expressionName\n config.useCustomDictionary "]
98202[label="ambiguousName\n config "]
88203[label="assignmentOperator\n = "]
88204[label="literal\n false "]
68205[label="expressionStatement\n config.speechTagging=true; "]
78206[label="assignment\n config.speechTagging=true "]
88207[label="expressionName\n config.speechTagging "]
98208[label="ambiguousName\n config "]
88209[label="assignmentOperator\n = "]
88210[label="literal\n true "]
38211[label="constructorDeclaration\n publicAhoCorasickDoubleArrayTrieSegment(TreeMap<String,CoreDictionary.Attribute>dictionary){this();trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();trie.build(dictionary);setTrie(trie);} "]
48212[label="constructorModifier\n public "]
48213[label="constructorDeclarator\n AhoCorasickDoubleArrayTrieSegment(TreeMap<String,CoreDictionary.Attribute>dictionary) "]
58214[label="simpleTypeName\n AhoCorasickDoubleArrayTrieSegment "]
58215[label="formalParameter\n TreeMap<String,CoreDictionary.Attribute>dictionary "]
68216[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,CoreDictionary.Attribute> "]
78217[label="typeArguments\n <String,CoreDictionary.Attribute> "]
88218[label="typeArgumentList\n String,CoreDictionary.Attribute "]
98219[label="classType_lfno_classOrInterfaceType\n String "]
98220[label="classOrInterfaceType\n CoreDictionary.Attribute "]
108221[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
108222[label="classType_lf_classOrInterfaceType\n .Attribute "]
68223[label="variableDeclaratorId\n dictionary "]
48224[label="constructorBody\n {this();trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();trie.build(dictionary);setTrie(trie);} "]
58225[label="explicitConstructorInvocation\n this(); "]
58226[label="blockStatements\n trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();trie.build(dictionary);setTrie(trie); "]
68227[label="expressionStatement\n trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>(); "]
78228[label="assignment\n trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>() "]
88229[label="expressionName\n trie "]
88230[label="assignmentOperator\n = "]
88231[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>() "]
98232[label="typeArguments\n <CoreDictionary.Attribute> "]
108233[label="classOrInterfaceType\n CoreDictionary.Attribute "]
118234[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
118235[label="classType_lf_classOrInterfaceType\n .Attribute "]
68236[label="expressionStatement\n trie.build(dictionary); "]
78237[label="methodInvocation\n trie.build(dictionary) "]
88238[label="typeName\n trie "]
88239[label="expressionName\n dictionary "]
68240[label="expressionStatement\n setTrie(trie); "]
78241[label="methodInvocation\n setTrie(trie) "]
88242[label="methodName\n setTrie "]
88243[label="expressionName\n trie "]
38244[label="methodDeclaration\n @OverridepublicSegmentenableCustomDictionary(booleanenable){thrownewUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\");} "]
48245[label="markerAnnotation\n @Override "]
58246[label="typeName\n Override "]
48247[label="methodModifier\n public "]
48248[label="methodHeader\n SegmentenableCustomDictionary(booleanenable) "]
58249[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
58250[label="methodDeclarator\n enableCustomDictionary(booleanenable) "]
68251[label="formalParameter\n booleanenable "]
78252[label="unannPrimitiveType\n boolean "]
78253[label="variableDeclaratorId\n enable "]
48254[label="block\n {thrownewUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\");} "]
58255[label="throwStatement\n thrownewUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\"); "]
68256[label="classInstanceCreationExpression_lfno_primary\n newUnsupportedOperationException(\"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\") "]
78257[label="literal\n \"AhoCorasickDoubleArrayTrieSegment暂时不支持用户词典。\" "]
38258[label="methodDeclaration\n publicAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>getTrie(){returntrie;} "]
48259[label="methodModifier\n public "]
48260[label="methodHeader\n AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>getTrie() "]
58261[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute> "]
68262[label="typeArguments\n <CoreDictionary.Attribute> "]
78263[label="classOrInterfaceType\n CoreDictionary.Attribute "]
88264[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
88265[label="classType_lf_classOrInterfaceType\n .Attribute "]
58266[label="methodDeclarator\n getTrie() "]
48267[label="block\n {returntrie;} "]
58268[label="returnStatement\n returntrie; "]
68269[label="expressionName\n trie "]
38270[label="methodDeclaration\n publicvoidsetTrie(AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie){this.trie=trie;} "]
48271[label="methodModifier\n public "]
48272[label="methodHeader\n voidsetTrie(AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie) "]
58273[label="result\n void "]
58274[label="methodDeclarator\n setTrie(AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie) "]
68275[label="formalParameter\n AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>trie "]
78276[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<CoreDictionary.Attribute> "]
88277[label="typeArguments\n <CoreDictionary.Attribute> "]
98278[label="classOrInterfaceType\n CoreDictionary.Attribute "]
108279[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
108280[label="classType_lf_classOrInterfaceType\n .Attribute "]
78281[label="variableDeclaratorId\n trie "]
48282[label="block\n {this.trie=trie;} "]
58283[label="expressionStatement\n this.trie=trie; "]
68284[label="assignment\n this.trie=trie "]
78285[label="fieldAccess\n this.trie "]
88286[label="primaryNoNewArray_lfno_primary\n this "]
78287[label="assignmentOperator\n = "]
78288[label="expressionName\n trie "]
38289[label="methodDeclaration\n publicAhoCorasickDoubleArrayTrieSegmentloadDictionary(String...pathArray){trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();TreeMap<String,CoreDictionary.Attribute>map=null;try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;}if(map!=null&&!map.isEmpty()){trie.build(map);}returnthis;} "]
48290[label="methodModifier\n public "]
48291[label="methodHeader\n AhoCorasickDoubleArrayTrieSegmentloadDictionary(String...pathArray) "]
58292[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrieSegment "]
58293[label="methodDeclarator\n loadDictionary(String...pathArray) "]
68294[label="lastFormalParameter\n String...pathArray "]
78295[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
78296[label="variableDeclaratorId\n pathArray "]
48297[label="block\n {trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();TreeMap<String,CoreDictionary.Attribute>map=null;try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;}if(map!=null&&!map.isEmpty()){trie.build(map);}returnthis;} "]
58298[label="blockStatements\n trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>();TreeMap<String,CoreDictionary.Attribute>map=null;try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;}if(map!=null&&!map.isEmpty()){trie.build(map);}returnthis; "]
68299[label="expressionStatement\n trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>(); "]
78300[label="assignment\n trie=newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>() "]
88301[label="expressionName\n trie "]
88302[label="assignmentOperator\n = "]
88303[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie<CoreDictionary.Attribute>() "]
98304[label="typeArguments\n <CoreDictionary.Attribute> "]
108305[label="classOrInterfaceType\n CoreDictionary.Attribute "]
118306[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
118307[label="classType_lf_classOrInterfaceType\n .Attribute "]
68308[label="localVariableDeclarationStatement\n TreeMap<String,CoreDictionary.Attribute>map=null; "]
78309[label="localVariableDeclaration\n TreeMap<String,CoreDictionary.Attribute>map=null "]
88310[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,CoreDictionary.Attribute> "]
98311[label="typeArguments\n <String,CoreDictionary.Attribute> "]
108312[label="typeArgumentList\n String,CoreDictionary.Attribute "]
118313[label="classType_lfno_classOrInterfaceType\n String "]
118314[label="classOrInterfaceType\n CoreDictionary.Attribute "]
128315[label="classType_lfno_classOrInterfaceType\n CoreDictionary "]
128316[label="classType_lf_classOrInterfaceType\n .Attribute "]
88317[label="variableDeclarator\n map=null "]
98318[label="variableDeclaratorId\n map "]
98319[label="literal\n null "]
68320[label="tryStatement\n try{map=IOUtil.loadDictionary(pathArray);}catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;} "]
78321[label="block\n {map=IOUtil.loadDictionary(pathArray);} "]
88322[label="expressionStatement\n map=IOUtil.loadDictionary(pathArray); "]
98323[label="assignment\n map=IOUtil.loadDictionary(pathArray) "]
108324[label="expressionName\n map "]
108325[label="assignmentOperator\n = "]
108326[label="methodInvocation_lfno_primary\n IOUtil.loadDictionary(pathArray) "]
118327[label="typeName\n IOUtil "]
118328[label="expressionName\n pathArray "]
78329[label="catchClause\n catch(IOExceptione){logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;} "]
88330[label="catchFormalParameter\n IOExceptione "]
98331[label="unannClassType\n IOException "]
98332[label="variableDeclaratorId\n e "]
88333[label="block\n {logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis;} "]
98334[label="blockStatements\n logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e));returnthis; "]
108335[label="expressionStatement\n logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e)); "]
118336[label="methodInvocation\n logger.warning(\"加载词典失败\n\"+TextUtility.exceptionToString(e)) "]
128337[label="typeName\n logger "]
128338[label="additiveExpression\n \"加载词典失败\n\"+TextUtility.exceptionToString(e) "]
138339[label="literal\n \"加载词典失败\n\" "]
138340[label="methodInvocation_lfno_primary\n TextUtility.exceptionToString(e) "]
148341[label="typeName\n TextUtility "]
148342[label="expressionName\n e "]
108343[label="returnStatement\n returnthis; "]
118344[label="primaryNoNewArray_lfno_primary\n this "]
68345[label="ifThenStatement\n if(map!=null&&!map.isEmpty()){trie.build(map);} "]
78346[label="conditionalAndExpression\n map!=null&&!map.isEmpty() "]
88347[label="equalityExpression\n map!=null "]
98348[label="expressionName\n map "]
98349[label="literal\n null "]
88350[label="unaryExpressionNotPlusMinus\n !map.isEmpty() "]
98351[label="methodInvocation_lfno_primary\n map.isEmpty() "]
108352[label="typeName\n map "]
78353[label="block\n {trie.build(map);} "]
88354[label="expressionStatement\n trie.build(map); "]
98355[label="methodInvocation\n trie.build(map) "]
108356[label="typeName\n trie "]
108357[label="expressionName\n map "]
68358[label="returnStatement\n returnthis; "]
78359[label="primaryNoNewArray_lfno_primary\n this "]
08360[label="compilationUnit\n packagecom.hankcs.test.algorithm;importcom.hankcs.hanlp.algorithm.ahocorasick.trie.Emit;importcom.hankcs.hanlp.algorithm.ahocorasick.trie.Trie;importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie;importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie;importcom.hankcs.hanlp.corpus.io.IOUtil;importjunit.framework.TestCase;importjava.util.*;publicclassAhoCorasickDoubleArrayTrieTestextendsTestCase{publicvoidtestAC()throwsException{Trietrie=newTrie();trie.addKeyword(\"hers\");trie.addKeyword(\"his\");trie.addKeyword(\"she\");trie.addKeyword(\"he\");Collection<Emit>emits=trie.parseText(\"ushers\");System.out.println(emits);}publicvoidtestBuild()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}});}publicvoidtestDatFromFile()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));}}publicvoidtestDat()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);System.out.println(trie.exactMatchSearch(\"he\"));}publicvoidtestTwoStruct()throwsException{}publicvoidtestTwoAC()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);}}publicvoidtestSegment()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();longtimeMillis=System.currentTimeMillis();act.build(map);System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\");LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\");timeMillis=System.currentTimeMillis();for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}}System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis);}publicvoidtestHasKeyword()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));}assertTrue(trie.hasKeyword(\"ushers\"));assertFalse(trie.hasKeyword(\"构建耗时\"));}}<EOF> "]
18361[label="packageDeclaration\n packagecom.hankcs.test.algorithm; "]
28362[label="packageName\n com.hankcs.test.algorithm "]
38363[label="packageName\n com.hankcs.test "]
48364[label="packageName\n com.hankcs "]
58365[label="packageName\n com "]
18366[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.algorithm.ahocorasick.trie.Emit; "]
28367[label="typeName\n com.hankcs.hanlp.algorithm.ahocorasick.trie.Emit "]
38368[label="packageOrTypeName\n com.hankcs.hanlp.algorithm.ahocorasick.trie "]
48369[label="packageOrTypeName\n com.hankcs.hanlp.algorithm.ahocorasick "]
58370[label="packageOrTypeName\n com.hankcs.hanlp.algorithm "]
68371[label="packageOrTypeName\n com.hankcs.hanlp "]
78372[label="packageOrTypeName\n com.hankcs "]
88373[label="packageOrTypeName\n com "]
18374[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.algorithm.ahocorasick.trie.Trie; "]
28375[label="typeName\n com.hankcs.hanlp.algorithm.ahocorasick.trie.Trie "]
38376[label="packageOrTypeName\n com.hankcs.hanlp.algorithm.ahocorasick.trie "]
48377[label="packageOrTypeName\n com.hankcs.hanlp.algorithm.ahocorasick "]
58378[label="packageOrTypeName\n com.hankcs.hanlp.algorithm "]
68379[label="packageOrTypeName\n com.hankcs.hanlp "]
78380[label="packageOrTypeName\n com.hankcs "]
88381[label="packageOrTypeName\n com "]
18382[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie; "]
28383[label="typeName\n com.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie "]
38384[label="packageOrTypeName\n com.hankcs.hanlp.collection.AhoCorasick "]
48385[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
58386[label="packageOrTypeName\n com.hankcs.hanlp "]
68387[label="packageOrTypeName\n com.hankcs "]
78388[label="packageOrTypeName\n com "]
18389[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie; "]
28390[label="typeName\n com.hankcs.hanlp.collection.trie.DoubleArrayTrie "]
38391[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
48392[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
58393[label="packageOrTypeName\n com.hankcs.hanlp "]
68394[label="packageOrTypeName\n com.hankcs "]
78395[label="packageOrTypeName\n com "]
18396[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
28397[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
38398[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
48399[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
58400[label="packageOrTypeName\n com.hankcs.hanlp "]
68401[label="packageOrTypeName\n com.hankcs "]
78402[label="packageOrTypeName\n com "]
18403[label="singleTypeImportDeclaration\n importjunit.framework.TestCase; "]
28404[label="typeName\n junit.framework.TestCase "]
38405[label="packageOrTypeName\n junit.framework "]
48406[label="packageOrTypeName\n junit "]
18407[label="typeImportOnDemandDeclaration\n importjava.util.*; "]
28408[label="packageOrTypeName\n java.util "]
38409[label="packageOrTypeName\n java "]
18410[label="normalClassDeclaration\n publicclassAhoCorasickDoubleArrayTrieTestextendsTestCase{publicvoidtestAC()throwsException{Trietrie=newTrie();trie.addKeyword(\"hers\");trie.addKeyword(\"his\");trie.addKeyword(\"she\");trie.addKeyword(\"he\");Collection<Emit>emits=trie.parseText(\"ushers\");System.out.println(emits);}publicvoidtestBuild()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}});}publicvoidtestDatFromFile()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));}}publicvoidtestDat()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);System.out.println(trie.exactMatchSearch(\"he\"));}publicvoidtestTwoStruct()throwsException{}publicvoidtestTwoAC()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);}}publicvoidtestSegment()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();longtimeMillis=System.currentTimeMillis();act.build(map);System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\");LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\");timeMillis=System.currentTimeMillis();for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}}System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis);}publicvoidtestHasKeyword()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));}assertTrue(trie.hasKeyword(\"ushers\"));assertFalse(trie.hasKeyword(\"构建耗时\"));}} "]
28411[label="classModifier\n public "]
28412[label="superclass\n extendsTestCase "]
38413[label="classType\n TestCase "]
28414[label="classBody\n {publicvoidtestAC()throwsException{Trietrie=newTrie();trie.addKeyword(\"hers\");trie.addKeyword(\"his\");trie.addKeyword(\"she\");trie.addKeyword(\"he\");Collection<Emit>emits=trie.parseText(\"ushers\");System.out.println(emits);}publicvoidtestBuild()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}});}publicvoidtestDatFromFile()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));}}publicvoidtestDat()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);System.out.println(trie.exactMatchSearch(\"he\"));}publicvoidtestTwoStruct()throwsException{}publicvoidtestTwoAC()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);}}publicvoidtestSegment()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();longtimeMillis=System.currentTimeMillis();act.build(map);System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\");LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\");timeMillis=System.currentTimeMillis();for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}}System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis);}publicvoidtestHasKeyword()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));}assertTrue(trie.hasKeyword(\"ushers\"));assertFalse(trie.hasKeyword(\"构建耗时\"));}} "]
38415[label="methodDeclaration\n publicvoidtestAC()throwsException{Trietrie=newTrie();trie.addKeyword(\"hers\");trie.addKeyword(\"his\");trie.addKeyword(\"she\");trie.addKeyword(\"he\");Collection<Emit>emits=trie.parseText(\"ushers\");System.out.println(emits);} "]
48416[label="methodModifier\n public "]
48417[label="methodHeader\n voidtestAC()throwsException "]
58418[label="result\n void "]
58419[label="methodDeclarator\n testAC() "]
58420[label="throws_\n throwsException "]
68421[label="classType\n Exception "]
48422[label="block\n {Trietrie=newTrie();trie.addKeyword(\"hers\");trie.addKeyword(\"his\");trie.addKeyword(\"she\");trie.addKeyword(\"he\");Collection<Emit>emits=trie.parseText(\"ushers\");System.out.println(emits);} "]
58423[label="blockStatements\n Trietrie=newTrie();trie.addKeyword(\"hers\");trie.addKeyword(\"his\");trie.addKeyword(\"she\");trie.addKeyword(\"he\");Collection<Emit>emits=trie.parseText(\"ushers\");System.out.println(emits); "]
68424[label="localVariableDeclarationStatement\n Trietrie=newTrie(); "]
78425[label="localVariableDeclaration\n Trietrie=newTrie() "]
88426[label="unannClassType_lfno_unannClassOrInterfaceType\n Trie "]
88427[label="variableDeclarator\n trie=newTrie() "]
98428[label="variableDeclaratorId\n trie "]
98429[label="classInstanceCreationExpression_lfno_primary\n newTrie() "]
68430[label="expressionStatement\n trie.addKeyword(\"hers\"); "]
78431[label="methodInvocation\n trie.addKeyword(\"hers\") "]
88432[label="typeName\n trie "]
88433[label="literal\n \"hers\" "]
68434[label="expressionStatement\n trie.addKeyword(\"his\"); "]
78435[label="methodInvocation\n trie.addKeyword(\"his\") "]
88436[label="typeName\n trie "]
88437[label="literal\n \"his\" "]
68438[label="expressionStatement\n trie.addKeyword(\"she\"); "]
78439[label="methodInvocation\n trie.addKeyword(\"she\") "]
88440[label="typeName\n trie "]
88441[label="literal\n \"she\" "]
68442[label="expressionStatement\n trie.addKeyword(\"he\"); "]
78443[label="methodInvocation\n trie.addKeyword(\"he\") "]
88444[label="typeName\n trie "]
88445[label="literal\n \"he\" "]
68446[label="localVariableDeclarationStatement\n Collection<Emit>emits=trie.parseText(\"ushers\"); "]
78447[label="localVariableDeclaration\n Collection<Emit>emits=trie.parseText(\"ushers\") "]
88448[label="unannClassType_lfno_unannClassOrInterfaceType\n Collection<Emit> "]
98449[label="typeArguments\n <Emit> "]
108450[label="classType_lfno_classOrInterfaceType\n Emit "]
88451[label="variableDeclarator\n emits=trie.parseText(\"ushers\") "]
98452[label="variableDeclaratorId\n emits "]
98453[label="methodInvocation_lfno_primary\n trie.parseText(\"ushers\") "]
108454[label="typeName\n trie "]
108455[label="literal\n \"ushers\" "]
68456[label="expressionStatement\n System.out.println(emits); "]
78457[label="methodInvocation\n System.out.println(emits) "]
88458[label="typeName\n System.out "]
98459[label="packageOrTypeName\n System "]
88460[label="expressionName\n emits "]
38461[label="methodDeclaration\n publicvoidtestBuild()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}});} "]
48462[label="methodModifier\n public "]
48463[label="methodHeader\n voidtestBuild()throwsException "]
58464[label="result\n void "]
58465[label="methodDeclarator\n testBuild() "]
58466[label="throws_\n throwsException "]
68467[label="classType\n Exception "]
48468[label="block\n {TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}});} "]
58469[label="blockStatements\n TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}}); "]
68470[label="localVariableDeclarationStatement\n TreeMap<String,String>map=newTreeMap<String,String>(); "]
78471[label="localVariableDeclaration\n TreeMap<String,String>map=newTreeMap<String,String>() "]
88472[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
98473[label="typeArguments\n <String,String> "]
108474[label="typeArgumentList\n String,String "]
118475[label="classType_lfno_classOrInterfaceType\n String "]
118476[label="classType_lfno_classOrInterfaceType\n String "]
88477[label="variableDeclarator\n map=newTreeMap<String,String>() "]
98478[label="variableDeclaratorId\n map "]
98479[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
108480[label="typeArguments\n <String,String> "]
118481[label="typeArgumentList\n String,String "]
128482[label="classType_lfno_classOrInterfaceType\n String "]
128483[label="classType_lfno_classOrInterfaceType\n String "]
68484[label="localVariableDeclarationStatement\n String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"}; "]
78485[label="localVariableDeclaration\n String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
88486[label="unannArrayType\n String[] "]
98487[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
98488[label="dims\n [] "]
88489[label="variableDeclarator\n keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
98490[label="variableDeclaratorId\n keyArray "]
98491[label="arrayCreationExpression\n newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
108492[label="classType_lfno_classOrInterfaceType\n String "]
108493[label="dims\n [] "]
108494[label="arrayInitializer\n {\"hers\",\"his\",\"she\",\"he\"} "]
118495[label="variableInitializerList\n \"hers\",\"his\",\"she\",\"he\" "]
128496[label="literal\n \"hers\" "]
128497[label="literal\n \"his\" "]
128498[label="literal\n \"she\" "]
128499[label="literal\n \"he\" "]
68500[label="enhancedForStatement\n for(Stringkey:keyArray){map.put(key,key);} "]
78501[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
78502[label="variableDeclaratorId\n key "]
78503[label="expressionName\n keyArray "]
78504[label="block\n {map.put(key,key);} "]
88505[label="expressionStatement\n map.put(key,key); "]
98506[label="methodInvocation\n map.put(key,key) "]
108507[label="typeName\n map "]
108508[label="argumentList\n key,key "]
118509[label="expressionName\n key "]
118510[label="expressionName\n key "]
68511[label="localVariableDeclarationStatement\n AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>(); "]
78512[label="localVariableDeclaration\n AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>() "]
88513[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
98514[label="typeArguments\n <String> "]
108515[label="classType_lfno_classOrInterfaceType\n String "]
88516[label="variableDeclarator\n act=newAhoCorasickDoubleArrayTrie<String>() "]
98517[label="variableDeclaratorId\n act "]
98518[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie<String>() "]
108519[label="typeArguments\n <String> "]
118520[label="classType_lfno_classOrInterfaceType\n String "]
68521[label="expressionStatement\n act.build(map); "]
78522[label="methodInvocation\n act.build(map) "]
88523[label="typeName\n act "]
88524[label="expressionName\n map "]
68525[label="expressionStatement\n act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}}); "]
78526[label="methodInvocation\n act.parseText(\"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}}) "]
88527[label="typeName\n act "]
88528[label="argumentList\n \"uhers\",newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}} "]
98529[label="literal\n \"uhers\" "]
98530[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}} "]
108531[label="typeArguments\n <String> "]
118532[label="classType_lfno_classOrInterfaceType\n String "]
108533[label="classBody\n {@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);}} "]
118534[label="methodDeclaration\n @Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);} "]
128535[label="markerAnnotation\n @Override "]
138536[label="typeName\n Override "]
128537[label="methodModifier\n public "]
128538[label="methodHeader\n voidhit(intbegin,intend,Stringvalue) "]
138539[label="result\n void "]
138540[label="methodDeclarator\n hit(intbegin,intend,Stringvalue) "]
148541[label="formalParameterList\n intbegin,intend,Stringvalue "]
158542[label="formalParameters\n intbegin,intend "]
168543[label="formalParameter\n intbegin "]
178544[label="integralType\n int "]
178545[label="variableDeclaratorId\n begin "]
168546[label="formalParameter\n intend "]
178547[label="integralType\n int "]
178548[label="variableDeclaratorId\n end "]
158549[label="formalParameter\n Stringvalue "]
168550[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
168551[label="variableDeclaratorId\n value "]
128552[label="block\n {System.out.printf(\"[%d:%d]=%s\n\",begin,end,value);} "]
138553[label="expressionStatement\n System.out.printf(\"[%d:%d]=%s\n\",begin,end,value); "]
148554[label="methodInvocation\n System.out.printf(\"[%d:%d]=%s\n\",begin,end,value) "]
158555[label="typeName\n System.out "]
168556[label="packageOrTypeName\n System "]
158557[label="argumentList\n \"[%d:%d]=%s\n\",begin,end,value "]
168558[label="literal\n \"[%d:%d]=%s\n\" "]
168559[label="expressionName\n begin "]
168560[label="expressionName\n end "]
168561[label="expressionName\n value "]
38562[label="methodDeclaration\n publicvoidtestDatFromFile()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));}} "]
48563[label="methodModifier\n public "]
48564[label="methodHeader\n voidtestDatFromFile()throwsException "]
58565[label="result\n void "]
58566[label="methodDeclarator\n testDatFromFile() "]
58567[label="throws_\n throwsException "]
68568[label="classType\n Exception "]
48569[label="block\n {TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));}} "]
58570[label="blockStatements\n TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));} "]
68571[label="localVariableDeclarationStatement\n TreeMap<String,String>map=newTreeMap<String,String>(); "]
78572[label="localVariableDeclaration\n TreeMap<String,String>map=newTreeMap<String,String>() "]
88573[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
98574[label="typeArguments\n <String,String> "]
108575[label="typeArgumentList\n String,String "]
118576[label="classType_lfno_classOrInterfaceType\n String "]
118577[label="classType_lfno_classOrInterfaceType\n String "]
88578[label="variableDeclarator\n map=newTreeMap<String,String>() "]
98579[label="variableDeclaratorId\n map "]
98580[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
108581[label="typeArguments\n <String,String> "]
118582[label="typeArgumentList\n String,String "]
128583[label="classType_lfno_classOrInterfaceType\n String "]
128584[label="classType_lfno_classOrInterfaceType\n String "]
68585[label="localVariableDeclarationStatement\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\"); "]
78586[label="localVariableDeclaration\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\") "]
88587[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
98588[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
98589[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
88590[label="variableDeclarator\n iterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\") "]
98591[label="variableDeclaratorId\n iterator "]
98592[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\") "]
108593[label="literal\n \"data/dictionary/CoreNatureDictionary.mini.txt\" "]
68594[label="whileStatement\n while(iterator.hasNext()){Stringline=iterator.next();map.put(line,line);} "]
78595[label="methodInvocation_lfno_primary\n iterator.hasNext() "]
88596[label="typeName\n iterator "]
78597[label="block\n {Stringline=iterator.next();map.put(line,line);} "]
88598[label="blockStatements\n Stringline=iterator.next();map.put(line,line); "]
98599[label="localVariableDeclarationStatement\n Stringline=iterator.next(); "]
108600[label="localVariableDeclaration\n Stringline=iterator.next() "]
118601[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
118602[label="variableDeclarator\n line=iterator.next() "]
128603[label="variableDeclaratorId\n line "]
128604[label="methodInvocation_lfno_primary\n iterator.next() "]
138605[label="typeName\n iterator "]
98606[label="expressionStatement\n map.put(line,line); "]
108607[label="methodInvocation\n map.put(line,line) "]
118608[label="typeName\n map "]
118609[label="argumentList\n line,line "]
128610[label="expressionName\n line "]
128611[label="expressionName\n line "]
68612[label="localVariableDeclarationStatement\n DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>(); "]
78613[label="localVariableDeclaration\n DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>() "]
88614[label="unannClassType_lfno_unannClassOrInterfaceType\n DoubleArrayTrie<String> "]
98615[label="typeArguments\n <String> "]
108616[label="classType_lfno_classOrInterfaceType\n String "]
88617[label="variableDeclarator\n trie=newDoubleArrayTrie<String>() "]
98618[label="variableDeclaratorId\n trie "]
98619[label="classInstanceCreationExpression_lfno_primary\n newDoubleArrayTrie<String>() "]
108620[label="typeArguments\n <String> "]
118621[label="classType_lfno_classOrInterfaceType\n String "]
68622[label="expressionStatement\n trie.build(map); "]
78623[label="methodInvocation\n trie.build(map) "]
88624[label="typeName\n trie "]
88625[label="expressionName\n map "]
68626[label="enhancedForStatement\n for(Stringkey:map.keySet()){assertEquals(key,trie.get(key));} "]
78627[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
78628[label="variableDeclaratorId\n key "]
78629[label="methodInvocation_lfno_primary\n map.keySet() "]
88630[label="typeName\n map "]
78631[label="block\n {assertEquals(key,trie.get(key));} "]
88632[label="expressionStatement\n assertEquals(key,trie.get(key)); "]
98633[label="methodInvocation\n assertEquals(key,trie.get(key)) "]
108634[label="methodName\n assertEquals "]
108635[label="argumentList\n key,trie.get(key) "]
118636[label="expressionName\n key "]
118637[label="methodInvocation_lfno_primary\n trie.get(key) "]
128638[label="typeName\n trie "]
128639[label="expressionName\n key "]
38640[label="methodDeclaration\n publicvoidtestDat()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);System.out.println(trie.exactMatchSearch(\"he\"));} "]
48641[label="methodModifier\n public "]
48642[label="methodHeader\n voidtestDat()throwsException "]
58643[label="result\n void "]
58644[label="methodDeclarator\n testDat() "]
58645[label="throws_\n throwsException "]
68646[label="classType\n Exception "]
48647[label="block\n {TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);System.out.println(trie.exactMatchSearch(\"he\"));} "]
58648[label="blockStatements\n TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>();trie.build(map);System.out.println(trie.exactMatchSearch(\"he\")); "]
68649[label="localVariableDeclarationStatement\n TreeMap<String,String>map=newTreeMap<String,String>(); "]
78650[label="localVariableDeclaration\n TreeMap<String,String>map=newTreeMap<String,String>() "]
88651[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
98652[label="typeArguments\n <String,String> "]
108653[label="typeArgumentList\n String,String "]
118654[label="classType_lfno_classOrInterfaceType\n String "]
118655[label="classType_lfno_classOrInterfaceType\n String "]
88656[label="variableDeclarator\n map=newTreeMap<String,String>() "]
98657[label="variableDeclaratorId\n map "]
98658[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
108659[label="typeArguments\n <String,String> "]
118660[label="typeArgumentList\n String,String "]
128661[label="classType_lfno_classOrInterfaceType\n String "]
128662[label="classType_lfno_classOrInterfaceType\n String "]
68663[label="localVariableDeclarationStatement\n String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"}; "]
78664[label="localVariableDeclaration\n String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
88665[label="unannArrayType\n String[] "]
98666[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
98667[label="dims\n [] "]
88668[label="variableDeclarator\n keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
98669[label="variableDeclaratorId\n keyArray "]
98670[label="arrayCreationExpression\n newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
108671[label="classType_lfno_classOrInterfaceType\n String "]
108672[label="dims\n [] "]
108673[label="arrayInitializer\n {\"hers\",\"his\",\"she\",\"he\"} "]
118674[label="variableInitializerList\n \"hers\",\"his\",\"she\",\"he\" "]
128675[label="literal\n \"hers\" "]
128676[label="literal\n \"his\" "]
128677[label="literal\n \"she\" "]
128678[label="literal\n \"he\" "]
68679[label="enhancedForStatement\n for(Stringkey:keyArray){map.put(key,key);} "]
78680[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
78681[label="variableDeclaratorId\n key "]
78682[label="expressionName\n keyArray "]
78683[label="block\n {map.put(key,key);} "]
88684[label="expressionStatement\n map.put(key,key); "]
98685[label="methodInvocation\n map.put(key,key) "]
108686[label="typeName\n map "]
108687[label="argumentList\n key,key "]
118688[label="expressionName\n key "]
118689[label="expressionName\n key "]
68690[label="localVariableDeclarationStatement\n DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>(); "]
78691[label="localVariableDeclaration\n DoubleArrayTrie<String>trie=newDoubleArrayTrie<String>() "]
88692[label="unannClassType_lfno_unannClassOrInterfaceType\n DoubleArrayTrie<String> "]
98693[label="typeArguments\n <String> "]
108694[label="classType_lfno_classOrInterfaceType\n String "]
88695[label="variableDeclarator\n trie=newDoubleArrayTrie<String>() "]
98696[label="variableDeclaratorId\n trie "]
98697[label="classInstanceCreationExpression_lfno_primary\n newDoubleArrayTrie<String>() "]
108698[label="typeArguments\n <String> "]
118699[label="classType_lfno_classOrInterfaceType\n String "]
68700[label="expressionStatement\n trie.build(map); "]
78701[label="methodInvocation\n trie.build(map) "]
88702[label="typeName\n trie "]
88703[label="expressionName\n map "]
68704[label="expressionStatement\n System.out.println(trie.exactMatchSearch(\"he\")); "]
78705[label="methodInvocation\n System.out.println(trie.exactMatchSearch(\"he\")) "]
88706[label="typeName\n System.out "]
98707[label="packageOrTypeName\n System "]
88708[label="methodInvocation_lfno_primary\n trie.exactMatchSearch(\"he\") "]
98709[label="typeName\n trie "]
98710[label="literal\n \"he\" "]
38711[label="methodDeclaration\n publicvoidtestTwoStruct()throwsException{} "]
48712[label="methodModifier\n public "]
48713[label="methodHeader\n voidtestTwoStruct()throwsException "]
58714[label="result\n void "]
58715[label="methodDeclarator\n testTwoStruct() "]
58716[label="throws_\n throwsException "]
68717[label="classType\n Exception "]
48718[label="block\n {} "]
38719[label="methodDeclaration\n publicvoidtestTwoAC()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);}} "]
48720[label="methodModifier\n public "]
48721[label="methodHeader\n voidtestTwoAC()throwsException "]
58722[label="result\n void "]
58723[label="methodDeclarator\n testTwoAC() "]
58724[label="throws_\n throwsException "]
68725[label="classType\n Exception "]
48726[label="block\n {TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);}} "]
58727[label="blockStatements\n TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();act.build(map);for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);} "]
68728[label="localVariableDeclarationStatement\n TreeMap<String,String>map=newTreeMap<String,String>(); "]
78729[label="localVariableDeclaration\n TreeMap<String,String>map=newTreeMap<String,String>() "]
88730[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
98731[label="typeArguments\n <String,String> "]
108732[label="typeArgumentList\n String,String "]
118733[label="classType_lfno_classOrInterfaceType\n String "]
118734[label="classType_lfno_classOrInterfaceType\n String "]
88735[label="variableDeclarator\n map=newTreeMap<String,String>() "]
98736[label="variableDeclaratorId\n map "]
98737[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
108738[label="typeArguments\n <String,String> "]
118739[label="typeArgumentList\n String,String "]
128740[label="classType_lfno_classOrInterfaceType\n String "]
128741[label="classType_lfno_classOrInterfaceType\n String "]
68742[label="localVariableDeclarationStatement\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\"); "]
78743[label="localVariableDeclaration\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\") "]
88744[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
98745[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
98746[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
88747[label="variableDeclarator\n iterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\") "]
98748[label="variableDeclaratorId\n iterator "]
98749[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.mini.txt\") "]
108750[label="literal\n \"data/dictionary/CoreNatureDictionary.mini.txt\" "]
68751[label="whileStatement\n while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);} "]
78752[label="methodInvocation_lfno_primary\n iterator.hasNext() "]
88753[label="typeName\n iterator "]
78754[label="block\n {Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);} "]
88755[label="blockStatements\n Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line); "]
98756[label="localVariableDeclarationStatement\n Stringline=iterator.next().split(\"\\s\")[0]; "]
108757[label="localVariableDeclaration\n Stringline=iterator.next().split(\"\\s\")[0] "]
118758[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
118759[label="variableDeclarator\n line=iterator.next().split(\"\\s\")[0] "]
128760[label="variableDeclaratorId\n line "]
128761[label="primary\n iterator.next().split(\"\\s\")[0] "]
138762[label="methodInvocation_lfno_primary\n iterator.next() "]
148763[label="typeName\n iterator "]
138764[label="arrayAccess_lf_primary\n .split(\"\\s\")[0] "]
148765[label="methodInvocation_lf_primary\n .split(\"\\s\") "]
158766[label="literal\n \"\\s\" "]
148767[label="literal\n 0 "]
98768[label="expressionStatement\n map.put(line,line); "]
108769[label="methodInvocation\n map.put(line,line) "]
118770[label="typeName\n map "]
118771[label="argumentList\n line,line "]
128772[label="expressionName\n line "]
128773[label="expressionName\n line "]
68774[label="localVariableDeclarationStatement\n Trietrie=newTrie(); "]
78775[label="localVariableDeclaration\n Trietrie=newTrie() "]
88776[label="unannClassType_lfno_unannClassOrInterfaceType\n Trie "]
88777[label="variableDeclarator\n trie=newTrie() "]
98778[label="variableDeclaratorId\n trie "]
98779[label="classInstanceCreationExpression_lfno_primary\n newTrie() "]
68780[label="expressionStatement\n trie.addAllKeyword(map.keySet()); "]
78781[label="methodInvocation\n trie.addAllKeyword(map.keySet()) "]
88782[label="typeName\n trie "]
88783[label="methodInvocation_lfno_primary\n map.keySet() "]
98784[label="typeName\n map "]
68785[label="localVariableDeclarationStatement\n AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>(); "]
78786[label="localVariableDeclaration\n AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>() "]
88787[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
98788[label="typeArguments\n <String> "]
108789[label="classType_lfno_classOrInterfaceType\n String "]
88790[label="variableDeclarator\n act=newAhoCorasickDoubleArrayTrie<String>() "]
98791[label="variableDeclaratorId\n act "]
98792[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie<String>() "]
108793[label="typeArguments\n <String> "]
118794[label="classType_lfno_classOrInterfaceType\n String "]
68795[label="expressionStatement\n act.build(map); "]
78796[label="methodInvocation\n act.build(map) "]
88797[label="typeName\n act "]
88798[label="expressionName\n map "]
68799[label="enhancedForStatement\n for(Stringkey:map.keySet()){Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);} "]
78800[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
78801[label="variableDeclaratorId\n key "]
78802[label="methodInvocation_lfno_primary\n map.keySet() "]
88803[label="typeName\n map "]
78804[label="block\n {Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet);} "]
88805[label="blockStatements\n Collection<Emit>emits=trie.parseText(key);Set<String>otherSet=newHashSet<String>();for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());}List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key);Set<String>mySet=newHashSet<String>();for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));}assertEquals(otherSet,mySet); "]
98806[label="localVariableDeclarationStatement\n Collection<Emit>emits=trie.parseText(key); "]
108807[label="localVariableDeclaration\n Collection<Emit>emits=trie.parseText(key) "]
118808[label="unannClassType_lfno_unannClassOrInterfaceType\n Collection<Emit> "]
128809[label="typeArguments\n <Emit> "]
138810[label="classType_lfno_classOrInterfaceType\n Emit "]
118811[label="variableDeclarator\n emits=trie.parseText(key) "]
128812[label="variableDeclaratorId\n emits "]
128813[label="methodInvocation_lfno_primary\n trie.parseText(key) "]
138814[label="typeName\n trie "]
138815[label="expressionName\n key "]
98816[label="localVariableDeclarationStatement\n Set<String>otherSet=newHashSet<String>(); "]
108817[label="localVariableDeclaration\n Set<String>otherSet=newHashSet<String>() "]
118818[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
128819[label="typeArguments\n <String> "]
138820[label="classType_lfno_classOrInterfaceType\n String "]
118821[label="variableDeclarator\n otherSet=newHashSet<String>() "]
128822[label="variableDeclaratorId\n otherSet "]
128823[label="classInstanceCreationExpression_lfno_primary\n newHashSet<String>() "]
138824[label="typeArguments\n <String> "]
148825[label="classType_lfno_classOrInterfaceType\n String "]
98826[label="enhancedForStatement\n for(Emitemit:emits){otherSet.add(emit.getKeyword()+emit.getEnd());} "]
108827[label="unannClassType_lfno_unannClassOrInterfaceType\n Emit "]
108828[label="variableDeclaratorId\n emit "]
108829[label="expressionName\n emits "]
108830[label="block\n {otherSet.add(emit.getKeyword()+emit.getEnd());} "]
118831[label="expressionStatement\n otherSet.add(emit.getKeyword()+emit.getEnd()); "]
128832[label="methodInvocation\n otherSet.add(emit.getKeyword()+emit.getEnd()) "]
138833[label="typeName\n otherSet "]
138834[label="additiveExpression\n emit.getKeyword()+emit.getEnd() "]
148835[label="methodInvocation_lfno_primary\n emit.getKeyword() "]
158836[label="typeName\n emit "]
148837[label="methodInvocation_lfno_primary\n emit.getEnd() "]
158838[label="typeName\n emit "]
98839[label="localVariableDeclarationStatement\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key); "]
108840[label="localVariableDeclaration\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entries=act.parseText(key) "]
118841[label="unannClassType_lfno_unannClassOrInterfaceType\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>> "]
128842[label="typeArguments\n <AhoCorasickDoubleArrayTrie<String>.Hit<String>> "]
138843[label="classOrInterfaceType\n AhoCorasickDoubleArrayTrie<String>.Hit<String> "]
148844[label="classType_lfno_classOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
158845[label="typeArguments\n <String> "]
168846[label="classType_lfno_classOrInterfaceType\n String "]
148847[label="classType_lf_classOrInterfaceType\n .Hit<String> "]
158848[label="typeArguments\n <String> "]
168849[label="classType_lfno_classOrInterfaceType\n String "]
118850[label="variableDeclarator\n entries=act.parseText(key) "]
128851[label="variableDeclaratorId\n entries "]
128852[label="methodInvocation_lfno_primary\n act.parseText(key) "]
138853[label="typeName\n act "]
138854[label="expressionName\n key "]
98855[label="localVariableDeclarationStatement\n Set<String>mySet=newHashSet<String>(); "]
108856[label="localVariableDeclaration\n Set<String>mySet=newHashSet<String>() "]
118857[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
128858[label="typeArguments\n <String> "]
138859[label="classType_lfno_classOrInterfaceType\n String "]
118860[label="variableDeclarator\n mySet=newHashSet<String>() "]
128861[label="variableDeclaratorId\n mySet "]
128862[label="classInstanceCreationExpression_lfno_primary\n newHashSet<String>() "]
138863[label="typeArguments\n <String> "]
148864[label="classType_lfno_classOrInterfaceType\n String "]
98865[label="enhancedForStatement\n for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entries){mySet.add(entry.value+(entry.end-1));} "]
108866[label="unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String>.Hit<String> "]
118867[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
128868[label="typeArguments\n <String> "]
138869[label="classType_lfno_classOrInterfaceType\n String "]
118870[label="unannClassType_lf_unannClassOrInterfaceType\n .Hit<String> "]
128871[label="typeArguments\n <String> "]
138872[label="classType_lfno_classOrInterfaceType\n String "]
108873[label="variableDeclaratorId\n entry "]
108874[label="expressionName\n entries "]
108875[label="block\n {mySet.add(entry.value+(entry.end-1));} "]
118876[label="expressionStatement\n mySet.add(entry.value+(entry.end-1)); "]
128877[label="methodInvocation\n mySet.add(entry.value+(entry.end-1)) "]
138878[label="typeName\n mySet "]
138879[label="additiveExpression\n entry.value+(entry.end-1) "]
148880[label="expressionName\n entry.value "]
158881[label="ambiguousName\n entry "]
148882[label="primaryNoNewArray_lfno_primary\n (entry.end-1) "]
158883[label="additiveExpression\n entry.end-1 "]
168884[label="expressionName\n entry.end "]
178885[label="ambiguousName\n entry "]
168886[label="literal\n 1 "]
98887[label="expressionStatement\n assertEquals(otherSet,mySet); "]
108888[label="methodInvocation\n assertEquals(otherSet,mySet) "]
118889[label="methodName\n assertEquals "]
118890[label="argumentList\n otherSet,mySet "]
128891[label="expressionName\n otherSet "]
128892[label="expressionName\n mySet "]
38893[label="methodDeclaration\n publicvoidtestSegment()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();longtimeMillis=System.currentTimeMillis();act.build(map);System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\");LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\");timeMillis=System.currentTimeMillis();for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}}System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis);} "]
48894[label="methodModifier\n public "]
48895[label="methodHeader\n voidtestSegment()throwsException "]
58896[label="result\n void "]
58897[label="methodDeclarator\n testSegment() "]
58898[label="throws_\n throwsException "]
68899[label="classType\n Exception "]
48900[label="block\n {TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();longtimeMillis=System.currentTimeMillis();act.build(map);System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\");LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\");timeMillis=System.currentTimeMillis();for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}}System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis);} "]
58901[label="blockStatements\n TreeMap<String,String>map=newTreeMap<String,String>();IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\");while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>();longtimeMillis=System.currentTimeMillis();act.build(map);System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\");LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\");timeMillis=System.currentTimeMillis();for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}}System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis); "]
68902[label="localVariableDeclarationStatement\n TreeMap<String,String>map=newTreeMap<String,String>(); "]
78903[label="localVariableDeclaration\n TreeMap<String,String>map=newTreeMap<String,String>() "]
88904[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
98905[label="typeArguments\n <String,String> "]
108906[label="typeArgumentList\n String,String "]
118907[label="classType_lfno_classOrInterfaceType\n String "]
118908[label="classType_lfno_classOrInterfaceType\n String "]
88909[label="variableDeclarator\n map=newTreeMap<String,String>() "]
98910[label="variableDeclaratorId\n map "]
98911[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
108912[label="typeArguments\n <String,String> "]
118913[label="typeArgumentList\n String,String "]
128914[label="classType_lfno_classOrInterfaceType\n String "]
128915[label="classType_lfno_classOrInterfaceType\n String "]
68916[label="localVariableDeclarationStatement\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\"); "]
78917[label="localVariableDeclaration\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\") "]
88918[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
98919[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
98920[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
88921[label="variableDeclarator\n iterator=newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\") "]
98922[label="variableDeclaratorId\n iterator "]
98923[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(\"data/dictionary/CoreNatureDictionary.txt\") "]
108924[label="literal\n \"data/dictionary/CoreNatureDictionary.txt\" "]
68925[label="whileStatement\n while(iterator.hasNext()){Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);} "]
78926[label="methodInvocation_lfno_primary\n iterator.hasNext() "]
88927[label="typeName\n iterator "]
78928[label="block\n {Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line);} "]
88929[label="blockStatements\n Stringline=iterator.next().split(\"\\s\")[0];map.put(line,line); "]
98930[label="localVariableDeclarationStatement\n Stringline=iterator.next().split(\"\\s\")[0]; "]
108931[label="localVariableDeclaration\n Stringline=iterator.next().split(\"\\s\")[0] "]
118932[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
118933[label="variableDeclarator\n line=iterator.next().split(\"\\s\")[0] "]
128934[label="variableDeclaratorId\n line "]
128935[label="primary\n iterator.next().split(\"\\s\")[0] "]
138936[label="methodInvocation_lfno_primary\n iterator.next() "]
148937[label="typeName\n iterator "]
138938[label="arrayAccess_lf_primary\n .split(\"\\s\")[0] "]
148939[label="methodInvocation_lf_primary\n .split(\"\\s\") "]
158940[label="literal\n \"\\s\" "]
148941[label="literal\n 0 "]
98942[label="expressionStatement\n map.put(line,line); "]
108943[label="methodInvocation\n map.put(line,line) "]
118944[label="typeName\n map "]
118945[label="argumentList\n line,line "]
128946[label="expressionName\n line "]
128947[label="expressionName\n line "]
68948[label="localVariableDeclarationStatement\n Trietrie=newTrie(); "]
78949[label="localVariableDeclaration\n Trietrie=newTrie() "]
88950[label="unannClassType_lfno_unannClassOrInterfaceType\n Trie "]
88951[label="variableDeclarator\n trie=newTrie() "]
98952[label="variableDeclaratorId\n trie "]
98953[label="classInstanceCreationExpression_lfno_primary\n newTrie() "]
68954[label="expressionStatement\n trie.addAllKeyword(map.keySet()); "]
78955[label="methodInvocation\n trie.addAllKeyword(map.keySet()) "]
88956[label="typeName\n trie "]
88957[label="methodInvocation_lfno_primary\n map.keySet() "]
98958[label="typeName\n map "]
68959[label="localVariableDeclarationStatement\n AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>(); "]
78960[label="localVariableDeclaration\n AhoCorasickDoubleArrayTrie<String>act=newAhoCorasickDoubleArrayTrie<String>() "]
88961[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
98962[label="typeArguments\n <String> "]
108963[label="classType_lfno_classOrInterfaceType\n String "]
88964[label="variableDeclarator\n act=newAhoCorasickDoubleArrayTrie<String>() "]
98965[label="variableDeclaratorId\n act "]
98966[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie<String>() "]
108967[label="typeArguments\n <String> "]
118968[label="classType_lfno_classOrInterfaceType\n String "]
68969[label="localVariableDeclarationStatement\n longtimeMillis=System.currentTimeMillis(); "]
78970[label="localVariableDeclaration\n longtimeMillis=System.currentTimeMillis() "]
88971[label="integralType\n long "]
88972[label="variableDeclarator\n timeMillis=System.currentTimeMillis() "]
98973[label="variableDeclaratorId\n timeMillis "]
98974[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
108975[label="typeName\n System "]
68976[label="expressionStatement\n act.build(map); "]
78977[label="methodInvocation\n act.build(map) "]
88978[label="typeName\n act "]
88979[label="expressionName\n map "]
68980[label="expressionStatement\n System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\"); "]
78981[label="methodInvocation\n System.out.println(\"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\") "]
88982[label="typeName\n System.out "]
98983[label="packageOrTypeName\n System "]
88984[label="additiveExpression\n \"构建耗时：\"+(System.currentTimeMillis()-timeMillis)+\" ms\" "]
98985[label="additiveExpression\n \"构建耗时：\"+(System.currentTimeMillis()-timeMillis) "]
108986[label="literal\n \"构建耗时：\" "]
108987[label="primaryNoNewArray_lfno_primary\n (System.currentTimeMillis()-timeMillis) "]
118988[label="additiveExpression\n System.currentTimeMillis()-timeMillis "]
128989[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
138990[label="typeName\n System "]
128991[label="expressionName\n timeMillis "]
98992[label="literal\n \" ms\" "]
68993[label="localVariableDeclarationStatement\n LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\"); "]
78994[label="localVariableDeclaration\n LinkedList<String>lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\") "]
88995[label="unannClassType_lfno_unannClassOrInterfaceType\n LinkedList<String> "]
98996[label="typeArguments\n <String> "]
108997[label="classType_lfno_classOrInterfaceType\n String "]
88998[label="variableDeclarator\n lineList=IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\") "]
98999[label="variableDeclaratorId\n lineList "]
99000[label="methodInvocation_lfno_primary\n IOUtil.readLineList(\"D:\\Doc\\语料库\\《我的团长我的团》.txt\") "]
109001[label="typeName\n IOUtil "]
109002[label="literal\n \"D:\\Doc\\语料库\\《我的团长我的团》.txt\" "]
69003[label="expressionStatement\n timeMillis=System.currentTimeMillis(); "]
79004[label="assignment\n timeMillis=System.currentTimeMillis() "]
89005[label="expressionName\n timeMillis "]
89006[label="assignmentOperator\n = "]
89007[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
99008[label="typeName\n System "]
69009[label="enhancedForStatement\n for(Stringsentence:lineList){List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}} "]
79010[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
79011[label="variableDeclaratorId\n sentence "]
79012[label="expressionName\n lineList "]
79013[label="block\n {List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);}} "]
89014[label="blockStatements\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence);for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);} "]
99015[label="localVariableDeclarationStatement\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence); "]
109016[label="localVariableDeclaration\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>>entryList=act.parseText(sentence) "]
119017[label="unannClassType_lfno_unannClassOrInterfaceType\n List<AhoCorasickDoubleArrayTrie<String>.Hit<String>> "]
129018[label="typeArguments\n <AhoCorasickDoubleArrayTrie<String>.Hit<String>> "]
139019[label="classOrInterfaceType\n AhoCorasickDoubleArrayTrie<String>.Hit<String> "]
149020[label="classType_lfno_classOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
159021[label="typeArguments\n <String> "]
169022[label="classType_lfno_classOrInterfaceType\n String "]
149023[label="classType_lf_classOrInterfaceType\n .Hit<String> "]
159024[label="typeArguments\n <String> "]
169025[label="classType_lfno_classOrInterfaceType\n String "]
119026[label="variableDeclarator\n entryList=act.parseText(sentence) "]
129027[label="variableDeclaratorId\n entryList "]
129028[label="methodInvocation_lfno_primary\n act.parseText(sentence) "]
139029[label="typeName\n act "]
139030[label="expressionName\n sentence "]
99031[label="enhancedForStatement\n for(AhoCorasickDoubleArrayTrie<String>.Hit<String>entry:entryList){intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);} "]
109032[label="unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String>.Hit<String> "]
119033[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
129034[label="typeArguments\n <String> "]
139035[label="classType_lfno_classOrInterfaceType\n String "]
119036[label="unannClassType_lf_unannClassOrInterfaceType\n .Hit<String> "]
129037[label="typeArguments\n <String> "]
139038[label="classType_lfno_classOrInterfaceType\n String "]
109039[label="variableDeclaratorId\n entry "]
109040[label="expressionName\n entryList "]
109041[label="block\n {intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value);} "]
119042[label="blockStatements\n intend=entry.end;intstart=entry.begin;assertEquals(sentence.substring(start,end),entry.value); "]
129043[label="localVariableDeclarationStatement\n intend=entry.end; "]
139044[label="localVariableDeclaration\n intend=entry.end "]
149045[label="integralType\n int "]
149046[label="variableDeclarator\n end=entry.end "]
159047[label="variableDeclaratorId\n end "]
159048[label="expressionName\n entry.end "]
169049[label="ambiguousName\n entry "]
129050[label="localVariableDeclarationStatement\n intstart=entry.begin; "]
139051[label="localVariableDeclaration\n intstart=entry.begin "]
149052[label="integralType\n int "]
149053[label="variableDeclarator\n start=entry.begin "]
159054[label="variableDeclaratorId\n start "]
159055[label="expressionName\n entry.begin "]
169056[label="ambiguousName\n entry "]
129057[label="expressionStatement\n assertEquals(sentence.substring(start,end),entry.value); "]
139058[label="methodInvocation\n assertEquals(sentence.substring(start,end),entry.value) "]
149059[label="methodName\n assertEquals "]
149060[label="argumentList\n sentence.substring(start,end),entry.value "]
159061[label="methodInvocation_lfno_primary\n sentence.substring(start,end) "]
169062[label="typeName\n sentence "]
169063[label="argumentList\n start,end "]
179064[label="expressionName\n start "]
179065[label="expressionName\n end "]
159066[label="expressionName\n entry.value "]
169067[label="ambiguousName\n entry "]
69068[label="expressionStatement\n System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis); "]
79069[label="methodInvocation\n System.out.printf(\"%d ms\n\",System.currentTimeMillis()-timeMillis) "]
89070[label="typeName\n System.out "]
99071[label="packageOrTypeName\n System "]
89072[label="argumentList\n \"%d ms\n\",System.currentTimeMillis()-timeMillis "]
99073[label="literal\n \"%d ms\n\" "]
99074[label="additiveExpression\n System.currentTimeMillis()-timeMillis "]
109075[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
119076[label="typeName\n System "]
109077[label="expressionName\n timeMillis "]
39078[label="methodDeclaration\n publicvoidtestHasKeyword()throwsException{TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));}assertTrue(trie.hasKeyword(\"ushers\"));assertFalse(trie.hasKeyword(\"构建耗时\"));} "]
49079[label="methodModifier\n public "]
49080[label="methodHeader\n voidtestHasKeyword()throwsException "]
59081[label="result\n void "]
59082[label="methodDeclarator\n testHasKeyword() "]
59083[label="throws_\n throwsException "]
69084[label="classType\n Exception "]
49085[label="block\n {TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));}assertTrue(trie.hasKeyword(\"ushers\"));assertFalse(trie.hasKeyword(\"构建耗时\"));} "]
59086[label="blockStatements\n TreeMap<String,String>map=newTreeMap<String,String>();String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"};for(Stringkey:keyArray){map.put(key,key);}Trietrie=newTrie();trie.addAllKeyword(map.keySet());for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));}assertTrue(trie.hasKeyword(\"ushers\"));assertFalse(trie.hasKeyword(\"构建耗时\")); "]
69087[label="localVariableDeclarationStatement\n TreeMap<String,String>map=newTreeMap<String,String>(); "]
79088[label="localVariableDeclaration\n TreeMap<String,String>map=newTreeMap<String,String>() "]
89089[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
99090[label="typeArguments\n <String,String> "]
109091[label="typeArgumentList\n String,String "]
119092[label="classType_lfno_classOrInterfaceType\n String "]
119093[label="classType_lfno_classOrInterfaceType\n String "]
89094[label="variableDeclarator\n map=newTreeMap<String,String>() "]
99095[label="variableDeclaratorId\n map "]
99096[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
109097[label="typeArguments\n <String,String> "]
119098[label="typeArgumentList\n String,String "]
129099[label="classType_lfno_classOrInterfaceType\n String "]
129100[label="classType_lfno_classOrInterfaceType\n String "]
69101[label="localVariableDeclarationStatement\n String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"}; "]
79102[label="localVariableDeclaration\n String[]keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
89103[label="unannArrayType\n String[] "]
99104[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
99105[label="dims\n [] "]
89106[label="variableDeclarator\n keyArray=newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
99107[label="variableDeclaratorId\n keyArray "]
99108[label="arrayCreationExpression\n newString[]{\"hers\",\"his\",\"she\",\"he\"} "]
109109[label="classType_lfno_classOrInterfaceType\n String "]
109110[label="dims\n [] "]
109111[label="arrayInitializer\n {\"hers\",\"his\",\"she\",\"he\"} "]
119112[label="variableInitializerList\n \"hers\",\"his\",\"she\",\"he\" "]
129113[label="literal\n \"hers\" "]
129114[label="literal\n \"his\" "]
129115[label="literal\n \"she\" "]
129116[label="literal\n \"he\" "]
69117[label="enhancedForStatement\n for(Stringkey:keyArray){map.put(key,key);} "]
79118[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
79119[label="variableDeclaratorId\n key "]
79120[label="expressionName\n keyArray "]
79121[label="block\n {map.put(key,key);} "]
89122[label="expressionStatement\n map.put(key,key); "]
99123[label="methodInvocation\n map.put(key,key) "]
109124[label="typeName\n map "]
109125[label="argumentList\n key,key "]
119126[label="expressionName\n key "]
119127[label="expressionName\n key "]
69128[label="localVariableDeclarationStatement\n Trietrie=newTrie(); "]
79129[label="localVariableDeclaration\n Trietrie=newTrie() "]
89130[label="unannClassType_lfno_unannClassOrInterfaceType\n Trie "]
89131[label="variableDeclarator\n trie=newTrie() "]
99132[label="variableDeclaratorId\n trie "]
99133[label="classInstanceCreationExpression_lfno_primary\n newTrie() "]
69134[label="expressionStatement\n trie.addAllKeyword(map.keySet()); "]
79135[label="methodInvocation\n trie.addAllKeyword(map.keySet()) "]
89136[label="typeName\n trie "]
89137[label="methodInvocation_lfno_primary\n map.keySet() "]
99138[label="typeName\n map "]
69139[label="enhancedForStatement\n for(Stringkey:keyArray){assertTrue(trie.hasKeyword(key));} "]
79140[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
79141[label="variableDeclaratorId\n key "]
79142[label="expressionName\n keyArray "]
79143[label="block\n {assertTrue(trie.hasKeyword(key));} "]
89144[label="expressionStatement\n assertTrue(trie.hasKeyword(key)); "]
99145[label="methodInvocation\n assertTrue(trie.hasKeyword(key)) "]
109146[label="methodName\n assertTrue "]
109147[label="methodInvocation_lfno_primary\n trie.hasKeyword(key) "]
119148[label="typeName\n trie "]
119149[label="expressionName\n key "]
69150[label="expressionStatement\n assertTrue(trie.hasKeyword(\"ushers\")); "]
79151[label="methodInvocation\n assertTrue(trie.hasKeyword(\"ushers\")) "]
89152[label="methodName\n assertTrue "]
89153[label="methodInvocation_lfno_primary\n trie.hasKeyword(\"ushers\") "]
99154[label="typeName\n trie "]
99155[label="literal\n \"ushers\" "]
69156[label="expressionStatement\n assertFalse(trie.hasKeyword(\"构建耗时\")); "]
79157[label="methodInvocation\n assertFalse(trie.hasKeyword(\"构建耗时\")) "]
89158[label="methodName\n assertFalse "]
89159[label="methodInvocation_lfno_primary\n trie.hasKeyword(\"构建耗时\") "]
99160[label="typeName\n trie "]
99161[label="literal\n \"构建耗时\" "]
09162[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser;importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie;importcom.hankcs.hanlp.collection.trie.ITrie;importcom.hankcs.hanlp.corpus.io.ByteArray;importcom.hankcs.hanlp.corpus.io.ICacheAble;importcom.hankcs.hanlp.utility.TextUtility;importjava.io.DataOutputStream;importjava.util.Map;importjava.util.TreeMap;publicclassAlphabetimplementsICacheAble{ITrie<Integer>trie;String[]idToLabelMap;publicAlphabet(){trie=newDoubleArrayTrie<Integer>();}publicStringlabelOf(intid){returnidToLabelMap[id];}publicintbuild(TreeMap<String,Integer>keyValueMap){idToLabelMap=newString[keyValueMap.size()];for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();}returntrie.build(keyValueMap);}publicIntegeridOf(char[]label){returntrie.get(label);}publicIntegeridOf(Stringlabel){returntrie.get(label);}publicintsize(){returntrie.size();}publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(idToLabelMap.length);for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);}}publicbooleanload(ByteArraybyteArray){idToLabelMap=newString[byteArray.nextInt()];TreeMap<String,Integer>map=newTreeMap<String,Integer>();for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);}returntrie.build(map)==0;}}<EOF> "]
19163[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser; "]
29164[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
39165[label="packageName\n com.hankcs.hanlp.dependency "]
49166[label="packageName\n com.hankcs.hanlp "]
59167[label="packageName\n com.hankcs "]
69168[label="packageName\n com "]
19169[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie; "]
29170[label="typeName\n com.hankcs.hanlp.collection.trie.DoubleArrayTrie "]
39171[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
49172[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
59173[label="packageOrTypeName\n com.hankcs.hanlp "]
69174[label="packageOrTypeName\n com.hankcs "]
79175[label="packageOrTypeName\n com "]
19176[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.ITrie; "]
29177[label="typeName\n com.hankcs.hanlp.collection.trie.ITrie "]
39178[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
49179[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
59180[label="packageOrTypeName\n com.hankcs.hanlp "]
69181[label="packageOrTypeName\n com.hankcs "]
79182[label="packageOrTypeName\n com "]
19183[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.ByteArray; "]
29184[label="typeName\n com.hankcs.hanlp.corpus.io.ByteArray "]
39185[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
49186[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
59187[label="packageOrTypeName\n com.hankcs.hanlp "]
69188[label="packageOrTypeName\n com.hankcs "]
79189[label="packageOrTypeName\n com "]
19190[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.ICacheAble; "]
29191[label="typeName\n com.hankcs.hanlp.corpus.io.ICacheAble "]
39192[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
49193[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
59194[label="packageOrTypeName\n com.hankcs.hanlp "]
69195[label="packageOrTypeName\n com.hankcs "]
79196[label="packageOrTypeName\n com "]
19197[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.TextUtility; "]
29198[label="typeName\n com.hankcs.hanlp.utility.TextUtility "]
39199[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
49200[label="packageOrTypeName\n com.hankcs.hanlp "]
59201[label="packageOrTypeName\n com.hankcs "]
69202[label="packageOrTypeName\n com "]
19203[label="singleTypeImportDeclaration\n importjava.io.DataOutputStream; "]
29204[label="typeName\n java.io.DataOutputStream "]
39205[label="packageOrTypeName\n java.io "]
49206[label="packageOrTypeName\n java "]
19207[label="singleTypeImportDeclaration\n importjava.util.Map; "]
29208[label="typeName\n java.util.Map "]
39209[label="packageOrTypeName\n java.util "]
49210[label="packageOrTypeName\n java "]
19211[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
29212[label="typeName\n java.util.TreeMap "]
39213[label="packageOrTypeName\n java.util "]
49214[label="packageOrTypeName\n java "]
19215[label="normalClassDeclaration\n publicclassAlphabetimplementsICacheAble{ITrie<Integer>trie;String[]idToLabelMap;publicAlphabet(){trie=newDoubleArrayTrie<Integer>();}publicStringlabelOf(intid){returnidToLabelMap[id];}publicintbuild(TreeMap<String,Integer>keyValueMap){idToLabelMap=newString[keyValueMap.size()];for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();}returntrie.build(keyValueMap);}publicIntegeridOf(char[]label){returntrie.get(label);}publicIntegeridOf(Stringlabel){returntrie.get(label);}publicintsize(){returntrie.size();}publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(idToLabelMap.length);for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);}}publicbooleanload(ByteArraybyteArray){idToLabelMap=newString[byteArray.nextInt()];TreeMap<String,Integer>map=newTreeMap<String,Integer>();for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);}returntrie.build(map)==0;}} "]
29216[label="classModifier\n public "]
29217[label="superinterfaces\n implementsICacheAble "]
39218[label="classType\n ICacheAble "]
29219[label="classBody\n {ITrie<Integer>trie;String[]idToLabelMap;publicAlphabet(){trie=newDoubleArrayTrie<Integer>();}publicStringlabelOf(intid){returnidToLabelMap[id];}publicintbuild(TreeMap<String,Integer>keyValueMap){idToLabelMap=newString[keyValueMap.size()];for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();}returntrie.build(keyValueMap);}publicIntegeridOf(char[]label){returntrie.get(label);}publicIntegeridOf(Stringlabel){returntrie.get(label);}publicintsize(){returntrie.size();}publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(idToLabelMap.length);for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);}}publicbooleanload(ByteArraybyteArray){idToLabelMap=newString[byteArray.nextInt()];TreeMap<String,Integer>map=newTreeMap<String,Integer>();for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);}returntrie.build(map)==0;}} "]
39220[label="fieldDeclaration\n ITrie<Integer>trie; "]
49221[label="unannClassType_lfno_unannClassOrInterfaceType\n ITrie<Integer> "]
59222[label="typeArguments\n <Integer> "]
69223[label="classType_lfno_classOrInterfaceType\n Integer "]
49224[label="variableDeclaratorId\n trie "]
39225[label="fieldDeclaration\n String[]idToLabelMap; "]
49226[label="unannArrayType\n String[] "]
59227[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
59228[label="dims\n [] "]
49229[label="variableDeclaratorId\n idToLabelMap "]
39230[label="constructorDeclaration\n publicAlphabet(){trie=newDoubleArrayTrie<Integer>();} "]
49231[label="constructorModifier\n public "]
49232[label="constructorDeclarator\n Alphabet() "]
59233[label="simpleTypeName\n Alphabet "]
49234[label="constructorBody\n {trie=newDoubleArrayTrie<Integer>();} "]
59235[label="expressionStatement\n trie=newDoubleArrayTrie<Integer>(); "]
69236[label="assignment\n trie=newDoubleArrayTrie<Integer>() "]
79237[label="expressionName\n trie "]
79238[label="assignmentOperator\n = "]
79239[label="classInstanceCreationExpression_lfno_primary\n newDoubleArrayTrie<Integer>() "]
89240[label="typeArguments\n <Integer> "]
99241[label="classType_lfno_classOrInterfaceType\n Integer "]
39242[label="methodDeclaration\n publicStringlabelOf(intid){returnidToLabelMap[id];} "]
49243[label="methodModifier\n public "]
49244[label="methodHeader\n StringlabelOf(intid) "]
59245[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
59246[label="methodDeclarator\n labelOf(intid) "]
69247[label="formalParameter\n intid "]
79248[label="integralType\n int "]
79249[label="variableDeclaratorId\n id "]
49250[label="block\n {returnidToLabelMap[id];} "]
59251[label="returnStatement\n returnidToLabelMap[id]; "]
69252[label="arrayAccess_lfno_primary\n idToLabelMap[id] "]
79253[label="expressionName\n idToLabelMap "]
79254[label="expressionName\n id "]
39255[label="methodDeclaration\n publicintbuild(TreeMap<String,Integer>keyValueMap){idToLabelMap=newString[keyValueMap.size()];for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();}returntrie.build(keyValueMap);} "]
49256[label="methodModifier\n public "]
49257[label="methodHeader\n intbuild(TreeMap<String,Integer>keyValueMap) "]
59258[label="integralType\n int "]
59259[label="methodDeclarator\n build(TreeMap<String,Integer>keyValueMap) "]
69260[label="formalParameter\n TreeMap<String,Integer>keyValueMap "]
79261[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,Integer> "]
89262[label="typeArguments\n <String,Integer> "]
99263[label="typeArgumentList\n String,Integer "]
109264[label="classType_lfno_classOrInterfaceType\n String "]
109265[label="classType_lfno_classOrInterfaceType\n Integer "]
79266[label="variableDeclaratorId\n keyValueMap "]
49267[label="block\n {idToLabelMap=newString[keyValueMap.size()];for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();}returntrie.build(keyValueMap);} "]
59268[label="blockStatements\n idToLabelMap=newString[keyValueMap.size()];for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();}returntrie.build(keyValueMap); "]
69269[label="expressionStatement\n idToLabelMap=newString[keyValueMap.size()]; "]
79270[label="assignment\n idToLabelMap=newString[keyValueMap.size()] "]
89271[label="expressionName\n idToLabelMap "]
89272[label="assignmentOperator\n = "]
89273[label="arrayCreationExpression\n newString[keyValueMap.size()] "]
99274[label="classType_lfno_classOrInterfaceType\n String "]
99275[label="dimExpr\n [keyValueMap.size()] "]
109276[label="methodInvocation_lfno_primary\n keyValueMap.size() "]
119277[label="typeName\n keyValueMap "]
69278[label="enhancedForStatement\n for(Map.Entry<String,Integer>entry:keyValueMap.entrySet()){idToLabelMap[entry.getValue()]=entry.getKey();} "]
79279[label="unannClassOrInterfaceType\n Map.Entry<String,Integer> "]
89280[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
89281[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,Integer> "]
99282[label="typeArguments\n <String,Integer> "]
109283[label="typeArgumentList\n String,Integer "]
119284[label="classType_lfno_classOrInterfaceType\n String "]
119285[label="classType_lfno_classOrInterfaceType\n Integer "]
79286[label="variableDeclaratorId\n entry "]
79287[label="methodInvocation_lfno_primary\n keyValueMap.entrySet() "]
89288[label="typeName\n keyValueMap "]
79289[label="block\n {idToLabelMap[entry.getValue()]=entry.getKey();} "]
89290[label="expressionStatement\n idToLabelMap[entry.getValue()]=entry.getKey(); "]
99291[label="assignment\n idToLabelMap[entry.getValue()]=entry.getKey() "]
109292[label="arrayAccess\n idToLabelMap[entry.getValue()] "]
119293[label="expressionName\n idToLabelMap "]
119294[label="methodInvocation_lfno_primary\n entry.getValue() "]
129295[label="typeName\n entry "]
109296[label="assignmentOperator\n = "]
109297[label="methodInvocation_lfno_primary\n entry.getKey() "]
119298[label="typeName\n entry "]
69299[label="returnStatement\n returntrie.build(keyValueMap); "]
79300[label="methodInvocation_lfno_primary\n trie.build(keyValueMap) "]
89301[label="typeName\n trie "]
89302[label="expressionName\n keyValueMap "]
39303[label="methodDeclaration\n publicIntegeridOf(char[]label){returntrie.get(label);} "]
49304[label="methodModifier\n public "]
49305[label="methodHeader\n IntegeridOf(char[]label) "]
59306[label="unannClassType_lfno_unannClassOrInterfaceType\n Integer "]
59307[label="methodDeclarator\n idOf(char[]label) "]
69308[label="formalParameter\n char[]label "]
79309[label="unannArrayType\n char[] "]
89310[label="integralType\n char "]
89311[label="dims\n [] "]
79312[label="variableDeclaratorId\n label "]
49313[label="block\n {returntrie.get(label);} "]
59314[label="returnStatement\n returntrie.get(label); "]
69315[label="methodInvocation_lfno_primary\n trie.get(label) "]
79316[label="typeName\n trie "]
79317[label="expressionName\n label "]
39318[label="methodDeclaration\n publicIntegeridOf(Stringlabel){returntrie.get(label);} "]
49319[label="methodModifier\n public "]
49320[label="methodHeader\n IntegeridOf(Stringlabel) "]
59321[label="unannClassType_lfno_unannClassOrInterfaceType\n Integer "]
59322[label="methodDeclarator\n idOf(Stringlabel) "]
69323[label="formalParameter\n Stringlabel "]
79324[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
79325[label="variableDeclaratorId\n label "]
49326[label="block\n {returntrie.get(label);} "]
59327[label="returnStatement\n returntrie.get(label); "]
69328[label="methodInvocation_lfno_primary\n trie.get(label) "]
79329[label="typeName\n trie "]
79330[label="expressionName\n label "]
39331[label="methodDeclaration\n publicintsize(){returntrie.size();} "]
49332[label="methodModifier\n public "]
49333[label="methodHeader\n intsize() "]
59334[label="integralType\n int "]
59335[label="methodDeclarator\n size() "]
49336[label="block\n {returntrie.size();} "]
59337[label="returnStatement\n returntrie.size(); "]
69338[label="methodInvocation_lfno_primary\n trie.size() "]
79339[label="typeName\n trie "]
39340[label="methodDeclaration\n publicvoidsave(DataOutputStreamout)throwsException{out.writeInt(idToLabelMap.length);for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);}} "]
49341[label="methodModifier\n public "]
49342[label="methodHeader\n voidsave(DataOutputStreamout)throwsException "]
59343[label="result\n void "]
59344[label="methodDeclarator\n save(DataOutputStreamout) "]
69345[label="formalParameter\n DataOutputStreamout "]
79346[label="unannClassType_lfno_unannClassOrInterfaceType\n DataOutputStream "]
79347[label="variableDeclaratorId\n out "]
59348[label="throws_\n throwsException "]
69349[label="classType\n Exception "]
49350[label="block\n {out.writeInt(idToLabelMap.length);for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);}} "]
59351[label="blockStatements\n out.writeInt(idToLabelMap.length);for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);} "]
69352[label="expressionStatement\n out.writeInt(idToLabelMap.length); "]
79353[label="methodInvocation\n out.writeInt(idToLabelMap.length) "]
89354[label="typeName\n out "]
89355[label="expressionName\n idToLabelMap.length "]
99356[label="ambiguousName\n idToLabelMap "]
69357[label="enhancedForStatement\n for(Stringvalue:idToLabelMap){TextUtility.writeString(value,out);} "]
79358[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
79359[label="variableDeclaratorId\n value "]
79360[label="expressionName\n idToLabelMap "]
79361[label="block\n {TextUtility.writeString(value,out);} "]
89362[label="expressionStatement\n TextUtility.writeString(value,out); "]
99363[label="methodInvocation\n TextUtility.writeString(value,out) "]
109364[label="typeName\n TextUtility "]
109365[label="argumentList\n value,out "]
119366[label="expressionName\n value "]
119367[label="expressionName\n out "]
39368[label="methodDeclaration\n publicbooleanload(ByteArraybyteArray){idToLabelMap=newString[byteArray.nextInt()];TreeMap<String,Integer>map=newTreeMap<String,Integer>();for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);}returntrie.build(map)==0;} "]
49369[label="methodModifier\n public "]
49370[label="methodHeader\n booleanload(ByteArraybyteArray) "]
59371[label="unannPrimitiveType\n boolean "]
59372[label="methodDeclarator\n load(ByteArraybyteArray) "]
69373[label="formalParameter\n ByteArraybyteArray "]
79374[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
79375[label="variableDeclaratorId\n byteArray "]
49376[label="block\n {idToLabelMap=newString[byteArray.nextInt()];TreeMap<String,Integer>map=newTreeMap<String,Integer>();for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);}returntrie.build(map)==0;} "]
59377[label="blockStatements\n idToLabelMap=newString[byteArray.nextInt()];TreeMap<String,Integer>map=newTreeMap<String,Integer>();for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);}returntrie.build(map)==0; "]
69378[label="expressionStatement\n idToLabelMap=newString[byteArray.nextInt()]; "]
79379[label="assignment\n idToLabelMap=newString[byteArray.nextInt()] "]
89380[label="expressionName\n idToLabelMap "]
89381[label="assignmentOperator\n = "]
89382[label="arrayCreationExpression\n newString[byteArray.nextInt()] "]
99383[label="classType_lfno_classOrInterfaceType\n String "]
99384[label="dimExpr\n [byteArray.nextInt()] "]
109385[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
119386[label="typeName\n byteArray "]
69387[label="localVariableDeclarationStatement\n TreeMap<String,Integer>map=newTreeMap<String,Integer>(); "]
79388[label="localVariableDeclaration\n TreeMap<String,Integer>map=newTreeMap<String,Integer>() "]
89389[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,Integer> "]
99390[label="typeArguments\n <String,Integer> "]
109391[label="typeArgumentList\n String,Integer "]
119392[label="classType_lfno_classOrInterfaceType\n String "]
119393[label="classType_lfno_classOrInterfaceType\n Integer "]
89394[label="variableDeclarator\n map=newTreeMap<String,Integer>() "]
99395[label="variableDeclaratorId\n map "]
99396[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,Integer>() "]
109397[label="typeArguments\n <String,Integer> "]
119398[label="typeArgumentList\n String,Integer "]
129399[label="classType_lfno_classOrInterfaceType\n String "]
129400[label="classType_lfno_classOrInterfaceType\n Integer "]
69401[label="basicForStatement\n for(inti=0;i<idToLabelMap.length;i++){idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);} "]
79402[label="localVariableDeclaration\n inti=0 "]
89403[label="integralType\n int "]
89404[label="variableDeclarator\n i=0 "]
99405[label="variableDeclaratorId\n i "]
99406[label="literal\n 0 "]
79407[label="relationalExpression\n i<idToLabelMap.length "]
89408[label="expressionName\n i "]
89409[label="expressionName\n idToLabelMap.length "]
99410[label="ambiguousName\n idToLabelMap "]
79411[label="postIncrementExpression\n i++ "]
89412[label="expressionName\n i "]
79413[label="block\n {idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i);} "]
89414[label="blockStatements\n idToLabelMap[i]=byteArray.nextString();map.put(idToLabelMap[i],i); "]
99415[label="expressionStatement\n idToLabelMap[i]=byteArray.nextString(); "]
109416[label="assignment\n idToLabelMap[i]=byteArray.nextString() "]
119417[label="arrayAccess\n idToLabelMap[i] "]
129418[label="expressionName\n idToLabelMap "]
129419[label="expressionName\n i "]
119420[label="assignmentOperator\n = "]
119421[label="methodInvocation_lfno_primary\n byteArray.nextString() "]
129422[label="typeName\n byteArray "]
99423[label="expressionStatement\n map.put(idToLabelMap[i],i); "]
109424[label="methodInvocation\n map.put(idToLabelMap[i],i) "]
119425[label="typeName\n map "]
119426[label="argumentList\n idToLabelMap[i],i "]
129427[label="arrayAccess_lfno_primary\n idToLabelMap[i] "]
139428[label="expressionName\n idToLabelMap "]
139429[label="expressionName\n i "]
129430[label="expressionName\n i "]
69431[label="returnStatement\n returntrie.build(map)==0; "]
79432[label="equalityExpression\n trie.build(map)==0 "]
89433[label="methodInvocation_lfno_primary\n trie.build(map) "]
99434[label="typeName\n trie "]
99435[label="expressionName\n map "]
89436[label="literal\n 0 "]
09437[label="compilationUnit\n packagecom.hankcs.hanlp.model.perceptron.cli;importjava.beans.BeanInfo;importjava.beans.IntrospectionException;importjava.beans.Introspector;importjava.beans.PropertyDescriptor;importjava.io.PrintStream;importjava.lang.reflect.*;importjava.util.ArrayList;importjava.util.Arrays;importjava.util.Iterator;importjava.util.List;publicclassArgs{publicstaticList<String>parseOrExit(Objecttarget,String[]args){try{returnparse(target,args);}catch(IllegalArgumentExceptione){System.err.println(e.getMessage());Args.usage(target);System.exit(1);throwe;}}publicstaticList<String>parse(Objecttarget,String[]args){returnparse(target,args,true);}publicstaticList<String>parse(Objecttarget,String[]args,booleanfailOnExtraFlags){List<String>arguments=newArrayList<String>();arguments.addAll(Arrays.asList(args));Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}}catch(IntrospectionExceptione){}}for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){processField(target,field,arguments);}}if(failOnExtraFlags){for(Stringargument:arguments){if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);}}}returnarguments;}privatestaticvoidprocessField(Objecttarget,Fieldfield,List<String>arguments){Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);}}}privatestaticvoidaddArgument(Classtype,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter){try{Object[]os=(Object[])field.get(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);field.set(target,s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}}privatestaticvoidaddPropertyArgument(Classtype,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter){try{Object[]os=(Object[])property.getReadMethod().invoke(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);property.getWriteMethod().invoke(target,(Object)s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);}}privatestaticvoidprocessProperty(Objecttarget,PropertyDescriptorproperty,List<String>arguments){MethodwriteMethod=property.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}}}}publicstaticvoidusage(Objecttarget){usage(System.err,target);}publicstaticvoidusage(PrintStreamerrStream,Objecttarget){Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();}StringclazzName=clazz.getName();{intindex=clazzName.lastIndexOf('$');if(index>0){clazzName=clazzName.substring(0,index);}}errStream.println(\"用法: \"+clazzName);for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){fieldUsage(errStream,target,field);}}try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){propertyUsage(errStream,target,pd);}}catch(IntrospectionExceptione){}}privatestaticvoidfieldUsage(PrintStreamerrStream,Objecttarget,Fieldfield){Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();makeAccessible(field);try{ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}}}privatestaticvoidpropertyUsage(PrintStreamerrStream,Objecttarget,PropertyDescriptorfield){MethodwriteMethod=field.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}}}}privatestaticvoidpropertyUsage(PrintStreamerrStream,Stringprefix,Stringname,Stringalias,Class<?>type,Stringdelimiter,Stringdescription,ObjectdefaultValue){StringBuildersb=newStringBuilder(\"  \");sb.append(prefix);sb.append(name);if(alias!=null){sb.append(\" (\");sb.append(prefix);sb.append(alias);sb.append(\")\");}if(type==Boolean.TYPE||type==Boolean.class){sb.append(\"\t[flag]\t\");sb.append(description);}else{sb.append(\"\t[\");if(type.isArray()){StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");}else{StringtypeName=getTypeName(type);sb.append(typeName);}sb.append(\"]\t\");sb.append(description);if(defaultValue!=null){sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");}}errStream.println(sb);}privatestaticStringgetTypeName(Class<?>type){StringtypeName=type.getName();intbeginIndex=typeName.lastIndexOf(\".\");typeName=typeName.substring(beginIndex+1);returntypeName;}staticStringgetName(Argumentargument,PropertyDescriptorproperty){Stringname=argument.value();if(name.equals(\"\")){name=property.getName();}returnname;}privatestaticObjectconsumeArgumentValue(Stringname,Class<?>type,Argumentargument,Iterator<String>i){Objectvalue;if(type==Boolean.TYPE||type==Boolean.class){value=true;}else{if(i.hasNext()){value=i.next();i.remove();}else{thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name);}}returnvalue;}staticvoidsetProperty(Class<?>type,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter){try{value=getValue(type,value,delimiter);property.getWriteMethod().invoke(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);}}staticStringgetAlias(Argumentargument){Stringalias=argument.alias();if(alias.equals(\"\")){alias=null;}returnalias;}staticStringgetName(Argumentargument,Fieldfield){Stringname=argument.value();if(name.equals(\"\")){name=field.getName();}returnname;}staticvoidsetField(Class<?>type,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter){makeAccessible(field);try{value=getValue(type,value,delimiter);field.set(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}}privatestaticObjectgetValue(Class<?>type,Objectvalue,Stringdelimiter)throwsNoSuchMethodException{if(type!=String.class&&type!=Boolean.class&&type!=Boolean.TYPE){Stringstring=(String)value;if(type.isArray()){String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}}else{value=createValue(type,string);}}returnvalue;}privatestaticObjectcreateValue(Class<?>type,StringvalueAsString)throwsNoSuchMethodException{for(ValueCreatorvalueCreator:valueCreators){ObjectcreatedValue=valueCreator.createValue(type,valueAsString);if(createdValue!=null){returncreatedValue;}}thrownewIllegalArgumentException(String.format(\"cannot instanciate any %s object using %s value\",type.toString(),valueAsString));}privatestaticvoidmakeAccessible(AccessibleObjectao){if(aoinstanceofMember){Membermember=(Member)ao;if(!Modifier.isPublic(member.getModifiers())){ao.setAccessible(true);}}}publicstaticinterfaceValueCreator{publicObjectcreateValue(Class<?>type,Stringvalue);}publicstaticValueCreatorbyStaticMethodInvocation(finalClass<?>compatibleType,finalStringmethodName){returnnewValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv;}};}publicstaticfinalValueCreatorFROM_STRING_CONSTRUCTOR=newValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);}returnv;}};publicstaticfinalValueCreatorENUM_CREATOR=newValueCreator(){@SuppressWarnings({\"unchecked\",\"rawtypes\"})publicObjectcreateValue(Classtype,Stringvalue){if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);}returnnull;}};privatestaticfinalList<ValueCreator>DEFAULT_VALUE_CREATORS=Arrays.asList(Args.FROM_STRING_CONSTRUCTOR,Args.ENUM_CREATOR);privatestaticList<ValueCreator>valueCreators=newArrayList<ValueCreator>(DEFAULT_VALUE_CREATORS);publicstaticvoidregisterValueCreator(ValueCreatorvc){valueCreators.add(vc);}publicstaticvoidresetValueCreators(){valueCreators.clear();valueCreators.addAll(DEFAULT_VALUE_CREATORS);}}<EOF> "]
19438[label="packageDeclaration\n packagecom.hankcs.hanlp.model.perceptron.cli; "]
29439[label="packageName\n com.hankcs.hanlp.model.perceptron.cli "]
39440[label="packageName\n com.hankcs.hanlp.model.perceptron "]
49441[label="packageName\n com.hankcs.hanlp.model "]
59442[label="packageName\n com.hankcs.hanlp "]
69443[label="packageName\n com.hankcs "]
79444[label="packageName\n com "]
19445[label="singleTypeImportDeclaration\n importjava.beans.BeanInfo; "]
29446[label="typeName\n java.beans.BeanInfo "]
39447[label="packageOrTypeName\n java.beans "]
49448[label="packageOrTypeName\n java "]
19449[label="singleTypeImportDeclaration\n importjava.beans.IntrospectionException; "]
29450[label="typeName\n java.beans.IntrospectionException "]
39451[label="packageOrTypeName\n java.beans "]
49452[label="packageOrTypeName\n java "]
19453[label="singleTypeImportDeclaration\n importjava.beans.Introspector; "]
29454[label="typeName\n java.beans.Introspector "]
39455[label="packageOrTypeName\n java.beans "]
49456[label="packageOrTypeName\n java "]
19457[label="singleTypeImportDeclaration\n importjava.beans.PropertyDescriptor; "]
29458[label="typeName\n java.beans.PropertyDescriptor "]
39459[label="packageOrTypeName\n java.beans "]
49460[label="packageOrTypeName\n java "]
19461[label="singleTypeImportDeclaration\n importjava.io.PrintStream; "]
29462[label="typeName\n java.io.PrintStream "]
39463[label="packageOrTypeName\n java.io "]
49464[label="packageOrTypeName\n java "]
19465[label="typeImportOnDemandDeclaration\n importjava.lang.reflect.*; "]
29466[label="packageOrTypeName\n java.lang.reflect "]
39467[label="packageOrTypeName\n java.lang "]
49468[label="packageOrTypeName\n java "]
19469[label="singleTypeImportDeclaration\n importjava.util.ArrayList; "]
29470[label="typeName\n java.util.ArrayList "]
39471[label="packageOrTypeName\n java.util "]
49472[label="packageOrTypeName\n java "]
19473[label="singleTypeImportDeclaration\n importjava.util.Arrays; "]
29474[label="typeName\n java.util.Arrays "]
39475[label="packageOrTypeName\n java.util "]
49476[label="packageOrTypeName\n java "]
19477[label="singleTypeImportDeclaration\n importjava.util.Iterator; "]
29478[label="typeName\n java.util.Iterator "]
39479[label="packageOrTypeName\n java.util "]
49480[label="packageOrTypeName\n java "]
19481[label="singleTypeImportDeclaration\n importjava.util.List; "]
29482[label="typeName\n java.util.List "]
39483[label="packageOrTypeName\n java.util "]
49484[label="packageOrTypeName\n java "]
19485[label="normalClassDeclaration\n publicclassArgs{publicstaticList<String>parseOrExit(Objecttarget,String[]args){try{returnparse(target,args);}catch(IllegalArgumentExceptione){System.err.println(e.getMessage());Args.usage(target);System.exit(1);throwe;}}publicstaticList<String>parse(Objecttarget,String[]args){returnparse(target,args,true);}publicstaticList<String>parse(Objecttarget,String[]args,booleanfailOnExtraFlags){List<String>arguments=newArrayList<String>();arguments.addAll(Arrays.asList(args));Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}}catch(IntrospectionExceptione){}}for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){processField(target,field,arguments);}}if(failOnExtraFlags){for(Stringargument:arguments){if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);}}}returnarguments;}privatestaticvoidprocessField(Objecttarget,Fieldfield,List<String>arguments){Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);}}}privatestaticvoidaddArgument(Classtype,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter){try{Object[]os=(Object[])field.get(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);field.set(target,s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}}privatestaticvoidaddPropertyArgument(Classtype,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter){try{Object[]os=(Object[])property.getReadMethod().invoke(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);property.getWriteMethod().invoke(target,(Object)s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);}}privatestaticvoidprocessProperty(Objecttarget,PropertyDescriptorproperty,List<String>arguments){MethodwriteMethod=property.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}}}}publicstaticvoidusage(Objecttarget){usage(System.err,target);}publicstaticvoidusage(PrintStreamerrStream,Objecttarget){Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();}StringclazzName=clazz.getName();{intindex=clazzName.lastIndexOf('$');if(index>0){clazzName=clazzName.substring(0,index);}}errStream.println(\"用法: \"+clazzName);for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){fieldUsage(errStream,target,field);}}try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){propertyUsage(errStream,target,pd);}}catch(IntrospectionExceptione){}}privatestaticvoidfieldUsage(PrintStreamerrStream,Objecttarget,Fieldfield){Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();makeAccessible(field);try{ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}}}privatestaticvoidpropertyUsage(PrintStreamerrStream,Objecttarget,PropertyDescriptorfield){MethodwriteMethod=field.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}}}}privatestaticvoidpropertyUsage(PrintStreamerrStream,Stringprefix,Stringname,Stringalias,Class<?>type,Stringdelimiter,Stringdescription,ObjectdefaultValue){StringBuildersb=newStringBuilder(\"  \");sb.append(prefix);sb.append(name);if(alias!=null){sb.append(\" (\");sb.append(prefix);sb.append(alias);sb.append(\")\");}if(type==Boolean.TYPE||type==Boolean.class){sb.append(\"\t[flag]\t\");sb.append(description);}else{sb.append(\"\t[\");if(type.isArray()){StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");}else{StringtypeName=getTypeName(type);sb.append(typeName);}sb.append(\"]\t\");sb.append(description);if(defaultValue!=null){sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");}}errStream.println(sb);}privatestaticStringgetTypeName(Class<?>type){StringtypeName=type.getName();intbeginIndex=typeName.lastIndexOf(\".\");typeName=typeName.substring(beginIndex+1);returntypeName;}staticStringgetName(Argumentargument,PropertyDescriptorproperty){Stringname=argument.value();if(name.equals(\"\")){name=property.getName();}returnname;}privatestaticObjectconsumeArgumentValue(Stringname,Class<?>type,Argumentargument,Iterator<String>i){Objectvalue;if(type==Boolean.TYPE||type==Boolean.class){value=true;}else{if(i.hasNext()){value=i.next();i.remove();}else{thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name);}}returnvalue;}staticvoidsetProperty(Class<?>type,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter){try{value=getValue(type,value,delimiter);property.getWriteMethod().invoke(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);}}staticStringgetAlias(Argumentargument){Stringalias=argument.alias();if(alias.equals(\"\")){alias=null;}returnalias;}staticStringgetName(Argumentargument,Fieldfield){Stringname=argument.value();if(name.equals(\"\")){name=field.getName();}returnname;}staticvoidsetField(Class<?>type,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter){makeAccessible(field);try{value=getValue(type,value,delimiter);field.set(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}}privatestaticObjectgetValue(Class<?>type,Objectvalue,Stringdelimiter)throwsNoSuchMethodException{if(type!=String.class&&type!=Boolean.class&&type!=Boolean.TYPE){Stringstring=(String)value;if(type.isArray()){String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}}else{value=createValue(type,string);}}returnvalue;}privatestaticObjectcreateValue(Class<?>type,StringvalueAsString)throwsNoSuchMethodException{for(ValueCreatorvalueCreator:valueCreators){ObjectcreatedValue=valueCreator.createValue(type,valueAsString);if(createdValue!=null){returncreatedValue;}}thrownewIllegalArgumentException(String.format(\"cannot instanciate any %s object using %s value\",type.toString(),valueAsString));}privatestaticvoidmakeAccessible(AccessibleObjectao){if(aoinstanceofMember){Membermember=(Member)ao;if(!Modifier.isPublic(member.getModifiers())){ao.setAccessible(true);}}}publicstaticinterfaceValueCreator{publicObjectcreateValue(Class<?>type,Stringvalue);}publicstaticValueCreatorbyStaticMethodInvocation(finalClass<?>compatibleType,finalStringmethodName){returnnewValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv;}};}publicstaticfinalValueCreatorFROM_STRING_CONSTRUCTOR=newValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);}returnv;}};publicstaticfinalValueCreatorENUM_CREATOR=newValueCreator(){@SuppressWarnings({\"unchecked\",\"rawtypes\"})publicObjectcreateValue(Classtype,Stringvalue){if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);}returnnull;}};privatestaticfinalList<ValueCreator>DEFAULT_VALUE_CREATORS=Arrays.asList(Args.FROM_STRING_CONSTRUCTOR,Args.ENUM_CREATOR);privatestaticList<ValueCreator>valueCreators=newArrayList<ValueCreator>(DEFAULT_VALUE_CREATORS);publicstaticvoidregisterValueCreator(ValueCreatorvc){valueCreators.add(vc);}publicstaticvoidresetValueCreators(){valueCreators.clear();valueCreators.addAll(DEFAULT_VALUE_CREATORS);}} "]
29486[label="classModifier\n public "]
29487[label="classBody\n {publicstaticList<String>parseOrExit(Objecttarget,String[]args){try{returnparse(target,args);}catch(IllegalArgumentExceptione){System.err.println(e.getMessage());Args.usage(target);System.exit(1);throwe;}}publicstaticList<String>parse(Objecttarget,String[]args){returnparse(target,args,true);}publicstaticList<String>parse(Objecttarget,String[]args,booleanfailOnExtraFlags){List<String>arguments=newArrayList<String>();arguments.addAll(Arrays.asList(args));Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}}catch(IntrospectionExceptione){}}for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){processField(target,field,arguments);}}if(failOnExtraFlags){for(Stringargument:arguments){if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);}}}returnarguments;}privatestaticvoidprocessField(Objecttarget,Fieldfield,List<String>arguments){Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);}}}privatestaticvoidaddArgument(Classtype,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter){try{Object[]os=(Object[])field.get(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);field.set(target,s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}}privatestaticvoidaddPropertyArgument(Classtype,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter){try{Object[]os=(Object[])property.getReadMethod().invoke(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);property.getWriteMethod().invoke(target,(Object)s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);}}privatestaticvoidprocessProperty(Objecttarget,PropertyDescriptorproperty,List<String>arguments){MethodwriteMethod=property.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}}}}publicstaticvoidusage(Objecttarget){usage(System.err,target);}publicstaticvoidusage(PrintStreamerrStream,Objecttarget){Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();}StringclazzName=clazz.getName();{intindex=clazzName.lastIndexOf('$');if(index>0){clazzName=clazzName.substring(0,index);}}errStream.println(\"用法: \"+clazzName);for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){fieldUsage(errStream,target,field);}}try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){propertyUsage(errStream,target,pd);}}catch(IntrospectionExceptione){}}privatestaticvoidfieldUsage(PrintStreamerrStream,Objecttarget,Fieldfield){Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();makeAccessible(field);try{ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}}}privatestaticvoidpropertyUsage(PrintStreamerrStream,Objecttarget,PropertyDescriptorfield){MethodwriteMethod=field.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}}}}privatestaticvoidpropertyUsage(PrintStreamerrStream,Stringprefix,Stringname,Stringalias,Class<?>type,Stringdelimiter,Stringdescription,ObjectdefaultValue){StringBuildersb=newStringBuilder(\"  \");sb.append(prefix);sb.append(name);if(alias!=null){sb.append(\" (\");sb.append(prefix);sb.append(alias);sb.append(\")\");}if(type==Boolean.TYPE||type==Boolean.class){sb.append(\"\t[flag]\t\");sb.append(description);}else{sb.append(\"\t[\");if(type.isArray()){StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");}else{StringtypeName=getTypeName(type);sb.append(typeName);}sb.append(\"]\t\");sb.append(description);if(defaultValue!=null){sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");}}errStream.println(sb);}privatestaticStringgetTypeName(Class<?>type){StringtypeName=type.getName();intbeginIndex=typeName.lastIndexOf(\".\");typeName=typeName.substring(beginIndex+1);returntypeName;}staticStringgetName(Argumentargument,PropertyDescriptorproperty){Stringname=argument.value();if(name.equals(\"\")){name=property.getName();}returnname;}privatestaticObjectconsumeArgumentValue(Stringname,Class<?>type,Argumentargument,Iterator<String>i){Objectvalue;if(type==Boolean.TYPE||type==Boolean.class){value=true;}else{if(i.hasNext()){value=i.next();i.remove();}else{thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name);}}returnvalue;}staticvoidsetProperty(Class<?>type,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter){try{value=getValue(type,value,delimiter);property.getWriteMethod().invoke(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);}}staticStringgetAlias(Argumentargument){Stringalias=argument.alias();if(alias.equals(\"\")){alias=null;}returnalias;}staticStringgetName(Argumentargument,Fieldfield){Stringname=argument.value();if(name.equals(\"\")){name=field.getName();}returnname;}staticvoidsetField(Class<?>type,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter){makeAccessible(field);try{value=getValue(type,value,delimiter);field.set(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}}privatestaticObjectgetValue(Class<?>type,Objectvalue,Stringdelimiter)throwsNoSuchMethodException{if(type!=String.class&&type!=Boolean.class&&type!=Boolean.TYPE){Stringstring=(String)value;if(type.isArray()){String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}}else{value=createValue(type,string);}}returnvalue;}privatestaticObjectcreateValue(Class<?>type,StringvalueAsString)throwsNoSuchMethodException{for(ValueCreatorvalueCreator:valueCreators){ObjectcreatedValue=valueCreator.createValue(type,valueAsString);if(createdValue!=null){returncreatedValue;}}thrownewIllegalArgumentException(String.format(\"cannot instanciate any %s object using %s value\",type.toString(),valueAsString));}privatestaticvoidmakeAccessible(AccessibleObjectao){if(aoinstanceofMember){Membermember=(Member)ao;if(!Modifier.isPublic(member.getModifiers())){ao.setAccessible(true);}}}publicstaticinterfaceValueCreator{publicObjectcreateValue(Class<?>type,Stringvalue);}publicstaticValueCreatorbyStaticMethodInvocation(finalClass<?>compatibleType,finalStringmethodName){returnnewValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv;}};}publicstaticfinalValueCreatorFROM_STRING_CONSTRUCTOR=newValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);}returnv;}};publicstaticfinalValueCreatorENUM_CREATOR=newValueCreator(){@SuppressWarnings({\"unchecked\",\"rawtypes\"})publicObjectcreateValue(Classtype,Stringvalue){if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);}returnnull;}};privatestaticfinalList<ValueCreator>DEFAULT_VALUE_CREATORS=Arrays.asList(Args.FROM_STRING_CONSTRUCTOR,Args.ENUM_CREATOR);privatestaticList<ValueCreator>valueCreators=newArrayList<ValueCreator>(DEFAULT_VALUE_CREATORS);publicstaticvoidregisterValueCreator(ValueCreatorvc){valueCreators.add(vc);}publicstaticvoidresetValueCreators(){valueCreators.clear();valueCreators.addAll(DEFAULT_VALUE_CREATORS);}} "]
39488[label="methodDeclaration\n publicstaticList<String>parseOrExit(Objecttarget,String[]args){try{returnparse(target,args);}catch(IllegalArgumentExceptione){System.err.println(e.getMessage());Args.usage(target);System.exit(1);throwe;}} "]
49489[label="methodModifier\n public "]
49490[label="methodModifier\n static "]
49491[label="methodHeader\n List<String>parseOrExit(Objecttarget,String[]args) "]
59492[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
69493[label="typeArguments\n <String> "]
79494[label="classType_lfno_classOrInterfaceType\n String "]
59495[label="methodDeclarator\n parseOrExit(Objecttarget,String[]args) "]
69496[label="formalParameterList\n Objecttarget,String[]args "]
79497[label="formalParameter\n Objecttarget "]
89498[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
89499[label="variableDeclaratorId\n target "]
79500[label="formalParameter\n String[]args "]
89501[label="unannArrayType\n String[] "]
99502[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
99503[label="dims\n [] "]
89504[label="variableDeclaratorId\n args "]
49505[label="block\n {try{returnparse(target,args);}catch(IllegalArgumentExceptione){System.err.println(e.getMessage());Args.usage(target);System.exit(1);throwe;}} "]
59506[label="tryStatement\n try{returnparse(target,args);}catch(IllegalArgumentExceptione){System.err.println(e.getMessage());Args.usage(target);System.exit(1);throwe;} "]
69507[label="block\n {returnparse(target,args);} "]
79508[label="returnStatement\n returnparse(target,args); "]
89509[label="methodInvocation_lfno_primary\n parse(target,args) "]
99510[label="methodName\n parse "]
99511[label="argumentList\n target,args "]
109512[label="expressionName\n target "]
109513[label="expressionName\n args "]
69514[label="catchClause\n catch(IllegalArgumentExceptione){System.err.println(e.getMessage());Args.usage(target);System.exit(1);throwe;} "]
79515[label="catchFormalParameter\n IllegalArgumentExceptione "]
89516[label="unannClassType\n IllegalArgumentException "]
89517[label="variableDeclaratorId\n e "]
79518[label="block\n {System.err.println(e.getMessage());Args.usage(target);System.exit(1);throwe;} "]
89519[label="blockStatements\n System.err.println(e.getMessage());Args.usage(target);System.exit(1);throwe; "]
99520[label="expressionStatement\n System.err.println(e.getMessage()); "]
109521[label="methodInvocation\n System.err.println(e.getMessage()) "]
119522[label="typeName\n System.err "]
129523[label="packageOrTypeName\n System "]
119524[label="methodInvocation_lfno_primary\n e.getMessage() "]
129525[label="typeName\n e "]
99526[label="expressionStatement\n Args.usage(target); "]
109527[label="methodInvocation\n Args.usage(target) "]
119528[label="typeName\n Args "]
119529[label="expressionName\n target "]
99530[label="expressionStatement\n System.exit(1); "]
109531[label="methodInvocation\n System.exit(1) "]
119532[label="typeName\n System "]
119533[label="literal\n 1 "]
99534[label="throwStatement\n throwe; "]
109535[label="expressionName\n e "]
39536[label="methodDeclaration\n publicstaticList<String>parse(Objecttarget,String[]args){returnparse(target,args,true);} "]
49537[label="methodModifier\n public "]
49538[label="methodModifier\n static "]
49539[label="methodHeader\n List<String>parse(Objecttarget,String[]args) "]
59540[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
69541[label="typeArguments\n <String> "]
79542[label="classType_lfno_classOrInterfaceType\n String "]
59543[label="methodDeclarator\n parse(Objecttarget,String[]args) "]
69544[label="formalParameterList\n Objecttarget,String[]args "]
79545[label="formalParameter\n Objecttarget "]
89546[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
89547[label="variableDeclaratorId\n target "]
79548[label="formalParameter\n String[]args "]
89549[label="unannArrayType\n String[] "]
99550[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
99551[label="dims\n [] "]
89552[label="variableDeclaratorId\n args "]
49553[label="block\n {returnparse(target,args,true);} "]
59554[label="returnStatement\n returnparse(target,args,true); "]
69555[label="methodInvocation_lfno_primary\n parse(target,args,true) "]
79556[label="methodName\n parse "]
79557[label="argumentList\n target,args,true "]
89558[label="expressionName\n target "]
89559[label="expressionName\n args "]
89560[label="literal\n true "]
39561[label="methodDeclaration\n publicstaticList<String>parse(Objecttarget,String[]args,booleanfailOnExtraFlags){List<String>arguments=newArrayList<String>();arguments.addAll(Arrays.asList(args));Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}}catch(IntrospectionExceptione){}}for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){processField(target,field,arguments);}}if(failOnExtraFlags){for(Stringargument:arguments){if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);}}}returnarguments;} "]
49562[label="methodModifier\n public "]
49563[label="methodModifier\n static "]
49564[label="methodHeader\n List<String>parse(Objecttarget,String[]args,booleanfailOnExtraFlags) "]
59565[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
69566[label="typeArguments\n <String> "]
79567[label="classType_lfno_classOrInterfaceType\n String "]
59568[label="methodDeclarator\n parse(Objecttarget,String[]args,booleanfailOnExtraFlags) "]
69569[label="formalParameterList\n Objecttarget,String[]args,booleanfailOnExtraFlags "]
79570[label="formalParameters\n Objecttarget,String[]args "]
89571[label="formalParameter\n Objecttarget "]
99572[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
99573[label="variableDeclaratorId\n target "]
89574[label="formalParameter\n String[]args "]
99575[label="unannArrayType\n String[] "]
109576[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
109577[label="dims\n [] "]
99578[label="variableDeclaratorId\n args "]
79579[label="formalParameter\n booleanfailOnExtraFlags "]
89580[label="unannPrimitiveType\n boolean "]
89581[label="variableDeclaratorId\n failOnExtraFlags "]
49582[label="block\n {List<String>arguments=newArrayList<String>();arguments.addAll(Arrays.asList(args));Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}}catch(IntrospectionExceptione){}}for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){processField(target,field,arguments);}}if(failOnExtraFlags){for(Stringargument:arguments){if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);}}}returnarguments;} "]
59583[label="blockStatements\n List<String>arguments=newArrayList<String>();arguments.addAll(Arrays.asList(args));Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}}catch(IntrospectionExceptione){}}for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){processField(target,field,arguments);}}if(failOnExtraFlags){for(Stringargument:arguments){if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);}}}returnarguments; "]
69584[label="localVariableDeclarationStatement\n List<String>arguments=newArrayList<String>(); "]
79585[label="localVariableDeclaration\n List<String>arguments=newArrayList<String>() "]
89586[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
99587[label="typeArguments\n <String> "]
109588[label="classType_lfno_classOrInterfaceType\n String "]
89589[label="variableDeclarator\n arguments=newArrayList<String>() "]
99590[label="variableDeclaratorId\n arguments "]
99591[label="classInstanceCreationExpression_lfno_primary\n newArrayList<String>() "]
109592[label="typeArguments\n <String> "]
119593[label="classType_lfno_classOrInterfaceType\n String "]
69594[label="expressionStatement\n arguments.addAll(Arrays.asList(args)); "]
79595[label="methodInvocation\n arguments.addAll(Arrays.asList(args)) "]
89596[label="typeName\n arguments "]
89597[label="methodInvocation_lfno_primary\n Arrays.asList(args) "]
99598[label="typeName\n Arrays "]
99599[label="expressionName\n args "]
69600[label="localVariableDeclarationStatement\n Class<?>clazz; "]
79601[label="localVariableDeclaration\n Class<?>clazz "]
89602[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
99603[label="typeArguments\n <?> "]
109604[label="wildcard\n ? "]
89605[label="variableDeclaratorId\n clazz "]
69606[label="ifThenElseStatement\n if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}}catch(IntrospectionExceptione){}} "]
79607[label="relationalExpression\n targetinstanceofClass "]
89608[label="expressionName\n target "]
89609[label="classType_lfno_classOrInterfaceType\n Class "]
79610[label="block\n {clazz=(Class)target;} "]
89611[label="expressionStatement\n clazz=(Class)target; "]
99612[label="assignment\n clazz=(Class)target "]
109613[label="expressionName\n clazz "]
109614[label="assignmentOperator\n = "]
109615[label="castExpression\n (Class)target "]
119616[label="classType_lfno_classOrInterfaceType\n Class "]
119617[label="expressionName\n target "]
79618[label="block\n {clazz=target.getClass();try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}}catch(IntrospectionExceptione){}} "]
89619[label="blockStatements\n clazz=target.getClass();try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}}catch(IntrospectionExceptione){} "]
99620[label="expressionStatement\n clazz=target.getClass(); "]
109621[label="assignment\n clazz=target.getClass() "]
119622[label="expressionName\n clazz "]
119623[label="assignmentOperator\n = "]
119624[label="methodInvocation_lfno_primary\n target.getClass() "]
129625[label="typeName\n target "]
99626[label="tryStatement\n try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}}catch(IntrospectionExceptione){} "]
109627[label="block\n {BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);}} "]
119628[label="blockStatements\n BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);} "]
129629[label="localVariableDeclarationStatement\n BeanInfoinfo=Introspector.getBeanInfo(clazz); "]
139630[label="localVariableDeclaration\n BeanInfoinfo=Introspector.getBeanInfo(clazz) "]
149631[label="unannClassType_lfno_unannClassOrInterfaceType\n BeanInfo "]
149632[label="variableDeclarator\n info=Introspector.getBeanInfo(clazz) "]
159633[label="variableDeclaratorId\n info "]
159634[label="methodInvocation_lfno_primary\n Introspector.getBeanInfo(clazz) "]
169635[label="typeName\n Introspector "]
169636[label="expressionName\n clazz "]
129637[label="enhancedForStatement\n for(PropertyDescriptorpd:info.getPropertyDescriptors()){processProperty(target,pd,arguments);} "]
139638[label="unannClassType_lfno_unannClassOrInterfaceType\n PropertyDescriptor "]
139639[label="variableDeclaratorId\n pd "]
139640[label="methodInvocation_lfno_primary\n info.getPropertyDescriptors() "]
149641[label="typeName\n info "]
139642[label="block\n {processProperty(target,pd,arguments);} "]
149643[label="expressionStatement\n processProperty(target,pd,arguments); "]
159644[label="methodInvocation\n processProperty(target,pd,arguments) "]
169645[label="methodName\n processProperty "]
169646[label="argumentList\n target,pd,arguments "]
179647[label="expressionName\n target "]
179648[label="expressionName\n pd "]
179649[label="expressionName\n arguments "]
109650[label="catchClause\n catch(IntrospectionExceptione){} "]
119651[label="catchFormalParameter\n IntrospectionExceptione "]
129652[label="unannClassType\n IntrospectionException "]
129653[label="variableDeclaratorId\n e "]
119654[label="block\n {} "]
69655[label="basicForStatement\n for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){processField(target,field,arguments);}} "]
79656[label="localVariableDeclaration\n Class<?>currentClazz=clazz "]
89657[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
99658[label="typeArguments\n <?> "]
109659[label="wildcard\n ? "]
89660[label="variableDeclarator\n currentClazz=clazz "]
99661[label="variableDeclaratorId\n currentClazz "]
99662[label="expressionName\n clazz "]
79663[label="equalityExpression\n currentClazz!=null "]
89664[label="expressionName\n currentClazz "]
89665[label="literal\n null "]
79666[label="assignment\n currentClazz=currentClazz.getSuperclass() "]
89667[label="expressionName\n currentClazz "]
89668[label="assignmentOperator\n = "]
89669[label="methodInvocation_lfno_primary\n currentClazz.getSuperclass() "]
99670[label="typeName\n currentClazz "]
79671[label="block\n {for(Fieldfield:currentClazz.getDeclaredFields()){processField(target,field,arguments);}} "]
89672[label="enhancedForStatement\n for(Fieldfield:currentClazz.getDeclaredFields()){processField(target,field,arguments);} "]
99673[label="unannClassType_lfno_unannClassOrInterfaceType\n Field "]
99674[label="variableDeclaratorId\n field "]
99675[label="methodInvocation_lfno_primary\n currentClazz.getDeclaredFields() "]
109676[label="typeName\n currentClazz "]
99677[label="block\n {processField(target,field,arguments);} "]
109678[label="expressionStatement\n processField(target,field,arguments); "]
119679[label="methodInvocation\n processField(target,field,arguments) "]
129680[label="methodName\n processField "]
129681[label="argumentList\n target,field,arguments "]
139682[label="expressionName\n target "]
139683[label="expressionName\n field "]
139684[label="expressionName\n arguments "]
69685[label="ifThenStatement\n if(failOnExtraFlags){for(Stringargument:arguments){if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);}}} "]
79686[label="expressionName\n failOnExtraFlags "]
79687[label="block\n {for(Stringargument:arguments){if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);}}} "]
89688[label="enhancedForStatement\n for(Stringargument:arguments){if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);}} "]
99689[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
99690[label="variableDeclaratorId\n argument "]
99691[label="expressionName\n arguments "]
99692[label="block\n {if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);}} "]
109693[label="ifThenStatement\n if(argument.startsWith(\"-\")){thrownewIllegalArgumentException(\"无效参数: \"+argument);} "]
119694[label="methodInvocation_lfno_primary\n argument.startsWith(\"-\") "]
129695[label="typeName\n argument "]
129696[label="literal\n \"-\" "]
119697[label="block\n {thrownewIllegalArgumentException(\"无效参数: \"+argument);} "]
129698[label="throwStatement\n thrownewIllegalArgumentException(\"无效参数: \"+argument); "]
139699[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"无效参数: \"+argument) "]
149700[label="additiveExpression\n \"无效参数: \"+argument "]
159701[label="literal\n \"无效参数: \" "]
159702[label="expressionName\n argument "]
69703[label="returnStatement\n returnarguments; "]
79704[label="expressionName\n arguments "]
39705[label="methodDeclaration\n privatestaticvoidprocessField(Objecttarget,Fieldfield,List<String>arguments){Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);}}} "]
49706[label="methodModifier\n private "]
49707[label="methodModifier\n static "]
49708[label="methodHeader\n voidprocessField(Objecttarget,Fieldfield,List<String>arguments) "]
59709[label="result\n void "]
59710[label="methodDeclarator\n processField(Objecttarget,Fieldfield,List<String>arguments) "]
69711[label="formalParameterList\n Objecttarget,Fieldfield,List<String>arguments "]
79712[label="formalParameters\n Objecttarget,Fieldfield "]
89713[label="formalParameter\n Objecttarget "]
99714[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
99715[label="variableDeclaratorId\n target "]
89716[label="formalParameter\n Fieldfield "]
99717[label="unannClassType_lfno_unannClassOrInterfaceType\n Field "]
99718[label="variableDeclaratorId\n field "]
79719[label="formalParameter\n List<String>arguments "]
89720[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
99721[label="typeArguments\n <String> "]
109722[label="classType_lfno_classOrInterfaceType\n String "]
89723[label="variableDeclaratorId\n arguments "]
49724[label="block\n {Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);}}} "]
59725[label="blockStatements\n Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);}} "]
69726[label="localVariableDeclarationStatement\n Argumentargument=field.getAnnotation(Argument.class); "]
79727[label="localVariableDeclaration\n Argumentargument=field.getAnnotation(Argument.class) "]
89728[label="unannClassType_lfno_unannClassOrInterfaceType\n Argument "]
89729[label="variableDeclarator\n argument=field.getAnnotation(Argument.class) "]
99730[label="variableDeclaratorId\n argument "]
99731[label="methodInvocation_lfno_primary\n field.getAnnotation(Argument.class) "]
109732[label="typeName\n field "]
109733[label="primaryNoNewArray_lfno_primary\n Argument.class "]
119734[label="typeName\n Argument "]
69735[label="ifThenStatement\n if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);}} "]
79736[label="equalityExpression\n argument!=null "]
89737[label="expressionName\n argument "]
89738[label="literal\n null "]
79739[label="block\n {booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);}} "]
89740[label="blockStatements\n booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);} "]
99741[label="localVariableDeclarationStatement\n booleanset=false; "]
109742[label="localVariableDeclaration\n booleanset=false "]
119743[label="unannPrimitiveType\n boolean "]
119744[label="variableDeclarator\n set=false "]
129745[label="variableDeclaratorId\n set "]
129746[label="literal\n false "]
99747[label="basicForStatement\n for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}} "]
109748[label="localVariableDeclaration\n Iterator<String>i=arguments.iterator() "]
119749[label="unannClassType_lfno_unannClassOrInterfaceType\n Iterator<String> "]
129750[label="typeArguments\n <String> "]
139751[label="classType_lfno_classOrInterfaceType\n String "]
119752[label="variableDeclarator\n i=arguments.iterator() "]
129753[label="variableDeclaratorId\n i "]
129754[label="methodInvocation_lfno_primary\n arguments.iterator() "]
139755[label="typeName\n arguments "]
109756[label="methodInvocation_lfno_primary\n i.hasNext() "]
119757[label="typeName\n i "]
109758[label="block\n {Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}} "]
119759[label="blockStatements\n Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;} "]
129760[label="localVariableDeclarationStatement\n Stringarg=i.next(); "]
139761[label="localVariableDeclaration\n Stringarg=i.next() "]
149762[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
149763[label="variableDeclarator\n arg=i.next() "]
159764[label="variableDeclaratorId\n arg "]
159765[label="methodInvocation_lfno_primary\n i.next() "]
169766[label="typeName\n i "]
129767[label="localVariableDeclarationStatement\n Stringprefix=argument.prefix(); "]
139768[label="localVariableDeclaration\n Stringprefix=argument.prefix() "]
149769[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
149770[label="variableDeclarator\n prefix=argument.prefix() "]
159771[label="variableDeclaratorId\n prefix "]
159772[label="methodInvocation_lfno_primary\n argument.prefix() "]
169773[label="typeName\n argument "]
129774[label="localVariableDeclarationStatement\n Stringdelimiter=argument.delimiter(); "]
139775[label="localVariableDeclaration\n Stringdelimiter=argument.delimiter() "]
149776[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
149777[label="variableDeclarator\n delimiter=argument.delimiter() "]
159778[label="variableDeclaratorId\n delimiter "]
159779[label="methodInvocation_lfno_primary\n argument.delimiter() "]
169780[label="typeName\n argument "]
129781[label="ifThenStatement\n if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;} "]
139782[label="methodInvocation_lfno_primary\n arg.startsWith(prefix) "]
149783[label="typeName\n arg "]
149784[label="expressionName\n prefix "]
139785[label="block\n {Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;} "]
149786[label="blockStatements\n Objectvalue;Stringname=getName(argument,field);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=field.getType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;}if(set&&!type.isArray())break; "]
159787[label="localVariableDeclarationStatement\n Objectvalue; "]
169788[label="localVariableDeclaration\n Objectvalue "]
179789[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
179790[label="variableDeclaratorId\n value "]
159791[label="localVariableDeclarationStatement\n Stringname=getName(argument,field); "]
169792[label="localVariableDeclaration\n Stringname=getName(argument,field) "]
179793[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
179794[label="variableDeclarator\n name=getName(argument,field) "]
189795[label="variableDeclaratorId\n name "]
189796[label="methodInvocation_lfno_primary\n getName(argument,field) "]
199797[label="methodName\n getName "]
199798[label="argumentList\n argument,field "]
209799[label="expressionName\n argument "]
209800[label="expressionName\n field "]
159801[label="localVariableDeclarationStatement\n Stringalias=getAlias(argument); "]
169802[label="localVariableDeclaration\n Stringalias=getAlias(argument) "]
179803[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
179804[label="variableDeclarator\n alias=getAlias(argument) "]
189805[label="variableDeclaratorId\n alias "]
189806[label="methodInvocation_lfno_primary\n getAlias(argument) "]
199807[label="methodName\n getAlias "]
199808[label="expressionName\n argument "]
159809[label="expressionStatement\n arg=arg.substring(prefix.length()); "]
169810[label="assignment\n arg=arg.substring(prefix.length()) "]
179811[label="expressionName\n arg "]
179812[label="assignmentOperator\n = "]
179813[label="methodInvocation_lfno_primary\n arg.substring(prefix.length()) "]
189814[label="typeName\n arg "]
189815[label="methodInvocation_lfno_primary\n prefix.length() "]
199816[label="typeName\n prefix "]
159817[label="localVariableDeclarationStatement\n Class<?>type=field.getType(); "]
169818[label="localVariableDeclaration\n Class<?>type=field.getType() "]
179819[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
189820[label="typeArguments\n <?> "]
199821[label="wildcard\n ? "]
179822[label="variableDeclarator\n type=field.getType() "]
189823[label="variableDeclaratorId\n type "]
189824[label="methodInvocation_lfno_primary\n field.getType() "]
199825[label="typeName\n field "]
159826[label="ifThenStatement\n if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;} "]
169827[label="conditionalOrExpression\n arg.equals(name)||(alias!=null&&arg.equals(alias)) "]
179828[label="methodInvocation_lfno_primary\n arg.equals(name) "]
189829[label="typeName\n arg "]
189830[label="expressionName\n name "]
179831[label="primaryNoNewArray_lfno_primary\n (alias!=null&&arg.equals(alias)) "]
189832[label="conditionalAndExpression\n alias!=null&&arg.equals(alias) "]
199833[label="equalityExpression\n alias!=null "]
209834[label="expressionName\n alias "]
209835[label="literal\n null "]
199836[label="methodInvocation_lfno_primary\n arg.equals(alias) "]
209837[label="typeName\n arg "]
209838[label="expressionName\n alias "]
169839[label="block\n {i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true;} "]
179840[label="blockStatements\n i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);}set=true; "]
189841[label="expressionStatement\n i.remove(); "]
199842[label="methodInvocation\n i.remove() "]
209843[label="typeName\n i "]
189844[label="expressionStatement\n value=consumeArgumentValue(name,type,argument,i); "]
199845[label="assignment\n value=consumeArgumentValue(name,type,argument,i) "]
209846[label="expressionName\n value "]
209847[label="assignmentOperator\n = "]
209848[label="methodInvocation_lfno_primary\n consumeArgumentValue(name,type,argument,i) "]
219849[label="methodName\n consumeArgumentValue "]
219850[label="argumentList\n name,type,argument,i "]
229851[label="expressionName\n name "]
229852[label="expressionName\n type "]
229853[label="expressionName\n argument "]
229854[label="expressionName\n i "]
189855[label="ifThenElseStatement\n if(!set){setField(type,field,target,value,delimiter);}else{addArgument(type,field,target,value,delimiter);} "]
199856[label="unaryExpressionNotPlusMinus\n !set "]
209857[label="expressionName\n set "]
199858[label="block\n {setField(type,field,target,value,delimiter);} "]
209859[label="expressionStatement\n setField(type,field,target,value,delimiter); "]
219860[label="methodInvocation\n setField(type,field,target,value,delimiter) "]
229861[label="methodName\n setField "]
229862[label="argumentList\n type,field,target,value,delimiter "]
239863[label="expressionName\n type "]
239864[label="expressionName\n field "]
239865[label="expressionName\n target "]
239866[label="expressionName\n value "]
239867[label="expressionName\n delimiter "]
199868[label="block\n {addArgument(type,field,target,value,delimiter);} "]
209869[label="expressionStatement\n addArgument(type,field,target,value,delimiter); "]
219870[label="methodInvocation\n addArgument(type,field,target,value,delimiter) "]
229871[label="methodName\n addArgument "]
229872[label="argumentList\n type,field,target,value,delimiter "]
239873[label="expressionName\n type "]
239874[label="expressionName\n field "]
239875[label="expressionName\n target "]
239876[label="expressionName\n value "]
239877[label="expressionName\n delimiter "]
189878[label="expressionStatement\n set=true; "]
199879[label="assignment\n set=true "]
209880[label="expressionName\n set "]
209881[label="assignmentOperator\n = "]
209882[label="literal\n true "]
159883[label="ifThenStatement\n if(set&&!type.isArray())break; "]
169884[label="conditionalAndExpression\n set&&!type.isArray() "]
179885[label="expressionName\n set "]
179886[label="unaryExpressionNotPlusMinus\n !type.isArray() "]
189887[label="methodInvocation_lfno_primary\n type.isArray() "]
199888[label="typeName\n type "]
169889[label="breakStatement\n break; "]
99890[label="ifThenStatement\n if(!set&&argument.required()){Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);} "]
109891[label="conditionalAndExpression\n !set&&argument.required() "]
119892[label="unaryExpressionNotPlusMinus\n !set "]
129893[label="expressionName\n set "]
119894[label="methodInvocation_lfno_primary\n argument.required() "]
129895[label="typeName\n argument "]
109896[label="block\n {Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name);} "]
119897[label="blockStatements\n Stringname=getName(argument,field);thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name); "]
129898[label="localVariableDeclarationStatement\n Stringname=getName(argument,field); "]
139899[label="localVariableDeclaration\n Stringname=getName(argument,field) "]
149900[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
149901[label="variableDeclarator\n name=getName(argument,field) "]
159902[label="variableDeclaratorId\n name "]
159903[label="methodInvocation_lfno_primary\n getName(argument,field) "]
169904[label="methodName\n getName "]
169905[label="argumentList\n argument,field "]
179906[label="expressionName\n argument "]
179907[label="expressionName\n field "]
129908[label="throwStatement\n thrownewIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name); "]
139909[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"缺少必需参数: \"+argument.prefix()+name) "]
149910[label="additiveExpression\n \"缺少必需参数: \"+argument.prefix()+name "]
159911[label="additiveExpression\n \"缺少必需参数: \"+argument.prefix() "]
169912[label="literal\n \"缺少必需参数: \" "]
169913[label="methodInvocation_lfno_primary\n argument.prefix() "]
179914[label="typeName\n argument "]
159915[label="expressionName\n name "]
39916[label="methodDeclaration\n privatestaticvoidaddArgument(Classtype,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter){try{Object[]os=(Object[])field.get(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);field.set(target,s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}} "]
49917[label="methodModifier\n private "]
49918[label="methodModifier\n static "]
49919[label="methodHeader\n voidaddArgument(Classtype,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter) "]
59920[label="result\n void "]
59921[label="methodDeclarator\n addArgument(Classtype,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter) "]
69922[label="formalParameterList\n Classtype,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter "]
79923[label="formalParameters\n Classtype,Fieldfield,Objecttarget,Objectvalue "]
89924[label="formalParameter\n Classtype "]
99925[label="unannClassType_lfno_unannClassOrInterfaceType\n Class "]
99926[label="variableDeclaratorId\n type "]
89927[label="formalParameter\n Fieldfield "]
99928[label="unannClassType_lfno_unannClassOrInterfaceType\n Field "]
99929[label="variableDeclaratorId\n field "]
89930[label="formalParameter\n Objecttarget "]
99931[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
99932[label="variableDeclaratorId\n target "]
89933[label="formalParameter\n Objectvalue "]
99934[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
99935[label="variableDeclaratorId\n value "]
79936[label="formalParameter\n Stringdelimiter "]
89937[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
89938[label="variableDeclaratorId\n delimiter "]
49939[label="block\n {try{Object[]os=(Object[])field.get(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);field.set(target,s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}} "]
59940[label="tryStatement\n try{Object[]os=(Object[])field.get(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);field.set(target,s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
69941[label="block\n {Object[]os=(Object[])field.get(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);field.set(target,s);} "]
79942[label="blockStatements\n Object[]os=(Object[])field.get(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);field.set(target,s); "]
89943[label="localVariableDeclarationStatement\n Object[]os=(Object[])field.get(target); "]
99944[label="localVariableDeclaration\n Object[]os=(Object[])field.get(target) "]
109945[label="unannArrayType\n Object[] "]
119946[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
119947[label="dims\n [] "]
109948[label="variableDeclarator\n os=(Object[])field.get(target) "]
119949[label="variableDeclaratorId\n os "]
119950[label="castExpression\n (Object[])field.get(target) "]
129951[label="arrayType\n Object[] "]
139952[label="classType_lfno_classOrInterfaceType\n Object "]
139953[label="dims\n [] "]
129954[label="methodInvocation_lfno_primary\n field.get(target) "]
139955[label="typeName\n field "]
139956[label="expressionName\n target "]
89957[label="localVariableDeclarationStatement\n Object[]vs=(Object[])getValue(type,value,delimiter); "]
99958[label="localVariableDeclaration\n Object[]vs=(Object[])getValue(type,value,delimiter) "]
109959[label="unannArrayType\n Object[] "]
119960[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
119961[label="dims\n [] "]
109962[label="variableDeclarator\n vs=(Object[])getValue(type,value,delimiter) "]
119963[label="variableDeclaratorId\n vs "]
119964[label="castExpression\n (Object[])getValue(type,value,delimiter) "]
129965[label="arrayType\n Object[] "]
139966[label="classType_lfno_classOrInterfaceType\n Object "]
139967[label="dims\n [] "]
129968[label="methodInvocation_lfno_primary\n getValue(type,value,delimiter) "]
139969[label="methodName\n getValue "]
139970[label="argumentList\n type,value,delimiter "]
149971[label="expressionName\n type "]
149972[label="expressionName\n value "]
149973[label="expressionName\n delimiter "]
89974[label="localVariableDeclarationStatement\n Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length); "]
99975[label="localVariableDeclaration\n Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length) "]
109976[label="unannArrayType\n Object[] "]
119977[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
119978[label="dims\n [] "]
109979[label="variableDeclarator\n s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length) "]
119980[label="variableDeclaratorId\n s "]
119981[label="castExpression\n (Object[])Array.newInstance(type.getComponentType(),os.length+vs.length) "]
129982[label="arrayType\n Object[] "]
139983[label="classType_lfno_classOrInterfaceType\n Object "]
139984[label="dims\n [] "]
129985[label="methodInvocation_lfno_primary\n Array.newInstance(type.getComponentType(),os.length+vs.length) "]
139986[label="typeName\n Array "]
139987[label="argumentList\n type.getComponentType(),os.length+vs.length "]
149988[label="methodInvocation_lfno_primary\n type.getComponentType() "]
159989[label="typeName\n type "]
149990[label="additiveExpression\n os.length+vs.length "]
159991[label="expressionName\n os.length "]
169992[label="ambiguousName\n os "]
159993[label="expressionName\n vs.length "]
169994[label="ambiguousName\n vs "]
89995[label="expressionStatement\n System.arraycopy(os,0,s,0,os.length); "]
99996[label="methodInvocation\n System.arraycopy(os,0,s,0,os.length) "]
109997[label="typeName\n System "]
109998[label="argumentList\n os,0,s,0,os.length "]
119999[label="expressionName\n os "]
1110000[label="literal\n 0 "]
1110001[label="expressionName\n s "]
1110002[label="literal\n 0 "]
1110003[label="expressionName\n os.length "]
1210004[label="ambiguousName\n os "]
810005[label="expressionStatement\n System.arraycopy(vs,0,s,os.length,vs.length); "]
910006[label="methodInvocation\n System.arraycopy(vs,0,s,os.length,vs.length) "]
1010007[label="typeName\n System "]
1010008[label="argumentList\n vs,0,s,os.length,vs.length "]
1110009[label="expressionName\n vs "]
1110010[label="literal\n 0 "]
1110011[label="expressionName\n s "]
1110012[label="expressionName\n os.length "]
1210013[label="ambiguousName\n os "]
1110014[label="expressionName\n vs.length "]
1210015[label="ambiguousName\n vs "]
810016[label="expressionStatement\n field.set(target,s); "]
910017[label="methodInvocation\n field.set(target,s) "]
1010018[label="typeName\n field "]
1010019[label="argumentList\n target,s "]
1110020[label="expressionName\n target "]
1110021[label="expressionName\n s "]
610022[label="catches\n catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
710023[label="catchClause\n catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);} "]
810024[label="catchFormalParameter\n IllegalAccessExceptioniae "]
910025[label="unannClassType\n IllegalAccessException "]
910026[label="variableDeclaratorId\n iae "]
810027[label="block\n {thrownewIllegalArgumentException(\"Could not set field \"+field,iae);} "]
910028[label="throwStatement\n thrownewIllegalArgumentException(\"Could not set field \"+field,iae); "]
1010029[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not set field \"+field,iae) "]
1110030[label="argumentList\n \"Could not set field \"+field,iae "]
1210031[label="additiveExpression\n \"Could not set field \"+field "]
1310032[label="literal\n \"Could not set field \" "]
1310033[label="expressionName\n field "]
1210034[label="expressionName\n iae "]
710035[label="catchClause\n catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
810036[label="catchFormalParameter\n NoSuchMethodExceptione "]
910037[label="unannClassType\n NoSuchMethodException "]
910038[label="variableDeclaratorId\n e "]
810039[label="block\n {thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
910040[label="throwStatement\n thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e); "]
1010041[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e) "]
1110042[label="argumentList\n \"Could not find constructor in class \"+type.getName()+\" that takes a string\",e "]
1210043[label="additiveExpression\n \"Could not find constructor in class \"+type.getName()+\" that takes a string\" "]
1310044[label="additiveExpression\n \"Could not find constructor in class \"+type.getName() "]
1410045[label="literal\n \"Could not find constructor in class \" "]
1410046[label="methodInvocation_lfno_primary\n type.getName() "]
1510047[label="typeName\n type "]
1310048[label="literal\n \" that takes a string\" "]
1210049[label="expressionName\n e "]
310050[label="methodDeclaration\n privatestaticvoidaddPropertyArgument(Classtype,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter){try{Object[]os=(Object[])property.getReadMethod().invoke(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);property.getWriteMethod().invoke(target,(Object)s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);}} "]
410051[label="methodModifier\n private "]
410052[label="methodModifier\n static "]
410053[label="methodHeader\n voidaddPropertyArgument(Classtype,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter) "]
510054[label="result\n void "]
510055[label="methodDeclarator\n addPropertyArgument(Classtype,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter) "]
610056[label="formalParameterList\n Classtype,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter "]
710057[label="formalParameters\n Classtype,PropertyDescriptorproperty,Objecttarget,Objectvalue "]
810058[label="formalParameter\n Classtype "]
910059[label="unannClassType_lfno_unannClassOrInterfaceType\n Class "]
910060[label="variableDeclaratorId\n type "]
810061[label="formalParameter\n PropertyDescriptorproperty "]
910062[label="unannClassType_lfno_unannClassOrInterfaceType\n PropertyDescriptor "]
910063[label="variableDeclaratorId\n property "]
810064[label="formalParameter\n Objecttarget "]
910065[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
910066[label="variableDeclaratorId\n target "]
810067[label="formalParameter\n Objectvalue "]
910068[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
910069[label="variableDeclaratorId\n value "]
710070[label="formalParameter\n Stringdelimiter "]
810071[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
810072[label="variableDeclaratorId\n delimiter "]
410073[label="block\n {try{Object[]os=(Object[])property.getReadMethod().invoke(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);property.getWriteMethod().invoke(target,(Object)s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);}} "]
510074[label="tryStatement\n try{Object[]os=(Object[])property.getReadMethod().invoke(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);property.getWriteMethod().invoke(target,(Object)s);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);} "]
610075[label="block\n {Object[]os=(Object[])property.getReadMethod().invoke(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);property.getWriteMethod().invoke(target,(Object)s);} "]
710076[label="blockStatements\n Object[]os=(Object[])property.getReadMethod().invoke(target);Object[]vs=(Object[])getValue(type,value,delimiter);Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length);System.arraycopy(os,0,s,0,os.length);System.arraycopy(vs,0,s,os.length,vs.length);property.getWriteMethod().invoke(target,(Object)s); "]
810077[label="localVariableDeclarationStatement\n Object[]os=(Object[])property.getReadMethod().invoke(target); "]
910078[label="localVariableDeclaration\n Object[]os=(Object[])property.getReadMethod().invoke(target) "]
1010079[label="unannArrayType\n Object[] "]
1110080[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
1110081[label="dims\n [] "]
1010082[label="variableDeclarator\n os=(Object[])property.getReadMethod().invoke(target) "]
1110083[label="variableDeclaratorId\n os "]
1110084[label="castExpression\n (Object[])property.getReadMethod().invoke(target) "]
1210085[label="arrayType\n Object[] "]
1310086[label="classType_lfno_classOrInterfaceType\n Object "]
1310087[label="dims\n [] "]
1210088[label="primary\n property.getReadMethod().invoke(target) "]
1310089[label="methodInvocation_lfno_primary\n property.getReadMethod() "]
1410090[label="typeName\n property "]
1310091[label="methodInvocation_lf_primary\n .invoke(target) "]
1410092[label="expressionName\n target "]
810093[label="localVariableDeclarationStatement\n Object[]vs=(Object[])getValue(type,value,delimiter); "]
910094[label="localVariableDeclaration\n Object[]vs=(Object[])getValue(type,value,delimiter) "]
1010095[label="unannArrayType\n Object[] "]
1110096[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
1110097[label="dims\n [] "]
1010098[label="variableDeclarator\n vs=(Object[])getValue(type,value,delimiter) "]
1110099[label="variableDeclaratorId\n vs "]
1110100[label="castExpression\n (Object[])getValue(type,value,delimiter) "]
1210101[label="arrayType\n Object[] "]
1310102[label="classType_lfno_classOrInterfaceType\n Object "]
1310103[label="dims\n [] "]
1210104[label="methodInvocation_lfno_primary\n getValue(type,value,delimiter) "]
1310105[label="methodName\n getValue "]
1310106[label="argumentList\n type,value,delimiter "]
1410107[label="expressionName\n type "]
1410108[label="expressionName\n value "]
1410109[label="expressionName\n delimiter "]
810110[label="localVariableDeclarationStatement\n Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length); "]
910111[label="localVariableDeclaration\n Object[]s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length) "]
1010112[label="unannArrayType\n Object[] "]
1110113[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
1110114[label="dims\n [] "]
1010115[label="variableDeclarator\n s=(Object[])Array.newInstance(type.getComponentType(),os.length+vs.length) "]
1110116[label="variableDeclaratorId\n s "]
1110117[label="castExpression\n (Object[])Array.newInstance(type.getComponentType(),os.length+vs.length) "]
1210118[label="arrayType\n Object[] "]
1310119[label="classType_lfno_classOrInterfaceType\n Object "]
1310120[label="dims\n [] "]
1210121[label="methodInvocation_lfno_primary\n Array.newInstance(type.getComponentType(),os.length+vs.length) "]
1310122[label="typeName\n Array "]
1310123[label="argumentList\n type.getComponentType(),os.length+vs.length "]
1410124[label="methodInvocation_lfno_primary\n type.getComponentType() "]
1510125[label="typeName\n type "]
1410126[label="additiveExpression\n os.length+vs.length "]
1510127[label="expressionName\n os.length "]
1610128[label="ambiguousName\n os "]
1510129[label="expressionName\n vs.length "]
1610130[label="ambiguousName\n vs "]
810131[label="expressionStatement\n System.arraycopy(os,0,s,0,os.length); "]
910132[label="methodInvocation\n System.arraycopy(os,0,s,0,os.length) "]
1010133[label="typeName\n System "]
1010134[label="argumentList\n os,0,s,0,os.length "]
1110135[label="expressionName\n os "]
1110136[label="literal\n 0 "]
1110137[label="expressionName\n s "]
1110138[label="literal\n 0 "]
1110139[label="expressionName\n os.length "]
1210140[label="ambiguousName\n os "]
810141[label="expressionStatement\n System.arraycopy(vs,0,s,os.length,vs.length); "]
910142[label="methodInvocation\n System.arraycopy(vs,0,s,os.length,vs.length) "]
1010143[label="typeName\n System "]
1010144[label="argumentList\n vs,0,s,os.length,vs.length "]
1110145[label="expressionName\n vs "]
1110146[label="literal\n 0 "]
1110147[label="expressionName\n s "]
1110148[label="expressionName\n os.length "]
1210149[label="ambiguousName\n os "]
1110150[label="expressionName\n vs.length "]
1210151[label="ambiguousName\n vs "]
810152[label="expressionStatement\n property.getWriteMethod().invoke(target,(Object)s); "]
910153[label="methodInvocation\n property.getWriteMethod().invoke(target,(Object)s) "]
1010154[label="methodInvocation_lfno_primary\n property.getWriteMethod() "]
1110155[label="typeName\n property "]
1010156[label="argumentList\n target,(Object)s "]
1110157[label="expressionName\n target "]
1110158[label="castExpression\n (Object)s "]
1210159[label="classType_lfno_classOrInterfaceType\n Object "]
1210160[label="expressionName\n s "]
610161[label="catches\n catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);} "]
710162[label="catchClause\n catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);} "]
810163[label="catchFormalParameter\n IllegalAccessExceptioniae "]
910164[label="unannClassType\n IllegalAccessException "]
910165[label="variableDeclaratorId\n iae "]
810166[label="block\n {thrownewIllegalArgumentException(\"Could not set property \"+property,iae);} "]
910167[label="throwStatement\n thrownewIllegalArgumentException(\"Could not set property \"+property,iae); "]
1010168[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not set property \"+property,iae) "]
1110169[label="argumentList\n \"Could not set property \"+property,iae "]
1210170[label="additiveExpression\n \"Could not set property \"+property "]
1310171[label="literal\n \"Could not set property \" "]
1310172[label="expressionName\n property "]
1210173[label="expressionName\n iae "]
710174[label="catchClause\n catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
810175[label="catchFormalParameter\n NoSuchMethodExceptione "]
910176[label="unannClassType\n NoSuchMethodException "]
910177[label="variableDeclaratorId\n e "]
810178[label="block\n {thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
910179[label="throwStatement\n thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e); "]
1010180[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e) "]
1110181[label="argumentList\n \"Could not find constructor in class \"+type.getName()+\" that takes a string\",e "]
1210182[label="additiveExpression\n \"Could not find constructor in class \"+type.getName()+\" that takes a string\" "]
1310183[label="additiveExpression\n \"Could not find constructor in class \"+type.getName() "]
1410184[label="literal\n \"Could not find constructor in class \" "]
1410185[label="methodInvocation_lfno_primary\n type.getName() "]
1510186[label="typeName\n type "]
1310187[label="literal\n \" that takes a string\" "]
1210188[label="expressionName\n e "]
710189[label="catchClause\n catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);} "]
810190[label="catchFormalParameter\n InvocationTargetExceptione "]
910191[label="unannClassType\n InvocationTargetException "]
910192[label="variableDeclaratorId\n e "]
810193[label="block\n {thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);} "]
910194[label="throwStatement\n thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property); "]
1010195[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property) "]
1110196[label="additiveExpression\n \"Failed to validate argument \"+value+\" for \"+property "]
1210197[label="additiveExpression\n \"Failed to validate argument \"+value+\" for \" "]
1310198[label="additiveExpression\n \"Failed to validate argument \"+value "]
1410199[label="literal\n \"Failed to validate argument \" "]
1410200[label="expressionName\n value "]
1310201[label="literal\n \" for \" "]
1210202[label="expressionName\n property "]
310203[label="methodDeclaration\n privatestaticvoidprocessProperty(Objecttarget,PropertyDescriptorproperty,List<String>arguments){MethodwriteMethod=property.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}}}} "]
410204[label="methodModifier\n private "]
410205[label="methodModifier\n static "]
410206[label="methodHeader\n voidprocessProperty(Objecttarget,PropertyDescriptorproperty,List<String>arguments) "]
510207[label="result\n void "]
510208[label="methodDeclarator\n processProperty(Objecttarget,PropertyDescriptorproperty,List<String>arguments) "]
610209[label="formalParameterList\n Objecttarget,PropertyDescriptorproperty,List<String>arguments "]
710210[label="formalParameters\n Objecttarget,PropertyDescriptorproperty "]
810211[label="formalParameter\n Objecttarget "]
910212[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
910213[label="variableDeclaratorId\n target "]
810214[label="formalParameter\n PropertyDescriptorproperty "]
910215[label="unannClassType_lfno_unannClassOrInterfaceType\n PropertyDescriptor "]
910216[label="variableDeclaratorId\n property "]
710217[label="formalParameter\n List<String>arguments "]
810218[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
910219[label="typeArguments\n <String> "]
1010220[label="classType_lfno_classOrInterfaceType\n String "]
810221[label="variableDeclaratorId\n arguments "]
410222[label="block\n {MethodwriteMethod=property.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}}}} "]
510223[label="blockStatements\n MethodwriteMethod=property.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}}} "]
610224[label="localVariableDeclarationStatement\n MethodwriteMethod=property.getWriteMethod(); "]
710225[label="localVariableDeclaration\n MethodwriteMethod=property.getWriteMethod() "]
810226[label="unannClassType_lfno_unannClassOrInterfaceType\n Method "]
810227[label="variableDeclarator\n writeMethod=property.getWriteMethod() "]
910228[label="variableDeclaratorId\n writeMethod "]
910229[label="methodInvocation_lfno_primary\n property.getWriteMethod() "]
1010230[label="typeName\n property "]
610231[label="ifThenStatement\n if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}}} "]
710232[label="equalityExpression\n writeMethod!=null "]
810233[label="expressionName\n writeMethod "]
810234[label="literal\n null "]
710235[label="block\n {Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}}} "]
810236[label="blockStatements\n Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}} "]
910237[label="localVariableDeclarationStatement\n Argumentargument=writeMethod.getAnnotation(Argument.class); "]
1010238[label="localVariableDeclaration\n Argumentargument=writeMethod.getAnnotation(Argument.class) "]
1110239[label="unannClassType_lfno_unannClassOrInterfaceType\n Argument "]
1110240[label="variableDeclarator\n argument=writeMethod.getAnnotation(Argument.class) "]
1210241[label="variableDeclaratorId\n argument "]
1210242[label="methodInvocation_lfno_primary\n writeMethod.getAnnotation(Argument.class) "]
1310243[label="typeName\n writeMethod "]
1310244[label="primaryNoNewArray_lfno_primary\n Argument.class "]
1410245[label="typeName\n Argument "]
910246[label="ifThenStatement\n if(argument!=null){booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}} "]
1010247[label="equalityExpression\n argument!=null "]
1110248[label="expressionName\n argument "]
1110249[label="literal\n null "]
1010250[label="block\n {booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);}} "]
1110251[label="blockStatements\n booleanset=false;for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}}if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);} "]
1210252[label="localVariableDeclarationStatement\n booleanset=false; "]
1310253[label="localVariableDeclaration\n booleanset=false "]
1410254[label="unannPrimitiveType\n boolean "]
1410255[label="variableDeclarator\n set=false "]
1510256[label="variableDeclaratorId\n set "]
1510257[label="literal\n false "]
1210258[label="basicForStatement\n for(Iterator<String>i=arguments.iterator();i.hasNext();){Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}} "]
1310259[label="localVariableDeclaration\n Iterator<String>i=arguments.iterator() "]
1410260[label="unannClassType_lfno_unannClassOrInterfaceType\n Iterator<String> "]
1510261[label="typeArguments\n <String> "]
1610262[label="classType_lfno_classOrInterfaceType\n String "]
1410263[label="variableDeclarator\n i=arguments.iterator() "]
1510264[label="variableDeclaratorId\n i "]
1510265[label="methodInvocation_lfno_primary\n arguments.iterator() "]
1610266[label="typeName\n arguments "]
1310267[label="methodInvocation_lfno_primary\n i.hasNext() "]
1410268[label="typeName\n i "]
1310269[label="block\n {Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;}} "]
1410270[label="blockStatements\n Stringarg=i.next();Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;} "]
1510271[label="localVariableDeclarationStatement\n Stringarg=i.next(); "]
1610272[label="localVariableDeclaration\n Stringarg=i.next() "]
1710273[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1710274[label="variableDeclarator\n arg=i.next() "]
1810275[label="variableDeclaratorId\n arg "]
1810276[label="methodInvocation_lfno_primary\n i.next() "]
1910277[label="typeName\n i "]
1510278[label="localVariableDeclarationStatement\n Stringprefix=argument.prefix(); "]
1610279[label="localVariableDeclaration\n Stringprefix=argument.prefix() "]
1710280[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1710281[label="variableDeclarator\n prefix=argument.prefix() "]
1810282[label="variableDeclaratorId\n prefix "]
1810283[label="methodInvocation_lfno_primary\n argument.prefix() "]
1910284[label="typeName\n argument "]
1510285[label="localVariableDeclarationStatement\n Stringdelimiter=argument.delimiter(); "]
1610286[label="localVariableDeclaration\n Stringdelimiter=argument.delimiter() "]
1710287[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1710288[label="variableDeclarator\n delimiter=argument.delimiter() "]
1810289[label="variableDeclaratorId\n delimiter "]
1810290[label="methodInvocation_lfno_primary\n argument.delimiter() "]
1910291[label="typeName\n argument "]
1510292[label="ifThenStatement\n if(arg.startsWith(prefix)){Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;} "]
1610293[label="methodInvocation_lfno_primary\n arg.startsWith(prefix) "]
1710294[label="typeName\n arg "]
1710295[label="expressionName\n prefix "]
1610296[label="block\n {Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break;} "]
1710297[label="blockStatements\n Objectvalue;Stringname=getName(argument,property);Stringalias=getAlias(argument);arg=arg.substring(prefix.length());Class<?>type=property.getPropertyType();if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;}if(set&&!type.isArray())break; "]
1810298[label="localVariableDeclarationStatement\n Objectvalue; "]
1910299[label="localVariableDeclaration\n Objectvalue "]
2010300[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
2010301[label="variableDeclaratorId\n value "]
1810302[label="localVariableDeclarationStatement\n Stringname=getName(argument,property); "]
1910303[label="localVariableDeclaration\n Stringname=getName(argument,property) "]
2010304[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
2010305[label="variableDeclarator\n name=getName(argument,property) "]
2110306[label="variableDeclaratorId\n name "]
2110307[label="methodInvocation_lfno_primary\n getName(argument,property) "]
2210308[label="methodName\n getName "]
2210309[label="argumentList\n argument,property "]
2310310[label="expressionName\n argument "]
2310311[label="expressionName\n property "]
1810312[label="localVariableDeclarationStatement\n Stringalias=getAlias(argument); "]
1910313[label="localVariableDeclaration\n Stringalias=getAlias(argument) "]
2010314[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
2010315[label="variableDeclarator\n alias=getAlias(argument) "]
2110316[label="variableDeclaratorId\n alias "]
2110317[label="methodInvocation_lfno_primary\n getAlias(argument) "]
2210318[label="methodName\n getAlias "]
2210319[label="expressionName\n argument "]
1810320[label="expressionStatement\n arg=arg.substring(prefix.length()); "]
1910321[label="assignment\n arg=arg.substring(prefix.length()) "]
2010322[label="expressionName\n arg "]
2010323[label="assignmentOperator\n = "]
2010324[label="methodInvocation_lfno_primary\n arg.substring(prefix.length()) "]
2110325[label="typeName\n arg "]
2110326[label="methodInvocation_lfno_primary\n prefix.length() "]
2210327[label="typeName\n prefix "]
1810328[label="localVariableDeclarationStatement\n Class<?>type=property.getPropertyType(); "]
1910329[label="localVariableDeclaration\n Class<?>type=property.getPropertyType() "]
2010330[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
2110331[label="typeArguments\n <?> "]
2210332[label="wildcard\n ? "]
2010333[label="variableDeclarator\n type=property.getPropertyType() "]
2110334[label="variableDeclaratorId\n type "]
2110335[label="methodInvocation_lfno_primary\n property.getPropertyType() "]
2210336[label="typeName\n property "]
1810337[label="ifThenStatement\n if(arg.equals(name)||(alias!=null&&arg.equals(alias))){i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;} "]
1910338[label="conditionalOrExpression\n arg.equals(name)||(alias!=null&&arg.equals(alias)) "]
2010339[label="methodInvocation_lfno_primary\n arg.equals(name) "]
2110340[label="typeName\n arg "]
2110341[label="expressionName\n name "]
2010342[label="primaryNoNewArray_lfno_primary\n (alias!=null&&arg.equals(alias)) "]
2110343[label="conditionalAndExpression\n alias!=null&&arg.equals(alias) "]
2210344[label="equalityExpression\n alias!=null "]
2310345[label="expressionName\n alias "]
2310346[label="literal\n null "]
2210347[label="methodInvocation_lfno_primary\n arg.equals(alias) "]
2310348[label="typeName\n arg "]
2310349[label="expressionName\n alias "]
1910350[label="block\n {i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true;} "]
2010351[label="blockStatements\n i.remove();value=consumeArgumentValue(name,type,argument,i);if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);}set=true; "]
2110352[label="expressionStatement\n i.remove(); "]
2210353[label="methodInvocation\n i.remove() "]
2310354[label="typeName\n i "]
2110355[label="expressionStatement\n value=consumeArgumentValue(name,type,argument,i); "]
2210356[label="assignment\n value=consumeArgumentValue(name,type,argument,i) "]
2310357[label="expressionName\n value "]
2310358[label="assignmentOperator\n = "]
2310359[label="methodInvocation_lfno_primary\n consumeArgumentValue(name,type,argument,i) "]
2410360[label="methodName\n consumeArgumentValue "]
2410361[label="argumentList\n name,type,argument,i "]
2510362[label="expressionName\n name "]
2510363[label="expressionName\n type "]
2510364[label="expressionName\n argument "]
2510365[label="expressionName\n i "]
2110366[label="ifThenElseStatement\n if(!set){setProperty(type,property,target,value,delimiter);}else{addPropertyArgument(type,property,target,value,delimiter);} "]
2210367[label="unaryExpressionNotPlusMinus\n !set "]
2310368[label="expressionName\n set "]
2210369[label="block\n {setProperty(type,property,target,value,delimiter);} "]
2310370[label="expressionStatement\n setProperty(type,property,target,value,delimiter); "]
2410371[label="methodInvocation\n setProperty(type,property,target,value,delimiter) "]
2510372[label="methodName\n setProperty "]
2510373[label="argumentList\n type,property,target,value,delimiter "]
2610374[label="expressionName\n type "]
2610375[label="expressionName\n property "]
2610376[label="expressionName\n target "]
2610377[label="expressionName\n value "]
2610378[label="expressionName\n delimiter "]
2210379[label="block\n {addPropertyArgument(type,property,target,value,delimiter);} "]
2310380[label="expressionStatement\n addPropertyArgument(type,property,target,value,delimiter); "]
2410381[label="methodInvocation\n addPropertyArgument(type,property,target,value,delimiter) "]
2510382[label="methodName\n addPropertyArgument "]
2510383[label="argumentList\n type,property,target,value,delimiter "]
2610384[label="expressionName\n type "]
2610385[label="expressionName\n property "]
2610386[label="expressionName\n target "]
2610387[label="expressionName\n value "]
2610388[label="expressionName\n delimiter "]
2110389[label="expressionStatement\n set=true; "]
2210390[label="assignment\n set=true "]
2310391[label="expressionName\n set "]
2310392[label="assignmentOperator\n = "]
2310393[label="literal\n true "]
1810394[label="ifThenStatement\n if(set&&!type.isArray())break; "]
1910395[label="conditionalAndExpression\n set&&!type.isArray() "]
2010396[label="expressionName\n set "]
2010397[label="unaryExpressionNotPlusMinus\n !type.isArray() "]
2110398[label="methodInvocation_lfno_primary\n type.isArray() "]
2210399[label="typeName\n type "]
1910400[label="breakStatement\n break; "]
1210401[label="ifThenStatement\n if(!set&&argument.required()){Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);} "]
1310402[label="conditionalAndExpression\n !set&&argument.required() "]
1410403[label="unaryExpressionNotPlusMinus\n !set "]
1510404[label="expressionName\n set "]
1410405[label="methodInvocation_lfno_primary\n argument.required() "]
1510406[label="typeName\n argument "]
1310407[label="block\n {Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name);} "]
1410408[label="blockStatements\n Stringname=getName(argument,property);thrownewIllegalArgumentException(\"You must set argument \"+name); "]
1510409[label="localVariableDeclarationStatement\n Stringname=getName(argument,property); "]
1610410[label="localVariableDeclaration\n Stringname=getName(argument,property) "]
1710411[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1710412[label="variableDeclarator\n name=getName(argument,property) "]
1810413[label="variableDeclaratorId\n name "]
1810414[label="methodInvocation_lfno_primary\n getName(argument,property) "]
1910415[label="methodName\n getName "]
1910416[label="argumentList\n argument,property "]
2010417[label="expressionName\n argument "]
2010418[label="expressionName\n property "]
1510419[label="throwStatement\n thrownewIllegalArgumentException(\"You must set argument \"+name); "]
1610420[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"You must set argument \"+name) "]
1710421[label="additiveExpression\n \"You must set argument \"+name "]
1810422[label="literal\n \"You must set argument \" "]
1810423[label="expressionName\n name "]
310424[label="methodDeclaration\n publicstaticvoidusage(Objecttarget){usage(System.err,target);} "]
410425[label="methodModifier\n public "]
410426[label="methodModifier\n static "]
410427[label="methodHeader\n voidusage(Objecttarget) "]
510428[label="result\n void "]
510429[label="methodDeclarator\n usage(Objecttarget) "]
610430[label="formalParameter\n Objecttarget "]
710431[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
710432[label="variableDeclaratorId\n target "]
410433[label="block\n {usage(System.err,target);} "]
510434[label="expressionStatement\n usage(System.err,target); "]
610435[label="methodInvocation\n usage(System.err,target) "]
710436[label="methodName\n usage "]
710437[label="argumentList\n System.err,target "]
810438[label="expressionName\n System.err "]
910439[label="ambiguousName\n System "]
810440[label="expressionName\n target "]
310441[label="methodDeclaration\n publicstaticvoidusage(PrintStreamerrStream,Objecttarget){Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();}StringclazzName=clazz.getName();{intindex=clazzName.lastIndexOf('$');if(index>0){clazzName=clazzName.substring(0,index);}}errStream.println(\"用法: \"+clazzName);for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){fieldUsage(errStream,target,field);}}try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){propertyUsage(errStream,target,pd);}}catch(IntrospectionExceptione){}} "]
410442[label="methodModifier\n public "]
410443[label="methodModifier\n static "]
410444[label="methodHeader\n voidusage(PrintStreamerrStream,Objecttarget) "]
510445[label="result\n void "]
510446[label="methodDeclarator\n usage(PrintStreamerrStream,Objecttarget) "]
610447[label="formalParameterList\n PrintStreamerrStream,Objecttarget "]
710448[label="formalParameter\n PrintStreamerrStream "]
810449[label="unannClassType_lfno_unannClassOrInterfaceType\n PrintStream "]
810450[label="variableDeclaratorId\n errStream "]
710451[label="formalParameter\n Objecttarget "]
810452[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
810453[label="variableDeclaratorId\n target "]
410454[label="block\n {Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();}StringclazzName=clazz.getName();{intindex=clazzName.lastIndexOf('$');if(index>0){clazzName=clazzName.substring(0,index);}}errStream.println(\"用法: \"+clazzName);for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){fieldUsage(errStream,target,field);}}try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){propertyUsage(errStream,target,pd);}}catch(IntrospectionExceptione){}} "]
510455[label="blockStatements\n Class<?>clazz;if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();}StringclazzName=clazz.getName();{intindex=clazzName.lastIndexOf('$');if(index>0){clazzName=clazzName.substring(0,index);}}errStream.println(\"用法: \"+clazzName);for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){fieldUsage(errStream,target,field);}}try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){propertyUsage(errStream,target,pd);}}catch(IntrospectionExceptione){} "]
610456[label="localVariableDeclarationStatement\n Class<?>clazz; "]
710457[label="localVariableDeclaration\n Class<?>clazz "]
810458[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
910459[label="typeArguments\n <?> "]
1010460[label="wildcard\n ? "]
810461[label="variableDeclaratorId\n clazz "]
610462[label="ifThenElseStatement\n if(targetinstanceofClass){clazz=(Class)target;}else{clazz=target.getClass();} "]
710463[label="relationalExpression\n targetinstanceofClass "]
810464[label="expressionName\n target "]
810465[label="classType_lfno_classOrInterfaceType\n Class "]
710466[label="block\n {clazz=(Class)target;} "]
810467[label="expressionStatement\n clazz=(Class)target; "]
910468[label="assignment\n clazz=(Class)target "]
1010469[label="expressionName\n clazz "]
1010470[label="assignmentOperator\n = "]
1010471[label="castExpression\n (Class)target "]
1110472[label="classType_lfno_classOrInterfaceType\n Class "]
1110473[label="expressionName\n target "]
710474[label="block\n {clazz=target.getClass();} "]
810475[label="expressionStatement\n clazz=target.getClass(); "]
910476[label="assignment\n clazz=target.getClass() "]
1010477[label="expressionName\n clazz "]
1010478[label="assignmentOperator\n = "]
1010479[label="methodInvocation_lfno_primary\n target.getClass() "]
1110480[label="typeName\n target "]
610481[label="localVariableDeclarationStatement\n StringclazzName=clazz.getName(); "]
710482[label="localVariableDeclaration\n StringclazzName=clazz.getName() "]
810483[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
810484[label="variableDeclarator\n clazzName=clazz.getName() "]
910485[label="variableDeclaratorId\n clazzName "]
910486[label="methodInvocation_lfno_primary\n clazz.getName() "]
1010487[label="typeName\n clazz "]
610488[label="block\n {intindex=clazzName.lastIndexOf('$');if(index>0){clazzName=clazzName.substring(0,index);}} "]
710489[label="blockStatements\n intindex=clazzName.lastIndexOf('$');if(index>0){clazzName=clazzName.substring(0,index);} "]
810490[label="localVariableDeclarationStatement\n intindex=clazzName.lastIndexOf('$'); "]
910491[label="localVariableDeclaration\n intindex=clazzName.lastIndexOf('$') "]
1010492[label="integralType\n int "]
1010493[label="variableDeclarator\n index=clazzName.lastIndexOf('$') "]
1110494[label="variableDeclaratorId\n index "]
1110495[label="methodInvocation_lfno_primary\n clazzName.lastIndexOf('$') "]
1210496[label="typeName\n clazzName "]
1210497[label="literal\n '$' "]
810498[label="ifThenStatement\n if(index>0){clazzName=clazzName.substring(0,index);} "]
910499[label="relationalExpression\n index>0 "]
1010500[label="expressionName\n index "]
1010501[label="literal\n 0 "]
910502[label="block\n {clazzName=clazzName.substring(0,index);} "]
1010503[label="expressionStatement\n clazzName=clazzName.substring(0,index); "]
1110504[label="assignment\n clazzName=clazzName.substring(0,index) "]
1210505[label="expressionName\n clazzName "]
1210506[label="assignmentOperator\n = "]
1210507[label="methodInvocation_lfno_primary\n clazzName.substring(0,index) "]
1310508[label="typeName\n clazzName "]
1310509[label="argumentList\n 0,index "]
1410510[label="literal\n 0 "]
1410511[label="expressionName\n index "]
610512[label="expressionStatement\n errStream.println(\"用法: \"+clazzName); "]
710513[label="methodInvocation\n errStream.println(\"用法: \"+clazzName) "]
810514[label="typeName\n errStream "]
810515[label="additiveExpression\n \"用法: \"+clazzName "]
910516[label="literal\n \"用法: \" "]
910517[label="expressionName\n clazzName "]
610518[label="basicForStatement\n for(Class<?>currentClazz=clazz;currentClazz!=null;currentClazz=currentClazz.getSuperclass()){for(Fieldfield:currentClazz.getDeclaredFields()){fieldUsage(errStream,target,field);}} "]
710519[label="localVariableDeclaration\n Class<?>currentClazz=clazz "]
810520[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
910521[label="typeArguments\n <?> "]
1010522[label="wildcard\n ? "]
810523[label="variableDeclarator\n currentClazz=clazz "]
910524[label="variableDeclaratorId\n currentClazz "]
910525[label="expressionName\n clazz "]
710526[label="equalityExpression\n currentClazz!=null "]
810527[label="expressionName\n currentClazz "]
810528[label="literal\n null "]
710529[label="assignment\n currentClazz=currentClazz.getSuperclass() "]
810530[label="expressionName\n currentClazz "]
810531[label="assignmentOperator\n = "]
810532[label="methodInvocation_lfno_primary\n currentClazz.getSuperclass() "]
910533[label="typeName\n currentClazz "]
710534[label="block\n {for(Fieldfield:currentClazz.getDeclaredFields()){fieldUsage(errStream,target,field);}} "]
810535[label="enhancedForStatement\n for(Fieldfield:currentClazz.getDeclaredFields()){fieldUsage(errStream,target,field);} "]
910536[label="unannClassType_lfno_unannClassOrInterfaceType\n Field "]
910537[label="variableDeclaratorId\n field "]
910538[label="methodInvocation_lfno_primary\n currentClazz.getDeclaredFields() "]
1010539[label="typeName\n currentClazz "]
910540[label="block\n {fieldUsage(errStream,target,field);} "]
1010541[label="expressionStatement\n fieldUsage(errStream,target,field); "]
1110542[label="methodInvocation\n fieldUsage(errStream,target,field) "]
1210543[label="methodName\n fieldUsage "]
1210544[label="argumentList\n errStream,target,field "]
1310545[label="expressionName\n errStream "]
1310546[label="expressionName\n target "]
1310547[label="expressionName\n field "]
610548[label="tryStatement\n try{BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){propertyUsage(errStream,target,pd);}}catch(IntrospectionExceptione){} "]
710549[label="block\n {BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){propertyUsage(errStream,target,pd);}} "]
810550[label="blockStatements\n BeanInfoinfo=Introspector.getBeanInfo(clazz);for(PropertyDescriptorpd:info.getPropertyDescriptors()){propertyUsage(errStream,target,pd);} "]
910551[label="localVariableDeclarationStatement\n BeanInfoinfo=Introspector.getBeanInfo(clazz); "]
1010552[label="localVariableDeclaration\n BeanInfoinfo=Introspector.getBeanInfo(clazz) "]
1110553[label="unannClassType_lfno_unannClassOrInterfaceType\n BeanInfo "]
1110554[label="variableDeclarator\n info=Introspector.getBeanInfo(clazz) "]
1210555[label="variableDeclaratorId\n info "]
1210556[label="methodInvocation_lfno_primary\n Introspector.getBeanInfo(clazz) "]
1310557[label="typeName\n Introspector "]
1310558[label="expressionName\n clazz "]
910559[label="enhancedForStatement\n for(PropertyDescriptorpd:info.getPropertyDescriptors()){propertyUsage(errStream,target,pd);} "]
1010560[label="unannClassType_lfno_unannClassOrInterfaceType\n PropertyDescriptor "]
1010561[label="variableDeclaratorId\n pd "]
1010562[label="methodInvocation_lfno_primary\n info.getPropertyDescriptors() "]
1110563[label="typeName\n info "]
1010564[label="block\n {propertyUsage(errStream,target,pd);} "]
1110565[label="expressionStatement\n propertyUsage(errStream,target,pd); "]
1210566[label="methodInvocation\n propertyUsage(errStream,target,pd) "]
1310567[label="methodName\n propertyUsage "]
1310568[label="argumentList\n errStream,target,pd "]
1410569[label="expressionName\n errStream "]
1410570[label="expressionName\n target "]
1410571[label="expressionName\n pd "]
710572[label="catchClause\n catch(IntrospectionExceptione){} "]
810573[label="catchFormalParameter\n IntrospectionExceptione "]
910574[label="unannClassType\n IntrospectionException "]
910575[label="variableDeclaratorId\n e "]
810576[label="block\n {} "]
310577[label="methodDeclaration\n privatestaticvoidfieldUsage(PrintStreamerrStream,Objecttarget,Fieldfield){Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();makeAccessible(field);try{ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}}} "]
410578[label="methodModifier\n private "]
410579[label="methodModifier\n static "]
410580[label="methodHeader\n voidfieldUsage(PrintStreamerrStream,Objecttarget,Fieldfield) "]
510581[label="result\n void "]
510582[label="methodDeclarator\n fieldUsage(PrintStreamerrStream,Objecttarget,Fieldfield) "]
610583[label="formalParameterList\n PrintStreamerrStream,Objecttarget,Fieldfield "]
710584[label="formalParameters\n PrintStreamerrStream,Objecttarget "]
810585[label="formalParameter\n PrintStreamerrStream "]
910586[label="unannClassType_lfno_unannClassOrInterfaceType\n PrintStream "]
910587[label="variableDeclaratorId\n errStream "]
810588[label="formalParameter\n Objecttarget "]
910589[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
910590[label="variableDeclaratorId\n target "]
710591[label="formalParameter\n Fieldfield "]
810592[label="unannClassType_lfno_unannClassOrInterfaceType\n Field "]
810593[label="variableDeclaratorId\n field "]
410594[label="block\n {Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();makeAccessible(field);try{ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}}} "]
510595[label="blockStatements\n Argumentargument=field.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();makeAccessible(field);try{ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}} "]
610596[label="localVariableDeclarationStatement\n Argumentargument=field.getAnnotation(Argument.class); "]
710597[label="localVariableDeclaration\n Argumentargument=field.getAnnotation(Argument.class) "]
810598[label="unannClassType_lfno_unannClassOrInterfaceType\n Argument "]
810599[label="variableDeclarator\n argument=field.getAnnotation(Argument.class) "]
910600[label="variableDeclaratorId\n argument "]
910601[label="methodInvocation_lfno_primary\n field.getAnnotation(Argument.class) "]
1010602[label="typeName\n field "]
1010603[label="primaryNoNewArray_lfno_primary\n Argument.class "]
1110604[label="typeName\n Argument "]
610605[label="ifThenStatement\n if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();makeAccessible(field);try{ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}} "]
710606[label="equalityExpression\n argument!=null "]
810607[label="expressionName\n argument "]
810608[label="literal\n null "]
710609[label="block\n {Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();makeAccessible(field);try{ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}} "]
810610[label="blockStatements\n Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();makeAccessible(field);try{ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);} "]
910611[label="localVariableDeclarationStatement\n Stringname=getName(argument,field); "]
1010612[label="localVariableDeclaration\n Stringname=getName(argument,field) "]
1110613[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1110614[label="variableDeclarator\n name=getName(argument,field) "]
1210615[label="variableDeclaratorId\n name "]
1210616[label="methodInvocation_lfno_primary\n getName(argument,field) "]
1310617[label="methodName\n getName "]
1310618[label="argumentList\n argument,field "]
1410619[label="expressionName\n argument "]
1410620[label="expressionName\n field "]
910621[label="localVariableDeclarationStatement\n Stringalias=getAlias(argument); "]
1010622[label="localVariableDeclaration\n Stringalias=getAlias(argument) "]
1110623[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1110624[label="variableDeclarator\n alias=getAlias(argument) "]
1210625[label="variableDeclaratorId\n alias "]
1210626[label="methodInvocation_lfno_primary\n getAlias(argument) "]
1310627[label="methodName\n getAlias "]
1310628[label="expressionName\n argument "]
910629[label="localVariableDeclarationStatement\n Stringprefix=argument.prefix(); "]
1010630[label="localVariableDeclaration\n Stringprefix=argument.prefix() "]
1110631[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1110632[label="variableDeclarator\n prefix=argument.prefix() "]
1210633[label="variableDeclaratorId\n prefix "]
1210634[label="methodInvocation_lfno_primary\n argument.prefix() "]
1310635[label="typeName\n argument "]
910636[label="localVariableDeclarationStatement\n Stringdelimiter=argument.delimiter(); "]
1010637[label="localVariableDeclaration\n Stringdelimiter=argument.delimiter() "]
1110638[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1110639[label="variableDeclarator\n delimiter=argument.delimiter() "]
1210640[label="variableDeclaratorId\n delimiter "]
1210641[label="methodInvocation_lfno_primary\n argument.delimiter() "]
1310642[label="typeName\n argument "]
910643[label="localVariableDeclarationStatement\n Stringdescription=argument.description(); "]
1010644[label="localVariableDeclaration\n Stringdescription=argument.description() "]
1110645[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1110646[label="variableDeclarator\n description=argument.description() "]
1210647[label="variableDeclaratorId\n description "]
1210648[label="methodInvocation_lfno_primary\n argument.description() "]
1310649[label="typeName\n argument "]
910650[label="expressionStatement\n makeAccessible(field); "]
1010651[label="methodInvocation\n makeAccessible(field) "]
1110652[label="methodName\n makeAccessible "]
1110653[label="expressionName\n field "]
910654[label="tryStatement\n try{ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);} "]
1010655[label="block\n {ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);} "]
1110656[label="blockStatements\n ObjectdefaultValue=field.get(target);Class<?>type=field.getType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue); "]
1210657[label="localVariableDeclarationStatement\n ObjectdefaultValue=field.get(target); "]
1310658[label="localVariableDeclaration\n ObjectdefaultValue=field.get(target) "]
1410659[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
1410660[label="variableDeclarator\n defaultValue=field.get(target) "]
1510661[label="variableDeclaratorId\n defaultValue "]
1510662[label="methodInvocation_lfno_primary\n field.get(target) "]
1610663[label="typeName\n field "]
1610664[label="expressionName\n target "]
1210665[label="localVariableDeclarationStatement\n Class<?>type=field.getType(); "]
1310666[label="localVariableDeclaration\n Class<?>type=field.getType() "]
1410667[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
1510668[label="typeArguments\n <?> "]
1610669[label="wildcard\n ? "]
1410670[label="variableDeclarator\n type=field.getType() "]
1510671[label="variableDeclaratorId\n type "]
1510672[label="methodInvocation_lfno_primary\n field.getType() "]
1610673[label="typeName\n field "]
1210674[label="expressionStatement\n propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue); "]
1310675[label="methodInvocation\n propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue) "]
1410676[label="methodName\n propertyUsage "]
1410677[label="argumentList\n errStream,prefix,name,alias,type,delimiter,description,defaultValue "]
1510678[label="expressionName\n errStream "]
1510679[label="expressionName\n prefix "]
1510680[label="expressionName\n name "]
1510681[label="expressionName\n alias "]
1510682[label="expressionName\n type "]
1510683[label="expressionName\n delimiter "]
1510684[label="expressionName\n description "]
1510685[label="expressionName\n defaultValue "]
1010686[label="catchClause\n catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);} "]
1110687[label="catchFormalParameter\n IllegalAccessExceptione "]
1210688[label="unannClassType\n IllegalAccessException "]
1210689[label="variableDeclaratorId\n e "]
1110690[label="block\n {thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);} "]
1210691[label="throwStatement\n thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e); "]
1310692[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e) "]
1410693[label="argumentList\n \"Could not use thie field \"+field+\" as an argument field\",e "]
1510694[label="additiveExpression\n \"Could not use thie field \"+field+\" as an argument field\" "]
1610695[label="additiveExpression\n \"Could not use thie field \"+field "]
1710696[label="literal\n \"Could not use thie field \" "]
1710697[label="expressionName\n field "]
1610698[label="literal\n \" as an argument field\" "]
1510699[label="expressionName\n e "]
310700[label="methodDeclaration\n privatestaticvoidpropertyUsage(PrintStreamerrStream,Objecttarget,PropertyDescriptorfield){MethodwriteMethod=field.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}}}} "]
410701[label="methodModifier\n private "]
410702[label="methodModifier\n static "]
410703[label="methodHeader\n voidpropertyUsage(PrintStreamerrStream,Objecttarget,PropertyDescriptorfield) "]
510704[label="result\n void "]
510705[label="methodDeclarator\n propertyUsage(PrintStreamerrStream,Objecttarget,PropertyDescriptorfield) "]
610706[label="formalParameterList\n PrintStreamerrStream,Objecttarget,PropertyDescriptorfield "]
710707[label="formalParameters\n PrintStreamerrStream,Objecttarget "]
810708[label="formalParameter\n PrintStreamerrStream "]
910709[label="unannClassType_lfno_unannClassOrInterfaceType\n PrintStream "]
910710[label="variableDeclaratorId\n errStream "]
810711[label="formalParameter\n Objecttarget "]
910712[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
910713[label="variableDeclaratorId\n target "]
710714[label="formalParameter\n PropertyDescriptorfield "]
810715[label="unannClassType_lfno_unannClassOrInterfaceType\n PropertyDescriptor "]
810716[label="variableDeclaratorId\n field "]
410717[label="block\n {MethodwriteMethod=field.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}}}} "]
510718[label="blockStatements\n MethodwriteMethod=field.getWriteMethod();if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}}} "]
610719[label="localVariableDeclarationStatement\n MethodwriteMethod=field.getWriteMethod(); "]
710720[label="localVariableDeclaration\n MethodwriteMethod=field.getWriteMethod() "]
810721[label="unannClassType_lfno_unannClassOrInterfaceType\n Method "]
810722[label="variableDeclarator\n writeMethod=field.getWriteMethod() "]
910723[label="variableDeclaratorId\n writeMethod "]
910724[label="methodInvocation_lfno_primary\n field.getWriteMethod() "]
1010725[label="typeName\n field "]
610726[label="ifThenStatement\n if(writeMethod!=null){Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}}} "]
710727[label="equalityExpression\n writeMethod!=null "]
810728[label="expressionName\n writeMethod "]
810729[label="literal\n null "]
710730[label="block\n {Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}}} "]
810731[label="blockStatements\n Argumentargument=writeMethod.getAnnotation(Argument.class);if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}} "]
910732[label="localVariableDeclarationStatement\n Argumentargument=writeMethod.getAnnotation(Argument.class); "]
1010733[label="localVariableDeclaration\n Argumentargument=writeMethod.getAnnotation(Argument.class) "]
1110734[label="unannClassType_lfno_unannClassOrInterfaceType\n Argument "]
1110735[label="variableDeclarator\n argument=writeMethod.getAnnotation(Argument.class) "]
1210736[label="variableDeclaratorId\n argument "]
1210737[label="methodInvocation_lfno_primary\n writeMethod.getAnnotation(Argument.class) "]
1310738[label="typeName\n writeMethod "]
1310739[label="primaryNoNewArray_lfno_primary\n Argument.class "]
1410740[label="typeName\n Argument "]
910741[label="ifThenStatement\n if(argument!=null){Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}} "]
1010742[label="equalityExpression\n argument!=null "]
1110743[label="expressionName\n argument "]
1110744[label="literal\n null "]
1010745[label="block\n {Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);}} "]
1110746[label="blockStatements\n Stringname=getName(argument,field);Stringalias=getAlias(argument);Stringprefix=argument.prefix();Stringdelimiter=argument.delimiter();Stringdescription=argument.description();try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);} "]
1210747[label="localVariableDeclarationStatement\n Stringname=getName(argument,field); "]
1310748[label="localVariableDeclaration\n Stringname=getName(argument,field) "]
1410749[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1410750[label="variableDeclarator\n name=getName(argument,field) "]
1510751[label="variableDeclaratorId\n name "]
1510752[label="methodInvocation_lfno_primary\n getName(argument,field) "]
1610753[label="methodName\n getName "]
1610754[label="argumentList\n argument,field "]
1710755[label="expressionName\n argument "]
1710756[label="expressionName\n field "]
1210757[label="localVariableDeclarationStatement\n Stringalias=getAlias(argument); "]
1310758[label="localVariableDeclaration\n Stringalias=getAlias(argument) "]
1410759[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1410760[label="variableDeclarator\n alias=getAlias(argument) "]
1510761[label="variableDeclaratorId\n alias "]
1510762[label="methodInvocation_lfno_primary\n getAlias(argument) "]
1610763[label="methodName\n getAlias "]
1610764[label="expressionName\n argument "]
1210765[label="localVariableDeclarationStatement\n Stringprefix=argument.prefix(); "]
1310766[label="localVariableDeclaration\n Stringprefix=argument.prefix() "]
1410767[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1410768[label="variableDeclarator\n prefix=argument.prefix() "]
1510769[label="variableDeclaratorId\n prefix "]
1510770[label="methodInvocation_lfno_primary\n argument.prefix() "]
1610771[label="typeName\n argument "]
1210772[label="localVariableDeclarationStatement\n Stringdelimiter=argument.delimiter(); "]
1310773[label="localVariableDeclaration\n Stringdelimiter=argument.delimiter() "]
1410774[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1410775[label="variableDeclarator\n delimiter=argument.delimiter() "]
1510776[label="variableDeclaratorId\n delimiter "]
1510777[label="methodInvocation_lfno_primary\n argument.delimiter() "]
1610778[label="typeName\n argument "]
1210779[label="localVariableDeclarationStatement\n Stringdescription=argument.description(); "]
1310780[label="localVariableDeclaration\n Stringdescription=argument.description() "]
1410781[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1410782[label="variableDeclarator\n description=argument.description() "]
1510783[label="variableDeclaratorId\n description "]
1510784[label="methodInvocation_lfno_primary\n argument.description() "]
1610785[label="typeName\n argument "]
1210786[label="tryStatement\n try{MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);}catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);} "]
1310787[label="block\n {MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue);} "]
1410788[label="blockStatements\n MethodreadMethod=field.getReadMethod();ObjectdefaultValue;if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);}Class<?>type=field.getPropertyType();propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue); "]
1510789[label="localVariableDeclarationStatement\n MethodreadMethod=field.getReadMethod(); "]
1610790[label="localVariableDeclaration\n MethodreadMethod=field.getReadMethod() "]
1710791[label="unannClassType_lfno_unannClassOrInterfaceType\n Method "]
1710792[label="variableDeclarator\n readMethod=field.getReadMethod() "]
1810793[label="variableDeclaratorId\n readMethod "]
1810794[label="methodInvocation_lfno_primary\n field.getReadMethod() "]
1910795[label="typeName\n field "]
1510796[label="localVariableDeclarationStatement\n ObjectdefaultValue; "]
1610797[label="localVariableDeclaration\n ObjectdefaultValue "]
1710798[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
1710799[label="variableDeclaratorId\n defaultValue "]
1510800[label="ifThenElseStatement\n if(readMethod==null){defaultValue=null;}else{defaultValue=readMethod.invoke(target,(Object[])null);} "]
1610801[label="equalityExpression\n readMethod==null "]
1710802[label="expressionName\n readMethod "]
1710803[label="literal\n null "]
1610804[label="block\n {defaultValue=null;} "]
1710805[label="expressionStatement\n defaultValue=null; "]
1810806[label="assignment\n defaultValue=null "]
1910807[label="expressionName\n defaultValue "]
1910808[label="assignmentOperator\n = "]
1910809[label="literal\n null "]
1610810[label="block\n {defaultValue=readMethod.invoke(target,(Object[])null);} "]
1710811[label="expressionStatement\n defaultValue=readMethod.invoke(target,(Object[])null); "]
1810812[label="assignment\n defaultValue=readMethod.invoke(target,(Object[])null) "]
1910813[label="expressionName\n defaultValue "]
1910814[label="assignmentOperator\n = "]
1910815[label="methodInvocation_lfno_primary\n readMethod.invoke(target,(Object[])null) "]
2010816[label="typeName\n readMethod "]
2010817[label="argumentList\n target,(Object[])null "]
2110818[label="expressionName\n target "]
2110819[label="castExpression\n (Object[])null "]
2210820[label="arrayType\n Object[] "]
2310821[label="classType_lfno_classOrInterfaceType\n Object "]
2310822[label="dims\n [] "]
2210823[label="literal\n null "]
1510824[label="localVariableDeclarationStatement\n Class<?>type=field.getPropertyType(); "]
1610825[label="localVariableDeclaration\n Class<?>type=field.getPropertyType() "]
1710826[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
1810827[label="typeArguments\n <?> "]
1910828[label="wildcard\n ? "]
1710829[label="variableDeclarator\n type=field.getPropertyType() "]
1810830[label="variableDeclaratorId\n type "]
1810831[label="methodInvocation_lfno_primary\n field.getPropertyType() "]
1910832[label="typeName\n field "]
1510833[label="expressionStatement\n propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue); "]
1610834[label="methodInvocation\n propertyUsage(errStream,prefix,name,alias,type,delimiter,description,defaultValue) "]
1710835[label="methodName\n propertyUsage "]
1710836[label="argumentList\n errStream,prefix,name,alias,type,delimiter,description,defaultValue "]
1810837[label="expressionName\n errStream "]
1810838[label="expressionName\n prefix "]
1810839[label="expressionName\n name "]
1810840[label="expressionName\n alias "]
1810841[label="expressionName\n type "]
1810842[label="expressionName\n delimiter "]
1810843[label="expressionName\n description "]
1810844[label="expressionName\n defaultValue "]
1310845[label="catches\n catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);} "]
1410846[label="catchClause\n catch(IllegalAccessExceptione){thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);} "]
1510847[label="catchFormalParameter\n IllegalAccessExceptione "]
1610848[label="unannClassType\n IllegalAccessException "]
1610849[label="variableDeclaratorId\n e "]
1510850[label="block\n {thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e);} "]
1610851[label="throwStatement\n thrownewIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e); "]
1710852[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not use thie field \"+field+\" as an argument field\",e) "]
1810853[label="argumentList\n \"Could not use thie field \"+field+\" as an argument field\",e "]
1910854[label="additiveExpression\n \"Could not use thie field \"+field+\" as an argument field\" "]
2010855[label="additiveExpression\n \"Could not use thie field \"+field "]
2110856[label="literal\n \"Could not use thie field \" "]
2110857[label="expressionName\n field "]
2010858[label="literal\n \" as an argument field\" "]
1910859[label="expressionName\n e "]
1410860[label="catchClause\n catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);} "]
1510861[label="catchFormalParameter\n InvocationTargetExceptione "]
1610862[label="unannClassType\n InvocationTargetException "]
1610863[label="variableDeclaratorId\n e "]
1510864[label="block\n {thrownewIllegalArgumentException(\"Could not get default value for \"+field,e);} "]
1610865[label="throwStatement\n thrownewIllegalArgumentException(\"Could not get default value for \"+field,e); "]
1710866[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not get default value for \"+field,e) "]
1810867[label="argumentList\n \"Could not get default value for \"+field,e "]
1910868[label="additiveExpression\n \"Could not get default value for \"+field "]
2010869[label="literal\n \"Could not get default value for \" "]
2010870[label="expressionName\n field "]
1910871[label="expressionName\n e "]
310872[label="methodDeclaration\n privatestaticvoidpropertyUsage(PrintStreamerrStream,Stringprefix,Stringname,Stringalias,Class<?>type,Stringdelimiter,Stringdescription,ObjectdefaultValue){StringBuildersb=newStringBuilder(\"  \");sb.append(prefix);sb.append(name);if(alias!=null){sb.append(\" (\");sb.append(prefix);sb.append(alias);sb.append(\")\");}if(type==Boolean.TYPE||type==Boolean.class){sb.append(\"\t[flag]\t\");sb.append(description);}else{sb.append(\"\t[\");if(type.isArray()){StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");}else{StringtypeName=getTypeName(type);sb.append(typeName);}sb.append(\"]\t\");sb.append(description);if(defaultValue!=null){sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");}}errStream.println(sb);} "]
410873[label="methodModifier\n private "]
410874[label="methodModifier\n static "]
410875[label="methodHeader\n voidpropertyUsage(PrintStreamerrStream,Stringprefix,Stringname,Stringalias,Class<?>type,Stringdelimiter,Stringdescription,ObjectdefaultValue) "]
510876[label="result\n void "]
510877[label="methodDeclarator\n propertyUsage(PrintStreamerrStream,Stringprefix,Stringname,Stringalias,Class<?>type,Stringdelimiter,Stringdescription,ObjectdefaultValue) "]
610878[label="formalParameterList\n PrintStreamerrStream,Stringprefix,Stringname,Stringalias,Class<?>type,Stringdelimiter,Stringdescription,ObjectdefaultValue "]
710879[label="formalParameters\n PrintStreamerrStream,Stringprefix,Stringname,Stringalias,Class<?>type,Stringdelimiter,Stringdescription "]
810880[label="formalParameter\n PrintStreamerrStream "]
910881[label="unannClassType_lfno_unannClassOrInterfaceType\n PrintStream "]
910882[label="variableDeclaratorId\n errStream "]
810883[label="formalParameter\n Stringprefix "]
910884[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
910885[label="variableDeclaratorId\n prefix "]
810886[label="formalParameter\n Stringname "]
910887[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
910888[label="variableDeclaratorId\n name "]
810889[label="formalParameter\n Stringalias "]
910890[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
910891[label="variableDeclaratorId\n alias "]
810892[label="formalParameter\n Class<?>type "]
910893[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
1010894[label="typeArguments\n <?> "]
1110895[label="wildcard\n ? "]
910896[label="variableDeclaratorId\n type "]
810897[label="formalParameter\n Stringdelimiter "]
910898[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
910899[label="variableDeclaratorId\n delimiter "]
810900[label="formalParameter\n Stringdescription "]
910901[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
910902[label="variableDeclaratorId\n description "]
710903[label="formalParameter\n ObjectdefaultValue "]
810904[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
810905[label="variableDeclaratorId\n defaultValue "]
410906[label="block\n {StringBuildersb=newStringBuilder(\"  \");sb.append(prefix);sb.append(name);if(alias!=null){sb.append(\" (\");sb.append(prefix);sb.append(alias);sb.append(\")\");}if(type==Boolean.TYPE||type==Boolean.class){sb.append(\"\t[flag]\t\");sb.append(description);}else{sb.append(\"\t[\");if(type.isArray()){StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");}else{StringtypeName=getTypeName(type);sb.append(typeName);}sb.append(\"]\t\");sb.append(description);if(defaultValue!=null){sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");}}errStream.println(sb);} "]
510907[label="blockStatements\n StringBuildersb=newStringBuilder(\"  \");sb.append(prefix);sb.append(name);if(alias!=null){sb.append(\" (\");sb.append(prefix);sb.append(alias);sb.append(\")\");}if(type==Boolean.TYPE||type==Boolean.class){sb.append(\"\t[flag]\t\");sb.append(description);}else{sb.append(\"\t[\");if(type.isArray()){StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");}else{StringtypeName=getTypeName(type);sb.append(typeName);}sb.append(\"]\t\");sb.append(description);if(defaultValue!=null){sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");}}errStream.println(sb); "]
610908[label="localVariableDeclarationStatement\n StringBuildersb=newStringBuilder(\"  \"); "]
710909[label="localVariableDeclaration\n StringBuildersb=newStringBuilder(\"  \") "]
810910[label="unannClassType_lfno_unannClassOrInterfaceType\n StringBuilder "]
810911[label="variableDeclarator\n sb=newStringBuilder(\"  \") "]
910912[label="variableDeclaratorId\n sb "]
910913[label="classInstanceCreationExpression_lfno_primary\n newStringBuilder(\"  \") "]
1010914[label="literal\n \"  \" "]
610915[label="expressionStatement\n sb.append(prefix); "]
710916[label="methodInvocation\n sb.append(prefix) "]
810917[label="typeName\n sb "]
810918[label="expressionName\n prefix "]
610919[label="expressionStatement\n sb.append(name); "]
710920[label="methodInvocation\n sb.append(name) "]
810921[label="typeName\n sb "]
810922[label="expressionName\n name "]
610923[label="ifThenStatement\n if(alias!=null){sb.append(\" (\");sb.append(prefix);sb.append(alias);sb.append(\")\");} "]
710924[label="equalityExpression\n alias!=null "]
810925[label="expressionName\n alias "]
810926[label="literal\n null "]
710927[label="block\n {sb.append(\" (\");sb.append(prefix);sb.append(alias);sb.append(\")\");} "]
810928[label="blockStatements\n sb.append(\" (\");sb.append(prefix);sb.append(alias);sb.append(\")\"); "]
910929[label="expressionStatement\n sb.append(\" (\"); "]
1010930[label="methodInvocation\n sb.append(\" (\") "]
1110931[label="typeName\n sb "]
1110932[label="literal\n \" (\" "]
910933[label="expressionStatement\n sb.append(prefix); "]
1010934[label="methodInvocation\n sb.append(prefix) "]
1110935[label="typeName\n sb "]
1110936[label="expressionName\n prefix "]
910937[label="expressionStatement\n sb.append(alias); "]
1010938[label="methodInvocation\n sb.append(alias) "]
1110939[label="typeName\n sb "]
1110940[label="expressionName\n alias "]
910941[label="expressionStatement\n sb.append(\")\"); "]
1010942[label="methodInvocation\n sb.append(\")\") "]
1110943[label="typeName\n sb "]
1110944[label="literal\n \")\" "]
610945[label="ifThenElseStatement\n if(type==Boolean.TYPE||type==Boolean.class){sb.append(\"\t[flag]\t\");sb.append(description);}else{sb.append(\"\t[\");if(type.isArray()){StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");}else{StringtypeName=getTypeName(type);sb.append(typeName);}sb.append(\"]\t\");sb.append(description);if(defaultValue!=null){sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");}} "]
710946[label="conditionalOrExpression\n type==Boolean.TYPE||type==Boolean.class "]
810947[label="equalityExpression\n type==Boolean.TYPE "]
910948[label="expressionName\n type "]
910949[label="expressionName\n Boolean.TYPE "]
1010950[label="ambiguousName\n Boolean "]
810951[label="equalityExpression\n type==Boolean.class "]
910952[label="expressionName\n type "]
910953[label="primaryNoNewArray_lfno_primary\n Boolean.class "]
1010954[label="typeName\n Boolean "]
710955[label="block\n {sb.append(\"\t[flag]\t\");sb.append(description);} "]
810956[label="blockStatements\n sb.append(\"\t[flag]\t\");sb.append(description); "]
910957[label="expressionStatement\n sb.append(\"\t[flag]\t\"); "]
1010958[label="methodInvocation\n sb.append(\"\t[flag]\t\") "]
1110959[label="typeName\n sb "]
1110960[label="literal\n \"\t[flag]\t\" "]
910961[label="expressionStatement\n sb.append(description); "]
1010962[label="methodInvocation\n sb.append(description) "]
1110963[label="typeName\n sb "]
1110964[label="expressionName\n description "]
710965[label="block\n {sb.append(\"\t[\");if(type.isArray()){StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");}else{StringtypeName=getTypeName(type);sb.append(typeName);}sb.append(\"]\t\");sb.append(description);if(defaultValue!=null){sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");}} "]
810966[label="blockStatements\n sb.append(\"\t[\");if(type.isArray()){StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");}else{StringtypeName=getTypeName(type);sb.append(typeName);}sb.append(\"]\t\");sb.append(description);if(defaultValue!=null){sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");} "]
910967[label="expressionStatement\n sb.append(\"\t[\"); "]
1010968[label="methodInvocation\n sb.append(\"\t[\") "]
1110969[label="typeName\n sb "]
1110970[label="literal\n \"\t[\" "]
910971[label="ifThenElseStatement\n if(type.isArray()){StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");}else{StringtypeName=getTypeName(type);sb.append(typeName);} "]
1010972[label="methodInvocation_lfno_primary\n type.isArray() "]
1110973[label="typeName\n type "]
1010974[label="block\n {StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\");} "]
1110975[label="blockStatements\n StringtypeName=getTypeName(type.getComponentType());sb.append(typeName);sb.append(\"[\");sb.append(delimiter);sb.append(\"]\"); "]
1210976[label="localVariableDeclarationStatement\n StringtypeName=getTypeName(type.getComponentType()); "]
1310977[label="localVariableDeclaration\n StringtypeName=getTypeName(type.getComponentType()) "]
1410978[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1410979[label="variableDeclarator\n typeName=getTypeName(type.getComponentType()) "]
1510980[label="variableDeclaratorId\n typeName "]
1510981[label="methodInvocation_lfno_primary\n getTypeName(type.getComponentType()) "]
1610982[label="methodName\n getTypeName "]
1610983[label="methodInvocation_lfno_primary\n type.getComponentType() "]
1710984[label="typeName\n type "]
1210985[label="expressionStatement\n sb.append(typeName); "]
1310986[label="methodInvocation\n sb.append(typeName) "]
1410987[label="typeName\n sb "]
1410988[label="expressionName\n typeName "]
1210989[label="expressionStatement\n sb.append(\"[\"); "]
1310990[label="methodInvocation\n sb.append(\"[\") "]
1410991[label="typeName\n sb "]
1410992[label="literal\n \"[\" "]
1210993[label="expressionStatement\n sb.append(delimiter); "]
1310994[label="methodInvocation\n sb.append(delimiter) "]
1410995[label="typeName\n sb "]
1410996[label="expressionName\n delimiter "]
1210997[label="expressionStatement\n sb.append(\"]\"); "]
1310998[label="methodInvocation\n sb.append(\"]\") "]
1410999[label="typeName\n sb "]
1411000[label="literal\n \"]\" "]
1011001[label="block\n {StringtypeName=getTypeName(type);sb.append(typeName);} "]
1111002[label="blockStatements\n StringtypeName=getTypeName(type);sb.append(typeName); "]
1211003[label="localVariableDeclarationStatement\n StringtypeName=getTypeName(type); "]
1311004[label="localVariableDeclaration\n StringtypeName=getTypeName(type) "]
1411005[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1411006[label="variableDeclarator\n typeName=getTypeName(type) "]
1511007[label="variableDeclaratorId\n typeName "]
1511008[label="methodInvocation_lfno_primary\n getTypeName(type) "]
1611009[label="methodName\n getTypeName "]
1611010[label="expressionName\n type "]
1211011[label="expressionStatement\n sb.append(typeName); "]
1311012[label="methodInvocation\n sb.append(typeName) "]
1411013[label="typeName\n sb "]
1411014[label="expressionName\n typeName "]
911015[label="expressionStatement\n sb.append(\"]\t\"); "]
1011016[label="methodInvocation\n sb.append(\"]\t\") "]
1111017[label="typeName\n sb "]
1111018[label="literal\n \"]\t\" "]
911019[label="expressionStatement\n sb.append(description); "]
1011020[label="methodInvocation\n sb.append(description) "]
1111021[label="typeName\n sb "]
1111022[label="expressionName\n description "]
911023[label="ifThenStatement\n if(defaultValue!=null){sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");} "]
1011024[label="equalityExpression\n defaultValue!=null "]
1111025[label="expressionName\n defaultValue "]
1111026[label="literal\n null "]
1011027[label="block\n {sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\");} "]
1111028[label="blockStatements\n sb.append(\" (\");if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);}sb.append(\")\"); "]
1211029[label="expressionStatement\n sb.append(\" (\"); "]
1311030[label="methodInvocation\n sb.append(\" (\") "]
1411031[label="typeName\n sb "]
1411032[label="literal\n \" (\" "]
1211033[label="ifThenElseStatement\n if(type.isArray()){List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);}else{sb.append(defaultValue);} "]
1311034[label="methodInvocation_lfno_primary\n type.isArray() "]
1411035[label="typeName\n type "]
1311036[label="block\n {List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list);} "]
1411037[label="blockStatements\n List<Object>list=newArrayList<Object>();intlen=Array.getLength(defaultValue);for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));}sb.append(list); "]
1511038[label="localVariableDeclarationStatement\n List<Object>list=newArrayList<Object>(); "]
1611039[label="localVariableDeclaration\n List<Object>list=newArrayList<Object>() "]
1711040[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Object> "]
1811041[label="typeArguments\n <Object> "]
1911042[label="classType_lfno_classOrInterfaceType\n Object "]
1711043[label="variableDeclarator\n list=newArrayList<Object>() "]
1811044[label="variableDeclaratorId\n list "]
1811045[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Object>() "]
1911046[label="typeArguments\n <Object> "]
2011047[label="classType_lfno_classOrInterfaceType\n Object "]
1511048[label="localVariableDeclarationStatement\n intlen=Array.getLength(defaultValue); "]
1611049[label="localVariableDeclaration\n intlen=Array.getLength(defaultValue) "]
1711050[label="integralType\n int "]
1711051[label="variableDeclarator\n len=Array.getLength(defaultValue) "]
1811052[label="variableDeclaratorId\n len "]
1811053[label="methodInvocation_lfno_primary\n Array.getLength(defaultValue) "]
1911054[label="typeName\n Array "]
1911055[label="expressionName\n defaultValue "]
1511056[label="basicForStatement\n for(inti=0;i<len;i++){list.add(Array.get(defaultValue,i));} "]
1611057[label="localVariableDeclaration\n inti=0 "]
1711058[label="integralType\n int "]
1711059[label="variableDeclarator\n i=0 "]
1811060[label="variableDeclaratorId\n i "]
1811061[label="literal\n 0 "]
1611062[label="relationalExpression\n i<len "]
1711063[label="expressionName\n i "]
1711064[label="expressionName\n len "]
1611065[label="postIncrementExpression\n i++ "]
1711066[label="expressionName\n i "]
1611067[label="block\n {list.add(Array.get(defaultValue,i));} "]
1711068[label="expressionStatement\n list.add(Array.get(defaultValue,i)); "]
1811069[label="methodInvocation\n list.add(Array.get(defaultValue,i)) "]
1911070[label="typeName\n list "]
1911071[label="methodInvocation_lfno_primary\n Array.get(defaultValue,i) "]
2011072[label="typeName\n Array "]
2011073[label="argumentList\n defaultValue,i "]
2111074[label="expressionName\n defaultValue "]
2111075[label="expressionName\n i "]
1511076[label="expressionStatement\n sb.append(list); "]
1611077[label="methodInvocation\n sb.append(list) "]
1711078[label="typeName\n sb "]
1711079[label="expressionName\n list "]
1311080[label="block\n {sb.append(defaultValue);} "]
1411081[label="expressionStatement\n sb.append(defaultValue); "]
1511082[label="methodInvocation\n sb.append(defaultValue) "]
1611083[label="typeName\n sb "]
1611084[label="expressionName\n defaultValue "]
1211085[label="expressionStatement\n sb.append(\")\"); "]
1311086[label="methodInvocation\n sb.append(\")\") "]
1411087[label="typeName\n sb "]
1411088[label="literal\n \")\" "]
611089[label="expressionStatement\n errStream.println(sb); "]
711090[label="methodInvocation\n errStream.println(sb) "]
811091[label="typeName\n errStream "]
811092[label="expressionName\n sb "]
311093[label="methodDeclaration\n privatestaticStringgetTypeName(Class<?>type){StringtypeName=type.getName();intbeginIndex=typeName.lastIndexOf(\".\");typeName=typeName.substring(beginIndex+1);returntypeName;} "]
411094[label="methodModifier\n private "]
411095[label="methodModifier\n static "]
411096[label="methodHeader\n StringgetTypeName(Class<?>type) "]
511097[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
511098[label="methodDeclarator\n getTypeName(Class<?>type) "]
611099[label="formalParameter\n Class<?>type "]
711100[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
811101[label="typeArguments\n <?> "]
911102[label="wildcard\n ? "]
711103[label="variableDeclaratorId\n type "]
411104[label="block\n {StringtypeName=type.getName();intbeginIndex=typeName.lastIndexOf(\".\");typeName=typeName.substring(beginIndex+1);returntypeName;} "]
511105[label="blockStatements\n StringtypeName=type.getName();intbeginIndex=typeName.lastIndexOf(\".\");typeName=typeName.substring(beginIndex+1);returntypeName; "]
611106[label="localVariableDeclarationStatement\n StringtypeName=type.getName(); "]
711107[label="localVariableDeclaration\n StringtypeName=type.getName() "]
811108[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
811109[label="variableDeclarator\n typeName=type.getName() "]
911110[label="variableDeclaratorId\n typeName "]
911111[label="methodInvocation_lfno_primary\n type.getName() "]
1011112[label="typeName\n type "]
611113[label="localVariableDeclarationStatement\n intbeginIndex=typeName.lastIndexOf(\".\"); "]
711114[label="localVariableDeclaration\n intbeginIndex=typeName.lastIndexOf(\".\") "]
811115[label="integralType\n int "]
811116[label="variableDeclarator\n beginIndex=typeName.lastIndexOf(\".\") "]
911117[label="variableDeclaratorId\n beginIndex "]
911118[label="methodInvocation_lfno_primary\n typeName.lastIndexOf(\".\") "]
1011119[label="typeName\n typeName "]
1011120[label="literal\n \".\" "]
611121[label="expressionStatement\n typeName=typeName.substring(beginIndex+1); "]
711122[label="assignment\n typeName=typeName.substring(beginIndex+1) "]
811123[label="expressionName\n typeName "]
811124[label="assignmentOperator\n = "]
811125[label="methodInvocation_lfno_primary\n typeName.substring(beginIndex+1) "]
911126[label="typeName\n typeName "]
911127[label="additiveExpression\n beginIndex+1 "]
1011128[label="expressionName\n beginIndex "]
1011129[label="literal\n 1 "]
611130[label="returnStatement\n returntypeName; "]
711131[label="expressionName\n typeName "]
311132[label="methodDeclaration\n staticStringgetName(Argumentargument,PropertyDescriptorproperty){Stringname=argument.value();if(name.equals(\"\")){name=property.getName();}returnname;} "]
411133[label="methodModifier\n static "]
411134[label="methodHeader\n StringgetName(Argumentargument,PropertyDescriptorproperty) "]
511135[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
511136[label="methodDeclarator\n getName(Argumentargument,PropertyDescriptorproperty) "]
611137[label="formalParameterList\n Argumentargument,PropertyDescriptorproperty "]
711138[label="formalParameter\n Argumentargument "]
811139[label="unannClassType_lfno_unannClassOrInterfaceType\n Argument "]
811140[label="variableDeclaratorId\n argument "]
711141[label="formalParameter\n PropertyDescriptorproperty "]
811142[label="unannClassType_lfno_unannClassOrInterfaceType\n PropertyDescriptor "]
811143[label="variableDeclaratorId\n property "]
411144[label="block\n {Stringname=argument.value();if(name.equals(\"\")){name=property.getName();}returnname;} "]
511145[label="blockStatements\n Stringname=argument.value();if(name.equals(\"\")){name=property.getName();}returnname; "]
611146[label="localVariableDeclarationStatement\n Stringname=argument.value(); "]
711147[label="localVariableDeclaration\n Stringname=argument.value() "]
811148[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
811149[label="variableDeclarator\n name=argument.value() "]
911150[label="variableDeclaratorId\n name "]
911151[label="methodInvocation_lfno_primary\n argument.value() "]
1011152[label="typeName\n argument "]
611153[label="ifThenStatement\n if(name.equals(\"\")){name=property.getName();} "]
711154[label="methodInvocation_lfno_primary\n name.equals(\"\") "]
811155[label="typeName\n name "]
811156[label="literal\n \"\" "]
711157[label="block\n {name=property.getName();} "]
811158[label="expressionStatement\n name=property.getName(); "]
911159[label="assignment\n name=property.getName() "]
1011160[label="expressionName\n name "]
1011161[label="assignmentOperator\n = "]
1011162[label="methodInvocation_lfno_primary\n property.getName() "]
1111163[label="typeName\n property "]
611164[label="returnStatement\n returnname; "]
711165[label="expressionName\n name "]
311166[label="methodDeclaration\n privatestaticObjectconsumeArgumentValue(Stringname,Class<?>type,Argumentargument,Iterator<String>i){Objectvalue;if(type==Boolean.TYPE||type==Boolean.class){value=true;}else{if(i.hasNext()){value=i.next();i.remove();}else{thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name);}}returnvalue;} "]
411167[label="methodModifier\n private "]
411168[label="methodModifier\n static "]
411169[label="methodHeader\n ObjectconsumeArgumentValue(Stringname,Class<?>type,Argumentargument,Iterator<String>i) "]
511170[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
511171[label="methodDeclarator\n consumeArgumentValue(Stringname,Class<?>type,Argumentargument,Iterator<String>i) "]
611172[label="formalParameterList\n Stringname,Class<?>type,Argumentargument,Iterator<String>i "]
711173[label="formalParameters\n Stringname,Class<?>type,Argumentargument "]
811174[label="formalParameter\n Stringname "]
911175[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
911176[label="variableDeclaratorId\n name "]
811177[label="formalParameter\n Class<?>type "]
911178[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
1011179[label="typeArguments\n <?> "]
1111180[label="wildcard\n ? "]
911181[label="variableDeclaratorId\n type "]
811182[label="formalParameter\n Argumentargument "]
911183[label="unannClassType_lfno_unannClassOrInterfaceType\n Argument "]
911184[label="variableDeclaratorId\n argument "]
711185[label="formalParameter\n Iterator<String>i "]
811186[label="unannClassType_lfno_unannClassOrInterfaceType\n Iterator<String> "]
911187[label="typeArguments\n <String> "]
1011188[label="classType_lfno_classOrInterfaceType\n String "]
811189[label="variableDeclaratorId\n i "]
411190[label="block\n {Objectvalue;if(type==Boolean.TYPE||type==Boolean.class){value=true;}else{if(i.hasNext()){value=i.next();i.remove();}else{thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name);}}returnvalue;} "]
511191[label="blockStatements\n Objectvalue;if(type==Boolean.TYPE||type==Boolean.class){value=true;}else{if(i.hasNext()){value=i.next();i.remove();}else{thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name);}}returnvalue; "]
611192[label="localVariableDeclarationStatement\n Objectvalue; "]
711193[label="localVariableDeclaration\n Objectvalue "]
811194[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
811195[label="variableDeclaratorId\n value "]
611196[label="ifThenElseStatement\n if(type==Boolean.TYPE||type==Boolean.class){value=true;}else{if(i.hasNext()){value=i.next();i.remove();}else{thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name);}} "]
711197[label="conditionalOrExpression\n type==Boolean.TYPE||type==Boolean.class "]
811198[label="equalityExpression\n type==Boolean.TYPE "]
911199[label="expressionName\n type "]
911200[label="expressionName\n Boolean.TYPE "]
1011201[label="ambiguousName\n Boolean "]
811202[label="equalityExpression\n type==Boolean.class "]
911203[label="expressionName\n type "]
911204[label="primaryNoNewArray_lfno_primary\n Boolean.class "]
1011205[label="typeName\n Boolean "]
711206[label="block\n {value=true;} "]
811207[label="expressionStatement\n value=true; "]
911208[label="assignment\n value=true "]
1011209[label="expressionName\n value "]
1011210[label="assignmentOperator\n = "]
1011211[label="literal\n true "]
711212[label="block\n {if(i.hasNext()){value=i.next();i.remove();}else{thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name);}} "]
811213[label="ifThenElseStatement\n if(i.hasNext()){value=i.next();i.remove();}else{thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name);} "]
911214[label="methodInvocation_lfno_primary\n i.hasNext() "]
1011215[label="typeName\n i "]
911216[label="block\n {value=i.next();i.remove();} "]
1011217[label="blockStatements\n value=i.next();i.remove(); "]
1111218[label="expressionStatement\n value=i.next(); "]
1211219[label="assignment\n value=i.next() "]
1311220[label="expressionName\n value "]
1311221[label="assignmentOperator\n = "]
1311222[label="methodInvocation_lfno_primary\n i.next() "]
1411223[label="typeName\n i "]
1111224[label="expressionStatement\n i.remove(); "]
1211225[label="methodInvocation\n i.remove() "]
1311226[label="typeName\n i "]
911227[label="block\n {thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name);} "]
1011228[label="throwStatement\n thrownewIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name); "]
1111229[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"非flag参数必须指定值: \"+argument.prefix()+name) "]
1211230[label="additiveExpression\n \"非flag参数必须指定值: \"+argument.prefix()+name "]
1311231[label="additiveExpression\n \"非flag参数必须指定值: \"+argument.prefix() "]
1411232[label="literal\n \"非flag参数必须指定值: \" "]
1411233[label="methodInvocation_lfno_primary\n argument.prefix() "]
1511234[label="typeName\n argument "]
1311235[label="expressionName\n name "]
611236[label="returnStatement\n returnvalue; "]
711237[label="expressionName\n value "]
311238[label="methodDeclaration\n staticvoidsetProperty(Class<?>type,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter){try{value=getValue(type,value,delimiter);property.getWriteMethod().invoke(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);}} "]
411239[label="methodModifier\n static "]
411240[label="methodHeader\n voidsetProperty(Class<?>type,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter) "]
511241[label="result\n void "]
511242[label="methodDeclarator\n setProperty(Class<?>type,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter) "]
611243[label="formalParameterList\n Class<?>type,PropertyDescriptorproperty,Objecttarget,Objectvalue,Stringdelimiter "]
711244[label="formalParameters\n Class<?>type,PropertyDescriptorproperty,Objecttarget,Objectvalue "]
811245[label="formalParameter\n Class<?>type "]
911246[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
1011247[label="typeArguments\n <?> "]
1111248[label="wildcard\n ? "]
911249[label="variableDeclaratorId\n type "]
811250[label="formalParameter\n PropertyDescriptorproperty "]
911251[label="unannClassType_lfno_unannClassOrInterfaceType\n PropertyDescriptor "]
911252[label="variableDeclaratorId\n property "]
811253[label="formalParameter\n Objecttarget "]
911254[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
911255[label="variableDeclaratorId\n target "]
811256[label="formalParameter\n Objectvalue "]
911257[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
911258[label="variableDeclaratorId\n value "]
711259[label="formalParameter\n Stringdelimiter "]
811260[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
811261[label="variableDeclaratorId\n delimiter "]
411262[label="block\n {try{value=getValue(type,value,delimiter);property.getWriteMethod().invoke(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);}} "]
511263[label="tryStatement\n try{value=getValue(type,value,delimiter);property.getWriteMethod().invoke(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);} "]
611264[label="block\n {value=getValue(type,value,delimiter);property.getWriteMethod().invoke(target,value);} "]
711265[label="blockStatements\n value=getValue(type,value,delimiter);property.getWriteMethod().invoke(target,value); "]
811266[label="expressionStatement\n value=getValue(type,value,delimiter); "]
911267[label="assignment\n value=getValue(type,value,delimiter) "]
1011268[label="expressionName\n value "]
1011269[label="assignmentOperator\n = "]
1011270[label="methodInvocation_lfno_primary\n getValue(type,value,delimiter) "]
1111271[label="methodName\n getValue "]
1111272[label="argumentList\n type,value,delimiter "]
1211273[label="expressionName\n type "]
1211274[label="expressionName\n value "]
1211275[label="expressionName\n delimiter "]
811276[label="expressionStatement\n property.getWriteMethod().invoke(target,value); "]
911277[label="methodInvocation\n property.getWriteMethod().invoke(target,value) "]
1011278[label="methodInvocation_lfno_primary\n property.getWriteMethod() "]
1111279[label="typeName\n property "]
1011280[label="argumentList\n target,value "]
1111281[label="expressionName\n target "]
1111282[label="expressionName\n value "]
611283[label="catches\n catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);} "]
711284[label="catchClause\n catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set property \"+property,iae);} "]
811285[label="catchFormalParameter\n IllegalAccessExceptioniae "]
911286[label="unannClassType\n IllegalAccessException "]
911287[label="variableDeclaratorId\n iae "]
811288[label="block\n {thrownewIllegalArgumentException(\"Could not set property \"+property,iae);} "]
911289[label="throwStatement\n thrownewIllegalArgumentException(\"Could not set property \"+property,iae); "]
1011290[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not set property \"+property,iae) "]
1111291[label="argumentList\n \"Could not set property \"+property,iae "]
1211292[label="additiveExpression\n \"Could not set property \"+property "]
1311293[label="literal\n \"Could not set property \" "]
1311294[label="expressionName\n property "]
1211295[label="expressionName\n iae "]
711296[label="catchClause\n catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
811297[label="catchFormalParameter\n NoSuchMethodExceptione "]
911298[label="unannClassType\n NoSuchMethodException "]
911299[label="variableDeclaratorId\n e "]
811300[label="block\n {thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
911301[label="throwStatement\n thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e); "]
1011302[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e) "]
1111303[label="argumentList\n \"Could not find constructor in class \"+type.getName()+\" that takes a string\",e "]
1211304[label="additiveExpression\n \"Could not find constructor in class \"+type.getName()+\" that takes a string\" "]
1311305[label="additiveExpression\n \"Could not find constructor in class \"+type.getName() "]
1411306[label="literal\n \"Could not find constructor in class \" "]
1411307[label="methodInvocation_lfno_primary\n type.getName() "]
1511308[label="typeName\n type "]
1311309[label="literal\n \" that takes a string\" "]
1211310[label="expressionName\n e "]
711311[label="catchClause\n catch(InvocationTargetExceptione){thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);} "]
811312[label="catchFormalParameter\n InvocationTargetExceptione "]
911313[label="unannClassType\n InvocationTargetException "]
911314[label="variableDeclaratorId\n e "]
811315[label="block\n {thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property);} "]
911316[label="throwStatement\n thrownewIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property); "]
1011317[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Failed to validate argument \"+value+\" for \"+property) "]
1111318[label="additiveExpression\n \"Failed to validate argument \"+value+\" for \"+property "]
1211319[label="additiveExpression\n \"Failed to validate argument \"+value+\" for \" "]
1311320[label="additiveExpression\n \"Failed to validate argument \"+value "]
1411321[label="literal\n \"Failed to validate argument \" "]
1411322[label="expressionName\n value "]
1311323[label="literal\n \" for \" "]
1211324[label="expressionName\n property "]
311325[label="methodDeclaration\n staticStringgetAlias(Argumentargument){Stringalias=argument.alias();if(alias.equals(\"\")){alias=null;}returnalias;} "]
411326[label="methodModifier\n static "]
411327[label="methodHeader\n StringgetAlias(Argumentargument) "]
511328[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
511329[label="methodDeclarator\n getAlias(Argumentargument) "]
611330[label="formalParameter\n Argumentargument "]
711331[label="unannClassType_lfno_unannClassOrInterfaceType\n Argument "]
711332[label="variableDeclaratorId\n argument "]
411333[label="block\n {Stringalias=argument.alias();if(alias.equals(\"\")){alias=null;}returnalias;} "]
511334[label="blockStatements\n Stringalias=argument.alias();if(alias.equals(\"\")){alias=null;}returnalias; "]
611335[label="localVariableDeclarationStatement\n Stringalias=argument.alias(); "]
711336[label="localVariableDeclaration\n Stringalias=argument.alias() "]
811337[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
811338[label="variableDeclarator\n alias=argument.alias() "]
911339[label="variableDeclaratorId\n alias "]
911340[label="methodInvocation_lfno_primary\n argument.alias() "]
1011341[label="typeName\n argument "]
611342[label="ifThenStatement\n if(alias.equals(\"\")){alias=null;} "]
711343[label="methodInvocation_lfno_primary\n alias.equals(\"\") "]
811344[label="typeName\n alias "]
811345[label="literal\n \"\" "]
711346[label="block\n {alias=null;} "]
811347[label="expressionStatement\n alias=null; "]
911348[label="assignment\n alias=null "]
1011349[label="expressionName\n alias "]
1011350[label="assignmentOperator\n = "]
1011351[label="literal\n null "]
611352[label="returnStatement\n returnalias; "]
711353[label="expressionName\n alias "]
311354[label="methodDeclaration\n staticStringgetName(Argumentargument,Fieldfield){Stringname=argument.value();if(name.equals(\"\")){name=field.getName();}returnname;} "]
411355[label="methodModifier\n static "]
411356[label="methodHeader\n StringgetName(Argumentargument,Fieldfield) "]
511357[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
511358[label="methodDeclarator\n getName(Argumentargument,Fieldfield) "]
611359[label="formalParameterList\n Argumentargument,Fieldfield "]
711360[label="formalParameter\n Argumentargument "]
811361[label="unannClassType_lfno_unannClassOrInterfaceType\n Argument "]
811362[label="variableDeclaratorId\n argument "]
711363[label="formalParameter\n Fieldfield "]
811364[label="unannClassType_lfno_unannClassOrInterfaceType\n Field "]
811365[label="variableDeclaratorId\n field "]
411366[label="block\n {Stringname=argument.value();if(name.equals(\"\")){name=field.getName();}returnname;} "]
511367[label="blockStatements\n Stringname=argument.value();if(name.equals(\"\")){name=field.getName();}returnname; "]
611368[label="localVariableDeclarationStatement\n Stringname=argument.value(); "]
711369[label="localVariableDeclaration\n Stringname=argument.value() "]
811370[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
811371[label="variableDeclarator\n name=argument.value() "]
911372[label="variableDeclaratorId\n name "]
911373[label="methodInvocation_lfno_primary\n argument.value() "]
1011374[label="typeName\n argument "]
611375[label="ifThenStatement\n if(name.equals(\"\")){name=field.getName();} "]
711376[label="methodInvocation_lfno_primary\n name.equals(\"\") "]
811377[label="typeName\n name "]
811378[label="literal\n \"\" "]
711379[label="block\n {name=field.getName();} "]
811380[label="expressionStatement\n name=field.getName(); "]
911381[label="assignment\n name=field.getName() "]
1011382[label="expressionName\n name "]
1011383[label="assignmentOperator\n = "]
1011384[label="methodInvocation_lfno_primary\n field.getName() "]
1111385[label="typeName\n field "]
611386[label="returnStatement\n returnname; "]
711387[label="expressionName\n name "]
311388[label="methodDeclaration\n staticvoidsetField(Class<?>type,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter){makeAccessible(field);try{value=getValue(type,value,delimiter);field.set(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}} "]
411389[label="methodModifier\n static "]
411390[label="methodHeader\n voidsetField(Class<?>type,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter) "]
511391[label="result\n void "]
511392[label="methodDeclarator\n setField(Class<?>type,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter) "]
611393[label="formalParameterList\n Class<?>type,Fieldfield,Objecttarget,Objectvalue,Stringdelimiter "]
711394[label="formalParameters\n Class<?>type,Fieldfield,Objecttarget,Objectvalue "]
811395[label="formalParameter\n Class<?>type "]
911396[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
1011397[label="typeArguments\n <?> "]
1111398[label="wildcard\n ? "]
911399[label="variableDeclaratorId\n type "]
811400[label="formalParameter\n Fieldfield "]
911401[label="unannClassType_lfno_unannClassOrInterfaceType\n Field "]
911402[label="variableDeclaratorId\n field "]
811403[label="formalParameter\n Objecttarget "]
911404[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
911405[label="variableDeclaratorId\n target "]
811406[label="formalParameter\n Objectvalue "]
911407[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
911408[label="variableDeclaratorId\n value "]
711409[label="formalParameter\n Stringdelimiter "]
811410[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
811411[label="variableDeclaratorId\n delimiter "]
411412[label="block\n {makeAccessible(field);try{value=getValue(type,value,delimiter);field.set(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);}} "]
511413[label="blockStatements\n makeAccessible(field);try{value=getValue(type,value,delimiter);field.set(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
611414[label="expressionStatement\n makeAccessible(field); "]
711415[label="methodInvocation\n makeAccessible(field) "]
811416[label="methodName\n makeAccessible "]
811417[label="expressionName\n field "]
611418[label="tryStatement\n try{value=getValue(type,value,delimiter);field.set(target,value);}catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
711419[label="block\n {value=getValue(type,value,delimiter);field.set(target,value);} "]
811420[label="blockStatements\n value=getValue(type,value,delimiter);field.set(target,value); "]
911421[label="expressionStatement\n value=getValue(type,value,delimiter); "]
1011422[label="assignment\n value=getValue(type,value,delimiter) "]
1111423[label="expressionName\n value "]
1111424[label="assignmentOperator\n = "]
1111425[label="methodInvocation_lfno_primary\n getValue(type,value,delimiter) "]
1211426[label="methodName\n getValue "]
1211427[label="argumentList\n type,value,delimiter "]
1311428[label="expressionName\n type "]
1311429[label="expressionName\n value "]
1311430[label="expressionName\n delimiter "]
911431[label="expressionStatement\n field.set(target,value); "]
1011432[label="methodInvocation\n field.set(target,value) "]
1111433[label="typeName\n field "]
1111434[label="argumentList\n target,value "]
1211435[label="expressionName\n target "]
1211436[label="expressionName\n value "]
711437[label="catches\n catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);}catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
811438[label="catchClause\n catch(IllegalAccessExceptioniae){thrownewIllegalArgumentException(\"Could not set field \"+field,iae);} "]
911439[label="catchFormalParameter\n IllegalAccessExceptioniae "]
1011440[label="unannClassType\n IllegalAccessException "]
1011441[label="variableDeclaratorId\n iae "]
911442[label="block\n {thrownewIllegalArgumentException(\"Could not set field \"+field,iae);} "]
1011443[label="throwStatement\n thrownewIllegalArgumentException(\"Could not set field \"+field,iae); "]
1111444[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not set field \"+field,iae) "]
1211445[label="argumentList\n \"Could not set field \"+field,iae "]
1311446[label="additiveExpression\n \"Could not set field \"+field "]
1411447[label="literal\n \"Could not set field \" "]
1411448[label="expressionName\n field "]
1311449[label="expressionName\n iae "]
811450[label="catchClause\n catch(NoSuchMethodExceptione){thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
911451[label="catchFormalParameter\n NoSuchMethodExceptione "]
1011452[label="unannClassType\n NoSuchMethodException "]
1011453[label="variableDeclaratorId\n e "]
911454[label="block\n {thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e);} "]
1011455[label="throwStatement\n thrownewIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e); "]
1111456[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Could not find constructor in class \"+type.getName()+\" that takes a string\",e) "]
1211457[label="argumentList\n \"Could not find constructor in class \"+type.getName()+\" that takes a string\",e "]
1311458[label="additiveExpression\n \"Could not find constructor in class \"+type.getName()+\" that takes a string\" "]
1411459[label="additiveExpression\n \"Could not find constructor in class \"+type.getName() "]
1511460[label="literal\n \"Could not find constructor in class \" "]
1511461[label="methodInvocation_lfno_primary\n type.getName() "]
1611462[label="typeName\n type "]
1411463[label="literal\n \" that takes a string\" "]
1311464[label="expressionName\n e "]
311465[label="methodDeclaration\n privatestaticObjectgetValue(Class<?>type,Objectvalue,Stringdelimiter)throwsNoSuchMethodException{if(type!=String.class&&type!=Boolean.class&&type!=Boolean.TYPE){Stringstring=(String)value;if(type.isArray()){String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}}else{value=createValue(type,string);}}returnvalue;} "]
411466[label="methodModifier\n private "]
411467[label="methodModifier\n static "]
411468[label="methodHeader\n ObjectgetValue(Class<?>type,Objectvalue,Stringdelimiter)throwsNoSuchMethodException "]
511469[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
511470[label="methodDeclarator\n getValue(Class<?>type,Objectvalue,Stringdelimiter) "]
611471[label="formalParameterList\n Class<?>type,Objectvalue,Stringdelimiter "]
711472[label="formalParameters\n Class<?>type,Objectvalue "]
811473[label="formalParameter\n Class<?>type "]
911474[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
1011475[label="typeArguments\n <?> "]
1111476[label="wildcard\n ? "]
911477[label="variableDeclaratorId\n type "]
811478[label="formalParameter\n Objectvalue "]
911479[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
911480[label="variableDeclaratorId\n value "]
711481[label="formalParameter\n Stringdelimiter "]
811482[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
811483[label="variableDeclaratorId\n delimiter "]
511484[label="throws_\n throwsNoSuchMethodException "]
611485[label="classType\n NoSuchMethodException "]
411486[label="block\n {if(type!=String.class&&type!=Boolean.class&&type!=Boolean.TYPE){Stringstring=(String)value;if(type.isArray()){String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}}else{value=createValue(type,string);}}returnvalue;} "]
511487[label="blockStatements\n if(type!=String.class&&type!=Boolean.class&&type!=Boolean.TYPE){Stringstring=(String)value;if(type.isArray()){String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}}else{value=createValue(type,string);}}returnvalue; "]
611488[label="ifThenStatement\n if(type!=String.class&&type!=Boolean.class&&type!=Boolean.TYPE){Stringstring=(String)value;if(type.isArray()){String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}}else{value=createValue(type,string);}} "]
711489[label="conditionalAndExpression\n type!=String.class&&type!=Boolean.class&&type!=Boolean.TYPE "]
811490[label="conditionalAndExpression\n type!=String.class&&type!=Boolean.class "]
911491[label="equalityExpression\n type!=String.class "]
1011492[label="expressionName\n type "]
1011493[label="primaryNoNewArray_lfno_primary\n String.class "]
1111494[label="typeName\n String "]
911495[label="equalityExpression\n type!=Boolean.class "]
1011496[label="expressionName\n type "]
1011497[label="primaryNoNewArray_lfno_primary\n Boolean.class "]
1111498[label="typeName\n Boolean "]
811499[label="equalityExpression\n type!=Boolean.TYPE "]
911500[label="expressionName\n type "]
911501[label="expressionName\n Boolean.TYPE "]
1011502[label="ambiguousName\n Boolean "]
711503[label="block\n {Stringstring=(String)value;if(type.isArray()){String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}}else{value=createValue(type,string);}} "]
811504[label="blockStatements\n Stringstring=(String)value;if(type.isArray()){String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}}else{value=createValue(type,string);} "]
911505[label="localVariableDeclarationStatement\n Stringstring=(String)value; "]
1011506[label="localVariableDeclaration\n Stringstring=(String)value "]
1111507[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1111508[label="variableDeclarator\n string=(String)value "]
1211509[label="variableDeclaratorId\n string "]
1211510[label="castExpression\n (String)value "]
1311511[label="classType_lfno_classOrInterfaceType\n String "]
1311512[label="expressionName\n value "]
911513[label="ifThenElseStatement\n if(type.isArray()){String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}}else{value=createValue(type,string);} "]
1011514[label="methodInvocation_lfno_primary\n type.isArray() "]
1111515[label="typeName\n type "]
1011516[label="block\n {String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;}} "]
1111517[label="blockStatements\n String[]strings=string.split(delimiter);type=type.getComponentType();if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;} "]
1211518[label="localVariableDeclarationStatement\n String[]strings=string.split(delimiter); "]
1311519[label="localVariableDeclaration\n String[]strings=string.split(delimiter) "]
1411520[label="unannArrayType\n String[] "]
1511521[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1511522[label="dims\n [] "]
1411523[label="variableDeclarator\n strings=string.split(delimiter) "]
1511524[label="variableDeclaratorId\n strings "]
1511525[label="methodInvocation_lfno_primary\n string.split(delimiter) "]
1611526[label="typeName\n string "]
1611527[label="expressionName\n delimiter "]
1211528[label="expressionStatement\n type=type.getComponentType(); "]
1311529[label="assignment\n type=type.getComponentType() "]
1411530[label="expressionName\n type "]
1411531[label="assignmentOperator\n = "]
1411532[label="methodInvocation_lfno_primary\n type.getComponentType() "]
1511533[label="typeName\n type "]
1211534[label="ifThenElseStatement\n if(type==String.class){value=strings;}else{Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;} "]
1311535[label="equalityExpression\n type==String.class "]
1411536[label="expressionName\n type "]
1411537[label="primaryNoNewArray_lfno_primary\n String.class "]
1511538[label="typeName\n String "]
1311539[label="block\n {value=strings;} "]
1411540[label="expressionStatement\n value=strings; "]
1511541[label="assignment\n value=strings "]
1611542[label="expressionName\n value "]
1611543[label="assignmentOperator\n = "]
1611544[label="expressionName\n strings "]
1311545[label="block\n {Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array;} "]
1411546[label="blockStatements\n Object[]array=(Object[])Array.newInstance(type,strings.length);for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);}value=array; "]
1511547[label="localVariableDeclarationStatement\n Object[]array=(Object[])Array.newInstance(type,strings.length); "]
1611548[label="localVariableDeclaration\n Object[]array=(Object[])Array.newInstance(type,strings.length) "]
1711549[label="unannArrayType\n Object[] "]
1811550[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
1811551[label="dims\n [] "]
1711552[label="variableDeclarator\n array=(Object[])Array.newInstance(type,strings.length) "]
1811553[label="variableDeclaratorId\n array "]
1811554[label="castExpression\n (Object[])Array.newInstance(type,strings.length) "]
1911555[label="arrayType\n Object[] "]
2011556[label="classType_lfno_classOrInterfaceType\n Object "]
2011557[label="dims\n [] "]
1911558[label="methodInvocation_lfno_primary\n Array.newInstance(type,strings.length) "]
2011559[label="typeName\n Array "]
2011560[label="argumentList\n type,strings.length "]
2111561[label="expressionName\n type "]
2111562[label="expressionName\n strings.length "]
2211563[label="ambiguousName\n strings "]
1511564[label="basicForStatement\n for(inti=0;i<array.length;i++){array[i]=createValue(type,strings[i]);} "]
1611565[label="localVariableDeclaration\n inti=0 "]
1711566[label="integralType\n int "]
1711567[label="variableDeclarator\n i=0 "]
1811568[label="variableDeclaratorId\n i "]
1811569[label="literal\n 0 "]
1611570[label="relationalExpression\n i<array.length "]
1711571[label="expressionName\n i "]
1711572[label="expressionName\n array.length "]
1811573[label="ambiguousName\n array "]
1611574[label="postIncrementExpression\n i++ "]
1711575[label="expressionName\n i "]
1611576[label="block\n {array[i]=createValue(type,strings[i]);} "]
1711577[label="expressionStatement\n array[i]=createValue(type,strings[i]); "]
1811578[label="assignment\n array[i]=createValue(type,strings[i]) "]
1911579[label="arrayAccess\n array[i] "]
2011580[label="expressionName\n array "]
2011581[label="expressionName\n i "]
1911582[label="assignmentOperator\n = "]
1911583[label="methodInvocation_lfno_primary\n createValue(type,strings[i]) "]
2011584[label="methodName\n createValue "]
2011585[label="argumentList\n type,strings[i] "]
2111586[label="expressionName\n type "]
2111587[label="arrayAccess_lfno_primary\n strings[i] "]
2211588[label="expressionName\n strings "]
2211589[label="expressionName\n i "]
1511590[label="expressionStatement\n value=array; "]
1611591[label="assignment\n value=array "]
1711592[label="expressionName\n value "]
1711593[label="assignmentOperator\n = "]
1711594[label="expressionName\n array "]
1011595[label="block\n {value=createValue(type,string);} "]
1111596[label="expressionStatement\n value=createValue(type,string); "]
1211597[label="assignment\n value=createValue(type,string) "]
1311598[label="expressionName\n value "]
1311599[label="assignmentOperator\n = "]
1311600[label="methodInvocation_lfno_primary\n createValue(type,string) "]
1411601[label="methodName\n createValue "]
1411602[label="argumentList\n type,string "]
1511603[label="expressionName\n type "]
1511604[label="expressionName\n string "]
611605[label="returnStatement\n returnvalue; "]
711606[label="expressionName\n value "]
311607[label="methodDeclaration\n privatestaticObjectcreateValue(Class<?>type,StringvalueAsString)throwsNoSuchMethodException{for(ValueCreatorvalueCreator:valueCreators){ObjectcreatedValue=valueCreator.createValue(type,valueAsString);if(createdValue!=null){returncreatedValue;}}thrownewIllegalArgumentException(String.format(\"cannot instanciate any %s object using %s value\",type.toString(),valueAsString));} "]
411608[label="methodModifier\n private "]
411609[label="methodModifier\n static "]
411610[label="methodHeader\n ObjectcreateValue(Class<?>type,StringvalueAsString)throwsNoSuchMethodException "]
511611[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
511612[label="methodDeclarator\n createValue(Class<?>type,StringvalueAsString) "]
611613[label="formalParameterList\n Class<?>type,StringvalueAsString "]
711614[label="formalParameter\n Class<?>type "]
811615[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
911616[label="typeArguments\n <?> "]
1011617[label="wildcard\n ? "]
811618[label="variableDeclaratorId\n type "]
711619[label="formalParameter\n StringvalueAsString "]
811620[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
811621[label="variableDeclaratorId\n valueAsString "]
511622[label="throws_\n throwsNoSuchMethodException "]
611623[label="classType\n NoSuchMethodException "]
411624[label="block\n {for(ValueCreatorvalueCreator:valueCreators){ObjectcreatedValue=valueCreator.createValue(type,valueAsString);if(createdValue!=null){returncreatedValue;}}thrownewIllegalArgumentException(String.format(\"cannot instanciate any %s object using %s value\",type.toString(),valueAsString));} "]
511625[label="blockStatements\n for(ValueCreatorvalueCreator:valueCreators){ObjectcreatedValue=valueCreator.createValue(type,valueAsString);if(createdValue!=null){returncreatedValue;}}thrownewIllegalArgumentException(String.format(\"cannot instanciate any %s object using %s value\",type.toString(),valueAsString)); "]
611626[label="enhancedForStatement\n for(ValueCreatorvalueCreator:valueCreators){ObjectcreatedValue=valueCreator.createValue(type,valueAsString);if(createdValue!=null){returncreatedValue;}} "]
711627[label="unannClassType_lfno_unannClassOrInterfaceType\n ValueCreator "]
711628[label="variableDeclaratorId\n valueCreator "]
711629[label="expressionName\n valueCreators "]
711630[label="block\n {ObjectcreatedValue=valueCreator.createValue(type,valueAsString);if(createdValue!=null){returncreatedValue;}} "]
811631[label="blockStatements\n ObjectcreatedValue=valueCreator.createValue(type,valueAsString);if(createdValue!=null){returncreatedValue;} "]
911632[label="localVariableDeclarationStatement\n ObjectcreatedValue=valueCreator.createValue(type,valueAsString); "]
1011633[label="localVariableDeclaration\n ObjectcreatedValue=valueCreator.createValue(type,valueAsString) "]
1111634[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
1111635[label="variableDeclarator\n createdValue=valueCreator.createValue(type,valueAsString) "]
1211636[label="variableDeclaratorId\n createdValue "]
1211637[label="methodInvocation_lfno_primary\n valueCreator.createValue(type,valueAsString) "]
1311638[label="typeName\n valueCreator "]
1311639[label="argumentList\n type,valueAsString "]
1411640[label="expressionName\n type "]
1411641[label="expressionName\n valueAsString "]
911642[label="ifThenStatement\n if(createdValue!=null){returncreatedValue;} "]
1011643[label="equalityExpression\n createdValue!=null "]
1111644[label="expressionName\n createdValue "]
1111645[label="literal\n null "]
1011646[label="block\n {returncreatedValue;} "]
1111647[label="returnStatement\n returncreatedValue; "]
1211648[label="expressionName\n createdValue "]
611649[label="throwStatement\n thrownewIllegalArgumentException(String.format(\"cannot instanciate any %s object using %s value\",type.toString(),valueAsString)); "]
711650[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(String.format(\"cannot instanciate any %s object using %s value\",type.toString(),valueAsString)) "]
811651[label="methodInvocation_lfno_primary\n String.format(\"cannot instanciate any %s object using %s value\",type.toString(),valueAsString) "]
911652[label="typeName\n String "]
911653[label="argumentList\n \"cannot instanciate any %s object using %s value\",type.toString(),valueAsString "]
1011654[label="literal\n \"cannot instanciate any %s object using %s value\" "]
1011655[label="methodInvocation_lfno_primary\n type.toString() "]
1111656[label="typeName\n type "]
1011657[label="expressionName\n valueAsString "]
311658[label="methodDeclaration\n privatestaticvoidmakeAccessible(AccessibleObjectao){if(aoinstanceofMember){Membermember=(Member)ao;if(!Modifier.isPublic(member.getModifiers())){ao.setAccessible(true);}}} "]
411659[label="methodModifier\n private "]
411660[label="methodModifier\n static "]
411661[label="methodHeader\n voidmakeAccessible(AccessibleObjectao) "]
511662[label="result\n void "]
511663[label="methodDeclarator\n makeAccessible(AccessibleObjectao) "]
611664[label="formalParameter\n AccessibleObjectao "]
711665[label="unannClassType_lfno_unannClassOrInterfaceType\n AccessibleObject "]
711666[label="variableDeclaratorId\n ao "]
411667[label="block\n {if(aoinstanceofMember){Membermember=(Member)ao;if(!Modifier.isPublic(member.getModifiers())){ao.setAccessible(true);}}} "]
511668[label="ifThenStatement\n if(aoinstanceofMember){Membermember=(Member)ao;if(!Modifier.isPublic(member.getModifiers())){ao.setAccessible(true);}} "]
611669[label="relationalExpression\n aoinstanceofMember "]
711670[label="expressionName\n ao "]
711671[label="classType_lfno_classOrInterfaceType\n Member "]
611672[label="block\n {Membermember=(Member)ao;if(!Modifier.isPublic(member.getModifiers())){ao.setAccessible(true);}} "]
711673[label="blockStatements\n Membermember=(Member)ao;if(!Modifier.isPublic(member.getModifiers())){ao.setAccessible(true);} "]
811674[label="localVariableDeclarationStatement\n Membermember=(Member)ao; "]
911675[label="localVariableDeclaration\n Membermember=(Member)ao "]
1011676[label="unannClassType_lfno_unannClassOrInterfaceType\n Member "]
1011677[label="variableDeclarator\n member=(Member)ao "]
1111678[label="variableDeclaratorId\n member "]
1111679[label="castExpression\n (Member)ao "]
1211680[label="classType_lfno_classOrInterfaceType\n Member "]
1211681[label="expressionName\n ao "]
811682[label="ifThenStatement\n if(!Modifier.isPublic(member.getModifiers())){ao.setAccessible(true);} "]
911683[label="unaryExpressionNotPlusMinus\n !Modifier.isPublic(member.getModifiers()) "]
1011684[label="methodInvocation_lfno_primary\n Modifier.isPublic(member.getModifiers()) "]
1111685[label="typeName\n Modifier "]
1111686[label="methodInvocation_lfno_primary\n member.getModifiers() "]
1211687[label="typeName\n member "]
911688[label="block\n {ao.setAccessible(true);} "]
1011689[label="expressionStatement\n ao.setAccessible(true); "]
1111690[label="methodInvocation\n ao.setAccessible(true) "]
1211691[label="typeName\n ao "]
1211692[label="literal\n true "]
311693[label="normalInterfaceDeclaration\n publicstaticinterfaceValueCreator{publicObjectcreateValue(Class<?>type,Stringvalue);} "]
411694[label="interfaceModifier\n public "]
411695[label="interfaceModifier\n static "]
411696[label="interfaceBody\n {publicObjectcreateValue(Class<?>type,Stringvalue);} "]
511697[label="interfaceMethodDeclaration\n publicObjectcreateValue(Class<?>type,Stringvalue); "]
611698[label="interfaceMethodModifier\n public "]
611699[label="methodHeader\n ObjectcreateValue(Class<?>type,Stringvalue) "]
711700[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
711701[label="methodDeclarator\n createValue(Class<?>type,Stringvalue) "]
811702[label="formalParameterList\n Class<?>type,Stringvalue "]
911703[label="formalParameter\n Class<?>type "]
1011704[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
1111705[label="typeArguments\n <?> "]
1211706[label="wildcard\n ? "]
1011707[label="variableDeclaratorId\n type "]
911708[label="formalParameter\n Stringvalue "]
1011709[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1011710[label="variableDeclaratorId\n value "]
611711[label="methodBody\n ; "]
311712[label="methodDeclaration\n publicstaticValueCreatorbyStaticMethodInvocation(finalClass<?>compatibleType,finalStringmethodName){returnnewValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv;}};} "]
411713[label="methodModifier\n public "]
411714[label="methodModifier\n static "]
411715[label="methodHeader\n ValueCreatorbyStaticMethodInvocation(finalClass<?>compatibleType,finalStringmethodName) "]
511716[label="unannClassType_lfno_unannClassOrInterfaceType\n ValueCreator "]
511717[label="methodDeclarator\n byStaticMethodInvocation(finalClass<?>compatibleType,finalStringmethodName) "]
611718[label="formalParameterList\n finalClass<?>compatibleType,finalStringmethodName "]
711719[label="formalParameter\n finalClass<?>compatibleType "]
811720[label="variableModifier\n final "]
811721[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
911722[label="typeArguments\n <?> "]
1011723[label="wildcard\n ? "]
811724[label="variableDeclaratorId\n compatibleType "]
711725[label="formalParameter\n finalStringmethodName "]
811726[label="variableModifier\n final "]
811727[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
811728[label="variableDeclaratorId\n methodName "]
411729[label="block\n {returnnewValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv;}};} "]
511730[label="returnStatement\n returnnewValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv;}}; "]
611731[label="classInstanceCreationExpression_lfno_primary\n newValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv;}} "]
711732[label="classBody\n {publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv;}} "]
811733[label="methodDeclaration\n publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv;} "]
911734[label="methodModifier\n public "]
911735[label="methodHeader\n ObjectcreateValue(Class<?>type,Stringvalue) "]
1011736[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
1011737[label="methodDeclarator\n createValue(Class<?>type,Stringvalue) "]
1111738[label="formalParameterList\n Class<?>type,Stringvalue "]
1211739[label="formalParameter\n Class<?>type "]
1311740[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
1411741[label="typeArguments\n <?> "]
1511742[label="wildcard\n ? "]
1311743[label="variableDeclaratorId\n type "]
1211744[label="formalParameter\n Stringvalue "]
1311745[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1311746[label="variableDeclaratorId\n value "]
911747[label="block\n {Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv;} "]
1011748[label="blockStatements\n Objectv=null;if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}}returnv; "]
1111749[label="localVariableDeclarationStatement\n Objectv=null; "]
1211750[label="localVariableDeclaration\n Objectv=null "]
1311751[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
1311752[label="variableDeclarator\n v=null "]
1411753[label="variableDeclaratorId\n v "]
1411754[label="literal\n null "]
1111755[label="ifThenStatement\n if(compatibleType.isAssignableFrom(type)){try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}} "]
1211756[label="methodInvocation_lfno_primary\n compatibleType.isAssignableFrom(type) "]
1311757[label="typeName\n compatibleType "]
1311758[label="expressionName\n type "]
1211759[label="block\n {try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));}} "]
1311760[label="tryStatement\n try{Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));} "]
1411761[label="block\n {Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value);} "]
1511762[label="blockStatements\n Methodm=type.getMethod(methodName,String.class);returnm.invoke(null,value); "]
1611763[label="localVariableDeclarationStatement\n Methodm=type.getMethod(methodName,String.class); "]
1711764[label="localVariableDeclaration\n Methodm=type.getMethod(methodName,String.class) "]
1811765[label="unannClassType_lfno_unannClassOrInterfaceType\n Method "]
1811766[label="variableDeclarator\n m=type.getMethod(methodName,String.class) "]
1911767[label="variableDeclaratorId\n m "]
1911768[label="methodInvocation_lfno_primary\n type.getMethod(methodName,String.class) "]
2011769[label="typeName\n type "]
2011770[label="argumentList\n methodName,String.class "]
2111771[label="expressionName\n methodName "]
2111772[label="primaryNoNewArray_lfno_primary\n String.class "]
2211773[label="typeName\n String "]
1611774[label="returnStatement\n returnm.invoke(null,value); "]
1711775[label="methodInvocation_lfno_primary\n m.invoke(null,value) "]
1811776[label="typeName\n m "]
1811777[label="argumentList\n null,value "]
1911778[label="literal\n null "]
1911779[label="expressionName\n value "]
1411780[label="catches\n catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));} "]
1511781[label="catchClause\n catch(NoSuchMethodExceptione){} "]
1611782[label="catchFormalParameter\n NoSuchMethodExceptione "]
1711783[label="unannClassType\n NoSuchMethodException "]
1711784[label="variableDeclaratorId\n e "]
1611785[label="block\n {} "]
1511786[label="catchClause\n catch(Exceptione){thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));} "]
1611787[label="catchFormalParameter\n Exceptione "]
1711788[label="unannClassType\n Exception "]
1711789[label="variableDeclaratorId\n e "]
1611790[label="block\n {thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value));} "]
1711791[label="throwStatement\n thrownewIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value)); "]
1811792[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value)) "]
1911793[label="methodInvocation_lfno_primary\n String.format(\"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value) "]
2011794[label="typeName\n String "]
2011795[label="argumentList\n \"could not invoke %s#%s to create an obejct from %s\",type.toString(),methodName,value "]
2111796[label="literal\n \"could not invoke %s#%s to create an obejct from %s\" "]
2111797[label="methodInvocation_lfno_primary\n type.toString() "]
2211798[label="typeName\n type "]
2111799[label="expressionName\n methodName "]
2111800[label="expressionName\n value "]
1111801[label="returnStatement\n returnv; "]
1211802[label="expressionName\n v "]
311803[label="fieldDeclaration\n publicstaticfinalValueCreatorFROM_STRING_CONSTRUCTOR=newValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);}returnv;}}; "]
411804[label="fieldModifier\n public "]
411805[label="fieldModifier\n static "]
411806[label="fieldModifier\n final "]
411807[label="unannClassType_lfno_unannClassOrInterfaceType\n ValueCreator "]
411808[label="variableDeclarator\n FROM_STRING_CONSTRUCTOR=newValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);}returnv;}} "]
511809[label="variableDeclaratorId\n FROM_STRING_CONSTRUCTOR "]
511810[label="classInstanceCreationExpression_lfno_primary\n newValueCreator(){publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);}returnv;}} "]
611811[label="classBody\n {publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);}returnv;}} "]
711812[label="methodDeclaration\n publicObjectcreateValue(Class<?>type,Stringvalue){Objectv=null;try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);}returnv;} "]
811813[label="methodModifier\n public "]
811814[label="methodHeader\n ObjectcreateValue(Class<?>type,Stringvalue) "]
911815[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
911816[label="methodDeclarator\n createValue(Class<?>type,Stringvalue) "]
1011817[label="formalParameterList\n Class<?>type,Stringvalue "]
1111818[label="formalParameter\n Class<?>type "]
1211819[label="unannClassType_lfno_unannClassOrInterfaceType\n Class<?> "]
1311820[label="typeArguments\n <?> "]
1411821[label="wildcard\n ? "]
1211822[label="variableDeclaratorId\n type "]
1111823[label="formalParameter\n Stringvalue "]
1211824[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1211825[label="variableDeclaratorId\n value "]
811826[label="block\n {Objectv=null;try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);}returnv;} "]
911827[label="blockStatements\n Objectv=null;try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);}returnv; "]
1011828[label="localVariableDeclarationStatement\n Objectv=null; "]
1111829[label="localVariableDeclaration\n Objectv=null "]
1211830[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
1211831[label="variableDeclarator\n v=null "]
1311832[label="variableDeclaratorId\n v "]
1311833[label="literal\n null "]
1011834[label="tryStatement\n try{Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);}catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);} "]
1111835[label="block\n {Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value);} "]
1211836[label="blockStatements\n Constructor<?>init=type.getDeclaredConstructor(String.class);v=init.newInstance(value); "]
1311837[label="localVariableDeclarationStatement\n Constructor<?>init=type.getDeclaredConstructor(String.class); "]
1411838[label="localVariableDeclaration\n Constructor<?>init=type.getDeclaredConstructor(String.class) "]
1511839[label="unannClassType_lfno_unannClassOrInterfaceType\n Constructor<?> "]
1611840[label="typeArguments\n <?> "]
1711841[label="wildcard\n ? "]
1511842[label="variableDeclarator\n init=type.getDeclaredConstructor(String.class) "]
1611843[label="variableDeclaratorId\n init "]
1611844[label="methodInvocation_lfno_primary\n type.getDeclaredConstructor(String.class) "]
1711845[label="typeName\n type "]
1711846[label="primaryNoNewArray_lfno_primary\n String.class "]
1811847[label="typeName\n String "]
1311848[label="expressionStatement\n v=init.newInstance(value); "]
1411849[label="assignment\n v=init.newInstance(value) "]
1511850[label="expressionName\n v "]
1511851[label="assignmentOperator\n = "]
1511852[label="methodInvocation_lfno_primary\n init.newInstance(value) "]
1611853[label="typeName\n init "]
1611854[label="expressionName\n value "]
1111855[label="catches\n catch(NoSuchMethodExceptione){}catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);} "]
1211856[label="catchClause\n catch(NoSuchMethodExceptione){} "]
1311857[label="catchFormalParameter\n NoSuchMethodExceptione "]
1411858[label="unannClassType\n NoSuchMethodException "]
1411859[label="variableDeclaratorId\n e "]
1311860[label="block\n {} "]
1211861[label="catchClause\n catch(Exceptione){thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);} "]
1311862[label="catchFormalParameter\n Exceptione "]
1411863[label="unannClassType\n Exception "]
1411864[label="variableDeclaratorId\n e "]
1311865[label="block\n {thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e);} "]
1411866[label="throwStatement\n thrownewIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e); "]
1511867[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e) "]
1611868[label="argumentList\n \"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName(),e "]
1711869[label="additiveExpression\n \"Failed to convertPKUtoCWS \"+value+\" to type \"+type.getName() "]
1811870[label="additiveExpression\n \"Failed to convertPKUtoCWS \"+value+\" to type \" "]
1911871[label="additiveExpression\n \"Failed to convertPKUtoCWS \"+value "]
2011872[label="literal\n \"Failed to convertPKUtoCWS \" "]
2011873[label="expressionName\n value "]
1911874[label="literal\n \" to type \" "]
1811875[label="methodInvocation_lfno_primary\n type.getName() "]
1911876[label="typeName\n type "]
1711877[label="expressionName\n e "]
1011878[label="returnStatement\n returnv; "]
1111879[label="expressionName\n v "]
311880[label="fieldDeclaration\n publicstaticfinalValueCreatorENUM_CREATOR=newValueCreator(){@SuppressWarnings({\"unchecked\",\"rawtypes\"})publicObjectcreateValue(Classtype,Stringvalue){if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);}returnnull;}}; "]
411881[label="fieldModifier\n public "]
411882[label="fieldModifier\n static "]
411883[label="fieldModifier\n final "]
411884[label="unannClassType_lfno_unannClassOrInterfaceType\n ValueCreator "]
411885[label="variableDeclarator\n ENUM_CREATOR=newValueCreator(){@SuppressWarnings({\"unchecked\",\"rawtypes\"})publicObjectcreateValue(Classtype,Stringvalue){if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);}returnnull;}} "]
511886[label="variableDeclaratorId\n ENUM_CREATOR "]
511887[label="classInstanceCreationExpression_lfno_primary\n newValueCreator(){@SuppressWarnings({\"unchecked\",\"rawtypes\"})publicObjectcreateValue(Classtype,Stringvalue){if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);}returnnull;}} "]
611888[label="classBody\n {@SuppressWarnings({\"unchecked\",\"rawtypes\"})publicObjectcreateValue(Classtype,Stringvalue){if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);}returnnull;}} "]
711889[label="methodDeclaration\n @SuppressWarnings({\"unchecked\",\"rawtypes\"})publicObjectcreateValue(Classtype,Stringvalue){if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);}returnnull;} "]
811890[label="singleElementAnnotation\n @SuppressWarnings({\"unchecked\",\"rawtypes\"}) "]
911891[label="typeName\n SuppressWarnings "]
911892[label="elementValueArrayInitializer\n {\"unchecked\",\"rawtypes\"} "]
1011893[label="elementValueList\n \"unchecked\",\"rawtypes\" "]
1111894[label="literal\n \"unchecked\" "]
1111895[label="literal\n \"rawtypes\" "]
811896[label="methodModifier\n public "]
811897[label="methodHeader\n ObjectcreateValue(Classtype,Stringvalue) "]
911898[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
911899[label="methodDeclarator\n createValue(Classtype,Stringvalue) "]
1011900[label="formalParameterList\n Classtype,Stringvalue "]
1111901[label="formalParameter\n Classtype "]
1211902[label="unannClassType_lfno_unannClassOrInterfaceType\n Class "]
1211903[label="variableDeclaratorId\n type "]
1111904[label="formalParameter\n Stringvalue "]
1211905[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1211906[label="variableDeclaratorId\n value "]
811907[label="block\n {if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);}returnnull;} "]
911908[label="blockStatements\n if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);}returnnull; "]
1011909[label="ifThenStatement\n if(Enum.class.isAssignableFrom(type)){returnEnum.valueOf(type,value);} "]
1111910[label="primary\n Enum.class.isAssignableFrom(type) "]
1211911[label="primaryNoNewArray_lfno_primary\n Enum.class "]
1311912[label="typeName\n Enum "]
1211913[label="methodInvocation_lf_primary\n .isAssignableFrom(type) "]
1311914[label="expressionName\n type "]
1111915[label="block\n {returnEnum.valueOf(type,value);} "]
1211916[label="returnStatement\n returnEnum.valueOf(type,value); "]
1311917[label="methodInvocation_lfno_primary\n Enum.valueOf(type,value) "]
1411918[label="typeName\n Enum "]
1411919[label="argumentList\n type,value "]
1511920[label="expressionName\n type "]
1511921[label="expressionName\n value "]
1011922[label="returnStatement\n returnnull; "]
1111923[label="literal\n null "]
311924[label="fieldDeclaration\n privatestaticfinalList<ValueCreator>DEFAULT_VALUE_CREATORS=Arrays.asList(Args.FROM_STRING_CONSTRUCTOR,Args.ENUM_CREATOR); "]
411925[label="fieldModifier\n private "]
411926[label="fieldModifier\n static "]
411927[label="fieldModifier\n final "]
411928[label="unannClassType_lfno_unannClassOrInterfaceType\n List<ValueCreator> "]
511929[label="typeArguments\n <ValueCreator> "]
611930[label="classType_lfno_classOrInterfaceType\n ValueCreator "]
411931[label="variableDeclarator\n DEFAULT_VALUE_CREATORS=Arrays.asList(Args.FROM_STRING_CONSTRUCTOR,Args.ENUM_CREATOR) "]
511932[label="variableDeclaratorId\n DEFAULT_VALUE_CREATORS "]
511933[label="methodInvocation_lfno_primary\n Arrays.asList(Args.FROM_STRING_CONSTRUCTOR,Args.ENUM_CREATOR) "]
611934[label="typeName\n Arrays "]
611935[label="argumentList\n Args.FROM_STRING_CONSTRUCTOR,Args.ENUM_CREATOR "]
711936[label="expressionName\n Args.FROM_STRING_CONSTRUCTOR "]
811937[label="ambiguousName\n Args "]
711938[label="expressionName\n Args.ENUM_CREATOR "]
811939[label="ambiguousName\n Args "]
311940[label="fieldDeclaration\n privatestaticList<ValueCreator>valueCreators=newArrayList<ValueCreator>(DEFAULT_VALUE_CREATORS); "]
411941[label="fieldModifier\n private "]
411942[label="fieldModifier\n static "]
411943[label="unannClassType_lfno_unannClassOrInterfaceType\n List<ValueCreator> "]
511944[label="typeArguments\n <ValueCreator> "]
611945[label="classType_lfno_classOrInterfaceType\n ValueCreator "]
411946[label="variableDeclarator\n valueCreators=newArrayList<ValueCreator>(DEFAULT_VALUE_CREATORS) "]
511947[label="variableDeclaratorId\n valueCreators "]
511948[label="classInstanceCreationExpression_lfno_primary\n newArrayList<ValueCreator>(DEFAULT_VALUE_CREATORS) "]
611949[label="typeArguments\n <ValueCreator> "]
711950[label="classType_lfno_classOrInterfaceType\n ValueCreator "]
611951[label="expressionName\n DEFAULT_VALUE_CREATORS "]
311952[label="methodDeclaration\n publicstaticvoidregisterValueCreator(ValueCreatorvc){valueCreators.add(vc);} "]
411953[label="methodModifier\n public "]
411954[label="methodModifier\n static "]
411955[label="methodHeader\n voidregisterValueCreator(ValueCreatorvc) "]
511956[label="result\n void "]
511957[label="methodDeclarator\n registerValueCreator(ValueCreatorvc) "]
611958[label="formalParameter\n ValueCreatorvc "]
711959[label="unannClassType_lfno_unannClassOrInterfaceType\n ValueCreator "]
711960[label="variableDeclaratorId\n vc "]
411961[label="block\n {valueCreators.add(vc);} "]
511962[label="expressionStatement\n valueCreators.add(vc); "]
611963[label="methodInvocation\n valueCreators.add(vc) "]
711964[label="typeName\n valueCreators "]
711965[label="expressionName\n vc "]
311966[label="methodDeclaration\n publicstaticvoidresetValueCreators(){valueCreators.clear();valueCreators.addAll(DEFAULT_VALUE_CREATORS);} "]
411967[label="methodModifier\n public "]
411968[label="methodModifier\n static "]
411969[label="methodHeader\n voidresetValueCreators() "]
511970[label="result\n void "]
511971[label="methodDeclarator\n resetValueCreators() "]
411972[label="block\n {valueCreators.clear();valueCreators.addAll(DEFAULT_VALUE_CREATORS);} "]
511973[label="blockStatements\n valueCreators.clear();valueCreators.addAll(DEFAULT_VALUE_CREATORS); "]
611974[label="expressionStatement\n valueCreators.clear(); "]
711975[label="methodInvocation\n valueCreators.clear() "]
811976[label="typeName\n valueCreators "]
611977[label="expressionStatement\n valueCreators.addAll(DEFAULT_VALUE_CREATORS); "]
711978[label="methodInvocation\n valueCreators.addAll(DEFAULT_VALUE_CREATORS) "]
811979[label="typeName\n valueCreators "]
811980[label="expressionName\n DEFAULT_VALUE_CREATORS "]
011981[label="compilationUnit\n packagecom.hankcs.hanlp.model.perceptron.cli;importjava.lang.annotation.Documented;importjava.lang.annotation.Retention;importjava.lang.annotation.RetentionPolicy;@Documented@Retention(RetentionPolicy.RUNTIME)public@interfaceArgument{Stringvalue()default\"\";booleanrequired()defaultfalse;Stringprefix()default\"-\";Stringalias()default\"\";Stringdescription()default\"\";Stringdelimiter()default\",\";}<EOF> "]
111982[label="packageDeclaration\n packagecom.hankcs.hanlp.model.perceptron.cli; "]
211983[label="packageName\n com.hankcs.hanlp.model.perceptron.cli "]
311984[label="packageName\n com.hankcs.hanlp.model.perceptron "]
411985[label="packageName\n com.hankcs.hanlp.model "]
511986[label="packageName\n com.hankcs.hanlp "]
611987[label="packageName\n com.hankcs "]
711988[label="packageName\n com "]
111989[label="singleTypeImportDeclaration\n importjava.lang.annotation.Documented; "]
211990[label="typeName\n java.lang.annotation.Documented "]
311991[label="packageOrTypeName\n java.lang.annotation "]
411992[label="packageOrTypeName\n java.lang "]
511993[label="packageOrTypeName\n java "]
111994[label="singleTypeImportDeclaration\n importjava.lang.annotation.Retention; "]
211995[label="typeName\n java.lang.annotation.Retention "]
311996[label="packageOrTypeName\n java.lang.annotation "]
411997[label="packageOrTypeName\n java.lang "]
511998[label="packageOrTypeName\n java "]
111999[label="singleTypeImportDeclaration\n importjava.lang.annotation.RetentionPolicy; "]
212000[label="typeName\n java.lang.annotation.RetentionPolicy "]
312001[label="packageOrTypeName\n java.lang.annotation "]
412002[label="packageOrTypeName\n java.lang "]
512003[label="packageOrTypeName\n java "]
112004[label="annotationTypeDeclaration\n @Documented@Retention(RetentionPolicy.RUNTIME)public@interfaceArgument{Stringvalue()default\"\";booleanrequired()defaultfalse;Stringprefix()default\"-\";Stringalias()default\"\";Stringdescription()default\"\";Stringdelimiter()default\",\";} "]
212005[label="markerAnnotation\n @Documented "]
312006[label="typeName\n Documented "]
212007[label="singleElementAnnotation\n @Retention(RetentionPolicy.RUNTIME) "]
312008[label="typeName\n Retention "]
312009[label="expressionName\n RetentionPolicy.RUNTIME "]
412010[label="ambiguousName\n RetentionPolicy "]
212011[label="interfaceModifier\n public "]
212012[label="annotationTypeBody\n {Stringvalue()default\"\";booleanrequired()defaultfalse;Stringprefix()default\"-\";Stringalias()default\"\";Stringdescription()default\"\";Stringdelimiter()default\",\";} "]
312013[label="annotationTypeElementDeclaration\n Stringvalue()default\"\"; "]
412014[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
412015[label="defaultValue\n default\"\" "]
512016[label="literal\n \"\" "]
312017[label="annotationTypeElementDeclaration\n booleanrequired()defaultfalse; "]
412018[label="unannPrimitiveType\n boolean "]
412019[label="defaultValue\n defaultfalse "]
512020[label="literal\n false "]
312021[label="annotationTypeElementDeclaration\n Stringprefix()default\"-\"; "]
412022[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
412023[label="defaultValue\n default\"-\" "]
512024[label="literal\n \"-\" "]
312025[label="annotationTypeElementDeclaration\n Stringalias()default\"\"; "]
412026[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
412027[label="defaultValue\n default\"\" "]
512028[label="literal\n \"\" "]
312029[label="annotationTypeElementDeclaration\n Stringdescription()default\"\"; "]
412030[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
412031[label="defaultValue\n default\"\" "]
512032[label="literal\n \"\" "]
312033[label="annotationTypeElementDeclaration\n Stringdelimiter()default\",\"; "]
412034[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
412035[label="defaultValue\n default\",\" "]
512036[label="literal\n \",\" "]
012037[label="compilationUnit\n packagecom.hankcs.hanlp.algorithm;publicclassArrayCompare{publicstaticintcompare(Long[]arrayA,Long[]arrayB){intlen1=arrayA.length;intlen2=arrayB.length;intlim=Math.min(len1,len2);intk=0;while(k<lim){Longc1=arrayA[k];Longc2=arrayB[k];if(!c1.equals(c2)){returnc1.compareTo(c2);}++k;}returnlen1-len2;}}<EOF> "]
112038[label="packageDeclaration\n packagecom.hankcs.hanlp.algorithm; "]
212039[label="packageName\n com.hankcs.hanlp.algorithm "]
312040[label="packageName\n com.hankcs.hanlp "]
412041[label="packageName\n com.hankcs "]
512042[label="packageName\n com "]
112043[label="normalClassDeclaration\n publicclassArrayCompare{publicstaticintcompare(Long[]arrayA,Long[]arrayB){intlen1=arrayA.length;intlen2=arrayB.length;intlim=Math.min(len1,len2);intk=0;while(k<lim){Longc1=arrayA[k];Longc2=arrayB[k];if(!c1.equals(c2)){returnc1.compareTo(c2);}++k;}returnlen1-len2;}} "]
212044[label="classModifier\n public "]
212045[label="classBody\n {publicstaticintcompare(Long[]arrayA,Long[]arrayB){intlen1=arrayA.length;intlen2=arrayB.length;intlim=Math.min(len1,len2);intk=0;while(k<lim){Longc1=arrayA[k];Longc2=arrayB[k];if(!c1.equals(c2)){returnc1.compareTo(c2);}++k;}returnlen1-len2;}} "]
312046[label="methodDeclaration\n publicstaticintcompare(Long[]arrayA,Long[]arrayB){intlen1=arrayA.length;intlen2=arrayB.length;intlim=Math.min(len1,len2);intk=0;while(k<lim){Longc1=arrayA[k];Longc2=arrayB[k];if(!c1.equals(c2)){returnc1.compareTo(c2);}++k;}returnlen1-len2;} "]
412047[label="methodModifier\n public "]
412048[label="methodModifier\n static "]
412049[label="methodHeader\n intcompare(Long[]arrayA,Long[]arrayB) "]
512050[label="integralType\n int "]
512051[label="methodDeclarator\n compare(Long[]arrayA,Long[]arrayB) "]
612052[label="formalParameterList\n Long[]arrayA,Long[]arrayB "]
712053[label="formalParameter\n Long[]arrayA "]
812054[label="unannArrayType\n Long[] "]
912055[label="unannClassType_lfno_unannClassOrInterfaceType\n Long "]
912056[label="dims\n [] "]
812057[label="variableDeclaratorId\n arrayA "]
712058[label="formalParameter\n Long[]arrayB "]
812059[label="unannArrayType\n Long[] "]
912060[label="unannClassType_lfno_unannClassOrInterfaceType\n Long "]
912061[label="dims\n [] "]
812062[label="variableDeclaratorId\n arrayB "]
412063[label="block\n {intlen1=arrayA.length;intlen2=arrayB.length;intlim=Math.min(len1,len2);intk=0;while(k<lim){Longc1=arrayA[k];Longc2=arrayB[k];if(!c1.equals(c2)){returnc1.compareTo(c2);}++k;}returnlen1-len2;} "]
512064[label="blockStatements\n intlen1=arrayA.length;intlen2=arrayB.length;intlim=Math.min(len1,len2);intk=0;while(k<lim){Longc1=arrayA[k];Longc2=arrayB[k];if(!c1.equals(c2)){returnc1.compareTo(c2);}++k;}returnlen1-len2; "]
612065[label="localVariableDeclarationStatement\n intlen1=arrayA.length; "]
712066[label="localVariableDeclaration\n intlen1=arrayA.length "]
812067[label="integralType\n int "]
812068[label="variableDeclarator\n len1=arrayA.length "]
912069[label="variableDeclaratorId\n len1 "]
912070[label="expressionName\n arrayA.length "]
1012071[label="ambiguousName\n arrayA "]
612072[label="localVariableDeclarationStatement\n intlen2=arrayB.length; "]
712073[label="localVariableDeclaration\n intlen2=arrayB.length "]
812074[label="integralType\n int "]
812075[label="variableDeclarator\n len2=arrayB.length "]
912076[label="variableDeclaratorId\n len2 "]
912077[label="expressionName\n arrayB.length "]
1012078[label="ambiguousName\n arrayB "]
612079[label="localVariableDeclarationStatement\n intlim=Math.min(len1,len2); "]
712080[label="localVariableDeclaration\n intlim=Math.min(len1,len2) "]
812081[label="integralType\n int "]
812082[label="variableDeclarator\n lim=Math.min(len1,len2) "]
912083[label="variableDeclaratorId\n lim "]
912084[label="methodInvocation_lfno_primary\n Math.min(len1,len2) "]
1012085[label="typeName\n Math "]
1012086[label="argumentList\n len1,len2 "]
1112087[label="expressionName\n len1 "]
1112088[label="expressionName\n len2 "]
612089[label="localVariableDeclarationStatement\n intk=0; "]
712090[label="localVariableDeclaration\n intk=0 "]
812091[label="integralType\n int "]
812092[label="variableDeclarator\n k=0 "]
912093[label="variableDeclaratorId\n k "]
912094[label="literal\n 0 "]
612095[label="whileStatement\n while(k<lim){Longc1=arrayA[k];Longc2=arrayB[k];if(!c1.equals(c2)){returnc1.compareTo(c2);}++k;} "]
712096[label="relationalExpression\n k<lim "]
812097[label="expressionName\n k "]
812098[label="expressionName\n lim "]
712099[label="block\n {Longc1=arrayA[k];Longc2=arrayB[k];if(!c1.equals(c2)){returnc1.compareTo(c2);}++k;} "]
812100[label="blockStatements\n Longc1=arrayA[k];Longc2=arrayB[k];if(!c1.equals(c2)){returnc1.compareTo(c2);}++k; "]
912101[label="localVariableDeclarationStatement\n Longc1=arrayA[k]; "]
1012102[label="localVariableDeclaration\n Longc1=arrayA[k] "]
1112103[label="unannClassType_lfno_unannClassOrInterfaceType\n Long "]
1112104[label="variableDeclarator\n c1=arrayA[k] "]
1212105[label="variableDeclaratorId\n c1 "]
1212106[label="arrayAccess_lfno_primary\n arrayA[k] "]
1312107[label="expressionName\n arrayA "]
1312108[label="expressionName\n k "]
912109[label="localVariableDeclarationStatement\n Longc2=arrayB[k]; "]
1012110[label="localVariableDeclaration\n Longc2=arrayB[k] "]
1112111[label="unannClassType_lfno_unannClassOrInterfaceType\n Long "]
1112112[label="variableDeclarator\n c2=arrayB[k] "]
1212113[label="variableDeclaratorId\n c2 "]
1212114[label="arrayAccess_lfno_primary\n arrayB[k] "]
1312115[label="expressionName\n arrayB "]
1312116[label="expressionName\n k "]
912117[label="ifThenStatement\n if(!c1.equals(c2)){returnc1.compareTo(c2);} "]
1012118[label="unaryExpressionNotPlusMinus\n !c1.equals(c2) "]
1112119[label="methodInvocation_lfno_primary\n c1.equals(c2) "]
1212120[label="typeName\n c1 "]
1212121[label="expressionName\n c2 "]
1012122[label="block\n {returnc1.compareTo(c2);} "]
1112123[label="returnStatement\n returnc1.compareTo(c2); "]
1212124[label="methodInvocation_lfno_primary\n c1.compareTo(c2) "]
1312125[label="typeName\n c1 "]
1312126[label="expressionName\n c2 "]
912127[label="expressionStatement\n ++k; "]
1012128[label="preIncrementExpression\n ++k "]
1112129[label="expressionName\n k "]
612130[label="returnStatement\n returnlen1-len2; "]
712131[label="additiveExpression\n len1-len2 "]
812132[label="expressionName\n len1 "]
812133[label="expressionName\n len2 "]
012134[label="compilationUnit\n packagecom.hankcs.hanlp.algorithm;importjava.util.TreeSet;publicclassArrayDistance{publicstaticLongcomputeMinimumDistance(TreeSet<Long>setA,TreeSet<Long>setB){Long[]arrayA=setA.toArray(newLong[0]);Long[]arrayB=setB.toArray(newLong[0]);returncomputeMinimumDistance(arrayA,arrayB);}publicstaticLongcomputeMinimumDistance(Long[]arrayA,Long[]arrayB){intaIndex=0;intbIndex=0;longmin=Math.abs(arrayA[0]-arrayB[0]);while(true){if(arrayA[aIndex]>arrayB[bIndex]){bIndex++;}else{aIndex++;}if(aIndex>=arrayA.length||bIndex>=arrayB.length){break;}if(Math.abs(arrayA[aIndex]-arrayB[bIndex])<min){min=Math.abs(arrayA[aIndex]-arrayB[bIndex]);}}returnmin;}publicstaticLongcomputeAverageDistance(Long[]arrayA,Long[]arrayB){LongtotalA=0L;LongtotalB=0L;for(Longa:arrayA)totalA+=a;for(Longb:arrayB)totalB+=b;returnMath.abs(totalA/arrayA.length-totalB/arrayB.length);}}<EOF> "]
112135[label="packageDeclaration\n packagecom.hankcs.hanlp.algorithm; "]
212136[label="packageName\n com.hankcs.hanlp.algorithm "]
312137[label="packageName\n com.hankcs.hanlp "]
412138[label="packageName\n com.hankcs "]
512139[label="packageName\n com "]
112140[label="singleTypeImportDeclaration\n importjava.util.TreeSet; "]
212141[label="typeName\n java.util.TreeSet "]
312142[label="packageOrTypeName\n java.util "]
412143[label="packageOrTypeName\n java "]
112144[label="normalClassDeclaration\n publicclassArrayDistance{publicstaticLongcomputeMinimumDistance(TreeSet<Long>setA,TreeSet<Long>setB){Long[]arrayA=setA.toArray(newLong[0]);Long[]arrayB=setB.toArray(newLong[0]);returncomputeMinimumDistance(arrayA,arrayB);}publicstaticLongcomputeMinimumDistance(Long[]arrayA,Long[]arrayB){intaIndex=0;intbIndex=0;longmin=Math.abs(arrayA[0]-arrayB[0]);while(true){if(arrayA[aIndex]>arrayB[bIndex]){bIndex++;}else{aIndex++;}if(aIndex>=arrayA.length||bIndex>=arrayB.length){break;}if(Math.abs(arrayA[aIndex]-arrayB[bIndex])<min){min=Math.abs(arrayA[aIndex]-arrayB[bIndex]);}}returnmin;}publicstaticLongcomputeAverageDistance(Long[]arrayA,Long[]arrayB){LongtotalA=0L;LongtotalB=0L;for(Longa:arrayA)totalA+=a;for(Longb:arrayB)totalB+=b;returnMath.abs(totalA/arrayA.length-totalB/arrayB.length);}} "]
212145[label="classModifier\n public "]
212146[label="classBody\n {publicstaticLongcomputeMinimumDistance(TreeSet<Long>setA,TreeSet<Long>setB){Long[]arrayA=setA.toArray(newLong[0]);Long[]arrayB=setB.toArray(newLong[0]);returncomputeMinimumDistance(arrayA,arrayB);}publicstaticLongcomputeMinimumDistance(Long[]arrayA,Long[]arrayB){intaIndex=0;intbIndex=0;longmin=Math.abs(arrayA[0]-arrayB[0]);while(true){if(arrayA[aIndex]>arrayB[bIndex]){bIndex++;}else{aIndex++;}if(aIndex>=arrayA.length||bIndex>=arrayB.length){break;}if(Math.abs(arrayA[aIndex]-arrayB[bIndex])<min){min=Math.abs(arrayA[aIndex]-arrayB[bIndex]);}}returnmin;}publicstaticLongcomputeAverageDistance(Long[]arrayA,Long[]arrayB){LongtotalA=0L;LongtotalB=0L;for(Longa:arrayA)totalA+=a;for(Longb:arrayB)totalB+=b;returnMath.abs(totalA/arrayA.length-totalB/arrayB.length);}} "]
312147[label="methodDeclaration\n publicstaticLongcomputeMinimumDistance(TreeSet<Long>setA,TreeSet<Long>setB){Long[]arrayA=setA.toArray(newLong[0]);Long[]arrayB=setB.toArray(newLong[0]);returncomputeMinimumDistance(arrayA,arrayB);} "]
412148[label="methodModifier\n public "]
412149[label="methodModifier\n static "]
412150[label="methodHeader\n LongcomputeMinimumDistance(TreeSet<Long>setA,TreeSet<Long>setB) "]
512151[label="unannClassType_lfno_unannClassOrInterfaceType\n Long "]
512152[label="methodDeclarator\n computeMinimumDistance(TreeSet<Long>setA,TreeSet<Long>setB) "]
612153[label="formalParameterList\n TreeSet<Long>setA,TreeSet<Long>setB "]
712154[label="formalParameter\n TreeSet<Long>setA "]
812155[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeSet<Long> "]
912156[label="typeArguments\n <Long> "]
1012157[label="classType_lfno_classOrInterfaceType\n Long "]
812158[label="variableDeclaratorId\n setA "]
712159[label="formalParameter\n TreeSet<Long>setB "]
812160[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeSet<Long> "]
912161[label="typeArguments\n <Long> "]
1012162[label="classType_lfno_classOrInterfaceType\n Long "]
812163[label="variableDeclaratorId\n setB "]
412164[label="block\n {Long[]arrayA=setA.toArray(newLong[0]);Long[]arrayB=setB.toArray(newLong[0]);returncomputeMinimumDistance(arrayA,arrayB);} "]
512165[label="blockStatements\n Long[]arrayA=setA.toArray(newLong[0]);Long[]arrayB=setB.toArray(newLong[0]);returncomputeMinimumDistance(arrayA,arrayB); "]
612166[label="localVariableDeclarationStatement\n Long[]arrayA=setA.toArray(newLong[0]); "]
712167[label="localVariableDeclaration\n Long[]arrayA=setA.toArray(newLong[0]) "]
812168[label="unannArrayType\n Long[] "]
912169[label="unannClassType_lfno_unannClassOrInterfaceType\n Long "]
912170[label="dims\n [] "]
812171[label="variableDeclarator\n arrayA=setA.toArray(newLong[0]) "]
912172[label="variableDeclaratorId\n arrayA "]
912173[label="methodInvocation_lfno_primary\n setA.toArray(newLong[0]) "]
1012174[label="typeName\n setA "]
1012175[label="arrayCreationExpression\n newLong[0] "]
1112176[label="classType_lfno_classOrInterfaceType\n Long "]
1112177[label="dimExpr\n [0] "]
1212178[label="literal\n 0 "]
612179[label="localVariableDeclarationStatement\n Long[]arrayB=setB.toArray(newLong[0]); "]
712180[label="localVariableDeclaration\n Long[]arrayB=setB.toArray(newLong[0]) "]
812181[label="unannArrayType\n Long[] "]
912182[label="unannClassType_lfno_unannClassOrInterfaceType\n Long "]
912183[label="dims\n [] "]
812184[label="variableDeclarator\n arrayB=setB.toArray(newLong[0]) "]
912185[label="variableDeclaratorId\n arrayB "]
912186[label="methodInvocation_lfno_primary\n setB.toArray(newLong[0]) "]
1012187[label="typeName\n setB "]
1012188[label="arrayCreationExpression\n newLong[0] "]
1112189[label="classType_lfno_classOrInterfaceType\n Long "]
1112190[label="dimExpr\n [0] "]
1212191[label="literal\n 0 "]
612192[label="returnStatement\n returncomputeMinimumDistance(arrayA,arrayB); "]
712193[label="methodInvocation_lfno_primary\n computeMinimumDistance(arrayA,arrayB) "]
812194[label="methodName\n computeMinimumDistance "]
812195[label="argumentList\n arrayA,arrayB "]
912196[label="expressionName\n arrayA "]
912197[label="expressionName\n arrayB "]
312198[label="methodDeclaration\n publicstaticLongcomputeMinimumDistance(Long[]arrayA,Long[]arrayB){intaIndex=0;intbIndex=0;longmin=Math.abs(arrayA[0]-arrayB[0]);while(true){if(arrayA[aIndex]>arrayB[bIndex]){bIndex++;}else{aIndex++;}if(aIndex>=arrayA.length||bIndex>=arrayB.length){break;}if(Math.abs(arrayA[aIndex]-arrayB[bIndex])<min){min=Math.abs(arrayA[aIndex]-arrayB[bIndex]);}}returnmin;} "]
412199[label="methodModifier\n public "]
412200[label="methodModifier\n static "]
412201[label="methodHeader\n LongcomputeMinimumDistance(Long[]arrayA,Long[]arrayB) "]
512202[label="unannClassType_lfno_unannClassOrInterfaceType\n Long "]
512203[label="methodDeclarator\n computeMinimumDistance(Long[]arrayA,Long[]arrayB) "]
612204[label="formalParameterList\n Long[]arrayA,Long[]arrayB "]
712205[label="formalParameter\n Long[]arrayA "]
812206[label="unannArrayType\n Long[] "]
912207[label="unannClassType_lfno_unannClassOrInterfaceType\n Long "]
912208[label="dims\n [] "]
812209[label="variableDeclaratorId\n arrayA "]
712210[label="formalParameter\n Long[]arrayB "]
812211[label="unannArrayType\n Long[] "]
912212[label="unannClassType_lfno_unannClassOrInterfaceType\n Long "]
912213[label="dims\n [] "]
812214[label="variableDeclaratorId\n arrayB "]
412215[label="block\n {intaIndex=0;intbIndex=0;longmin=Math.abs(arrayA[0]-arrayB[0]);while(true){if(arrayA[aIndex]>arrayB[bIndex]){bIndex++;}else{aIndex++;}if(aIndex>=arrayA.length||bIndex>=arrayB.length){break;}if(Math.abs(arrayA[aIndex]-arrayB[bIndex])<min){min=Math.abs(arrayA[aIndex]-arrayB[bIndex]);}}returnmin;} "]
512216[label="blockStatements\n intaIndex=0;intbIndex=0;longmin=Math.abs(arrayA[0]-arrayB[0]);while(true){if(arrayA[aIndex]>arrayB[bIndex]){bIndex++;}else{aIndex++;}if(aIndex>=arrayA.length||bIndex>=arrayB.length){break;}if(Math.abs(arrayA[aIndex]-arrayB[bIndex])<min){min=Math.abs(arrayA[aIndex]-arrayB[bIndex]);}}returnmin; "]
612217[label="localVariableDeclarationStatement\n intaIndex=0; "]
712218[label="localVariableDeclaration\n intaIndex=0 "]
812219[label="integralType\n int "]
812220[label="variableDeclarator\n aIndex=0 "]
912221[label="variableDeclaratorId\n aIndex "]
912222[label="literal\n 0 "]
612223[label="localVariableDeclarationStatement\n intbIndex=0; "]
712224[label="localVariableDeclaration\n intbIndex=0 "]
812225[label="integralType\n int "]
812226[label="variableDeclarator\n bIndex=0 "]
912227[label="variableDeclaratorId\n bIndex "]
912228[label="literal\n 0 "]
612229[label="localVariableDeclarationStatement\n longmin=Math.abs(arrayA[0]-arrayB[0]); "]
712230[label="localVariableDeclaration\n longmin=Math.abs(arrayA[0]-arrayB[0]) "]
812231[label="integralType\n long "]
812232[label="variableDeclarator\n min=Math.abs(arrayA[0]-arrayB[0]) "]
912233[label="variableDeclaratorId\n min "]
912234[label="methodInvocation_lfno_primary\n Math.abs(arrayA[0]-arrayB[0]) "]
1012235[label="typeName\n Math "]
1012236[label="additiveExpression\n arrayA[0]-arrayB[0] "]
1112237[label="arrayAccess_lfno_primary\n arrayA[0] "]
1212238[label="expressionName\n arrayA "]
1212239[label="literal\n 0 "]
1112240[label="arrayAccess_lfno_primary\n arrayB[0] "]
1212241[label="expressionName\n arrayB "]
1212242[label="literal\n 0 "]
612243[label="whileStatement\n while(true){if(arrayA[aIndex]>arrayB[bIndex]){bIndex++;}else{aIndex++;}if(aIndex>=arrayA.length||bIndex>=arrayB.length){break;}if(Math.abs(arrayA[aIndex]-arrayB[bIndex])<min){min=Math.abs(arrayA[aIndex]-arrayB[bIndex]);}} "]
712244[label="literal\n true "]
712245[label="block\n {if(arrayA[aIndex]>arrayB[bIndex]){bIndex++;}else{aIndex++;}if(aIndex>=arrayA.length||bIndex>=arrayB.length){break;}if(Math.abs(arrayA[aIndex]-arrayB[bIndex])<min){min=Math.abs(arrayA[aIndex]-arrayB[bIndex]);}} "]
812246[label="blockStatements\n if(arrayA[aIndex]>arrayB[bIndex]){bIndex++;}else{aIndex++;}if(aIndex>=arrayA.length||bIndex>=arrayB.length){break;}if(Math.abs(arrayA[aIndex]-arrayB[bIndex])<min){min=Math.abs(arrayA[aIndex]-arrayB[bIndex]);} "]
912247[label="ifThenElseStatement\n if(arrayA[aIndex]>arrayB[bIndex]){bIndex++;}else{aIndex++;} "]
1012248[label="relationalExpression\n arrayA[aIndex]>arrayB[bIndex] "]
1112249[label="arrayAccess_lfno_primary\n arrayA[aIndex] "]
1212250[label="expressionName\n arrayA "]
1212251[label="expressionName\n aIndex "]
1112252[label="arrayAccess_lfno_primary\n arrayB[bIndex] "]
1212253[label="expressionName\n arrayB "]
1212254[label="expressionName\n bIndex "]
1012255[label="block\n {bIndex++;} "]
1112256[label="expressionStatement\n bIndex++; "]
1212257[label="postIncrementExpression\n bIndex++ "]
1312258[label="expressionName\n bIndex "]
1012259[label="block\n {aIndex++;} "]
1112260[label="expressionStatement\n aIndex++; "]
1212261[label="postIncrementExpression\n aIndex++ "]
1312262[label="expressionName\n aIndex "]
912263[label="ifThenStatement\n if(aIndex>=arrayA.length||bIndex>=arrayB.length){break;} "]
1012264[label="conditionalOrExpression\n aIndex>=arrayA.length||bIndex>=arrayB.length "]
1112265[label="relationalExpression\n aIndex>=arrayA.length "]
1212266[label="expressionName\n aIndex "]
1212267[label="expressionName\n arrayA.length "]
1312268[label="ambiguousName\n arrayA "]
1112269[label="relationalExpression\n bIndex>=arrayB.length "]
1212270[label="expressionName\n bIndex "]
1212271[label="expressionName\n arrayB.length "]
1312272[label="ambiguousName\n arrayB "]
1012273[label="block\n {break;} "]
1112274[label="breakStatement\n break; "]
912275[label="ifThenStatement\n if(Math.abs(arrayA[aIndex]-arrayB[bIndex])<min){min=Math.abs(arrayA[aIndex]-arrayB[bIndex]);} "]
1012276[label="relationalExpression\n Math.abs(arrayA[aIndex]-arrayB[bIndex])<min "]
1112277[label="methodInvocation_lfno_primary\n Math.abs(arrayA[aIndex]-arrayB[bIndex]) "]
1212278[label="typeName\n Math "]
1212279[label="additiveExpression\n arrayA[aIndex]-arrayB[bIndex] "]
1312280[label="arrayAccess_lfno_primary\n arrayA[aIndex] "]
1412281[label="expressionName\n arrayA "]
1412282[label="expressionName\n aIndex "]
1312283[label="arrayAccess_lfno_primary\n arrayB[bIndex] "]
1412284[label="expressionName\n arrayB "]
1412285[label="expressionName\n bIndex "]
1112286[label="expressionName\n min "]
1012287[label="block\n {min=Math.abs(arrayA[aIndex]-arrayB[bIndex]);} "]
1112288[label="expressionStatement\n min=Math.abs(arrayA[aIndex]-arrayB[bIndex]); "]
1212289[label="assignment\n min=Math.abs(arrayA[aIndex]-arrayB[bIndex]) "]
1312290[label="expressionName\n min "]
1312291[label="assignmentOperator\n = "]
1312292[label="methodInvocation_lfno_primary\n Math.abs(arrayA[aIndex]-arrayB[bIndex]) "]
1412293[label="typeName\n Math "]
1412294[label="additiveExpression\n arrayA[aIndex]-arrayB[bIndex] "]
1512295[label="arrayAccess_lfno_primary\n arrayA[aIndex] "]
1612296[label="expressionName\n arrayA "]
1612297[label="expressionName\n aIndex "]
1512298[label="arrayAccess_lfno_primary\n arrayB[bIndex] "]
1612299[label="expressionName\n arrayB "]
1612300[label="expressionName\n bIndex "]
612301[label="returnStatement\n returnmin; "]
712302[label="expressionName\n min "]
312303[label="methodDeclaration\n publicstaticLongcomputeAverageDistance(Long[]arrayA,Long[]arrayB){LongtotalA=0L;LongtotalB=0L;for(Longa:arrayA)totalA+=a;for(Longb:arrayB)totalB+=b;returnMath.abs(totalA/arrayA.length-totalB/arrayB.length);} "]
412304[label="methodModifier\n public "]
412305[label="methodModifier\n static "]
412306[label="methodHeader\n LongcomputeAverageDistance(Long[]arrayA,Long[]arrayB) "]
512307[label="unannClassType_lfno_unannClassOrInterfaceType\n Long "]
512308[label="methodDeclarator\n computeAverageDistance(Long[]arrayA,Long[]arrayB) "]
612309[label="formalParameterList\n Long[]arrayA,Long[]arrayB "]
712310[label="formalParameter\n Long[]arrayA "]
812311[label="unannArrayType\n Long[] "]
912312[label="unannClassType_lfno_unannClassOrInterfaceType\n Long "]
912313[label="dims\n [] "]
812314[label="variableDeclaratorId\n arrayA "]
712315[label="formalParameter\n Long[]arrayB "]
812316[label="unannArrayType\n Long[] "]
912317[label="unannClassType_lfno_unannClassOrInterfaceType\n Long "]
912318[label="dims\n [] "]
812319[label="variableDeclaratorId\n arrayB "]
412320[label="block\n {LongtotalA=0L;LongtotalB=0L;for(Longa:arrayA)totalA+=a;for(Longb:arrayB)totalB+=b;returnMath.abs(totalA/arrayA.length-totalB/arrayB.length);} "]
512321[label="blockStatements\n LongtotalA=0L;LongtotalB=0L;for(Longa:arrayA)totalA+=a;for(Longb:arrayB)totalB+=b;returnMath.abs(totalA/arrayA.length-totalB/arrayB.length); "]
612322[label="localVariableDeclarationStatement\n LongtotalA=0L; "]
712323[label="localVariableDeclaration\n LongtotalA=0L "]
812324[label="unannClassType_lfno_unannClassOrInterfaceType\n Long "]
812325[label="variableDeclarator\n totalA=0L "]
912326[label="variableDeclaratorId\n totalA "]
912327[label="literal\n 0L "]
612328[label="localVariableDeclarationStatement\n LongtotalB=0L; "]
712329[label="localVariableDeclaration\n LongtotalB=0L "]
812330[label="unannClassType_lfno_unannClassOrInterfaceType\n Long "]
812331[label="variableDeclarator\n totalB=0L "]
912332[label="variableDeclaratorId\n totalB "]
912333[label="literal\n 0L "]
612334[label="enhancedForStatement\n for(Longa:arrayA)totalA+=a; "]
712335[label="unannClassType_lfno_unannClassOrInterfaceType\n Long "]
712336[label="variableDeclaratorId\n a "]
712337[label="expressionName\n arrayA "]
712338[label="expressionStatement\n totalA+=a; "]
812339[label="assignment\n totalA+=a "]
912340[label="expressionName\n totalA "]
912341[label="assignmentOperator\n += "]
912342[label="expressionName\n a "]
612343[label="enhancedForStatement\n for(Longb:arrayB)totalB+=b; "]
712344[label="unannClassType_lfno_unannClassOrInterfaceType\n Long "]
712345[label="variableDeclaratorId\n b "]
712346[label="expressionName\n arrayB "]
712347[label="expressionStatement\n totalB+=b; "]
812348[label="assignment\n totalB+=b "]
912349[label="expressionName\n totalB "]
912350[label="assignmentOperator\n += "]
912351[label="expressionName\n b "]
612352[label="returnStatement\n returnMath.abs(totalA/arrayA.length-totalB/arrayB.length); "]
712353[label="methodInvocation_lfno_primary\n Math.abs(totalA/arrayA.length-totalB/arrayB.length) "]
812354[label="typeName\n Math "]
812355[label="additiveExpression\n totalA/arrayA.length-totalB/arrayB.length "]
912356[label="multiplicativeExpression\n totalA/arrayA.length "]
1012357[label="expressionName\n totalA "]
1012358[label="expressionName\n arrayA.length "]
1112359[label="ambiguousName\n arrayA "]
912360[label="multiplicativeExpression\n totalB/arrayB.length "]
1012361[label="expressionName\n totalB "]
1012362[label="expressionName\n arrayB.length "]
1112363[label="ambiguousName\n arrayB "]
012364[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.bintrie.util;importcom.hankcs.hanlp.collection.trie.bintrie.BaseNode;publicclassArrayTool{publicstaticintbinarySearch(BaseNode[]branches,BaseNodenode){inthigh=branches.length-1;if(branches.length<1){returnhigh;}intlow=0;while(low<=high){intmid=(low+high)>>>1;intcmp=branches[mid].compareTo(node);if(cmp<0)low=mid+1;elseif(cmp>0)high=mid-1;elsereturnmid;}return-(low+1);}publicstaticintbinarySearch(BaseNode[]branches,charnode){inthigh=branches.length-1;if(branches.length<1){returnhigh;}intlow=0;while(low<=high){intmid=(low+high)>>>1;intcmp=branches[mid].compareTo(node);if(cmp<0)low=mid+1;elseif(cmp>0)high=mid-1;elsereturnmid;}return-(low+1);}}<EOF> "]
112365[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.bintrie.util; "]
212366[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie.util "]
312367[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie "]
412368[label="packageName\n com.hankcs.hanlp.collection.trie "]
512369[label="packageName\n com.hankcs.hanlp.collection "]
612370[label="packageName\n com.hankcs.hanlp "]
712371[label="packageName\n com.hankcs "]
812372[label="packageName\n com "]
112373[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.bintrie.BaseNode; "]
212374[label="typeName\n com.hankcs.hanlp.collection.trie.bintrie.BaseNode "]
312375[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie.bintrie "]
412376[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
512377[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
612378[label="packageOrTypeName\n com.hankcs.hanlp "]
712379[label="packageOrTypeName\n com.hankcs "]
812380[label="packageOrTypeName\n com "]
112381[label="normalClassDeclaration\n publicclassArrayTool{publicstaticintbinarySearch(BaseNode[]branches,BaseNodenode){inthigh=branches.length-1;if(branches.length<1){returnhigh;}intlow=0;while(low<=high){intmid=(low+high)>>>1;intcmp=branches[mid].compareTo(node);if(cmp<0)low=mid+1;elseif(cmp>0)high=mid-1;elsereturnmid;}return-(low+1);}publicstaticintbinarySearch(BaseNode[]branches,charnode){inthigh=branches.length-1;if(branches.length<1){returnhigh;}intlow=0;while(low<=high){intmid=(low+high)>>>1;intcmp=branches[mid].compareTo(node);if(cmp<0)low=mid+1;elseif(cmp>0)high=mid-1;elsereturnmid;}return-(low+1);}} "]
212382[label="classModifier\n public "]
212383[label="classBody\n {publicstaticintbinarySearch(BaseNode[]branches,BaseNodenode){inthigh=branches.length-1;if(branches.length<1){returnhigh;}intlow=0;while(low<=high){intmid=(low+high)>>>1;intcmp=branches[mid].compareTo(node);if(cmp<0)low=mid+1;elseif(cmp>0)high=mid-1;elsereturnmid;}return-(low+1);}publicstaticintbinarySearch(BaseNode[]branches,charnode){inthigh=branches.length-1;if(branches.length<1){returnhigh;}intlow=0;while(low<=high){intmid=(low+high)>>>1;intcmp=branches[mid].compareTo(node);if(cmp<0)low=mid+1;elseif(cmp>0)high=mid-1;elsereturnmid;}return-(low+1);}} "]
312384[label="methodDeclaration\n publicstaticintbinarySearch(BaseNode[]branches,BaseNodenode){inthigh=branches.length-1;if(branches.length<1){returnhigh;}intlow=0;while(low<=high){intmid=(low+high)>>>1;intcmp=branches[mid].compareTo(node);if(cmp<0)low=mid+1;elseif(cmp>0)high=mid-1;elsereturnmid;}return-(low+1);} "]
412385[label="methodModifier\n public "]
412386[label="methodModifier\n static "]
412387[label="methodHeader\n intbinarySearch(BaseNode[]branches,BaseNodenode) "]
512388[label="integralType\n int "]
512389[label="methodDeclarator\n binarySearch(BaseNode[]branches,BaseNodenode) "]
612390[label="formalParameterList\n BaseNode[]branches,BaseNodenode "]
712391[label="formalParameter\n BaseNode[]branches "]
812392[label="unannArrayType\n BaseNode[] "]
912393[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
912394[label="dims\n [] "]
812395[label="variableDeclaratorId\n branches "]
712396[label="formalParameter\n BaseNodenode "]
812397[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
812398[label="variableDeclaratorId\n node "]
412399[label="block\n {inthigh=branches.length-1;if(branches.length<1){returnhigh;}intlow=0;while(low<=high){intmid=(low+high)>>>1;intcmp=branches[mid].compareTo(node);if(cmp<0)low=mid+1;elseif(cmp>0)high=mid-1;elsereturnmid;}return-(low+1);} "]
512400[label="blockStatements\n inthigh=branches.length-1;if(branches.length<1){returnhigh;}intlow=0;while(low<=high){intmid=(low+high)>>>1;intcmp=branches[mid].compareTo(node);if(cmp<0)low=mid+1;elseif(cmp>0)high=mid-1;elsereturnmid;}return-(low+1); "]
612401[label="localVariableDeclarationStatement\n inthigh=branches.length-1; "]
712402[label="localVariableDeclaration\n inthigh=branches.length-1 "]
812403[label="integralType\n int "]
812404[label="variableDeclarator\n high=branches.length-1 "]
912405[label="variableDeclaratorId\n high "]
912406[label="additiveExpression\n branches.length-1 "]
1012407[label="expressionName\n branches.length "]
1112408[label="ambiguousName\n branches "]
1012409[label="literal\n 1 "]
612410[label="ifThenStatement\n if(branches.length<1){returnhigh;} "]
712411[label="relationalExpression\n branches.length<1 "]
812412[label="expressionName\n branches.length "]
912413[label="ambiguousName\n branches "]
812414[label="literal\n 1 "]
712415[label="block\n {returnhigh;} "]
812416[label="returnStatement\n returnhigh; "]
912417[label="expressionName\n high "]
612418[label="localVariableDeclarationStatement\n intlow=0; "]
712419[label="localVariableDeclaration\n intlow=0 "]
812420[label="integralType\n int "]
812421[label="variableDeclarator\n low=0 "]
912422[label="variableDeclaratorId\n low "]
912423[label="literal\n 0 "]
612424[label="whileStatement\n while(low<=high){intmid=(low+high)>>>1;intcmp=branches[mid].compareTo(node);if(cmp<0)low=mid+1;elseif(cmp>0)high=mid-1;elsereturnmid;} "]
712425[label="relationalExpression\n low<=high "]
812426[label="expressionName\n low "]
812427[label="expressionName\n high "]
712428[label="block\n {intmid=(low+high)>>>1;intcmp=branches[mid].compareTo(node);if(cmp<0)low=mid+1;elseif(cmp>0)high=mid-1;elsereturnmid;} "]
812429[label="blockStatements\n intmid=(low+high)>>>1;intcmp=branches[mid].compareTo(node);if(cmp<0)low=mid+1;elseif(cmp>0)high=mid-1;elsereturnmid; "]
912430[label="localVariableDeclarationStatement\n intmid=(low+high)>>>1; "]
1012431[label="localVariableDeclaration\n intmid=(low+high)>>>1 "]
1112432[label="integralType\n int "]
1112433[label="variableDeclarator\n mid=(low+high)>>>1 "]
1212434[label="variableDeclaratorId\n mid "]
1212435[label="shiftExpression\n (low+high)>>>1 "]
1312436[label="primaryNoNewArray_lfno_primary\n (low+high) "]
1412437[label="additiveExpression\n low+high "]
1512438[label="expressionName\n low "]
1512439[label="expressionName\n high "]
1312440[label="literal\n 1 "]
912441[label="localVariableDeclarationStatement\n intcmp=branches[mid].compareTo(node); "]
1012442[label="localVariableDeclaration\n intcmp=branches[mid].compareTo(node) "]
1112443[label="integralType\n int "]
1112444[label="variableDeclarator\n cmp=branches[mid].compareTo(node) "]
1212445[label="variableDeclaratorId\n cmp "]
1212446[label="primary\n branches[mid].compareTo(node) "]
1312447[label="arrayAccess_lfno_primary\n branches[mid] "]
1412448[label="expressionName\n branches "]
1412449[label="expressionName\n mid "]
1312450[label="methodInvocation_lf_primary\n .compareTo(node) "]
1412451[label="expressionName\n node "]
912452[label="ifThenElseStatement\n if(cmp<0)low=mid+1;elseif(cmp>0)high=mid-1;elsereturnmid; "]
1012453[label="relationalExpression\n cmp<0 "]
1112454[label="expressionName\n cmp "]
1112455[label="literal\n 0 "]
1012456[label="expressionStatement\n low=mid+1; "]
1112457[label="assignment\n low=mid+1 "]
1212458[label="expressionName\n low "]
1212459[label="assignmentOperator\n = "]
1212460[label="additiveExpression\n mid+1 "]
1312461[label="expressionName\n mid "]
1312462[label="literal\n 1 "]
1012463[label="ifThenElseStatement\n if(cmp>0)high=mid-1;elsereturnmid; "]
1112464[label="relationalExpression\n cmp>0 "]
1212465[label="expressionName\n cmp "]
1212466[label="literal\n 0 "]
1112467[label="expressionStatement\n high=mid-1; "]
1212468[label="assignment\n high=mid-1 "]
1312469[label="expressionName\n high "]
1312470[label="assignmentOperator\n = "]
1312471[label="additiveExpression\n mid-1 "]
1412472[label="expressionName\n mid "]
1412473[label="literal\n 1 "]
1112474[label="returnStatement\n returnmid; "]
1212475[label="expressionName\n mid "]
612476[label="returnStatement\n return-(low+1); "]
712477[label="unaryExpression\n -(low+1) "]
812478[label="primaryNoNewArray_lfno_primary\n (low+1) "]
912479[label="additiveExpression\n low+1 "]
1012480[label="expressionName\n low "]
1012481[label="literal\n 1 "]
312482[label="methodDeclaration\n publicstaticintbinarySearch(BaseNode[]branches,charnode){inthigh=branches.length-1;if(branches.length<1){returnhigh;}intlow=0;while(low<=high){intmid=(low+high)>>>1;intcmp=branches[mid].compareTo(node);if(cmp<0)low=mid+1;elseif(cmp>0)high=mid-1;elsereturnmid;}return-(low+1);} "]
412483[label="methodModifier\n public "]
412484[label="methodModifier\n static "]
412485[label="methodHeader\n intbinarySearch(BaseNode[]branches,charnode) "]
512486[label="integralType\n int "]
512487[label="methodDeclarator\n binarySearch(BaseNode[]branches,charnode) "]
612488[label="formalParameterList\n BaseNode[]branches,charnode "]
712489[label="formalParameter\n BaseNode[]branches "]
812490[label="unannArrayType\n BaseNode[] "]
912491[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
912492[label="dims\n [] "]
812493[label="variableDeclaratorId\n branches "]
712494[label="formalParameter\n charnode "]
812495[label="integralType\n char "]
812496[label="variableDeclaratorId\n node "]
412497[label="block\n {inthigh=branches.length-1;if(branches.length<1){returnhigh;}intlow=0;while(low<=high){intmid=(low+high)>>>1;intcmp=branches[mid].compareTo(node);if(cmp<0)low=mid+1;elseif(cmp>0)high=mid-1;elsereturnmid;}return-(low+1);} "]
512498[label="blockStatements\n inthigh=branches.length-1;if(branches.length<1){returnhigh;}intlow=0;while(low<=high){intmid=(low+high)>>>1;intcmp=branches[mid].compareTo(node);if(cmp<0)low=mid+1;elseif(cmp>0)high=mid-1;elsereturnmid;}return-(low+1); "]
612499[label="localVariableDeclarationStatement\n inthigh=branches.length-1; "]
712500[label="localVariableDeclaration\n inthigh=branches.length-1 "]
812501[label="integralType\n int "]
812502[label="variableDeclarator\n high=branches.length-1 "]
912503[label="variableDeclaratorId\n high "]
912504[label="additiveExpression\n branches.length-1 "]
1012505[label="expressionName\n branches.length "]
1112506[label="ambiguousName\n branches "]
1012507[label="literal\n 1 "]
612508[label="ifThenStatement\n if(branches.length<1){returnhigh;} "]
712509[label="relationalExpression\n branches.length<1 "]
812510[label="expressionName\n branches.length "]
912511[label="ambiguousName\n branches "]
812512[label="literal\n 1 "]
712513[label="block\n {returnhigh;} "]
812514[label="returnStatement\n returnhigh; "]
912515[label="expressionName\n high "]
612516[label="localVariableDeclarationStatement\n intlow=0; "]
712517[label="localVariableDeclaration\n intlow=0 "]
812518[label="integralType\n int "]
812519[label="variableDeclarator\n low=0 "]
912520[label="variableDeclaratorId\n low "]
912521[label="literal\n 0 "]
612522[label="whileStatement\n while(low<=high){intmid=(low+high)>>>1;intcmp=branches[mid].compareTo(node);if(cmp<0)low=mid+1;elseif(cmp>0)high=mid-1;elsereturnmid;} "]
712523[label="relationalExpression\n low<=high "]
812524[label="expressionName\n low "]
812525[label="expressionName\n high "]
712526[label="block\n {intmid=(low+high)>>>1;intcmp=branches[mid].compareTo(node);if(cmp<0)low=mid+1;elseif(cmp>0)high=mid-1;elsereturnmid;} "]
812527[label="blockStatements\n intmid=(low+high)>>>1;intcmp=branches[mid].compareTo(node);if(cmp<0)low=mid+1;elseif(cmp>0)high=mid-1;elsereturnmid; "]
912528[label="localVariableDeclarationStatement\n intmid=(low+high)>>>1; "]
1012529[label="localVariableDeclaration\n intmid=(low+high)>>>1 "]
1112530[label="integralType\n int "]
1112531[label="variableDeclarator\n mid=(low+high)>>>1 "]
1212532[label="variableDeclaratorId\n mid "]
1212533[label="shiftExpression\n (low+high)>>>1 "]
1312534[label="primaryNoNewArray_lfno_primary\n (low+high) "]
1412535[label="additiveExpression\n low+high "]
1512536[label="expressionName\n low "]
1512537[label="expressionName\n high "]
1312538[label="literal\n 1 "]
912539[label="localVariableDeclarationStatement\n intcmp=branches[mid].compareTo(node); "]
1012540[label="localVariableDeclaration\n intcmp=branches[mid].compareTo(node) "]
1112541[label="integralType\n int "]
1112542[label="variableDeclarator\n cmp=branches[mid].compareTo(node) "]
1212543[label="variableDeclaratorId\n cmp "]
1212544[label="primary\n branches[mid].compareTo(node) "]
1312545[label="arrayAccess_lfno_primary\n branches[mid] "]
1412546[label="expressionName\n branches "]
1412547[label="expressionName\n mid "]
1312548[label="methodInvocation_lf_primary\n .compareTo(node) "]
1412549[label="expressionName\n node "]
912550[label="ifThenElseStatement\n if(cmp<0)low=mid+1;elseif(cmp>0)high=mid-1;elsereturnmid; "]
1012551[label="relationalExpression\n cmp<0 "]
1112552[label="expressionName\n cmp "]
1112553[label="literal\n 0 "]
1012554[label="expressionStatement\n low=mid+1; "]
1112555[label="assignment\n low=mid+1 "]
1212556[label="expressionName\n low "]
1212557[label="assignmentOperator\n = "]
1212558[label="additiveExpression\n mid+1 "]
1312559[label="expressionName\n mid "]
1312560[label="literal\n 1 "]
1012561[label="ifThenElseStatement\n if(cmp>0)high=mid-1;elsereturnmid; "]
1112562[label="relationalExpression\n cmp>0 "]
1212563[label="expressionName\n cmp "]
1212564[label="literal\n 0 "]
1112565[label="expressionStatement\n high=mid-1; "]
1212566[label="assignment\n high=mid-1 "]
1312567[label="expressionName\n high "]
1312568[label="assignmentOperator\n = "]
1312569[label="additiveExpression\n mid-1 "]
1412570[label="expressionName\n mid "]
1412571[label="literal\n 1 "]
1112572[label="returnStatement\n returnmid; "]
1212573[label="expressionName\n mid "]
612574[label="returnStatement\n return-(low+1); "]
712575[label="unaryExpression\n -(low+1) "]
812576[label="primaryNoNewArray_lfno_primary\n (low+1) "]
912577[label="additiveExpression\n low+1 "]
1012578[label="expressionName\n low "]
1012579[label="literal\n 1 "]
012580[label="compilationUnit\n packagecom.hankcs.hanlp.seg.NShort.Path;importcom.hankcs.hanlp.corpus.tag.Nature;importcom.hankcs.hanlp.dictionary.other.CharType;importcom.hankcs.hanlp.dictionary.CoreDictionary;importcom.hankcs.hanlp.seg.common.Vertex;importcom.hankcs.hanlp.utility.Predefine;publicclassAtomNode{publicStringsWord;publicintnPOS;publicAtomNode(StringsWord,intnPOS){this.sWord=sWord;this.nPOS=nPOS;}publicAtomNode(charc,intnPOS){this.sWord=String.valueOf(c);this.nPOS=nPOS;}publicNaturegetNature(){Naturenature=Nature.nz;switch(nPOS){caseCharType.CT_CHINESE:break;caseCharType.CT_NUM:caseCharType.CT_INDEX:caseCharType.CT_CNUM:nature=Nature.m;sWord=Predefine.TAG_NUMBER;break;caseCharType.CT_DELIMITER:nature=Nature.w;break;caseCharType.CT_LETTER:nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;break;caseCharType.CT_SINGLE:if(Predefine.PATTERN_FLOAT_NUMBER.matcher(sWord).matches()){nature=Nature.m;sWord=Predefine.TAG_NUMBER;}else{nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;}break;default:break;}returnnature;}@OverridepublicStringtoString(){return\"AtomNode{\"+\"word='\"+sWord+'\''+\", nature=\"+nPOS+'}';}publicstaticVertexconvert(Stringword,inttype){Stringname=word;Naturenature=Nature.n;intdValue=1;switch(type){caseCharType.CT_CHINESE:break;caseCharType.CT_NUM:caseCharType.CT_INDEX:caseCharType.CT_CNUM:nature=Nature.m;word=Predefine.TAG_NUMBER;break;caseCharType.CT_DELIMITER:nature=Nature.w;break;caseCharType.CT_LETTER:nature=Nature.nx;word=Predefine.TAG_CLUSTER;break;caseCharType.CT_SINGLE:nature=Nature.nx;word=Predefine.TAG_CLUSTER;break;default:break;}returnnewVertex(word,name,newCoreDictionary.Attribute(nature,dValue));}}<EOF> "]
112581[label="packageDeclaration\n packagecom.hankcs.hanlp.seg.NShort.Path; "]
212582[label="packageName\n com.hankcs.hanlp.seg.NShort.Path "]
312583[label="packageName\n com.hankcs.hanlp.seg.NShort "]
412584[label="packageName\n com.hankcs.hanlp.seg "]
512585[label="packageName\n com.hankcs.hanlp "]
612586[label="packageName\n com.hankcs "]
712587[label="packageName\n com "]
112588[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.tag.Nature; "]
212589[label="typeName\n com.hankcs.hanlp.corpus.tag.Nature "]
312590[label="packageOrTypeName\n com.hankcs.hanlp.corpus.tag "]
412591[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
512592[label="packageOrTypeName\n com.hankcs.hanlp "]
612593[label="packageOrTypeName\n com.hankcs "]
712594[label="packageOrTypeName\n com "]
112595[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dictionary.other.CharType; "]
212596[label="typeName\n com.hankcs.hanlp.dictionary.other.CharType "]
312597[label="packageOrTypeName\n com.hankcs.hanlp.dictionary.other "]
412598[label="packageOrTypeName\n com.hankcs.hanlp.dictionary "]
512599[label="packageOrTypeName\n com.hankcs.hanlp "]
612600[label="packageOrTypeName\n com.hankcs "]
712601[label="packageOrTypeName\n com "]
112602[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dictionary.CoreDictionary; "]
212603[label="typeName\n com.hankcs.hanlp.dictionary.CoreDictionary "]
312604[label="packageOrTypeName\n com.hankcs.hanlp.dictionary "]
412605[label="packageOrTypeName\n com.hankcs.hanlp "]
512606[label="packageOrTypeName\n com.hankcs "]
612607[label="packageOrTypeName\n com "]
112608[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.common.Vertex; "]
212609[label="typeName\n com.hankcs.hanlp.seg.common.Vertex "]
312610[label="packageOrTypeName\n com.hankcs.hanlp.seg.common "]
412611[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
512612[label="packageOrTypeName\n com.hankcs.hanlp "]
612613[label="packageOrTypeName\n com.hankcs "]
712614[label="packageOrTypeName\n com "]
112615[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.Predefine; "]
212616[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
312617[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
412618[label="packageOrTypeName\n com.hankcs.hanlp "]
512619[label="packageOrTypeName\n com.hankcs "]
612620[label="packageOrTypeName\n com "]
112621[label="normalClassDeclaration\n publicclassAtomNode{publicStringsWord;publicintnPOS;publicAtomNode(StringsWord,intnPOS){this.sWord=sWord;this.nPOS=nPOS;}publicAtomNode(charc,intnPOS){this.sWord=String.valueOf(c);this.nPOS=nPOS;}publicNaturegetNature(){Naturenature=Nature.nz;switch(nPOS){caseCharType.CT_CHINESE:break;caseCharType.CT_NUM:caseCharType.CT_INDEX:caseCharType.CT_CNUM:nature=Nature.m;sWord=Predefine.TAG_NUMBER;break;caseCharType.CT_DELIMITER:nature=Nature.w;break;caseCharType.CT_LETTER:nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;break;caseCharType.CT_SINGLE:if(Predefine.PATTERN_FLOAT_NUMBER.matcher(sWord).matches()){nature=Nature.m;sWord=Predefine.TAG_NUMBER;}else{nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;}break;default:break;}returnnature;}@OverridepublicStringtoString(){return\"AtomNode{\"+\"word='\"+sWord+'\''+\", nature=\"+nPOS+'}';}publicstaticVertexconvert(Stringword,inttype){Stringname=word;Naturenature=Nature.n;intdValue=1;switch(type){caseCharType.CT_CHINESE:break;caseCharType.CT_NUM:caseCharType.CT_INDEX:caseCharType.CT_CNUM:nature=Nature.m;word=Predefine.TAG_NUMBER;break;caseCharType.CT_DELIMITER:nature=Nature.w;break;caseCharType.CT_LETTER:nature=Nature.nx;word=Predefine.TAG_CLUSTER;break;caseCharType.CT_SINGLE:nature=Nature.nx;word=Predefine.TAG_CLUSTER;break;default:break;}returnnewVertex(word,name,newCoreDictionary.Attribute(nature,dValue));}} "]
212622[label="classModifier\n public "]
212623[label="classBody\n {publicStringsWord;publicintnPOS;publicAtomNode(StringsWord,intnPOS){this.sWord=sWord;this.nPOS=nPOS;}publicAtomNode(charc,intnPOS){this.sWord=String.valueOf(c);this.nPOS=nPOS;}publicNaturegetNature(){Naturenature=Nature.nz;switch(nPOS){caseCharType.CT_CHINESE:break;caseCharType.CT_NUM:caseCharType.CT_INDEX:caseCharType.CT_CNUM:nature=Nature.m;sWord=Predefine.TAG_NUMBER;break;caseCharType.CT_DELIMITER:nature=Nature.w;break;caseCharType.CT_LETTER:nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;break;caseCharType.CT_SINGLE:if(Predefine.PATTERN_FLOAT_NUMBER.matcher(sWord).matches()){nature=Nature.m;sWord=Predefine.TAG_NUMBER;}else{nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;}break;default:break;}returnnature;}@OverridepublicStringtoString(){return\"AtomNode{\"+\"word='\"+sWord+'\''+\", nature=\"+nPOS+'}';}publicstaticVertexconvert(Stringword,inttype){Stringname=word;Naturenature=Nature.n;intdValue=1;switch(type){caseCharType.CT_CHINESE:break;caseCharType.CT_NUM:caseCharType.CT_INDEX:caseCharType.CT_CNUM:nature=Nature.m;word=Predefine.TAG_NUMBER;break;caseCharType.CT_DELIMITER:nature=Nature.w;break;caseCharType.CT_LETTER:nature=Nature.nx;word=Predefine.TAG_CLUSTER;break;caseCharType.CT_SINGLE:nature=Nature.nx;word=Predefine.TAG_CLUSTER;break;default:break;}returnnewVertex(word,name,newCoreDictionary.Attribute(nature,dValue));}} "]
312624[label="fieldDeclaration\n publicStringsWord; "]
412625[label="fieldModifier\n public "]
412626[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
412627[label="variableDeclaratorId\n sWord "]
312628[label="fieldDeclaration\n publicintnPOS; "]
412629[label="fieldModifier\n public "]
412630[label="integralType\n int "]
412631[label="variableDeclaratorId\n nPOS "]
312632[label="constructorDeclaration\n publicAtomNode(StringsWord,intnPOS){this.sWord=sWord;this.nPOS=nPOS;} "]
412633[label="constructorModifier\n public "]
412634[label="constructorDeclarator\n AtomNode(StringsWord,intnPOS) "]
512635[label="simpleTypeName\n AtomNode "]
512636[label="formalParameterList\n StringsWord,intnPOS "]
612637[label="formalParameter\n StringsWord "]
712638[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
712639[label="variableDeclaratorId\n sWord "]
612640[label="formalParameter\n intnPOS "]
712641[label="integralType\n int "]
712642[label="variableDeclaratorId\n nPOS "]
412643[label="constructorBody\n {this.sWord=sWord;this.nPOS=nPOS;} "]
512644[label="blockStatements\n this.sWord=sWord;this.nPOS=nPOS; "]
612645[label="expressionStatement\n this.sWord=sWord; "]
712646[label="assignment\n this.sWord=sWord "]
812647[label="fieldAccess\n this.sWord "]
912648[label="primaryNoNewArray_lfno_primary\n this "]
812649[label="assignmentOperator\n = "]
812650[label="expressionName\n sWord "]
612651[label="expressionStatement\n this.nPOS=nPOS; "]
712652[label="assignment\n this.nPOS=nPOS "]
812653[label="fieldAccess\n this.nPOS "]
912654[label="primaryNoNewArray_lfno_primary\n this "]
812655[label="assignmentOperator\n = "]
812656[label="expressionName\n nPOS "]
312657[label="constructorDeclaration\n publicAtomNode(charc,intnPOS){this.sWord=String.valueOf(c);this.nPOS=nPOS;} "]
412658[label="constructorModifier\n public "]
412659[label="constructorDeclarator\n AtomNode(charc,intnPOS) "]
512660[label="simpleTypeName\n AtomNode "]
512661[label="formalParameterList\n charc,intnPOS "]
612662[label="formalParameter\n charc "]
712663[label="integralType\n char "]
712664[label="variableDeclaratorId\n c "]
612665[label="formalParameter\n intnPOS "]
712666[label="integralType\n int "]
712667[label="variableDeclaratorId\n nPOS "]
412668[label="constructorBody\n {this.sWord=String.valueOf(c);this.nPOS=nPOS;} "]
512669[label="blockStatements\n this.sWord=String.valueOf(c);this.nPOS=nPOS; "]
612670[label="expressionStatement\n this.sWord=String.valueOf(c); "]
712671[label="assignment\n this.sWord=String.valueOf(c) "]
812672[label="fieldAccess\n this.sWord "]
912673[label="primaryNoNewArray_lfno_primary\n this "]
812674[label="assignmentOperator\n = "]
812675[label="methodInvocation_lfno_primary\n String.valueOf(c) "]
912676[label="typeName\n String "]
912677[label="expressionName\n c "]
612678[label="expressionStatement\n this.nPOS=nPOS; "]
712679[label="assignment\n this.nPOS=nPOS "]
812680[label="fieldAccess\n this.nPOS "]
912681[label="primaryNoNewArray_lfno_primary\n this "]
812682[label="assignmentOperator\n = "]
812683[label="expressionName\n nPOS "]
312684[label="methodDeclaration\n publicNaturegetNature(){Naturenature=Nature.nz;switch(nPOS){caseCharType.CT_CHINESE:break;caseCharType.CT_NUM:caseCharType.CT_INDEX:caseCharType.CT_CNUM:nature=Nature.m;sWord=Predefine.TAG_NUMBER;break;caseCharType.CT_DELIMITER:nature=Nature.w;break;caseCharType.CT_LETTER:nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;break;caseCharType.CT_SINGLE:if(Predefine.PATTERN_FLOAT_NUMBER.matcher(sWord).matches()){nature=Nature.m;sWord=Predefine.TAG_NUMBER;}else{nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;}break;default:break;}returnnature;} "]
412685[label="methodModifier\n public "]
412686[label="methodHeader\n NaturegetNature() "]
512687[label="unannClassType_lfno_unannClassOrInterfaceType\n Nature "]
512688[label="methodDeclarator\n getNature() "]
412689[label="block\n {Naturenature=Nature.nz;switch(nPOS){caseCharType.CT_CHINESE:break;caseCharType.CT_NUM:caseCharType.CT_INDEX:caseCharType.CT_CNUM:nature=Nature.m;sWord=Predefine.TAG_NUMBER;break;caseCharType.CT_DELIMITER:nature=Nature.w;break;caseCharType.CT_LETTER:nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;break;caseCharType.CT_SINGLE:if(Predefine.PATTERN_FLOAT_NUMBER.matcher(sWord).matches()){nature=Nature.m;sWord=Predefine.TAG_NUMBER;}else{nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;}break;default:break;}returnnature;} "]
512690[label="blockStatements\n Naturenature=Nature.nz;switch(nPOS){caseCharType.CT_CHINESE:break;caseCharType.CT_NUM:caseCharType.CT_INDEX:caseCharType.CT_CNUM:nature=Nature.m;sWord=Predefine.TAG_NUMBER;break;caseCharType.CT_DELIMITER:nature=Nature.w;break;caseCharType.CT_LETTER:nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;break;caseCharType.CT_SINGLE:if(Predefine.PATTERN_FLOAT_NUMBER.matcher(sWord).matches()){nature=Nature.m;sWord=Predefine.TAG_NUMBER;}else{nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;}break;default:break;}returnnature; "]
612691[label="localVariableDeclarationStatement\n Naturenature=Nature.nz; "]
712692[label="localVariableDeclaration\n Naturenature=Nature.nz "]
812693[label="unannClassType_lfno_unannClassOrInterfaceType\n Nature "]
812694[label="variableDeclarator\n nature=Nature.nz "]
912695[label="variableDeclaratorId\n nature "]
912696[label="expressionName\n Nature.nz "]
1012697[label="ambiguousName\n Nature "]
612698[label="switchStatement\n switch(nPOS){caseCharType.CT_CHINESE:break;caseCharType.CT_NUM:caseCharType.CT_INDEX:caseCharType.CT_CNUM:nature=Nature.m;sWord=Predefine.TAG_NUMBER;break;caseCharType.CT_DELIMITER:nature=Nature.w;break;caseCharType.CT_LETTER:nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;break;caseCharType.CT_SINGLE:if(Predefine.PATTERN_FLOAT_NUMBER.matcher(sWord).matches()){nature=Nature.m;sWord=Predefine.TAG_NUMBER;}else{nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;}break;default:break;} "]
712699[label="expressionName\n nPOS "]
712700[label="switchBlock\n {caseCharType.CT_CHINESE:break;caseCharType.CT_NUM:caseCharType.CT_INDEX:caseCharType.CT_CNUM:nature=Nature.m;sWord=Predefine.TAG_NUMBER;break;caseCharType.CT_DELIMITER:nature=Nature.w;break;caseCharType.CT_LETTER:nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;break;caseCharType.CT_SINGLE:if(Predefine.PATTERN_FLOAT_NUMBER.matcher(sWord).matches()){nature=Nature.m;sWord=Predefine.TAG_NUMBER;}else{nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;}break;default:break;} "]
812701[label="switchBlockStatementGroup\n caseCharType.CT_CHINESE:break; "]
912702[label="switchLabel\n caseCharType.CT_CHINESE: "]
1012703[label="expressionName\n CharType.CT_CHINESE "]
1112704[label="ambiguousName\n CharType "]
912705[label="breakStatement\n break; "]
812706[label="switchBlockStatementGroup\n caseCharType.CT_NUM:caseCharType.CT_INDEX:caseCharType.CT_CNUM:nature=Nature.m;sWord=Predefine.TAG_NUMBER;break; "]
912707[label="switchLabels\n caseCharType.CT_NUM:caseCharType.CT_INDEX:caseCharType.CT_CNUM: "]
1012708[label="switchLabel\n caseCharType.CT_NUM: "]
1112709[label="expressionName\n CharType.CT_NUM "]
1212710[label="ambiguousName\n CharType "]
1012711[label="switchLabel\n caseCharType.CT_INDEX: "]
1112712[label="expressionName\n CharType.CT_INDEX "]
1212713[label="ambiguousName\n CharType "]
1012714[label="switchLabel\n caseCharType.CT_CNUM: "]
1112715[label="expressionName\n CharType.CT_CNUM "]
1212716[label="ambiguousName\n CharType "]
912717[label="blockStatements\n nature=Nature.m;sWord=Predefine.TAG_NUMBER;break; "]
1012718[label="expressionStatement\n nature=Nature.m; "]
1112719[label="assignment\n nature=Nature.m "]
1212720[label="expressionName\n nature "]
1212721[label="assignmentOperator\n = "]
1212722[label="expressionName\n Nature.m "]
1312723[label="ambiguousName\n Nature "]
1012724[label="expressionStatement\n sWord=Predefine.TAG_NUMBER; "]
1112725[label="assignment\n sWord=Predefine.TAG_NUMBER "]
1212726[label="expressionName\n sWord "]
1212727[label="assignmentOperator\n = "]
1212728[label="expressionName\n Predefine.TAG_NUMBER "]
1312729[label="ambiguousName\n Predefine "]
1012730[label="breakStatement\n break; "]
812731[label="switchBlockStatementGroup\n caseCharType.CT_DELIMITER:nature=Nature.w;break; "]
912732[label="switchLabel\n caseCharType.CT_DELIMITER: "]
1012733[label="expressionName\n CharType.CT_DELIMITER "]
1112734[label="ambiguousName\n CharType "]
912735[label="blockStatements\n nature=Nature.w;break; "]
1012736[label="expressionStatement\n nature=Nature.w; "]
1112737[label="assignment\n nature=Nature.w "]
1212738[label="expressionName\n nature "]
1212739[label="assignmentOperator\n = "]
1212740[label="expressionName\n Nature.w "]
1312741[label="ambiguousName\n Nature "]
1012742[label="breakStatement\n break; "]
812743[label="switchBlockStatementGroup\n caseCharType.CT_LETTER:nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;break; "]
912744[label="switchLabel\n caseCharType.CT_LETTER: "]
1012745[label="expressionName\n CharType.CT_LETTER "]
1112746[label="ambiguousName\n CharType "]
912747[label="blockStatements\n nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;break; "]
1012748[label="expressionStatement\n nature=Nature.nx; "]
1112749[label="assignment\n nature=Nature.nx "]
1212750[label="expressionName\n nature "]
1212751[label="assignmentOperator\n = "]
1212752[label="expressionName\n Nature.nx "]
1312753[label="ambiguousName\n Nature "]
1012754[label="expressionStatement\n sWord=Predefine.TAG_CLUSTER; "]
1112755[label="assignment\n sWord=Predefine.TAG_CLUSTER "]
1212756[label="expressionName\n sWord "]
1212757[label="assignmentOperator\n = "]
1212758[label="expressionName\n Predefine.TAG_CLUSTER "]
1312759[label="ambiguousName\n Predefine "]
1012760[label="breakStatement\n break; "]
812761[label="switchBlockStatementGroup\n caseCharType.CT_SINGLE:if(Predefine.PATTERN_FLOAT_NUMBER.matcher(sWord).matches()){nature=Nature.m;sWord=Predefine.TAG_NUMBER;}else{nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;}break; "]
912762[label="switchLabel\n caseCharType.CT_SINGLE: "]
1012763[label="expressionName\n CharType.CT_SINGLE "]
1112764[label="ambiguousName\n CharType "]
912765[label="blockStatements\n if(Predefine.PATTERN_FLOAT_NUMBER.matcher(sWord).matches()){nature=Nature.m;sWord=Predefine.TAG_NUMBER;}else{nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;}break; "]
1012766[label="ifThenElseStatement\n if(Predefine.PATTERN_FLOAT_NUMBER.matcher(sWord).matches()){nature=Nature.m;sWord=Predefine.TAG_NUMBER;}else{nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;} "]
1112767[label="primary\n Predefine.PATTERN_FLOAT_NUMBER.matcher(sWord).matches() "]
1212768[label="methodInvocation_lfno_primary\n Predefine.PATTERN_FLOAT_NUMBER.matcher(sWord) "]
1312769[label="typeName\n Predefine.PATTERN_FLOAT_NUMBER "]
1412770[label="packageOrTypeName\n Predefine "]
1312771[label="expressionName\n sWord "]
1212772[label="methodInvocation_lf_primary\n .matches() "]
1112773[label="block\n {nature=Nature.m;sWord=Predefine.TAG_NUMBER;} "]
1212774[label="blockStatements\n nature=Nature.m;sWord=Predefine.TAG_NUMBER; "]
1312775[label="expressionStatement\n nature=Nature.m; "]
1412776[label="assignment\n nature=Nature.m "]
1512777[label="expressionName\n nature "]
1512778[label="assignmentOperator\n = "]
1512779[label="expressionName\n Nature.m "]
1612780[label="ambiguousName\n Nature "]
1312781[label="expressionStatement\n sWord=Predefine.TAG_NUMBER; "]
1412782[label="assignment\n sWord=Predefine.TAG_NUMBER "]
1512783[label="expressionName\n sWord "]
1512784[label="assignmentOperator\n = "]
1512785[label="expressionName\n Predefine.TAG_NUMBER "]
1612786[label="ambiguousName\n Predefine "]
1112787[label="block\n {nature=Nature.nx;sWord=Predefine.TAG_CLUSTER;} "]
1212788[label="blockStatements\n nature=Nature.nx;sWord=Predefine.TAG_CLUSTER; "]
1312789[label="expressionStatement\n nature=Nature.nx; "]
1412790[label="assignment\n nature=Nature.nx "]
1512791[label="expressionName\n nature "]
1512792[label="assignmentOperator\n = "]
1512793[label="expressionName\n Nature.nx "]
1612794[label="ambiguousName\n Nature "]
1312795[label="expressionStatement\n sWord=Predefine.TAG_CLUSTER; "]
1412796[label="assignment\n sWord=Predefine.TAG_CLUSTER "]
1512797[label="expressionName\n sWord "]
1512798[label="assignmentOperator\n = "]
1512799[label="expressionName\n Predefine.TAG_CLUSTER "]
1612800[label="ambiguousName\n Predefine "]
1012801[label="breakStatement\n break; "]
812802[label="switchBlockStatementGroup\n default:break; "]
912803[label="switchLabel\n default: "]
912804[label="breakStatement\n break; "]
612805[label="returnStatement\n returnnature; "]
712806[label="expressionName\n nature "]
312807[label="methodDeclaration\n @OverridepublicStringtoString(){return\"AtomNode{\"+\"word='\"+sWord+'\''+\", nature=\"+nPOS+'}';} "]
412808[label="markerAnnotation\n @Override "]
512809[label="typeName\n Override "]
412810[label="methodModifier\n public "]
412811[label="methodHeader\n StringtoString() "]
512812[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
512813[label="methodDeclarator\n toString() "]
412814[label="block\n {return\"AtomNode{\"+\"word='\"+sWord+'\''+\", nature=\"+nPOS+'}';} "]
512815[label="returnStatement\n return\"AtomNode{\"+\"word='\"+sWord+'\''+\", nature=\"+nPOS+'}'; "]
612816[label="additiveExpression\n \"AtomNode{\"+\"word='\"+sWord+'\''+\", nature=\"+nPOS+'}' "]
712817[label="additiveExpression\n \"AtomNode{\"+\"word='\"+sWord+'\''+\", nature=\"+nPOS "]
812818[label="additiveExpression\n \"AtomNode{\"+\"word='\"+sWord+'\''+\", nature=\" "]
912819[label="additiveExpression\n \"AtomNode{\"+\"word='\"+sWord+'\'' "]
1012820[label="additiveExpression\n \"AtomNode{\"+\"word='\"+sWord "]
1112821[label="additiveExpression\n \"AtomNode{\"+\"word='\" "]
1212822[label="literal\n \"AtomNode{\" "]
1212823[label="literal\n \"word='\" "]
1112824[label="expressionName\n sWord "]
1012825[label="literal\n '\'' "]
912826[label="literal\n \", nature=\" "]
812827[label="expressionName\n nPOS "]
712828[label="literal\n '}' "]
312829[label="methodDeclaration\n publicstaticVertexconvert(Stringword,inttype){Stringname=word;Naturenature=Nature.n;intdValue=1;switch(type){caseCharType.CT_CHINESE:break;caseCharType.CT_NUM:caseCharType.CT_INDEX:caseCharType.CT_CNUM:nature=Nature.m;word=Predefine.TAG_NUMBER;break;caseCharType.CT_DELIMITER:nature=Nature.w;break;caseCharType.CT_LETTER:nature=Nature.nx;word=Predefine.TAG_CLUSTER;break;caseCharType.CT_SINGLE:nature=Nature.nx;word=Predefine.TAG_CLUSTER;break;default:break;}returnnewVertex(word,name,newCoreDictionary.Attribute(nature,dValue));} "]
412830[label="methodModifier\n public "]
412831[label="methodModifier\n static "]
412832[label="methodHeader\n Vertexconvert(Stringword,inttype) "]
512833[label="unannClassType_lfno_unannClassOrInterfaceType\n Vertex "]
512834[label="methodDeclarator\n convert(Stringword,inttype) "]
612835[label="formalParameterList\n Stringword,inttype "]
712836[label="formalParameter\n Stringword "]
812837[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
812838[label="variableDeclaratorId\n word "]
712839[label="formalParameter\n inttype "]
812840[label="integralType\n int "]
812841[label="variableDeclaratorId\n type "]
412842[label="block\n {Stringname=word;Naturenature=Nature.n;intdValue=1;switch(type){caseCharType.CT_CHINESE:break;caseCharType.CT_NUM:caseCharType.CT_INDEX:caseCharType.CT_CNUM:nature=Nature.m;word=Predefine.TAG_NUMBER;break;caseCharType.CT_DELIMITER:nature=Nature.w;break;caseCharType.CT_LETTER:nature=Nature.nx;word=Predefine.TAG_CLUSTER;break;caseCharType.CT_SINGLE:nature=Nature.nx;word=Predefine.TAG_CLUSTER;break;default:break;}returnnewVertex(word,name,newCoreDictionary.Attribute(nature,dValue));} "]
512843[label="blockStatements\n Stringname=word;Naturenature=Nature.n;intdValue=1;switch(type){caseCharType.CT_CHINESE:break;caseCharType.CT_NUM:caseCharType.CT_INDEX:caseCharType.CT_CNUM:nature=Nature.m;word=Predefine.TAG_NUMBER;break;caseCharType.CT_DELIMITER:nature=Nature.w;break;caseCharType.CT_LETTER:nature=Nature.nx;word=Predefine.TAG_CLUSTER;break;caseCharType.CT_SINGLE:nature=Nature.nx;word=Predefine.TAG_CLUSTER;break;default:break;}returnnewVertex(word,name,newCoreDictionary.Attribute(nature,dValue)); "]
612844[label="localVariableDeclarationStatement\n Stringname=word; "]
712845[label="localVariableDeclaration\n Stringname=word "]
812846[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
812847[label="variableDeclarator\n name=word "]
912848[label="variableDeclaratorId\n name "]
912849[label="expressionName\n word "]
612850[label="localVariableDeclarationStatement\n Naturenature=Nature.n; "]
712851[label="localVariableDeclaration\n Naturenature=Nature.n "]
812852[label="unannClassType_lfno_unannClassOrInterfaceType\n Nature "]
812853[label="variableDeclarator\n nature=Nature.n "]
912854[label="variableDeclaratorId\n nature "]
912855[label="expressionName\n Nature.n "]
1012856[label="ambiguousName\n Nature "]
612857[label="localVariableDeclarationStatement\n intdValue=1; "]
712858[label="localVariableDeclaration\n intdValue=1 "]
812859[label="integralType\n int "]
812860[label="variableDeclarator\n dValue=1 "]
912861[label="variableDeclaratorId\n dValue "]
912862[label="literal\n 1 "]
612863[label="switchStatement\n switch(type){caseCharType.CT_CHINESE:break;caseCharType.CT_NUM:caseCharType.CT_INDEX:caseCharType.CT_CNUM:nature=Nature.m;word=Predefine.TAG_NUMBER;break;caseCharType.CT_DELIMITER:nature=Nature.w;break;caseCharType.CT_LETTER:nature=Nature.nx;word=Predefine.TAG_CLUSTER;break;caseCharType.CT_SINGLE:nature=Nature.nx;word=Predefine.TAG_CLUSTER;break;default:break;} "]
712864[label="expressionName\n type "]
712865[label="switchBlock\n {caseCharType.CT_CHINESE:break;caseCharType.CT_NUM:caseCharType.CT_INDEX:caseCharType.CT_CNUM:nature=Nature.m;word=Predefine.TAG_NUMBER;break;caseCharType.CT_DELIMITER:nature=Nature.w;break;caseCharType.CT_LETTER:nature=Nature.nx;word=Predefine.TAG_CLUSTER;break;caseCharType.CT_SINGLE:nature=Nature.nx;word=Predefine.TAG_CLUSTER;break;default:break;} "]
812866[label="switchBlockStatementGroup\n caseCharType.CT_CHINESE:break; "]
912867[label="switchLabel\n caseCharType.CT_CHINESE: "]
1012868[label="expressionName\n CharType.CT_CHINESE "]
1112869[label="ambiguousName\n CharType "]
912870[label="breakStatement\n break; "]
812871[label="switchBlockStatementGroup\n caseCharType.CT_NUM:caseCharType.CT_INDEX:caseCharType.CT_CNUM:nature=Nature.m;word=Predefine.TAG_NUMBER;break; "]
912872[label="switchLabels\n caseCharType.CT_NUM:caseCharType.CT_INDEX:caseCharType.CT_CNUM: "]
1012873[label="switchLabel\n caseCharType.CT_NUM: "]
1112874[label="expressionName\n CharType.CT_NUM "]
1212875[label="ambiguousName\n CharType "]
1012876[label="switchLabel\n caseCharType.CT_INDEX: "]
1112877[label="expressionName\n CharType.CT_INDEX "]
1212878[label="ambiguousName\n CharType "]
1012879[label="switchLabel\n caseCharType.CT_CNUM: "]
1112880[label="expressionName\n CharType.CT_CNUM "]
1212881[label="ambiguousName\n CharType "]
912882[label="blockStatements\n nature=Nature.m;word=Predefine.TAG_NUMBER;break; "]
1012883[label="expressionStatement\n nature=Nature.m; "]
1112884[label="assignment\n nature=Nature.m "]
1212885[label="expressionName\n nature "]
1212886[label="assignmentOperator\n = "]
1212887[label="expressionName\n Nature.m "]
1312888[label="ambiguousName\n Nature "]
1012889[label="expressionStatement\n word=Predefine.TAG_NUMBER; "]
1112890[label="assignment\n word=Predefine.TAG_NUMBER "]
1212891[label="expressionName\n word "]
1212892[label="assignmentOperator\n = "]
1212893[label="expressionName\n Predefine.TAG_NUMBER "]
1312894[label="ambiguousName\n Predefine "]
1012895[label="breakStatement\n break; "]
812896[label="switchBlockStatementGroup\n caseCharType.CT_DELIMITER:nature=Nature.w;break; "]
912897[label="switchLabel\n caseCharType.CT_DELIMITER: "]
1012898[label="expressionName\n CharType.CT_DELIMITER "]
1112899[label="ambiguousName\n CharType "]
912900[label="blockStatements\n nature=Nature.w;break; "]
1012901[label="expressionStatement\n nature=Nature.w; "]
1112902[label="assignment\n nature=Nature.w "]
1212903[label="expressionName\n nature "]
1212904[label="assignmentOperator\n = "]
1212905[label="expressionName\n Nature.w "]
1312906[label="ambiguousName\n Nature "]
1012907[label="breakStatement\n break; "]
812908[label="switchBlockStatementGroup\n caseCharType.CT_LETTER:nature=Nature.nx;word=Predefine.TAG_CLUSTER;break; "]
912909[label="switchLabel\n caseCharType.CT_LETTER: "]
1012910[label="expressionName\n CharType.CT_LETTER "]
1112911[label="ambiguousName\n CharType "]
912912[label="blockStatements\n nature=Nature.nx;word=Predefine.TAG_CLUSTER;break; "]
1012913[label="expressionStatement\n nature=Nature.nx; "]
1112914[label="assignment\n nature=Nature.nx "]
1212915[label="expressionName\n nature "]
1212916[label="assignmentOperator\n = "]
1212917[label="expressionName\n Nature.nx "]
1312918[label="ambiguousName\n Nature "]
1012919[label="expressionStatement\n word=Predefine.TAG_CLUSTER; "]
1112920[label="assignment\n word=Predefine.TAG_CLUSTER "]
1212921[label="expressionName\n word "]
1212922[label="assignmentOperator\n = "]
1212923[label="expressionName\n Predefine.TAG_CLUSTER "]
1312924[label="ambiguousName\n Predefine "]
1012925[label="breakStatement\n break; "]
812926[label="switchBlockStatementGroup\n caseCharType.CT_SINGLE:nature=Nature.nx;word=Predefine.TAG_CLUSTER;break; "]
912927[label="switchLabel\n caseCharType.CT_SINGLE: "]
1012928[label="expressionName\n CharType.CT_SINGLE "]
1112929[label="ambiguousName\n CharType "]
912930[label="blockStatements\n nature=Nature.nx;word=Predefine.TAG_CLUSTER;break; "]
1012931[label="expressionStatement\n nature=Nature.nx; "]
1112932[label="assignment\n nature=Nature.nx "]
1212933[label="expressionName\n nature "]
1212934[label="assignmentOperator\n = "]
1212935[label="expressionName\n Nature.nx "]
1312936[label="ambiguousName\n Nature "]
1012937[label="expressionStatement\n word=Predefine.TAG_CLUSTER; "]
1112938[label="assignment\n word=Predefine.TAG_CLUSTER "]
1212939[label="expressionName\n word "]
1212940[label="assignmentOperator\n = "]
1212941[label="expressionName\n Predefine.TAG_CLUSTER "]
1312942[label="ambiguousName\n Predefine "]
1012943[label="breakStatement\n break; "]
812944[label="switchBlockStatementGroup\n default:break; "]
912945[label="switchLabel\n default: "]
912946[label="breakStatement\n break; "]
612947[label="returnStatement\n returnnewVertex(word,name,newCoreDictionary.Attribute(nature,dValue)); "]
712948[label="classInstanceCreationExpression_lfno_primary\n newVertex(word,name,newCoreDictionary.Attribute(nature,dValue)) "]
812949[label="argumentList\n word,name,newCoreDictionary.Attribute(nature,dValue) "]
912950[label="expressionName\n word "]
912951[label="expressionName\n name "]
912952[label="classInstanceCreationExpression_lfno_primary\n newCoreDictionary.Attribute(nature,dValue) "]
1012953[label="argumentList\n nature,dValue "]
1112954[label="expressionName\n nature "]
1112955[label="expressionName\n dValue "]
012956[label="compilationUnit\n packagecom.hankcs.hanlp.collection.dartsclone.details;classAutoBytePool{byte[]getBuffer(){return_buf;}byteget(intid){return_buf[id];}voidset(intid,bytevalue){_buf[id]=value;}booleanempty(){return(_size==0);}intsize(){return_size;}voidclear(){resize(0);_buf=null;_size=0;_capacity=0;}voidadd(bytevalue){if(_size==_capacity){resizeBuf(_size+1);}_buf[_size++]=value;}voiddeleteLast(){--_size;}voidresize(intsize){if(size>_capacity){resizeBuf(size);}_size=size;}voidresize(intsize,bytevalue){if(size>_capacity){resizeBuf(size);}while(_size<size){_buf[_size++]=value;}}voidreserve(intsize){if(size>_capacity){resizeBuf(size);}}privatevoidresizeBuf(intsize){intcapacity;if(size>=_capacity*2){capacity=size;}else{capacity=1;while(capacity<size){capacity<<=1;}}byte[]buf=newbyte[capacity];if(_size>0){System.arraycopy(_buf,0,buf,0,_size);}_buf=buf;_capacity=capacity;}privatebyte[]_buf;privateint_size;privateint_capacity;}<EOF> "]
112957[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.dartsclone.details; "]
212958[label="packageName\n com.hankcs.hanlp.collection.dartsclone.details "]
312959[label="packageName\n com.hankcs.hanlp.collection.dartsclone "]
412960[label="packageName\n com.hankcs.hanlp.collection "]
512961[label="packageName\n com.hankcs.hanlp "]
612962[label="packageName\n com.hankcs "]
712963[label="packageName\n com "]
112964[label="normalClassDeclaration\n classAutoBytePool{byte[]getBuffer(){return_buf;}byteget(intid){return_buf[id];}voidset(intid,bytevalue){_buf[id]=value;}booleanempty(){return(_size==0);}intsize(){return_size;}voidclear(){resize(0);_buf=null;_size=0;_capacity=0;}voidadd(bytevalue){if(_size==_capacity){resizeBuf(_size+1);}_buf[_size++]=value;}voiddeleteLast(){--_size;}voidresize(intsize){if(size>_capacity){resizeBuf(size);}_size=size;}voidresize(intsize,bytevalue){if(size>_capacity){resizeBuf(size);}while(_size<size){_buf[_size++]=value;}}voidreserve(intsize){if(size>_capacity){resizeBuf(size);}}privatevoidresizeBuf(intsize){intcapacity;if(size>=_capacity*2){capacity=size;}else{capacity=1;while(capacity<size){capacity<<=1;}}byte[]buf=newbyte[capacity];if(_size>0){System.arraycopy(_buf,0,buf,0,_size);}_buf=buf;_capacity=capacity;}privatebyte[]_buf;privateint_size;privateint_capacity;} "]
212965[label="classBody\n {byte[]getBuffer(){return_buf;}byteget(intid){return_buf[id];}voidset(intid,bytevalue){_buf[id]=value;}booleanempty(){return(_size==0);}intsize(){return_size;}voidclear(){resize(0);_buf=null;_size=0;_capacity=0;}voidadd(bytevalue){if(_size==_capacity){resizeBuf(_size+1);}_buf[_size++]=value;}voiddeleteLast(){--_size;}voidresize(intsize){if(size>_capacity){resizeBuf(size);}_size=size;}voidresize(intsize,bytevalue){if(size>_capacity){resizeBuf(size);}while(_size<size){_buf[_size++]=value;}}voidreserve(intsize){if(size>_capacity){resizeBuf(size);}}privatevoidresizeBuf(intsize){intcapacity;if(size>=_capacity*2){capacity=size;}else{capacity=1;while(capacity<size){capacity<<=1;}}byte[]buf=newbyte[capacity];if(_size>0){System.arraycopy(_buf,0,buf,0,_size);}_buf=buf;_capacity=capacity;}privatebyte[]_buf;privateint_size;privateint_capacity;} "]
312966[label="methodDeclaration\n byte[]getBuffer(){return_buf;} "]
412967[label="methodHeader\n byte[]getBuffer() "]
512968[label="unannArrayType\n byte[] "]
612969[label="integralType\n byte "]
612970[label="dims\n [] "]
512971[label="methodDeclarator\n getBuffer() "]
412972[label="block\n {return_buf;} "]
512973[label="returnStatement\n return_buf; "]
612974[label="expressionName\n _buf "]
312975[label="methodDeclaration\n byteget(intid){return_buf[id];} "]
412976[label="methodHeader\n byteget(intid) "]
512977[label="integralType\n byte "]
512978[label="methodDeclarator\n get(intid) "]
612979[label="formalParameter\n intid "]
712980[label="integralType\n int "]
712981[label="variableDeclaratorId\n id "]
412982[label="block\n {return_buf[id];} "]
512983[label="returnStatement\n return_buf[id]; "]
612984[label="arrayAccess_lfno_primary\n _buf[id] "]
712985[label="expressionName\n _buf "]
712986[label="expressionName\n id "]
312987[label="methodDeclaration\n voidset(intid,bytevalue){_buf[id]=value;} "]
412988[label="methodHeader\n voidset(intid,bytevalue) "]
512989[label="result\n void "]
512990[label="methodDeclarator\n set(intid,bytevalue) "]
612991[label="formalParameterList\n intid,bytevalue "]
712992[label="formalParameter\n intid "]
812993[label="integralType\n int "]
812994[label="variableDeclaratorId\n id "]
712995[label="formalParameter\n bytevalue "]
812996[label="integralType\n byte "]
812997[label="variableDeclaratorId\n value "]
412998[label="block\n {_buf[id]=value;} "]
512999[label="expressionStatement\n _buf[id]=value; "]
613000[label="assignment\n _buf[id]=value "]
713001[label="arrayAccess\n _buf[id] "]
813002[label="expressionName\n _buf "]
813003[label="expressionName\n id "]
713004[label="assignmentOperator\n = "]
713005[label="expressionName\n value "]
313006[label="methodDeclaration\n booleanempty(){return(_size==0);} "]
413007[label="methodHeader\n booleanempty() "]
513008[label="unannPrimitiveType\n boolean "]
513009[label="methodDeclarator\n empty() "]
413010[label="block\n {return(_size==0);} "]
513011[label="returnStatement\n return(_size==0); "]
613012[label="primaryNoNewArray_lfno_primary\n (_size==0) "]
713013[label="equalityExpression\n _size==0 "]
813014[label="expressionName\n _size "]
813015[label="literal\n 0 "]
313016[label="methodDeclaration\n intsize(){return_size;} "]
413017[label="methodHeader\n intsize() "]
513018[label="integralType\n int "]
513019[label="methodDeclarator\n size() "]
413020[label="block\n {return_size;} "]
513021[label="returnStatement\n return_size; "]
613022[label="expressionName\n _size "]
313023[label="methodDeclaration\n voidclear(){resize(0);_buf=null;_size=0;_capacity=0;} "]
413024[label="methodHeader\n voidclear() "]
513025[label="result\n void "]
513026[label="methodDeclarator\n clear() "]
413027[label="block\n {resize(0);_buf=null;_size=0;_capacity=0;} "]
513028[label="blockStatements\n resize(0);_buf=null;_size=0;_capacity=0; "]
613029[label="expressionStatement\n resize(0); "]
713030[label="methodInvocation\n resize(0) "]
813031[label="methodName\n resize "]
813032[label="literal\n 0 "]
613033[label="expressionStatement\n _buf=null; "]
713034[label="assignment\n _buf=null "]
813035[label="expressionName\n _buf "]
813036[label="assignmentOperator\n = "]
813037[label="literal\n null "]
613038[label="expressionStatement\n _size=0; "]
713039[label="assignment\n _size=0 "]
813040[label="expressionName\n _size "]
813041[label="assignmentOperator\n = "]
813042[label="literal\n 0 "]
613043[label="expressionStatement\n _capacity=0; "]
713044[label="assignment\n _capacity=0 "]
813045[label="expressionName\n _capacity "]
813046[label="assignmentOperator\n = "]
813047[label="literal\n 0 "]
313048[label="methodDeclaration\n voidadd(bytevalue){if(_size==_capacity){resizeBuf(_size+1);}_buf[_size++]=value;} "]
413049[label="methodHeader\n voidadd(bytevalue) "]
513050[label="result\n void "]
513051[label="methodDeclarator\n add(bytevalue) "]
613052[label="formalParameter\n bytevalue "]
713053[label="integralType\n byte "]
713054[label="variableDeclaratorId\n value "]
413055[label="block\n {if(_size==_capacity){resizeBuf(_size+1);}_buf[_size++]=value;} "]
513056[label="blockStatements\n if(_size==_capacity){resizeBuf(_size+1);}_buf[_size++]=value; "]
613057[label="ifThenStatement\n if(_size==_capacity){resizeBuf(_size+1);} "]
713058[label="equalityExpression\n _size==_capacity "]
813059[label="expressionName\n _size "]
813060[label="expressionName\n _capacity "]
713061[label="block\n {resizeBuf(_size+1);} "]
813062[label="expressionStatement\n resizeBuf(_size+1); "]
913063[label="methodInvocation\n resizeBuf(_size+1) "]
1013064[label="methodName\n resizeBuf "]
1013065[label="additiveExpression\n _size+1 "]
1113066[label="expressionName\n _size "]
1113067[label="literal\n 1 "]
613068[label="expressionStatement\n _buf[_size++]=value; "]
713069[label="assignment\n _buf[_size++]=value "]
813070[label="arrayAccess\n _buf[_size++] "]
913071[label="expressionName\n _buf "]
913072[label="postfixExpression\n _size++ "]
1013073[label="expressionName\n _size "]
1013074[label="postIncrementExpression_lf_postfixExpression\n ++ "]
813075[label="assignmentOperator\n = "]
813076[label="expressionName\n value "]
313077[label="methodDeclaration\n voiddeleteLast(){--_size;} "]
413078[label="methodHeader\n voiddeleteLast() "]
513079[label="result\n void "]
513080[label="methodDeclarator\n deleteLast() "]
413081[label="block\n {--_size;} "]
513082[label="expressionStatement\n --_size; "]
613083[label="preDecrementExpression\n --_size "]
713084[label="expressionName\n _size "]
313085[label="methodDeclaration\n voidresize(intsize){if(size>_capacity){resizeBuf(size);}_size=size;} "]
413086[label="methodHeader\n voidresize(intsize) "]
513087[label="result\n void "]
513088[label="methodDeclarator\n resize(intsize) "]
613089[label="formalParameter\n intsize "]
713090[label="integralType\n int "]
713091[label="variableDeclaratorId\n size "]
413092[label="block\n {if(size>_capacity){resizeBuf(size);}_size=size;} "]
513093[label="blockStatements\n if(size>_capacity){resizeBuf(size);}_size=size; "]
613094[label="ifThenStatement\n if(size>_capacity){resizeBuf(size);} "]
713095[label="relationalExpression\n size>_capacity "]
813096[label="expressionName\n size "]
813097[label="expressionName\n _capacity "]
713098[label="block\n {resizeBuf(size);} "]
813099[label="expressionStatement\n resizeBuf(size); "]
913100[label="methodInvocation\n resizeBuf(size) "]
1013101[label="methodName\n resizeBuf "]
1013102[label="expressionName\n size "]
613103[label="expressionStatement\n _size=size; "]
713104[label="assignment\n _size=size "]
813105[label="expressionName\n _size "]
813106[label="assignmentOperator\n = "]
813107[label="expressionName\n size "]
313108[label="methodDeclaration\n voidresize(intsize,bytevalue){if(size>_capacity){resizeBuf(size);}while(_size<size){_buf[_size++]=value;}} "]
413109[label="methodHeader\n voidresize(intsize,bytevalue) "]
513110[label="result\n void "]
513111[label="methodDeclarator\n resize(intsize,bytevalue) "]
613112[label="formalParameterList\n intsize,bytevalue "]
713113[label="formalParameter\n intsize "]
813114[label="integralType\n int "]
813115[label="variableDeclaratorId\n size "]
713116[label="formalParameter\n bytevalue "]
813117[label="integralType\n byte "]
813118[label="variableDeclaratorId\n value "]
413119[label="block\n {if(size>_capacity){resizeBuf(size);}while(_size<size){_buf[_size++]=value;}} "]
513120[label="blockStatements\n if(size>_capacity){resizeBuf(size);}while(_size<size){_buf[_size++]=value;} "]
613121[label="ifThenStatement\n if(size>_capacity){resizeBuf(size);} "]
713122[label="relationalExpression\n size>_capacity "]
813123[label="expressionName\n size "]
813124[label="expressionName\n _capacity "]
713125[label="block\n {resizeBuf(size);} "]
813126[label="expressionStatement\n resizeBuf(size); "]
913127[label="methodInvocation\n resizeBuf(size) "]
1013128[label="methodName\n resizeBuf "]
1013129[label="expressionName\n size "]
613130[label="whileStatement\n while(_size<size){_buf[_size++]=value;} "]
713131[label="relationalExpression\n _size<size "]
813132[label="expressionName\n _size "]
813133[label="expressionName\n size "]
713134[label="block\n {_buf[_size++]=value;} "]
813135[label="expressionStatement\n _buf[_size++]=value; "]
913136[label="assignment\n _buf[_size++]=value "]
1013137[label="arrayAccess\n _buf[_size++] "]
1113138[label="expressionName\n _buf "]
1113139[label="postfixExpression\n _size++ "]
1213140[label="expressionName\n _size "]
1213141[label="postIncrementExpression_lf_postfixExpression\n ++ "]
1013142[label="assignmentOperator\n = "]
1013143[label="expressionName\n value "]
313144[label="methodDeclaration\n voidreserve(intsize){if(size>_capacity){resizeBuf(size);}} "]
413145[label="methodHeader\n voidreserve(intsize) "]
513146[label="result\n void "]
513147[label="methodDeclarator\n reserve(intsize) "]
613148[label="formalParameter\n intsize "]
713149[label="integralType\n int "]
713150[label="variableDeclaratorId\n size "]
413151[label="block\n {if(size>_capacity){resizeBuf(size);}} "]
513152[label="ifThenStatement\n if(size>_capacity){resizeBuf(size);} "]
613153[label="relationalExpression\n size>_capacity "]
713154[label="expressionName\n size "]
713155[label="expressionName\n _capacity "]
613156[label="block\n {resizeBuf(size);} "]
713157[label="expressionStatement\n resizeBuf(size); "]
813158[label="methodInvocation\n resizeBuf(size) "]
913159[label="methodName\n resizeBuf "]
913160[label="expressionName\n size "]
313161[label="methodDeclaration\n privatevoidresizeBuf(intsize){intcapacity;if(size>=_capacity*2){capacity=size;}else{capacity=1;while(capacity<size){capacity<<=1;}}byte[]buf=newbyte[capacity];if(_size>0){System.arraycopy(_buf,0,buf,0,_size);}_buf=buf;_capacity=capacity;} "]
413162[label="methodModifier\n private "]
413163[label="methodHeader\n voidresizeBuf(intsize) "]
513164[label="result\n void "]
513165[label="methodDeclarator\n resizeBuf(intsize) "]
613166[label="formalParameter\n intsize "]
713167[label="integralType\n int "]
713168[label="variableDeclaratorId\n size "]
413169[label="block\n {intcapacity;if(size>=_capacity*2){capacity=size;}else{capacity=1;while(capacity<size){capacity<<=1;}}byte[]buf=newbyte[capacity];if(_size>0){System.arraycopy(_buf,0,buf,0,_size);}_buf=buf;_capacity=capacity;} "]
513170[label="blockStatements\n intcapacity;if(size>=_capacity*2){capacity=size;}else{capacity=1;while(capacity<size){capacity<<=1;}}byte[]buf=newbyte[capacity];if(_size>0){System.arraycopy(_buf,0,buf,0,_size);}_buf=buf;_capacity=capacity; "]
613171[label="localVariableDeclarationStatement\n intcapacity; "]
713172[label="localVariableDeclaration\n intcapacity "]
813173[label="integralType\n int "]
813174[label="variableDeclaratorId\n capacity "]
613175[label="ifThenElseStatement\n if(size>=_capacity*2){capacity=size;}else{capacity=1;while(capacity<size){capacity<<=1;}} "]
713176[label="relationalExpression\n size>=_capacity*2 "]
813177[label="expressionName\n size "]
813178[label="multiplicativeExpression\n _capacity*2 "]
913179[label="expressionName\n _capacity "]
913180[label="literal\n 2 "]
713181[label="block\n {capacity=size;} "]
813182[label="expressionStatement\n capacity=size; "]
913183[label="assignment\n capacity=size "]
1013184[label="expressionName\n capacity "]
1013185[label="assignmentOperator\n = "]
1013186[label="expressionName\n size "]
713187[label="block\n {capacity=1;while(capacity<size){capacity<<=1;}} "]
813188[label="blockStatements\n capacity=1;while(capacity<size){capacity<<=1;} "]
913189[label="expressionStatement\n capacity=1; "]
1013190[label="assignment\n capacity=1 "]
1113191[label="expressionName\n capacity "]
1113192[label="assignmentOperator\n = "]
1113193[label="literal\n 1 "]
913194[label="whileStatement\n while(capacity<size){capacity<<=1;} "]
1013195[label="relationalExpression\n capacity<size "]
1113196[label="expressionName\n capacity "]
1113197[label="expressionName\n size "]
1013198[label="block\n {capacity<<=1;} "]
1113199[label="expressionStatement\n capacity<<=1; "]
1213200[label="assignment\n capacity<<=1 "]
1313201[label="expressionName\n capacity "]
1313202[label="assignmentOperator\n <<= "]
1313203[label="literal\n 1 "]
613204[label="localVariableDeclarationStatement\n byte[]buf=newbyte[capacity]; "]
713205[label="localVariableDeclaration\n byte[]buf=newbyte[capacity] "]
813206[label="unannArrayType\n byte[] "]
913207[label="integralType\n byte "]
913208[label="dims\n [] "]
813209[label="variableDeclarator\n buf=newbyte[capacity] "]
913210[label="variableDeclaratorId\n buf "]
913211[label="arrayCreationExpression\n newbyte[capacity] "]
1013212[label="integralType\n byte "]
1013213[label="dimExpr\n [capacity] "]
1113214[label="expressionName\n capacity "]
613215[label="ifThenStatement\n if(_size>0){System.arraycopy(_buf,0,buf,0,_size);} "]
713216[label="relationalExpression\n _size>0 "]
813217[label="expressionName\n _size "]
813218[label="literal\n 0 "]
713219[label="block\n {System.arraycopy(_buf,0,buf,0,_size);} "]
813220[label="expressionStatement\n System.arraycopy(_buf,0,buf,0,_size); "]
913221[label="methodInvocation\n System.arraycopy(_buf,0,buf,0,_size) "]
1013222[label="typeName\n System "]
1013223[label="argumentList\n _buf,0,buf,0,_size "]
1113224[label="expressionName\n _buf "]
1113225[label="literal\n 0 "]
1113226[label="expressionName\n buf "]
1113227[label="literal\n 0 "]
1113228[label="expressionName\n _size "]
613229[label="expressionStatement\n _buf=buf; "]
713230[label="assignment\n _buf=buf "]
813231[label="expressionName\n _buf "]
813232[label="assignmentOperator\n = "]
813233[label="expressionName\n buf "]
613234[label="expressionStatement\n _capacity=capacity; "]
713235[label="assignment\n _capacity=capacity "]
813236[label="expressionName\n _capacity "]
813237[label="assignmentOperator\n = "]
813238[label="expressionName\n capacity "]
313239[label="fieldDeclaration\n privatebyte[]_buf; "]
413240[label="fieldModifier\n private "]
413241[label="unannArrayType\n byte[] "]
513242[label="integralType\n byte "]
513243[label="dims\n [] "]
413244[label="variableDeclaratorId\n _buf "]
313245[label="fieldDeclaration\n privateint_size; "]
413246[label="fieldModifier\n private "]
413247[label="integralType\n int "]
413248[label="variableDeclaratorId\n _size "]
313249[label="fieldDeclaration\n privateint_capacity; "]
413250[label="fieldModifier\n private "]
413251[label="integralType\n int "]
413252[label="variableDeclaratorId\n _capacity "]
013253[label="compilationUnit\n packagecom.hankcs.hanlp.collection.dartsclone.details;classAutoIntPool{int[]getBuffer(){return_buf;}intget(intid){return_buf[id];}voidset(intid,intvalue){_buf[id]=value;}booleanempty(){return(_size==0);}intsize(){return_size;}voidclear(){resize(0);_buf=null;_size=0;_capacity=0;}voidadd(intvalue){if(_size==_capacity){resizeBuf(_size+1);}_buf[_size++]=value;}voiddeleteLast(){--_size;}voidresize(intsize){if(size>_capacity){resizeBuf(size);}_size=size;}voidresize(intsize,intvalue){if(size>_capacity){resizeBuf(size);}while(_size<size){_buf[_size++]=value;}}voidreserve(intsize){if(size>_capacity){resizeBuf(size);}}privatevoidresizeBuf(intsize){intcapacity;if(size>=_capacity*2){capacity=size;}else{capacity=1;while(capacity<size){capacity<<=1;}}int[]buf=newint[capacity];if(_size>0){System.arraycopy(_buf,0,buf,0,_size);}_buf=buf;_capacity=capacity;}privateint[]_buf;privateint_size;privateint_capacity;}<EOF> "]
113254[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.dartsclone.details; "]
213255[label="packageName\n com.hankcs.hanlp.collection.dartsclone.details "]
313256[label="packageName\n com.hankcs.hanlp.collection.dartsclone "]
413257[label="packageName\n com.hankcs.hanlp.collection "]
513258[label="packageName\n com.hankcs.hanlp "]
613259[label="packageName\n com.hankcs "]
713260[label="packageName\n com "]
113261[label="normalClassDeclaration\n classAutoIntPool{int[]getBuffer(){return_buf;}intget(intid){return_buf[id];}voidset(intid,intvalue){_buf[id]=value;}booleanempty(){return(_size==0);}intsize(){return_size;}voidclear(){resize(0);_buf=null;_size=0;_capacity=0;}voidadd(intvalue){if(_size==_capacity){resizeBuf(_size+1);}_buf[_size++]=value;}voiddeleteLast(){--_size;}voidresize(intsize){if(size>_capacity){resizeBuf(size);}_size=size;}voidresize(intsize,intvalue){if(size>_capacity){resizeBuf(size);}while(_size<size){_buf[_size++]=value;}}voidreserve(intsize){if(size>_capacity){resizeBuf(size);}}privatevoidresizeBuf(intsize){intcapacity;if(size>=_capacity*2){capacity=size;}else{capacity=1;while(capacity<size){capacity<<=1;}}int[]buf=newint[capacity];if(_size>0){System.arraycopy(_buf,0,buf,0,_size);}_buf=buf;_capacity=capacity;}privateint[]_buf;privateint_size;privateint_capacity;} "]
213262[label="classBody\n {int[]getBuffer(){return_buf;}intget(intid){return_buf[id];}voidset(intid,intvalue){_buf[id]=value;}booleanempty(){return(_size==0);}intsize(){return_size;}voidclear(){resize(0);_buf=null;_size=0;_capacity=0;}voidadd(intvalue){if(_size==_capacity){resizeBuf(_size+1);}_buf[_size++]=value;}voiddeleteLast(){--_size;}voidresize(intsize){if(size>_capacity){resizeBuf(size);}_size=size;}voidresize(intsize,intvalue){if(size>_capacity){resizeBuf(size);}while(_size<size){_buf[_size++]=value;}}voidreserve(intsize){if(size>_capacity){resizeBuf(size);}}privatevoidresizeBuf(intsize){intcapacity;if(size>=_capacity*2){capacity=size;}else{capacity=1;while(capacity<size){capacity<<=1;}}int[]buf=newint[capacity];if(_size>0){System.arraycopy(_buf,0,buf,0,_size);}_buf=buf;_capacity=capacity;}privateint[]_buf;privateint_size;privateint_capacity;} "]
313263[label="methodDeclaration\n int[]getBuffer(){return_buf;} "]
413264[label="methodHeader\n int[]getBuffer() "]
513265[label="unannArrayType\n int[] "]
613266[label="integralType\n int "]
613267[label="dims\n [] "]
513268[label="methodDeclarator\n getBuffer() "]
413269[label="block\n {return_buf;} "]
513270[label="returnStatement\n return_buf; "]
613271[label="expressionName\n _buf "]
313272[label="methodDeclaration\n intget(intid){return_buf[id];} "]
413273[label="methodHeader\n intget(intid) "]
513274[label="integralType\n int "]
513275[label="methodDeclarator\n get(intid) "]
613276[label="formalParameter\n intid "]
713277[label="integralType\n int "]
713278[label="variableDeclaratorId\n id "]
413279[label="block\n {return_buf[id];} "]
513280[label="returnStatement\n return_buf[id]; "]
613281[label="arrayAccess_lfno_primary\n _buf[id] "]
713282[label="expressionName\n _buf "]
713283[label="expressionName\n id "]
313284[label="methodDeclaration\n voidset(intid,intvalue){_buf[id]=value;} "]
413285[label="methodHeader\n voidset(intid,intvalue) "]
513286[label="result\n void "]
513287[label="methodDeclarator\n set(intid,intvalue) "]
613288[label="formalParameterList\n intid,intvalue "]
713289[label="formalParameter\n intid "]
813290[label="integralType\n int "]
813291[label="variableDeclaratorId\n id "]
713292[label="formalParameter\n intvalue "]
813293[label="integralType\n int "]
813294[label="variableDeclaratorId\n value "]
413295[label="block\n {_buf[id]=value;} "]
513296[label="expressionStatement\n _buf[id]=value; "]
613297[label="assignment\n _buf[id]=value "]
713298[label="arrayAccess\n _buf[id] "]
813299[label="expressionName\n _buf "]
813300[label="expressionName\n id "]
713301[label="assignmentOperator\n = "]
713302[label="expressionName\n value "]
313303[label="methodDeclaration\n booleanempty(){return(_size==0);} "]
413304[label="methodHeader\n booleanempty() "]
513305[label="unannPrimitiveType\n boolean "]
513306[label="methodDeclarator\n empty() "]
413307[label="block\n {return(_size==0);} "]
513308[label="returnStatement\n return(_size==0); "]
613309[label="primaryNoNewArray_lfno_primary\n (_size==0) "]
713310[label="equalityExpression\n _size==0 "]
813311[label="expressionName\n _size "]
813312[label="literal\n 0 "]
313313[label="methodDeclaration\n intsize(){return_size;} "]
413314[label="methodHeader\n intsize() "]
513315[label="integralType\n int "]
513316[label="methodDeclarator\n size() "]
413317[label="block\n {return_size;} "]
513318[label="returnStatement\n return_size; "]
613319[label="expressionName\n _size "]
313320[label="methodDeclaration\n voidclear(){resize(0);_buf=null;_size=0;_capacity=0;} "]
413321[label="methodHeader\n voidclear() "]
513322[label="result\n void "]
513323[label="methodDeclarator\n clear() "]
413324[label="block\n {resize(0);_buf=null;_size=0;_capacity=0;} "]
513325[label="blockStatements\n resize(0);_buf=null;_size=0;_capacity=0; "]
613326[label="expressionStatement\n resize(0); "]
713327[label="methodInvocation\n resize(0) "]
813328[label="methodName\n resize "]
813329[label="literal\n 0 "]
613330[label="expressionStatement\n _buf=null; "]
713331[label="assignment\n _buf=null "]
813332[label="expressionName\n _buf "]
813333[label="assignmentOperator\n = "]
813334[label="literal\n null "]
613335[label="expressionStatement\n _size=0; "]
713336[label="assignment\n _size=0 "]
813337[label="expressionName\n _size "]
813338[label="assignmentOperator\n = "]
813339[label="literal\n 0 "]
613340[label="expressionStatement\n _capacity=0; "]
713341[label="assignment\n _capacity=0 "]
813342[label="expressionName\n _capacity "]
813343[label="assignmentOperator\n = "]
813344[label="literal\n 0 "]
313345[label="methodDeclaration\n voidadd(intvalue){if(_size==_capacity){resizeBuf(_size+1);}_buf[_size++]=value;} "]
413346[label="methodHeader\n voidadd(intvalue) "]
513347[label="result\n void "]
513348[label="methodDeclarator\n add(intvalue) "]
613349[label="formalParameter\n intvalue "]
713350[label="integralType\n int "]
713351[label="variableDeclaratorId\n value "]
413352[label="block\n {if(_size==_capacity){resizeBuf(_size+1);}_buf[_size++]=value;} "]
513353[label="blockStatements\n if(_size==_capacity){resizeBuf(_size+1);}_buf[_size++]=value; "]
613354[label="ifThenStatement\n if(_size==_capacity){resizeBuf(_size+1);} "]
713355[label="equalityExpression\n _size==_capacity "]
813356[label="expressionName\n _size "]
813357[label="expressionName\n _capacity "]
713358[label="block\n {resizeBuf(_size+1);} "]
813359[label="expressionStatement\n resizeBuf(_size+1); "]
913360[label="methodInvocation\n resizeBuf(_size+1) "]
1013361[label="methodName\n resizeBuf "]
1013362[label="additiveExpression\n _size+1 "]
1113363[label="expressionName\n _size "]
1113364[label="literal\n 1 "]
613365[label="expressionStatement\n _buf[_size++]=value; "]
713366[label="assignment\n _buf[_size++]=value "]
813367[label="arrayAccess\n _buf[_size++] "]
913368[label="expressionName\n _buf "]
913369[label="postfixExpression\n _size++ "]
1013370[label="expressionName\n _size "]
1013371[label="postIncrementExpression_lf_postfixExpression\n ++ "]
813372[label="assignmentOperator\n = "]
813373[label="expressionName\n value "]
313374[label="methodDeclaration\n voiddeleteLast(){--_size;} "]
413375[label="methodHeader\n voiddeleteLast() "]
513376[label="result\n void "]
513377[label="methodDeclarator\n deleteLast() "]
413378[label="block\n {--_size;} "]
513379[label="expressionStatement\n --_size; "]
613380[label="preDecrementExpression\n --_size "]
713381[label="expressionName\n _size "]
313382[label="methodDeclaration\n voidresize(intsize){if(size>_capacity){resizeBuf(size);}_size=size;} "]
413383[label="methodHeader\n voidresize(intsize) "]
513384[label="result\n void "]
513385[label="methodDeclarator\n resize(intsize) "]
613386[label="formalParameter\n intsize "]
713387[label="integralType\n int "]
713388[label="variableDeclaratorId\n size "]
413389[label="block\n {if(size>_capacity){resizeBuf(size);}_size=size;} "]
513390[label="blockStatements\n if(size>_capacity){resizeBuf(size);}_size=size; "]
613391[label="ifThenStatement\n if(size>_capacity){resizeBuf(size);} "]
713392[label="relationalExpression\n size>_capacity "]
813393[label="expressionName\n size "]
813394[label="expressionName\n _capacity "]
713395[label="block\n {resizeBuf(size);} "]
813396[label="expressionStatement\n resizeBuf(size); "]
913397[label="methodInvocation\n resizeBuf(size) "]
1013398[label="methodName\n resizeBuf "]
1013399[label="expressionName\n size "]
613400[label="expressionStatement\n _size=size; "]
713401[label="assignment\n _size=size "]
813402[label="expressionName\n _size "]
813403[label="assignmentOperator\n = "]
813404[label="expressionName\n size "]
313405[label="methodDeclaration\n voidresize(intsize,intvalue){if(size>_capacity){resizeBuf(size);}while(_size<size){_buf[_size++]=value;}} "]
413406[label="methodHeader\n voidresize(intsize,intvalue) "]
513407[label="result\n void "]
513408[label="methodDeclarator\n resize(intsize,intvalue) "]
613409[label="formalParameterList\n intsize,intvalue "]
713410[label="formalParameter\n intsize "]
813411[label="integralType\n int "]
813412[label="variableDeclaratorId\n size "]
713413[label="formalParameter\n intvalue "]
813414[label="integralType\n int "]
813415[label="variableDeclaratorId\n value "]
413416[label="block\n {if(size>_capacity){resizeBuf(size);}while(_size<size){_buf[_size++]=value;}} "]
513417[label="blockStatements\n if(size>_capacity){resizeBuf(size);}while(_size<size){_buf[_size++]=value;} "]
613418[label="ifThenStatement\n if(size>_capacity){resizeBuf(size);} "]
713419[label="relationalExpression\n size>_capacity "]
813420[label="expressionName\n size "]
813421[label="expressionName\n _capacity "]
713422[label="block\n {resizeBuf(size);} "]
813423[label="expressionStatement\n resizeBuf(size); "]
913424[label="methodInvocation\n resizeBuf(size) "]
1013425[label="methodName\n resizeBuf "]
1013426[label="expressionName\n size "]
613427[label="whileStatement\n while(_size<size){_buf[_size++]=value;} "]
713428[label="relationalExpression\n _size<size "]
813429[label="expressionName\n _size "]
813430[label="expressionName\n size "]
713431[label="block\n {_buf[_size++]=value;} "]
813432[label="expressionStatement\n _buf[_size++]=value; "]
913433[label="assignment\n _buf[_size++]=value "]
1013434[label="arrayAccess\n _buf[_size++] "]
1113435[label="expressionName\n _buf "]
1113436[label="postfixExpression\n _size++ "]
1213437[label="expressionName\n _size "]
1213438[label="postIncrementExpression_lf_postfixExpression\n ++ "]
1013439[label="assignmentOperator\n = "]
1013440[label="expressionName\n value "]
313441[label="methodDeclaration\n voidreserve(intsize){if(size>_capacity){resizeBuf(size);}} "]
413442[label="methodHeader\n voidreserve(intsize) "]
513443[label="result\n void "]
513444[label="methodDeclarator\n reserve(intsize) "]
613445[label="formalParameter\n intsize "]
713446[label="integralType\n int "]
713447[label="variableDeclaratorId\n size "]
413448[label="block\n {if(size>_capacity){resizeBuf(size);}} "]
513449[label="ifThenStatement\n if(size>_capacity){resizeBuf(size);} "]
613450[label="relationalExpression\n size>_capacity "]
713451[label="expressionName\n size "]
713452[label="expressionName\n _capacity "]
613453[label="block\n {resizeBuf(size);} "]
713454[label="expressionStatement\n resizeBuf(size); "]
813455[label="methodInvocation\n resizeBuf(size) "]
913456[label="methodName\n resizeBuf "]
913457[label="expressionName\n size "]
313458[label="methodDeclaration\n privatevoidresizeBuf(intsize){intcapacity;if(size>=_capacity*2){capacity=size;}else{capacity=1;while(capacity<size){capacity<<=1;}}int[]buf=newint[capacity];if(_size>0){System.arraycopy(_buf,0,buf,0,_size);}_buf=buf;_capacity=capacity;} "]
413459[label="methodModifier\n private "]
413460[label="methodHeader\n voidresizeBuf(intsize) "]
513461[label="result\n void "]
513462[label="methodDeclarator\n resizeBuf(intsize) "]
613463[label="formalParameter\n intsize "]
713464[label="integralType\n int "]
713465[label="variableDeclaratorId\n size "]
413466[label="block\n {intcapacity;if(size>=_capacity*2){capacity=size;}else{capacity=1;while(capacity<size){capacity<<=1;}}int[]buf=newint[capacity];if(_size>0){System.arraycopy(_buf,0,buf,0,_size);}_buf=buf;_capacity=capacity;} "]
513467[label="blockStatements\n intcapacity;if(size>=_capacity*2){capacity=size;}else{capacity=1;while(capacity<size){capacity<<=1;}}int[]buf=newint[capacity];if(_size>0){System.arraycopy(_buf,0,buf,0,_size);}_buf=buf;_capacity=capacity; "]
613468[label="localVariableDeclarationStatement\n intcapacity; "]
713469[label="localVariableDeclaration\n intcapacity "]
813470[label="integralType\n int "]
813471[label="variableDeclaratorId\n capacity "]
613472[label="ifThenElseStatement\n if(size>=_capacity*2){capacity=size;}else{capacity=1;while(capacity<size){capacity<<=1;}} "]
713473[label="relationalExpression\n size>=_capacity*2 "]
813474[label="expressionName\n size "]
813475[label="multiplicativeExpression\n _capacity*2 "]
913476[label="expressionName\n _capacity "]
913477[label="literal\n 2 "]
713478[label="block\n {capacity=size;} "]
813479[label="expressionStatement\n capacity=size; "]
913480[label="assignment\n capacity=size "]
1013481[label="expressionName\n capacity "]
1013482[label="assignmentOperator\n = "]
1013483[label="expressionName\n size "]
713484[label="block\n {capacity=1;while(capacity<size){capacity<<=1;}} "]
813485[label="blockStatements\n capacity=1;while(capacity<size){capacity<<=1;} "]
913486[label="expressionStatement\n capacity=1; "]
1013487[label="assignment\n capacity=1 "]
1113488[label="expressionName\n capacity "]
1113489[label="assignmentOperator\n = "]
1113490[label="literal\n 1 "]
913491[label="whileStatement\n while(capacity<size){capacity<<=1;} "]
1013492[label="relationalExpression\n capacity<size "]
1113493[label="expressionName\n capacity "]
1113494[label="expressionName\n size "]
1013495[label="block\n {capacity<<=1;} "]
1113496[label="expressionStatement\n capacity<<=1; "]
1213497[label="assignment\n capacity<<=1 "]
1313498[label="expressionName\n capacity "]
1313499[label="assignmentOperator\n <<= "]
1313500[label="literal\n 1 "]
613501[label="localVariableDeclarationStatement\n int[]buf=newint[capacity]; "]
713502[label="localVariableDeclaration\n int[]buf=newint[capacity] "]
813503[label="unannArrayType\n int[] "]
913504[label="integralType\n int "]
913505[label="dims\n [] "]
813506[label="variableDeclarator\n buf=newint[capacity] "]
913507[label="variableDeclaratorId\n buf "]
913508[label="arrayCreationExpression\n newint[capacity] "]
1013509[label="integralType\n int "]
1013510[label="dimExpr\n [capacity] "]
1113511[label="expressionName\n capacity "]
613512[label="ifThenStatement\n if(_size>0){System.arraycopy(_buf,0,buf,0,_size);} "]
713513[label="relationalExpression\n _size>0 "]
813514[label="expressionName\n _size "]
813515[label="literal\n 0 "]
713516[label="block\n {System.arraycopy(_buf,0,buf,0,_size);} "]
813517[label="expressionStatement\n System.arraycopy(_buf,0,buf,0,_size); "]
913518[label="methodInvocation\n System.arraycopy(_buf,0,buf,0,_size) "]
1013519[label="typeName\n System "]
1013520[label="argumentList\n _buf,0,buf,0,_size "]
1113521[label="expressionName\n _buf "]
1113522[label="literal\n 0 "]
1113523[label="expressionName\n buf "]
1113524[label="literal\n 0 "]
1113525[label="expressionName\n _size "]
613526[label="expressionStatement\n _buf=buf; "]
713527[label="assignment\n _buf=buf "]
813528[label="expressionName\n _buf "]
813529[label="assignmentOperator\n = "]
813530[label="expressionName\n buf "]
613531[label="expressionStatement\n _capacity=capacity; "]
713532[label="assignment\n _capacity=capacity "]
813533[label="expressionName\n _capacity "]
813534[label="assignmentOperator\n = "]
813535[label="expressionName\n capacity "]
313536[label="fieldDeclaration\n privateint[]_buf; "]
413537[label="fieldModifier\n private "]
413538[label="unannArrayType\n int[] "]
513539[label="integralType\n int "]
513540[label="dims\n [] "]
413541[label="variableDeclaratorId\n _buf "]
313542[label="fieldDeclaration\n privateint_size; "]
413543[label="fieldModifier\n private "]
413544[label="integralType\n int "]
413545[label="variableDeclaratorId\n _size "]
313546[label="fieldDeclaration\n privateint_capacity; "]
413547[label="fieldModifier\n private "]
413548[label="integralType\n int "]
413549[label="variableDeclaratorId\n _capacity "]
013550[label="compilationUnit\n packagecom.hankcs.hanlp.model.perceptron.model;importcom.hankcs.hanlp.model.perceptron.feature.FeatureMap;publicclassAveragedPerceptronextendsLinearModel{publicAveragedPerceptron(FeatureMapfeatureMap,float[]parameter){super(featureMap,parameter);}publicAveragedPerceptron(FeatureMapfeatureMap){super(featureMap);}publicvoidupdate(int[]goldIndex,int[]predictIndex,double[]total,int[]timestamp,intiter){for(inti=0;i<goldIndex.length;++i){if(goldIndex[i]==predictIndex[i])continue;else{update(goldIndex[i],1,total,timestamp,iter);if(predictIndex[i]>=0&&predictIndex[i]<parameter.length)update(predictIndex[i],-1,total,timestamp,iter);else{thrownewIllegalArgumentException(\"更新参数时传入了非法的下标\");}}}}privatevoidupdate(intindex,floatvalue,double[]total,int[]timestamp,intcurrent){intpassed=current-timestamp[index];total[index]+=passed*parameter[index];parameter[index]+=value;timestamp[index]=current;}publicvoidaverage(double[]total,int[]timestamp,intcurrent){for(inti=0;i<parameter.length;i++){parameter[i]=(float)((total[i]+(current-timestamp[i])*parameter[i])/current);}}}<EOF> "]
113551[label="packageDeclaration\n packagecom.hankcs.hanlp.model.perceptron.model; "]
213552[label="packageName\n com.hankcs.hanlp.model.perceptron.model "]
313553[label="packageName\n com.hankcs.hanlp.model.perceptron "]
413554[label="packageName\n com.hankcs.hanlp.model "]
513555[label="packageName\n com.hankcs.hanlp "]
613556[label="packageName\n com.hankcs "]
713557[label="packageName\n com "]
113558[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.model.perceptron.feature.FeatureMap; "]
213559[label="typeName\n com.hankcs.hanlp.model.perceptron.feature.FeatureMap "]
313560[label="packageOrTypeName\n com.hankcs.hanlp.model.perceptron.feature "]
413561[label="packageOrTypeName\n com.hankcs.hanlp.model.perceptron "]
513562[label="packageOrTypeName\n com.hankcs.hanlp.model "]
613563[label="packageOrTypeName\n com.hankcs.hanlp "]
713564[label="packageOrTypeName\n com.hankcs "]
813565[label="packageOrTypeName\n com "]
113566[label="normalClassDeclaration\n publicclassAveragedPerceptronextendsLinearModel{publicAveragedPerceptron(FeatureMapfeatureMap,float[]parameter){super(featureMap,parameter);}publicAveragedPerceptron(FeatureMapfeatureMap){super(featureMap);}publicvoidupdate(int[]goldIndex,int[]predictIndex,double[]total,int[]timestamp,intiter){for(inti=0;i<goldIndex.length;++i){if(goldIndex[i]==predictIndex[i])continue;else{update(goldIndex[i],1,total,timestamp,iter);if(predictIndex[i]>=0&&predictIndex[i]<parameter.length)update(predictIndex[i],-1,total,timestamp,iter);else{thrownewIllegalArgumentException(\"更新参数时传入了非法的下标\");}}}}privatevoidupdate(intindex,floatvalue,double[]total,int[]timestamp,intcurrent){intpassed=current-timestamp[index];total[index]+=passed*parameter[index];parameter[index]+=value;timestamp[index]=current;}publicvoidaverage(double[]total,int[]timestamp,intcurrent){for(inti=0;i<parameter.length;i++){parameter[i]=(float)((total[i]+(current-timestamp[i])*parameter[i])/current);}}} "]
213567[label="classModifier\n public "]
213568[label="superclass\n extendsLinearModel "]
313569[label="classType\n LinearModel "]
213570[label="classBody\n {publicAveragedPerceptron(FeatureMapfeatureMap,float[]parameter){super(featureMap,parameter);}publicAveragedPerceptron(FeatureMapfeatureMap){super(featureMap);}publicvoidupdate(int[]goldIndex,int[]predictIndex,double[]total,int[]timestamp,intiter){for(inti=0;i<goldIndex.length;++i){if(goldIndex[i]==predictIndex[i])continue;else{update(goldIndex[i],1,total,timestamp,iter);if(predictIndex[i]>=0&&predictIndex[i]<parameter.length)update(predictIndex[i],-1,total,timestamp,iter);else{thrownewIllegalArgumentException(\"更新参数时传入了非法的下标\");}}}}privatevoidupdate(intindex,floatvalue,double[]total,int[]timestamp,intcurrent){intpassed=current-timestamp[index];total[index]+=passed*parameter[index];parameter[index]+=value;timestamp[index]=current;}publicvoidaverage(double[]total,int[]timestamp,intcurrent){for(inti=0;i<parameter.length;i++){parameter[i]=(float)((total[i]+(current-timestamp[i])*parameter[i])/current);}}} "]
313571[label="constructorDeclaration\n publicAveragedPerceptron(FeatureMapfeatureMap,float[]parameter){super(featureMap,parameter);} "]
413572[label="constructorModifier\n public "]
413573[label="constructorDeclarator\n AveragedPerceptron(FeatureMapfeatureMap,float[]parameter) "]
513574[label="simpleTypeName\n AveragedPerceptron "]
513575[label="formalParameterList\n FeatureMapfeatureMap,float[]parameter "]
613576[label="formalParameter\n FeatureMapfeatureMap "]
713577[label="unannClassType_lfno_unannClassOrInterfaceType\n FeatureMap "]
713578[label="variableDeclaratorId\n featureMap "]
613579[label="formalParameter\n float[]parameter "]
713580[label="unannArrayType\n float[] "]
813581[label="floatingPointType\n float "]
813582[label="dims\n [] "]
713583[label="variableDeclaratorId\n parameter "]
413584[label="constructorBody\n {super(featureMap,parameter);} "]
513585[label="explicitConstructorInvocation\n super(featureMap,parameter); "]
613586[label="argumentList\n featureMap,parameter "]
713587[label="expressionName\n featureMap "]
713588[label="expressionName\n parameter "]
313589[label="constructorDeclaration\n publicAveragedPerceptron(FeatureMapfeatureMap){super(featureMap);} "]
413590[label="constructorModifier\n public "]
413591[label="constructorDeclarator\n AveragedPerceptron(FeatureMapfeatureMap) "]
513592[label="simpleTypeName\n AveragedPerceptron "]
513593[label="formalParameter\n FeatureMapfeatureMap "]
613594[label="unannClassType_lfno_unannClassOrInterfaceType\n FeatureMap "]
613595[label="variableDeclaratorId\n featureMap "]
413596[label="constructorBody\n {super(featureMap);} "]
513597[label="explicitConstructorInvocation\n super(featureMap); "]
613598[label="expressionName\n featureMap "]
313599[label="methodDeclaration\n publicvoidupdate(int[]goldIndex,int[]predictIndex,double[]total,int[]timestamp,intiter){for(inti=0;i<goldIndex.length;++i){if(goldIndex[i]==predictIndex[i])continue;else{update(goldIndex[i],1,total,timestamp,iter);if(predictIndex[i]>=0&&predictIndex[i]<parameter.length)update(predictIndex[i],-1,total,timestamp,iter);else{thrownewIllegalArgumentException(\"更新参数时传入了非法的下标\");}}}} "]
413600[label="methodModifier\n public "]
413601[label="methodHeader\n voidupdate(int[]goldIndex,int[]predictIndex,double[]total,int[]timestamp,intiter) "]
513602[label="result\n void "]
513603[label="methodDeclarator\n update(int[]goldIndex,int[]predictIndex,double[]total,int[]timestamp,intiter) "]
613604[label="formalParameterList\n int[]goldIndex,int[]predictIndex,double[]total,int[]timestamp,intiter "]
713605[label="formalParameters\n int[]goldIndex,int[]predictIndex,double[]total,int[]timestamp "]
813606[label="formalParameter\n int[]goldIndex "]
913607[label="unannArrayType\n int[] "]
1013608[label="integralType\n int "]
1013609[label="dims\n [] "]
913610[label="variableDeclaratorId\n goldIndex "]
813611[label="formalParameter\n int[]predictIndex "]
913612[label="unannArrayType\n int[] "]
1013613[label="integralType\n int "]
1013614[label="dims\n [] "]
913615[label="variableDeclaratorId\n predictIndex "]
813616[label="formalParameter\n double[]total "]
913617[label="unannArrayType\n double[] "]
1013618[label="floatingPointType\n double "]
1013619[label="dims\n [] "]
913620[label="variableDeclaratorId\n total "]
813621[label="formalParameter\n int[]timestamp "]
913622[label="unannArrayType\n int[] "]
1013623[label="integralType\n int "]
1013624[label="dims\n [] "]
913625[label="variableDeclaratorId\n timestamp "]
713626[label="formalParameter\n intiter "]
813627[label="integralType\n int "]
813628[label="variableDeclaratorId\n iter "]
413629[label="block\n {for(inti=0;i<goldIndex.length;++i){if(goldIndex[i]==predictIndex[i])continue;else{update(goldIndex[i],1,total,timestamp,iter);if(predictIndex[i]>=0&&predictIndex[i]<parameter.length)update(predictIndex[i],-1,total,timestamp,iter);else{thrownewIllegalArgumentException(\"更新参数时传入了非法的下标\");}}}} "]
513630[label="basicForStatement\n for(inti=0;i<goldIndex.length;++i){if(goldIndex[i]==predictIndex[i])continue;else{update(goldIndex[i],1,total,timestamp,iter);if(predictIndex[i]>=0&&predictIndex[i]<parameter.length)update(predictIndex[i],-1,total,timestamp,iter);else{thrownewIllegalArgumentException(\"更新参数时传入了非法的下标\");}}} "]
613631[label="localVariableDeclaration\n inti=0 "]
713632[label="integralType\n int "]
713633[label="variableDeclarator\n i=0 "]
813634[label="variableDeclaratorId\n i "]
813635[label="literal\n 0 "]
613636[label="relationalExpression\n i<goldIndex.length "]
713637[label="expressionName\n i "]
713638[label="expressionName\n goldIndex.length "]
813639[label="ambiguousName\n goldIndex "]
613640[label="preIncrementExpression\n ++i "]
713641[label="expressionName\n i "]
613642[label="block\n {if(goldIndex[i]==predictIndex[i])continue;else{update(goldIndex[i],1,total,timestamp,iter);if(predictIndex[i]>=0&&predictIndex[i]<parameter.length)update(predictIndex[i],-1,total,timestamp,iter);else{thrownewIllegalArgumentException(\"更新参数时传入了非法的下标\");}}} "]
713643[label="ifThenElseStatement\n if(goldIndex[i]==predictIndex[i])continue;else{update(goldIndex[i],1,total,timestamp,iter);if(predictIndex[i]>=0&&predictIndex[i]<parameter.length)update(predictIndex[i],-1,total,timestamp,iter);else{thrownewIllegalArgumentException(\"更新参数时传入了非法的下标\");}} "]
813644[label="equalityExpression\n goldIndex[i]==predictIndex[i] "]
913645[label="arrayAccess_lfno_primary\n goldIndex[i] "]
1013646[label="expressionName\n goldIndex "]
1013647[label="expressionName\n i "]
913648[label="arrayAccess_lfno_primary\n predictIndex[i] "]
1013649[label="expressionName\n predictIndex "]
1013650[label="expressionName\n i "]
813651[label="continueStatement\n continue; "]
813652[label="block\n {update(goldIndex[i],1,total,timestamp,iter);if(predictIndex[i]>=0&&predictIndex[i]<parameter.length)update(predictIndex[i],-1,total,timestamp,iter);else{thrownewIllegalArgumentException(\"更新参数时传入了非法的下标\");}} "]
913653[label="blockStatements\n update(goldIndex[i],1,total,timestamp,iter);if(predictIndex[i]>=0&&predictIndex[i]<parameter.length)update(predictIndex[i],-1,total,timestamp,iter);else{thrownewIllegalArgumentException(\"更新参数时传入了非法的下标\");} "]
1013654[label="expressionStatement\n update(goldIndex[i],1,total,timestamp,iter); "]
1113655[label="methodInvocation\n update(goldIndex[i],1,total,timestamp,iter) "]
1213656[label="methodName\n update "]
1213657[label="argumentList\n goldIndex[i],1,total,timestamp,iter "]
1313658[label="arrayAccess_lfno_primary\n goldIndex[i] "]
1413659[label="expressionName\n goldIndex "]
1413660[label="expressionName\n i "]
1313661[label="literal\n 1 "]
1313662[label="expressionName\n total "]
1313663[label="expressionName\n timestamp "]
1313664[label="expressionName\n iter "]
1013665[label="ifThenElseStatement\n if(predictIndex[i]>=0&&predictIndex[i]<parameter.length)update(predictIndex[i],-1,total,timestamp,iter);else{thrownewIllegalArgumentException(\"更新参数时传入了非法的下标\");} "]
1113666[label="conditionalAndExpression\n predictIndex[i]>=0&&predictIndex[i]<parameter.length "]
1213667[label="relationalExpression\n predictIndex[i]>=0 "]
1313668[label="arrayAccess_lfno_primary\n predictIndex[i] "]
1413669[label="expressionName\n predictIndex "]
1413670[label="expressionName\n i "]
1313671[label="literal\n 0 "]
1213672[label="relationalExpression\n predictIndex[i]<parameter.length "]
1313673[label="arrayAccess_lfno_primary\n predictIndex[i] "]
1413674[label="expressionName\n predictIndex "]
1413675[label="expressionName\n i "]
1313676[label="expressionName\n parameter.length "]
1413677[label="ambiguousName\n parameter "]
1113678[label="expressionStatement\n update(predictIndex[i],-1,total,timestamp,iter); "]
1213679[label="methodInvocation\n update(predictIndex[i],-1,total,timestamp,iter) "]
1313680[label="methodName\n update "]
1313681[label="argumentList\n predictIndex[i],-1,total,timestamp,iter "]
1413682[label="arrayAccess_lfno_primary\n predictIndex[i] "]
1513683[label="expressionName\n predictIndex "]
1513684[label="expressionName\n i "]
1413685[label="unaryExpression\n -1 "]
1513686[label="literal\n 1 "]
1413687[label="expressionName\n total "]
1413688[label="expressionName\n timestamp "]
1413689[label="expressionName\n iter "]
1113690[label="block\n {thrownewIllegalArgumentException(\"更新参数时传入了非法的下标\");} "]
1213691[label="throwStatement\n thrownewIllegalArgumentException(\"更新参数时传入了非法的下标\"); "]
1313692[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"更新参数时传入了非法的下标\") "]
1413693[label="literal\n \"更新参数时传入了非法的下标\" "]
313694[label="methodDeclaration\n privatevoidupdate(intindex,floatvalue,double[]total,int[]timestamp,intcurrent){intpassed=current-timestamp[index];total[index]+=passed*parameter[index];parameter[index]+=value;timestamp[index]=current;} "]
413695[label="methodModifier\n private "]
413696[label="methodHeader\n voidupdate(intindex,floatvalue,double[]total,int[]timestamp,intcurrent) "]
513697[label="result\n void "]
513698[label="methodDeclarator\n update(intindex,floatvalue,double[]total,int[]timestamp,intcurrent) "]
613699[label="formalParameterList\n intindex,floatvalue,double[]total,int[]timestamp,intcurrent "]
713700[label="formalParameters\n intindex,floatvalue,double[]total,int[]timestamp "]
813701[label="formalParameter\n intindex "]
913702[label="integralType\n int "]
913703[label="variableDeclaratorId\n index "]
813704[label="formalParameter\n floatvalue "]
913705[label="floatingPointType\n float "]
913706[label="variableDeclaratorId\n value "]
813707[label="formalParameter\n double[]total "]
913708[label="unannArrayType\n double[] "]
1013709[label="floatingPointType\n double "]
1013710[label="dims\n [] "]
913711[label="variableDeclaratorId\n total "]
813712[label="formalParameter\n int[]timestamp "]
913713[label="unannArrayType\n int[] "]
1013714[label="integralType\n int "]
1013715[label="dims\n [] "]
913716[label="variableDeclaratorId\n timestamp "]
713717[label="formalParameter\n intcurrent "]
813718[label="integralType\n int "]
813719[label="variableDeclaratorId\n current "]
413720[label="block\n {intpassed=current-timestamp[index];total[index]+=passed*parameter[index];parameter[index]+=value;timestamp[index]=current;} "]
513721[label="blockStatements\n intpassed=current-timestamp[index];total[index]+=passed*parameter[index];parameter[index]+=value;timestamp[index]=current; "]
613722[label="localVariableDeclarationStatement\n intpassed=current-timestamp[index]; "]
713723[label="localVariableDeclaration\n intpassed=current-timestamp[index] "]
813724[label="integralType\n int "]
813725[label="variableDeclarator\n passed=current-timestamp[index] "]
913726[label="variableDeclaratorId\n passed "]
913727[label="additiveExpression\n current-timestamp[index] "]
1013728[label="expressionName\n current "]
1013729[label="arrayAccess_lfno_primary\n timestamp[index] "]
1113730[label="expressionName\n timestamp "]
1113731[label="expressionName\n index "]
613732[label="expressionStatement\n total[index]+=passed*parameter[index]; "]
713733[label="assignment\n total[index]+=passed*parameter[index] "]
813734[label="arrayAccess\n total[index] "]
913735[label="expressionName\n total "]
913736[label="expressionName\n index "]
813737[label="assignmentOperator\n += "]
813738[label="multiplicativeExpression\n passed*parameter[index] "]
913739[label="expressionName\n passed "]
913740[label="arrayAccess_lfno_primary\n parameter[index] "]
1013741[label="expressionName\n parameter "]
1013742[label="expressionName\n index "]
613743[label="expressionStatement\n parameter[index]+=value; "]
713744[label="assignment\n parameter[index]+=value "]
813745[label="arrayAccess\n parameter[index] "]
913746[label="expressionName\n parameter "]
913747[label="expressionName\n index "]
813748[label="assignmentOperator\n += "]
813749[label="expressionName\n value "]
613750[label="expressionStatement\n timestamp[index]=current; "]
713751[label="assignment\n timestamp[index]=current "]
813752[label="arrayAccess\n timestamp[index] "]
913753[label="expressionName\n timestamp "]
913754[label="expressionName\n index "]
813755[label="assignmentOperator\n = "]
813756[label="expressionName\n current "]
313757[label="methodDeclaration\n publicvoidaverage(double[]total,int[]timestamp,intcurrent){for(inti=0;i<parameter.length;i++){parameter[i]=(float)((total[i]+(current-timestamp[i])*parameter[i])/current);}} "]
413758[label="methodModifier\n public "]
413759[label="methodHeader\n voidaverage(double[]total,int[]timestamp,intcurrent) "]
513760[label="result\n void "]
513761[label="methodDeclarator\n average(double[]total,int[]timestamp,intcurrent) "]
613762[label="formalParameterList\n double[]total,int[]timestamp,intcurrent "]
713763[label="formalParameters\n double[]total,int[]timestamp "]
813764[label="formalParameter\n double[]total "]
913765[label="unannArrayType\n double[] "]
1013766[label="floatingPointType\n double "]
1013767[label="dims\n [] "]
913768[label="variableDeclaratorId\n total "]
813769[label="formalParameter\n int[]timestamp "]
913770[label="unannArrayType\n int[] "]
1013771[label="integralType\n int "]
1013772[label="dims\n [] "]
913773[label="variableDeclaratorId\n timestamp "]
713774[label="formalParameter\n intcurrent "]
813775[label="integralType\n int "]
813776[label="variableDeclaratorId\n current "]
413777[label="block\n {for(inti=0;i<parameter.length;i++){parameter[i]=(float)((total[i]+(current-timestamp[i])*parameter[i])/current);}} "]
513778[label="basicForStatement\n for(inti=0;i<parameter.length;i++){parameter[i]=(float)((total[i]+(current-timestamp[i])*parameter[i])/current);} "]
613779[label="localVariableDeclaration\n inti=0 "]
713780[label="integralType\n int "]
713781[label="variableDeclarator\n i=0 "]
813782[label="variableDeclaratorId\n i "]
813783[label="literal\n 0 "]
613784[label="relationalExpression\n i<parameter.length "]
713785[label="expressionName\n i "]
713786[label="expressionName\n parameter.length "]
813787[label="ambiguousName\n parameter "]
613788[label="postIncrementExpression\n i++ "]
713789[label="expressionName\n i "]
613790[label="block\n {parameter[i]=(float)((total[i]+(current-timestamp[i])*parameter[i])/current);} "]
713791[label="expressionStatement\n parameter[i]=(float)((total[i]+(current-timestamp[i])*parameter[i])/current); "]
813792[label="assignment\n parameter[i]=(float)((total[i]+(current-timestamp[i])*parameter[i])/current) "]
913793[label="arrayAccess\n parameter[i] "]
1013794[label="expressionName\n parameter "]
1013795[label="expressionName\n i "]
913796[label="assignmentOperator\n = "]
913797[label="castExpression\n (float)((total[i]+(current-timestamp[i])*parameter[i])/current) "]
1013798[label="floatingPointType\n float "]
1013799[label="primaryNoNewArray_lfno_primary\n ((total[i]+(current-timestamp[i])*parameter[i])/current) "]
1113800[label="multiplicativeExpression\n (total[i]+(current-timestamp[i])*parameter[i])/current "]
1213801[label="primaryNoNewArray_lfno_primary\n (total[i]+(current-timestamp[i])*parameter[i]) "]
1313802[label="additiveExpression\n total[i]+(current-timestamp[i])*parameter[i] "]
1413803[label="arrayAccess_lfno_primary\n total[i] "]
1513804[label="expressionName\n total "]
1513805[label="expressionName\n i "]
1413806[label="multiplicativeExpression\n (current-timestamp[i])*parameter[i] "]
1513807[label="primaryNoNewArray_lfno_primary\n (current-timestamp[i]) "]
1613808[label="additiveExpression\n current-timestamp[i] "]
1713809[label="expressionName\n current "]
1713810[label="arrayAccess_lfno_primary\n timestamp[i] "]
1813811[label="expressionName\n timestamp "]
1813812[label="expressionName\n i "]
1513813[label="arrayAccess_lfno_primary\n parameter[i] "]
1613814[label="expressionName\n parameter "]
1613815[label="expressionName\n i "]
1213816[label="expressionName\n current "]
013817[label="compilationUnit\n packagecom.hankcs.hanlp.classification.corpus;importcom.hankcs.hanlp.classification.collections.FrequencyMap;publicclassBagOfWordsDocumentimplementsITermFrequencyHolder{publicFrequencyMap<Integer>tfMap;publicBagOfWordsDocument(){tfMap=newFrequencyMap<Integer>();}publicFrequencyMap<Integer>getTfMap(){returntfMap;}publicbooleanisEmpty(){returntfMap.isEmpty();}}<EOF> "]
113818[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.corpus; "]
213819[label="packageName\n com.hankcs.hanlp.classification.corpus "]
313820[label="packageName\n com.hankcs.hanlp.classification "]
413821[label="packageName\n com.hankcs.hanlp "]
513822[label="packageName\n com.hankcs "]
613823[label="packageName\n com "]
113824[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.collections.FrequencyMap; "]
213825[label="typeName\n com.hankcs.hanlp.classification.collections.FrequencyMap "]
313826[label="packageOrTypeName\n com.hankcs.hanlp.classification.collections "]
413827[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
513828[label="packageOrTypeName\n com.hankcs.hanlp "]
613829[label="packageOrTypeName\n com.hankcs "]
713830[label="packageOrTypeName\n com "]
113831[label="normalClassDeclaration\n publicclassBagOfWordsDocumentimplementsITermFrequencyHolder{publicFrequencyMap<Integer>tfMap;publicBagOfWordsDocument(){tfMap=newFrequencyMap<Integer>();}publicFrequencyMap<Integer>getTfMap(){returntfMap;}publicbooleanisEmpty(){returntfMap.isEmpty();}} "]
213832[label="classModifier\n public "]
213833[label="superinterfaces\n implementsITermFrequencyHolder "]
313834[label="classType\n ITermFrequencyHolder "]
213835[label="classBody\n {publicFrequencyMap<Integer>tfMap;publicBagOfWordsDocument(){tfMap=newFrequencyMap<Integer>();}publicFrequencyMap<Integer>getTfMap(){returntfMap;}publicbooleanisEmpty(){returntfMap.isEmpty();}} "]
313836[label="fieldDeclaration\n publicFrequencyMap<Integer>tfMap; "]
413837[label="fieldModifier\n public "]
413838[label="unannClassType_lfno_unannClassOrInterfaceType\n FrequencyMap<Integer> "]
513839[label="typeArguments\n <Integer> "]
613840[label="classType_lfno_classOrInterfaceType\n Integer "]
413841[label="variableDeclaratorId\n tfMap "]
313842[label="constructorDeclaration\n publicBagOfWordsDocument(){tfMap=newFrequencyMap<Integer>();} "]
413843[label="constructorModifier\n public "]
413844[label="constructorDeclarator\n BagOfWordsDocument() "]
513845[label="simpleTypeName\n BagOfWordsDocument "]
413846[label="constructorBody\n {tfMap=newFrequencyMap<Integer>();} "]
513847[label="expressionStatement\n tfMap=newFrequencyMap<Integer>(); "]
613848[label="assignment\n tfMap=newFrequencyMap<Integer>() "]
713849[label="expressionName\n tfMap "]
713850[label="assignmentOperator\n = "]
713851[label="classInstanceCreationExpression_lfno_primary\n newFrequencyMap<Integer>() "]
813852[label="typeArguments\n <Integer> "]
913853[label="classType_lfno_classOrInterfaceType\n Integer "]
313854[label="methodDeclaration\n publicFrequencyMap<Integer>getTfMap(){returntfMap;} "]
413855[label="methodModifier\n public "]
413856[label="methodHeader\n FrequencyMap<Integer>getTfMap() "]
513857[label="unannClassType_lfno_unannClassOrInterfaceType\n FrequencyMap<Integer> "]
613858[label="typeArguments\n <Integer> "]
713859[label="classType_lfno_classOrInterfaceType\n Integer "]
513860[label="methodDeclarator\n getTfMap() "]
413861[label="block\n {returntfMap;} "]
513862[label="returnStatement\n returntfMap; "]
613863[label="expressionName\n tfMap "]
313864[label="methodDeclaration\n publicbooleanisEmpty(){returntfMap.isEmpty();} "]
413865[label="methodModifier\n public "]
413866[label="methodHeader\n booleanisEmpty() "]
513867[label="unannPrimitiveType\n boolean "]
513868[label="methodDeclarator\n isEmpty() "]
413869[label="block\n {returntfMap.isEmpty();} "]
513870[label="returnStatement\n returntfMap.isEmpty(); "]
613871[label="methodInvocation_lfno_primary\n tfMap.isEmpty() "]
713872[label="typeName\n tfMap "]
013873[label="compilationUnit\n packagecom.hankcs.hanlp.dictionary.ts;importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie;importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie;importcom.hankcs.hanlp.corpus.dictionary.StringDictionary;importcom.hankcs.hanlp.corpus.io.ByteArray;importcom.hankcs.hanlp.corpus.io.IOUtil;importcom.hankcs.hanlp.dictionary.BaseSearcher;importcom.hankcs.hanlp.dictionary.other.CharTable;importcom.hankcs.hanlp.dictionary.py.Pinyin;importcom.hankcs.hanlp.utility.Predefine;importjava.io.DataOutputStream;importjava.io.FileOutputStream;importjava.util.*;importstaticcom.hankcs.hanlp.utility.Predefine.logger;publicclassBaseChineseDictionary{staticvoidcombineChain(TreeMap<String,String>s2t,TreeMap<String,String>t2x){for(Map.Entry<String,String>entry:s2t.entrySet()){Stringx=t2x.get(entry.getValue());if(x!=null){entry.setValue(x);}}for(Map.Entry<String,String>entry:t2x.entrySet()){Strings=CharTable.convert(entry.getKey());if(!s2t.containsKey(s)){s2t.put(s,entry.getValue());}}}staticvoidcombineReverseChain(TreeMap<String,String>t2s,TreeMap<String,String>tw2t,booleanconvert){for(Map.Entry<String,String>entry:tw2t.entrySet()){Stringtw=entry.getKey();Strings=t2s.get(entry.getValue());if(s==null)s=convert?CharTable.convert(entry.getValue()):entry.getValue();t2s.put(tw,s);}}staticbooleanload(Map<String,String>storage,booleanreverse,String...pathArray){StringDictionarydictionary=newStringDictionary(\"=\");for(Stringpath:pathArray){if(!dictionary.load(path))returnfalse;}if(reverse)dictionary=dictionary.reverse();Set<Map.Entry<String,String>>entrySet=dictionary.entrySet();for(Map.Entry<String,String>entry:entrySet){storage.put(entry.getKey(),entry.getValue());}returntrue;}staticbooleanload(Stringpath,AhoCorasickDoubleArrayTrie<String>trie){returnload(path,trie,false);}staticbooleanload(Stringpath,AhoCorasickDoubleArrayTrie<String>trie,booleanreverse){StringdatPath=path;if(reverse){datPath+=Predefine.REVERSE_EXT;}if(loadDat(datPath,trie))returntrue;TreeMap<String,String>map=newTreeMap<String,String>();if(!load(map,reverse,path))returnfalse;logger.info(\"正在构建AhoCorasickDoubleArrayTrie，来源：\"+path);trie.build(map);logger.info(\"正在缓存双数组\"+datPath);saveDat(datPath,trie,map.entrySet());returntrue;}staticbooleanloadDat(Stringpath,AhoCorasickDoubleArrayTrie<String>trie){ByteArraybyteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();String[]valueArray=newString[size];for(inti=0;i<valueArray.length;++i){valueArray[i]=byteArray.nextString();}trie.load(byteArray,valueArray);returntrue;}staticbooleansaveDat(Stringpath,AhoCorasickDoubleArrayTrie<String>trie,Set<Map.Entry<String,String>>entrySet){if(trie.size()!=entrySet.size()){logger.warning(\"键值对不匹配\");returnfalse;}try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT));out.writeInt(entrySet.size());for(Map.Entry<String,String>entry:entrySet){char[]charArray=entry.getValue().toCharArray();out.writeInt(charArray.length);for(charc:charArray){out.writeChar(c);}}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"缓存值dat\"+path+\"失败\");returnfalse;}returntrue;}publicstaticBaseSearchergetSearcher(char[]charArray,DoubleArrayTrie<String>trie){returnnewSearcher(charArray,trie);}protectedstaticStringsegLongest(char[]charArray,DoubleArrayTrie<String>trie){StringBuildersb=newStringBuilder(charArray.length);BaseSearchersearcher=getSearcher(charArray,trie);Map.Entry<String,String>entry;intp=0;intoffset;while((entry=searcher.next())!=null){offset=searcher.getOffset();while(p<offset){sb.append(charArray[p]);++p;}sb.append(entry.getValue());p=offset+entry.getKey().length();}while(p<charArray.length){sb.append(charArray[p]);++p;}returnsb.toString();}protectedstaticStringsegLongest(char[]charArray,AhoCorasickDoubleArrayTrie<String>trie){finalString[]wordNet=newString[charArray.length];finalint[]lengthNet=newint[charArray.length];trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){intlength=end-begin;if(length>lengthNet[begin]){wordNet[begin]=value;lengthNet[begin]=length;}}});StringBuildersb=newStringBuilder(charArray.length);for(intoffset=0;offset<wordNet.length;){if(wordNet[offset]==null){sb.append(charArray[offset]);++offset;continue;}sb.append(wordNet[offset]);offset+=lengthNet[offset];}returnsb.toString();}publicstaticclassSearcherextendsBaseSearcher<String>{intbegin;DoubleArrayTrie<String>trie;protectedSearcher(char[]c,DoubleArrayTrie<String>trie){super(c);this.trie=trie;}protectedSearcher(Stringtext,DoubleArrayTrie<String>trie){super(text);this.trie=trie;}@OverridepublicMap.Entry<String,String>next(){Map.Entry<String,String>result=null;while(begin<c.length){LinkedList<Map.Entry<String,String>>entryList=trie.commonPrefixSearchWithValue(c,begin);if(entryList.size()==0){++begin;}else{result=entryList.getLast();offset=begin;begin+=result.getKey().length();break;}}if(result==null){returnnull;}returnresult;}}}<EOF> "]
113874[label="packageDeclaration\n packagecom.hankcs.hanlp.dictionary.ts; "]
213875[label="packageName\n com.hankcs.hanlp.dictionary.ts "]
313876[label="packageName\n com.hankcs.hanlp.dictionary "]
413877[label="packageName\n com.hankcs.hanlp "]
513878[label="packageName\n com.hankcs "]
613879[label="packageName\n com "]
113880[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie; "]
213881[label="typeName\n com.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie "]
313882[label="packageOrTypeName\n com.hankcs.hanlp.collection.AhoCorasick "]
413883[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
513884[label="packageOrTypeName\n com.hankcs.hanlp "]
613885[label="packageOrTypeName\n com.hankcs "]
713886[label="packageOrTypeName\n com "]
113887[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie; "]
213888[label="typeName\n com.hankcs.hanlp.collection.trie.DoubleArrayTrie "]
313889[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
413890[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
513891[label="packageOrTypeName\n com.hankcs.hanlp "]
613892[label="packageOrTypeName\n com.hankcs "]
713893[label="packageOrTypeName\n com "]
113894[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dictionary.StringDictionary; "]
213895[label="typeName\n com.hankcs.hanlp.corpus.dictionary.StringDictionary "]
313896[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dictionary "]
413897[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
513898[label="packageOrTypeName\n com.hankcs.hanlp "]
613899[label="packageOrTypeName\n com.hankcs "]
713900[label="packageOrTypeName\n com "]
113901[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.ByteArray; "]
213902[label="typeName\n com.hankcs.hanlp.corpus.io.ByteArray "]
313903[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
413904[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
513905[label="packageOrTypeName\n com.hankcs.hanlp "]
613906[label="packageOrTypeName\n com.hankcs "]
713907[label="packageOrTypeName\n com "]
113908[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
213909[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
313910[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
413911[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
513912[label="packageOrTypeName\n com.hankcs.hanlp "]
613913[label="packageOrTypeName\n com.hankcs "]
713914[label="packageOrTypeName\n com "]
113915[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dictionary.BaseSearcher; "]
213916[label="typeName\n com.hankcs.hanlp.dictionary.BaseSearcher "]
313917[label="packageOrTypeName\n com.hankcs.hanlp.dictionary "]
413918[label="packageOrTypeName\n com.hankcs.hanlp "]
513919[label="packageOrTypeName\n com.hankcs "]
613920[label="packageOrTypeName\n com "]
113921[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dictionary.other.CharTable; "]
213922[label="typeName\n com.hankcs.hanlp.dictionary.other.CharTable "]
313923[label="packageOrTypeName\n com.hankcs.hanlp.dictionary.other "]
413924[label="packageOrTypeName\n com.hankcs.hanlp.dictionary "]
513925[label="packageOrTypeName\n com.hankcs.hanlp "]
613926[label="packageOrTypeName\n com.hankcs "]
713927[label="packageOrTypeName\n com "]
113928[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dictionary.py.Pinyin; "]
213929[label="typeName\n com.hankcs.hanlp.dictionary.py.Pinyin "]
313930[label="packageOrTypeName\n com.hankcs.hanlp.dictionary.py "]
413931[label="packageOrTypeName\n com.hankcs.hanlp.dictionary "]
513932[label="packageOrTypeName\n com.hankcs.hanlp "]
613933[label="packageOrTypeName\n com.hankcs "]
713934[label="packageOrTypeName\n com "]
113935[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.Predefine; "]
213936[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
313937[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
413938[label="packageOrTypeName\n com.hankcs.hanlp "]
513939[label="packageOrTypeName\n com.hankcs "]
613940[label="packageOrTypeName\n com "]
113941[label="singleTypeImportDeclaration\n importjava.io.DataOutputStream; "]
213942[label="typeName\n java.io.DataOutputStream "]
313943[label="packageOrTypeName\n java.io "]
413944[label="packageOrTypeName\n java "]
113945[label="singleTypeImportDeclaration\n importjava.io.FileOutputStream; "]
213946[label="typeName\n java.io.FileOutputStream "]
313947[label="packageOrTypeName\n java.io "]
413948[label="packageOrTypeName\n java "]
113949[label="typeImportOnDemandDeclaration\n importjava.util.*; "]
213950[label="packageOrTypeName\n java.util "]
313951[label="packageOrTypeName\n java "]
113952[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.utility.Predefine.logger; "]
213953[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
313954[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
413955[label="packageOrTypeName\n com.hankcs.hanlp "]
513956[label="packageOrTypeName\n com.hankcs "]
613957[label="packageOrTypeName\n com "]
113958[label="normalClassDeclaration\n publicclassBaseChineseDictionary{staticvoidcombineChain(TreeMap<String,String>s2t,TreeMap<String,String>t2x){for(Map.Entry<String,String>entry:s2t.entrySet()){Stringx=t2x.get(entry.getValue());if(x!=null){entry.setValue(x);}}for(Map.Entry<String,String>entry:t2x.entrySet()){Strings=CharTable.convert(entry.getKey());if(!s2t.containsKey(s)){s2t.put(s,entry.getValue());}}}staticvoidcombineReverseChain(TreeMap<String,String>t2s,TreeMap<String,String>tw2t,booleanconvert){for(Map.Entry<String,String>entry:tw2t.entrySet()){Stringtw=entry.getKey();Strings=t2s.get(entry.getValue());if(s==null)s=convert?CharTable.convert(entry.getValue()):entry.getValue();t2s.put(tw,s);}}staticbooleanload(Map<String,String>storage,booleanreverse,String...pathArray){StringDictionarydictionary=newStringDictionary(\"=\");for(Stringpath:pathArray){if(!dictionary.load(path))returnfalse;}if(reverse)dictionary=dictionary.reverse();Set<Map.Entry<String,String>>entrySet=dictionary.entrySet();for(Map.Entry<String,String>entry:entrySet){storage.put(entry.getKey(),entry.getValue());}returntrue;}staticbooleanload(Stringpath,AhoCorasickDoubleArrayTrie<String>trie){returnload(path,trie,false);}staticbooleanload(Stringpath,AhoCorasickDoubleArrayTrie<String>trie,booleanreverse){StringdatPath=path;if(reverse){datPath+=Predefine.REVERSE_EXT;}if(loadDat(datPath,trie))returntrue;TreeMap<String,String>map=newTreeMap<String,String>();if(!load(map,reverse,path))returnfalse;logger.info(\"正在构建AhoCorasickDoubleArrayTrie，来源：\"+path);trie.build(map);logger.info(\"正在缓存双数组\"+datPath);saveDat(datPath,trie,map.entrySet());returntrue;}staticbooleanloadDat(Stringpath,AhoCorasickDoubleArrayTrie<String>trie){ByteArraybyteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();String[]valueArray=newString[size];for(inti=0;i<valueArray.length;++i){valueArray[i]=byteArray.nextString();}trie.load(byteArray,valueArray);returntrue;}staticbooleansaveDat(Stringpath,AhoCorasickDoubleArrayTrie<String>trie,Set<Map.Entry<String,String>>entrySet){if(trie.size()!=entrySet.size()){logger.warning(\"键值对不匹配\");returnfalse;}try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT));out.writeInt(entrySet.size());for(Map.Entry<String,String>entry:entrySet){char[]charArray=entry.getValue().toCharArray();out.writeInt(charArray.length);for(charc:charArray){out.writeChar(c);}}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"缓存值dat\"+path+\"失败\");returnfalse;}returntrue;}publicstaticBaseSearchergetSearcher(char[]charArray,DoubleArrayTrie<String>trie){returnnewSearcher(charArray,trie);}protectedstaticStringsegLongest(char[]charArray,DoubleArrayTrie<String>trie){StringBuildersb=newStringBuilder(charArray.length);BaseSearchersearcher=getSearcher(charArray,trie);Map.Entry<String,String>entry;intp=0;intoffset;while((entry=searcher.next())!=null){offset=searcher.getOffset();while(p<offset){sb.append(charArray[p]);++p;}sb.append(entry.getValue());p=offset+entry.getKey().length();}while(p<charArray.length){sb.append(charArray[p]);++p;}returnsb.toString();}protectedstaticStringsegLongest(char[]charArray,AhoCorasickDoubleArrayTrie<String>trie){finalString[]wordNet=newString[charArray.length];finalint[]lengthNet=newint[charArray.length];trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){intlength=end-begin;if(length>lengthNet[begin]){wordNet[begin]=value;lengthNet[begin]=length;}}});StringBuildersb=newStringBuilder(charArray.length);for(intoffset=0;offset<wordNet.length;){if(wordNet[offset]==null){sb.append(charArray[offset]);++offset;continue;}sb.append(wordNet[offset]);offset+=lengthNet[offset];}returnsb.toString();}publicstaticclassSearcherextendsBaseSearcher<String>{intbegin;DoubleArrayTrie<String>trie;protectedSearcher(char[]c,DoubleArrayTrie<String>trie){super(c);this.trie=trie;}protectedSearcher(Stringtext,DoubleArrayTrie<String>trie){super(text);this.trie=trie;}@OverridepublicMap.Entry<String,String>next(){Map.Entry<String,String>result=null;while(begin<c.length){LinkedList<Map.Entry<String,String>>entryList=trie.commonPrefixSearchWithValue(c,begin);if(entryList.size()==0){++begin;}else{result=entryList.getLast();offset=begin;begin+=result.getKey().length();break;}}if(result==null){returnnull;}returnresult;}}} "]
213959[label="classModifier\n public "]
213960[label="classBody\n {staticvoidcombineChain(TreeMap<String,String>s2t,TreeMap<String,String>t2x){for(Map.Entry<String,String>entry:s2t.entrySet()){Stringx=t2x.get(entry.getValue());if(x!=null){entry.setValue(x);}}for(Map.Entry<String,String>entry:t2x.entrySet()){Strings=CharTable.convert(entry.getKey());if(!s2t.containsKey(s)){s2t.put(s,entry.getValue());}}}staticvoidcombineReverseChain(TreeMap<String,String>t2s,TreeMap<String,String>tw2t,booleanconvert){for(Map.Entry<String,String>entry:tw2t.entrySet()){Stringtw=entry.getKey();Strings=t2s.get(entry.getValue());if(s==null)s=convert?CharTable.convert(entry.getValue()):entry.getValue();t2s.put(tw,s);}}staticbooleanload(Map<String,String>storage,booleanreverse,String...pathArray){StringDictionarydictionary=newStringDictionary(\"=\");for(Stringpath:pathArray){if(!dictionary.load(path))returnfalse;}if(reverse)dictionary=dictionary.reverse();Set<Map.Entry<String,String>>entrySet=dictionary.entrySet();for(Map.Entry<String,String>entry:entrySet){storage.put(entry.getKey(),entry.getValue());}returntrue;}staticbooleanload(Stringpath,AhoCorasickDoubleArrayTrie<String>trie){returnload(path,trie,false);}staticbooleanload(Stringpath,AhoCorasickDoubleArrayTrie<String>trie,booleanreverse){StringdatPath=path;if(reverse){datPath+=Predefine.REVERSE_EXT;}if(loadDat(datPath,trie))returntrue;TreeMap<String,String>map=newTreeMap<String,String>();if(!load(map,reverse,path))returnfalse;logger.info(\"正在构建AhoCorasickDoubleArrayTrie，来源：\"+path);trie.build(map);logger.info(\"正在缓存双数组\"+datPath);saveDat(datPath,trie,map.entrySet());returntrue;}staticbooleanloadDat(Stringpath,AhoCorasickDoubleArrayTrie<String>trie){ByteArraybyteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();String[]valueArray=newString[size];for(inti=0;i<valueArray.length;++i){valueArray[i]=byteArray.nextString();}trie.load(byteArray,valueArray);returntrue;}staticbooleansaveDat(Stringpath,AhoCorasickDoubleArrayTrie<String>trie,Set<Map.Entry<String,String>>entrySet){if(trie.size()!=entrySet.size()){logger.warning(\"键值对不匹配\");returnfalse;}try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT));out.writeInt(entrySet.size());for(Map.Entry<String,String>entry:entrySet){char[]charArray=entry.getValue().toCharArray();out.writeInt(charArray.length);for(charc:charArray){out.writeChar(c);}}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"缓存值dat\"+path+\"失败\");returnfalse;}returntrue;}publicstaticBaseSearchergetSearcher(char[]charArray,DoubleArrayTrie<String>trie){returnnewSearcher(charArray,trie);}protectedstaticStringsegLongest(char[]charArray,DoubleArrayTrie<String>trie){StringBuildersb=newStringBuilder(charArray.length);BaseSearchersearcher=getSearcher(charArray,trie);Map.Entry<String,String>entry;intp=0;intoffset;while((entry=searcher.next())!=null){offset=searcher.getOffset();while(p<offset){sb.append(charArray[p]);++p;}sb.append(entry.getValue());p=offset+entry.getKey().length();}while(p<charArray.length){sb.append(charArray[p]);++p;}returnsb.toString();}protectedstaticStringsegLongest(char[]charArray,AhoCorasickDoubleArrayTrie<String>trie){finalString[]wordNet=newString[charArray.length];finalint[]lengthNet=newint[charArray.length];trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){intlength=end-begin;if(length>lengthNet[begin]){wordNet[begin]=value;lengthNet[begin]=length;}}});StringBuildersb=newStringBuilder(charArray.length);for(intoffset=0;offset<wordNet.length;){if(wordNet[offset]==null){sb.append(charArray[offset]);++offset;continue;}sb.append(wordNet[offset]);offset+=lengthNet[offset];}returnsb.toString();}publicstaticclassSearcherextendsBaseSearcher<String>{intbegin;DoubleArrayTrie<String>trie;protectedSearcher(char[]c,DoubleArrayTrie<String>trie){super(c);this.trie=trie;}protectedSearcher(Stringtext,DoubleArrayTrie<String>trie){super(text);this.trie=trie;}@OverridepublicMap.Entry<String,String>next(){Map.Entry<String,String>result=null;while(begin<c.length){LinkedList<Map.Entry<String,String>>entryList=trie.commonPrefixSearchWithValue(c,begin);if(entryList.size()==0){++begin;}else{result=entryList.getLast();offset=begin;begin+=result.getKey().length();break;}}if(result==null){returnnull;}returnresult;}}} "]
313961[label="methodDeclaration\n staticvoidcombineChain(TreeMap<String,String>s2t,TreeMap<String,String>t2x){for(Map.Entry<String,String>entry:s2t.entrySet()){Stringx=t2x.get(entry.getValue());if(x!=null){entry.setValue(x);}}for(Map.Entry<String,String>entry:t2x.entrySet()){Strings=CharTable.convert(entry.getKey());if(!s2t.containsKey(s)){s2t.put(s,entry.getValue());}}} "]
413962[label="methodModifier\n static "]
413963[label="methodHeader\n voidcombineChain(TreeMap<String,String>s2t,TreeMap<String,String>t2x) "]
513964[label="result\n void "]
513965[label="methodDeclarator\n combineChain(TreeMap<String,String>s2t,TreeMap<String,String>t2x) "]
613966[label="formalParameterList\n TreeMap<String,String>s2t,TreeMap<String,String>t2x "]
713967[label="formalParameter\n TreeMap<String,String>s2t "]
813968[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
913969[label="typeArguments\n <String,String> "]
1013970[label="typeArgumentList\n String,String "]
1113971[label="classType_lfno_classOrInterfaceType\n String "]
1113972[label="classType_lfno_classOrInterfaceType\n String "]
813973[label="variableDeclaratorId\n s2t "]
713974[label="formalParameter\n TreeMap<String,String>t2x "]
813975[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
913976[label="typeArguments\n <String,String> "]
1013977[label="typeArgumentList\n String,String "]
1113978[label="classType_lfno_classOrInterfaceType\n String "]
1113979[label="classType_lfno_classOrInterfaceType\n String "]
813980[label="variableDeclaratorId\n t2x "]
413981[label="block\n {for(Map.Entry<String,String>entry:s2t.entrySet()){Stringx=t2x.get(entry.getValue());if(x!=null){entry.setValue(x);}}for(Map.Entry<String,String>entry:t2x.entrySet()){Strings=CharTable.convert(entry.getKey());if(!s2t.containsKey(s)){s2t.put(s,entry.getValue());}}} "]
513982[label="blockStatements\n for(Map.Entry<String,String>entry:s2t.entrySet()){Stringx=t2x.get(entry.getValue());if(x!=null){entry.setValue(x);}}for(Map.Entry<String,String>entry:t2x.entrySet()){Strings=CharTable.convert(entry.getKey());if(!s2t.containsKey(s)){s2t.put(s,entry.getValue());}} "]
613983[label="enhancedForStatement\n for(Map.Entry<String,String>entry:s2t.entrySet()){Stringx=t2x.get(entry.getValue());if(x!=null){entry.setValue(x);}} "]
713984[label="unannClassOrInterfaceType\n Map.Entry<String,String> "]
813985[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
813986[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String> "]
913987[label="typeArguments\n <String,String> "]
1013988[label="typeArgumentList\n String,String "]
1113989[label="classType_lfno_classOrInterfaceType\n String "]
1113990[label="classType_lfno_classOrInterfaceType\n String "]
713991[label="variableDeclaratorId\n entry "]
713992[label="methodInvocation_lfno_primary\n s2t.entrySet() "]
813993[label="typeName\n s2t "]
713994[label="block\n {Stringx=t2x.get(entry.getValue());if(x!=null){entry.setValue(x);}} "]
813995[label="blockStatements\n Stringx=t2x.get(entry.getValue());if(x!=null){entry.setValue(x);} "]
913996[label="localVariableDeclarationStatement\n Stringx=t2x.get(entry.getValue()); "]
1013997[label="localVariableDeclaration\n Stringx=t2x.get(entry.getValue()) "]
1113998[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1113999[label="variableDeclarator\n x=t2x.get(entry.getValue()) "]
1214000[label="variableDeclaratorId\n x "]
1214001[label="methodInvocation_lfno_primary\n t2x.get(entry.getValue()) "]
1314002[label="typeName\n t2x "]
1314003[label="methodInvocation_lfno_primary\n entry.getValue() "]
1414004[label="typeName\n entry "]
914005[label="ifThenStatement\n if(x!=null){entry.setValue(x);} "]
1014006[label="equalityExpression\n x!=null "]
1114007[label="expressionName\n x "]
1114008[label="literal\n null "]
1014009[label="block\n {entry.setValue(x);} "]
1114010[label="expressionStatement\n entry.setValue(x); "]
1214011[label="methodInvocation\n entry.setValue(x) "]
1314012[label="typeName\n entry "]
1314013[label="expressionName\n x "]
614014[label="enhancedForStatement\n for(Map.Entry<String,String>entry:t2x.entrySet()){Strings=CharTable.convert(entry.getKey());if(!s2t.containsKey(s)){s2t.put(s,entry.getValue());}} "]
714015[label="unannClassOrInterfaceType\n Map.Entry<String,String> "]
814016[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
814017[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String> "]
914018[label="typeArguments\n <String,String> "]
1014019[label="typeArgumentList\n String,String "]
1114020[label="classType_lfno_classOrInterfaceType\n String "]
1114021[label="classType_lfno_classOrInterfaceType\n String "]
714022[label="variableDeclaratorId\n entry "]
714023[label="methodInvocation_lfno_primary\n t2x.entrySet() "]
814024[label="typeName\n t2x "]
714025[label="block\n {Strings=CharTable.convert(entry.getKey());if(!s2t.containsKey(s)){s2t.put(s,entry.getValue());}} "]
814026[label="blockStatements\n Strings=CharTable.convert(entry.getKey());if(!s2t.containsKey(s)){s2t.put(s,entry.getValue());} "]
914027[label="localVariableDeclarationStatement\n Strings=CharTable.convert(entry.getKey()); "]
1014028[label="localVariableDeclaration\n Strings=CharTable.convert(entry.getKey()) "]
1114029[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1114030[label="variableDeclarator\n s=CharTable.convert(entry.getKey()) "]
1214031[label="variableDeclaratorId\n s "]
1214032[label="methodInvocation_lfno_primary\n CharTable.convert(entry.getKey()) "]
1314033[label="typeName\n CharTable "]
1314034[label="methodInvocation_lfno_primary\n entry.getKey() "]
1414035[label="typeName\n entry "]
914036[label="ifThenStatement\n if(!s2t.containsKey(s)){s2t.put(s,entry.getValue());} "]
1014037[label="unaryExpressionNotPlusMinus\n !s2t.containsKey(s) "]
1114038[label="methodInvocation_lfno_primary\n s2t.containsKey(s) "]
1214039[label="typeName\n s2t "]
1214040[label="expressionName\n s "]
1014041[label="block\n {s2t.put(s,entry.getValue());} "]
1114042[label="expressionStatement\n s2t.put(s,entry.getValue()); "]
1214043[label="methodInvocation\n s2t.put(s,entry.getValue()) "]
1314044[label="typeName\n s2t "]
1314045[label="argumentList\n s,entry.getValue() "]
1414046[label="expressionName\n s "]
1414047[label="methodInvocation_lfno_primary\n entry.getValue() "]
1514048[label="typeName\n entry "]
314049[label="methodDeclaration\n staticvoidcombineReverseChain(TreeMap<String,String>t2s,TreeMap<String,String>tw2t,booleanconvert){for(Map.Entry<String,String>entry:tw2t.entrySet()){Stringtw=entry.getKey();Strings=t2s.get(entry.getValue());if(s==null)s=convert?CharTable.convert(entry.getValue()):entry.getValue();t2s.put(tw,s);}} "]
414050[label="methodModifier\n static "]
414051[label="methodHeader\n voidcombineReverseChain(TreeMap<String,String>t2s,TreeMap<String,String>tw2t,booleanconvert) "]
514052[label="result\n void "]
514053[label="methodDeclarator\n combineReverseChain(TreeMap<String,String>t2s,TreeMap<String,String>tw2t,booleanconvert) "]
614054[label="formalParameterList\n TreeMap<String,String>t2s,TreeMap<String,String>tw2t,booleanconvert "]
714055[label="formalParameters\n TreeMap<String,String>t2s,TreeMap<String,String>tw2t "]
814056[label="formalParameter\n TreeMap<String,String>t2s "]
914057[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
1014058[label="typeArguments\n <String,String> "]
1114059[label="typeArgumentList\n String,String "]
1214060[label="classType_lfno_classOrInterfaceType\n String "]
1214061[label="classType_lfno_classOrInterfaceType\n String "]
914062[label="variableDeclaratorId\n t2s "]
814063[label="formalParameter\n TreeMap<String,String>tw2t "]
914064[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
1014065[label="typeArguments\n <String,String> "]
1114066[label="typeArgumentList\n String,String "]
1214067[label="classType_lfno_classOrInterfaceType\n String "]
1214068[label="classType_lfno_classOrInterfaceType\n String "]
914069[label="variableDeclaratorId\n tw2t "]
714070[label="formalParameter\n booleanconvert "]
814071[label="unannPrimitiveType\n boolean "]
814072[label="variableDeclaratorId\n convert "]
414073[label="block\n {for(Map.Entry<String,String>entry:tw2t.entrySet()){Stringtw=entry.getKey();Strings=t2s.get(entry.getValue());if(s==null)s=convert?CharTable.convert(entry.getValue()):entry.getValue();t2s.put(tw,s);}} "]
514074[label="enhancedForStatement\n for(Map.Entry<String,String>entry:tw2t.entrySet()){Stringtw=entry.getKey();Strings=t2s.get(entry.getValue());if(s==null)s=convert?CharTable.convert(entry.getValue()):entry.getValue();t2s.put(tw,s);} "]
614075[label="unannClassOrInterfaceType\n Map.Entry<String,String> "]
714076[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
714077[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String> "]
814078[label="typeArguments\n <String,String> "]
914079[label="typeArgumentList\n String,String "]
1014080[label="classType_lfno_classOrInterfaceType\n String "]
1014081[label="classType_lfno_classOrInterfaceType\n String "]
614082[label="variableDeclaratorId\n entry "]
614083[label="methodInvocation_lfno_primary\n tw2t.entrySet() "]
714084[label="typeName\n tw2t "]
614085[label="block\n {Stringtw=entry.getKey();Strings=t2s.get(entry.getValue());if(s==null)s=convert?CharTable.convert(entry.getValue()):entry.getValue();t2s.put(tw,s);} "]
714086[label="blockStatements\n Stringtw=entry.getKey();Strings=t2s.get(entry.getValue());if(s==null)s=convert?CharTable.convert(entry.getValue()):entry.getValue();t2s.put(tw,s); "]
814087[label="localVariableDeclarationStatement\n Stringtw=entry.getKey(); "]
914088[label="localVariableDeclaration\n Stringtw=entry.getKey() "]
1014089[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1014090[label="variableDeclarator\n tw=entry.getKey() "]
1114091[label="variableDeclaratorId\n tw "]
1114092[label="methodInvocation_lfno_primary\n entry.getKey() "]
1214093[label="typeName\n entry "]
814094[label="localVariableDeclarationStatement\n Strings=t2s.get(entry.getValue()); "]
914095[label="localVariableDeclaration\n Strings=t2s.get(entry.getValue()) "]
1014096[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1014097[label="variableDeclarator\n s=t2s.get(entry.getValue()) "]
1114098[label="variableDeclaratorId\n s "]
1114099[label="methodInvocation_lfno_primary\n t2s.get(entry.getValue()) "]
1214100[label="typeName\n t2s "]
1214101[label="methodInvocation_lfno_primary\n entry.getValue() "]
1314102[label="typeName\n entry "]
814103[label="ifThenStatement\n if(s==null)s=convert?CharTable.convert(entry.getValue()):entry.getValue(); "]
914104[label="equalityExpression\n s==null "]
1014105[label="expressionName\n s "]
1014106[label="literal\n null "]
914107[label="expressionStatement\n s=convert?CharTable.convert(entry.getValue()):entry.getValue(); "]
1014108[label="assignment\n s=convert?CharTable.convert(entry.getValue()):entry.getValue() "]
1114109[label="expressionName\n s "]
1114110[label="assignmentOperator\n = "]
1114111[label="conditionalExpression\n convert?CharTable.convert(entry.getValue()):entry.getValue() "]
1214112[label="expressionName\n convert "]
1214113[label="methodInvocation_lfno_primary\n CharTable.convert(entry.getValue()) "]
1314114[label="typeName\n CharTable "]
1314115[label="methodInvocation_lfno_primary\n entry.getValue() "]
1414116[label="typeName\n entry "]
1214117[label="methodInvocation_lfno_primary\n entry.getValue() "]
1314118[label="typeName\n entry "]
814119[label="expressionStatement\n t2s.put(tw,s); "]
914120[label="methodInvocation\n t2s.put(tw,s) "]
1014121[label="typeName\n t2s "]
1014122[label="argumentList\n tw,s "]
1114123[label="expressionName\n tw "]
1114124[label="expressionName\n s "]
314125[label="methodDeclaration\n staticbooleanload(Map<String,String>storage,booleanreverse,String...pathArray){StringDictionarydictionary=newStringDictionary(\"=\");for(Stringpath:pathArray){if(!dictionary.load(path))returnfalse;}if(reverse)dictionary=dictionary.reverse();Set<Map.Entry<String,String>>entrySet=dictionary.entrySet();for(Map.Entry<String,String>entry:entrySet){storage.put(entry.getKey(),entry.getValue());}returntrue;} "]
414126[label="methodModifier\n static "]
414127[label="methodHeader\n booleanload(Map<String,String>storage,booleanreverse,String...pathArray) "]
514128[label="unannPrimitiveType\n boolean "]
514129[label="methodDeclarator\n load(Map<String,String>storage,booleanreverse,String...pathArray) "]
614130[label="formalParameterList\n Map<String,String>storage,booleanreverse,String...pathArray "]
714131[label="formalParameters\n Map<String,String>storage,booleanreverse "]
814132[label="formalParameter\n Map<String,String>storage "]
914133[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
1014134[label="typeArguments\n <String,String> "]
1114135[label="typeArgumentList\n String,String "]
1214136[label="classType_lfno_classOrInterfaceType\n String "]
1214137[label="classType_lfno_classOrInterfaceType\n String "]
914138[label="variableDeclaratorId\n storage "]
814139[label="formalParameter\n booleanreverse "]
914140[label="unannPrimitiveType\n boolean "]
914141[label="variableDeclaratorId\n reverse "]
714142[label="lastFormalParameter\n String...pathArray "]
814143[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
814144[label="variableDeclaratorId\n pathArray "]
414145[label="block\n {StringDictionarydictionary=newStringDictionary(\"=\");for(Stringpath:pathArray){if(!dictionary.load(path))returnfalse;}if(reverse)dictionary=dictionary.reverse();Set<Map.Entry<String,String>>entrySet=dictionary.entrySet();for(Map.Entry<String,String>entry:entrySet){storage.put(entry.getKey(),entry.getValue());}returntrue;} "]
514146[label="blockStatements\n StringDictionarydictionary=newStringDictionary(\"=\");for(Stringpath:pathArray){if(!dictionary.load(path))returnfalse;}if(reverse)dictionary=dictionary.reverse();Set<Map.Entry<String,String>>entrySet=dictionary.entrySet();for(Map.Entry<String,String>entry:entrySet){storage.put(entry.getKey(),entry.getValue());}returntrue; "]
614147[label="localVariableDeclarationStatement\n StringDictionarydictionary=newStringDictionary(\"=\"); "]
714148[label="localVariableDeclaration\n StringDictionarydictionary=newStringDictionary(\"=\") "]
814149[label="unannClassType_lfno_unannClassOrInterfaceType\n StringDictionary "]
814150[label="variableDeclarator\n dictionary=newStringDictionary(\"=\") "]
914151[label="variableDeclaratorId\n dictionary "]
914152[label="classInstanceCreationExpression_lfno_primary\n newStringDictionary(\"=\") "]
1014153[label="literal\n \"=\" "]
614154[label="enhancedForStatement\n for(Stringpath:pathArray){if(!dictionary.load(path))returnfalse;} "]
714155[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
714156[label="variableDeclaratorId\n path "]
714157[label="expressionName\n pathArray "]
714158[label="block\n {if(!dictionary.load(path))returnfalse;} "]
814159[label="ifThenStatement\n if(!dictionary.load(path))returnfalse; "]
914160[label="unaryExpressionNotPlusMinus\n !dictionary.load(path) "]
1014161[label="methodInvocation_lfno_primary\n dictionary.load(path) "]
1114162[label="typeName\n dictionary "]
1114163[label="expressionName\n path "]
914164[label="returnStatement\n returnfalse; "]
1014165[label="literal\n false "]
614166[label="ifThenStatement\n if(reverse)dictionary=dictionary.reverse(); "]
714167[label="expressionName\n reverse "]
714168[label="expressionStatement\n dictionary=dictionary.reverse(); "]
814169[label="assignment\n dictionary=dictionary.reverse() "]
914170[label="expressionName\n dictionary "]
914171[label="assignmentOperator\n = "]
914172[label="methodInvocation_lfno_primary\n dictionary.reverse() "]
1014173[label="typeName\n dictionary "]
614174[label="localVariableDeclarationStatement\n Set<Map.Entry<String,String>>entrySet=dictionary.entrySet(); "]
714175[label="localVariableDeclaration\n Set<Map.Entry<String,String>>entrySet=dictionary.entrySet() "]
814176[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<Map.Entry<String,String>> "]
914177[label="typeArguments\n <Map.Entry<String,String>> "]
1014178[label="classOrInterfaceType\n Map.Entry<String,String> "]
1114179[label="classType_lfno_classOrInterfaceType\n Map "]
1114180[label="classType_lf_classOrInterfaceType\n .Entry<String,String> "]
1214181[label="typeArguments\n <String,String> "]
1314182[label="typeArgumentList\n String,String "]
1414183[label="classType_lfno_classOrInterfaceType\n String "]
1414184[label="classType_lfno_classOrInterfaceType\n String "]
814185[label="variableDeclarator\n entrySet=dictionary.entrySet() "]
914186[label="variableDeclaratorId\n entrySet "]
914187[label="methodInvocation_lfno_primary\n dictionary.entrySet() "]
1014188[label="typeName\n dictionary "]
614189[label="enhancedForStatement\n for(Map.Entry<String,String>entry:entrySet){storage.put(entry.getKey(),entry.getValue());} "]
714190[label="unannClassOrInterfaceType\n Map.Entry<String,String> "]
814191[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
814192[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String> "]
914193[label="typeArguments\n <String,String> "]
1014194[label="typeArgumentList\n String,String "]
1114195[label="classType_lfno_classOrInterfaceType\n String "]
1114196[label="classType_lfno_classOrInterfaceType\n String "]
714197[label="variableDeclaratorId\n entry "]
714198[label="expressionName\n entrySet "]
714199[label="block\n {storage.put(entry.getKey(),entry.getValue());} "]
814200[label="expressionStatement\n storage.put(entry.getKey(),entry.getValue()); "]
914201[label="methodInvocation\n storage.put(entry.getKey(),entry.getValue()) "]
1014202[label="typeName\n storage "]
1014203[label="argumentList\n entry.getKey(),entry.getValue() "]
1114204[label="methodInvocation_lfno_primary\n entry.getKey() "]
1214205[label="typeName\n entry "]
1114206[label="methodInvocation_lfno_primary\n entry.getValue() "]
1214207[label="typeName\n entry "]
614208[label="returnStatement\n returntrue; "]
714209[label="literal\n true "]
314210[label="methodDeclaration\n staticbooleanload(Stringpath,AhoCorasickDoubleArrayTrie<String>trie){returnload(path,trie,false);} "]
414211[label="methodModifier\n static "]
414212[label="methodHeader\n booleanload(Stringpath,AhoCorasickDoubleArrayTrie<String>trie) "]
514213[label="unannPrimitiveType\n boolean "]
514214[label="methodDeclarator\n load(Stringpath,AhoCorasickDoubleArrayTrie<String>trie) "]
614215[label="formalParameterList\n Stringpath,AhoCorasickDoubleArrayTrie<String>trie "]
714216[label="formalParameter\n Stringpath "]
814217[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
814218[label="variableDeclaratorId\n path "]
714219[label="formalParameter\n AhoCorasickDoubleArrayTrie<String>trie "]
814220[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
914221[label="typeArguments\n <String> "]
1014222[label="classType_lfno_classOrInterfaceType\n String "]
814223[label="variableDeclaratorId\n trie "]
414224[label="block\n {returnload(path,trie,false);} "]
514225[label="returnStatement\n returnload(path,trie,false); "]
614226[label="methodInvocation_lfno_primary\n load(path,trie,false) "]
714227[label="methodName\n load "]
714228[label="argumentList\n path,trie,false "]
814229[label="expressionName\n path "]
814230[label="expressionName\n trie "]
814231[label="literal\n false "]
314232[label="methodDeclaration\n staticbooleanload(Stringpath,AhoCorasickDoubleArrayTrie<String>trie,booleanreverse){StringdatPath=path;if(reverse){datPath+=Predefine.REVERSE_EXT;}if(loadDat(datPath,trie))returntrue;TreeMap<String,String>map=newTreeMap<String,String>();if(!load(map,reverse,path))returnfalse;logger.info(\"正在构建AhoCorasickDoubleArrayTrie，来源：\"+path);trie.build(map);logger.info(\"正在缓存双数组\"+datPath);saveDat(datPath,trie,map.entrySet());returntrue;} "]
414233[label="methodModifier\n static "]
414234[label="methodHeader\n booleanload(Stringpath,AhoCorasickDoubleArrayTrie<String>trie,booleanreverse) "]
514235[label="unannPrimitiveType\n boolean "]
514236[label="methodDeclarator\n load(Stringpath,AhoCorasickDoubleArrayTrie<String>trie,booleanreverse) "]
614237[label="formalParameterList\n Stringpath,AhoCorasickDoubleArrayTrie<String>trie,booleanreverse "]
714238[label="formalParameters\n Stringpath,AhoCorasickDoubleArrayTrie<String>trie "]
814239[label="formalParameter\n Stringpath "]
914240[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
914241[label="variableDeclaratorId\n path "]
814242[label="formalParameter\n AhoCorasickDoubleArrayTrie<String>trie "]
914243[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
1014244[label="typeArguments\n <String> "]
1114245[label="classType_lfno_classOrInterfaceType\n String "]
914246[label="variableDeclaratorId\n trie "]
714247[label="formalParameter\n booleanreverse "]
814248[label="unannPrimitiveType\n boolean "]
814249[label="variableDeclaratorId\n reverse "]
414250[label="block\n {StringdatPath=path;if(reverse){datPath+=Predefine.REVERSE_EXT;}if(loadDat(datPath,trie))returntrue;TreeMap<String,String>map=newTreeMap<String,String>();if(!load(map,reverse,path))returnfalse;logger.info(\"正在构建AhoCorasickDoubleArrayTrie，来源：\"+path);trie.build(map);logger.info(\"正在缓存双数组\"+datPath);saveDat(datPath,trie,map.entrySet());returntrue;} "]
514251[label="blockStatements\n StringdatPath=path;if(reverse){datPath+=Predefine.REVERSE_EXT;}if(loadDat(datPath,trie))returntrue;TreeMap<String,String>map=newTreeMap<String,String>();if(!load(map,reverse,path))returnfalse;logger.info(\"正在构建AhoCorasickDoubleArrayTrie，来源：\"+path);trie.build(map);logger.info(\"正在缓存双数组\"+datPath);saveDat(datPath,trie,map.entrySet());returntrue; "]
614252[label="localVariableDeclarationStatement\n StringdatPath=path; "]
714253[label="localVariableDeclaration\n StringdatPath=path "]
814254[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
814255[label="variableDeclarator\n datPath=path "]
914256[label="variableDeclaratorId\n datPath "]
914257[label="expressionName\n path "]
614258[label="ifThenStatement\n if(reverse){datPath+=Predefine.REVERSE_EXT;} "]
714259[label="expressionName\n reverse "]
714260[label="block\n {datPath+=Predefine.REVERSE_EXT;} "]
814261[label="expressionStatement\n datPath+=Predefine.REVERSE_EXT; "]
914262[label="assignment\n datPath+=Predefine.REVERSE_EXT "]
1014263[label="expressionName\n datPath "]
1014264[label="assignmentOperator\n += "]
1014265[label="expressionName\n Predefine.REVERSE_EXT "]
1114266[label="ambiguousName\n Predefine "]
614267[label="ifThenStatement\n if(loadDat(datPath,trie))returntrue; "]
714268[label="methodInvocation_lfno_primary\n loadDat(datPath,trie) "]
814269[label="methodName\n loadDat "]
814270[label="argumentList\n datPath,trie "]
914271[label="expressionName\n datPath "]
914272[label="expressionName\n trie "]
714273[label="returnStatement\n returntrue; "]
814274[label="literal\n true "]
614275[label="localVariableDeclarationStatement\n TreeMap<String,String>map=newTreeMap<String,String>(); "]
714276[label="localVariableDeclaration\n TreeMap<String,String>map=newTreeMap<String,String>() "]
814277[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
914278[label="typeArguments\n <String,String> "]
1014279[label="typeArgumentList\n String,String "]
1114280[label="classType_lfno_classOrInterfaceType\n String "]
1114281[label="classType_lfno_classOrInterfaceType\n String "]
814282[label="variableDeclarator\n map=newTreeMap<String,String>() "]
914283[label="variableDeclaratorId\n map "]
914284[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
1014285[label="typeArguments\n <String,String> "]
1114286[label="typeArgumentList\n String,String "]
1214287[label="classType_lfno_classOrInterfaceType\n String "]
1214288[label="classType_lfno_classOrInterfaceType\n String "]
614289[label="ifThenStatement\n if(!load(map,reverse,path))returnfalse; "]
714290[label="unaryExpressionNotPlusMinus\n !load(map,reverse,path) "]
814291[label="methodInvocation_lfno_primary\n load(map,reverse,path) "]
914292[label="methodName\n load "]
914293[label="argumentList\n map,reverse,path "]
1014294[label="expressionName\n map "]
1014295[label="expressionName\n reverse "]
1014296[label="expressionName\n path "]
714297[label="returnStatement\n returnfalse; "]
814298[label="literal\n false "]
614299[label="expressionStatement\n logger.info(\"正在构建AhoCorasickDoubleArrayTrie，来源：\"+path); "]
714300[label="methodInvocation\n logger.info(\"正在构建AhoCorasickDoubleArrayTrie，来源：\"+path) "]
814301[label="typeName\n logger "]
814302[label="additiveExpression\n \"正在构建AhoCorasickDoubleArrayTrie，来源：\"+path "]
914303[label="literal\n \"正在构建AhoCorasickDoubleArrayTrie，来源：\" "]
914304[label="expressionName\n path "]
614305[label="expressionStatement\n trie.build(map); "]
714306[label="methodInvocation\n trie.build(map) "]
814307[label="typeName\n trie "]
814308[label="expressionName\n map "]
614309[label="expressionStatement\n logger.info(\"正在缓存双数组\"+datPath); "]
714310[label="methodInvocation\n logger.info(\"正在缓存双数组\"+datPath) "]
814311[label="typeName\n logger "]
814312[label="additiveExpression\n \"正在缓存双数组\"+datPath "]
914313[label="literal\n \"正在缓存双数组\" "]
914314[label="expressionName\n datPath "]
614315[label="expressionStatement\n saveDat(datPath,trie,map.entrySet()); "]
714316[label="methodInvocation\n saveDat(datPath,trie,map.entrySet()) "]
814317[label="methodName\n saveDat "]
814318[label="argumentList\n datPath,trie,map.entrySet() "]
914319[label="expressionName\n datPath "]
914320[label="expressionName\n trie "]
914321[label="methodInvocation_lfno_primary\n map.entrySet() "]
1014322[label="typeName\n map "]
614323[label="returnStatement\n returntrue; "]
714324[label="literal\n true "]
314325[label="methodDeclaration\n staticbooleanloadDat(Stringpath,AhoCorasickDoubleArrayTrie<String>trie){ByteArraybyteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();String[]valueArray=newString[size];for(inti=0;i<valueArray.length;++i){valueArray[i]=byteArray.nextString();}trie.load(byteArray,valueArray);returntrue;} "]
414326[label="methodModifier\n static "]
414327[label="methodHeader\n booleanloadDat(Stringpath,AhoCorasickDoubleArrayTrie<String>trie) "]
514328[label="unannPrimitiveType\n boolean "]
514329[label="methodDeclarator\n loadDat(Stringpath,AhoCorasickDoubleArrayTrie<String>trie) "]
614330[label="formalParameterList\n Stringpath,AhoCorasickDoubleArrayTrie<String>trie "]
714331[label="formalParameter\n Stringpath "]
814332[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
814333[label="variableDeclaratorId\n path "]
714334[label="formalParameter\n AhoCorasickDoubleArrayTrie<String>trie "]
814335[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
914336[label="typeArguments\n <String> "]
1014337[label="classType_lfno_classOrInterfaceType\n String "]
814338[label="variableDeclaratorId\n trie "]
414339[label="block\n {ByteArraybyteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();String[]valueArray=newString[size];for(inti=0;i<valueArray.length;++i){valueArray[i]=byteArray.nextString();}trie.load(byteArray,valueArray);returntrue;} "]
514340[label="blockStatements\n ByteArraybyteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();String[]valueArray=newString[size];for(inti=0;i<valueArray.length;++i){valueArray[i]=byteArray.nextString();}trie.load(byteArray,valueArray);returntrue; "]
614341[label="localVariableDeclarationStatement\n ByteArraybyteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT); "]
714342[label="localVariableDeclaration\n ByteArraybyteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT) "]
814343[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
814344[label="variableDeclarator\n byteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT) "]
914345[label="variableDeclaratorId\n byteArray "]
914346[label="methodInvocation_lfno_primary\n ByteArray.createByteArray(path+Predefine.BIN_EXT) "]
1014347[label="typeName\n ByteArray "]
1014348[label="additiveExpression\n path+Predefine.BIN_EXT "]
1114349[label="expressionName\n path "]
1114350[label="expressionName\n Predefine.BIN_EXT "]
1214351[label="ambiguousName\n Predefine "]
614352[label="ifThenStatement\n if(byteArray==null)returnfalse; "]
714353[label="equalityExpression\n byteArray==null "]
814354[label="expressionName\n byteArray "]
814355[label="literal\n null "]
714356[label="returnStatement\n returnfalse; "]
814357[label="literal\n false "]
614358[label="localVariableDeclarationStatement\n intsize=byteArray.nextInt(); "]
714359[label="localVariableDeclaration\n intsize=byteArray.nextInt() "]
814360[label="integralType\n int "]
814361[label="variableDeclarator\n size=byteArray.nextInt() "]
914362[label="variableDeclaratorId\n size "]
914363[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
1014364[label="typeName\n byteArray "]
614365[label="localVariableDeclarationStatement\n String[]valueArray=newString[size]; "]
714366[label="localVariableDeclaration\n String[]valueArray=newString[size] "]
814367[label="unannArrayType\n String[] "]
914368[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
914369[label="dims\n [] "]
814370[label="variableDeclarator\n valueArray=newString[size] "]
914371[label="variableDeclaratorId\n valueArray "]
914372[label="arrayCreationExpression\n newString[size] "]
1014373[label="classType_lfno_classOrInterfaceType\n String "]
1014374[label="dimExpr\n [size] "]
1114375[label="expressionName\n size "]
614376[label="basicForStatement\n for(inti=0;i<valueArray.length;++i){valueArray[i]=byteArray.nextString();} "]
714377[label="localVariableDeclaration\n inti=0 "]
814378[label="integralType\n int "]
814379[label="variableDeclarator\n i=0 "]
914380[label="variableDeclaratorId\n i "]
914381[label="literal\n 0 "]
714382[label="relationalExpression\n i<valueArray.length "]
814383[label="expressionName\n i "]
814384[label="expressionName\n valueArray.length "]
914385[label="ambiguousName\n valueArray "]
714386[label="preIncrementExpression\n ++i "]
814387[label="expressionName\n i "]
714388[label="block\n {valueArray[i]=byteArray.nextString();} "]
814389[label="expressionStatement\n valueArray[i]=byteArray.nextString(); "]
914390[label="assignment\n valueArray[i]=byteArray.nextString() "]
1014391[label="arrayAccess\n valueArray[i] "]
1114392[label="expressionName\n valueArray "]
1114393[label="expressionName\n i "]
1014394[label="assignmentOperator\n = "]
1014395[label="methodInvocation_lfno_primary\n byteArray.nextString() "]
1114396[label="typeName\n byteArray "]
614397[label="expressionStatement\n trie.load(byteArray,valueArray); "]
714398[label="methodInvocation\n trie.load(byteArray,valueArray) "]
814399[label="typeName\n trie "]
814400[label="argumentList\n byteArray,valueArray "]
914401[label="expressionName\n byteArray "]
914402[label="expressionName\n valueArray "]
614403[label="returnStatement\n returntrue; "]
714404[label="literal\n true "]
314405[label="methodDeclaration\n staticbooleansaveDat(Stringpath,AhoCorasickDoubleArrayTrie<String>trie,Set<Map.Entry<String,String>>entrySet){if(trie.size()!=entrySet.size()){logger.warning(\"键值对不匹配\");returnfalse;}try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT));out.writeInt(entrySet.size());for(Map.Entry<String,String>entry:entrySet){char[]charArray=entry.getValue().toCharArray();out.writeInt(charArray.length);for(charc:charArray){out.writeChar(c);}}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"缓存值dat\"+path+\"失败\");returnfalse;}returntrue;} "]
414406[label="methodModifier\n static "]
414407[label="methodHeader\n booleansaveDat(Stringpath,AhoCorasickDoubleArrayTrie<String>trie,Set<Map.Entry<String,String>>entrySet) "]
514408[label="unannPrimitiveType\n boolean "]
514409[label="methodDeclarator\n saveDat(Stringpath,AhoCorasickDoubleArrayTrie<String>trie,Set<Map.Entry<String,String>>entrySet) "]
614410[label="formalParameterList\n Stringpath,AhoCorasickDoubleArrayTrie<String>trie,Set<Map.Entry<String,String>>entrySet "]
714411[label="formalParameters\n Stringpath,AhoCorasickDoubleArrayTrie<String>trie "]
814412[label="formalParameter\n Stringpath "]
914413[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
914414[label="variableDeclaratorId\n path "]
814415[label="formalParameter\n AhoCorasickDoubleArrayTrie<String>trie "]
914416[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
1014417[label="typeArguments\n <String> "]
1114418[label="classType_lfno_classOrInterfaceType\n String "]
914419[label="variableDeclaratorId\n trie "]
714420[label="formalParameter\n Set<Map.Entry<String,String>>entrySet "]
814421[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<Map.Entry<String,String>> "]
914422[label="typeArguments\n <Map.Entry<String,String>> "]
1014423[label="classOrInterfaceType\n Map.Entry<String,String> "]
1114424[label="classType_lfno_classOrInterfaceType\n Map "]
1114425[label="classType_lf_classOrInterfaceType\n .Entry<String,String> "]
1214426[label="typeArguments\n <String,String> "]
1314427[label="typeArgumentList\n String,String "]
1414428[label="classType_lfno_classOrInterfaceType\n String "]
1414429[label="classType_lfno_classOrInterfaceType\n String "]
814430[label="variableDeclaratorId\n entrySet "]
414431[label="block\n {if(trie.size()!=entrySet.size()){logger.warning(\"键值对不匹配\");returnfalse;}try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT));out.writeInt(entrySet.size());for(Map.Entry<String,String>entry:entrySet){char[]charArray=entry.getValue().toCharArray();out.writeInt(charArray.length);for(charc:charArray){out.writeChar(c);}}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"缓存值dat\"+path+\"失败\");returnfalse;}returntrue;} "]
514432[label="blockStatements\n if(trie.size()!=entrySet.size()){logger.warning(\"键值对不匹配\");returnfalse;}try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT));out.writeInt(entrySet.size());for(Map.Entry<String,String>entry:entrySet){char[]charArray=entry.getValue().toCharArray();out.writeInt(charArray.length);for(charc:charArray){out.writeChar(c);}}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"缓存值dat\"+path+\"失败\");returnfalse;}returntrue; "]
614433[label="ifThenStatement\n if(trie.size()!=entrySet.size()){logger.warning(\"键值对不匹配\");returnfalse;} "]
714434[label="equalityExpression\n trie.size()!=entrySet.size() "]
814435[label="methodInvocation_lfno_primary\n trie.size() "]
914436[label="typeName\n trie "]
814437[label="methodInvocation_lfno_primary\n entrySet.size() "]
914438[label="typeName\n entrySet "]
714439[label="block\n {logger.warning(\"键值对不匹配\");returnfalse;} "]
814440[label="blockStatements\n logger.warning(\"键值对不匹配\");returnfalse; "]
914441[label="expressionStatement\n logger.warning(\"键值对不匹配\"); "]
1014442[label="methodInvocation\n logger.warning(\"键值对不匹配\") "]
1114443[label="typeName\n logger "]
1114444[label="literal\n \"键值对不匹配\" "]
914445[label="returnStatement\n returnfalse; "]
1014446[label="literal\n false "]
614447[label="tryStatement\n try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT));out.writeInt(entrySet.size());for(Map.Entry<String,String>entry:entrySet){char[]charArray=entry.getValue().toCharArray();out.writeInt(charArray.length);for(charc:charArray){out.writeChar(c);}}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"缓存值dat\"+path+\"失败\");returnfalse;} "]
714448[label="block\n {DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT));out.writeInt(entrySet.size());for(Map.Entry<String,String>entry:entrySet){char[]charArray=entry.getValue().toCharArray();out.writeInt(charArray.length);for(charc:charArray){out.writeChar(c);}}trie.save(out);out.close();} "]
814449[label="blockStatements\n DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT));out.writeInt(entrySet.size());for(Map.Entry<String,String>entry:entrySet){char[]charArray=entry.getValue().toCharArray();out.writeInt(charArray.length);for(charc:charArray){out.writeChar(c);}}trie.save(out);out.close(); "]
914450[label="localVariableDeclarationStatement\n DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT)); "]
1014451[label="localVariableDeclaration\n DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT)) "]
1114452[label="unannClassType_lfno_unannClassOrInterfaceType\n DataOutputStream "]
1114453[label="variableDeclarator\n out=newDataOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT)) "]
1214454[label="variableDeclaratorId\n out "]
1214455[label="classInstanceCreationExpression_lfno_primary\n newDataOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT)) "]
1314456[label="methodInvocation_lfno_primary\n IOUtil.newOutputStream(path+Predefine.BIN_EXT) "]
1414457[label="typeName\n IOUtil "]
1414458[label="additiveExpression\n path+Predefine.BIN_EXT "]
1514459[label="expressionName\n path "]
1514460[label="expressionName\n Predefine.BIN_EXT "]
1614461[label="ambiguousName\n Predefine "]
914462[label="expressionStatement\n out.writeInt(entrySet.size()); "]
1014463[label="methodInvocation\n out.writeInt(entrySet.size()) "]
1114464[label="typeName\n out "]
1114465[label="methodInvocation_lfno_primary\n entrySet.size() "]
1214466[label="typeName\n entrySet "]
914467[label="enhancedForStatement\n for(Map.Entry<String,String>entry:entrySet){char[]charArray=entry.getValue().toCharArray();out.writeInt(charArray.length);for(charc:charArray){out.writeChar(c);}} "]
1014468[label="unannClassOrInterfaceType\n Map.Entry<String,String> "]
1114469[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
1114470[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String> "]
1214471[label="typeArguments\n <String,String> "]
1314472[label="typeArgumentList\n String,String "]
1414473[label="classType_lfno_classOrInterfaceType\n String "]
1414474[label="classType_lfno_classOrInterfaceType\n String "]
1014475[label="variableDeclaratorId\n entry "]
1014476[label="expressionName\n entrySet "]
1014477[label="block\n {char[]charArray=entry.getValue().toCharArray();out.writeInt(charArray.length);for(charc:charArray){out.writeChar(c);}} "]
1114478[label="blockStatements\n char[]charArray=entry.getValue().toCharArray();out.writeInt(charArray.length);for(charc:charArray){out.writeChar(c);} "]
1214479[label="localVariableDeclarationStatement\n char[]charArray=entry.getValue().toCharArray(); "]
1314480[label="localVariableDeclaration\n char[]charArray=entry.getValue().toCharArray() "]
1414481[label="unannArrayType\n char[] "]
1514482[label="integralType\n char "]
1514483[label="dims\n [] "]
1414484[label="variableDeclarator\n charArray=entry.getValue().toCharArray() "]
1514485[label="variableDeclaratorId\n charArray "]
1514486[label="primary\n entry.getValue().toCharArray() "]
1614487[label="methodInvocation_lfno_primary\n entry.getValue() "]
1714488[label="typeName\n entry "]
1614489[label="methodInvocation_lf_primary\n .toCharArray() "]
1214490[label="expressionStatement\n out.writeInt(charArray.length); "]
1314491[label="methodInvocation\n out.writeInt(charArray.length) "]
1414492[label="typeName\n out "]
1414493[label="expressionName\n charArray.length "]
1514494[label="ambiguousName\n charArray "]
1214495[label="enhancedForStatement\n for(charc:charArray){out.writeChar(c);} "]
1314496[label="integralType\n char "]
1314497[label="variableDeclaratorId\n c "]
1314498[label="expressionName\n charArray "]
1314499[label="block\n {out.writeChar(c);} "]
1414500[label="expressionStatement\n out.writeChar(c); "]
1514501[label="methodInvocation\n out.writeChar(c) "]
1614502[label="typeName\n out "]
1614503[label="expressionName\n c "]
914504[label="expressionStatement\n trie.save(out); "]
1014505[label="methodInvocation\n trie.save(out) "]
1114506[label="typeName\n trie "]
1114507[label="expressionName\n out "]
914508[label="expressionStatement\n out.close(); "]
1014509[label="methodInvocation\n out.close() "]
1114510[label="typeName\n out "]
714511[label="catchClause\n catch(Exceptione){logger.warning(\"缓存值dat\"+path+\"失败\");returnfalse;} "]
814512[label="catchFormalParameter\n Exceptione "]
914513[label="unannClassType\n Exception "]
914514[label="variableDeclaratorId\n e "]
814515[label="block\n {logger.warning(\"缓存值dat\"+path+\"失败\");returnfalse;} "]
914516[label="blockStatements\n logger.warning(\"缓存值dat\"+path+\"失败\");returnfalse; "]
1014517[label="expressionStatement\n logger.warning(\"缓存值dat\"+path+\"失败\"); "]
1114518[label="methodInvocation\n logger.warning(\"缓存值dat\"+path+\"失败\") "]
1214519[label="typeName\n logger "]
1214520[label="additiveExpression\n \"缓存值dat\"+path+\"失败\" "]
1314521[label="additiveExpression\n \"缓存值dat\"+path "]
1414522[label="literal\n \"缓存值dat\" "]
1414523[label="expressionName\n path "]
1314524[label="literal\n \"失败\" "]
1014525[label="returnStatement\n returnfalse; "]
1114526[label="literal\n false "]
614527[label="returnStatement\n returntrue; "]
714528[label="literal\n true "]
314529[label="methodDeclaration\n publicstaticBaseSearchergetSearcher(char[]charArray,DoubleArrayTrie<String>trie){returnnewSearcher(charArray,trie);} "]
414530[label="methodModifier\n public "]
414531[label="methodModifier\n static "]
414532[label="methodHeader\n BaseSearchergetSearcher(char[]charArray,DoubleArrayTrie<String>trie) "]
514533[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseSearcher "]
514534[label="methodDeclarator\n getSearcher(char[]charArray,DoubleArrayTrie<String>trie) "]
614535[label="formalParameterList\n char[]charArray,DoubleArrayTrie<String>trie "]
714536[label="formalParameter\n char[]charArray "]
814537[label="unannArrayType\n char[] "]
914538[label="integralType\n char "]
914539[label="dims\n [] "]
814540[label="variableDeclaratorId\n charArray "]
714541[label="formalParameter\n DoubleArrayTrie<String>trie "]
814542[label="unannClassType_lfno_unannClassOrInterfaceType\n DoubleArrayTrie<String> "]
914543[label="typeArguments\n <String> "]
1014544[label="classType_lfno_classOrInterfaceType\n String "]
814545[label="variableDeclaratorId\n trie "]
414546[label="block\n {returnnewSearcher(charArray,trie);} "]
514547[label="returnStatement\n returnnewSearcher(charArray,trie); "]
614548[label="classInstanceCreationExpression_lfno_primary\n newSearcher(charArray,trie) "]
714549[label="argumentList\n charArray,trie "]
814550[label="expressionName\n charArray "]
814551[label="expressionName\n trie "]
314552[label="methodDeclaration\n protectedstaticStringsegLongest(char[]charArray,DoubleArrayTrie<String>trie){StringBuildersb=newStringBuilder(charArray.length);BaseSearchersearcher=getSearcher(charArray,trie);Map.Entry<String,String>entry;intp=0;intoffset;while((entry=searcher.next())!=null){offset=searcher.getOffset();while(p<offset){sb.append(charArray[p]);++p;}sb.append(entry.getValue());p=offset+entry.getKey().length();}while(p<charArray.length){sb.append(charArray[p]);++p;}returnsb.toString();} "]
414553[label="methodModifier\n protected "]
414554[label="methodModifier\n static "]
414555[label="methodHeader\n StringsegLongest(char[]charArray,DoubleArrayTrie<String>trie) "]
514556[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
514557[label="methodDeclarator\n segLongest(char[]charArray,DoubleArrayTrie<String>trie) "]
614558[label="formalParameterList\n char[]charArray,DoubleArrayTrie<String>trie "]
714559[label="formalParameter\n char[]charArray "]
814560[label="unannArrayType\n char[] "]
914561[label="integralType\n char "]
914562[label="dims\n [] "]
814563[label="variableDeclaratorId\n charArray "]
714564[label="formalParameter\n DoubleArrayTrie<String>trie "]
814565[label="unannClassType_lfno_unannClassOrInterfaceType\n DoubleArrayTrie<String> "]
914566[label="typeArguments\n <String> "]
1014567[label="classType_lfno_classOrInterfaceType\n String "]
814568[label="variableDeclaratorId\n trie "]
414569[label="block\n {StringBuildersb=newStringBuilder(charArray.length);BaseSearchersearcher=getSearcher(charArray,trie);Map.Entry<String,String>entry;intp=0;intoffset;while((entry=searcher.next())!=null){offset=searcher.getOffset();while(p<offset){sb.append(charArray[p]);++p;}sb.append(entry.getValue());p=offset+entry.getKey().length();}while(p<charArray.length){sb.append(charArray[p]);++p;}returnsb.toString();} "]
514570[label="blockStatements\n StringBuildersb=newStringBuilder(charArray.length);BaseSearchersearcher=getSearcher(charArray,trie);Map.Entry<String,String>entry;intp=0;intoffset;while((entry=searcher.next())!=null){offset=searcher.getOffset();while(p<offset){sb.append(charArray[p]);++p;}sb.append(entry.getValue());p=offset+entry.getKey().length();}while(p<charArray.length){sb.append(charArray[p]);++p;}returnsb.toString(); "]
614571[label="localVariableDeclarationStatement\n StringBuildersb=newStringBuilder(charArray.length); "]
714572[label="localVariableDeclaration\n StringBuildersb=newStringBuilder(charArray.length) "]
814573[label="unannClassType_lfno_unannClassOrInterfaceType\n StringBuilder "]
814574[label="variableDeclarator\n sb=newStringBuilder(charArray.length) "]
914575[label="variableDeclaratorId\n sb "]
914576[label="classInstanceCreationExpression_lfno_primary\n newStringBuilder(charArray.length) "]
1014577[label="expressionName\n charArray.length "]
1114578[label="ambiguousName\n charArray "]
614579[label="localVariableDeclarationStatement\n BaseSearchersearcher=getSearcher(charArray,trie); "]
714580[label="localVariableDeclaration\n BaseSearchersearcher=getSearcher(charArray,trie) "]
814581[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseSearcher "]
814582[label="variableDeclarator\n searcher=getSearcher(charArray,trie) "]
914583[label="variableDeclaratorId\n searcher "]
914584[label="methodInvocation_lfno_primary\n getSearcher(charArray,trie) "]
1014585[label="methodName\n getSearcher "]
1014586[label="argumentList\n charArray,trie "]
1114587[label="expressionName\n charArray "]
1114588[label="expressionName\n trie "]
614589[label="localVariableDeclarationStatement\n Map.Entry<String,String>entry; "]
714590[label="localVariableDeclaration\n Map.Entry<String,String>entry "]
814591[label="unannClassOrInterfaceType\n Map.Entry<String,String> "]
914592[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
914593[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String> "]
1014594[label="typeArguments\n <String,String> "]
1114595[label="typeArgumentList\n String,String "]
1214596[label="classType_lfno_classOrInterfaceType\n String "]
1214597[label="classType_lfno_classOrInterfaceType\n String "]
814598[label="variableDeclaratorId\n entry "]
614599[label="localVariableDeclarationStatement\n intp=0; "]
714600[label="localVariableDeclaration\n intp=0 "]
814601[label="integralType\n int "]
814602[label="variableDeclarator\n p=0 "]
914603[label="variableDeclaratorId\n p "]
914604[label="literal\n 0 "]
614605[label="localVariableDeclarationStatement\n intoffset; "]
714606[label="localVariableDeclaration\n intoffset "]
814607[label="integralType\n int "]
814608[label="variableDeclaratorId\n offset "]
614609[label="whileStatement\n while((entry=searcher.next())!=null){offset=searcher.getOffset();while(p<offset){sb.append(charArray[p]);++p;}sb.append(entry.getValue());p=offset+entry.getKey().length();} "]
714610[label="equalityExpression\n (entry=searcher.next())!=null "]
814611[label="primaryNoNewArray_lfno_primary\n (entry=searcher.next()) "]
914612[label="assignment\n entry=searcher.next() "]
1014613[label="expressionName\n entry "]
1014614[label="assignmentOperator\n = "]
1014615[label="methodInvocation_lfno_primary\n searcher.next() "]
1114616[label="typeName\n searcher "]
814617[label="literal\n null "]
714618[label="block\n {offset=searcher.getOffset();while(p<offset){sb.append(charArray[p]);++p;}sb.append(entry.getValue());p=offset+entry.getKey().length();} "]
814619[label="blockStatements\n offset=searcher.getOffset();while(p<offset){sb.append(charArray[p]);++p;}sb.append(entry.getValue());p=offset+entry.getKey().length(); "]
914620[label="expressionStatement\n offset=searcher.getOffset(); "]
1014621[label="assignment\n offset=searcher.getOffset() "]
1114622[label="expressionName\n offset "]
1114623[label="assignmentOperator\n = "]
1114624[label="methodInvocation_lfno_primary\n searcher.getOffset() "]
1214625[label="typeName\n searcher "]
914626[label="whileStatement\n while(p<offset){sb.append(charArray[p]);++p;} "]
1014627[label="relationalExpression\n p<offset "]
1114628[label="expressionName\n p "]
1114629[label="expressionName\n offset "]
1014630[label="block\n {sb.append(charArray[p]);++p;} "]
1114631[label="blockStatements\n sb.append(charArray[p]);++p; "]
1214632[label="expressionStatement\n sb.append(charArray[p]); "]
1314633[label="methodInvocation\n sb.append(charArray[p]) "]
1414634[label="typeName\n sb "]
1414635[label="arrayAccess_lfno_primary\n charArray[p] "]
1514636[label="expressionName\n charArray "]
1514637[label="expressionName\n p "]
1214638[label="expressionStatement\n ++p; "]
1314639[label="preIncrementExpression\n ++p "]
1414640[label="expressionName\n p "]
914641[label="expressionStatement\n sb.append(entry.getValue()); "]
1014642[label="methodInvocation\n sb.append(entry.getValue()) "]
1114643[label="typeName\n sb "]
1114644[label="methodInvocation_lfno_primary\n entry.getValue() "]
1214645[label="typeName\n entry "]
914646[label="expressionStatement\n p=offset+entry.getKey().length(); "]
1014647[label="assignment\n p=offset+entry.getKey().length() "]
1114648[label="expressionName\n p "]
1114649[label="assignmentOperator\n = "]
1114650[label="additiveExpression\n offset+entry.getKey().length() "]
1214651[label="expressionName\n offset "]
1214652[label="primary\n entry.getKey().length() "]
1314653[label="methodInvocation_lfno_primary\n entry.getKey() "]
1414654[label="typeName\n entry "]
1314655[label="methodInvocation_lf_primary\n .length() "]
614656[label="whileStatement\n while(p<charArray.length){sb.append(charArray[p]);++p;} "]
714657[label="relationalExpression\n p<charArray.length "]
814658[label="expressionName\n p "]
814659[label="expressionName\n charArray.length "]
914660[label="ambiguousName\n charArray "]
714661[label="block\n {sb.append(charArray[p]);++p;} "]
814662[label="blockStatements\n sb.append(charArray[p]);++p; "]
914663[label="expressionStatement\n sb.append(charArray[p]); "]
1014664[label="methodInvocation\n sb.append(charArray[p]) "]
1114665[label="typeName\n sb "]
1114666[label="arrayAccess_lfno_primary\n charArray[p] "]
1214667[label="expressionName\n charArray "]
1214668[label="expressionName\n p "]
914669[label="expressionStatement\n ++p; "]
1014670[label="preIncrementExpression\n ++p "]
1114671[label="expressionName\n p "]
614672[label="returnStatement\n returnsb.toString(); "]
714673[label="methodInvocation_lfno_primary\n sb.toString() "]
814674[label="typeName\n sb "]
314675[label="methodDeclaration\n protectedstaticStringsegLongest(char[]charArray,AhoCorasickDoubleArrayTrie<String>trie){finalString[]wordNet=newString[charArray.length];finalint[]lengthNet=newint[charArray.length];trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){intlength=end-begin;if(length>lengthNet[begin]){wordNet[begin]=value;lengthNet[begin]=length;}}});StringBuildersb=newStringBuilder(charArray.length);for(intoffset=0;offset<wordNet.length;){if(wordNet[offset]==null){sb.append(charArray[offset]);++offset;continue;}sb.append(wordNet[offset]);offset+=lengthNet[offset];}returnsb.toString();} "]
414676[label="methodModifier\n protected "]
414677[label="methodModifier\n static "]
414678[label="methodHeader\n StringsegLongest(char[]charArray,AhoCorasickDoubleArrayTrie<String>trie) "]
514679[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
514680[label="methodDeclarator\n segLongest(char[]charArray,AhoCorasickDoubleArrayTrie<String>trie) "]
614681[label="formalParameterList\n char[]charArray,AhoCorasickDoubleArrayTrie<String>trie "]
714682[label="formalParameter\n char[]charArray "]
814683[label="unannArrayType\n char[] "]
914684[label="integralType\n char "]
914685[label="dims\n [] "]
814686[label="variableDeclaratorId\n charArray "]
714687[label="formalParameter\n AhoCorasickDoubleArrayTrie<String>trie "]
814688[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<String> "]
914689[label="typeArguments\n <String> "]
1014690[label="classType_lfno_classOrInterfaceType\n String "]
814691[label="variableDeclaratorId\n trie "]
414692[label="block\n {finalString[]wordNet=newString[charArray.length];finalint[]lengthNet=newint[charArray.length];trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){intlength=end-begin;if(length>lengthNet[begin]){wordNet[begin]=value;lengthNet[begin]=length;}}});StringBuildersb=newStringBuilder(charArray.length);for(intoffset=0;offset<wordNet.length;){if(wordNet[offset]==null){sb.append(charArray[offset]);++offset;continue;}sb.append(wordNet[offset]);offset+=lengthNet[offset];}returnsb.toString();} "]
514693[label="blockStatements\n finalString[]wordNet=newString[charArray.length];finalint[]lengthNet=newint[charArray.length];trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){intlength=end-begin;if(length>lengthNet[begin]){wordNet[begin]=value;lengthNet[begin]=length;}}});StringBuildersb=newStringBuilder(charArray.length);for(intoffset=0;offset<wordNet.length;){if(wordNet[offset]==null){sb.append(charArray[offset]);++offset;continue;}sb.append(wordNet[offset]);offset+=lengthNet[offset];}returnsb.toString(); "]
614694[label="localVariableDeclarationStatement\n finalString[]wordNet=newString[charArray.length]; "]
714695[label="localVariableDeclaration\n finalString[]wordNet=newString[charArray.length] "]
814696[label="variableModifier\n final "]
814697[label="unannArrayType\n String[] "]
914698[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
914699[label="dims\n [] "]
814700[label="variableDeclarator\n wordNet=newString[charArray.length] "]
914701[label="variableDeclaratorId\n wordNet "]
914702[label="arrayCreationExpression\n newString[charArray.length] "]
1014703[label="classType_lfno_classOrInterfaceType\n String "]
1014704[label="dimExpr\n [charArray.length] "]
1114705[label="expressionName\n charArray.length "]
1214706[label="ambiguousName\n charArray "]
614707[label="localVariableDeclarationStatement\n finalint[]lengthNet=newint[charArray.length]; "]
714708[label="localVariableDeclaration\n finalint[]lengthNet=newint[charArray.length] "]
814709[label="variableModifier\n final "]
814710[label="unannArrayType\n int[] "]
914711[label="integralType\n int "]
914712[label="dims\n [] "]
814713[label="variableDeclarator\n lengthNet=newint[charArray.length] "]
914714[label="variableDeclaratorId\n lengthNet "]
914715[label="arrayCreationExpression\n newint[charArray.length] "]
1014716[label="integralType\n int "]
1014717[label="dimExpr\n [charArray.length] "]
1114718[label="expressionName\n charArray.length "]
1214719[label="ambiguousName\n charArray "]
614720[label="expressionStatement\n trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){intlength=end-begin;if(length>lengthNet[begin]){wordNet[begin]=value;lengthNet[begin]=length;}}}); "]
714721[label="methodInvocation\n trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){intlength=end-begin;if(length>lengthNet[begin]){wordNet[begin]=value;lengthNet[begin]=length;}}}) "]
814722[label="typeName\n trie "]
814723[label="argumentList\n charArray,newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){intlength=end-begin;if(length>lengthNet[begin]){wordNet[begin]=value;lengthNet[begin]=length;}}} "]
914724[label="expressionName\n charArray "]
914725[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){intlength=end-begin;if(length>lengthNet[begin]){wordNet[begin]=value;lengthNet[begin]=length;}}} "]
1014726[label="typeArguments\n <String> "]
1114727[label="classType_lfno_classOrInterfaceType\n String "]
1014728[label="classBody\n {@Overridepublicvoidhit(intbegin,intend,Stringvalue){intlength=end-begin;if(length>lengthNet[begin]){wordNet[begin]=value;lengthNet[begin]=length;}}} "]
1114729[label="methodDeclaration\n @Overridepublicvoidhit(intbegin,intend,Stringvalue){intlength=end-begin;if(length>lengthNet[begin]){wordNet[begin]=value;lengthNet[begin]=length;}} "]
1214730[label="markerAnnotation\n @Override "]
1314731[label="typeName\n Override "]
1214732[label="methodModifier\n public "]
1214733[label="methodHeader\n voidhit(intbegin,intend,Stringvalue) "]
1314734[label="result\n void "]
1314735[label="methodDeclarator\n hit(intbegin,intend,Stringvalue) "]
1414736[label="formalParameterList\n intbegin,intend,Stringvalue "]
1514737[label="formalParameters\n intbegin,intend "]
1614738[label="formalParameter\n intbegin "]
1714739[label="integralType\n int "]
1714740[label="variableDeclaratorId\n begin "]
1614741[label="formalParameter\n intend "]
1714742[label="integralType\n int "]
1714743[label="variableDeclaratorId\n end "]
1514744[label="formalParameter\n Stringvalue "]
1614745[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1614746[label="variableDeclaratorId\n value "]
1214747[label="block\n {intlength=end-begin;if(length>lengthNet[begin]){wordNet[begin]=value;lengthNet[begin]=length;}} "]
1314748[label="blockStatements\n intlength=end-begin;if(length>lengthNet[begin]){wordNet[begin]=value;lengthNet[begin]=length;} "]
1414749[label="localVariableDeclarationStatement\n intlength=end-begin; "]
1514750[label="localVariableDeclaration\n intlength=end-begin "]
1614751[label="integralType\n int "]
1614752[label="variableDeclarator\n length=end-begin "]
1714753[label="variableDeclaratorId\n length "]
1714754[label="additiveExpression\n end-begin "]
1814755[label="expressionName\n end "]
1814756[label="expressionName\n begin "]
1414757[label="ifThenStatement\n if(length>lengthNet[begin]){wordNet[begin]=value;lengthNet[begin]=length;} "]
1514758[label="relationalExpression\n length>lengthNet[begin] "]
1614759[label="expressionName\n length "]
1614760[label="arrayAccess_lfno_primary\n lengthNet[begin] "]
1714761[label="expressionName\n lengthNet "]
1714762[label="expressionName\n begin "]
1514763[label="block\n {wordNet[begin]=value;lengthNet[begin]=length;} "]
1614764[label="blockStatements\n wordNet[begin]=value;lengthNet[begin]=length; "]
1714765[label="expressionStatement\n wordNet[begin]=value; "]
1814766[label="assignment\n wordNet[begin]=value "]
1914767[label="arrayAccess\n wordNet[begin] "]
2014768[label="expressionName\n wordNet "]
2014769[label="expressionName\n begin "]
1914770[label="assignmentOperator\n = "]
1914771[label="expressionName\n value "]
1714772[label="expressionStatement\n lengthNet[begin]=length; "]
1814773[label="assignment\n lengthNet[begin]=length "]
1914774[label="arrayAccess\n lengthNet[begin] "]
2014775[label="expressionName\n lengthNet "]
2014776[label="expressionName\n begin "]
1914777[label="assignmentOperator\n = "]
1914778[label="expressionName\n length "]
614779[label="localVariableDeclarationStatement\n StringBuildersb=newStringBuilder(charArray.length); "]
714780[label="localVariableDeclaration\n StringBuildersb=newStringBuilder(charArray.length) "]
814781[label="unannClassType_lfno_unannClassOrInterfaceType\n StringBuilder "]
814782[label="variableDeclarator\n sb=newStringBuilder(charArray.length) "]
914783[label="variableDeclaratorId\n sb "]
914784[label="classInstanceCreationExpression_lfno_primary\n newStringBuilder(charArray.length) "]
1014785[label="expressionName\n charArray.length "]
1114786[label="ambiguousName\n charArray "]
614787[label="basicForStatement\n for(intoffset=0;offset<wordNet.length;){if(wordNet[offset]==null){sb.append(charArray[offset]);++offset;continue;}sb.append(wordNet[offset]);offset+=lengthNet[offset];} "]
714788[label="localVariableDeclaration\n intoffset=0 "]
814789[label="integralType\n int "]
814790[label="variableDeclarator\n offset=0 "]
914791[label="variableDeclaratorId\n offset "]
914792[label="literal\n 0 "]
714793[label="relationalExpression\n offset<wordNet.length "]
814794[label="expressionName\n offset "]
814795[label="expressionName\n wordNet.length "]
914796[label="ambiguousName\n wordNet "]
714797[label="block\n {if(wordNet[offset]==null){sb.append(charArray[offset]);++offset;continue;}sb.append(wordNet[offset]);offset+=lengthNet[offset];} "]
814798[label="blockStatements\n if(wordNet[offset]==null){sb.append(charArray[offset]);++offset;continue;}sb.append(wordNet[offset]);offset+=lengthNet[offset]; "]
914799[label="ifThenStatement\n if(wordNet[offset]==null){sb.append(charArray[offset]);++offset;continue;} "]
1014800[label="equalityExpression\n wordNet[offset]==null "]
1114801[label="arrayAccess_lfno_primary\n wordNet[offset] "]
1214802[label="expressionName\n wordNet "]
1214803[label="expressionName\n offset "]
1114804[label="literal\n null "]
1014805[label="block\n {sb.append(charArray[offset]);++offset;continue;} "]
1114806[label="blockStatements\n sb.append(charArray[offset]);++offset;continue; "]
1214807[label="expressionStatement\n sb.append(charArray[offset]); "]
1314808[label="methodInvocation\n sb.append(charArray[offset]) "]
1414809[label="typeName\n sb "]
1414810[label="arrayAccess_lfno_primary\n charArray[offset] "]
1514811[label="expressionName\n charArray "]
1514812[label="expressionName\n offset "]
1214813[label="expressionStatement\n ++offset; "]
1314814[label="preIncrementExpression\n ++offset "]
1414815[label="expressionName\n offset "]
1214816[label="continueStatement\n continue; "]
914817[label="expressionStatement\n sb.append(wordNet[offset]); "]
1014818[label="methodInvocation\n sb.append(wordNet[offset]) "]
1114819[label="typeName\n sb "]
1114820[label="arrayAccess_lfno_primary\n wordNet[offset] "]
1214821[label="expressionName\n wordNet "]
1214822[label="expressionName\n offset "]
914823[label="expressionStatement\n offset+=lengthNet[offset]; "]
1014824[label="assignment\n offset+=lengthNet[offset] "]
1114825[label="expressionName\n offset "]
1114826[label="assignmentOperator\n += "]
1114827[label="arrayAccess_lfno_primary\n lengthNet[offset] "]
1214828[label="expressionName\n lengthNet "]
1214829[label="expressionName\n offset "]
614830[label="returnStatement\n returnsb.toString(); "]
714831[label="methodInvocation_lfno_primary\n sb.toString() "]
814832[label="typeName\n sb "]
314833[label="normalClassDeclaration\n publicstaticclassSearcherextendsBaseSearcher<String>{intbegin;DoubleArrayTrie<String>trie;protectedSearcher(char[]c,DoubleArrayTrie<String>trie){super(c);this.trie=trie;}protectedSearcher(Stringtext,DoubleArrayTrie<String>trie){super(text);this.trie=trie;}@OverridepublicMap.Entry<String,String>next(){Map.Entry<String,String>result=null;while(begin<c.length){LinkedList<Map.Entry<String,String>>entryList=trie.commonPrefixSearchWithValue(c,begin);if(entryList.size()==0){++begin;}else{result=entryList.getLast();offset=begin;begin+=result.getKey().length();break;}}if(result==null){returnnull;}returnresult;}} "]
414834[label="classModifier\n public "]
414835[label="classModifier\n static "]
414836[label="superclass\n extendsBaseSearcher<String> "]
514837[label="classType\n BaseSearcher<String> "]
614838[label="typeArguments\n <String> "]
714839[label="classType_lfno_classOrInterfaceType\n String "]
414840[label="classBody\n {intbegin;DoubleArrayTrie<String>trie;protectedSearcher(char[]c,DoubleArrayTrie<String>trie){super(c);this.trie=trie;}protectedSearcher(Stringtext,DoubleArrayTrie<String>trie){super(text);this.trie=trie;}@OverridepublicMap.Entry<String,String>next(){Map.Entry<String,String>result=null;while(begin<c.length){LinkedList<Map.Entry<String,String>>entryList=trie.commonPrefixSearchWithValue(c,begin);if(entryList.size()==0){++begin;}else{result=entryList.getLast();offset=begin;begin+=result.getKey().length();break;}}if(result==null){returnnull;}returnresult;}} "]
514841[label="fieldDeclaration\n intbegin; "]
614842[label="integralType\n int "]
614843[label="variableDeclaratorId\n begin "]
514844[label="fieldDeclaration\n DoubleArrayTrie<String>trie; "]
614845[label="unannClassType_lfno_unannClassOrInterfaceType\n DoubleArrayTrie<String> "]
714846[label="typeArguments\n <String> "]
814847[label="classType_lfno_classOrInterfaceType\n String "]
614848[label="variableDeclaratorId\n trie "]
514849[label="constructorDeclaration\n protectedSearcher(char[]c,DoubleArrayTrie<String>trie){super(c);this.trie=trie;} "]
614850[label="constructorModifier\n protected "]
614851[label="constructorDeclarator\n Searcher(char[]c,DoubleArrayTrie<String>trie) "]
714852[label="simpleTypeName\n Searcher "]
714853[label="formalParameterList\n char[]c,DoubleArrayTrie<String>trie "]
814854[label="formalParameter\n char[]c "]
914855[label="unannArrayType\n char[] "]
1014856[label="integralType\n char "]
1014857[label="dims\n [] "]
914858[label="variableDeclaratorId\n c "]
814859[label="formalParameter\n DoubleArrayTrie<String>trie "]
914860[label="unannClassType_lfno_unannClassOrInterfaceType\n DoubleArrayTrie<String> "]
1014861[label="typeArguments\n <String> "]
1114862[label="classType_lfno_classOrInterfaceType\n String "]
914863[label="variableDeclaratorId\n trie "]
614864[label="constructorBody\n {super(c);this.trie=trie;} "]
714865[label="explicitConstructorInvocation\n super(c); "]
814866[label="expressionName\n c "]
714867[label="expressionStatement\n this.trie=trie; "]
814868[label="assignment\n this.trie=trie "]
914869[label="fieldAccess\n this.trie "]
1014870[label="primaryNoNewArray_lfno_primary\n this "]
914871[label="assignmentOperator\n = "]
914872[label="expressionName\n trie "]
514873[label="constructorDeclaration\n protectedSearcher(Stringtext,DoubleArrayTrie<String>trie){super(text);this.trie=trie;} "]
614874[label="constructorModifier\n protected "]
614875[label="constructorDeclarator\n Searcher(Stringtext,DoubleArrayTrie<String>trie) "]
714876[label="simpleTypeName\n Searcher "]
714877[label="formalParameterList\n Stringtext,DoubleArrayTrie<String>trie "]
814878[label="formalParameter\n Stringtext "]
914879[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
914880[label="variableDeclaratorId\n text "]
814881[label="formalParameter\n DoubleArrayTrie<String>trie "]
914882[label="unannClassType_lfno_unannClassOrInterfaceType\n DoubleArrayTrie<String> "]
1014883[label="typeArguments\n <String> "]
1114884[label="classType_lfno_classOrInterfaceType\n String "]
914885[label="variableDeclaratorId\n trie "]
614886[label="constructorBody\n {super(text);this.trie=trie;} "]
714887[label="explicitConstructorInvocation\n super(text); "]
814888[label="expressionName\n text "]
714889[label="expressionStatement\n this.trie=trie; "]
814890[label="assignment\n this.trie=trie "]
914891[label="fieldAccess\n this.trie "]
1014892[label="primaryNoNewArray_lfno_primary\n this "]
914893[label="assignmentOperator\n = "]
914894[label="expressionName\n trie "]
514895[label="methodDeclaration\n @OverridepublicMap.Entry<String,String>next(){Map.Entry<String,String>result=null;while(begin<c.length){LinkedList<Map.Entry<String,String>>entryList=trie.commonPrefixSearchWithValue(c,begin);if(entryList.size()==0){++begin;}else{result=entryList.getLast();offset=begin;begin+=result.getKey().length();break;}}if(result==null){returnnull;}returnresult;} "]
614896[label="markerAnnotation\n @Override "]
714897[label="typeName\n Override "]
614898[label="methodModifier\n public "]
614899[label="methodHeader\n Map.Entry<String,String>next() "]
714900[label="unannClassOrInterfaceType\n Map.Entry<String,String> "]
814901[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
814902[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String> "]
914903[label="typeArguments\n <String,String> "]
1014904[label="typeArgumentList\n String,String "]
1114905[label="classType_lfno_classOrInterfaceType\n String "]
1114906[label="classType_lfno_classOrInterfaceType\n String "]
714907[label="methodDeclarator\n next() "]
614908[label="block\n {Map.Entry<String,String>result=null;while(begin<c.length){LinkedList<Map.Entry<String,String>>entryList=trie.commonPrefixSearchWithValue(c,begin);if(entryList.size()==0){++begin;}else{result=entryList.getLast();offset=begin;begin+=result.getKey().length();break;}}if(result==null){returnnull;}returnresult;} "]
714909[label="blockStatements\n Map.Entry<String,String>result=null;while(begin<c.length){LinkedList<Map.Entry<String,String>>entryList=trie.commonPrefixSearchWithValue(c,begin);if(entryList.size()==0){++begin;}else{result=entryList.getLast();offset=begin;begin+=result.getKey().length();break;}}if(result==null){returnnull;}returnresult; "]
814910[label="localVariableDeclarationStatement\n Map.Entry<String,String>result=null; "]
914911[label="localVariableDeclaration\n Map.Entry<String,String>result=null "]
1014912[label="unannClassOrInterfaceType\n Map.Entry<String,String> "]
1114913[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
1114914[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String> "]
1214915[label="typeArguments\n <String,String> "]
1314916[label="typeArgumentList\n String,String "]
1414917[label="classType_lfno_classOrInterfaceType\n String "]
1414918[label="classType_lfno_classOrInterfaceType\n String "]
1014919[label="variableDeclarator\n result=null "]
1114920[label="variableDeclaratorId\n result "]
1114921[label="literal\n null "]
814922[label="whileStatement\n while(begin<c.length){LinkedList<Map.Entry<String,String>>entryList=trie.commonPrefixSearchWithValue(c,begin);if(entryList.size()==0){++begin;}else{result=entryList.getLast();offset=begin;begin+=result.getKey().length();break;}} "]
914923[label="relationalExpression\n begin<c.length "]
1014924[label="expressionName\n begin "]
1014925[label="expressionName\n c.length "]
1114926[label="ambiguousName\n c "]
914927[label="block\n {LinkedList<Map.Entry<String,String>>entryList=trie.commonPrefixSearchWithValue(c,begin);if(entryList.size()==0){++begin;}else{result=entryList.getLast();offset=begin;begin+=result.getKey().length();break;}} "]
1014928[label="blockStatements\n LinkedList<Map.Entry<String,String>>entryList=trie.commonPrefixSearchWithValue(c,begin);if(entryList.size()==0){++begin;}else{result=entryList.getLast();offset=begin;begin+=result.getKey().length();break;} "]
1114929[label="localVariableDeclarationStatement\n LinkedList<Map.Entry<String,String>>entryList=trie.commonPrefixSearchWithValue(c,begin); "]
1214930[label="localVariableDeclaration\n LinkedList<Map.Entry<String,String>>entryList=trie.commonPrefixSearchWithValue(c,begin) "]
1314931[label="unannClassType_lfno_unannClassOrInterfaceType\n LinkedList<Map.Entry<String,String>> "]
1414932[label="typeArguments\n <Map.Entry<String,String>> "]
1514933[label="classOrInterfaceType\n Map.Entry<String,String> "]
1614934[label="classType_lfno_classOrInterfaceType\n Map "]
1614935[label="classType_lf_classOrInterfaceType\n .Entry<String,String> "]
1714936[label="typeArguments\n <String,String> "]
1814937[label="typeArgumentList\n String,String "]
1914938[label="classType_lfno_classOrInterfaceType\n String "]
1914939[label="classType_lfno_classOrInterfaceType\n String "]
1314940[label="variableDeclarator\n entryList=trie.commonPrefixSearchWithValue(c,begin) "]
1414941[label="variableDeclaratorId\n entryList "]
1414942[label="methodInvocation_lfno_primary\n trie.commonPrefixSearchWithValue(c,begin) "]
1514943[label="typeName\n trie "]
1514944[label="argumentList\n c,begin "]
1614945[label="expressionName\n c "]
1614946[label="expressionName\n begin "]
1114947[label="ifThenElseStatement\n if(entryList.size()==0){++begin;}else{result=entryList.getLast();offset=begin;begin+=result.getKey().length();break;} "]
1214948[label="equalityExpression\n entryList.size()==0 "]
1314949[label="methodInvocation_lfno_primary\n entryList.size() "]
1414950[label="typeName\n entryList "]
1314951[label="literal\n 0 "]
1214952[label="block\n {++begin;} "]
1314953[label="expressionStatement\n ++begin; "]
1414954[label="preIncrementExpression\n ++begin "]
1514955[label="expressionName\n begin "]
1214956[label="block\n {result=entryList.getLast();offset=begin;begin+=result.getKey().length();break;} "]
1314957[label="blockStatements\n result=entryList.getLast();offset=begin;begin+=result.getKey().length();break; "]
1414958[label="expressionStatement\n result=entryList.getLast(); "]
1514959[label="assignment\n result=entryList.getLast() "]
1614960[label="expressionName\n result "]
1614961[label="assignmentOperator\n = "]
1614962[label="methodInvocation_lfno_primary\n entryList.getLast() "]
1714963[label="typeName\n entryList "]
1414964[label="expressionStatement\n offset=begin; "]
1514965[label="assignment\n offset=begin "]
1614966[label="expressionName\n offset "]
1614967[label="assignmentOperator\n = "]
1614968[label="expressionName\n begin "]
1414969[label="expressionStatement\n begin+=result.getKey().length(); "]
1514970[label="assignment\n begin+=result.getKey().length() "]
1614971[label="expressionName\n begin "]
1614972[label="assignmentOperator\n += "]
1614973[label="primary\n result.getKey().length() "]
1714974[label="methodInvocation_lfno_primary\n result.getKey() "]
1814975[label="typeName\n result "]
1714976[label="methodInvocation_lf_primary\n .length() "]
1414977[label="breakStatement\n break; "]
814978[label="ifThenStatement\n if(result==null){returnnull;} "]
914979[label="equalityExpression\n result==null "]
1014980[label="expressionName\n result "]
1014981[label="literal\n null "]
914982[label="block\n {returnnull;} "]
1014983[label="returnStatement\n returnnull; "]
1114984[label="literal\n null "]
814985[label="returnStatement\n returnresult; "]
914986[label="expressionName\n result "]
014987[label="compilationUnit\n packagecom.hankcs.hanlp.classification.features;importcom.hankcs.hanlp.collection.trie.bintrie.BinTrie;importcom.hankcs.hanlp.classification.corpus.Catalog;importcom.hankcs.hanlp.classification.corpus.Document;importcom.hankcs.hanlp.classification.corpus.IDataSet;importcom.hankcs.hanlp.classification.corpus.Lexicon;importjava.util.Map;publicclassBaseFeatureData{publicintn;publicint[][]featureCategoryJointCount;publicint[]categoryCounts;publicBinTrie<Integer>wordIdTrie;publicBaseFeatureData(IDataSetdataSet){Catalogcatalog=dataSet.getCatalog();Lexiconlexicon=dataSet.getLexicon();n=dataSet.size();featureCategoryJointCount=newint[lexicon.size()][catalog.size()];categoryCounts=newint[catalog.size()];for(Documentdocument:dataSet){++categoryCounts[document.category];for(Map.Entry<Integer,int[]>entry:document.tfMap.entrySet()){featureCategoryJointCount[entry.getKey()][document.category]+=1;}}}}<EOF> "]
114988[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.features; "]
214989[label="packageName\n com.hankcs.hanlp.classification.features "]
314990[label="packageName\n com.hankcs.hanlp.classification "]
414991[label="packageName\n com.hankcs.hanlp "]
514992[label="packageName\n com.hankcs "]
614993[label="packageName\n com "]
114994[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.bintrie.BinTrie; "]
214995[label="typeName\n com.hankcs.hanlp.collection.trie.bintrie.BinTrie "]
314996[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie.bintrie "]
414997[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
514998[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
614999[label="packageOrTypeName\n com.hankcs.hanlp "]
715000[label="packageOrTypeName\n com.hankcs "]
815001[label="packageOrTypeName\n com "]
115002[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.Catalog; "]
215003[label="typeName\n com.hankcs.hanlp.classification.corpus.Catalog "]
315004[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
415005[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
515006[label="packageOrTypeName\n com.hankcs.hanlp "]
615007[label="packageOrTypeName\n com.hankcs "]
715008[label="packageOrTypeName\n com "]
115009[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.Document; "]
215010[label="typeName\n com.hankcs.hanlp.classification.corpus.Document "]
315011[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
415012[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
515013[label="packageOrTypeName\n com.hankcs.hanlp "]
615014[label="packageOrTypeName\n com.hankcs "]
715015[label="packageOrTypeName\n com "]
115016[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.IDataSet; "]
215017[label="typeName\n com.hankcs.hanlp.classification.corpus.IDataSet "]
315018[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
415019[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
515020[label="packageOrTypeName\n com.hankcs.hanlp "]
615021[label="packageOrTypeName\n com.hankcs "]
715022[label="packageOrTypeName\n com "]
115023[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.Lexicon; "]
215024[label="typeName\n com.hankcs.hanlp.classification.corpus.Lexicon "]
315025[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
415026[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
515027[label="packageOrTypeName\n com.hankcs.hanlp "]
615028[label="packageOrTypeName\n com.hankcs "]
715029[label="packageOrTypeName\n com "]
115030[label="singleTypeImportDeclaration\n importjava.util.Map; "]
215031[label="typeName\n java.util.Map "]
315032[label="packageOrTypeName\n java.util "]
415033[label="packageOrTypeName\n java "]
115034[label="normalClassDeclaration\n publicclassBaseFeatureData{publicintn;publicint[][]featureCategoryJointCount;publicint[]categoryCounts;publicBinTrie<Integer>wordIdTrie;publicBaseFeatureData(IDataSetdataSet){Catalogcatalog=dataSet.getCatalog();Lexiconlexicon=dataSet.getLexicon();n=dataSet.size();featureCategoryJointCount=newint[lexicon.size()][catalog.size()];categoryCounts=newint[catalog.size()];for(Documentdocument:dataSet){++categoryCounts[document.category];for(Map.Entry<Integer,int[]>entry:document.tfMap.entrySet()){featureCategoryJointCount[entry.getKey()][document.category]+=1;}}}} "]
215035[label="classModifier\n public "]
215036[label="classBody\n {publicintn;publicint[][]featureCategoryJointCount;publicint[]categoryCounts;publicBinTrie<Integer>wordIdTrie;publicBaseFeatureData(IDataSetdataSet){Catalogcatalog=dataSet.getCatalog();Lexiconlexicon=dataSet.getLexicon();n=dataSet.size();featureCategoryJointCount=newint[lexicon.size()][catalog.size()];categoryCounts=newint[catalog.size()];for(Documentdocument:dataSet){++categoryCounts[document.category];for(Map.Entry<Integer,int[]>entry:document.tfMap.entrySet()){featureCategoryJointCount[entry.getKey()][document.category]+=1;}}}} "]
315037[label="fieldDeclaration\n publicintn; "]
415038[label="fieldModifier\n public "]
415039[label="integralType\n int "]
415040[label="variableDeclaratorId\n n "]
315041[label="fieldDeclaration\n publicint[][]featureCategoryJointCount; "]
415042[label="fieldModifier\n public "]
415043[label="unannArrayType\n int[][] "]
515044[label="integralType\n int "]
515045[label="dims\n [][] "]
415046[label="variableDeclaratorId\n featureCategoryJointCount "]
315047[label="fieldDeclaration\n publicint[]categoryCounts; "]
415048[label="fieldModifier\n public "]
415049[label="unannArrayType\n int[] "]
515050[label="integralType\n int "]
515051[label="dims\n [] "]
415052[label="variableDeclaratorId\n categoryCounts "]
315053[label="fieldDeclaration\n publicBinTrie<Integer>wordIdTrie; "]
415054[label="fieldModifier\n public "]
415055[label="unannClassType_lfno_unannClassOrInterfaceType\n BinTrie<Integer> "]
515056[label="typeArguments\n <Integer> "]
615057[label="classType_lfno_classOrInterfaceType\n Integer "]
415058[label="variableDeclaratorId\n wordIdTrie "]
315059[label="constructorDeclaration\n publicBaseFeatureData(IDataSetdataSet){Catalogcatalog=dataSet.getCatalog();Lexiconlexicon=dataSet.getLexicon();n=dataSet.size();featureCategoryJointCount=newint[lexicon.size()][catalog.size()];categoryCounts=newint[catalog.size()];for(Documentdocument:dataSet){++categoryCounts[document.category];for(Map.Entry<Integer,int[]>entry:document.tfMap.entrySet()){featureCategoryJointCount[entry.getKey()][document.category]+=1;}}} "]
415060[label="constructorModifier\n public "]
415061[label="constructorDeclarator\n BaseFeatureData(IDataSetdataSet) "]
515062[label="simpleTypeName\n BaseFeatureData "]
515063[label="formalParameter\n IDataSetdataSet "]
615064[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
615065[label="variableDeclaratorId\n dataSet "]
415066[label="constructorBody\n {Catalogcatalog=dataSet.getCatalog();Lexiconlexicon=dataSet.getLexicon();n=dataSet.size();featureCategoryJointCount=newint[lexicon.size()][catalog.size()];categoryCounts=newint[catalog.size()];for(Documentdocument:dataSet){++categoryCounts[document.category];for(Map.Entry<Integer,int[]>entry:document.tfMap.entrySet()){featureCategoryJointCount[entry.getKey()][document.category]+=1;}}} "]
515067[label="blockStatements\n Catalogcatalog=dataSet.getCatalog();Lexiconlexicon=dataSet.getLexicon();n=dataSet.size();featureCategoryJointCount=newint[lexicon.size()][catalog.size()];categoryCounts=newint[catalog.size()];for(Documentdocument:dataSet){++categoryCounts[document.category];for(Map.Entry<Integer,int[]>entry:document.tfMap.entrySet()){featureCategoryJointCount[entry.getKey()][document.category]+=1;}} "]
615068[label="localVariableDeclarationStatement\n Catalogcatalog=dataSet.getCatalog(); "]
715069[label="localVariableDeclaration\n Catalogcatalog=dataSet.getCatalog() "]
815070[label="unannClassType_lfno_unannClassOrInterfaceType\n Catalog "]
815071[label="variableDeclarator\n catalog=dataSet.getCatalog() "]
915072[label="variableDeclaratorId\n catalog "]
915073[label="methodInvocation_lfno_primary\n dataSet.getCatalog() "]
1015074[label="typeName\n dataSet "]
615075[label="localVariableDeclarationStatement\n Lexiconlexicon=dataSet.getLexicon(); "]
715076[label="localVariableDeclaration\n Lexiconlexicon=dataSet.getLexicon() "]
815077[label="unannClassType_lfno_unannClassOrInterfaceType\n Lexicon "]
815078[label="variableDeclarator\n lexicon=dataSet.getLexicon() "]
915079[label="variableDeclaratorId\n lexicon "]
915080[label="methodInvocation_lfno_primary\n dataSet.getLexicon() "]
1015081[label="typeName\n dataSet "]
615082[label="expressionStatement\n n=dataSet.size(); "]
715083[label="assignment\n n=dataSet.size() "]
815084[label="expressionName\n n "]
815085[label="assignmentOperator\n = "]
815086[label="methodInvocation_lfno_primary\n dataSet.size() "]
915087[label="typeName\n dataSet "]
615088[label="expressionStatement\n featureCategoryJointCount=newint[lexicon.size()][catalog.size()]; "]
715089[label="assignment\n featureCategoryJointCount=newint[lexicon.size()][catalog.size()] "]
815090[label="expressionName\n featureCategoryJointCount "]
815091[label="assignmentOperator\n = "]
815092[label="arrayCreationExpression\n newint[lexicon.size()][catalog.size()] "]
915093[label="integralType\n int "]
915094[label="dimExprs\n [lexicon.size()][catalog.size()] "]
1015095[label="dimExpr\n [lexicon.size()] "]
1115096[label="methodInvocation_lfno_primary\n lexicon.size() "]
1215097[label="typeName\n lexicon "]
1015098[label="dimExpr\n [catalog.size()] "]
1115099[label="methodInvocation_lfno_primary\n catalog.size() "]
1215100[label="typeName\n catalog "]
615101[label="expressionStatement\n categoryCounts=newint[catalog.size()]; "]
715102[label="assignment\n categoryCounts=newint[catalog.size()] "]
815103[label="expressionName\n categoryCounts "]
815104[label="assignmentOperator\n = "]
815105[label="arrayCreationExpression\n newint[catalog.size()] "]
915106[label="integralType\n int "]
915107[label="dimExpr\n [catalog.size()] "]
1015108[label="methodInvocation_lfno_primary\n catalog.size() "]
1115109[label="typeName\n catalog "]
615110[label="enhancedForStatement\n for(Documentdocument:dataSet){++categoryCounts[document.category];for(Map.Entry<Integer,int[]>entry:document.tfMap.entrySet()){featureCategoryJointCount[entry.getKey()][document.category]+=1;}} "]
715111[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
715112[label="variableDeclaratorId\n document "]
715113[label="expressionName\n dataSet "]
715114[label="block\n {++categoryCounts[document.category];for(Map.Entry<Integer,int[]>entry:document.tfMap.entrySet()){featureCategoryJointCount[entry.getKey()][document.category]+=1;}} "]
815115[label="blockStatements\n ++categoryCounts[document.category];for(Map.Entry<Integer,int[]>entry:document.tfMap.entrySet()){featureCategoryJointCount[entry.getKey()][document.category]+=1;} "]
915116[label="expressionStatement\n ++categoryCounts[document.category]; "]
1015117[label="preIncrementExpression\n ++categoryCounts[document.category] "]
1115118[label="arrayAccess_lfno_primary\n categoryCounts[document.category] "]
1215119[label="expressionName\n categoryCounts "]
1215120[label="expressionName\n document.category "]
1315121[label="ambiguousName\n document "]
915122[label="enhancedForStatement\n for(Map.Entry<Integer,int[]>entry:document.tfMap.entrySet()){featureCategoryJointCount[entry.getKey()][document.category]+=1;} "]
1015123[label="unannClassOrInterfaceType\n Map.Entry<Integer,int[]> "]
1115124[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
1115125[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<Integer,int[]> "]
1215126[label="typeArguments\n <Integer,int[]> "]
1315127[label="typeArgumentList\n Integer,int[] "]
1415128[label="classType_lfno_classOrInterfaceType\n Integer "]
1415129[label="arrayType\n int[] "]
1515130[label="integralType\n int "]
1515131[label="dims\n [] "]
1015132[label="variableDeclaratorId\n entry "]
1015133[label="methodInvocation_lfno_primary\n document.tfMap.entrySet() "]
1115134[label="typeName\n document.tfMap "]
1215135[label="packageOrTypeName\n document "]
1015136[label="block\n {featureCategoryJointCount[entry.getKey()][document.category]+=1;} "]
1115137[label="expressionStatement\n featureCategoryJointCount[entry.getKey()][document.category]+=1; "]
1215138[label="assignment\n featureCategoryJointCount[entry.getKey()][document.category]+=1 "]
1315139[label="arrayAccess\n featureCategoryJointCount[entry.getKey()][document.category] "]
1415140[label="expressionName\n featureCategoryJointCount "]
1415141[label="methodInvocation_lfno_primary\n entry.getKey() "]
1515142[label="typeName\n entry "]
1415143[label="primaryNoNewArray_lf_arrayAccess\n  "]
1415144[label="expressionName\n document.category "]
1515145[label="ambiguousName\n document "]
1315146[label="assignmentOperator\n += "]
1315147[label="literal\n 1 "]
015148[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.bintrie;importcom.hankcs.hanlp.corpus.io.ByteArray;importjava.io.DataOutputStream;importjava.io.IOException;importjava.io.ObjectInput;importjava.io.ObjectOutput;importjava.util.AbstractMap;importjava.util.Map;importjava.util.Set;publicabstractclassBaseNode<V>implementsComparable<BaseNode>{staticfinalStatus[]ARRAY_STATUS=Status.values();protectedBaseNode[]child;protectedStatusstatus;protectedcharc;protectedVvalue;publicBaseNode<V>transition(char[]path,intbegin){BaseNode<V>cur=this;for(inti=begin;i<path.length;++i){cur=cur.getChild(path[i]);if(cur==null||cur.status==Status.UNDEFINED_0)returnnull;}returncur;}publicBaseNode<V>transition(charpath){BaseNode<V>cur=this;cur=cur.getChild(path);if(cur==null||cur.status==Status.UNDEFINED_0)returnnull;returncur;}protectedabstractbooleanaddChild(BaseNodenode);protectedbooleanhasChild(charc){returngetChild(c)!=null;}protectedchargetChar(){returnc;}publicabstractBaseNodegetChild(charc);publicfinalVgetValue(){returnvalue;}publicfinalvoidsetValue(Vvalue){this.value=value;}@OverridepublicintcompareTo(BaseNodeother){returncompareTo(other.getChar());}publicintcompareTo(charother){if(this.c>other){return1;}if(this.c<other){return-1;}return0;}publicStatusgetStatus(){returnstatus;}protectedvoidwalk(StringBuildersb,Set<Map.Entry<String,V>>entrySet){sb.append(c);if(status==Status.WORD_MIDDLE_2||status==Status.WORD_END_3){entrySet.add(newTrieEntry(sb.toString(),value));}if(child==null)return;for(BaseNodenode:child){if(node==null)continue;node.walk(newStringBuilder(sb.toString()),entrySet);}}protectedvoidwalkToSave(DataOutputStreamout)throwsIOException{out.writeChar(c);out.writeInt(status.ordinal());intchildSize=0;if(child!=null)childSize=child.length;out.writeInt(childSize);if(child==null)return;for(BaseNodenode:child){node.walkToSave(out);}}protectedvoidwalkToSave(ObjectOutputout)throwsIOException{out.writeChar(c);out.writeInt(status.ordinal());if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){out.writeObject(value);}intchildSize=0;if(child!=null)childSize=child.length;out.writeInt(childSize);if(child==null)return;for(BaseNodenode:child){node.walkToSave(out);}}protectedvoidwalkToLoad(ByteArraybyteArray,_ValueArray<V>valueArray){c=byteArray.nextChar();status=ARRAY_STATUS[byteArray.nextInt()];if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){value=valueArray.nextValue();}intchildSize=byteArray.nextInt();child=newBaseNode[childSize];for(inti=0;i<childSize;++i){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}protectedvoidwalkToLoad(ObjectInputbyteArray)throwsIOException,ClassNotFoundException{c=byteArray.readChar();status=ARRAY_STATUS[byteArray.readInt()];if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){value=(V)byteArray.readObject();}intchildSize=byteArray.readInt();child=newBaseNode[childSize];for(inti=0;i<childSize;++i){child[i]=newNode<V>();child[i].walkToLoad(byteArray);}}publicenumStatus{UNDEFINED_0,NOT_WORD_1,WORD_MIDDLE_2,WORD_END_3,}publicclassTrieEntryextendsAbstractMap.SimpleEntry<String,V>implementsComparable<TrieEntry>{publicTrieEntry(Stringkey,Vvalue){super(key,value);}@OverridepublicintcompareTo(TrieEntryo){returngetKey().compareTo(o.getKey());}}@OverridepublicStringtoString(){if(child==null){return\"BaseNode{\"+\"status=\"+status+\", c=\"+c+\", value=\"+value+'}';}return\"BaseNode{\"+\"child=\"+child.length+\", status=\"+status+\", c=\"+c+\", value=\"+value+'}';}}<EOF> "]
115149[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.bintrie; "]
215150[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie "]
315151[label="packageName\n com.hankcs.hanlp.collection.trie "]
415152[label="packageName\n com.hankcs.hanlp.collection "]
515153[label="packageName\n com.hankcs.hanlp "]
615154[label="packageName\n com.hankcs "]
715155[label="packageName\n com "]
115156[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.ByteArray; "]
215157[label="typeName\n com.hankcs.hanlp.corpus.io.ByteArray "]
315158[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
415159[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
515160[label="packageOrTypeName\n com.hankcs.hanlp "]
615161[label="packageOrTypeName\n com.hankcs "]
715162[label="packageOrTypeName\n com "]
115163[label="singleTypeImportDeclaration\n importjava.io.DataOutputStream; "]
215164[label="typeName\n java.io.DataOutputStream "]
315165[label="packageOrTypeName\n java.io "]
415166[label="packageOrTypeName\n java "]
115167[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
215168[label="typeName\n java.io.IOException "]
315169[label="packageOrTypeName\n java.io "]
415170[label="packageOrTypeName\n java "]
115171[label="singleTypeImportDeclaration\n importjava.io.ObjectInput; "]
215172[label="typeName\n java.io.ObjectInput "]
315173[label="packageOrTypeName\n java.io "]
415174[label="packageOrTypeName\n java "]
115175[label="singleTypeImportDeclaration\n importjava.io.ObjectOutput; "]
215176[label="typeName\n java.io.ObjectOutput "]
315177[label="packageOrTypeName\n java.io "]
415178[label="packageOrTypeName\n java "]
115179[label="singleTypeImportDeclaration\n importjava.util.AbstractMap; "]
215180[label="typeName\n java.util.AbstractMap "]
315181[label="packageOrTypeName\n java.util "]
415182[label="packageOrTypeName\n java "]
115183[label="singleTypeImportDeclaration\n importjava.util.Map; "]
215184[label="typeName\n java.util.Map "]
315185[label="packageOrTypeName\n java.util "]
415186[label="packageOrTypeName\n java "]
115187[label="singleTypeImportDeclaration\n importjava.util.Set; "]
215188[label="typeName\n java.util.Set "]
315189[label="packageOrTypeName\n java.util "]
415190[label="packageOrTypeName\n java "]
115191[label="normalClassDeclaration\n publicabstractclassBaseNode<V>implementsComparable<BaseNode>{staticfinalStatus[]ARRAY_STATUS=Status.values();protectedBaseNode[]child;protectedStatusstatus;protectedcharc;protectedVvalue;publicBaseNode<V>transition(char[]path,intbegin){BaseNode<V>cur=this;for(inti=begin;i<path.length;++i){cur=cur.getChild(path[i]);if(cur==null||cur.status==Status.UNDEFINED_0)returnnull;}returncur;}publicBaseNode<V>transition(charpath){BaseNode<V>cur=this;cur=cur.getChild(path);if(cur==null||cur.status==Status.UNDEFINED_0)returnnull;returncur;}protectedabstractbooleanaddChild(BaseNodenode);protectedbooleanhasChild(charc){returngetChild(c)!=null;}protectedchargetChar(){returnc;}publicabstractBaseNodegetChild(charc);publicfinalVgetValue(){returnvalue;}publicfinalvoidsetValue(Vvalue){this.value=value;}@OverridepublicintcompareTo(BaseNodeother){returncompareTo(other.getChar());}publicintcompareTo(charother){if(this.c>other){return1;}if(this.c<other){return-1;}return0;}publicStatusgetStatus(){returnstatus;}protectedvoidwalk(StringBuildersb,Set<Map.Entry<String,V>>entrySet){sb.append(c);if(status==Status.WORD_MIDDLE_2||status==Status.WORD_END_3){entrySet.add(newTrieEntry(sb.toString(),value));}if(child==null)return;for(BaseNodenode:child){if(node==null)continue;node.walk(newStringBuilder(sb.toString()),entrySet);}}protectedvoidwalkToSave(DataOutputStreamout)throwsIOException{out.writeChar(c);out.writeInt(status.ordinal());intchildSize=0;if(child!=null)childSize=child.length;out.writeInt(childSize);if(child==null)return;for(BaseNodenode:child){node.walkToSave(out);}}protectedvoidwalkToSave(ObjectOutputout)throwsIOException{out.writeChar(c);out.writeInt(status.ordinal());if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){out.writeObject(value);}intchildSize=0;if(child!=null)childSize=child.length;out.writeInt(childSize);if(child==null)return;for(BaseNodenode:child){node.walkToSave(out);}}protectedvoidwalkToLoad(ByteArraybyteArray,_ValueArray<V>valueArray){c=byteArray.nextChar();status=ARRAY_STATUS[byteArray.nextInt()];if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){value=valueArray.nextValue();}intchildSize=byteArray.nextInt();child=newBaseNode[childSize];for(inti=0;i<childSize;++i){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}protectedvoidwalkToLoad(ObjectInputbyteArray)throwsIOException,ClassNotFoundException{c=byteArray.readChar();status=ARRAY_STATUS[byteArray.readInt()];if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){value=(V)byteArray.readObject();}intchildSize=byteArray.readInt();child=newBaseNode[childSize];for(inti=0;i<childSize;++i){child[i]=newNode<V>();child[i].walkToLoad(byteArray);}}publicenumStatus{UNDEFINED_0,NOT_WORD_1,WORD_MIDDLE_2,WORD_END_3,}publicclassTrieEntryextendsAbstractMap.SimpleEntry<String,V>implementsComparable<TrieEntry>{publicTrieEntry(Stringkey,Vvalue){super(key,value);}@OverridepublicintcompareTo(TrieEntryo){returngetKey().compareTo(o.getKey());}}@OverridepublicStringtoString(){if(child==null){return\"BaseNode{\"+\"status=\"+status+\", c=\"+c+\", value=\"+value+'}';}return\"BaseNode{\"+\"child=\"+child.length+\", status=\"+status+\", c=\"+c+\", value=\"+value+'}';}} "]
215192[label="classModifier\n public "]
215193[label="classModifier\n abstract "]
215194[label="typeParameters\n <V> "]
315195[label="typeParameter\n V "]
215196[label="superinterfaces\n implementsComparable<BaseNode> "]
315197[label="classType\n Comparable<BaseNode> "]
415198[label="typeArguments\n <BaseNode> "]
515199[label="classType_lfno_classOrInterfaceType\n BaseNode "]
215200[label="classBody\n {staticfinalStatus[]ARRAY_STATUS=Status.values();protectedBaseNode[]child;protectedStatusstatus;protectedcharc;protectedVvalue;publicBaseNode<V>transition(char[]path,intbegin){BaseNode<V>cur=this;for(inti=begin;i<path.length;++i){cur=cur.getChild(path[i]);if(cur==null||cur.status==Status.UNDEFINED_0)returnnull;}returncur;}publicBaseNode<V>transition(charpath){BaseNode<V>cur=this;cur=cur.getChild(path);if(cur==null||cur.status==Status.UNDEFINED_0)returnnull;returncur;}protectedabstractbooleanaddChild(BaseNodenode);protectedbooleanhasChild(charc){returngetChild(c)!=null;}protectedchargetChar(){returnc;}publicabstractBaseNodegetChild(charc);publicfinalVgetValue(){returnvalue;}publicfinalvoidsetValue(Vvalue){this.value=value;}@OverridepublicintcompareTo(BaseNodeother){returncompareTo(other.getChar());}publicintcompareTo(charother){if(this.c>other){return1;}if(this.c<other){return-1;}return0;}publicStatusgetStatus(){returnstatus;}protectedvoidwalk(StringBuildersb,Set<Map.Entry<String,V>>entrySet){sb.append(c);if(status==Status.WORD_MIDDLE_2||status==Status.WORD_END_3){entrySet.add(newTrieEntry(sb.toString(),value));}if(child==null)return;for(BaseNodenode:child){if(node==null)continue;node.walk(newStringBuilder(sb.toString()),entrySet);}}protectedvoidwalkToSave(DataOutputStreamout)throwsIOException{out.writeChar(c);out.writeInt(status.ordinal());intchildSize=0;if(child!=null)childSize=child.length;out.writeInt(childSize);if(child==null)return;for(BaseNodenode:child){node.walkToSave(out);}}protectedvoidwalkToSave(ObjectOutputout)throwsIOException{out.writeChar(c);out.writeInt(status.ordinal());if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){out.writeObject(value);}intchildSize=0;if(child!=null)childSize=child.length;out.writeInt(childSize);if(child==null)return;for(BaseNodenode:child){node.walkToSave(out);}}protectedvoidwalkToLoad(ByteArraybyteArray,_ValueArray<V>valueArray){c=byteArray.nextChar();status=ARRAY_STATUS[byteArray.nextInt()];if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){value=valueArray.nextValue();}intchildSize=byteArray.nextInt();child=newBaseNode[childSize];for(inti=0;i<childSize;++i){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}protectedvoidwalkToLoad(ObjectInputbyteArray)throwsIOException,ClassNotFoundException{c=byteArray.readChar();status=ARRAY_STATUS[byteArray.readInt()];if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){value=(V)byteArray.readObject();}intchildSize=byteArray.readInt();child=newBaseNode[childSize];for(inti=0;i<childSize;++i){child[i]=newNode<V>();child[i].walkToLoad(byteArray);}}publicenumStatus{UNDEFINED_0,NOT_WORD_1,WORD_MIDDLE_2,WORD_END_3,}publicclassTrieEntryextendsAbstractMap.SimpleEntry<String,V>implementsComparable<TrieEntry>{publicTrieEntry(Stringkey,Vvalue){super(key,value);}@OverridepublicintcompareTo(TrieEntryo){returngetKey().compareTo(o.getKey());}}@OverridepublicStringtoString(){if(child==null){return\"BaseNode{\"+\"status=\"+status+\", c=\"+c+\", value=\"+value+'}';}return\"BaseNode{\"+\"child=\"+child.length+\", status=\"+status+\", c=\"+c+\", value=\"+value+'}';}} "]
315201[label="fieldDeclaration\n staticfinalStatus[]ARRAY_STATUS=Status.values(); "]
415202[label="fieldModifier\n static "]
415203[label="fieldModifier\n final "]
415204[label="unannArrayType\n Status[] "]
515205[label="unannClassType_lfno_unannClassOrInterfaceType\n Status "]
515206[label="dims\n [] "]
415207[label="variableDeclarator\n ARRAY_STATUS=Status.values() "]
515208[label="variableDeclaratorId\n ARRAY_STATUS "]
515209[label="methodInvocation_lfno_primary\n Status.values() "]
615210[label="typeName\n Status "]
315211[label="fieldDeclaration\n protectedBaseNode[]child; "]
415212[label="fieldModifier\n protected "]
415213[label="unannArrayType\n BaseNode[] "]
515214[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
515215[label="dims\n [] "]
415216[label="variableDeclaratorId\n child "]
315217[label="fieldDeclaration\n protectedStatusstatus; "]
415218[label="fieldModifier\n protected "]
415219[label="unannClassType_lfno_unannClassOrInterfaceType\n Status "]
415220[label="variableDeclaratorId\n status "]
315221[label="fieldDeclaration\n protectedcharc; "]
415222[label="fieldModifier\n protected "]
415223[label="integralType\n char "]
415224[label="variableDeclaratorId\n c "]
315225[label="fieldDeclaration\n protectedVvalue; "]
415226[label="fieldModifier\n protected "]
415227[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
415228[label="variableDeclaratorId\n value "]
315229[label="methodDeclaration\n publicBaseNode<V>transition(char[]path,intbegin){BaseNode<V>cur=this;for(inti=begin;i<path.length;++i){cur=cur.getChild(path[i]);if(cur==null||cur.status==Status.UNDEFINED_0)returnnull;}returncur;} "]
415230[label="methodModifier\n public "]
415231[label="methodHeader\n BaseNode<V>transition(char[]path,intbegin) "]
515232[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode<V> "]
615233[label="typeArguments\n <V> "]
715234[label="classType_lfno_classOrInterfaceType\n V "]
515235[label="methodDeclarator\n transition(char[]path,intbegin) "]
615236[label="formalParameterList\n char[]path,intbegin "]
715237[label="formalParameter\n char[]path "]
815238[label="unannArrayType\n char[] "]
915239[label="integralType\n char "]
915240[label="dims\n [] "]
815241[label="variableDeclaratorId\n path "]
715242[label="formalParameter\n intbegin "]
815243[label="integralType\n int "]
815244[label="variableDeclaratorId\n begin "]
415245[label="block\n {BaseNode<V>cur=this;for(inti=begin;i<path.length;++i){cur=cur.getChild(path[i]);if(cur==null||cur.status==Status.UNDEFINED_0)returnnull;}returncur;} "]
515246[label="blockStatements\n BaseNode<V>cur=this;for(inti=begin;i<path.length;++i){cur=cur.getChild(path[i]);if(cur==null||cur.status==Status.UNDEFINED_0)returnnull;}returncur; "]
615247[label="localVariableDeclarationStatement\n BaseNode<V>cur=this; "]
715248[label="localVariableDeclaration\n BaseNode<V>cur=this "]
815249[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode<V> "]
915250[label="typeArguments\n <V> "]
1015251[label="classType_lfno_classOrInterfaceType\n V "]
815252[label="variableDeclarator\n cur=this "]
915253[label="variableDeclaratorId\n cur "]
915254[label="primaryNoNewArray_lfno_primary\n this "]
615255[label="basicForStatement\n for(inti=begin;i<path.length;++i){cur=cur.getChild(path[i]);if(cur==null||cur.status==Status.UNDEFINED_0)returnnull;} "]
715256[label="localVariableDeclaration\n inti=begin "]
815257[label="integralType\n int "]
815258[label="variableDeclarator\n i=begin "]
915259[label="variableDeclaratorId\n i "]
915260[label="expressionName\n begin "]
715261[label="relationalExpression\n i<path.length "]
815262[label="expressionName\n i "]
815263[label="expressionName\n path.length "]
915264[label="ambiguousName\n path "]
715265[label="preIncrementExpression\n ++i "]
815266[label="expressionName\n i "]
715267[label="block\n {cur=cur.getChild(path[i]);if(cur==null||cur.status==Status.UNDEFINED_0)returnnull;} "]
815268[label="blockStatements\n cur=cur.getChild(path[i]);if(cur==null||cur.status==Status.UNDEFINED_0)returnnull; "]
915269[label="expressionStatement\n cur=cur.getChild(path[i]); "]
1015270[label="assignment\n cur=cur.getChild(path[i]) "]
1115271[label="expressionName\n cur "]
1115272[label="assignmentOperator\n = "]
1115273[label="methodInvocation_lfno_primary\n cur.getChild(path[i]) "]
1215274[label="typeName\n cur "]
1215275[label="arrayAccess_lfno_primary\n path[i] "]
1315276[label="expressionName\n path "]
1315277[label="expressionName\n i "]
915278[label="ifThenStatement\n if(cur==null||cur.status==Status.UNDEFINED_0)returnnull; "]
1015279[label="conditionalOrExpression\n cur==null||cur.status==Status.UNDEFINED_0 "]
1115280[label="equalityExpression\n cur==null "]
1215281[label="expressionName\n cur "]
1215282[label="literal\n null "]
1115283[label="equalityExpression\n cur.status==Status.UNDEFINED_0 "]
1215284[label="expressionName\n cur.status "]
1315285[label="ambiguousName\n cur "]
1215286[label="expressionName\n Status.UNDEFINED_0 "]
1315287[label="ambiguousName\n Status "]
1015288[label="returnStatement\n returnnull; "]
1115289[label="literal\n null "]
615290[label="returnStatement\n returncur; "]
715291[label="expressionName\n cur "]
315292[label="methodDeclaration\n publicBaseNode<V>transition(charpath){BaseNode<V>cur=this;cur=cur.getChild(path);if(cur==null||cur.status==Status.UNDEFINED_0)returnnull;returncur;} "]
415293[label="methodModifier\n public "]
415294[label="methodHeader\n BaseNode<V>transition(charpath) "]
515295[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode<V> "]
615296[label="typeArguments\n <V> "]
715297[label="classType_lfno_classOrInterfaceType\n V "]
515298[label="methodDeclarator\n transition(charpath) "]
615299[label="formalParameter\n charpath "]
715300[label="integralType\n char "]
715301[label="variableDeclaratorId\n path "]
415302[label="block\n {BaseNode<V>cur=this;cur=cur.getChild(path);if(cur==null||cur.status==Status.UNDEFINED_0)returnnull;returncur;} "]
515303[label="blockStatements\n BaseNode<V>cur=this;cur=cur.getChild(path);if(cur==null||cur.status==Status.UNDEFINED_0)returnnull;returncur; "]
615304[label="localVariableDeclarationStatement\n BaseNode<V>cur=this; "]
715305[label="localVariableDeclaration\n BaseNode<V>cur=this "]
815306[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode<V> "]
915307[label="typeArguments\n <V> "]
1015308[label="classType_lfno_classOrInterfaceType\n V "]
815309[label="variableDeclarator\n cur=this "]
915310[label="variableDeclaratorId\n cur "]
915311[label="primaryNoNewArray_lfno_primary\n this "]
615312[label="expressionStatement\n cur=cur.getChild(path); "]
715313[label="assignment\n cur=cur.getChild(path) "]
815314[label="expressionName\n cur "]
815315[label="assignmentOperator\n = "]
815316[label="methodInvocation_lfno_primary\n cur.getChild(path) "]
915317[label="typeName\n cur "]
915318[label="expressionName\n path "]
615319[label="ifThenStatement\n if(cur==null||cur.status==Status.UNDEFINED_0)returnnull; "]
715320[label="conditionalOrExpression\n cur==null||cur.status==Status.UNDEFINED_0 "]
815321[label="equalityExpression\n cur==null "]
915322[label="expressionName\n cur "]
915323[label="literal\n null "]
815324[label="equalityExpression\n cur.status==Status.UNDEFINED_0 "]
915325[label="expressionName\n cur.status "]
1015326[label="ambiguousName\n cur "]
915327[label="expressionName\n Status.UNDEFINED_0 "]
1015328[label="ambiguousName\n Status "]
715329[label="returnStatement\n returnnull; "]
815330[label="literal\n null "]
615331[label="returnStatement\n returncur; "]
715332[label="expressionName\n cur "]
315333[label="methodDeclaration\n protectedabstractbooleanaddChild(BaseNodenode); "]
415334[label="methodModifier\n protected "]
415335[label="methodModifier\n abstract "]
415336[label="methodHeader\n booleanaddChild(BaseNodenode) "]
515337[label="unannPrimitiveType\n boolean "]
515338[label="methodDeclarator\n addChild(BaseNodenode) "]
615339[label="formalParameter\n BaseNodenode "]
715340[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
715341[label="variableDeclaratorId\n node "]
415342[label="methodBody\n ; "]
315343[label="methodDeclaration\n protectedbooleanhasChild(charc){returngetChild(c)!=null;} "]
415344[label="methodModifier\n protected "]
415345[label="methodHeader\n booleanhasChild(charc) "]
515346[label="unannPrimitiveType\n boolean "]
515347[label="methodDeclarator\n hasChild(charc) "]
615348[label="formalParameter\n charc "]
715349[label="integralType\n char "]
715350[label="variableDeclaratorId\n c "]
415351[label="block\n {returngetChild(c)!=null;} "]
515352[label="returnStatement\n returngetChild(c)!=null; "]
615353[label="equalityExpression\n getChild(c)!=null "]
715354[label="methodInvocation_lfno_primary\n getChild(c) "]
815355[label="methodName\n getChild "]
815356[label="expressionName\n c "]
715357[label="literal\n null "]
315358[label="methodDeclaration\n protectedchargetChar(){returnc;} "]
415359[label="methodModifier\n protected "]
415360[label="methodHeader\n chargetChar() "]
515361[label="integralType\n char "]
515362[label="methodDeclarator\n getChar() "]
415363[label="block\n {returnc;} "]
515364[label="returnStatement\n returnc; "]
615365[label="expressionName\n c "]
315366[label="methodDeclaration\n publicabstractBaseNodegetChild(charc); "]
415367[label="methodModifier\n public "]
415368[label="methodModifier\n abstract "]
415369[label="methodHeader\n BaseNodegetChild(charc) "]
515370[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
515371[label="methodDeclarator\n getChild(charc) "]
615372[label="formalParameter\n charc "]
715373[label="integralType\n char "]
715374[label="variableDeclaratorId\n c "]
415375[label="methodBody\n ; "]
315376[label="methodDeclaration\n publicfinalVgetValue(){returnvalue;} "]
415377[label="methodModifier\n public "]
415378[label="methodModifier\n final "]
415379[label="methodHeader\n VgetValue() "]
515380[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
515381[label="methodDeclarator\n getValue() "]
415382[label="block\n {returnvalue;} "]
515383[label="returnStatement\n returnvalue; "]
615384[label="expressionName\n value "]
315385[label="methodDeclaration\n publicfinalvoidsetValue(Vvalue){this.value=value;} "]
415386[label="methodModifier\n public "]
415387[label="methodModifier\n final "]
415388[label="methodHeader\n voidsetValue(Vvalue) "]
515389[label="result\n void "]
515390[label="methodDeclarator\n setValue(Vvalue) "]
615391[label="formalParameter\n Vvalue "]
715392[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
715393[label="variableDeclaratorId\n value "]
415394[label="block\n {this.value=value;} "]
515395[label="expressionStatement\n this.value=value; "]
615396[label="assignment\n this.value=value "]
715397[label="fieldAccess\n this.value "]
815398[label="primaryNoNewArray_lfno_primary\n this "]
715399[label="assignmentOperator\n = "]
715400[label="expressionName\n value "]
315401[label="methodDeclaration\n @OverridepublicintcompareTo(BaseNodeother){returncompareTo(other.getChar());} "]
415402[label="markerAnnotation\n @Override "]
515403[label="typeName\n Override "]
415404[label="methodModifier\n public "]
415405[label="methodHeader\n intcompareTo(BaseNodeother) "]
515406[label="integralType\n int "]
515407[label="methodDeclarator\n compareTo(BaseNodeother) "]
615408[label="formalParameter\n BaseNodeother "]
715409[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
715410[label="variableDeclaratorId\n other "]
415411[label="block\n {returncompareTo(other.getChar());} "]
515412[label="returnStatement\n returncompareTo(other.getChar()); "]
615413[label="methodInvocation_lfno_primary\n compareTo(other.getChar()) "]
715414[label="methodName\n compareTo "]
715415[label="methodInvocation_lfno_primary\n other.getChar() "]
815416[label="typeName\n other "]
315417[label="methodDeclaration\n publicintcompareTo(charother){if(this.c>other){return1;}if(this.c<other){return-1;}return0;} "]
415418[label="methodModifier\n public "]
415419[label="methodHeader\n intcompareTo(charother) "]
515420[label="integralType\n int "]
515421[label="methodDeclarator\n compareTo(charother) "]
615422[label="formalParameter\n charother "]
715423[label="integralType\n char "]
715424[label="variableDeclaratorId\n other "]
415425[label="block\n {if(this.c>other){return1;}if(this.c<other){return-1;}return0;} "]
515426[label="blockStatements\n if(this.c>other){return1;}if(this.c<other){return-1;}return0; "]
615427[label="ifThenStatement\n if(this.c>other){return1;} "]
715428[label="relationalExpression\n this.c>other "]
815429[label="primary\n this.c "]
915430[label="primaryNoNewArray_lfno_primary\n this "]
915431[label="fieldAccess_lf_primary\n .c "]
815432[label="expressionName\n other "]
715433[label="block\n {return1;} "]
815434[label="returnStatement\n return1; "]
915435[label="literal\n 1 "]
615436[label="ifThenStatement\n if(this.c<other){return-1;} "]
715437[label="relationalExpression\n this.c<other "]
815438[label="primary\n this.c "]
915439[label="primaryNoNewArray_lfno_primary\n this "]
915440[label="fieldAccess_lf_primary\n .c "]
815441[label="expressionName\n other "]
715442[label="block\n {return-1;} "]
815443[label="returnStatement\n return-1; "]
915444[label="unaryExpression\n -1 "]
1015445[label="literal\n 1 "]
615446[label="returnStatement\n return0; "]
715447[label="literal\n 0 "]
315448[label="methodDeclaration\n publicStatusgetStatus(){returnstatus;} "]
415449[label="methodModifier\n public "]
415450[label="methodHeader\n StatusgetStatus() "]
515451[label="unannClassType_lfno_unannClassOrInterfaceType\n Status "]
515452[label="methodDeclarator\n getStatus() "]
415453[label="block\n {returnstatus;} "]
515454[label="returnStatement\n returnstatus; "]
615455[label="expressionName\n status "]
315456[label="methodDeclaration\n protectedvoidwalk(StringBuildersb,Set<Map.Entry<String,V>>entrySet){sb.append(c);if(status==Status.WORD_MIDDLE_2||status==Status.WORD_END_3){entrySet.add(newTrieEntry(sb.toString(),value));}if(child==null)return;for(BaseNodenode:child){if(node==null)continue;node.walk(newStringBuilder(sb.toString()),entrySet);}} "]
415457[label="methodModifier\n protected "]
415458[label="methodHeader\n voidwalk(StringBuildersb,Set<Map.Entry<String,V>>entrySet) "]
515459[label="result\n void "]
515460[label="methodDeclarator\n walk(StringBuildersb,Set<Map.Entry<String,V>>entrySet) "]
615461[label="formalParameterList\n StringBuildersb,Set<Map.Entry<String,V>>entrySet "]
715462[label="formalParameter\n StringBuildersb "]
815463[label="unannClassType_lfno_unannClassOrInterfaceType\n StringBuilder "]
815464[label="variableDeclaratorId\n sb "]
715465[label="formalParameter\n Set<Map.Entry<String,V>>entrySet "]
815466[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<Map.Entry<String,V>> "]
915467[label="typeArguments\n <Map.Entry<String,V>> "]
1015468[label="classOrInterfaceType\n Map.Entry<String,V> "]
1115469[label="classType_lfno_classOrInterfaceType\n Map "]
1115470[label="classType_lf_classOrInterfaceType\n .Entry<String,V> "]
1215471[label="typeArguments\n <String,V> "]
1315472[label="typeArgumentList\n String,V "]
1415473[label="classType_lfno_classOrInterfaceType\n String "]
1415474[label="classType_lfno_classOrInterfaceType\n V "]
815475[label="variableDeclaratorId\n entrySet "]
415476[label="block\n {sb.append(c);if(status==Status.WORD_MIDDLE_2||status==Status.WORD_END_3){entrySet.add(newTrieEntry(sb.toString(),value));}if(child==null)return;for(BaseNodenode:child){if(node==null)continue;node.walk(newStringBuilder(sb.toString()),entrySet);}} "]
515477[label="blockStatements\n sb.append(c);if(status==Status.WORD_MIDDLE_2||status==Status.WORD_END_3){entrySet.add(newTrieEntry(sb.toString(),value));}if(child==null)return;for(BaseNodenode:child){if(node==null)continue;node.walk(newStringBuilder(sb.toString()),entrySet);} "]
615478[label="expressionStatement\n sb.append(c); "]
715479[label="methodInvocation\n sb.append(c) "]
815480[label="typeName\n sb "]
815481[label="expressionName\n c "]
615482[label="ifThenStatement\n if(status==Status.WORD_MIDDLE_2||status==Status.WORD_END_3){entrySet.add(newTrieEntry(sb.toString(),value));} "]
715483[label="conditionalOrExpression\n status==Status.WORD_MIDDLE_2||status==Status.WORD_END_3 "]
815484[label="equalityExpression\n status==Status.WORD_MIDDLE_2 "]
915485[label="expressionName\n status "]
915486[label="expressionName\n Status.WORD_MIDDLE_2 "]
1015487[label="ambiguousName\n Status "]
815488[label="equalityExpression\n status==Status.WORD_END_3 "]
915489[label="expressionName\n status "]
915490[label="expressionName\n Status.WORD_END_3 "]
1015491[label="ambiguousName\n Status "]
715492[label="block\n {entrySet.add(newTrieEntry(sb.toString(),value));} "]
815493[label="expressionStatement\n entrySet.add(newTrieEntry(sb.toString(),value)); "]
915494[label="methodInvocation\n entrySet.add(newTrieEntry(sb.toString(),value)) "]
1015495[label="typeName\n entrySet "]
1015496[label="classInstanceCreationExpression_lfno_primary\n newTrieEntry(sb.toString(),value) "]
1115497[label="argumentList\n sb.toString(),value "]
1215498[label="methodInvocation_lfno_primary\n sb.toString() "]
1315499[label="typeName\n sb "]
1215500[label="expressionName\n value "]
615501[label="ifThenStatement\n if(child==null)return; "]
715502[label="equalityExpression\n child==null "]
815503[label="expressionName\n child "]
815504[label="literal\n null "]
715505[label="returnStatement\n return; "]
615506[label="enhancedForStatement\n for(BaseNodenode:child){if(node==null)continue;node.walk(newStringBuilder(sb.toString()),entrySet);} "]
715507[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
715508[label="variableDeclaratorId\n node "]
715509[label="expressionName\n child "]
715510[label="block\n {if(node==null)continue;node.walk(newStringBuilder(sb.toString()),entrySet);} "]
815511[label="blockStatements\n if(node==null)continue;node.walk(newStringBuilder(sb.toString()),entrySet); "]
915512[label="ifThenStatement\n if(node==null)continue; "]
1015513[label="equalityExpression\n node==null "]
1115514[label="expressionName\n node "]
1115515[label="literal\n null "]
1015516[label="continueStatement\n continue; "]
915517[label="expressionStatement\n node.walk(newStringBuilder(sb.toString()),entrySet); "]
1015518[label="methodInvocation\n node.walk(newStringBuilder(sb.toString()),entrySet) "]
1115519[label="typeName\n node "]
1115520[label="argumentList\n newStringBuilder(sb.toString()),entrySet "]
1215521[label="classInstanceCreationExpression_lfno_primary\n newStringBuilder(sb.toString()) "]
1315522[label="methodInvocation_lfno_primary\n sb.toString() "]
1415523[label="typeName\n sb "]
1215524[label="expressionName\n entrySet "]
315525[label="methodDeclaration\n protectedvoidwalkToSave(DataOutputStreamout)throwsIOException{out.writeChar(c);out.writeInt(status.ordinal());intchildSize=0;if(child!=null)childSize=child.length;out.writeInt(childSize);if(child==null)return;for(BaseNodenode:child){node.walkToSave(out);}} "]
415526[label="methodModifier\n protected "]
415527[label="methodHeader\n voidwalkToSave(DataOutputStreamout)throwsIOException "]
515528[label="result\n void "]
515529[label="methodDeclarator\n walkToSave(DataOutputStreamout) "]
615530[label="formalParameter\n DataOutputStreamout "]
715531[label="unannClassType_lfno_unannClassOrInterfaceType\n DataOutputStream "]
715532[label="variableDeclaratorId\n out "]
515533[label="throws_\n throwsIOException "]
615534[label="classType\n IOException "]
415535[label="block\n {out.writeChar(c);out.writeInt(status.ordinal());intchildSize=0;if(child!=null)childSize=child.length;out.writeInt(childSize);if(child==null)return;for(BaseNodenode:child){node.walkToSave(out);}} "]
515536[label="blockStatements\n out.writeChar(c);out.writeInt(status.ordinal());intchildSize=0;if(child!=null)childSize=child.length;out.writeInt(childSize);if(child==null)return;for(BaseNodenode:child){node.walkToSave(out);} "]
615537[label="expressionStatement\n out.writeChar(c); "]
715538[label="methodInvocation\n out.writeChar(c) "]
815539[label="typeName\n out "]
815540[label="expressionName\n c "]
615541[label="expressionStatement\n out.writeInt(status.ordinal()); "]
715542[label="methodInvocation\n out.writeInt(status.ordinal()) "]
815543[label="typeName\n out "]
815544[label="methodInvocation_lfno_primary\n status.ordinal() "]
915545[label="typeName\n status "]
615546[label="localVariableDeclarationStatement\n intchildSize=0; "]
715547[label="localVariableDeclaration\n intchildSize=0 "]
815548[label="integralType\n int "]
815549[label="variableDeclarator\n childSize=0 "]
915550[label="variableDeclaratorId\n childSize "]
915551[label="literal\n 0 "]
615552[label="ifThenStatement\n if(child!=null)childSize=child.length; "]
715553[label="equalityExpression\n child!=null "]
815554[label="expressionName\n child "]
815555[label="literal\n null "]
715556[label="expressionStatement\n childSize=child.length; "]
815557[label="assignment\n childSize=child.length "]
915558[label="expressionName\n childSize "]
915559[label="assignmentOperator\n = "]
915560[label="expressionName\n child.length "]
1015561[label="ambiguousName\n child "]
615562[label="expressionStatement\n out.writeInt(childSize); "]
715563[label="methodInvocation\n out.writeInt(childSize) "]
815564[label="typeName\n out "]
815565[label="expressionName\n childSize "]
615566[label="ifThenStatement\n if(child==null)return; "]
715567[label="equalityExpression\n child==null "]
815568[label="expressionName\n child "]
815569[label="literal\n null "]
715570[label="returnStatement\n return; "]
615571[label="enhancedForStatement\n for(BaseNodenode:child){node.walkToSave(out);} "]
715572[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
715573[label="variableDeclaratorId\n node "]
715574[label="expressionName\n child "]
715575[label="block\n {node.walkToSave(out);} "]
815576[label="expressionStatement\n node.walkToSave(out); "]
915577[label="methodInvocation\n node.walkToSave(out) "]
1015578[label="typeName\n node "]
1015579[label="expressionName\n out "]
315580[label="methodDeclaration\n protectedvoidwalkToSave(ObjectOutputout)throwsIOException{out.writeChar(c);out.writeInt(status.ordinal());if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){out.writeObject(value);}intchildSize=0;if(child!=null)childSize=child.length;out.writeInt(childSize);if(child==null)return;for(BaseNodenode:child){node.walkToSave(out);}} "]
415581[label="methodModifier\n protected "]
415582[label="methodHeader\n voidwalkToSave(ObjectOutputout)throwsIOException "]
515583[label="result\n void "]
515584[label="methodDeclarator\n walkToSave(ObjectOutputout) "]
615585[label="formalParameter\n ObjectOutputout "]
715586[label="unannClassType_lfno_unannClassOrInterfaceType\n ObjectOutput "]
715587[label="variableDeclaratorId\n out "]
515588[label="throws_\n throwsIOException "]
615589[label="classType\n IOException "]
415590[label="block\n {out.writeChar(c);out.writeInt(status.ordinal());if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){out.writeObject(value);}intchildSize=0;if(child!=null)childSize=child.length;out.writeInt(childSize);if(child==null)return;for(BaseNodenode:child){node.walkToSave(out);}} "]
515591[label="blockStatements\n out.writeChar(c);out.writeInt(status.ordinal());if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){out.writeObject(value);}intchildSize=0;if(child!=null)childSize=child.length;out.writeInt(childSize);if(child==null)return;for(BaseNodenode:child){node.walkToSave(out);} "]
615592[label="expressionStatement\n out.writeChar(c); "]
715593[label="methodInvocation\n out.writeChar(c) "]
815594[label="typeName\n out "]
815595[label="expressionName\n c "]
615596[label="expressionStatement\n out.writeInt(status.ordinal()); "]
715597[label="methodInvocation\n out.writeInt(status.ordinal()) "]
815598[label="typeName\n out "]
815599[label="methodInvocation_lfno_primary\n status.ordinal() "]
915600[label="typeName\n status "]
615601[label="ifThenStatement\n if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){out.writeObject(value);} "]
715602[label="conditionalOrExpression\n status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2 "]
815603[label="equalityExpression\n status==Status.WORD_END_3 "]
915604[label="expressionName\n status "]
915605[label="expressionName\n Status.WORD_END_3 "]
1015606[label="ambiguousName\n Status "]
815607[label="equalityExpression\n status==Status.WORD_MIDDLE_2 "]
915608[label="expressionName\n status "]
915609[label="expressionName\n Status.WORD_MIDDLE_2 "]
1015610[label="ambiguousName\n Status "]
715611[label="block\n {out.writeObject(value);} "]
815612[label="expressionStatement\n out.writeObject(value); "]
915613[label="methodInvocation\n out.writeObject(value) "]
1015614[label="typeName\n out "]
1015615[label="expressionName\n value "]
615616[label="localVariableDeclarationStatement\n intchildSize=0; "]
715617[label="localVariableDeclaration\n intchildSize=0 "]
815618[label="integralType\n int "]
815619[label="variableDeclarator\n childSize=0 "]
915620[label="variableDeclaratorId\n childSize "]
915621[label="literal\n 0 "]
615622[label="ifThenStatement\n if(child!=null)childSize=child.length; "]
715623[label="equalityExpression\n child!=null "]
815624[label="expressionName\n child "]
815625[label="literal\n null "]
715626[label="expressionStatement\n childSize=child.length; "]
815627[label="assignment\n childSize=child.length "]
915628[label="expressionName\n childSize "]
915629[label="assignmentOperator\n = "]
915630[label="expressionName\n child.length "]
1015631[label="ambiguousName\n child "]
615632[label="expressionStatement\n out.writeInt(childSize); "]
715633[label="methodInvocation\n out.writeInt(childSize) "]
815634[label="typeName\n out "]
815635[label="expressionName\n childSize "]
615636[label="ifThenStatement\n if(child==null)return; "]
715637[label="equalityExpression\n child==null "]
815638[label="expressionName\n child "]
815639[label="literal\n null "]
715640[label="returnStatement\n return; "]
615641[label="enhancedForStatement\n for(BaseNodenode:child){node.walkToSave(out);} "]
715642[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
715643[label="variableDeclaratorId\n node "]
715644[label="expressionName\n child "]
715645[label="block\n {node.walkToSave(out);} "]
815646[label="expressionStatement\n node.walkToSave(out); "]
915647[label="methodInvocation\n node.walkToSave(out) "]
1015648[label="typeName\n node "]
1015649[label="expressionName\n out "]
315650[label="methodDeclaration\n protectedvoidwalkToLoad(ByteArraybyteArray,_ValueArray<V>valueArray){c=byteArray.nextChar();status=ARRAY_STATUS[byteArray.nextInt()];if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){value=valueArray.nextValue();}intchildSize=byteArray.nextInt();child=newBaseNode[childSize];for(inti=0;i<childSize;++i){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}} "]
415651[label="methodModifier\n protected "]
415652[label="methodHeader\n voidwalkToLoad(ByteArraybyteArray,_ValueArray<V>valueArray) "]
515653[label="result\n void "]
515654[label="methodDeclarator\n walkToLoad(ByteArraybyteArray,_ValueArray<V>valueArray) "]
615655[label="formalParameterList\n ByteArraybyteArray,_ValueArray<V>valueArray "]
715656[label="formalParameter\n ByteArraybyteArray "]
815657[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
815658[label="variableDeclaratorId\n byteArray "]
715659[label="formalParameter\n _ValueArray<V>valueArray "]
815660[label="unannClassType_lfno_unannClassOrInterfaceType\n _ValueArray<V> "]
915661[label="typeArguments\n <V> "]
1015662[label="classType_lfno_classOrInterfaceType\n V "]
815663[label="variableDeclaratorId\n valueArray "]
415664[label="block\n {c=byteArray.nextChar();status=ARRAY_STATUS[byteArray.nextInt()];if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){value=valueArray.nextValue();}intchildSize=byteArray.nextInt();child=newBaseNode[childSize];for(inti=0;i<childSize;++i){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}} "]
515665[label="blockStatements\n c=byteArray.nextChar();status=ARRAY_STATUS[byteArray.nextInt()];if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){value=valueArray.nextValue();}intchildSize=byteArray.nextInt();child=newBaseNode[childSize];for(inti=0;i<childSize;++i){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);} "]
615666[label="expressionStatement\n c=byteArray.nextChar(); "]
715667[label="assignment\n c=byteArray.nextChar() "]
815668[label="expressionName\n c "]
815669[label="assignmentOperator\n = "]
815670[label="methodInvocation_lfno_primary\n byteArray.nextChar() "]
915671[label="typeName\n byteArray "]
615672[label="expressionStatement\n status=ARRAY_STATUS[byteArray.nextInt()]; "]
715673[label="assignment\n status=ARRAY_STATUS[byteArray.nextInt()] "]
815674[label="expressionName\n status "]
815675[label="assignmentOperator\n = "]
815676[label="arrayAccess_lfno_primary\n ARRAY_STATUS[byteArray.nextInt()] "]
915677[label="expressionName\n ARRAY_STATUS "]
915678[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
1015679[label="typeName\n byteArray "]
615680[label="ifThenStatement\n if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){value=valueArray.nextValue();} "]
715681[label="conditionalOrExpression\n status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2 "]
815682[label="equalityExpression\n status==Status.WORD_END_3 "]
915683[label="expressionName\n status "]
915684[label="expressionName\n Status.WORD_END_3 "]
1015685[label="ambiguousName\n Status "]
815686[label="equalityExpression\n status==Status.WORD_MIDDLE_2 "]
915687[label="expressionName\n status "]
915688[label="expressionName\n Status.WORD_MIDDLE_2 "]
1015689[label="ambiguousName\n Status "]
715690[label="block\n {value=valueArray.nextValue();} "]
815691[label="expressionStatement\n value=valueArray.nextValue(); "]
915692[label="assignment\n value=valueArray.nextValue() "]
1015693[label="expressionName\n value "]
1015694[label="assignmentOperator\n = "]
1015695[label="methodInvocation_lfno_primary\n valueArray.nextValue() "]
1115696[label="typeName\n valueArray "]
615697[label="localVariableDeclarationStatement\n intchildSize=byteArray.nextInt(); "]
715698[label="localVariableDeclaration\n intchildSize=byteArray.nextInt() "]
815699[label="integralType\n int "]
815700[label="variableDeclarator\n childSize=byteArray.nextInt() "]
915701[label="variableDeclaratorId\n childSize "]
915702[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
1015703[label="typeName\n byteArray "]
615704[label="expressionStatement\n child=newBaseNode[childSize]; "]
715705[label="assignment\n child=newBaseNode[childSize] "]
815706[label="expressionName\n child "]
815707[label="assignmentOperator\n = "]
815708[label="arrayCreationExpression\n newBaseNode[childSize] "]
915709[label="classType_lfno_classOrInterfaceType\n BaseNode "]
915710[label="dimExpr\n [childSize] "]
1015711[label="expressionName\n childSize "]
615712[label="basicForStatement\n for(inti=0;i<childSize;++i){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);} "]
715713[label="localVariableDeclaration\n inti=0 "]
815714[label="integralType\n int "]
815715[label="variableDeclarator\n i=0 "]
915716[label="variableDeclaratorId\n i "]
915717[label="literal\n 0 "]
715718[label="relationalExpression\n i<childSize "]
815719[label="expressionName\n i "]
815720[label="expressionName\n childSize "]
715721[label="preIncrementExpression\n ++i "]
815722[label="expressionName\n i "]
715723[label="block\n {child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);} "]
815724[label="blockStatements\n child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray); "]
915725[label="expressionStatement\n child[i]=newNode<V>(); "]
1015726[label="assignment\n child[i]=newNode<V>() "]
1115727[label="arrayAccess\n child[i] "]
1215728[label="expressionName\n child "]
1215729[label="expressionName\n i "]
1115730[label="assignmentOperator\n = "]
1115731[label="classInstanceCreationExpression_lfno_primary\n newNode<V>() "]
1215732[label="typeArguments\n <V> "]
1315733[label="classType_lfno_classOrInterfaceType\n V "]
915734[label="expressionStatement\n child[i].walkToLoad(byteArray,valueArray); "]
1015735[label="methodInvocation\n child[i].walkToLoad(byteArray,valueArray) "]
1115736[label="arrayAccess_lfno_primary\n child[i] "]
1215737[label="expressionName\n child "]
1215738[label="expressionName\n i "]
1115739[label="argumentList\n byteArray,valueArray "]
1215740[label="expressionName\n byteArray "]
1215741[label="expressionName\n valueArray "]
315742[label="methodDeclaration\n protectedvoidwalkToLoad(ObjectInputbyteArray)throwsIOException,ClassNotFoundException{c=byteArray.readChar();status=ARRAY_STATUS[byteArray.readInt()];if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){value=(V)byteArray.readObject();}intchildSize=byteArray.readInt();child=newBaseNode[childSize];for(inti=0;i<childSize;++i){child[i]=newNode<V>();child[i].walkToLoad(byteArray);}} "]
415743[label="methodModifier\n protected "]
415744[label="methodHeader\n voidwalkToLoad(ObjectInputbyteArray)throwsIOException,ClassNotFoundException "]
515745[label="result\n void "]
515746[label="methodDeclarator\n walkToLoad(ObjectInputbyteArray) "]
615747[label="formalParameter\n ObjectInputbyteArray "]
715748[label="unannClassType_lfno_unannClassOrInterfaceType\n ObjectInput "]
715749[label="variableDeclaratorId\n byteArray "]
515750[label="throws_\n throwsIOException,ClassNotFoundException "]
615751[label="exceptionTypeList\n IOException,ClassNotFoundException "]
715752[label="classType\n IOException "]
715753[label="classType\n ClassNotFoundException "]
415754[label="block\n {c=byteArray.readChar();status=ARRAY_STATUS[byteArray.readInt()];if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){value=(V)byteArray.readObject();}intchildSize=byteArray.readInt();child=newBaseNode[childSize];for(inti=0;i<childSize;++i){child[i]=newNode<V>();child[i].walkToLoad(byteArray);}} "]
515755[label="blockStatements\n c=byteArray.readChar();status=ARRAY_STATUS[byteArray.readInt()];if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){value=(V)byteArray.readObject();}intchildSize=byteArray.readInt();child=newBaseNode[childSize];for(inti=0;i<childSize;++i){child[i]=newNode<V>();child[i].walkToLoad(byteArray);} "]
615756[label="expressionStatement\n c=byteArray.readChar(); "]
715757[label="assignment\n c=byteArray.readChar() "]
815758[label="expressionName\n c "]
815759[label="assignmentOperator\n = "]
815760[label="methodInvocation_lfno_primary\n byteArray.readChar() "]
915761[label="typeName\n byteArray "]
615762[label="expressionStatement\n status=ARRAY_STATUS[byteArray.readInt()]; "]
715763[label="assignment\n status=ARRAY_STATUS[byteArray.readInt()] "]
815764[label="expressionName\n status "]
815765[label="assignmentOperator\n = "]
815766[label="arrayAccess_lfno_primary\n ARRAY_STATUS[byteArray.readInt()] "]
915767[label="expressionName\n ARRAY_STATUS "]
915768[label="methodInvocation_lfno_primary\n byteArray.readInt() "]
1015769[label="typeName\n byteArray "]
615770[label="ifThenStatement\n if(status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2){value=(V)byteArray.readObject();} "]
715771[label="conditionalOrExpression\n status==Status.WORD_END_3||status==Status.WORD_MIDDLE_2 "]
815772[label="equalityExpression\n status==Status.WORD_END_3 "]
915773[label="expressionName\n status "]
915774[label="expressionName\n Status.WORD_END_3 "]
1015775[label="ambiguousName\n Status "]
815776[label="equalityExpression\n status==Status.WORD_MIDDLE_2 "]
915777[label="expressionName\n status "]
915778[label="expressionName\n Status.WORD_MIDDLE_2 "]
1015779[label="ambiguousName\n Status "]
715780[label="block\n {value=(V)byteArray.readObject();} "]
815781[label="expressionStatement\n value=(V)byteArray.readObject(); "]
915782[label="assignment\n value=(V)byteArray.readObject() "]
1015783[label="expressionName\n value "]
1015784[label="assignmentOperator\n = "]
1015785[label="castExpression\n (V)byteArray.readObject() "]
1115786[label="classType_lfno_classOrInterfaceType\n V "]
1115787[label="methodInvocation_lfno_primary\n byteArray.readObject() "]
1215788[label="typeName\n byteArray "]
615789[label="localVariableDeclarationStatement\n intchildSize=byteArray.readInt(); "]
715790[label="localVariableDeclaration\n intchildSize=byteArray.readInt() "]
815791[label="integralType\n int "]
815792[label="variableDeclarator\n childSize=byteArray.readInt() "]
915793[label="variableDeclaratorId\n childSize "]
915794[label="methodInvocation_lfno_primary\n byteArray.readInt() "]
1015795[label="typeName\n byteArray "]
615796[label="expressionStatement\n child=newBaseNode[childSize]; "]
715797[label="assignment\n child=newBaseNode[childSize] "]
815798[label="expressionName\n child "]
815799[label="assignmentOperator\n = "]
815800[label="arrayCreationExpression\n newBaseNode[childSize] "]
915801[label="classType_lfno_classOrInterfaceType\n BaseNode "]
915802[label="dimExpr\n [childSize] "]
1015803[label="expressionName\n childSize "]
615804[label="basicForStatement\n for(inti=0;i<childSize;++i){child[i]=newNode<V>();child[i].walkToLoad(byteArray);} "]
715805[label="localVariableDeclaration\n inti=0 "]
815806[label="integralType\n int "]
815807[label="variableDeclarator\n i=0 "]
915808[label="variableDeclaratorId\n i "]
915809[label="literal\n 0 "]
715810[label="relationalExpression\n i<childSize "]
815811[label="expressionName\n i "]
815812[label="expressionName\n childSize "]
715813[label="preIncrementExpression\n ++i "]
815814[label="expressionName\n i "]
715815[label="block\n {child[i]=newNode<V>();child[i].walkToLoad(byteArray);} "]
815816[label="blockStatements\n child[i]=newNode<V>();child[i].walkToLoad(byteArray); "]
915817[label="expressionStatement\n child[i]=newNode<V>(); "]
1015818[label="assignment\n child[i]=newNode<V>() "]
1115819[label="arrayAccess\n child[i] "]
1215820[label="expressionName\n child "]
1215821[label="expressionName\n i "]
1115822[label="assignmentOperator\n = "]
1115823[label="classInstanceCreationExpression_lfno_primary\n newNode<V>() "]
1215824[label="typeArguments\n <V> "]
1315825[label="classType_lfno_classOrInterfaceType\n V "]
915826[label="expressionStatement\n child[i].walkToLoad(byteArray); "]
1015827[label="methodInvocation\n child[i].walkToLoad(byteArray) "]
1115828[label="arrayAccess_lfno_primary\n child[i] "]
1215829[label="expressionName\n child "]
1215830[label="expressionName\n i "]
1115831[label="expressionName\n byteArray "]
315832[label="enumDeclaration\n publicenumStatus{UNDEFINED_0,NOT_WORD_1,WORD_MIDDLE_2,WORD_END_3,} "]
415833[label="classModifier\n public "]
415834[label="enumBody\n {UNDEFINED_0,NOT_WORD_1,WORD_MIDDLE_2,WORD_END_3,} "]
515835[label="enumConstantList\n UNDEFINED_0,NOT_WORD_1,WORD_MIDDLE_2,WORD_END_3 "]
615836[label="enumConstant\n UNDEFINED_0 "]
615837[label="enumConstant\n NOT_WORD_1 "]
615838[label="enumConstant\n WORD_MIDDLE_2 "]
615839[label="enumConstant\n WORD_END_3 "]
315840[label="normalClassDeclaration\n publicclassTrieEntryextendsAbstractMap.SimpleEntry<String,V>implementsComparable<TrieEntry>{publicTrieEntry(Stringkey,Vvalue){super(key,value);}@OverridepublicintcompareTo(TrieEntryo){returngetKey().compareTo(o.getKey());}} "]
415841[label="classModifier\n public "]
415842[label="superclass\n extendsAbstractMap.SimpleEntry<String,V> "]
515843[label="classType\n AbstractMap.SimpleEntry<String,V> "]
615844[label="classType_lfno_classOrInterfaceType\n AbstractMap "]
615845[label="typeArguments\n <String,V> "]
715846[label="typeArgumentList\n String,V "]
815847[label="classType_lfno_classOrInterfaceType\n String "]
815848[label="classType_lfno_classOrInterfaceType\n V "]
415849[label="superinterfaces\n implementsComparable<TrieEntry> "]
515850[label="classType\n Comparable<TrieEntry> "]
615851[label="typeArguments\n <TrieEntry> "]
715852[label="classType_lfno_classOrInterfaceType\n TrieEntry "]
415853[label="classBody\n {publicTrieEntry(Stringkey,Vvalue){super(key,value);}@OverridepublicintcompareTo(TrieEntryo){returngetKey().compareTo(o.getKey());}} "]
515854[label="constructorDeclaration\n publicTrieEntry(Stringkey,Vvalue){super(key,value);} "]
615855[label="constructorModifier\n public "]
615856[label="constructorDeclarator\n TrieEntry(Stringkey,Vvalue) "]
715857[label="simpleTypeName\n TrieEntry "]
715858[label="formalParameterList\n Stringkey,Vvalue "]
815859[label="formalParameter\n Stringkey "]
915860[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
915861[label="variableDeclaratorId\n key "]
815862[label="formalParameter\n Vvalue "]
915863[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
915864[label="variableDeclaratorId\n value "]
615865[label="constructorBody\n {super(key,value);} "]
715866[label="explicitConstructorInvocation\n super(key,value); "]
815867[label="argumentList\n key,value "]
915868[label="expressionName\n key "]
915869[label="expressionName\n value "]
515870[label="methodDeclaration\n @OverridepublicintcompareTo(TrieEntryo){returngetKey().compareTo(o.getKey());} "]
615871[label="markerAnnotation\n @Override "]
715872[label="typeName\n Override "]
615873[label="methodModifier\n public "]
615874[label="methodHeader\n intcompareTo(TrieEntryo) "]
715875[label="integralType\n int "]
715876[label="methodDeclarator\n compareTo(TrieEntryo) "]
815877[label="formalParameter\n TrieEntryo "]
915878[label="unannClassType_lfno_unannClassOrInterfaceType\n TrieEntry "]
915879[label="variableDeclaratorId\n o "]
615880[label="block\n {returngetKey().compareTo(o.getKey());} "]
715881[label="returnStatement\n returngetKey().compareTo(o.getKey()); "]
815882[label="primary\n getKey().compareTo(o.getKey()) "]
915883[label="methodInvocation_lfno_primary\n getKey() "]
1015884[label="methodName\n getKey "]
915885[label="methodInvocation_lf_primary\n .compareTo(o.getKey()) "]
1015886[label="methodInvocation_lfno_primary\n o.getKey() "]
1115887[label="typeName\n o "]
315888[label="methodDeclaration\n @OverridepublicStringtoString(){if(child==null){return\"BaseNode{\"+\"status=\"+status+\", c=\"+c+\", value=\"+value+'}';}return\"BaseNode{\"+\"child=\"+child.length+\", status=\"+status+\", c=\"+c+\", value=\"+value+'}';} "]
415889[label="markerAnnotation\n @Override "]
515890[label="typeName\n Override "]
415891[label="methodModifier\n public "]
415892[label="methodHeader\n StringtoString() "]
515893[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
515894[label="methodDeclarator\n toString() "]
415895[label="block\n {if(child==null){return\"BaseNode{\"+\"status=\"+status+\", c=\"+c+\", value=\"+value+'}';}return\"BaseNode{\"+\"child=\"+child.length+\", status=\"+status+\", c=\"+c+\", value=\"+value+'}';} "]
515896[label="blockStatements\n if(child==null){return\"BaseNode{\"+\"status=\"+status+\", c=\"+c+\", value=\"+value+'}';}return\"BaseNode{\"+\"child=\"+child.length+\", status=\"+status+\", c=\"+c+\", value=\"+value+'}'; "]
615897[label="ifThenStatement\n if(child==null){return\"BaseNode{\"+\"status=\"+status+\", c=\"+c+\", value=\"+value+'}';} "]
715898[label="equalityExpression\n child==null "]
815899[label="expressionName\n child "]
815900[label="literal\n null "]
715901[label="block\n {return\"BaseNode{\"+\"status=\"+status+\", c=\"+c+\", value=\"+value+'}';} "]
815902[label="returnStatement\n return\"BaseNode{\"+\"status=\"+status+\", c=\"+c+\", value=\"+value+'}'; "]
915903[label="additiveExpression\n \"BaseNode{\"+\"status=\"+status+\", c=\"+c+\", value=\"+value+'}' "]
1015904[label="additiveExpression\n \"BaseNode{\"+\"status=\"+status+\", c=\"+c+\", value=\"+value "]
1115905[label="additiveExpression\n \"BaseNode{\"+\"status=\"+status+\", c=\"+c+\", value=\" "]
1215906[label="additiveExpression\n \"BaseNode{\"+\"status=\"+status+\", c=\"+c "]
1315907[label="additiveExpression\n \"BaseNode{\"+\"status=\"+status+\", c=\" "]
1415908[label="additiveExpression\n \"BaseNode{\"+\"status=\"+status "]
1515909[label="additiveExpression\n \"BaseNode{\"+\"status=\" "]
1615910[label="literal\n \"BaseNode{\" "]
1615911[label="literal\n \"status=\" "]
1515912[label="expressionName\n status "]
1415913[label="literal\n \", c=\" "]
1315914[label="expressionName\n c "]
1215915[label="literal\n \", value=\" "]
1115916[label="expressionName\n value "]
1015917[label="literal\n '}' "]
615918[label="returnStatement\n return\"BaseNode{\"+\"child=\"+child.length+\", status=\"+status+\", c=\"+c+\", value=\"+value+'}'; "]
715919[label="additiveExpression\n \"BaseNode{\"+\"child=\"+child.length+\", status=\"+status+\", c=\"+c+\", value=\"+value+'}' "]
815920[label="additiveExpression\n \"BaseNode{\"+\"child=\"+child.length+\", status=\"+status+\", c=\"+c+\", value=\"+value "]
915921[label="additiveExpression\n \"BaseNode{\"+\"child=\"+child.length+\", status=\"+status+\", c=\"+c+\", value=\" "]
1015922[label="additiveExpression\n \"BaseNode{\"+\"child=\"+child.length+\", status=\"+status+\", c=\"+c "]
1115923[label="additiveExpression\n \"BaseNode{\"+\"child=\"+child.length+\", status=\"+status+\", c=\" "]
1215924[label="additiveExpression\n \"BaseNode{\"+\"child=\"+child.length+\", status=\"+status "]
1315925[label="additiveExpression\n \"BaseNode{\"+\"child=\"+child.length+\", status=\" "]
1415926[label="additiveExpression\n \"BaseNode{\"+\"child=\"+child.length "]
1515927[label="additiveExpression\n \"BaseNode{\"+\"child=\" "]
1615928[label="literal\n \"BaseNode{\" "]
1615929[label="literal\n \"child=\" "]
1515930[label="expressionName\n child.length "]
1615931[label="ambiguousName\n child "]
1415932[label="literal\n \", status=\" "]
1315933[label="expressionName\n status "]
1215934[label="literal\n \", c=\" "]
1115935[label="expressionName\n c "]
1015936[label="literal\n \", value=\" "]
915937[label="expressionName\n value "]
815938[label="literal\n '}' "]
015939[label="compilationUnit\n packagecom.hankcs.hanlp.suggest.scorer;importjava.util.*;publicabstractclassBaseScorer<TextendsISentenceKey>implementsIScorer{publicBaseScorer(){storage=newTreeMap<T,Set<String>>();}protectedMap<T,Set<String>>storage;publicdoubleboost=1.0;publicBaseScorersetBoost(doubleboost){this.boost=boost;returnthis;}@OverridepublicvoidaddSentence(Stringsentence){Tkey=generateKey(sentence);if(key==null)return;Set<String>set=storage.get(key);if(set==null){set=newTreeSet<String>();storage.put(key,set);}set.add(sentence);}protectedabstractTgenerateKey(Stringsentence);@OverridepublicMap<String,Double>computeScore(StringouterSentence){TreeMap<String,Double>result=newTreeMap<String,Double>(Collections.reverseOrder());TkeyOuter=generateKey(outerSentence);if(keyOuter==null)returnresult;for(Map.Entry<T,Set<String>>entry:storage.entrySet()){Tkey=entry.getKey();Doublescore=keyOuter.similarity(key);for(Stringsentence:entry.getValue()){result.put(sentence,score);}}returnresult;}@OverridepublicvoidremoveAllSentences(){storage.clear();}}<EOF> "]
115940[label="packageDeclaration\n packagecom.hankcs.hanlp.suggest.scorer; "]
215941[label="packageName\n com.hankcs.hanlp.suggest.scorer "]
315942[label="packageName\n com.hankcs.hanlp.suggest "]
415943[label="packageName\n com.hankcs.hanlp "]
515944[label="packageName\n com.hankcs "]
615945[label="packageName\n com "]
115946[label="typeImportOnDemandDeclaration\n importjava.util.*; "]
215947[label="packageOrTypeName\n java.util "]
315948[label="packageOrTypeName\n java "]
115949[label="normalClassDeclaration\n publicabstractclassBaseScorer<TextendsISentenceKey>implementsIScorer{publicBaseScorer(){storage=newTreeMap<T,Set<String>>();}protectedMap<T,Set<String>>storage;publicdoubleboost=1.0;publicBaseScorersetBoost(doubleboost){this.boost=boost;returnthis;}@OverridepublicvoidaddSentence(Stringsentence){Tkey=generateKey(sentence);if(key==null)return;Set<String>set=storage.get(key);if(set==null){set=newTreeSet<String>();storage.put(key,set);}set.add(sentence);}protectedabstractTgenerateKey(Stringsentence);@OverridepublicMap<String,Double>computeScore(StringouterSentence){TreeMap<String,Double>result=newTreeMap<String,Double>(Collections.reverseOrder());TkeyOuter=generateKey(outerSentence);if(keyOuter==null)returnresult;for(Map.Entry<T,Set<String>>entry:storage.entrySet()){Tkey=entry.getKey();Doublescore=keyOuter.similarity(key);for(Stringsentence:entry.getValue()){result.put(sentence,score);}}returnresult;}@OverridepublicvoidremoveAllSentences(){storage.clear();}} "]
215950[label="classModifier\n public "]
215951[label="classModifier\n abstract "]
215952[label="typeParameters\n <TextendsISentenceKey> "]
315953[label="typeParameter\n TextendsISentenceKey "]
415954[label="typeBound\n extendsISentenceKey "]
515955[label="typeVariable\n ISentenceKey "]
215956[label="superinterfaces\n implementsIScorer "]
315957[label="classType\n IScorer "]
215958[label="classBody\n {publicBaseScorer(){storage=newTreeMap<T,Set<String>>();}protectedMap<T,Set<String>>storage;publicdoubleboost=1.0;publicBaseScorersetBoost(doubleboost){this.boost=boost;returnthis;}@OverridepublicvoidaddSentence(Stringsentence){Tkey=generateKey(sentence);if(key==null)return;Set<String>set=storage.get(key);if(set==null){set=newTreeSet<String>();storage.put(key,set);}set.add(sentence);}protectedabstractTgenerateKey(Stringsentence);@OverridepublicMap<String,Double>computeScore(StringouterSentence){TreeMap<String,Double>result=newTreeMap<String,Double>(Collections.reverseOrder());TkeyOuter=generateKey(outerSentence);if(keyOuter==null)returnresult;for(Map.Entry<T,Set<String>>entry:storage.entrySet()){Tkey=entry.getKey();Doublescore=keyOuter.similarity(key);for(Stringsentence:entry.getValue()){result.put(sentence,score);}}returnresult;}@OverridepublicvoidremoveAllSentences(){storage.clear();}} "]
315959[label="constructorDeclaration\n publicBaseScorer(){storage=newTreeMap<T,Set<String>>();} "]
415960[label="constructorModifier\n public "]
415961[label="constructorDeclarator\n BaseScorer() "]
515962[label="simpleTypeName\n BaseScorer "]
415963[label="constructorBody\n {storage=newTreeMap<T,Set<String>>();} "]
515964[label="expressionStatement\n storage=newTreeMap<T,Set<String>>(); "]
615965[label="assignment\n storage=newTreeMap<T,Set<String>>() "]
715966[label="expressionName\n storage "]
715967[label="assignmentOperator\n = "]
715968[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<T,Set<String>>() "]
815969[label="typeArguments\n <T,Set<String>> "]
915970[label="typeArgumentList\n T,Set<String> "]
1015971[label="classType_lfno_classOrInterfaceType\n T "]
1015972[label="classType_lfno_classOrInterfaceType\n Set<String> "]
1115973[label="typeArguments\n <String> "]
1215974[label="classType_lfno_classOrInterfaceType\n String "]
315975[label="fieldDeclaration\n protectedMap<T,Set<String>>storage; "]
415976[label="fieldModifier\n protected "]
415977[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<T,Set<String>> "]
515978[label="typeArguments\n <T,Set<String>> "]
615979[label="typeArgumentList\n T,Set<String> "]
715980[label="classType_lfno_classOrInterfaceType\n T "]
715981[label="classType_lfno_classOrInterfaceType\n Set<String> "]
815982[label="typeArguments\n <String> "]
915983[label="classType_lfno_classOrInterfaceType\n String "]
415984[label="variableDeclaratorId\n storage "]
315985[label="fieldDeclaration\n publicdoubleboost=1.0; "]
415986[label="fieldModifier\n public "]
415987[label="floatingPointType\n double "]
415988[label="variableDeclarator\n boost=1.0 "]
515989[label="variableDeclaratorId\n boost "]
515990[label="literal\n 1.0 "]
315991[label="methodDeclaration\n publicBaseScorersetBoost(doubleboost){this.boost=boost;returnthis;} "]
415992[label="methodModifier\n public "]
415993[label="methodHeader\n BaseScorersetBoost(doubleboost) "]
515994[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseScorer "]
515995[label="methodDeclarator\n setBoost(doubleboost) "]
615996[label="formalParameter\n doubleboost "]
715997[label="floatingPointType\n double "]
715998[label="variableDeclaratorId\n boost "]
415999[label="block\n {this.boost=boost;returnthis;} "]
516000[label="blockStatements\n this.boost=boost;returnthis; "]
616001[label="expressionStatement\n this.boost=boost; "]
716002[label="assignment\n this.boost=boost "]
816003[label="fieldAccess\n this.boost "]
916004[label="primaryNoNewArray_lfno_primary\n this "]
816005[label="assignmentOperator\n = "]
816006[label="expressionName\n boost "]
616007[label="returnStatement\n returnthis; "]
716008[label="primaryNoNewArray_lfno_primary\n this "]
316009[label="methodDeclaration\n @OverridepublicvoidaddSentence(Stringsentence){Tkey=generateKey(sentence);if(key==null)return;Set<String>set=storage.get(key);if(set==null){set=newTreeSet<String>();storage.put(key,set);}set.add(sentence);} "]
416010[label="markerAnnotation\n @Override "]
516011[label="typeName\n Override "]
416012[label="methodModifier\n public "]
416013[label="methodHeader\n voidaddSentence(Stringsentence) "]
516014[label="result\n void "]
516015[label="methodDeclarator\n addSentence(Stringsentence) "]
616016[label="formalParameter\n Stringsentence "]
716017[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
716018[label="variableDeclaratorId\n sentence "]
416019[label="block\n {Tkey=generateKey(sentence);if(key==null)return;Set<String>set=storage.get(key);if(set==null){set=newTreeSet<String>();storage.put(key,set);}set.add(sentence);} "]
516020[label="blockStatements\n Tkey=generateKey(sentence);if(key==null)return;Set<String>set=storage.get(key);if(set==null){set=newTreeSet<String>();storage.put(key,set);}set.add(sentence); "]
616021[label="localVariableDeclarationStatement\n Tkey=generateKey(sentence); "]
716022[label="localVariableDeclaration\n Tkey=generateKey(sentence) "]
816023[label="unannClassType_lfno_unannClassOrInterfaceType\n T "]
816024[label="variableDeclarator\n key=generateKey(sentence) "]
916025[label="variableDeclaratorId\n key "]
916026[label="methodInvocation_lfno_primary\n generateKey(sentence) "]
1016027[label="methodName\n generateKey "]
1016028[label="expressionName\n sentence "]
616029[label="ifThenStatement\n if(key==null)return; "]
716030[label="equalityExpression\n key==null "]
816031[label="expressionName\n key "]
816032[label="literal\n null "]
716033[label="returnStatement\n return; "]
616034[label="localVariableDeclarationStatement\n Set<String>set=storage.get(key); "]
716035[label="localVariableDeclaration\n Set<String>set=storage.get(key) "]
816036[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
916037[label="typeArguments\n <String> "]
1016038[label="classType_lfno_classOrInterfaceType\n String "]
816039[label="variableDeclarator\n set=storage.get(key) "]
916040[label="variableDeclaratorId\n set "]
916041[label="methodInvocation_lfno_primary\n storage.get(key) "]
1016042[label="typeName\n storage "]
1016043[label="expressionName\n key "]
616044[label="ifThenStatement\n if(set==null){set=newTreeSet<String>();storage.put(key,set);} "]
716045[label="equalityExpression\n set==null "]
816046[label="expressionName\n set "]
816047[label="literal\n null "]
716048[label="block\n {set=newTreeSet<String>();storage.put(key,set);} "]
816049[label="blockStatements\n set=newTreeSet<String>();storage.put(key,set); "]
916050[label="expressionStatement\n set=newTreeSet<String>(); "]
1016051[label="assignment\n set=newTreeSet<String>() "]
1116052[label="expressionName\n set "]
1116053[label="assignmentOperator\n = "]
1116054[label="classInstanceCreationExpression_lfno_primary\n newTreeSet<String>() "]
1216055[label="typeArguments\n <String> "]
1316056[label="classType_lfno_classOrInterfaceType\n String "]
916057[label="expressionStatement\n storage.put(key,set); "]
1016058[label="methodInvocation\n storage.put(key,set) "]
1116059[label="typeName\n storage "]
1116060[label="argumentList\n key,set "]
1216061[label="expressionName\n key "]
1216062[label="expressionName\n set "]
616063[label="expressionStatement\n set.add(sentence); "]
716064[label="methodInvocation\n set.add(sentence) "]
816065[label="typeName\n set "]
816066[label="expressionName\n sentence "]
316067[label="methodDeclaration\n protectedabstractTgenerateKey(Stringsentence); "]
416068[label="methodModifier\n protected "]
416069[label="methodModifier\n abstract "]
416070[label="methodHeader\n TgenerateKey(Stringsentence) "]
516071[label="unannClassType_lfno_unannClassOrInterfaceType\n T "]
516072[label="methodDeclarator\n generateKey(Stringsentence) "]
616073[label="formalParameter\n Stringsentence "]
716074[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
716075[label="variableDeclaratorId\n sentence "]
416076[label="methodBody\n ; "]
316077[label="methodDeclaration\n @OverridepublicMap<String,Double>computeScore(StringouterSentence){TreeMap<String,Double>result=newTreeMap<String,Double>(Collections.reverseOrder());TkeyOuter=generateKey(outerSentence);if(keyOuter==null)returnresult;for(Map.Entry<T,Set<String>>entry:storage.entrySet()){Tkey=entry.getKey();Doublescore=keyOuter.similarity(key);for(Stringsentence:entry.getValue()){result.put(sentence,score);}}returnresult;} "]
416078[label="markerAnnotation\n @Override "]
516079[label="typeName\n Override "]
416080[label="methodModifier\n public "]
416081[label="methodHeader\n Map<String,Double>computeScore(StringouterSentence) "]
516082[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
616083[label="typeArguments\n <String,Double> "]
716084[label="typeArgumentList\n String,Double "]
816085[label="classType_lfno_classOrInterfaceType\n String "]
816086[label="classType_lfno_classOrInterfaceType\n Double "]
516087[label="methodDeclarator\n computeScore(StringouterSentence) "]
616088[label="formalParameter\n StringouterSentence "]
716089[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
716090[label="variableDeclaratorId\n outerSentence "]
416091[label="block\n {TreeMap<String,Double>result=newTreeMap<String,Double>(Collections.reverseOrder());TkeyOuter=generateKey(outerSentence);if(keyOuter==null)returnresult;for(Map.Entry<T,Set<String>>entry:storage.entrySet()){Tkey=entry.getKey();Doublescore=keyOuter.similarity(key);for(Stringsentence:entry.getValue()){result.put(sentence,score);}}returnresult;} "]
516092[label="blockStatements\n TreeMap<String,Double>result=newTreeMap<String,Double>(Collections.reverseOrder());TkeyOuter=generateKey(outerSentence);if(keyOuter==null)returnresult;for(Map.Entry<T,Set<String>>entry:storage.entrySet()){Tkey=entry.getKey();Doublescore=keyOuter.similarity(key);for(Stringsentence:entry.getValue()){result.put(sentence,score);}}returnresult; "]
616093[label="localVariableDeclarationStatement\n TreeMap<String,Double>result=newTreeMap<String,Double>(Collections.reverseOrder()); "]
716094[label="localVariableDeclaration\n TreeMap<String,Double>result=newTreeMap<String,Double>(Collections.reverseOrder()) "]
816095[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,Double> "]
916096[label="typeArguments\n <String,Double> "]
1016097[label="typeArgumentList\n String,Double "]
1116098[label="classType_lfno_classOrInterfaceType\n String "]
1116099[label="classType_lfno_classOrInterfaceType\n Double "]
816100[label="variableDeclarator\n result=newTreeMap<String,Double>(Collections.reverseOrder()) "]
916101[label="variableDeclaratorId\n result "]
916102[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,Double>(Collections.reverseOrder()) "]
1016103[label="typeArguments\n <String,Double> "]
1116104[label="typeArgumentList\n String,Double "]
1216105[label="classType_lfno_classOrInterfaceType\n String "]
1216106[label="classType_lfno_classOrInterfaceType\n Double "]
1016107[label="methodInvocation_lfno_primary\n Collections.reverseOrder() "]
1116108[label="typeName\n Collections "]
616109[label="localVariableDeclarationStatement\n TkeyOuter=generateKey(outerSentence); "]
716110[label="localVariableDeclaration\n TkeyOuter=generateKey(outerSentence) "]
816111[label="unannClassType_lfno_unannClassOrInterfaceType\n T "]
816112[label="variableDeclarator\n keyOuter=generateKey(outerSentence) "]
916113[label="variableDeclaratorId\n keyOuter "]
916114[label="methodInvocation_lfno_primary\n generateKey(outerSentence) "]
1016115[label="methodName\n generateKey "]
1016116[label="expressionName\n outerSentence "]
616117[label="ifThenStatement\n if(keyOuter==null)returnresult; "]
716118[label="equalityExpression\n keyOuter==null "]
816119[label="expressionName\n keyOuter "]
816120[label="literal\n null "]
716121[label="returnStatement\n returnresult; "]
816122[label="expressionName\n result "]
616123[label="enhancedForStatement\n for(Map.Entry<T,Set<String>>entry:storage.entrySet()){Tkey=entry.getKey();Doublescore=keyOuter.similarity(key);for(Stringsentence:entry.getValue()){result.put(sentence,score);}} "]
716124[label="unannClassOrInterfaceType\n Map.Entry<T,Set<String>> "]
816125[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
816126[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<T,Set<String>> "]
916127[label="typeArguments\n <T,Set<String>> "]
1016128[label="typeArgumentList\n T,Set<String> "]
1116129[label="classType_lfno_classOrInterfaceType\n T "]
1116130[label="classType_lfno_classOrInterfaceType\n Set<String> "]
1216131[label="typeArguments\n <String> "]
1316132[label="classType_lfno_classOrInterfaceType\n String "]
716133[label="variableDeclaratorId\n entry "]
716134[label="methodInvocation_lfno_primary\n storage.entrySet() "]
816135[label="typeName\n storage "]
716136[label="block\n {Tkey=entry.getKey();Doublescore=keyOuter.similarity(key);for(Stringsentence:entry.getValue()){result.put(sentence,score);}} "]
816137[label="blockStatements\n Tkey=entry.getKey();Doublescore=keyOuter.similarity(key);for(Stringsentence:entry.getValue()){result.put(sentence,score);} "]
916138[label="localVariableDeclarationStatement\n Tkey=entry.getKey(); "]
1016139[label="localVariableDeclaration\n Tkey=entry.getKey() "]
1116140[label="unannClassType_lfno_unannClassOrInterfaceType\n T "]
1116141[label="variableDeclarator\n key=entry.getKey() "]
1216142[label="variableDeclaratorId\n key "]
1216143[label="methodInvocation_lfno_primary\n entry.getKey() "]
1316144[label="typeName\n entry "]
916145[label="localVariableDeclarationStatement\n Doublescore=keyOuter.similarity(key); "]
1016146[label="localVariableDeclaration\n Doublescore=keyOuter.similarity(key) "]
1116147[label="unannClassType_lfno_unannClassOrInterfaceType\n Double "]
1116148[label="variableDeclarator\n score=keyOuter.similarity(key) "]
1216149[label="variableDeclaratorId\n score "]
1216150[label="methodInvocation_lfno_primary\n keyOuter.similarity(key) "]
1316151[label="typeName\n keyOuter "]
1316152[label="expressionName\n key "]
916153[label="enhancedForStatement\n for(Stringsentence:entry.getValue()){result.put(sentence,score);} "]
1016154[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1016155[label="variableDeclaratorId\n sentence "]
1016156[label="methodInvocation_lfno_primary\n entry.getValue() "]
1116157[label="typeName\n entry "]
1016158[label="block\n {result.put(sentence,score);} "]
1116159[label="expressionStatement\n result.put(sentence,score); "]
1216160[label="methodInvocation\n result.put(sentence,score) "]
1316161[label="typeName\n result "]
1316162[label="argumentList\n sentence,score "]
1416163[label="expressionName\n sentence "]
1416164[label="expressionName\n score "]
616165[label="returnStatement\n returnresult; "]
716166[label="expressionName\n result "]
316167[label="methodDeclaration\n @OverridepublicvoidremoveAllSentences(){storage.clear();} "]
416168[label="markerAnnotation\n @Override "]
516169[label="typeName\n Override "]
416170[label="methodModifier\n public "]
416171[label="methodHeader\n voidremoveAllSentences() "]
516172[label="result\n void "]
516173[label="methodDeclarator\n removeAllSentences() "]
416174[label="block\n {storage.clear();} "]
516175[label="expressionStatement\n storage.clear(); "]
616176[label="methodInvocation\n storage.clear() "]
716177[label="typeName\n storage "]
016178[label="compilationUnit\n packagecom.hankcs.hanlp.dictionary;importjava.util.Map;publicabstractclassBaseSearcher<V>{protectedchar[]c;protectedintoffset;protectedBaseSearcher(char[]c){this.c=c;}protectedBaseSearcher(Stringtext){this(text.toCharArray());}publicabstractMap.Entry<String,V>next();publicintgetOffset(){returnoffset;}}<EOF> "]
116179[label="packageDeclaration\n packagecom.hankcs.hanlp.dictionary; "]
216180[label="packageName\n com.hankcs.hanlp.dictionary "]
316181[label="packageName\n com.hankcs.hanlp "]
416182[label="packageName\n com.hankcs "]
516183[label="packageName\n com "]
116184[label="singleTypeImportDeclaration\n importjava.util.Map; "]
216185[label="typeName\n java.util.Map "]
316186[label="packageOrTypeName\n java.util "]
416187[label="packageOrTypeName\n java "]
116188[label="normalClassDeclaration\n publicabstractclassBaseSearcher<V>{protectedchar[]c;protectedintoffset;protectedBaseSearcher(char[]c){this.c=c;}protectedBaseSearcher(Stringtext){this(text.toCharArray());}publicabstractMap.Entry<String,V>next();publicintgetOffset(){returnoffset;}} "]
216189[label="classModifier\n public "]
216190[label="classModifier\n abstract "]
216191[label="typeParameters\n <V> "]
316192[label="typeParameter\n V "]
216193[label="classBody\n {protectedchar[]c;protectedintoffset;protectedBaseSearcher(char[]c){this.c=c;}protectedBaseSearcher(Stringtext){this(text.toCharArray());}publicabstractMap.Entry<String,V>next();publicintgetOffset(){returnoffset;}} "]
316194[label="fieldDeclaration\n protectedchar[]c; "]
416195[label="fieldModifier\n protected "]
416196[label="unannArrayType\n char[] "]
516197[label="integralType\n char "]
516198[label="dims\n [] "]
416199[label="variableDeclaratorId\n c "]
316200[label="fieldDeclaration\n protectedintoffset; "]
416201[label="fieldModifier\n protected "]
416202[label="integralType\n int "]
416203[label="variableDeclaratorId\n offset "]
316204[label="constructorDeclaration\n protectedBaseSearcher(char[]c){this.c=c;} "]
416205[label="constructorModifier\n protected "]
416206[label="constructorDeclarator\n BaseSearcher(char[]c) "]
516207[label="simpleTypeName\n BaseSearcher "]
516208[label="formalParameter\n char[]c "]
616209[label="unannArrayType\n char[] "]
716210[label="integralType\n char "]
716211[label="dims\n [] "]
616212[label="variableDeclaratorId\n c "]
416213[label="constructorBody\n {this.c=c;} "]
516214[label="expressionStatement\n this.c=c; "]
616215[label="assignment\n this.c=c "]
716216[label="fieldAccess\n this.c "]
816217[label="primaryNoNewArray_lfno_primary\n this "]
716218[label="assignmentOperator\n = "]
716219[label="expressionName\n c "]
316220[label="constructorDeclaration\n protectedBaseSearcher(Stringtext){this(text.toCharArray());} "]
416221[label="constructorModifier\n protected "]
416222[label="constructorDeclarator\n BaseSearcher(Stringtext) "]
516223[label="simpleTypeName\n BaseSearcher "]
516224[label="formalParameter\n Stringtext "]
616225[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
616226[label="variableDeclaratorId\n text "]
416227[label="constructorBody\n {this(text.toCharArray());} "]
516228[label="explicitConstructorInvocation\n this(text.toCharArray()); "]
616229[label="methodInvocation_lfno_primary\n text.toCharArray() "]
716230[label="typeName\n text "]
316231[label="methodDeclaration\n publicabstractMap.Entry<String,V>next(); "]
416232[label="methodModifier\n public "]
416233[label="methodModifier\n abstract "]
416234[label="methodHeader\n Map.Entry<String,V>next() "]
516235[label="unannClassOrInterfaceType\n Map.Entry<String,V> "]
616236[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
616237[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,V> "]
716238[label="typeArguments\n <String,V> "]
816239[label="typeArgumentList\n String,V "]
916240[label="classType_lfno_classOrInterfaceType\n String "]
916241[label="classType_lfno_classOrInterfaceType\n V "]
516242[label="methodDeclarator\n next() "]
416243[label="methodBody\n ; "]
316244[label="methodDeclaration\n publicintgetOffset(){returnoffset;} "]
416245[label="methodModifier\n public "]
416246[label="methodHeader\n intgetOffset() "]
516247[label="integralType\n int "]
516248[label="methodDeclarator\n getOffset() "]
416249[label="block\n {returnoffset;} "]
516250[label="returnStatement\n returnoffset; "]
616251[label="expressionName\n offset "]
016252[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.option;publicclassBasicOption{Stringmodel_file;Stringroot;}<EOF> "]
116253[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.option; "]
216254[label="packageName\n com.hankcs.hanlp.dependency.nnparser.option "]
316255[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
416256[label="packageName\n com.hankcs.hanlp.dependency "]
516257[label="packageName\n com.hankcs.hanlp "]
616258[label="packageName\n com.hankcs "]
716259[label="packageName\n com "]
116260[label="normalClassDeclaration\n publicclassBasicOption{Stringmodel_file;Stringroot;} "]
216261[label="classModifier\n public "]
216262[label="classBody\n {Stringmodel_file;Stringroot;} "]
316263[label="fieldDeclaration\n Stringmodel_file; "]
416264[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
416265[label="variableDeclaratorId\n model_file "]
316266[label="fieldDeclaration\n Stringroot; "]
416267[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
416268[label="variableDeclaratorId\n root "]
016269[label="compilationUnit\n packagecom.hankcs.hanlp.tokenizer;importcom.hankcs.hanlp.HanLP;importcom.hankcs.hanlp.seg.Segment;importcom.hankcs.hanlp.seg.common.Term;importjava.util.List;publicclassBasicTokenizer{publicstaticfinalSegmentSEGMENT=HanLP.newSegment().enableAllNamedEntityRecognize(false).enableCustomDictionary(false);publicstaticList<Term>segment(Stringtext){returnSEGMENT.seg(text.toCharArray());}publicstaticList<Term>segment(char[]text){returnSEGMENT.seg(text);}publicstaticList<List<Term>>seg2sentence(Stringtext){returnSEGMENT.seg2sentence(text);}}<EOF> "]
116270[label="packageDeclaration\n packagecom.hankcs.hanlp.tokenizer; "]
216271[label="packageName\n com.hankcs.hanlp.tokenizer "]
316272[label="packageName\n com.hankcs.hanlp "]
416273[label="packageName\n com.hankcs "]
516274[label="packageName\n com "]
116275[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.HanLP; "]
216276[label="typeName\n com.hankcs.hanlp.HanLP "]
316277[label="packageOrTypeName\n com.hankcs.hanlp "]
416278[label="packageOrTypeName\n com.hankcs "]
516279[label="packageOrTypeName\n com "]
116280[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.Segment; "]
216281[label="typeName\n com.hankcs.hanlp.seg.Segment "]
316282[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
416283[label="packageOrTypeName\n com.hankcs.hanlp "]
516284[label="packageOrTypeName\n com.hankcs "]
616285[label="packageOrTypeName\n com "]
116286[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.common.Term; "]
216287[label="typeName\n com.hankcs.hanlp.seg.common.Term "]
316288[label="packageOrTypeName\n com.hankcs.hanlp.seg.common "]
416289[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
516290[label="packageOrTypeName\n com.hankcs.hanlp "]
616291[label="packageOrTypeName\n com.hankcs "]
716292[label="packageOrTypeName\n com "]
116293[label="singleTypeImportDeclaration\n importjava.util.List; "]
216294[label="typeName\n java.util.List "]
316295[label="packageOrTypeName\n java.util "]
416296[label="packageOrTypeName\n java "]
116297[label="normalClassDeclaration\n publicclassBasicTokenizer{publicstaticfinalSegmentSEGMENT=HanLP.newSegment().enableAllNamedEntityRecognize(false).enableCustomDictionary(false);publicstaticList<Term>segment(Stringtext){returnSEGMENT.seg(text.toCharArray());}publicstaticList<Term>segment(char[]text){returnSEGMENT.seg(text);}publicstaticList<List<Term>>seg2sentence(Stringtext){returnSEGMENT.seg2sentence(text);}} "]
216298[label="classModifier\n public "]
216299[label="classBody\n {publicstaticfinalSegmentSEGMENT=HanLP.newSegment().enableAllNamedEntityRecognize(false).enableCustomDictionary(false);publicstaticList<Term>segment(Stringtext){returnSEGMENT.seg(text.toCharArray());}publicstaticList<Term>segment(char[]text){returnSEGMENT.seg(text);}publicstaticList<List<Term>>seg2sentence(Stringtext){returnSEGMENT.seg2sentence(text);}} "]
316300[label="fieldDeclaration\n publicstaticfinalSegmentSEGMENT=HanLP.newSegment().enableAllNamedEntityRecognize(false).enableCustomDictionary(false); "]
416301[label="fieldModifier\n public "]
416302[label="fieldModifier\n static "]
416303[label="fieldModifier\n final "]
416304[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
416305[label="variableDeclarator\n SEGMENT=HanLP.newSegment().enableAllNamedEntityRecognize(false).enableCustomDictionary(false) "]
516306[label="variableDeclaratorId\n SEGMENT "]
516307[label="primary\n HanLP.newSegment().enableAllNamedEntityRecognize(false).enableCustomDictionary(false) "]
616308[label="methodInvocation_lfno_primary\n HanLP.newSegment() "]
716309[label="typeName\n HanLP "]
616310[label="methodInvocation_lf_primary\n .enableAllNamedEntityRecognize(false) "]
716311[label="literal\n false "]
616312[label="methodInvocation_lf_primary\n .enableCustomDictionary(false) "]
716313[label="literal\n false "]
316314[label="methodDeclaration\n publicstaticList<Term>segment(Stringtext){returnSEGMENT.seg(text.toCharArray());} "]
416315[label="methodModifier\n public "]
416316[label="methodModifier\n static "]
416317[label="methodHeader\n List<Term>segment(Stringtext) "]
516318[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Term> "]
616319[label="typeArguments\n <Term> "]
716320[label="classType_lfno_classOrInterfaceType\n Term "]
516321[label="methodDeclarator\n segment(Stringtext) "]
616322[label="formalParameter\n Stringtext "]
716323[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
716324[label="variableDeclaratorId\n text "]
416325[label="block\n {returnSEGMENT.seg(text.toCharArray());} "]
516326[label="returnStatement\n returnSEGMENT.seg(text.toCharArray()); "]
616327[label="methodInvocation_lfno_primary\n SEGMENT.seg(text.toCharArray()) "]
716328[label="typeName\n SEGMENT "]
716329[label="methodInvocation_lfno_primary\n text.toCharArray() "]
816330[label="typeName\n text "]
316331[label="methodDeclaration\n publicstaticList<Term>segment(char[]text){returnSEGMENT.seg(text);} "]
416332[label="methodModifier\n public "]
416333[label="methodModifier\n static "]
416334[label="methodHeader\n List<Term>segment(char[]text) "]
516335[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Term> "]
616336[label="typeArguments\n <Term> "]
716337[label="classType_lfno_classOrInterfaceType\n Term "]
516338[label="methodDeclarator\n segment(char[]text) "]
616339[label="formalParameter\n char[]text "]
716340[label="unannArrayType\n char[] "]
816341[label="integralType\n char "]
816342[label="dims\n [] "]
716343[label="variableDeclaratorId\n text "]
416344[label="block\n {returnSEGMENT.seg(text);} "]
516345[label="returnStatement\n returnSEGMENT.seg(text); "]
616346[label="methodInvocation_lfno_primary\n SEGMENT.seg(text) "]
716347[label="typeName\n SEGMENT "]
716348[label="expressionName\n text "]
316349[label="methodDeclaration\n publicstaticList<List<Term>>seg2sentence(Stringtext){returnSEGMENT.seg2sentence(text);} "]
416350[label="methodModifier\n public "]
416351[label="methodModifier\n static "]
416352[label="methodHeader\n List<List<Term>>seg2sentence(Stringtext) "]
516353[label="unannClassType_lfno_unannClassOrInterfaceType\n List<List<Term>> "]
616354[label="typeArguments\n <List<Term>> "]
716355[label="classType_lfno_classOrInterfaceType\n List<Term> "]
816356[label="typeArguments\n <Term> "]
916357[label="classType_lfno_classOrInterfaceType\n Term "]
516358[label="methodDeclarator\n seg2sentence(Stringtext) "]
616359[label="formalParameter\n Stringtext "]
716360[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
716361[label="variableDeclaratorId\n text "]
416362[label="block\n {returnSEGMENT.seg2sentence(text);} "]
516363[label="returnStatement\n returnSEGMENT.seg2sentence(text); "]
616364[label="methodInvocation_lfno_primary\n SEGMENT.seg2sentence(text) "]
716365[label="typeName\n SEGMENT "]
716366[label="expressionName\n text "]
016367[label="compilationUnit\n packagecom.hankcs.hanlp.model.bigram;importcom.hankcs.hanlp.HanLP;importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie;importcom.hankcs.hanlp.corpus.dependency.model.WordNatureWeightModelMaker;importcom.hankcs.hanlp.corpus.io.ByteArray;importcom.hankcs.hanlp.corpus.io.IOUtil;importcom.hankcs.hanlp.utility.Predefine;importjava.io.DataOutputStream;importjava.io.FileOutputStream;importjava.util.Collection;importjava.util.TreeMap;importstaticcom.hankcs.hanlp.utility.Predefine.logger;publicclassBigramDependencyModel{staticDoubleArrayTrie<String>trie;static{longstart=System.currentTimeMillis();if(load(HanLP.Config.WordNatureModelPath)){logger.info(\"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"成功，耗时：\"+(System.currentTimeMillis()-start)+\" ms\");}else{logger.warning(\"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"失败，耗时：\"+(System.currentTimeMillis()-start)+\" ms\");}}staticbooleanload(Stringpath){trie=newDoubleArrayTrie<String>();if(loadDat(path+\".bi\"+Predefine.BIN_EXT))returntrue;TreeMap<String,String>map=newTreeMap<String,String>();for(Stringline:IOUtil.readLineListWithLessMemory(path)){String[]param=line.split(\" \");if(param[0].endsWith(\"@\")){continue;}Stringdependency=param[1];map.put(param[0],dependency);}if(map.size()==0)returnfalse;trie.build(map);if(!saveDat(path,map))logger.warning(\"缓存\"+path+Predefine.BIN_EXT+\"失败\");returntrue;}privatestaticbooleanloadDat(Stringpath){ByteArraybyteArray=ByteArray.createByteArray(path);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();String[]valueArray=newString[size];for(inti=0;i<valueArray.length;++i){valueArray[i]=byteArray.nextUTF();}returntrie.load(byteArray,valueArray);}staticbooleansaveDat(Stringpath,TreeMap<String,String>map){Collection<String>dependencyList=map.values();try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+\".bi\"+Predefine.BIN_EXT));out.writeInt(dependencyList.size());for(Stringdependency:dependencyList){out.writeUTF(dependency);}if(!trie.save(out))returnfalse;out.close();}catch(Exceptione){logger.warning(\"保存失败\"+e);returnfalse;}returntrue;}publicstaticStringget(Stringkey){returntrie.get(key);}publicstaticStringget(StringfromWord,StringfromPos,StringtoWord,StringtoPos){Stringdependency=get(fromWord+\"@\"+toWord);if(dependency==null)dependency=get(fromWord+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos));if(dependency==null)dependency=get(WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+toWord);if(dependency==null)dependency=get(WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos));if(dependency==null)dependency=\"未知\";returndependency;}}<EOF> "]
116368[label="packageDeclaration\n packagecom.hankcs.hanlp.model.bigram; "]
216369[label="packageName\n com.hankcs.hanlp.model.bigram "]
316370[label="packageName\n com.hankcs.hanlp.model "]
416371[label="packageName\n com.hankcs.hanlp "]
516372[label="packageName\n com.hankcs "]
616373[label="packageName\n com "]
116374[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.HanLP; "]
216375[label="typeName\n com.hankcs.hanlp.HanLP "]
316376[label="packageOrTypeName\n com.hankcs.hanlp "]
416377[label="packageOrTypeName\n com.hankcs "]
516378[label="packageOrTypeName\n com "]
116379[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie; "]
216380[label="typeName\n com.hankcs.hanlp.collection.trie.DoubleArrayTrie "]
316381[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
416382[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
516383[label="packageOrTypeName\n com.hankcs.hanlp "]
616384[label="packageOrTypeName\n com.hankcs "]
716385[label="packageOrTypeName\n com "]
116386[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dependency.model.WordNatureWeightModelMaker; "]
216387[label="typeName\n com.hankcs.hanlp.corpus.dependency.model.WordNatureWeightModelMaker "]
316388[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency.model "]
416389[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency "]
516390[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
616391[label="packageOrTypeName\n com.hankcs.hanlp "]
716392[label="packageOrTypeName\n com.hankcs "]
816393[label="packageOrTypeName\n com "]
116394[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.ByteArray; "]
216395[label="typeName\n com.hankcs.hanlp.corpus.io.ByteArray "]
316396[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
416397[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
516398[label="packageOrTypeName\n com.hankcs.hanlp "]
616399[label="packageOrTypeName\n com.hankcs "]
716400[label="packageOrTypeName\n com "]
116401[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
216402[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
316403[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
416404[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
516405[label="packageOrTypeName\n com.hankcs.hanlp "]
616406[label="packageOrTypeName\n com.hankcs "]
716407[label="packageOrTypeName\n com "]
116408[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.Predefine; "]
216409[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
316410[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
416411[label="packageOrTypeName\n com.hankcs.hanlp "]
516412[label="packageOrTypeName\n com.hankcs "]
616413[label="packageOrTypeName\n com "]
116414[label="singleTypeImportDeclaration\n importjava.io.DataOutputStream; "]
216415[label="typeName\n java.io.DataOutputStream "]
316416[label="packageOrTypeName\n java.io "]
416417[label="packageOrTypeName\n java "]
116418[label="singleTypeImportDeclaration\n importjava.io.FileOutputStream; "]
216419[label="typeName\n java.io.FileOutputStream "]
316420[label="packageOrTypeName\n java.io "]
416421[label="packageOrTypeName\n java "]
116422[label="singleTypeImportDeclaration\n importjava.util.Collection; "]
216423[label="typeName\n java.util.Collection "]
316424[label="packageOrTypeName\n java.util "]
416425[label="packageOrTypeName\n java "]
116426[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
216427[label="typeName\n java.util.TreeMap "]
316428[label="packageOrTypeName\n java.util "]
416429[label="packageOrTypeName\n java "]
116430[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.utility.Predefine.logger; "]
216431[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
316432[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
416433[label="packageOrTypeName\n com.hankcs.hanlp "]
516434[label="packageOrTypeName\n com.hankcs "]
616435[label="packageOrTypeName\n com "]
116436[label="normalClassDeclaration\n publicclassBigramDependencyModel{staticDoubleArrayTrie<String>trie;static{longstart=System.currentTimeMillis();if(load(HanLP.Config.WordNatureModelPath)){logger.info(\"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"成功，耗时：\"+(System.currentTimeMillis()-start)+\" ms\");}else{logger.warning(\"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"失败，耗时：\"+(System.currentTimeMillis()-start)+\" ms\");}}staticbooleanload(Stringpath){trie=newDoubleArrayTrie<String>();if(loadDat(path+\".bi\"+Predefine.BIN_EXT))returntrue;TreeMap<String,String>map=newTreeMap<String,String>();for(Stringline:IOUtil.readLineListWithLessMemory(path)){String[]param=line.split(\" \");if(param[0].endsWith(\"@\")){continue;}Stringdependency=param[1];map.put(param[0],dependency);}if(map.size()==0)returnfalse;trie.build(map);if(!saveDat(path,map))logger.warning(\"缓存\"+path+Predefine.BIN_EXT+\"失败\");returntrue;}privatestaticbooleanloadDat(Stringpath){ByteArraybyteArray=ByteArray.createByteArray(path);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();String[]valueArray=newString[size];for(inti=0;i<valueArray.length;++i){valueArray[i]=byteArray.nextUTF();}returntrie.load(byteArray,valueArray);}staticbooleansaveDat(Stringpath,TreeMap<String,String>map){Collection<String>dependencyList=map.values();try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+\".bi\"+Predefine.BIN_EXT));out.writeInt(dependencyList.size());for(Stringdependency:dependencyList){out.writeUTF(dependency);}if(!trie.save(out))returnfalse;out.close();}catch(Exceptione){logger.warning(\"保存失败\"+e);returnfalse;}returntrue;}publicstaticStringget(Stringkey){returntrie.get(key);}publicstaticStringget(StringfromWord,StringfromPos,StringtoWord,StringtoPos){Stringdependency=get(fromWord+\"@\"+toWord);if(dependency==null)dependency=get(fromWord+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos));if(dependency==null)dependency=get(WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+toWord);if(dependency==null)dependency=get(WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos));if(dependency==null)dependency=\"未知\";returndependency;}} "]
216437[label="classModifier\n public "]
216438[label="classBody\n {staticDoubleArrayTrie<String>trie;static{longstart=System.currentTimeMillis();if(load(HanLP.Config.WordNatureModelPath)){logger.info(\"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"成功，耗时：\"+(System.currentTimeMillis()-start)+\" ms\");}else{logger.warning(\"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"失败，耗时：\"+(System.currentTimeMillis()-start)+\" ms\");}}staticbooleanload(Stringpath){trie=newDoubleArrayTrie<String>();if(loadDat(path+\".bi\"+Predefine.BIN_EXT))returntrue;TreeMap<String,String>map=newTreeMap<String,String>();for(Stringline:IOUtil.readLineListWithLessMemory(path)){String[]param=line.split(\" \");if(param[0].endsWith(\"@\")){continue;}Stringdependency=param[1];map.put(param[0],dependency);}if(map.size()==0)returnfalse;trie.build(map);if(!saveDat(path,map))logger.warning(\"缓存\"+path+Predefine.BIN_EXT+\"失败\");returntrue;}privatestaticbooleanloadDat(Stringpath){ByteArraybyteArray=ByteArray.createByteArray(path);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();String[]valueArray=newString[size];for(inti=0;i<valueArray.length;++i){valueArray[i]=byteArray.nextUTF();}returntrie.load(byteArray,valueArray);}staticbooleansaveDat(Stringpath,TreeMap<String,String>map){Collection<String>dependencyList=map.values();try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+\".bi\"+Predefine.BIN_EXT));out.writeInt(dependencyList.size());for(Stringdependency:dependencyList){out.writeUTF(dependency);}if(!trie.save(out))returnfalse;out.close();}catch(Exceptione){logger.warning(\"保存失败\"+e);returnfalse;}returntrue;}publicstaticStringget(Stringkey){returntrie.get(key);}publicstaticStringget(StringfromWord,StringfromPos,StringtoWord,StringtoPos){Stringdependency=get(fromWord+\"@\"+toWord);if(dependency==null)dependency=get(fromWord+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos));if(dependency==null)dependency=get(WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+toWord);if(dependency==null)dependency=get(WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos));if(dependency==null)dependency=\"未知\";returndependency;}} "]
316439[label="fieldDeclaration\n staticDoubleArrayTrie<String>trie; "]
416440[label="fieldModifier\n static "]
416441[label="unannClassType_lfno_unannClassOrInterfaceType\n DoubleArrayTrie<String> "]
516442[label="typeArguments\n <String> "]
616443[label="classType_lfno_classOrInterfaceType\n String "]
416444[label="variableDeclaratorId\n trie "]
316445[label="staticInitializer\n static{longstart=System.currentTimeMillis();if(load(HanLP.Config.WordNatureModelPath)){logger.info(\"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"成功，耗时：\"+(System.currentTimeMillis()-start)+\" ms\");}else{logger.warning(\"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"失败，耗时：\"+(System.currentTimeMillis()-start)+\" ms\");}} "]
416446[label="block\n {longstart=System.currentTimeMillis();if(load(HanLP.Config.WordNatureModelPath)){logger.info(\"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"成功，耗时：\"+(System.currentTimeMillis()-start)+\" ms\");}else{logger.warning(\"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"失败，耗时：\"+(System.currentTimeMillis()-start)+\" ms\");}} "]
516447[label="blockStatements\n longstart=System.currentTimeMillis();if(load(HanLP.Config.WordNatureModelPath)){logger.info(\"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"成功，耗时：\"+(System.currentTimeMillis()-start)+\" ms\");}else{logger.warning(\"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"失败，耗时：\"+(System.currentTimeMillis()-start)+\" ms\");} "]
616448[label="localVariableDeclarationStatement\n longstart=System.currentTimeMillis(); "]
716449[label="localVariableDeclaration\n longstart=System.currentTimeMillis() "]
816450[label="integralType\n long "]
816451[label="variableDeclarator\n start=System.currentTimeMillis() "]
916452[label="variableDeclaratorId\n start "]
916453[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
1016454[label="typeName\n System "]
616455[label="ifThenElseStatement\n if(load(HanLP.Config.WordNatureModelPath)){logger.info(\"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"成功，耗时：\"+(System.currentTimeMillis()-start)+\" ms\");}else{logger.warning(\"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"失败，耗时：\"+(System.currentTimeMillis()-start)+\" ms\");} "]
716456[label="methodInvocation_lfno_primary\n load(HanLP.Config.WordNatureModelPath) "]
816457[label="methodName\n load "]
816458[label="expressionName\n HanLP.Config.WordNatureModelPath "]
916459[label="ambiguousName\n HanLP.Config "]
1016460[label="ambiguousName\n HanLP "]
716461[label="block\n {logger.info(\"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"成功，耗时：\"+(System.currentTimeMillis()-start)+\" ms\");} "]
816462[label="expressionStatement\n logger.info(\"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"成功，耗时：\"+(System.currentTimeMillis()-start)+\" ms\"); "]
916463[label="methodInvocation\n logger.info(\"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"成功，耗时：\"+(System.currentTimeMillis()-start)+\" ms\") "]
1016464[label="typeName\n logger "]
1016465[label="additiveExpression\n \"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"成功，耗时：\"+(System.currentTimeMillis()-start)+\" ms\" "]
1116466[label="additiveExpression\n \"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"成功，耗时：\"+(System.currentTimeMillis()-start) "]
1216467[label="additiveExpression\n \"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"成功，耗时：\" "]
1316468[label="additiveExpression\n \"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath "]
1416469[label="literal\n \"加载依存句法二元模型\" "]
1416470[label="expressionName\n HanLP.Config.WordNatureModelPath "]
1516471[label="ambiguousName\n HanLP.Config "]
1616472[label="ambiguousName\n HanLP "]
1316473[label="literal\n \"成功，耗时：\" "]
1216474[label="primaryNoNewArray_lfno_primary\n (System.currentTimeMillis()-start) "]
1316475[label="additiveExpression\n System.currentTimeMillis()-start "]
1416476[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
1516477[label="typeName\n System "]
1416478[label="expressionName\n start "]
1116479[label="literal\n \" ms\" "]
716480[label="block\n {logger.warning(\"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"失败，耗时：\"+(System.currentTimeMillis()-start)+\" ms\");} "]
816481[label="expressionStatement\n logger.warning(\"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"失败，耗时：\"+(System.currentTimeMillis()-start)+\" ms\"); "]
916482[label="methodInvocation\n logger.warning(\"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"失败，耗时：\"+(System.currentTimeMillis()-start)+\" ms\") "]
1016483[label="typeName\n logger "]
1016484[label="additiveExpression\n \"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"失败，耗时：\"+(System.currentTimeMillis()-start)+\" ms\" "]
1116485[label="additiveExpression\n \"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"失败，耗时：\"+(System.currentTimeMillis()-start) "]
1216486[label="additiveExpression\n \"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath+\"失败，耗时：\" "]
1316487[label="additiveExpression\n \"加载依存句法二元模型\"+HanLP.Config.WordNatureModelPath "]
1416488[label="literal\n \"加载依存句法二元模型\" "]
1416489[label="expressionName\n HanLP.Config.WordNatureModelPath "]
1516490[label="ambiguousName\n HanLP.Config "]
1616491[label="ambiguousName\n HanLP "]
1316492[label="literal\n \"失败，耗时：\" "]
1216493[label="primaryNoNewArray_lfno_primary\n (System.currentTimeMillis()-start) "]
1316494[label="additiveExpression\n System.currentTimeMillis()-start "]
1416495[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
1516496[label="typeName\n System "]
1416497[label="expressionName\n start "]
1116498[label="literal\n \" ms\" "]
316499[label="methodDeclaration\n staticbooleanload(Stringpath){trie=newDoubleArrayTrie<String>();if(loadDat(path+\".bi\"+Predefine.BIN_EXT))returntrue;TreeMap<String,String>map=newTreeMap<String,String>();for(Stringline:IOUtil.readLineListWithLessMemory(path)){String[]param=line.split(\" \");if(param[0].endsWith(\"@\")){continue;}Stringdependency=param[1];map.put(param[0],dependency);}if(map.size()==0)returnfalse;trie.build(map);if(!saveDat(path,map))logger.warning(\"缓存\"+path+Predefine.BIN_EXT+\"失败\");returntrue;} "]
416500[label="methodModifier\n static "]
416501[label="methodHeader\n booleanload(Stringpath) "]
516502[label="unannPrimitiveType\n boolean "]
516503[label="methodDeclarator\n load(Stringpath) "]
616504[label="formalParameter\n Stringpath "]
716505[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
716506[label="variableDeclaratorId\n path "]
416507[label="block\n {trie=newDoubleArrayTrie<String>();if(loadDat(path+\".bi\"+Predefine.BIN_EXT))returntrue;TreeMap<String,String>map=newTreeMap<String,String>();for(Stringline:IOUtil.readLineListWithLessMemory(path)){String[]param=line.split(\" \");if(param[0].endsWith(\"@\")){continue;}Stringdependency=param[1];map.put(param[0],dependency);}if(map.size()==0)returnfalse;trie.build(map);if(!saveDat(path,map))logger.warning(\"缓存\"+path+Predefine.BIN_EXT+\"失败\");returntrue;} "]
516508[label="blockStatements\n trie=newDoubleArrayTrie<String>();if(loadDat(path+\".bi\"+Predefine.BIN_EXT))returntrue;TreeMap<String,String>map=newTreeMap<String,String>();for(Stringline:IOUtil.readLineListWithLessMemory(path)){String[]param=line.split(\" \");if(param[0].endsWith(\"@\")){continue;}Stringdependency=param[1];map.put(param[0],dependency);}if(map.size()==0)returnfalse;trie.build(map);if(!saveDat(path,map))logger.warning(\"缓存\"+path+Predefine.BIN_EXT+\"失败\");returntrue; "]
616509[label="expressionStatement\n trie=newDoubleArrayTrie<String>(); "]
716510[label="assignment\n trie=newDoubleArrayTrie<String>() "]
816511[label="expressionName\n trie "]
816512[label="assignmentOperator\n = "]
816513[label="classInstanceCreationExpression_lfno_primary\n newDoubleArrayTrie<String>() "]
916514[label="typeArguments\n <String> "]
1016515[label="classType_lfno_classOrInterfaceType\n String "]
616516[label="ifThenStatement\n if(loadDat(path+\".bi\"+Predefine.BIN_EXT))returntrue; "]
716517[label="methodInvocation_lfno_primary\n loadDat(path+\".bi\"+Predefine.BIN_EXT) "]
816518[label="methodName\n loadDat "]
816519[label="additiveExpression\n path+\".bi\"+Predefine.BIN_EXT "]
916520[label="additiveExpression\n path+\".bi\" "]
1016521[label="expressionName\n path "]
1016522[label="literal\n \".bi\" "]
916523[label="expressionName\n Predefine.BIN_EXT "]
1016524[label="ambiguousName\n Predefine "]
716525[label="returnStatement\n returntrue; "]
816526[label="literal\n true "]
616527[label="localVariableDeclarationStatement\n TreeMap<String,String>map=newTreeMap<String,String>(); "]
716528[label="localVariableDeclaration\n TreeMap<String,String>map=newTreeMap<String,String>() "]
816529[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
916530[label="typeArguments\n <String,String> "]
1016531[label="typeArgumentList\n String,String "]
1116532[label="classType_lfno_classOrInterfaceType\n String "]
1116533[label="classType_lfno_classOrInterfaceType\n String "]
816534[label="variableDeclarator\n map=newTreeMap<String,String>() "]
916535[label="variableDeclaratorId\n map "]
916536[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
1016537[label="typeArguments\n <String,String> "]
1116538[label="typeArgumentList\n String,String "]
1216539[label="classType_lfno_classOrInterfaceType\n String "]
1216540[label="classType_lfno_classOrInterfaceType\n String "]
616541[label="enhancedForStatement\n for(Stringline:IOUtil.readLineListWithLessMemory(path)){String[]param=line.split(\" \");if(param[0].endsWith(\"@\")){continue;}Stringdependency=param[1];map.put(param[0],dependency);} "]
716542[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
716543[label="variableDeclaratorId\n line "]
716544[label="methodInvocation_lfno_primary\n IOUtil.readLineListWithLessMemory(path) "]
816545[label="typeName\n IOUtil "]
816546[label="expressionName\n path "]
716547[label="block\n {String[]param=line.split(\" \");if(param[0].endsWith(\"@\")){continue;}Stringdependency=param[1];map.put(param[0],dependency);} "]
816548[label="blockStatements\n String[]param=line.split(\" \");if(param[0].endsWith(\"@\")){continue;}Stringdependency=param[1];map.put(param[0],dependency); "]
916549[label="localVariableDeclarationStatement\n String[]param=line.split(\" \"); "]
1016550[label="localVariableDeclaration\n String[]param=line.split(\" \") "]
1116551[label="unannArrayType\n String[] "]
1216552[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1216553[label="dims\n [] "]
1116554[label="variableDeclarator\n param=line.split(\" \") "]
1216555[label="variableDeclaratorId\n param "]
1216556[label="methodInvocation_lfno_primary\n line.split(\" \") "]
1316557[label="typeName\n line "]
1316558[label="literal\n \" \" "]
916559[label="ifThenStatement\n if(param[0].endsWith(\"@\")){continue;} "]
1016560[label="primary\n param[0].endsWith(\"@\") "]
1116561[label="arrayAccess_lfno_primary\n param[0] "]
1216562[label="expressionName\n param "]
1216563[label="literal\n 0 "]
1116564[label="methodInvocation_lf_primary\n .endsWith(\"@\") "]
1216565[label="literal\n \"@\" "]
1016566[label="block\n {continue;} "]
1116567[label="continueStatement\n continue; "]
916568[label="localVariableDeclarationStatement\n Stringdependency=param[1]; "]
1016569[label="localVariableDeclaration\n Stringdependency=param[1] "]
1116570[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1116571[label="variableDeclarator\n dependency=param[1] "]
1216572[label="variableDeclaratorId\n dependency "]
1216573[label="arrayAccess_lfno_primary\n param[1] "]
1316574[label="expressionName\n param "]
1316575[label="literal\n 1 "]
916576[label="expressionStatement\n map.put(param[0],dependency); "]
1016577[label="methodInvocation\n map.put(param[0],dependency) "]
1116578[label="typeName\n map "]
1116579[label="argumentList\n param[0],dependency "]
1216580[label="arrayAccess_lfno_primary\n param[0] "]
1316581[label="expressionName\n param "]
1316582[label="literal\n 0 "]
1216583[label="expressionName\n dependency "]
616584[label="ifThenStatement\n if(map.size()==0)returnfalse; "]
716585[label="equalityExpression\n map.size()==0 "]
816586[label="methodInvocation_lfno_primary\n map.size() "]
916587[label="typeName\n map "]
816588[label="literal\n 0 "]
716589[label="returnStatement\n returnfalse; "]
816590[label="literal\n false "]
616591[label="expressionStatement\n trie.build(map); "]
716592[label="methodInvocation\n trie.build(map) "]
816593[label="typeName\n trie "]
816594[label="expressionName\n map "]
616595[label="ifThenStatement\n if(!saveDat(path,map))logger.warning(\"缓存\"+path+Predefine.BIN_EXT+\"失败\"); "]
716596[label="unaryExpressionNotPlusMinus\n !saveDat(path,map) "]
816597[label="methodInvocation_lfno_primary\n saveDat(path,map) "]
916598[label="methodName\n saveDat "]
916599[label="argumentList\n path,map "]
1016600[label="expressionName\n path "]
1016601[label="expressionName\n map "]
716602[label="expressionStatement\n logger.warning(\"缓存\"+path+Predefine.BIN_EXT+\"失败\"); "]
816603[label="methodInvocation\n logger.warning(\"缓存\"+path+Predefine.BIN_EXT+\"失败\") "]
916604[label="typeName\n logger "]
916605[label="additiveExpression\n \"缓存\"+path+Predefine.BIN_EXT+\"失败\" "]
1016606[label="additiveExpression\n \"缓存\"+path+Predefine.BIN_EXT "]
1116607[label="additiveExpression\n \"缓存\"+path "]
1216608[label="literal\n \"缓存\" "]
1216609[label="expressionName\n path "]
1116610[label="expressionName\n Predefine.BIN_EXT "]
1216611[label="ambiguousName\n Predefine "]
1016612[label="literal\n \"失败\" "]
616613[label="returnStatement\n returntrue; "]
716614[label="literal\n true "]
316615[label="methodDeclaration\n privatestaticbooleanloadDat(Stringpath){ByteArraybyteArray=ByteArray.createByteArray(path);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();String[]valueArray=newString[size];for(inti=0;i<valueArray.length;++i){valueArray[i]=byteArray.nextUTF();}returntrie.load(byteArray,valueArray);} "]
416616[label="methodModifier\n private "]
416617[label="methodModifier\n static "]
416618[label="methodHeader\n booleanloadDat(Stringpath) "]
516619[label="unannPrimitiveType\n boolean "]
516620[label="methodDeclarator\n loadDat(Stringpath) "]
616621[label="formalParameter\n Stringpath "]
716622[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
716623[label="variableDeclaratorId\n path "]
416624[label="block\n {ByteArraybyteArray=ByteArray.createByteArray(path);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();String[]valueArray=newString[size];for(inti=0;i<valueArray.length;++i){valueArray[i]=byteArray.nextUTF();}returntrie.load(byteArray,valueArray);} "]
516625[label="blockStatements\n ByteArraybyteArray=ByteArray.createByteArray(path);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();String[]valueArray=newString[size];for(inti=0;i<valueArray.length;++i){valueArray[i]=byteArray.nextUTF();}returntrie.load(byteArray,valueArray); "]
616626[label="localVariableDeclarationStatement\n ByteArraybyteArray=ByteArray.createByteArray(path); "]
716627[label="localVariableDeclaration\n ByteArraybyteArray=ByteArray.createByteArray(path) "]
816628[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
816629[label="variableDeclarator\n byteArray=ByteArray.createByteArray(path) "]
916630[label="variableDeclaratorId\n byteArray "]
916631[label="methodInvocation_lfno_primary\n ByteArray.createByteArray(path) "]
1016632[label="typeName\n ByteArray "]
1016633[label="expressionName\n path "]
616634[label="ifThenStatement\n if(byteArray==null)returnfalse; "]
716635[label="equalityExpression\n byteArray==null "]
816636[label="expressionName\n byteArray "]
816637[label="literal\n null "]
716638[label="returnStatement\n returnfalse; "]
816639[label="literal\n false "]
616640[label="localVariableDeclarationStatement\n intsize=byteArray.nextInt(); "]
716641[label="localVariableDeclaration\n intsize=byteArray.nextInt() "]
816642[label="integralType\n int "]
816643[label="variableDeclarator\n size=byteArray.nextInt() "]
916644[label="variableDeclaratorId\n size "]
916645[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
1016646[label="typeName\n byteArray "]
616647[label="localVariableDeclarationStatement\n String[]valueArray=newString[size]; "]
716648[label="localVariableDeclaration\n String[]valueArray=newString[size] "]
816649[label="unannArrayType\n String[] "]
916650[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
916651[label="dims\n [] "]
816652[label="variableDeclarator\n valueArray=newString[size] "]
916653[label="variableDeclaratorId\n valueArray "]
916654[label="arrayCreationExpression\n newString[size] "]
1016655[label="classType_lfno_classOrInterfaceType\n String "]
1016656[label="dimExpr\n [size] "]
1116657[label="expressionName\n size "]
616658[label="basicForStatement\n for(inti=0;i<valueArray.length;++i){valueArray[i]=byteArray.nextUTF();} "]
716659[label="localVariableDeclaration\n inti=0 "]
816660[label="integralType\n int "]
816661[label="variableDeclarator\n i=0 "]
916662[label="variableDeclaratorId\n i "]
916663[label="literal\n 0 "]
716664[label="relationalExpression\n i<valueArray.length "]
816665[label="expressionName\n i "]
816666[label="expressionName\n valueArray.length "]
916667[label="ambiguousName\n valueArray "]
716668[label="preIncrementExpression\n ++i "]
816669[label="expressionName\n i "]
716670[label="block\n {valueArray[i]=byteArray.nextUTF();} "]
816671[label="expressionStatement\n valueArray[i]=byteArray.nextUTF(); "]
916672[label="assignment\n valueArray[i]=byteArray.nextUTF() "]
1016673[label="arrayAccess\n valueArray[i] "]
1116674[label="expressionName\n valueArray "]
1116675[label="expressionName\n i "]
1016676[label="assignmentOperator\n = "]
1016677[label="methodInvocation_lfno_primary\n byteArray.nextUTF() "]
1116678[label="typeName\n byteArray "]
616679[label="returnStatement\n returntrie.load(byteArray,valueArray); "]
716680[label="methodInvocation_lfno_primary\n trie.load(byteArray,valueArray) "]
816681[label="typeName\n trie "]
816682[label="argumentList\n byteArray,valueArray "]
916683[label="expressionName\n byteArray "]
916684[label="expressionName\n valueArray "]
316685[label="methodDeclaration\n staticbooleansaveDat(Stringpath,TreeMap<String,String>map){Collection<String>dependencyList=map.values();try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+\".bi\"+Predefine.BIN_EXT));out.writeInt(dependencyList.size());for(Stringdependency:dependencyList){out.writeUTF(dependency);}if(!trie.save(out))returnfalse;out.close();}catch(Exceptione){logger.warning(\"保存失败\"+e);returnfalse;}returntrue;} "]
416686[label="methodModifier\n static "]
416687[label="methodHeader\n booleansaveDat(Stringpath,TreeMap<String,String>map) "]
516688[label="unannPrimitiveType\n boolean "]
516689[label="methodDeclarator\n saveDat(Stringpath,TreeMap<String,String>map) "]
616690[label="formalParameterList\n Stringpath,TreeMap<String,String>map "]
716691[label="formalParameter\n Stringpath "]
816692[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
816693[label="variableDeclaratorId\n path "]
716694[label="formalParameter\n TreeMap<String,String>map "]
816695[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,String> "]
916696[label="typeArguments\n <String,String> "]
1016697[label="typeArgumentList\n String,String "]
1116698[label="classType_lfno_classOrInterfaceType\n String "]
1116699[label="classType_lfno_classOrInterfaceType\n String "]
816700[label="variableDeclaratorId\n map "]
416701[label="block\n {Collection<String>dependencyList=map.values();try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+\".bi\"+Predefine.BIN_EXT));out.writeInt(dependencyList.size());for(Stringdependency:dependencyList){out.writeUTF(dependency);}if(!trie.save(out))returnfalse;out.close();}catch(Exceptione){logger.warning(\"保存失败\"+e);returnfalse;}returntrue;} "]
516702[label="blockStatements\n Collection<String>dependencyList=map.values();try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+\".bi\"+Predefine.BIN_EXT));out.writeInt(dependencyList.size());for(Stringdependency:dependencyList){out.writeUTF(dependency);}if(!trie.save(out))returnfalse;out.close();}catch(Exceptione){logger.warning(\"保存失败\"+e);returnfalse;}returntrue; "]
616703[label="localVariableDeclarationStatement\n Collection<String>dependencyList=map.values(); "]
716704[label="localVariableDeclaration\n Collection<String>dependencyList=map.values() "]
816705[label="unannClassType_lfno_unannClassOrInterfaceType\n Collection<String> "]
916706[label="typeArguments\n <String> "]
1016707[label="classType_lfno_classOrInterfaceType\n String "]
816708[label="variableDeclarator\n dependencyList=map.values() "]
916709[label="variableDeclaratorId\n dependencyList "]
916710[label="methodInvocation_lfno_primary\n map.values() "]
1016711[label="typeName\n map "]
616712[label="tryStatement\n try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+\".bi\"+Predefine.BIN_EXT));out.writeInt(dependencyList.size());for(Stringdependency:dependencyList){out.writeUTF(dependency);}if(!trie.save(out))returnfalse;out.close();}catch(Exceptione){logger.warning(\"保存失败\"+e);returnfalse;} "]
716713[label="block\n {DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+\".bi\"+Predefine.BIN_EXT));out.writeInt(dependencyList.size());for(Stringdependency:dependencyList){out.writeUTF(dependency);}if(!trie.save(out))returnfalse;out.close();} "]
816714[label="blockStatements\n DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+\".bi\"+Predefine.BIN_EXT));out.writeInt(dependencyList.size());for(Stringdependency:dependencyList){out.writeUTF(dependency);}if(!trie.save(out))returnfalse;out.close(); "]
916715[label="localVariableDeclarationStatement\n DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+\".bi\"+Predefine.BIN_EXT)); "]
1016716[label="localVariableDeclaration\n DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path+\".bi\"+Predefine.BIN_EXT)) "]
1116717[label="unannClassType_lfno_unannClassOrInterfaceType\n DataOutputStream "]
1116718[label="variableDeclarator\n out=newDataOutputStream(IOUtil.newOutputStream(path+\".bi\"+Predefine.BIN_EXT)) "]
1216719[label="variableDeclaratorId\n out "]
1216720[label="classInstanceCreationExpression_lfno_primary\n newDataOutputStream(IOUtil.newOutputStream(path+\".bi\"+Predefine.BIN_EXT)) "]
1316721[label="methodInvocation_lfno_primary\n IOUtil.newOutputStream(path+\".bi\"+Predefine.BIN_EXT) "]
1416722[label="typeName\n IOUtil "]
1416723[label="additiveExpression\n path+\".bi\"+Predefine.BIN_EXT "]
1516724[label="additiveExpression\n path+\".bi\" "]
1616725[label="expressionName\n path "]
1616726[label="literal\n \".bi\" "]
1516727[label="expressionName\n Predefine.BIN_EXT "]
1616728[label="ambiguousName\n Predefine "]
916729[label="expressionStatement\n out.writeInt(dependencyList.size()); "]
1016730[label="methodInvocation\n out.writeInt(dependencyList.size()) "]
1116731[label="typeName\n out "]
1116732[label="methodInvocation_lfno_primary\n dependencyList.size() "]
1216733[label="typeName\n dependencyList "]
916734[label="enhancedForStatement\n for(Stringdependency:dependencyList){out.writeUTF(dependency);} "]
1016735[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1016736[label="variableDeclaratorId\n dependency "]
1016737[label="expressionName\n dependencyList "]
1016738[label="block\n {out.writeUTF(dependency);} "]
1116739[label="expressionStatement\n out.writeUTF(dependency); "]
1216740[label="methodInvocation\n out.writeUTF(dependency) "]
1316741[label="typeName\n out "]
1316742[label="expressionName\n dependency "]
916743[label="ifThenStatement\n if(!trie.save(out))returnfalse; "]
1016744[label="unaryExpressionNotPlusMinus\n !trie.save(out) "]
1116745[label="methodInvocation_lfno_primary\n trie.save(out) "]
1216746[label="typeName\n trie "]
1216747[label="expressionName\n out "]
1016748[label="returnStatement\n returnfalse; "]
1116749[label="literal\n false "]
916750[label="expressionStatement\n out.close(); "]
1016751[label="methodInvocation\n out.close() "]
1116752[label="typeName\n out "]
716753[label="catchClause\n catch(Exceptione){logger.warning(\"保存失败\"+e);returnfalse;} "]
816754[label="catchFormalParameter\n Exceptione "]
916755[label="unannClassType\n Exception "]
916756[label="variableDeclaratorId\n e "]
816757[label="block\n {logger.warning(\"保存失败\"+e);returnfalse;} "]
916758[label="blockStatements\n logger.warning(\"保存失败\"+e);returnfalse; "]
1016759[label="expressionStatement\n logger.warning(\"保存失败\"+e); "]
1116760[label="methodInvocation\n logger.warning(\"保存失败\"+e) "]
1216761[label="typeName\n logger "]
1216762[label="additiveExpression\n \"保存失败\"+e "]
1316763[label="literal\n \"保存失败\" "]
1316764[label="expressionName\n e "]
1016765[label="returnStatement\n returnfalse; "]
1116766[label="literal\n false "]
616767[label="returnStatement\n returntrue; "]
716768[label="literal\n true "]
316769[label="methodDeclaration\n publicstaticStringget(Stringkey){returntrie.get(key);} "]
416770[label="methodModifier\n public "]
416771[label="methodModifier\n static "]
416772[label="methodHeader\n Stringget(Stringkey) "]
516773[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
516774[label="methodDeclarator\n get(Stringkey) "]
616775[label="formalParameter\n Stringkey "]
716776[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
716777[label="variableDeclaratorId\n key "]
416778[label="block\n {returntrie.get(key);} "]
516779[label="returnStatement\n returntrie.get(key); "]
616780[label="methodInvocation_lfno_primary\n trie.get(key) "]
716781[label="typeName\n trie "]
716782[label="expressionName\n key "]
316783[label="methodDeclaration\n publicstaticStringget(StringfromWord,StringfromPos,StringtoWord,StringtoPos){Stringdependency=get(fromWord+\"@\"+toWord);if(dependency==null)dependency=get(fromWord+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos));if(dependency==null)dependency=get(WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+toWord);if(dependency==null)dependency=get(WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos));if(dependency==null)dependency=\"未知\";returndependency;} "]
416784[label="methodModifier\n public "]
416785[label="methodModifier\n static "]
416786[label="methodHeader\n Stringget(StringfromWord,StringfromPos,StringtoWord,StringtoPos) "]
516787[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
516788[label="methodDeclarator\n get(StringfromWord,StringfromPos,StringtoWord,StringtoPos) "]
616789[label="formalParameterList\n StringfromWord,StringfromPos,StringtoWord,StringtoPos "]
716790[label="formalParameters\n StringfromWord,StringfromPos,StringtoWord "]
816791[label="formalParameter\n StringfromWord "]
916792[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
916793[label="variableDeclaratorId\n fromWord "]
816794[label="formalParameter\n StringfromPos "]
916795[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
916796[label="variableDeclaratorId\n fromPos "]
816797[label="formalParameter\n StringtoWord "]
916798[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
916799[label="variableDeclaratorId\n toWord "]
716800[label="formalParameter\n StringtoPos "]
816801[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
816802[label="variableDeclaratorId\n toPos "]
416803[label="block\n {Stringdependency=get(fromWord+\"@\"+toWord);if(dependency==null)dependency=get(fromWord+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos));if(dependency==null)dependency=get(WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+toWord);if(dependency==null)dependency=get(WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos));if(dependency==null)dependency=\"未知\";returndependency;} "]
516804[label="blockStatements\n Stringdependency=get(fromWord+\"@\"+toWord);if(dependency==null)dependency=get(fromWord+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos));if(dependency==null)dependency=get(WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+toWord);if(dependency==null)dependency=get(WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos));if(dependency==null)dependency=\"未知\";returndependency; "]
616805[label="localVariableDeclarationStatement\n Stringdependency=get(fromWord+\"@\"+toWord); "]
716806[label="localVariableDeclaration\n Stringdependency=get(fromWord+\"@\"+toWord) "]
816807[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
816808[label="variableDeclarator\n dependency=get(fromWord+\"@\"+toWord) "]
916809[label="variableDeclaratorId\n dependency "]
916810[label="methodInvocation_lfno_primary\n get(fromWord+\"@\"+toWord) "]
1016811[label="methodName\n get "]
1016812[label="additiveExpression\n fromWord+\"@\"+toWord "]
1116813[label="additiveExpression\n fromWord+\"@\" "]
1216814[label="expressionName\n fromWord "]
1216815[label="literal\n \"@\" "]
1116816[label="expressionName\n toWord "]
616817[label="ifThenStatement\n if(dependency==null)dependency=get(fromWord+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos)); "]
716818[label="equalityExpression\n dependency==null "]
816819[label="expressionName\n dependency "]
816820[label="literal\n null "]
716821[label="expressionStatement\n dependency=get(fromWord+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos)); "]
816822[label="assignment\n dependency=get(fromWord+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos)) "]
916823[label="expressionName\n dependency "]
916824[label="assignmentOperator\n = "]
916825[label="methodInvocation_lfno_primary\n get(fromWord+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos)) "]
1016826[label="methodName\n get "]
1016827[label="additiveExpression\n fromWord+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos) "]
1116828[label="additiveExpression\n fromWord+\"@\" "]
1216829[label="expressionName\n fromWord "]
1216830[label="literal\n \"@\" "]
1116831[label="methodInvocation_lfno_primary\n WordNatureWeightModelMaker.wrapTag(toPos) "]
1216832[label="typeName\n WordNatureWeightModelMaker "]
1216833[label="expressionName\n toPos "]
616834[label="ifThenStatement\n if(dependency==null)dependency=get(WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+toWord); "]
716835[label="equalityExpression\n dependency==null "]
816836[label="expressionName\n dependency "]
816837[label="literal\n null "]
716838[label="expressionStatement\n dependency=get(WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+toWord); "]
816839[label="assignment\n dependency=get(WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+toWord) "]
916840[label="expressionName\n dependency "]
916841[label="assignmentOperator\n = "]
916842[label="methodInvocation_lfno_primary\n get(WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+toWord) "]
1016843[label="methodName\n get "]
1016844[label="additiveExpression\n WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+toWord "]
1116845[label="additiveExpression\n WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\" "]
1216846[label="methodInvocation_lfno_primary\n WordNatureWeightModelMaker.wrapTag(fromPos) "]
1316847[label="typeName\n WordNatureWeightModelMaker "]
1316848[label="expressionName\n fromPos "]
1216849[label="literal\n \"@\" "]
1116850[label="expressionName\n toWord "]
616851[label="ifThenStatement\n if(dependency==null)dependency=get(WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos)); "]
716852[label="equalityExpression\n dependency==null "]
816853[label="expressionName\n dependency "]
816854[label="literal\n null "]
716855[label="expressionStatement\n dependency=get(WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos)); "]
816856[label="assignment\n dependency=get(WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos)) "]
916857[label="expressionName\n dependency "]
916858[label="assignmentOperator\n = "]
916859[label="methodInvocation_lfno_primary\n get(WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos)) "]
1016860[label="methodName\n get "]
1016861[label="additiveExpression\n WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\"+WordNatureWeightModelMaker.wrapTag(toPos) "]
1116862[label="additiveExpression\n WordNatureWeightModelMaker.wrapTag(fromPos)+\"@\" "]
1216863[label="methodInvocation_lfno_primary\n WordNatureWeightModelMaker.wrapTag(fromPos) "]
1316864[label="typeName\n WordNatureWeightModelMaker "]
1316865[label="expressionName\n fromPos "]
1216866[label="literal\n \"@\" "]
1116867[label="methodInvocation_lfno_primary\n WordNatureWeightModelMaker.wrapTag(toPos) "]
1216868[label="typeName\n WordNatureWeightModelMaker "]
1216869[label="expressionName\n toPos "]
616870[label="ifThenStatement\n if(dependency==null)dependency=\"未知\"; "]
716871[label="equalityExpression\n dependency==null "]
816872[label="expressionName\n dependency "]
816873[label="literal\n null "]
716874[label="expressionStatement\n dependency=\"未知\"; "]
816875[label="assignment\n dependency=\"未知\" "]
916876[label="expressionName\n dependency "]
916877[label="assignmentOperator\n = "]
916878[label="literal\n \"未知\" "]
616879[label="returnStatement\n returndependency; "]
716880[label="expressionName\n dependency "]
016881[label="compilationUnit\n packagecom.hankcs.hanlp.dictionary;importcom.hankcs.hanlp.HanLP;importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie;importcom.hankcs.hanlp.collection.trie.bintrie.BinTrie;importcom.hankcs.hanlp.corpus.io.ByteArray;importcom.hankcs.hanlp.corpus.io.IOUtil;importcom.hankcs.hanlp.utility.Predefine;importcom.hankcs.hanlp.utility.TextUtility;importjava.io.*;importjava.nio.ByteBuffer;importjava.nio.channels.FileChannel;importjava.util.*;importstaticcom.hankcs.hanlp.utility.Predefine.logger;publicclassBiGramDictionary{staticDoubleArrayTrie<Integer>trie;publicfinalstaticStringpath=HanLP.Config.BiGramDictionaryPath;publicstaticfinalinttotalFrequency=37545990;static{longstart=System.currentTimeMillis();if(!load(path)){thrownewIllegalArgumentException(\"二元词典加载失败\");}else{logger.info(path+\"加载成功，耗时\"+(System.currentTimeMillis()-start)+\"ms\");}}publicstaticbooleanload(Stringpath){logger.info(\"二元词典开始加载:\"+path);trie=newDoubleArrayTrie<Integer>();booleancreate=!loadDat(path);if(!create)returntrue;TreeMap<String,Integer>map=newTreeMap<String,Integer>();BufferedReaderbr;try{br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]params=line.split(\"\\s\");StringtwoWord=params[0];intfreq=Integer.parseInt(params[1]);map.put(twoWord,freq);}br.close();logger.info(\"二元词典读取完毕:\"+path+\"，开始构建双数组Trie树(DoubleArrayTrie)……\");}catch(FileNotFoundExceptione){logger.severe(\"二元词典\"+path+\"不存在！\"+e);returnfalse;}catch(IOExceptione){logger.severe(\"二元词典\"+path+\"读取错误！\"+e);returnfalse;}intresultCode=trie.build(map);logger.info(\"二元词典DAT构建结果:{}\"+resultCode);logger.info(\"二元词典加载成功:\"+trie.size()+\"个词条\");if(create){try{DataOutputStreamout=newDataOutputStream(newBufferedOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT)));Collection<Integer>freqList=map.values();out.writeInt(freqList.size());for(intfreq:freqList){out.writeInt(freq);}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"在缓存\"+path+Predefine.BIN_EXT+\"时发生异常\"+TextUtility.exceptionToString(e));returnfalse;}}returntrue;}privatestaticbooleanloadDat(Stringpath){try{ByteArraybyteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();Integer[]value=newInteger[size];for(inti=0;i<size;i++){value[i]=byteArray.nextInt();}if(!trie.load(byteArray,value))returnfalse;}catch(Exceptione){returnfalse;}returntrue;}publicstaticSet<String>_findSpecialString(){Set<String>stringSet=newHashSet<String>();BufferedReaderbr;try{br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]params=line.split(\"\t\");StringtwoWord=params[0];params=twoWord.split(\"@\");for(Stringw:params){if(w.contains(\"##\")){stringSet.add(w);}}}br.close();}catch(FileNotFoundExceptione){e.printStackTrace();}catch(IOExceptione){e.printStackTrace();}returnstringSet;}publicstaticintgetBiFrequency(Stringfrom,Stringto){returngetBiFrequency(from+'@'+to);}publicstaticintgetBiFrequency(StringtwoWord){Integerresult=trie.get(twoWord);return(result==null?0:result);}privatestaticbooleanreSaveDictionary(TreeMap<String,Integer>map,Stringpath){StringBuildersbOut=newStringBuilder();for(Map.Entry<String,Integer>entry:map.entrySet()){sbOut.append(entry.getKey());sbOut.append(' ');sbOut.append(entry.getValue());sbOut.append('\n');}returnIOUtil.saveTxt(path,sbOut.toString());}privatestaticvoidsortListForBuildTrie(List<String>wordList,List<Integer>freqList,Stringpath){BinTrie<Integer>binTrie=newBinTrie<Integer>();for(inti=0;i<wordList.size();++i){binTrie.put(wordList.get(i),freqList.get(i));}Collections.sort(wordList);try{BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(IOUtil.newOutputStream(path)));for(Stringw:wordList){bw.write(w+'\t'+binTrie.get(w));bw.newLine();}bw.close();}catch(FileNotFoundExceptione){e.printStackTrace();}catch(IOExceptione){e.printStackTrace();}}}<EOF> "]
116882[label="packageDeclaration\n packagecom.hankcs.hanlp.dictionary; "]
216883[label="packageName\n com.hankcs.hanlp.dictionary "]
316884[label="packageName\n com.hankcs.hanlp "]
416885[label="packageName\n com.hankcs "]
516886[label="packageName\n com "]
116887[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.HanLP; "]
216888[label="typeName\n com.hankcs.hanlp.HanLP "]
316889[label="packageOrTypeName\n com.hankcs.hanlp "]
416890[label="packageOrTypeName\n com.hankcs "]
516891[label="packageOrTypeName\n com "]
116892[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie; "]
216893[label="typeName\n com.hankcs.hanlp.collection.trie.DoubleArrayTrie "]
316894[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
416895[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
516896[label="packageOrTypeName\n com.hankcs.hanlp "]
616897[label="packageOrTypeName\n com.hankcs "]
716898[label="packageOrTypeName\n com "]
116899[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.bintrie.BinTrie; "]
216900[label="typeName\n com.hankcs.hanlp.collection.trie.bintrie.BinTrie "]
316901[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie.bintrie "]
416902[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
516903[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
616904[label="packageOrTypeName\n com.hankcs.hanlp "]
716905[label="packageOrTypeName\n com.hankcs "]
816906[label="packageOrTypeName\n com "]
116907[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.ByteArray; "]
216908[label="typeName\n com.hankcs.hanlp.corpus.io.ByteArray "]
316909[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
416910[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
516911[label="packageOrTypeName\n com.hankcs.hanlp "]
616912[label="packageOrTypeName\n com.hankcs "]
716913[label="packageOrTypeName\n com "]
116914[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
216915[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
316916[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
416917[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
516918[label="packageOrTypeName\n com.hankcs.hanlp "]
616919[label="packageOrTypeName\n com.hankcs "]
716920[label="packageOrTypeName\n com "]
116921[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.Predefine; "]
216922[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
316923[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
416924[label="packageOrTypeName\n com.hankcs.hanlp "]
516925[label="packageOrTypeName\n com.hankcs "]
616926[label="packageOrTypeName\n com "]
116927[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.TextUtility; "]
216928[label="typeName\n com.hankcs.hanlp.utility.TextUtility "]
316929[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
416930[label="packageOrTypeName\n com.hankcs.hanlp "]
516931[label="packageOrTypeName\n com.hankcs "]
616932[label="packageOrTypeName\n com "]
116933[label="typeImportOnDemandDeclaration\n importjava.io.*; "]
216934[label="packageOrTypeName\n java.io "]
316935[label="packageOrTypeName\n java "]
116936[label="singleTypeImportDeclaration\n importjava.nio.ByteBuffer; "]
216937[label="typeName\n java.nio.ByteBuffer "]
316938[label="packageOrTypeName\n java.nio "]
416939[label="packageOrTypeName\n java "]
116940[label="singleTypeImportDeclaration\n importjava.nio.channels.FileChannel; "]
216941[label="typeName\n java.nio.channels.FileChannel "]
316942[label="packageOrTypeName\n java.nio.channels "]
416943[label="packageOrTypeName\n java.nio "]
516944[label="packageOrTypeName\n java "]
116945[label="typeImportOnDemandDeclaration\n importjava.util.*; "]
216946[label="packageOrTypeName\n java.util "]
316947[label="packageOrTypeName\n java "]
116948[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.utility.Predefine.logger; "]
216949[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
316950[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
416951[label="packageOrTypeName\n com.hankcs.hanlp "]
516952[label="packageOrTypeName\n com.hankcs "]
616953[label="packageOrTypeName\n com "]
116954[label="normalClassDeclaration\n publicclassBiGramDictionary{staticDoubleArrayTrie<Integer>trie;publicfinalstaticStringpath=HanLP.Config.BiGramDictionaryPath;publicstaticfinalinttotalFrequency=37545990;static{longstart=System.currentTimeMillis();if(!load(path)){thrownewIllegalArgumentException(\"二元词典加载失败\");}else{logger.info(path+\"加载成功，耗时\"+(System.currentTimeMillis()-start)+\"ms\");}}publicstaticbooleanload(Stringpath){logger.info(\"二元词典开始加载:\"+path);trie=newDoubleArrayTrie<Integer>();booleancreate=!loadDat(path);if(!create)returntrue;TreeMap<String,Integer>map=newTreeMap<String,Integer>();BufferedReaderbr;try{br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]params=line.split(\"\\s\");StringtwoWord=params[0];intfreq=Integer.parseInt(params[1]);map.put(twoWord,freq);}br.close();logger.info(\"二元词典读取完毕:\"+path+\"，开始构建双数组Trie树(DoubleArrayTrie)……\");}catch(FileNotFoundExceptione){logger.severe(\"二元词典\"+path+\"不存在！\"+e);returnfalse;}catch(IOExceptione){logger.severe(\"二元词典\"+path+\"读取错误！\"+e);returnfalse;}intresultCode=trie.build(map);logger.info(\"二元词典DAT构建结果:{}\"+resultCode);logger.info(\"二元词典加载成功:\"+trie.size()+\"个词条\");if(create){try{DataOutputStreamout=newDataOutputStream(newBufferedOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT)));Collection<Integer>freqList=map.values();out.writeInt(freqList.size());for(intfreq:freqList){out.writeInt(freq);}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"在缓存\"+path+Predefine.BIN_EXT+\"时发生异常\"+TextUtility.exceptionToString(e));returnfalse;}}returntrue;}privatestaticbooleanloadDat(Stringpath){try{ByteArraybyteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();Integer[]value=newInteger[size];for(inti=0;i<size;i++){value[i]=byteArray.nextInt();}if(!trie.load(byteArray,value))returnfalse;}catch(Exceptione){returnfalse;}returntrue;}publicstaticSet<String>_findSpecialString(){Set<String>stringSet=newHashSet<String>();BufferedReaderbr;try{br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]params=line.split(\"\t\");StringtwoWord=params[0];params=twoWord.split(\"@\");for(Stringw:params){if(w.contains(\"##\")){stringSet.add(w);}}}br.close();}catch(FileNotFoundExceptione){e.printStackTrace();}catch(IOExceptione){e.printStackTrace();}returnstringSet;}publicstaticintgetBiFrequency(Stringfrom,Stringto){returngetBiFrequency(from+'@'+to);}publicstaticintgetBiFrequency(StringtwoWord){Integerresult=trie.get(twoWord);return(result==null?0:result);}privatestaticbooleanreSaveDictionary(TreeMap<String,Integer>map,Stringpath){StringBuildersbOut=newStringBuilder();for(Map.Entry<String,Integer>entry:map.entrySet()){sbOut.append(entry.getKey());sbOut.append(' ');sbOut.append(entry.getValue());sbOut.append('\n');}returnIOUtil.saveTxt(path,sbOut.toString());}privatestaticvoidsortListForBuildTrie(List<String>wordList,List<Integer>freqList,Stringpath){BinTrie<Integer>binTrie=newBinTrie<Integer>();for(inti=0;i<wordList.size();++i){binTrie.put(wordList.get(i),freqList.get(i));}Collections.sort(wordList);try{BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(IOUtil.newOutputStream(path)));for(Stringw:wordList){bw.write(w+'\t'+binTrie.get(w));bw.newLine();}bw.close();}catch(FileNotFoundExceptione){e.printStackTrace();}catch(IOExceptione){e.printStackTrace();}}} "]
216955[label="classModifier\n public "]
216956[label="classBody\n {staticDoubleArrayTrie<Integer>trie;publicfinalstaticStringpath=HanLP.Config.BiGramDictionaryPath;publicstaticfinalinttotalFrequency=37545990;static{longstart=System.currentTimeMillis();if(!load(path)){thrownewIllegalArgumentException(\"二元词典加载失败\");}else{logger.info(path+\"加载成功，耗时\"+(System.currentTimeMillis()-start)+\"ms\");}}publicstaticbooleanload(Stringpath){logger.info(\"二元词典开始加载:\"+path);trie=newDoubleArrayTrie<Integer>();booleancreate=!loadDat(path);if(!create)returntrue;TreeMap<String,Integer>map=newTreeMap<String,Integer>();BufferedReaderbr;try{br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]params=line.split(\"\\s\");StringtwoWord=params[0];intfreq=Integer.parseInt(params[1]);map.put(twoWord,freq);}br.close();logger.info(\"二元词典读取完毕:\"+path+\"，开始构建双数组Trie树(DoubleArrayTrie)……\");}catch(FileNotFoundExceptione){logger.severe(\"二元词典\"+path+\"不存在！\"+e);returnfalse;}catch(IOExceptione){logger.severe(\"二元词典\"+path+\"读取错误！\"+e);returnfalse;}intresultCode=trie.build(map);logger.info(\"二元词典DAT构建结果:{}\"+resultCode);logger.info(\"二元词典加载成功:\"+trie.size()+\"个词条\");if(create){try{DataOutputStreamout=newDataOutputStream(newBufferedOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT)));Collection<Integer>freqList=map.values();out.writeInt(freqList.size());for(intfreq:freqList){out.writeInt(freq);}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"在缓存\"+path+Predefine.BIN_EXT+\"时发生异常\"+TextUtility.exceptionToString(e));returnfalse;}}returntrue;}privatestaticbooleanloadDat(Stringpath){try{ByteArraybyteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();Integer[]value=newInteger[size];for(inti=0;i<size;i++){value[i]=byteArray.nextInt();}if(!trie.load(byteArray,value))returnfalse;}catch(Exceptione){returnfalse;}returntrue;}publicstaticSet<String>_findSpecialString(){Set<String>stringSet=newHashSet<String>();BufferedReaderbr;try{br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]params=line.split(\"\t\");StringtwoWord=params[0];params=twoWord.split(\"@\");for(Stringw:params){if(w.contains(\"##\")){stringSet.add(w);}}}br.close();}catch(FileNotFoundExceptione){e.printStackTrace();}catch(IOExceptione){e.printStackTrace();}returnstringSet;}publicstaticintgetBiFrequency(Stringfrom,Stringto){returngetBiFrequency(from+'@'+to);}publicstaticintgetBiFrequency(StringtwoWord){Integerresult=trie.get(twoWord);return(result==null?0:result);}privatestaticbooleanreSaveDictionary(TreeMap<String,Integer>map,Stringpath){StringBuildersbOut=newStringBuilder();for(Map.Entry<String,Integer>entry:map.entrySet()){sbOut.append(entry.getKey());sbOut.append(' ');sbOut.append(entry.getValue());sbOut.append('\n');}returnIOUtil.saveTxt(path,sbOut.toString());}privatestaticvoidsortListForBuildTrie(List<String>wordList,List<Integer>freqList,Stringpath){BinTrie<Integer>binTrie=newBinTrie<Integer>();for(inti=0;i<wordList.size();++i){binTrie.put(wordList.get(i),freqList.get(i));}Collections.sort(wordList);try{BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(IOUtil.newOutputStream(path)));for(Stringw:wordList){bw.write(w+'\t'+binTrie.get(w));bw.newLine();}bw.close();}catch(FileNotFoundExceptione){e.printStackTrace();}catch(IOExceptione){e.printStackTrace();}}} "]
316957[label="fieldDeclaration\n staticDoubleArrayTrie<Integer>trie; "]
416958[label="fieldModifier\n static "]
416959[label="unannClassType_lfno_unannClassOrInterfaceType\n DoubleArrayTrie<Integer> "]
516960[label="typeArguments\n <Integer> "]
616961[label="classType_lfno_classOrInterfaceType\n Integer "]
416962[label="variableDeclaratorId\n trie "]
316963[label="fieldDeclaration\n publicfinalstaticStringpath=HanLP.Config.BiGramDictionaryPath; "]
416964[label="fieldModifier\n public "]
416965[label="fieldModifier\n final "]
416966[label="fieldModifier\n static "]
416967[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
416968[label="variableDeclarator\n path=HanLP.Config.BiGramDictionaryPath "]
516969[label="variableDeclaratorId\n path "]
516970[label="expressionName\n HanLP.Config.BiGramDictionaryPath "]
616971[label="ambiguousName\n HanLP.Config "]
716972[label="ambiguousName\n HanLP "]
316973[label="fieldDeclaration\n publicstaticfinalinttotalFrequency=37545990; "]
416974[label="fieldModifier\n public "]
416975[label="fieldModifier\n static "]
416976[label="fieldModifier\n final "]
416977[label="integralType\n int "]
416978[label="variableDeclarator\n totalFrequency=37545990 "]
516979[label="variableDeclaratorId\n totalFrequency "]
516980[label="literal\n 37545990 "]
316981[label="staticInitializer\n static{longstart=System.currentTimeMillis();if(!load(path)){thrownewIllegalArgumentException(\"二元词典加载失败\");}else{logger.info(path+\"加载成功，耗时\"+(System.currentTimeMillis()-start)+\"ms\");}} "]
416982[label="block\n {longstart=System.currentTimeMillis();if(!load(path)){thrownewIllegalArgumentException(\"二元词典加载失败\");}else{logger.info(path+\"加载成功，耗时\"+(System.currentTimeMillis()-start)+\"ms\");}} "]
516983[label="blockStatements\n longstart=System.currentTimeMillis();if(!load(path)){thrownewIllegalArgumentException(\"二元词典加载失败\");}else{logger.info(path+\"加载成功，耗时\"+(System.currentTimeMillis()-start)+\"ms\");} "]
616984[label="localVariableDeclarationStatement\n longstart=System.currentTimeMillis(); "]
716985[label="localVariableDeclaration\n longstart=System.currentTimeMillis() "]
816986[label="integralType\n long "]
816987[label="variableDeclarator\n start=System.currentTimeMillis() "]
916988[label="variableDeclaratorId\n start "]
916989[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
1016990[label="typeName\n System "]
616991[label="ifThenElseStatement\n if(!load(path)){thrownewIllegalArgumentException(\"二元词典加载失败\");}else{logger.info(path+\"加载成功，耗时\"+(System.currentTimeMillis()-start)+\"ms\");} "]
716992[label="unaryExpressionNotPlusMinus\n !load(path) "]
816993[label="methodInvocation_lfno_primary\n load(path) "]
916994[label="methodName\n load "]
916995[label="expressionName\n path "]
716996[label="block\n {thrownewIllegalArgumentException(\"二元词典加载失败\");} "]
816997[label="throwStatement\n thrownewIllegalArgumentException(\"二元词典加载失败\"); "]
916998[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"二元词典加载失败\") "]
1016999[label="literal\n \"二元词典加载失败\" "]
717000[label="block\n {logger.info(path+\"加载成功，耗时\"+(System.currentTimeMillis()-start)+\"ms\");} "]
817001[label="expressionStatement\n logger.info(path+\"加载成功，耗时\"+(System.currentTimeMillis()-start)+\"ms\"); "]
917002[label="methodInvocation\n logger.info(path+\"加载成功，耗时\"+(System.currentTimeMillis()-start)+\"ms\") "]
1017003[label="typeName\n logger "]
1017004[label="additiveExpression\n path+\"加载成功，耗时\"+(System.currentTimeMillis()-start)+\"ms\" "]
1117005[label="additiveExpression\n path+\"加载成功，耗时\"+(System.currentTimeMillis()-start) "]
1217006[label="additiveExpression\n path+\"加载成功，耗时\" "]
1317007[label="expressionName\n path "]
1317008[label="literal\n \"加载成功，耗时\" "]
1217009[label="primaryNoNewArray_lfno_primary\n (System.currentTimeMillis()-start) "]
1317010[label="additiveExpression\n System.currentTimeMillis()-start "]
1417011[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
1517012[label="typeName\n System "]
1417013[label="expressionName\n start "]
1117014[label="literal\n \"ms\" "]
317015[label="methodDeclaration\n publicstaticbooleanload(Stringpath){logger.info(\"二元词典开始加载:\"+path);trie=newDoubleArrayTrie<Integer>();booleancreate=!loadDat(path);if(!create)returntrue;TreeMap<String,Integer>map=newTreeMap<String,Integer>();BufferedReaderbr;try{br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]params=line.split(\"\\s\");StringtwoWord=params[0];intfreq=Integer.parseInt(params[1]);map.put(twoWord,freq);}br.close();logger.info(\"二元词典读取完毕:\"+path+\"，开始构建双数组Trie树(DoubleArrayTrie)……\");}catch(FileNotFoundExceptione){logger.severe(\"二元词典\"+path+\"不存在！\"+e);returnfalse;}catch(IOExceptione){logger.severe(\"二元词典\"+path+\"读取错误！\"+e);returnfalse;}intresultCode=trie.build(map);logger.info(\"二元词典DAT构建结果:{}\"+resultCode);logger.info(\"二元词典加载成功:\"+trie.size()+\"个词条\");if(create){try{DataOutputStreamout=newDataOutputStream(newBufferedOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT)));Collection<Integer>freqList=map.values();out.writeInt(freqList.size());for(intfreq:freqList){out.writeInt(freq);}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"在缓存\"+path+Predefine.BIN_EXT+\"时发生异常\"+TextUtility.exceptionToString(e));returnfalse;}}returntrue;} "]
417016[label="methodModifier\n public "]
417017[label="methodModifier\n static "]
417018[label="methodHeader\n booleanload(Stringpath) "]
517019[label="unannPrimitiveType\n boolean "]
517020[label="methodDeclarator\n load(Stringpath) "]
617021[label="formalParameter\n Stringpath "]
717022[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
717023[label="variableDeclaratorId\n path "]
417024[label="block\n {logger.info(\"二元词典开始加载:\"+path);trie=newDoubleArrayTrie<Integer>();booleancreate=!loadDat(path);if(!create)returntrue;TreeMap<String,Integer>map=newTreeMap<String,Integer>();BufferedReaderbr;try{br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]params=line.split(\"\\s\");StringtwoWord=params[0];intfreq=Integer.parseInt(params[1]);map.put(twoWord,freq);}br.close();logger.info(\"二元词典读取完毕:\"+path+\"，开始构建双数组Trie树(DoubleArrayTrie)……\");}catch(FileNotFoundExceptione){logger.severe(\"二元词典\"+path+\"不存在！\"+e);returnfalse;}catch(IOExceptione){logger.severe(\"二元词典\"+path+\"读取错误！\"+e);returnfalse;}intresultCode=trie.build(map);logger.info(\"二元词典DAT构建结果:{}\"+resultCode);logger.info(\"二元词典加载成功:\"+trie.size()+\"个词条\");if(create){try{DataOutputStreamout=newDataOutputStream(newBufferedOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT)));Collection<Integer>freqList=map.values();out.writeInt(freqList.size());for(intfreq:freqList){out.writeInt(freq);}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"在缓存\"+path+Predefine.BIN_EXT+\"时发生异常\"+TextUtility.exceptionToString(e));returnfalse;}}returntrue;} "]
517025[label="blockStatements\n logger.info(\"二元词典开始加载:\"+path);trie=newDoubleArrayTrie<Integer>();booleancreate=!loadDat(path);if(!create)returntrue;TreeMap<String,Integer>map=newTreeMap<String,Integer>();BufferedReaderbr;try{br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]params=line.split(\"\\s\");StringtwoWord=params[0];intfreq=Integer.parseInt(params[1]);map.put(twoWord,freq);}br.close();logger.info(\"二元词典读取完毕:\"+path+\"，开始构建双数组Trie树(DoubleArrayTrie)……\");}catch(FileNotFoundExceptione){logger.severe(\"二元词典\"+path+\"不存在！\"+e);returnfalse;}catch(IOExceptione){logger.severe(\"二元词典\"+path+\"读取错误！\"+e);returnfalse;}intresultCode=trie.build(map);logger.info(\"二元词典DAT构建结果:{}\"+resultCode);logger.info(\"二元词典加载成功:\"+trie.size()+\"个词条\");if(create){try{DataOutputStreamout=newDataOutputStream(newBufferedOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT)));Collection<Integer>freqList=map.values();out.writeInt(freqList.size());for(intfreq:freqList){out.writeInt(freq);}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"在缓存\"+path+Predefine.BIN_EXT+\"时发生异常\"+TextUtility.exceptionToString(e));returnfalse;}}returntrue; "]
617026[label="expressionStatement\n logger.info(\"二元词典开始加载:\"+path); "]
717027[label="methodInvocation\n logger.info(\"二元词典开始加载:\"+path) "]
817028[label="typeName\n logger "]
817029[label="additiveExpression\n \"二元词典开始加载:\"+path "]
917030[label="literal\n \"二元词典开始加载:\" "]
917031[label="expressionName\n path "]
617032[label="expressionStatement\n trie=newDoubleArrayTrie<Integer>(); "]
717033[label="assignment\n trie=newDoubleArrayTrie<Integer>() "]
817034[label="expressionName\n trie "]
817035[label="assignmentOperator\n = "]
817036[label="classInstanceCreationExpression_lfno_primary\n newDoubleArrayTrie<Integer>() "]
917037[label="typeArguments\n <Integer> "]
1017038[label="classType_lfno_classOrInterfaceType\n Integer "]
617039[label="localVariableDeclarationStatement\n booleancreate=!loadDat(path); "]
717040[label="localVariableDeclaration\n booleancreate=!loadDat(path) "]
817041[label="unannPrimitiveType\n boolean "]
817042[label="variableDeclarator\n create=!loadDat(path) "]
917043[label="variableDeclaratorId\n create "]
917044[label="unaryExpressionNotPlusMinus\n !loadDat(path) "]
1017045[label="methodInvocation_lfno_primary\n loadDat(path) "]
1117046[label="methodName\n loadDat "]
1117047[label="expressionName\n path "]
617048[label="ifThenStatement\n if(!create)returntrue; "]
717049[label="unaryExpressionNotPlusMinus\n !create "]
817050[label="expressionName\n create "]
717051[label="returnStatement\n returntrue; "]
817052[label="literal\n true "]
617053[label="localVariableDeclarationStatement\n TreeMap<String,Integer>map=newTreeMap<String,Integer>(); "]
717054[label="localVariableDeclaration\n TreeMap<String,Integer>map=newTreeMap<String,Integer>() "]
817055[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,Integer> "]
917056[label="typeArguments\n <String,Integer> "]
1017057[label="typeArgumentList\n String,Integer "]
1117058[label="classType_lfno_classOrInterfaceType\n String "]
1117059[label="classType_lfno_classOrInterfaceType\n Integer "]
817060[label="variableDeclarator\n map=newTreeMap<String,Integer>() "]
917061[label="variableDeclaratorId\n map "]
917062[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,Integer>() "]
1017063[label="typeArguments\n <String,Integer> "]
1117064[label="typeArgumentList\n String,Integer "]
1217065[label="classType_lfno_classOrInterfaceType\n String "]
1217066[label="classType_lfno_classOrInterfaceType\n Integer "]
617067[label="localVariableDeclarationStatement\n BufferedReaderbr; "]
717068[label="localVariableDeclaration\n BufferedReaderbr "]
817069[label="unannClassType_lfno_unannClassOrInterfaceType\n BufferedReader "]
817070[label="variableDeclaratorId\n br "]
617071[label="tryStatement\n try{br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]params=line.split(\"\\s\");StringtwoWord=params[0];intfreq=Integer.parseInt(params[1]);map.put(twoWord,freq);}br.close();logger.info(\"二元词典读取完毕:\"+path+\"，开始构建双数组Trie树(DoubleArrayTrie)……\");}catch(FileNotFoundExceptione){logger.severe(\"二元词典\"+path+\"不存在！\"+e);returnfalse;}catch(IOExceptione){logger.severe(\"二元词典\"+path+\"读取错误！\"+e);returnfalse;} "]
717072[label="block\n {br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]params=line.split(\"\\s\");StringtwoWord=params[0];intfreq=Integer.parseInt(params[1]);map.put(twoWord,freq);}br.close();logger.info(\"二元词典读取完毕:\"+path+\"，开始构建双数组Trie树(DoubleArrayTrie)……\");} "]
817073[label="blockStatements\n br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]params=line.split(\"\\s\");StringtwoWord=params[0];intfreq=Integer.parseInt(params[1]);map.put(twoWord,freq);}br.close();logger.info(\"二元词典读取完毕:\"+path+\"，开始构建双数组Trie树(DoubleArrayTrie)……\"); "]
917074[label="expressionStatement\n br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\")); "]
1017075[label="assignment\n br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\")) "]
1117076[label="expressionName\n br "]
1117077[label="assignmentOperator\n = "]
1117078[label="classInstanceCreationExpression_lfno_primary\n newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\")) "]
1217079[label="classInstanceCreationExpression_lfno_primary\n newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\") "]
1317080[label="argumentList\n IOUtil.newInputStream(path),\"UTF-8\" "]
1417081[label="methodInvocation_lfno_primary\n IOUtil.newInputStream(path) "]
1517082[label="typeName\n IOUtil "]
1517083[label="expressionName\n path "]
1417084[label="literal\n \"UTF-8\" "]
917085[label="localVariableDeclarationStatement\n Stringline; "]
1017086[label="localVariableDeclaration\n Stringline "]
1117087[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1117088[label="variableDeclaratorId\n line "]
917089[label="whileStatement\n while((line=br.readLine())!=null){String[]params=line.split(\"\\s\");StringtwoWord=params[0];intfreq=Integer.parseInt(params[1]);map.put(twoWord,freq);} "]
1017090[label="equalityExpression\n (line=br.readLine())!=null "]
1117091[label="primaryNoNewArray_lfno_primary\n (line=br.readLine()) "]
1217092[label="assignment\n line=br.readLine() "]
1317093[label="expressionName\n line "]
1317094[label="assignmentOperator\n = "]
1317095[label="methodInvocation_lfno_primary\n br.readLine() "]
1417096[label="typeName\n br "]
1117097[label="literal\n null "]
1017098[label="block\n {String[]params=line.split(\"\\s\");StringtwoWord=params[0];intfreq=Integer.parseInt(params[1]);map.put(twoWord,freq);} "]
1117099[label="blockStatements\n String[]params=line.split(\"\\s\");StringtwoWord=params[0];intfreq=Integer.parseInt(params[1]);map.put(twoWord,freq); "]
1217100[label="localVariableDeclarationStatement\n String[]params=line.split(\"\\s\"); "]
1317101[label="localVariableDeclaration\n String[]params=line.split(\"\\s\") "]
1417102[label="unannArrayType\n String[] "]
1517103[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1517104[label="dims\n [] "]
1417105[label="variableDeclarator\n params=line.split(\"\\s\") "]
1517106[label="variableDeclaratorId\n params "]
1517107[label="methodInvocation_lfno_primary\n line.split(\"\\s\") "]
1617108[label="typeName\n line "]
1617109[label="literal\n \"\\s\" "]
1217110[label="localVariableDeclarationStatement\n StringtwoWord=params[0]; "]
1317111[label="localVariableDeclaration\n StringtwoWord=params[0] "]
1417112[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1417113[label="variableDeclarator\n twoWord=params[0] "]
1517114[label="variableDeclaratorId\n twoWord "]
1517115[label="arrayAccess_lfno_primary\n params[0] "]
1617116[label="expressionName\n params "]
1617117[label="literal\n 0 "]
1217118[label="localVariableDeclarationStatement\n intfreq=Integer.parseInt(params[1]); "]
1317119[label="localVariableDeclaration\n intfreq=Integer.parseInt(params[1]) "]
1417120[label="integralType\n int "]
1417121[label="variableDeclarator\n freq=Integer.parseInt(params[1]) "]
1517122[label="variableDeclaratorId\n freq "]
1517123[label="methodInvocation_lfno_primary\n Integer.parseInt(params[1]) "]
1617124[label="typeName\n Integer "]
1617125[label="arrayAccess_lfno_primary\n params[1] "]
1717126[label="expressionName\n params "]
1717127[label="literal\n 1 "]
1217128[label="expressionStatement\n map.put(twoWord,freq); "]
1317129[label="methodInvocation\n map.put(twoWord,freq) "]
1417130[label="typeName\n map "]
1417131[label="argumentList\n twoWord,freq "]
1517132[label="expressionName\n twoWord "]
1517133[label="expressionName\n freq "]
917134[label="expressionStatement\n br.close(); "]
1017135[label="methodInvocation\n br.close() "]
1117136[label="typeName\n br "]
917137[label="expressionStatement\n logger.info(\"二元词典读取完毕:\"+path+\"，开始构建双数组Trie树(DoubleArrayTrie)……\"); "]
1017138[label="methodInvocation\n logger.info(\"二元词典读取完毕:\"+path+\"，开始构建双数组Trie树(DoubleArrayTrie)……\") "]
1117139[label="typeName\n logger "]
1117140[label="additiveExpression\n \"二元词典读取完毕:\"+path+\"，开始构建双数组Trie树(DoubleArrayTrie)……\" "]
1217141[label="additiveExpression\n \"二元词典读取完毕:\"+path "]
1317142[label="literal\n \"二元词典读取完毕:\" "]
1317143[label="expressionName\n path "]
1217144[label="literal\n \"，开始构建双数组Trie树(DoubleArrayTrie)……\" "]
717145[label="catches\n catch(FileNotFoundExceptione){logger.severe(\"二元词典\"+path+\"不存在！\"+e);returnfalse;}catch(IOExceptione){logger.severe(\"二元词典\"+path+\"读取错误！\"+e);returnfalse;} "]
817146[label="catchClause\n catch(FileNotFoundExceptione){logger.severe(\"二元词典\"+path+\"不存在！\"+e);returnfalse;} "]
917147[label="catchFormalParameter\n FileNotFoundExceptione "]
1017148[label="unannClassType\n FileNotFoundException "]
1017149[label="variableDeclaratorId\n e "]
917150[label="block\n {logger.severe(\"二元词典\"+path+\"不存在！\"+e);returnfalse;} "]
1017151[label="blockStatements\n logger.severe(\"二元词典\"+path+\"不存在！\"+e);returnfalse; "]
1117152[label="expressionStatement\n logger.severe(\"二元词典\"+path+\"不存在！\"+e); "]
1217153[label="methodInvocation\n logger.severe(\"二元词典\"+path+\"不存在！\"+e) "]
1317154[label="typeName\n logger "]
1317155[label="additiveExpression\n \"二元词典\"+path+\"不存在！\"+e "]
1417156[label="additiveExpression\n \"二元词典\"+path+\"不存在！\" "]
1517157[label="additiveExpression\n \"二元词典\"+path "]
1617158[label="literal\n \"二元词典\" "]
1617159[label="expressionName\n path "]
1517160[label="literal\n \"不存在！\" "]
1417161[label="expressionName\n e "]
1117162[label="returnStatement\n returnfalse; "]
1217163[label="literal\n false "]
817164[label="catchClause\n catch(IOExceptione){logger.severe(\"二元词典\"+path+\"读取错误！\"+e);returnfalse;} "]
917165[label="catchFormalParameter\n IOExceptione "]
1017166[label="unannClassType\n IOException "]
1017167[label="variableDeclaratorId\n e "]
917168[label="block\n {logger.severe(\"二元词典\"+path+\"读取错误！\"+e);returnfalse;} "]
1017169[label="blockStatements\n logger.severe(\"二元词典\"+path+\"读取错误！\"+e);returnfalse; "]
1117170[label="expressionStatement\n logger.severe(\"二元词典\"+path+\"读取错误！\"+e); "]
1217171[label="methodInvocation\n logger.severe(\"二元词典\"+path+\"读取错误！\"+e) "]
1317172[label="typeName\n logger "]
1317173[label="additiveExpression\n \"二元词典\"+path+\"读取错误！\"+e "]
1417174[label="additiveExpression\n \"二元词典\"+path+\"读取错误！\" "]
1517175[label="additiveExpression\n \"二元词典\"+path "]
1617176[label="literal\n \"二元词典\" "]
1617177[label="expressionName\n path "]
1517178[label="literal\n \"读取错误！\" "]
1417179[label="expressionName\n e "]
1117180[label="returnStatement\n returnfalse; "]
1217181[label="literal\n false "]
617182[label="localVariableDeclarationStatement\n intresultCode=trie.build(map); "]
717183[label="localVariableDeclaration\n intresultCode=trie.build(map) "]
817184[label="integralType\n int "]
817185[label="variableDeclarator\n resultCode=trie.build(map) "]
917186[label="variableDeclaratorId\n resultCode "]
917187[label="methodInvocation_lfno_primary\n trie.build(map) "]
1017188[label="typeName\n trie "]
1017189[label="expressionName\n map "]
617190[label="expressionStatement\n logger.info(\"二元词典DAT构建结果:{}\"+resultCode); "]
717191[label="methodInvocation\n logger.info(\"二元词典DAT构建结果:{}\"+resultCode) "]
817192[label="typeName\n logger "]
817193[label="additiveExpression\n \"二元词典DAT构建结果:{}\"+resultCode "]
917194[label="literal\n \"二元词典DAT构建结果:{}\" "]
917195[label="expressionName\n resultCode "]
617196[label="expressionStatement\n logger.info(\"二元词典加载成功:\"+trie.size()+\"个词条\"); "]
717197[label="methodInvocation\n logger.info(\"二元词典加载成功:\"+trie.size()+\"个词条\") "]
817198[label="typeName\n logger "]
817199[label="additiveExpression\n \"二元词典加载成功:\"+trie.size()+\"个词条\" "]
917200[label="additiveExpression\n \"二元词典加载成功:\"+trie.size() "]
1017201[label="literal\n \"二元词典加载成功:\" "]
1017202[label="methodInvocation_lfno_primary\n trie.size() "]
1117203[label="typeName\n trie "]
917204[label="literal\n \"个词条\" "]
617205[label="ifThenStatement\n if(create){try{DataOutputStreamout=newDataOutputStream(newBufferedOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT)));Collection<Integer>freqList=map.values();out.writeInt(freqList.size());for(intfreq:freqList){out.writeInt(freq);}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"在缓存\"+path+Predefine.BIN_EXT+\"时发生异常\"+TextUtility.exceptionToString(e));returnfalse;}} "]
717206[label="expressionName\n create "]
717207[label="block\n {try{DataOutputStreamout=newDataOutputStream(newBufferedOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT)));Collection<Integer>freqList=map.values();out.writeInt(freqList.size());for(intfreq:freqList){out.writeInt(freq);}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"在缓存\"+path+Predefine.BIN_EXT+\"时发生异常\"+TextUtility.exceptionToString(e));returnfalse;}} "]
817208[label="tryStatement\n try{DataOutputStreamout=newDataOutputStream(newBufferedOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT)));Collection<Integer>freqList=map.values();out.writeInt(freqList.size());for(intfreq:freqList){out.writeInt(freq);}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"在缓存\"+path+Predefine.BIN_EXT+\"时发生异常\"+TextUtility.exceptionToString(e));returnfalse;} "]
917209[label="block\n {DataOutputStreamout=newDataOutputStream(newBufferedOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT)));Collection<Integer>freqList=map.values();out.writeInt(freqList.size());for(intfreq:freqList){out.writeInt(freq);}trie.save(out);out.close();} "]
1017210[label="blockStatements\n DataOutputStreamout=newDataOutputStream(newBufferedOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT)));Collection<Integer>freqList=map.values();out.writeInt(freqList.size());for(intfreq:freqList){out.writeInt(freq);}trie.save(out);out.close(); "]
1117211[label="localVariableDeclarationStatement\n DataOutputStreamout=newDataOutputStream(newBufferedOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT))); "]
1217212[label="localVariableDeclaration\n DataOutputStreamout=newDataOutputStream(newBufferedOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT))) "]
1317213[label="unannClassType_lfno_unannClassOrInterfaceType\n DataOutputStream "]
1317214[label="variableDeclarator\n out=newDataOutputStream(newBufferedOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT))) "]
1417215[label="variableDeclaratorId\n out "]
1417216[label="classInstanceCreationExpression_lfno_primary\n newDataOutputStream(newBufferedOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT))) "]
1517217[label="classInstanceCreationExpression_lfno_primary\n newBufferedOutputStream(IOUtil.newOutputStream(path+Predefine.BIN_EXT)) "]
1617218[label="methodInvocation_lfno_primary\n IOUtil.newOutputStream(path+Predefine.BIN_EXT) "]
1717219[label="typeName\n IOUtil "]
1717220[label="additiveExpression\n path+Predefine.BIN_EXT "]
1817221[label="expressionName\n path "]
1817222[label="expressionName\n Predefine.BIN_EXT "]
1917223[label="ambiguousName\n Predefine "]
1117224[label="localVariableDeclarationStatement\n Collection<Integer>freqList=map.values(); "]
1217225[label="localVariableDeclaration\n Collection<Integer>freqList=map.values() "]
1317226[label="unannClassType_lfno_unannClassOrInterfaceType\n Collection<Integer> "]
1417227[label="typeArguments\n <Integer> "]
1517228[label="classType_lfno_classOrInterfaceType\n Integer "]
1317229[label="variableDeclarator\n freqList=map.values() "]
1417230[label="variableDeclaratorId\n freqList "]
1417231[label="methodInvocation_lfno_primary\n map.values() "]
1517232[label="typeName\n map "]
1117233[label="expressionStatement\n out.writeInt(freqList.size()); "]
1217234[label="methodInvocation\n out.writeInt(freqList.size()) "]
1317235[label="typeName\n out "]
1317236[label="methodInvocation_lfno_primary\n freqList.size() "]
1417237[label="typeName\n freqList "]
1117238[label="enhancedForStatement\n for(intfreq:freqList){out.writeInt(freq);} "]
1217239[label="integralType\n int "]
1217240[label="variableDeclaratorId\n freq "]
1217241[label="expressionName\n freqList "]
1217242[label="block\n {out.writeInt(freq);} "]
1317243[label="expressionStatement\n out.writeInt(freq); "]
1417244[label="methodInvocation\n out.writeInt(freq) "]
1517245[label="typeName\n out "]
1517246[label="expressionName\n freq "]
1117247[label="expressionStatement\n trie.save(out); "]
1217248[label="methodInvocation\n trie.save(out) "]
1317249[label="typeName\n trie "]
1317250[label="expressionName\n out "]
1117251[label="expressionStatement\n out.close(); "]
1217252[label="methodInvocation\n out.close() "]
1317253[label="typeName\n out "]
917254[label="catchClause\n catch(Exceptione){logger.warning(\"在缓存\"+path+Predefine.BIN_EXT+\"时发生异常\"+TextUtility.exceptionToString(e));returnfalse;} "]
1017255[label="catchFormalParameter\n Exceptione "]
1117256[label="unannClassType\n Exception "]
1117257[label="variableDeclaratorId\n e "]
1017258[label="block\n {logger.warning(\"在缓存\"+path+Predefine.BIN_EXT+\"时发生异常\"+TextUtility.exceptionToString(e));returnfalse;} "]
1117259[label="blockStatements\n logger.warning(\"在缓存\"+path+Predefine.BIN_EXT+\"时发生异常\"+TextUtility.exceptionToString(e));returnfalse; "]
1217260[label="expressionStatement\n logger.warning(\"在缓存\"+path+Predefine.BIN_EXT+\"时发生异常\"+TextUtility.exceptionToString(e)); "]
1317261[label="methodInvocation\n logger.warning(\"在缓存\"+path+Predefine.BIN_EXT+\"时发生异常\"+TextUtility.exceptionToString(e)) "]
1417262[label="typeName\n logger "]
1417263[label="additiveExpression\n \"在缓存\"+path+Predefine.BIN_EXT+\"时发生异常\"+TextUtility.exceptionToString(e) "]
1517264[label="additiveExpression\n \"在缓存\"+path+Predefine.BIN_EXT+\"时发生异常\" "]
1617265[label="additiveExpression\n \"在缓存\"+path+Predefine.BIN_EXT "]
1717266[label="additiveExpression\n \"在缓存\"+path "]
1817267[label="literal\n \"在缓存\" "]
1817268[label="expressionName\n path "]
1717269[label="expressionName\n Predefine.BIN_EXT "]
1817270[label="ambiguousName\n Predefine "]
1617271[label="literal\n \"时发生异常\" "]
1517272[label="methodInvocation_lfno_primary\n TextUtility.exceptionToString(e) "]
1617273[label="typeName\n TextUtility "]
1617274[label="expressionName\n e "]
1217275[label="returnStatement\n returnfalse; "]
1317276[label="literal\n false "]
617277[label="returnStatement\n returntrue; "]
717278[label="literal\n true "]
317279[label="methodDeclaration\n privatestaticbooleanloadDat(Stringpath){try{ByteArraybyteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();Integer[]value=newInteger[size];for(inti=0;i<size;i++){value[i]=byteArray.nextInt();}if(!trie.load(byteArray,value))returnfalse;}catch(Exceptione){returnfalse;}returntrue;} "]
417280[label="methodModifier\n private "]
417281[label="methodModifier\n static "]
417282[label="methodHeader\n booleanloadDat(Stringpath) "]
517283[label="unannPrimitiveType\n boolean "]
517284[label="methodDeclarator\n loadDat(Stringpath) "]
617285[label="formalParameter\n Stringpath "]
717286[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
717287[label="variableDeclaratorId\n path "]
417288[label="block\n {try{ByteArraybyteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();Integer[]value=newInteger[size];for(inti=0;i<size;i++){value[i]=byteArray.nextInt();}if(!trie.load(byteArray,value))returnfalse;}catch(Exceptione){returnfalse;}returntrue;} "]
517289[label="blockStatements\n try{ByteArraybyteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();Integer[]value=newInteger[size];for(inti=0;i<size;i++){value[i]=byteArray.nextInt();}if(!trie.load(byteArray,value))returnfalse;}catch(Exceptione){returnfalse;}returntrue; "]
617290[label="tryStatement\n try{ByteArraybyteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();Integer[]value=newInteger[size];for(inti=0;i<size;i++){value[i]=byteArray.nextInt();}if(!trie.load(byteArray,value))returnfalse;}catch(Exceptione){returnfalse;} "]
717291[label="block\n {ByteArraybyteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();Integer[]value=newInteger[size];for(inti=0;i<size;i++){value[i]=byteArray.nextInt();}if(!trie.load(byteArray,value))returnfalse;} "]
817292[label="blockStatements\n ByteArraybyteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT);if(byteArray==null)returnfalse;intsize=byteArray.nextInt();Integer[]value=newInteger[size];for(inti=0;i<size;i++){value[i]=byteArray.nextInt();}if(!trie.load(byteArray,value))returnfalse; "]
917293[label="localVariableDeclarationStatement\n ByteArraybyteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT); "]
1017294[label="localVariableDeclaration\n ByteArraybyteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT) "]
1117295[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
1117296[label="variableDeclarator\n byteArray=ByteArray.createByteArray(path+Predefine.BIN_EXT) "]
1217297[label="variableDeclaratorId\n byteArray "]
1217298[label="methodInvocation_lfno_primary\n ByteArray.createByteArray(path+Predefine.BIN_EXT) "]
1317299[label="typeName\n ByteArray "]
1317300[label="additiveExpression\n path+Predefine.BIN_EXT "]
1417301[label="expressionName\n path "]
1417302[label="expressionName\n Predefine.BIN_EXT "]
1517303[label="ambiguousName\n Predefine "]
917304[label="ifThenStatement\n if(byteArray==null)returnfalse; "]
1017305[label="equalityExpression\n byteArray==null "]
1117306[label="expressionName\n byteArray "]
1117307[label="literal\n null "]
1017308[label="returnStatement\n returnfalse; "]
1117309[label="literal\n false "]
917310[label="localVariableDeclarationStatement\n intsize=byteArray.nextInt(); "]
1017311[label="localVariableDeclaration\n intsize=byteArray.nextInt() "]
1117312[label="integralType\n int "]
1117313[label="variableDeclarator\n size=byteArray.nextInt() "]
1217314[label="variableDeclaratorId\n size "]
1217315[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
1317316[label="typeName\n byteArray "]
917317[label="localVariableDeclarationStatement\n Integer[]value=newInteger[size]; "]
1017318[label="localVariableDeclaration\n Integer[]value=newInteger[size] "]
1117319[label="unannArrayType\n Integer[] "]
1217320[label="unannClassType_lfno_unannClassOrInterfaceType\n Integer "]
1217321[label="dims\n [] "]
1117322[label="variableDeclarator\n value=newInteger[size] "]
1217323[label="variableDeclaratorId\n value "]
1217324[label="arrayCreationExpression\n newInteger[size] "]
1317325[label="classType_lfno_classOrInterfaceType\n Integer "]
1317326[label="dimExpr\n [size] "]
1417327[label="expressionName\n size "]
917328[label="basicForStatement\n for(inti=0;i<size;i++){value[i]=byteArray.nextInt();} "]
1017329[label="localVariableDeclaration\n inti=0 "]
1117330[label="integralType\n int "]
1117331[label="variableDeclarator\n i=0 "]
1217332[label="variableDeclaratorId\n i "]
1217333[label="literal\n 0 "]
1017334[label="relationalExpression\n i<size "]
1117335[label="expressionName\n i "]
1117336[label="expressionName\n size "]
1017337[label="postIncrementExpression\n i++ "]
1117338[label="expressionName\n i "]
1017339[label="block\n {value[i]=byteArray.nextInt();} "]
1117340[label="expressionStatement\n value[i]=byteArray.nextInt(); "]
1217341[label="assignment\n value[i]=byteArray.nextInt() "]
1317342[label="arrayAccess\n value[i] "]
1417343[label="expressionName\n value "]
1417344[label="expressionName\n i "]
1317345[label="assignmentOperator\n = "]
1317346[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
1417347[label="typeName\n byteArray "]
917348[label="ifThenStatement\n if(!trie.load(byteArray,value))returnfalse; "]
1017349[label="unaryExpressionNotPlusMinus\n !trie.load(byteArray,value) "]
1117350[label="methodInvocation_lfno_primary\n trie.load(byteArray,value) "]
1217351[label="typeName\n trie "]
1217352[label="argumentList\n byteArray,value "]
1317353[label="expressionName\n byteArray "]
1317354[label="expressionName\n value "]
1017355[label="returnStatement\n returnfalse; "]
1117356[label="literal\n false "]
717357[label="catchClause\n catch(Exceptione){returnfalse;} "]
817358[label="catchFormalParameter\n Exceptione "]
917359[label="unannClassType\n Exception "]
917360[label="variableDeclaratorId\n e "]
817361[label="block\n {returnfalse;} "]
917362[label="returnStatement\n returnfalse; "]
1017363[label="literal\n false "]
617364[label="returnStatement\n returntrue; "]
717365[label="literal\n true "]
317366[label="methodDeclaration\n publicstaticSet<String>_findSpecialString(){Set<String>stringSet=newHashSet<String>();BufferedReaderbr;try{br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]params=line.split(\"\t\");StringtwoWord=params[0];params=twoWord.split(\"@\");for(Stringw:params){if(w.contains(\"##\")){stringSet.add(w);}}}br.close();}catch(FileNotFoundExceptione){e.printStackTrace();}catch(IOExceptione){e.printStackTrace();}returnstringSet;} "]
417367[label="methodModifier\n public "]
417368[label="methodModifier\n static "]
417369[label="methodHeader\n Set<String>_findSpecialString() "]
517370[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
617371[label="typeArguments\n <String> "]
717372[label="classType_lfno_classOrInterfaceType\n String "]
517373[label="methodDeclarator\n _findSpecialString() "]
417374[label="block\n {Set<String>stringSet=newHashSet<String>();BufferedReaderbr;try{br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]params=line.split(\"\t\");StringtwoWord=params[0];params=twoWord.split(\"@\");for(Stringw:params){if(w.contains(\"##\")){stringSet.add(w);}}}br.close();}catch(FileNotFoundExceptione){e.printStackTrace();}catch(IOExceptione){e.printStackTrace();}returnstringSet;} "]
517375[label="blockStatements\n Set<String>stringSet=newHashSet<String>();BufferedReaderbr;try{br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]params=line.split(\"\t\");StringtwoWord=params[0];params=twoWord.split(\"@\");for(Stringw:params){if(w.contains(\"##\")){stringSet.add(w);}}}br.close();}catch(FileNotFoundExceptione){e.printStackTrace();}catch(IOExceptione){e.printStackTrace();}returnstringSet; "]
617376[label="localVariableDeclarationStatement\n Set<String>stringSet=newHashSet<String>(); "]
717377[label="localVariableDeclaration\n Set<String>stringSet=newHashSet<String>() "]
817378[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
917379[label="typeArguments\n <String> "]
1017380[label="classType_lfno_classOrInterfaceType\n String "]
817381[label="variableDeclarator\n stringSet=newHashSet<String>() "]
917382[label="variableDeclaratorId\n stringSet "]
917383[label="classInstanceCreationExpression_lfno_primary\n newHashSet<String>() "]
1017384[label="typeArguments\n <String> "]
1117385[label="classType_lfno_classOrInterfaceType\n String "]
617386[label="localVariableDeclarationStatement\n BufferedReaderbr; "]
717387[label="localVariableDeclaration\n BufferedReaderbr "]
817388[label="unannClassType_lfno_unannClassOrInterfaceType\n BufferedReader "]
817389[label="variableDeclaratorId\n br "]
617390[label="tryStatement\n try{br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]params=line.split(\"\t\");StringtwoWord=params[0];params=twoWord.split(\"@\");for(Stringw:params){if(w.contains(\"##\")){stringSet.add(w);}}}br.close();}catch(FileNotFoundExceptione){e.printStackTrace();}catch(IOExceptione){e.printStackTrace();} "]
717391[label="block\n {br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]params=line.split(\"\t\");StringtwoWord=params[0];params=twoWord.split(\"@\");for(Stringw:params){if(w.contains(\"##\")){stringSet.add(w);}}}br.close();} "]
817392[label="blockStatements\n br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]params=line.split(\"\t\");StringtwoWord=params[0];params=twoWord.split(\"@\");for(Stringw:params){if(w.contains(\"##\")){stringSet.add(w);}}}br.close(); "]
917393[label="expressionStatement\n br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\")); "]
1017394[label="assignment\n br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\")) "]
1117395[label="expressionName\n br "]
1117396[label="assignmentOperator\n = "]
1117397[label="classInstanceCreationExpression_lfno_primary\n newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\")) "]
1217398[label="classInstanceCreationExpression_lfno_primary\n newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\") "]
1317399[label="argumentList\n IOUtil.newInputStream(path),\"UTF-8\" "]
1417400[label="methodInvocation_lfno_primary\n IOUtil.newInputStream(path) "]
1517401[label="typeName\n IOUtil "]
1517402[label="expressionName\n path "]
1417403[label="literal\n \"UTF-8\" "]
917404[label="localVariableDeclarationStatement\n Stringline; "]
1017405[label="localVariableDeclaration\n Stringline "]
1117406[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1117407[label="variableDeclaratorId\n line "]
917408[label="whileStatement\n while((line=br.readLine())!=null){String[]params=line.split(\"\t\");StringtwoWord=params[0];params=twoWord.split(\"@\");for(Stringw:params){if(w.contains(\"##\")){stringSet.add(w);}}} "]
1017409[label="equalityExpression\n (line=br.readLine())!=null "]
1117410[label="primaryNoNewArray_lfno_primary\n (line=br.readLine()) "]
1217411[label="assignment\n line=br.readLine() "]
1317412[label="expressionName\n line "]
1317413[label="assignmentOperator\n = "]
1317414[label="methodInvocation_lfno_primary\n br.readLine() "]
1417415[label="typeName\n br "]
1117416[label="literal\n null "]
1017417[label="block\n {String[]params=line.split(\"\t\");StringtwoWord=params[0];params=twoWord.split(\"@\");for(Stringw:params){if(w.contains(\"##\")){stringSet.add(w);}}} "]
1117418[label="blockStatements\n String[]params=line.split(\"\t\");StringtwoWord=params[0];params=twoWord.split(\"@\");for(Stringw:params){if(w.contains(\"##\")){stringSet.add(w);}} "]
1217419[label="localVariableDeclarationStatement\n String[]params=line.split(\"\t\"); "]
1317420[label="localVariableDeclaration\n String[]params=line.split(\"\t\") "]
1417421[label="unannArrayType\n String[] "]
1517422[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1517423[label="dims\n [] "]
1417424[label="variableDeclarator\n params=line.split(\"\t\") "]
1517425[label="variableDeclaratorId\n params "]
1517426[label="methodInvocation_lfno_primary\n line.split(\"\t\") "]
1617427[label="typeName\n line "]
1617428[label="literal\n \"\t\" "]
1217429[label="localVariableDeclarationStatement\n StringtwoWord=params[0]; "]
1317430[label="localVariableDeclaration\n StringtwoWord=params[0] "]
1417431[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1417432[label="variableDeclarator\n twoWord=params[0] "]
1517433[label="variableDeclaratorId\n twoWord "]
1517434[label="arrayAccess_lfno_primary\n params[0] "]
1617435[label="expressionName\n params "]
1617436[label="literal\n 0 "]
1217437[label="expressionStatement\n params=twoWord.split(\"@\"); "]
1317438[label="assignment\n params=twoWord.split(\"@\") "]
1417439[label="expressionName\n params "]
1417440[label="assignmentOperator\n = "]
1417441[label="methodInvocation_lfno_primary\n twoWord.split(\"@\") "]
1517442[label="typeName\n twoWord "]
1517443[label="literal\n \"@\" "]
1217444[label="enhancedForStatement\n for(Stringw:params){if(w.contains(\"##\")){stringSet.add(w);}} "]
1317445[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1317446[label="variableDeclaratorId\n w "]
1317447[label="expressionName\n params "]
1317448[label="block\n {if(w.contains(\"##\")){stringSet.add(w);}} "]
1417449[label="ifThenStatement\n if(w.contains(\"##\")){stringSet.add(w);} "]
1517450[label="methodInvocation_lfno_primary\n w.contains(\"##\") "]
1617451[label="typeName\n w "]
1617452[label="literal\n \"##\" "]
1517453[label="block\n {stringSet.add(w);} "]
1617454[label="expressionStatement\n stringSet.add(w); "]
1717455[label="methodInvocation\n stringSet.add(w) "]
1817456[label="typeName\n stringSet "]
1817457[label="expressionName\n w "]
917458[label="expressionStatement\n br.close(); "]
1017459[label="methodInvocation\n br.close() "]
1117460[label="typeName\n br "]
717461[label="catches\n catch(FileNotFoundExceptione){e.printStackTrace();}catch(IOExceptione){e.printStackTrace();} "]
817462[label="catchClause\n catch(FileNotFoundExceptione){e.printStackTrace();} "]
917463[label="catchFormalParameter\n FileNotFoundExceptione "]
1017464[label="unannClassType\n FileNotFoundException "]
1017465[label="variableDeclaratorId\n e "]
917466[label="block\n {e.printStackTrace();} "]
1017467[label="expressionStatement\n e.printStackTrace(); "]
1117468[label="methodInvocation\n e.printStackTrace() "]
1217469[label="typeName\n e "]
817470[label="catchClause\n catch(IOExceptione){e.printStackTrace();} "]
917471[label="catchFormalParameter\n IOExceptione "]
1017472[label="unannClassType\n IOException "]
1017473[label="variableDeclaratorId\n e "]
917474[label="block\n {e.printStackTrace();} "]
1017475[label="expressionStatement\n e.printStackTrace(); "]
1117476[label="methodInvocation\n e.printStackTrace() "]
1217477[label="typeName\n e "]
617478[label="returnStatement\n returnstringSet; "]
717479[label="expressionName\n stringSet "]
317480[label="methodDeclaration\n publicstaticintgetBiFrequency(Stringfrom,Stringto){returngetBiFrequency(from+'@'+to);} "]
417481[label="methodModifier\n public "]
417482[label="methodModifier\n static "]
417483[label="methodHeader\n intgetBiFrequency(Stringfrom,Stringto) "]
517484[label="integralType\n int "]
517485[label="methodDeclarator\n getBiFrequency(Stringfrom,Stringto) "]
617486[label="formalParameterList\n Stringfrom,Stringto "]
717487[label="formalParameter\n Stringfrom "]
817488[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
817489[label="variableDeclaratorId\n from "]
717490[label="formalParameter\n Stringto "]
817491[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
817492[label="variableDeclaratorId\n to "]
417493[label="block\n {returngetBiFrequency(from+'@'+to);} "]
517494[label="returnStatement\n returngetBiFrequency(from+'@'+to); "]
617495[label="methodInvocation_lfno_primary\n getBiFrequency(from+'@'+to) "]
717496[label="methodName\n getBiFrequency "]
717497[label="additiveExpression\n from+'@'+to "]
817498[label="additiveExpression\n from+'@' "]
917499[label="expressionName\n from "]
917500[label="literal\n '@' "]
817501[label="expressionName\n to "]
317502[label="methodDeclaration\n publicstaticintgetBiFrequency(StringtwoWord){Integerresult=trie.get(twoWord);return(result==null?0:result);} "]
417503[label="methodModifier\n public "]
417504[label="methodModifier\n static "]
417505[label="methodHeader\n intgetBiFrequency(StringtwoWord) "]
517506[label="integralType\n int "]
517507[label="methodDeclarator\n getBiFrequency(StringtwoWord) "]
617508[label="formalParameter\n StringtwoWord "]
717509[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
717510[label="variableDeclaratorId\n twoWord "]
417511[label="block\n {Integerresult=trie.get(twoWord);return(result==null?0:result);} "]
517512[label="blockStatements\n Integerresult=trie.get(twoWord);return(result==null?0:result); "]
617513[label="localVariableDeclarationStatement\n Integerresult=trie.get(twoWord); "]
717514[label="localVariableDeclaration\n Integerresult=trie.get(twoWord) "]
817515[label="unannClassType_lfno_unannClassOrInterfaceType\n Integer "]
817516[label="variableDeclarator\n result=trie.get(twoWord) "]
917517[label="variableDeclaratorId\n result "]
917518[label="methodInvocation_lfno_primary\n trie.get(twoWord) "]
1017519[label="typeName\n trie "]
1017520[label="expressionName\n twoWord "]
617521[label="returnStatement\n return(result==null?0:result); "]
717522[label="primaryNoNewArray_lfno_primary\n (result==null?0:result) "]
817523[label="conditionalExpression\n result==null?0:result "]
917524[label="equalityExpression\n result==null "]
1017525[label="expressionName\n result "]
1017526[label="literal\n null "]
917527[label="literal\n 0 "]
917528[label="expressionName\n result "]
317529[label="methodDeclaration\n privatestaticbooleanreSaveDictionary(TreeMap<String,Integer>map,Stringpath){StringBuildersbOut=newStringBuilder();for(Map.Entry<String,Integer>entry:map.entrySet()){sbOut.append(entry.getKey());sbOut.append(' ');sbOut.append(entry.getValue());sbOut.append('\n');}returnIOUtil.saveTxt(path,sbOut.toString());} "]
417530[label="methodModifier\n private "]
417531[label="methodModifier\n static "]
417532[label="methodHeader\n booleanreSaveDictionary(TreeMap<String,Integer>map,Stringpath) "]
517533[label="unannPrimitiveType\n boolean "]
517534[label="methodDeclarator\n reSaveDictionary(TreeMap<String,Integer>map,Stringpath) "]
617535[label="formalParameterList\n TreeMap<String,Integer>map,Stringpath "]
717536[label="formalParameter\n TreeMap<String,Integer>map "]
817537[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,Integer> "]
917538[label="typeArguments\n <String,Integer> "]
1017539[label="typeArgumentList\n String,Integer "]
1117540[label="classType_lfno_classOrInterfaceType\n String "]
1117541[label="classType_lfno_classOrInterfaceType\n Integer "]
817542[label="variableDeclaratorId\n map "]
717543[label="formalParameter\n Stringpath "]
817544[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
817545[label="variableDeclaratorId\n path "]
417546[label="block\n {StringBuildersbOut=newStringBuilder();for(Map.Entry<String,Integer>entry:map.entrySet()){sbOut.append(entry.getKey());sbOut.append(' ');sbOut.append(entry.getValue());sbOut.append('\n');}returnIOUtil.saveTxt(path,sbOut.toString());} "]
517547[label="blockStatements\n StringBuildersbOut=newStringBuilder();for(Map.Entry<String,Integer>entry:map.entrySet()){sbOut.append(entry.getKey());sbOut.append(' ');sbOut.append(entry.getValue());sbOut.append('\n');}returnIOUtil.saveTxt(path,sbOut.toString()); "]
617548[label="localVariableDeclarationStatement\n StringBuildersbOut=newStringBuilder(); "]
717549[label="localVariableDeclaration\n StringBuildersbOut=newStringBuilder() "]
817550[label="unannClassType_lfno_unannClassOrInterfaceType\n StringBuilder "]
817551[label="variableDeclarator\n sbOut=newStringBuilder() "]
917552[label="variableDeclaratorId\n sbOut "]
917553[label="classInstanceCreationExpression_lfno_primary\n newStringBuilder() "]
617554[label="enhancedForStatement\n for(Map.Entry<String,Integer>entry:map.entrySet()){sbOut.append(entry.getKey());sbOut.append(' ');sbOut.append(entry.getValue());sbOut.append('\n');} "]
717555[label="unannClassOrInterfaceType\n Map.Entry<String,Integer> "]
817556[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
817557[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,Integer> "]
917558[label="typeArguments\n <String,Integer> "]
1017559[label="typeArgumentList\n String,Integer "]
1117560[label="classType_lfno_classOrInterfaceType\n String "]
1117561[label="classType_lfno_classOrInterfaceType\n Integer "]
717562[label="variableDeclaratorId\n entry "]
717563[label="methodInvocation_lfno_primary\n map.entrySet() "]
817564[label="typeName\n map "]
717565[label="block\n {sbOut.append(entry.getKey());sbOut.append(' ');sbOut.append(entry.getValue());sbOut.append('\n');} "]
817566[label="blockStatements\n sbOut.append(entry.getKey());sbOut.append(' ');sbOut.append(entry.getValue());sbOut.append('\n'); "]
917567[label="expressionStatement\n sbOut.append(entry.getKey()); "]
1017568[label="methodInvocation\n sbOut.append(entry.getKey()) "]
1117569[label="typeName\n sbOut "]
1117570[label="methodInvocation_lfno_primary\n entry.getKey() "]
1217571[label="typeName\n entry "]
917572[label="expressionStatement\n sbOut.append(' '); "]
1017573[label="methodInvocation\n sbOut.append(' ') "]
1117574[label="typeName\n sbOut "]
1117575[label="literal\n ' ' "]
917576[label="expressionStatement\n sbOut.append(entry.getValue()); "]
1017577[label="methodInvocation\n sbOut.append(entry.getValue()) "]
1117578[label="typeName\n sbOut "]
1117579[label="methodInvocation_lfno_primary\n entry.getValue() "]
1217580[label="typeName\n entry "]
917581[label="expressionStatement\n sbOut.append('\n'); "]
1017582[label="methodInvocation\n sbOut.append('\n') "]
1117583[label="typeName\n sbOut "]
1117584[label="literal\n '\n' "]
617585[label="returnStatement\n returnIOUtil.saveTxt(path,sbOut.toString()); "]
717586[label="methodInvocation_lfno_primary\n IOUtil.saveTxt(path,sbOut.toString()) "]
817587[label="typeName\n IOUtil "]
817588[label="argumentList\n path,sbOut.toString() "]
917589[label="expressionName\n path "]
917590[label="methodInvocation_lfno_primary\n sbOut.toString() "]
1017591[label="typeName\n sbOut "]
317592[label="methodDeclaration\n privatestaticvoidsortListForBuildTrie(List<String>wordList,List<Integer>freqList,Stringpath){BinTrie<Integer>binTrie=newBinTrie<Integer>();for(inti=0;i<wordList.size();++i){binTrie.put(wordList.get(i),freqList.get(i));}Collections.sort(wordList);try{BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(IOUtil.newOutputStream(path)));for(Stringw:wordList){bw.write(w+'\t'+binTrie.get(w));bw.newLine();}bw.close();}catch(FileNotFoundExceptione){e.printStackTrace();}catch(IOExceptione){e.printStackTrace();}} "]
417593[label="methodModifier\n private "]
417594[label="methodModifier\n static "]
417595[label="methodHeader\n voidsortListForBuildTrie(List<String>wordList,List<Integer>freqList,Stringpath) "]
517596[label="result\n void "]
517597[label="methodDeclarator\n sortListForBuildTrie(List<String>wordList,List<Integer>freqList,Stringpath) "]
617598[label="formalParameterList\n List<String>wordList,List<Integer>freqList,Stringpath "]
717599[label="formalParameters\n List<String>wordList,List<Integer>freqList "]
817600[label="formalParameter\n List<String>wordList "]
917601[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
1017602[label="typeArguments\n <String> "]
1117603[label="classType_lfno_classOrInterfaceType\n String "]
917604[label="variableDeclaratorId\n wordList "]
817605[label="formalParameter\n List<Integer>freqList "]
917606[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
1017607[label="typeArguments\n <Integer> "]
1117608[label="classType_lfno_classOrInterfaceType\n Integer "]
917609[label="variableDeclaratorId\n freqList "]
717610[label="formalParameter\n Stringpath "]
817611[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
817612[label="variableDeclaratorId\n path "]
417613[label="block\n {BinTrie<Integer>binTrie=newBinTrie<Integer>();for(inti=0;i<wordList.size();++i){binTrie.put(wordList.get(i),freqList.get(i));}Collections.sort(wordList);try{BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(IOUtil.newOutputStream(path)));for(Stringw:wordList){bw.write(w+'\t'+binTrie.get(w));bw.newLine();}bw.close();}catch(FileNotFoundExceptione){e.printStackTrace();}catch(IOExceptione){e.printStackTrace();}} "]
517614[label="blockStatements\n BinTrie<Integer>binTrie=newBinTrie<Integer>();for(inti=0;i<wordList.size();++i){binTrie.put(wordList.get(i),freqList.get(i));}Collections.sort(wordList);try{BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(IOUtil.newOutputStream(path)));for(Stringw:wordList){bw.write(w+'\t'+binTrie.get(w));bw.newLine();}bw.close();}catch(FileNotFoundExceptione){e.printStackTrace();}catch(IOExceptione){e.printStackTrace();} "]
617615[label="localVariableDeclarationStatement\n BinTrie<Integer>binTrie=newBinTrie<Integer>(); "]
717616[label="localVariableDeclaration\n BinTrie<Integer>binTrie=newBinTrie<Integer>() "]
817617[label="unannClassType_lfno_unannClassOrInterfaceType\n BinTrie<Integer> "]
917618[label="typeArguments\n <Integer> "]
1017619[label="classType_lfno_classOrInterfaceType\n Integer "]
817620[label="variableDeclarator\n binTrie=newBinTrie<Integer>() "]
917621[label="variableDeclaratorId\n binTrie "]
917622[label="classInstanceCreationExpression_lfno_primary\n newBinTrie<Integer>() "]
1017623[label="typeArguments\n <Integer> "]
1117624[label="classType_lfno_classOrInterfaceType\n Integer "]
617625[label="basicForStatement\n for(inti=0;i<wordList.size();++i){binTrie.put(wordList.get(i),freqList.get(i));} "]
717626[label="localVariableDeclaration\n inti=0 "]
817627[label="integralType\n int "]
817628[label="variableDeclarator\n i=0 "]
917629[label="variableDeclaratorId\n i "]
917630[label="literal\n 0 "]
717631[label="relationalExpression\n i<wordList.size() "]
817632[label="expressionName\n i "]
817633[label="methodInvocation_lfno_primary\n wordList.size() "]
917634[label="typeName\n wordList "]
717635[label="preIncrementExpression\n ++i "]
817636[label="expressionName\n i "]
717637[label="block\n {binTrie.put(wordList.get(i),freqList.get(i));} "]
817638[label="expressionStatement\n binTrie.put(wordList.get(i),freqList.get(i)); "]
917639[label="methodInvocation\n binTrie.put(wordList.get(i),freqList.get(i)) "]
1017640[label="typeName\n binTrie "]
1017641[label="argumentList\n wordList.get(i),freqList.get(i) "]
1117642[label="methodInvocation_lfno_primary\n wordList.get(i) "]
1217643[label="typeName\n wordList "]
1217644[label="expressionName\n i "]
1117645[label="methodInvocation_lfno_primary\n freqList.get(i) "]
1217646[label="typeName\n freqList "]
1217647[label="expressionName\n i "]
617648[label="expressionStatement\n Collections.sort(wordList); "]
717649[label="methodInvocation\n Collections.sort(wordList) "]
817650[label="typeName\n Collections "]
817651[label="expressionName\n wordList "]
617652[label="tryStatement\n try{BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(IOUtil.newOutputStream(path)));for(Stringw:wordList){bw.write(w+'\t'+binTrie.get(w));bw.newLine();}bw.close();}catch(FileNotFoundExceptione){e.printStackTrace();}catch(IOExceptione){e.printStackTrace();} "]
717653[label="block\n {BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(IOUtil.newOutputStream(path)));for(Stringw:wordList){bw.write(w+'\t'+binTrie.get(w));bw.newLine();}bw.close();} "]
817654[label="blockStatements\n BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(IOUtil.newOutputStream(path)));for(Stringw:wordList){bw.write(w+'\t'+binTrie.get(w));bw.newLine();}bw.close(); "]
917655[label="localVariableDeclarationStatement\n BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(IOUtil.newOutputStream(path))); "]
1017656[label="localVariableDeclaration\n BufferedWriterbw=newBufferedWriter(newOutputStreamWriter(IOUtil.newOutputStream(path))) "]
1117657[label="unannClassType_lfno_unannClassOrInterfaceType\n BufferedWriter "]
1117658[label="variableDeclarator\n bw=newBufferedWriter(newOutputStreamWriter(IOUtil.newOutputStream(path))) "]
1217659[label="variableDeclaratorId\n bw "]
1217660[label="classInstanceCreationExpression_lfno_primary\n newBufferedWriter(newOutputStreamWriter(IOUtil.newOutputStream(path))) "]
1317661[label="classInstanceCreationExpression_lfno_primary\n newOutputStreamWriter(IOUtil.newOutputStream(path)) "]
1417662[label="methodInvocation_lfno_primary\n IOUtil.newOutputStream(path) "]
1517663[label="typeName\n IOUtil "]
1517664[label="expressionName\n path "]
917665[label="enhancedForStatement\n for(Stringw:wordList){bw.write(w+'\t'+binTrie.get(w));bw.newLine();} "]
1017666[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1017667[label="variableDeclaratorId\n w "]
1017668[label="expressionName\n wordList "]
1017669[label="block\n {bw.write(w+'\t'+binTrie.get(w));bw.newLine();} "]
1117670[label="blockStatements\n bw.write(w+'\t'+binTrie.get(w));bw.newLine(); "]
1217671[label="expressionStatement\n bw.write(w+'\t'+binTrie.get(w)); "]
1317672[label="methodInvocation\n bw.write(w+'\t'+binTrie.get(w)) "]
1417673[label="typeName\n bw "]
1417674[label="additiveExpression\n w+'\t'+binTrie.get(w) "]
1517675[label="additiveExpression\n w+'\t' "]
1617676[label="expressionName\n w "]
1617677[label="literal\n '\t' "]
1517678[label="methodInvocation_lfno_primary\n binTrie.get(w) "]
1617679[label="typeName\n binTrie "]
1617680[label="expressionName\n w "]
1217681[label="expressionStatement\n bw.newLine(); "]
1317682[label="methodInvocation\n bw.newLine() "]
1417683[label="typeName\n bw "]
917684[label="expressionStatement\n bw.close(); "]
1017685[label="methodInvocation\n bw.close() "]
1117686[label="typeName\n bw "]
717687[label="catches\n catch(FileNotFoundExceptione){e.printStackTrace();}catch(IOExceptione){e.printStackTrace();} "]
817688[label="catchClause\n catch(FileNotFoundExceptione){e.printStackTrace();} "]
917689[label="catchFormalParameter\n FileNotFoundExceptione "]
1017690[label="unannClassType\n FileNotFoundException "]
1017691[label="variableDeclaratorId\n e "]
917692[label="block\n {e.printStackTrace();} "]
1017693[label="expressionStatement\n e.printStackTrace(); "]
1117694[label="methodInvocation\n e.printStackTrace() "]
1217695[label="typeName\n e "]
817696[label="catchClause\n catch(IOExceptione){e.printStackTrace();} "]
917697[label="catchFormalParameter\n IOExceptione "]
1017698[label="unannClassType\n IOException "]
1017699[label="variableDeclaratorId\n e "]
917700[label="block\n {e.printStackTrace();} "]
1017701[label="expressionStatement\n e.printStackTrace(); "]
1117702[label="methodInvocation\n e.printStackTrace() "]
1217703[label="typeName\n e "]
017704[label="compilationUnit\n packagecom.hankcs.hanlp.classification.tokenizers;importjava.util.Iterator;importjava.util.LinkedList;importjava.util.List;publicclassBigramTokenizerimplementsITokenizer{publicString[]segment(Stringtext){if(text.length()==0)returnnewString[0];char[]charArray=text.toCharArray();CharTable.normalization(charArray);List<int[]>atomList=newLinkedList<int[]>();intstart=0;intend=charArray.length;intoffsetAtom=start;bytepreType=CharType.get(charArray[offsetAtom]);bytecurType;while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(preType==CharType.CT_CHINESE){atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;}elseif(curType!=preType){if(charArray[offsetAtom]=='.'&&preType==CharType.CT_NUM){while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(curType!=CharType.CT_NUM)break;}}if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;}preType=curType;}if(offsetAtom==end)if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start});if(atomList.isEmpty())returnnewString[0];String[]termArray=newString[atomList.size()-1];Iterator<int[]>iterator=atomList.iterator();int[]pre=iterator.next();intp=-1;while(iterator.hasNext()){int[]cur=iterator.next();termArray[++p]=newStringBuilder(pre[1]+cur[1]).append(charArray,pre[0],pre[1]).append(charArray,cur[0],cur[1]).toString();pre=cur;}returntermArray;}}<EOF> "]
117705[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.tokenizers; "]
217706[label="packageName\n com.hankcs.hanlp.classification.tokenizers "]
317707[label="packageName\n com.hankcs.hanlp.classification "]
417708[label="packageName\n com.hankcs.hanlp "]
517709[label="packageName\n com.hankcs "]
617710[label="packageName\n com "]
117711[label="singleTypeImportDeclaration\n importjava.util.Iterator; "]
217712[label="typeName\n java.util.Iterator "]
317713[label="packageOrTypeName\n java.util "]
417714[label="packageOrTypeName\n java "]
117715[label="singleTypeImportDeclaration\n importjava.util.LinkedList; "]
217716[label="typeName\n java.util.LinkedList "]
317717[label="packageOrTypeName\n java.util "]
417718[label="packageOrTypeName\n java "]
117719[label="singleTypeImportDeclaration\n importjava.util.List; "]
217720[label="typeName\n java.util.List "]
317721[label="packageOrTypeName\n java.util "]
417722[label="packageOrTypeName\n java "]
117723[label="normalClassDeclaration\n publicclassBigramTokenizerimplementsITokenizer{publicString[]segment(Stringtext){if(text.length()==0)returnnewString[0];char[]charArray=text.toCharArray();CharTable.normalization(charArray);List<int[]>atomList=newLinkedList<int[]>();intstart=0;intend=charArray.length;intoffsetAtom=start;bytepreType=CharType.get(charArray[offsetAtom]);bytecurType;while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(preType==CharType.CT_CHINESE){atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;}elseif(curType!=preType){if(charArray[offsetAtom]=='.'&&preType==CharType.CT_NUM){while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(curType!=CharType.CT_NUM)break;}}if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;}preType=curType;}if(offsetAtom==end)if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start});if(atomList.isEmpty())returnnewString[0];String[]termArray=newString[atomList.size()-1];Iterator<int[]>iterator=atomList.iterator();int[]pre=iterator.next();intp=-1;while(iterator.hasNext()){int[]cur=iterator.next();termArray[++p]=newStringBuilder(pre[1]+cur[1]).append(charArray,pre[0],pre[1]).append(charArray,cur[0],cur[1]).toString();pre=cur;}returntermArray;}} "]
217724[label="classModifier\n public "]
217725[label="superinterfaces\n implementsITokenizer "]
317726[label="classType\n ITokenizer "]
217727[label="classBody\n {publicString[]segment(Stringtext){if(text.length()==0)returnnewString[0];char[]charArray=text.toCharArray();CharTable.normalization(charArray);List<int[]>atomList=newLinkedList<int[]>();intstart=0;intend=charArray.length;intoffsetAtom=start;bytepreType=CharType.get(charArray[offsetAtom]);bytecurType;while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(preType==CharType.CT_CHINESE){atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;}elseif(curType!=preType){if(charArray[offsetAtom]=='.'&&preType==CharType.CT_NUM){while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(curType!=CharType.CT_NUM)break;}}if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;}preType=curType;}if(offsetAtom==end)if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start});if(atomList.isEmpty())returnnewString[0];String[]termArray=newString[atomList.size()-1];Iterator<int[]>iterator=atomList.iterator();int[]pre=iterator.next();intp=-1;while(iterator.hasNext()){int[]cur=iterator.next();termArray[++p]=newStringBuilder(pre[1]+cur[1]).append(charArray,pre[0],pre[1]).append(charArray,cur[0],cur[1]).toString();pre=cur;}returntermArray;}} "]
317728[label="methodDeclaration\n publicString[]segment(Stringtext){if(text.length()==0)returnnewString[0];char[]charArray=text.toCharArray();CharTable.normalization(charArray);List<int[]>atomList=newLinkedList<int[]>();intstart=0;intend=charArray.length;intoffsetAtom=start;bytepreType=CharType.get(charArray[offsetAtom]);bytecurType;while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(preType==CharType.CT_CHINESE){atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;}elseif(curType!=preType){if(charArray[offsetAtom]=='.'&&preType==CharType.CT_NUM){while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(curType!=CharType.CT_NUM)break;}}if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;}preType=curType;}if(offsetAtom==end)if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start});if(atomList.isEmpty())returnnewString[0];String[]termArray=newString[atomList.size()-1];Iterator<int[]>iterator=atomList.iterator();int[]pre=iterator.next();intp=-1;while(iterator.hasNext()){int[]cur=iterator.next();termArray[++p]=newStringBuilder(pre[1]+cur[1]).append(charArray,pre[0],pre[1]).append(charArray,cur[0],cur[1]).toString();pre=cur;}returntermArray;} "]
417729[label="methodModifier\n public "]
417730[label="methodHeader\n String[]segment(Stringtext) "]
517731[label="unannArrayType\n String[] "]
617732[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
617733[label="dims\n [] "]
517734[label="methodDeclarator\n segment(Stringtext) "]
617735[label="formalParameter\n Stringtext "]
717736[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
717737[label="variableDeclaratorId\n text "]
417738[label="block\n {if(text.length()==0)returnnewString[0];char[]charArray=text.toCharArray();CharTable.normalization(charArray);List<int[]>atomList=newLinkedList<int[]>();intstart=0;intend=charArray.length;intoffsetAtom=start;bytepreType=CharType.get(charArray[offsetAtom]);bytecurType;while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(preType==CharType.CT_CHINESE){atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;}elseif(curType!=preType){if(charArray[offsetAtom]=='.'&&preType==CharType.CT_NUM){while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(curType!=CharType.CT_NUM)break;}}if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;}preType=curType;}if(offsetAtom==end)if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start});if(atomList.isEmpty())returnnewString[0];String[]termArray=newString[atomList.size()-1];Iterator<int[]>iterator=atomList.iterator();int[]pre=iterator.next();intp=-1;while(iterator.hasNext()){int[]cur=iterator.next();termArray[++p]=newStringBuilder(pre[1]+cur[1]).append(charArray,pre[0],pre[1]).append(charArray,cur[0],cur[1]).toString();pre=cur;}returntermArray;} "]
517739[label="blockStatements\n if(text.length()==0)returnnewString[0];char[]charArray=text.toCharArray();CharTable.normalization(charArray);List<int[]>atomList=newLinkedList<int[]>();intstart=0;intend=charArray.length;intoffsetAtom=start;bytepreType=CharType.get(charArray[offsetAtom]);bytecurType;while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(preType==CharType.CT_CHINESE){atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;}elseif(curType!=preType){if(charArray[offsetAtom]=='.'&&preType==CharType.CT_NUM){while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(curType!=CharType.CT_NUM)break;}}if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;}preType=curType;}if(offsetAtom==end)if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start});if(atomList.isEmpty())returnnewString[0];String[]termArray=newString[atomList.size()-1];Iterator<int[]>iterator=atomList.iterator();int[]pre=iterator.next();intp=-1;while(iterator.hasNext()){int[]cur=iterator.next();termArray[++p]=newStringBuilder(pre[1]+cur[1]).append(charArray,pre[0],pre[1]).append(charArray,cur[0],cur[1]).toString();pre=cur;}returntermArray; "]
617740[label="ifThenStatement\n if(text.length()==0)returnnewString[0]; "]
717741[label="equalityExpression\n text.length()==0 "]
817742[label="methodInvocation_lfno_primary\n text.length() "]
917743[label="typeName\n text "]
817744[label="literal\n 0 "]
717745[label="returnStatement\n returnnewString[0]; "]
817746[label="arrayCreationExpression\n newString[0] "]
917747[label="classType_lfno_classOrInterfaceType\n String "]
917748[label="dimExpr\n [0] "]
1017749[label="literal\n 0 "]
617750[label="localVariableDeclarationStatement\n char[]charArray=text.toCharArray(); "]
717751[label="localVariableDeclaration\n char[]charArray=text.toCharArray() "]
817752[label="unannArrayType\n char[] "]
917753[label="integralType\n char "]
917754[label="dims\n [] "]
817755[label="variableDeclarator\n charArray=text.toCharArray() "]
917756[label="variableDeclaratorId\n charArray "]
917757[label="methodInvocation_lfno_primary\n text.toCharArray() "]
1017758[label="typeName\n text "]
617759[label="expressionStatement\n CharTable.normalization(charArray); "]
717760[label="methodInvocation\n CharTable.normalization(charArray) "]
817761[label="typeName\n CharTable "]
817762[label="expressionName\n charArray "]
617763[label="localVariableDeclarationStatement\n List<int[]>atomList=newLinkedList<int[]>(); "]
717764[label="localVariableDeclaration\n List<int[]>atomList=newLinkedList<int[]>() "]
817765[label="unannClassType_lfno_unannClassOrInterfaceType\n List<int[]> "]
917766[label="typeArguments\n <int[]> "]
1017767[label="arrayType\n int[] "]
1117768[label="integralType\n int "]
1117769[label="dims\n [] "]
817770[label="variableDeclarator\n atomList=newLinkedList<int[]>() "]
917771[label="variableDeclaratorId\n atomList "]
917772[label="classInstanceCreationExpression_lfno_primary\n newLinkedList<int[]>() "]
1017773[label="typeArguments\n <int[]> "]
1117774[label="arrayType\n int[] "]
1217775[label="integralType\n int "]
1217776[label="dims\n [] "]
617777[label="localVariableDeclarationStatement\n intstart=0; "]
717778[label="localVariableDeclaration\n intstart=0 "]
817779[label="integralType\n int "]
817780[label="variableDeclarator\n start=0 "]
917781[label="variableDeclaratorId\n start "]
917782[label="literal\n 0 "]
617783[label="localVariableDeclarationStatement\n intend=charArray.length; "]
717784[label="localVariableDeclaration\n intend=charArray.length "]
817785[label="integralType\n int "]
817786[label="variableDeclarator\n end=charArray.length "]
917787[label="variableDeclaratorId\n end "]
917788[label="expressionName\n charArray.length "]
1017789[label="ambiguousName\n charArray "]
617790[label="localVariableDeclarationStatement\n intoffsetAtom=start; "]
717791[label="localVariableDeclaration\n intoffsetAtom=start "]
817792[label="integralType\n int "]
817793[label="variableDeclarator\n offsetAtom=start "]
917794[label="variableDeclaratorId\n offsetAtom "]
917795[label="expressionName\n start "]
617796[label="localVariableDeclarationStatement\n bytepreType=CharType.get(charArray[offsetAtom]); "]
717797[label="localVariableDeclaration\n bytepreType=CharType.get(charArray[offsetAtom]) "]
817798[label="integralType\n byte "]
817799[label="variableDeclarator\n preType=CharType.get(charArray[offsetAtom]) "]
917800[label="variableDeclaratorId\n preType "]
917801[label="methodInvocation_lfno_primary\n CharType.get(charArray[offsetAtom]) "]
1017802[label="typeName\n CharType "]
1017803[label="arrayAccess_lfno_primary\n charArray[offsetAtom] "]
1117804[label="expressionName\n charArray "]
1117805[label="expressionName\n offsetAtom "]
617806[label="localVariableDeclarationStatement\n bytecurType; "]
717807[label="localVariableDeclaration\n bytecurType "]
817808[label="integralType\n byte "]
817809[label="variableDeclaratorId\n curType "]
617810[label="whileStatement\n while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(preType==CharType.CT_CHINESE){atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;}elseif(curType!=preType){if(charArray[offsetAtom]=='.'&&preType==CharType.CT_NUM){while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(curType!=CharType.CT_NUM)break;}}if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;}preType=curType;} "]
717811[label="relationalExpression\n ++offsetAtom<end "]
817812[label="preIncrementExpression\n ++offsetAtom "]
917813[label="expressionName\n offsetAtom "]
817814[label="expressionName\n end "]
717815[label="block\n {curType=CharType.get(charArray[offsetAtom]);if(preType==CharType.CT_CHINESE){atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;}elseif(curType!=preType){if(charArray[offsetAtom]=='.'&&preType==CharType.CT_NUM){while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(curType!=CharType.CT_NUM)break;}}if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;}preType=curType;} "]
817816[label="blockStatements\n curType=CharType.get(charArray[offsetAtom]);if(preType==CharType.CT_CHINESE){atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;}elseif(curType!=preType){if(charArray[offsetAtom]=='.'&&preType==CharType.CT_NUM){while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(curType!=CharType.CT_NUM)break;}}if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;}preType=curType; "]
917817[label="expressionStatement\n curType=CharType.get(charArray[offsetAtom]); "]
1017818[label="assignment\n curType=CharType.get(charArray[offsetAtom]) "]
1117819[label="expressionName\n curType "]
1117820[label="assignmentOperator\n = "]
1117821[label="methodInvocation_lfno_primary\n CharType.get(charArray[offsetAtom]) "]
1217822[label="typeName\n CharType "]
1217823[label="arrayAccess_lfno_primary\n charArray[offsetAtom] "]
1317824[label="expressionName\n charArray "]
1317825[label="expressionName\n offsetAtom "]
917826[label="ifThenElseStatement\n if(preType==CharType.CT_CHINESE){atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;}elseif(curType!=preType){if(charArray[offsetAtom]=='.'&&preType==CharType.CT_NUM){while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(curType!=CharType.CT_NUM)break;}}if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;} "]
1017827[label="equalityExpression\n preType==CharType.CT_CHINESE "]
1117828[label="expressionName\n preType "]
1117829[label="expressionName\n CharType.CT_CHINESE "]
1217830[label="ambiguousName\n CharType "]
1017831[label="block\n {atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;} "]
1117832[label="blockStatements\n atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom; "]
1217833[label="expressionStatement\n atomList.add(newint[]{start,offsetAtom-start}); "]
1317834[label="methodInvocation\n atomList.add(newint[]{start,offsetAtom-start}) "]
1417835[label="typeName\n atomList "]
1417836[label="arrayCreationExpression\n newint[]{start,offsetAtom-start} "]
1517837[label="integralType\n int "]
1517838[label="dims\n [] "]
1517839[label="arrayInitializer\n {start,offsetAtom-start} "]
1617840[label="variableInitializerList\n start,offsetAtom-start "]
1717841[label="expressionName\n start "]
1717842[label="additiveExpression\n offsetAtom-start "]
1817843[label="expressionName\n offsetAtom "]
1817844[label="expressionName\n start "]
1217845[label="expressionStatement\n start=offsetAtom; "]
1317846[label="assignment\n start=offsetAtom "]
1417847[label="expressionName\n start "]
1417848[label="assignmentOperator\n = "]
1417849[label="expressionName\n offsetAtom "]
1017850[label="ifThenStatement\n if(curType!=preType){if(charArray[offsetAtom]=='.'&&preType==CharType.CT_NUM){while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(curType!=CharType.CT_NUM)break;}}if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;} "]
1117851[label="equalityExpression\n curType!=preType "]
1217852[label="expressionName\n curType "]
1217853[label="expressionName\n preType "]
1117854[label="block\n {if(charArray[offsetAtom]=='.'&&preType==CharType.CT_NUM){while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(curType!=CharType.CT_NUM)break;}}if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom;} "]
1217855[label="blockStatements\n if(charArray[offsetAtom]=='.'&&preType==CharType.CT_NUM){while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(curType!=CharType.CT_NUM)break;}}if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start});start=offsetAtom; "]
1317856[label="ifThenStatement\n if(charArray[offsetAtom]=='.'&&preType==CharType.CT_NUM){while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(curType!=CharType.CT_NUM)break;}} "]
1417857[label="conditionalAndExpression\n charArray[offsetAtom]=='.'&&preType==CharType.CT_NUM "]
1517858[label="equalityExpression\n charArray[offsetAtom]=='.' "]
1617859[label="arrayAccess_lfno_primary\n charArray[offsetAtom] "]
1717860[label="expressionName\n charArray "]
1717861[label="expressionName\n offsetAtom "]
1617862[label="literal\n '.' "]
1517863[label="equalityExpression\n preType==CharType.CT_NUM "]
1617864[label="expressionName\n preType "]
1617865[label="expressionName\n CharType.CT_NUM "]
1717866[label="ambiguousName\n CharType "]
1417867[label="block\n {while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(curType!=CharType.CT_NUM)break;}} "]
1517868[label="whileStatement\n while(++offsetAtom<end){curType=CharType.get(charArray[offsetAtom]);if(curType!=CharType.CT_NUM)break;} "]
1617869[label="relationalExpression\n ++offsetAtom<end "]
1717870[label="preIncrementExpression\n ++offsetAtom "]
1817871[label="expressionName\n offsetAtom "]
1717872[label="expressionName\n end "]
1617873[label="block\n {curType=CharType.get(charArray[offsetAtom]);if(curType!=CharType.CT_NUM)break;} "]
1717874[label="blockStatements\n curType=CharType.get(charArray[offsetAtom]);if(curType!=CharType.CT_NUM)break; "]
1817875[label="expressionStatement\n curType=CharType.get(charArray[offsetAtom]); "]
1917876[label="assignment\n curType=CharType.get(charArray[offsetAtom]) "]
2017877[label="expressionName\n curType "]
2017878[label="assignmentOperator\n = "]
2017879[label="methodInvocation_lfno_primary\n CharType.get(charArray[offsetAtom]) "]
2117880[label="typeName\n CharType "]
2117881[label="arrayAccess_lfno_primary\n charArray[offsetAtom] "]
2217882[label="expressionName\n charArray "]
2217883[label="expressionName\n offsetAtom "]
1817884[label="ifThenStatement\n if(curType!=CharType.CT_NUM)break; "]
1917885[label="equalityExpression\n curType!=CharType.CT_NUM "]
2017886[label="expressionName\n curType "]
2017887[label="expressionName\n CharType.CT_NUM "]
2117888[label="ambiguousName\n CharType "]
1917889[label="breakStatement\n break; "]
1317890[label="ifThenStatement\n if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start}); "]
1417891[label="conditionalOrExpression\n preType==CharType.CT_NUM||preType==CharType.CT_LETTER "]
1517892[label="equalityExpression\n preType==CharType.CT_NUM "]
1617893[label="expressionName\n preType "]
1617894[label="expressionName\n CharType.CT_NUM "]
1717895[label="ambiguousName\n CharType "]
1517896[label="equalityExpression\n preType==CharType.CT_LETTER "]
1617897[label="expressionName\n preType "]
1617898[label="expressionName\n CharType.CT_LETTER "]
1717899[label="ambiguousName\n CharType "]
1417900[label="expressionStatement\n atomList.add(newint[]{start,offsetAtom-start}); "]
1517901[label="methodInvocation\n atomList.add(newint[]{start,offsetAtom-start}) "]
1617902[label="typeName\n atomList "]
1617903[label="arrayCreationExpression\n newint[]{start,offsetAtom-start} "]
1717904[label="integralType\n int "]
1717905[label="dims\n [] "]
1717906[label="arrayInitializer\n {start,offsetAtom-start} "]
1817907[label="variableInitializerList\n start,offsetAtom-start "]
1917908[label="expressionName\n start "]
1917909[label="additiveExpression\n offsetAtom-start "]
2017910[label="expressionName\n offsetAtom "]
2017911[label="expressionName\n start "]
1317912[label="expressionStatement\n start=offsetAtom; "]
1417913[label="assignment\n start=offsetAtom "]
1517914[label="expressionName\n start "]
1517915[label="assignmentOperator\n = "]
1517916[label="expressionName\n offsetAtom "]
917917[label="expressionStatement\n preType=curType; "]
1017918[label="assignment\n preType=curType "]
1117919[label="expressionName\n preType "]
1117920[label="assignmentOperator\n = "]
1117921[label="expressionName\n curType "]
617922[label="ifThenStatement\n if(offsetAtom==end)if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start}); "]
717923[label="equalityExpression\n offsetAtom==end "]
817924[label="expressionName\n offsetAtom "]
817925[label="expressionName\n end "]
717926[label="ifThenStatement\n if(preType==CharType.CT_NUM||preType==CharType.CT_LETTER)atomList.add(newint[]{start,offsetAtom-start}); "]
817927[label="conditionalOrExpression\n preType==CharType.CT_NUM||preType==CharType.CT_LETTER "]
917928[label="equalityExpression\n preType==CharType.CT_NUM "]
1017929[label="expressionName\n preType "]
1017930[label="expressionName\n CharType.CT_NUM "]
1117931[label="ambiguousName\n CharType "]
917932[label="equalityExpression\n preType==CharType.CT_LETTER "]
1017933[label="expressionName\n preType "]
1017934[label="expressionName\n CharType.CT_LETTER "]
1117935[label="ambiguousName\n CharType "]
817936[label="expressionStatement\n atomList.add(newint[]{start,offsetAtom-start}); "]
917937[label="methodInvocation\n atomList.add(newint[]{start,offsetAtom-start}) "]
1017938[label="typeName\n atomList "]
1017939[label="arrayCreationExpression\n newint[]{start,offsetAtom-start} "]
1117940[label="integralType\n int "]
1117941[label="dims\n [] "]
1117942[label="arrayInitializer\n {start,offsetAtom-start} "]
1217943[label="variableInitializerList\n start,offsetAtom-start "]
1317944[label="expressionName\n start "]
1317945[label="additiveExpression\n offsetAtom-start "]
1417946[label="expressionName\n offsetAtom "]
1417947[label="expressionName\n start "]
617948[label="ifThenStatement\n if(atomList.isEmpty())returnnewString[0]; "]
717949[label="methodInvocation_lfno_primary\n atomList.isEmpty() "]
817950[label="typeName\n atomList "]
717951[label="returnStatement\n returnnewString[0]; "]
817952[label="arrayCreationExpression\n newString[0] "]
917953[label="classType_lfno_classOrInterfaceType\n String "]
917954[label="dimExpr\n [0] "]
1017955[label="literal\n 0 "]
617956[label="localVariableDeclarationStatement\n String[]termArray=newString[atomList.size()-1]; "]
717957[label="localVariableDeclaration\n String[]termArray=newString[atomList.size()-1] "]
817958[label="unannArrayType\n String[] "]
917959[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
917960[label="dims\n [] "]
817961[label="variableDeclarator\n termArray=newString[atomList.size()-1] "]
917962[label="variableDeclaratorId\n termArray "]
917963[label="arrayCreationExpression\n newString[atomList.size()-1] "]
1017964[label="classType_lfno_classOrInterfaceType\n String "]
1017965[label="dimExpr\n [atomList.size()-1] "]
1117966[label="additiveExpression\n atomList.size()-1 "]
1217967[label="methodInvocation_lfno_primary\n atomList.size() "]
1317968[label="typeName\n atomList "]
1217969[label="literal\n 1 "]
617970[label="localVariableDeclarationStatement\n Iterator<int[]>iterator=atomList.iterator(); "]
717971[label="localVariableDeclaration\n Iterator<int[]>iterator=atomList.iterator() "]
817972[label="unannClassType_lfno_unannClassOrInterfaceType\n Iterator<int[]> "]
917973[label="typeArguments\n <int[]> "]
1017974[label="arrayType\n int[] "]
1117975[label="integralType\n int "]
1117976[label="dims\n [] "]
817977[label="variableDeclarator\n iterator=atomList.iterator() "]
917978[label="variableDeclaratorId\n iterator "]
917979[label="methodInvocation_lfno_primary\n atomList.iterator() "]
1017980[label="typeName\n atomList "]
617981[label="localVariableDeclarationStatement\n int[]pre=iterator.next(); "]
717982[label="localVariableDeclaration\n int[]pre=iterator.next() "]
817983[label="unannArrayType\n int[] "]
917984[label="integralType\n int "]
917985[label="dims\n [] "]
817986[label="variableDeclarator\n pre=iterator.next() "]
917987[label="variableDeclaratorId\n pre "]
917988[label="methodInvocation_lfno_primary\n iterator.next() "]
1017989[label="typeName\n iterator "]
617990[label="localVariableDeclarationStatement\n intp=-1; "]
717991[label="localVariableDeclaration\n intp=-1 "]
817992[label="integralType\n int "]
817993[label="variableDeclarator\n p=-1 "]
917994[label="variableDeclaratorId\n p "]
917995[label="unaryExpression\n -1 "]
1017996[label="literal\n 1 "]
617997[label="whileStatement\n while(iterator.hasNext()){int[]cur=iterator.next();termArray[++p]=newStringBuilder(pre[1]+cur[1]).append(charArray,pre[0],pre[1]).append(charArray,cur[0],cur[1]).toString();pre=cur;} "]
717998[label="methodInvocation_lfno_primary\n iterator.hasNext() "]
817999[label="typeName\n iterator "]
718000[label="block\n {int[]cur=iterator.next();termArray[++p]=newStringBuilder(pre[1]+cur[1]).append(charArray,pre[0],pre[1]).append(charArray,cur[0],cur[1]).toString();pre=cur;} "]
818001[label="blockStatements\n int[]cur=iterator.next();termArray[++p]=newStringBuilder(pre[1]+cur[1]).append(charArray,pre[0],pre[1]).append(charArray,cur[0],cur[1]).toString();pre=cur; "]
918002[label="localVariableDeclarationStatement\n int[]cur=iterator.next(); "]
1018003[label="localVariableDeclaration\n int[]cur=iterator.next() "]
1118004[label="unannArrayType\n int[] "]
1218005[label="integralType\n int "]
1218006[label="dims\n [] "]
1118007[label="variableDeclarator\n cur=iterator.next() "]
1218008[label="variableDeclaratorId\n cur "]
1218009[label="methodInvocation_lfno_primary\n iterator.next() "]
1318010[label="typeName\n iterator "]
918011[label="expressionStatement\n termArray[++p]=newStringBuilder(pre[1]+cur[1]).append(charArray,pre[0],pre[1]).append(charArray,cur[0],cur[1]).toString(); "]
1018012[label="assignment\n termArray[++p]=newStringBuilder(pre[1]+cur[1]).append(charArray,pre[0],pre[1]).append(charArray,cur[0],cur[1]).toString() "]
1118013[label="arrayAccess\n termArray[++p] "]
1218014[label="expressionName\n termArray "]
1218015[label="preIncrementExpression\n ++p "]
1318016[label="expressionName\n p "]
1118017[label="assignmentOperator\n = "]
1118018[label="primary\n newStringBuilder(pre[1]+cur[1]).append(charArray,pre[0],pre[1]).append(charArray,cur[0],cur[1]).toString() "]
1218019[label="classInstanceCreationExpression_lfno_primary\n newStringBuilder(pre[1]+cur[1]) "]
1318020[label="additiveExpression\n pre[1]+cur[1] "]
1418021[label="arrayAccess_lfno_primary\n pre[1] "]
1518022[label="expressionName\n pre "]
1518023[label="literal\n 1 "]
1418024[label="arrayAccess_lfno_primary\n cur[1] "]
1518025[label="expressionName\n cur "]
1518026[label="literal\n 1 "]
1218027[label="methodInvocation_lf_primary\n .append(charArray,pre[0],pre[1]) "]
1318028[label="argumentList\n charArray,pre[0],pre[1] "]
1418029[label="expressionName\n charArray "]
1418030[label="arrayAccess_lfno_primary\n pre[0] "]
1518031[label="expressionName\n pre "]
1518032[label="literal\n 0 "]
1418033[label="arrayAccess_lfno_primary\n pre[1] "]
1518034[label="expressionName\n pre "]
1518035[label="literal\n 1 "]
1218036[label="methodInvocation_lf_primary\n .append(charArray,cur[0],cur[1]) "]
1318037[label="argumentList\n charArray,cur[0],cur[1] "]
1418038[label="expressionName\n charArray "]
1418039[label="arrayAccess_lfno_primary\n cur[0] "]
1518040[label="expressionName\n cur "]
1518041[label="literal\n 0 "]
1418042[label="arrayAccess_lfno_primary\n cur[1] "]
1518043[label="expressionName\n cur "]
1518044[label="literal\n 1 "]
1218045[label="methodInvocation_lf_primary\n .toString() "]
918046[label="expressionStatement\n pre=cur; "]
1018047[label="assignment\n pre=cur "]
1118048[label="expressionName\n pre "]
1118049[label="assignmentOperator\n = "]
1118050[label="expressionName\n cur "]
618051[label="returnStatement\n returntermArray; "]
718052[label="expressionName\n termArray "]
018053[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.bintrie;importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie;importcom.hankcs.hanlp.collection.trie.ITrie;importcom.hankcs.hanlp.corpus.io.ByteArray;importcom.hankcs.hanlp.corpus.io.IOUtil;importcom.hankcs.hanlp.utility.TextUtility;importjava.io.*;importjava.util.*;importstaticcom.hankcs.hanlp.utility.Predefine.logger;publicclassBinTrie<V>extendsBaseNode<V>implementsITrie<V>,Externalizable{privateintsize;publicBinTrie(){child=newBaseNode[65535+1];size=0;status=Status.NOT_WORD_1;}publicvoidput(Stringkey,Vvalue){if(key.length()==0)return;BaseNodebranch=this;char[]chars=key.toCharArray();for(inti=0;i<chars.length-1;++i){branch.addChild(newNode(chars[i],Status.NOT_WORD_1,null));branch=branch.getChild(chars[i]);}if(branch.addChild(newNode<V>(chars[chars.length-1],Status.WORD_END_3,value))){++size;}}publicvoidput(char[]key,Vvalue){BaseNodebranch=this;for(inti=0;i<key.length-1;++i){branch.addChild(newNode(key[i],Status.NOT_WORD_1,null));branch=branch.getChild(key[i]);}if(branch.addChild(newNode<V>(key[key.length-1],Status.WORD_END_3,value))){++size;}}publicvoidset(Stringkey,Vvalue){put(key.toCharArray(),value);}publicvoidremove(Stringkey){BaseNodebranch=this;char[]chars=key.toCharArray();for(inti=0;i<chars.length-1;++i){if(branch==null)return;branch=branch.getChild(chars[i]);}if(branch==null)return;if(branch.addChild(newNode(chars[chars.length-1],Status.UNDEFINED_0,value))){--size;}}publicbooleancontainsKey(Stringkey){BaseNodebranch=this;char[]chars=key.toCharArray();for(charaChar:chars){if(branch==null)returnfalse;branch=branch.getChild(aChar);}returnbranch!=null&&(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2);}publicVget(Stringkey){BaseNodebranch=this;char[]chars=key.toCharArray();for(charaChar:chars){if(branch==null)returnnull;branch=branch.getChild(aChar);}if(branch==null)returnnull;if(!(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2))returnnull;return(V)branch.getValue();}publicVget(char[]key){BaseNodebranch=this;for(charaChar:key){if(branch==null)returnnull;branch=branch.getChild(aChar);}if(branch==null)returnnull;if(!(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2))returnnull;return(V)branch.getValue();}@OverridepublicV[]getValueArray(V[]a){if(a.length<size)a=(V[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),size);inti=0;for(Map.Entry<String,V>entry:entrySet()){a[i++]=entry.getValue();}returna;}publicSet<Map.Entry<String,V>>entrySet(){Set<Map.Entry<String,V>>entrySet=newTreeSet<Map.Entry<String,V>>();StringBuildersb=newStringBuilder();for(BaseNodenode:child){if(node==null)continue;node.walk(newStringBuilder(sb.toString()),entrySet);}returnentrySet;}publicSet<String>keySet(){TreeSet<String>keySet=newTreeSet<String>();for(Map.Entry<String,V>entry:entrySet()){keySet.add(entry.getKey());}returnkeySet;}publicSet<Map.Entry<String,V>>prefixSearch(Stringkey){Set<Map.Entry<String,V>>entrySet=newTreeSet<Map.Entry<String,V>>();StringBuildersb=newStringBuilder(key.substring(0,key.length()-1));BaseNodebranch=this;char[]chars=key.toCharArray();for(charaChar:chars){if(branch==null)returnentrySet;branch=branch.getChild(aChar);}if(branch==null)returnentrySet;branch.walk(sb,entrySet);returnentrySet;}publicLinkedList<Map.Entry<String,V>>commonPrefixSearchWithValue(Stringkey){char[]chars=key.toCharArray();returncommonPrefixSearchWithValue(chars,0);}publicLinkedList<Map.Entry<String,V>>commonPrefixSearchWithValue(char[]chars,intbegin){LinkedList<Map.Entry<String,V>>result=newLinkedList<Map.Entry<String,V>>();StringBuildersb=newStringBuilder();BaseNodebranch=this;for(inti=begin;i<chars.length;++i){charaChar=chars[i];branch=branch.getChild(aChar);if(branch==null||branch.status==Status.UNDEFINED_0)returnresult;sb.append(aChar);if(branch.status==Status.WORD_MIDDLE_2||branch.status==Status.WORD_END_3){result.add(newAbstractMap.SimpleEntry<String,V>(sb.toString(),(V)branch.value));}}returnresult;}@OverrideprotectedbooleanaddChild(BaseNodenode){booleanadd=false;charc=node.getChar();BaseNodetarget=getChild(c);if(target==null){child[c]=node;add=true;}else{switch(node.status){caseUNDEFINED_0:if(target.status!=Status.NOT_WORD_1){target.status=Status.NOT_WORD_1;add=true;}break;caseNOT_WORD_1:if(target.status==Status.WORD_END_3){target.status=Status.WORD_MIDDLE_2;}break;caseWORD_END_3:if(target.status==Status.NOT_WORD_1){target.status=Status.WORD_MIDDLE_2;}if(target.getValue()==null){add=true;}target.setValue(node.getValue());break;}}returnadd;}publicintsize(){returnsize;}@OverrideprotectedchargetChar(){return0;}@OverridepublicBaseNodegetChild(charc){returnchild[c];}publicbooleansave(Stringpath){try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path));for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}out.close();}catch(Exceptione){logger.warning(\"保存到\"+path+\"失败\"+TextUtility.exceptionToString(e));returnfalse;}returntrue;}@Overridepublicintbuild(TreeMap<String,V>keyValueMap){for(Map.Entry<String,V>entry:keyValueMap.entrySet()){put(entry.getKey(),entry.getValue());}return0;}publicbooleansave(DataOutputStreamout){try{for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}}catch(Exceptione){logger.warning(\"保存到\"+out+\"失败\"+TextUtility.exceptionToString(e));returnfalse;}returntrue;}publicbooleanload(Stringpath,V[]value){byte[]bytes=IOUtil.readBytes(path);if(bytes==null)returnfalse;_ValueArrayvalueArray=new_ValueArray(value);ByteArraybyteArray=newByteArray(bytes);for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}size=value.length;returntrue;}publicbooleanload(Stringpath){byte[]bytes=IOUtil.readBytes(path);if(bytes==null)returnfalse;_ValueArrayvalueArray=new_EmptyValueArray();ByteArraybyteArray=newByteArray(bytes);for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}size=-1;returntrue;}publicbooleanload(ByteArraybyteArray,_ValueArrayvalueArray){for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}size=valueArray.value.length;returntrue;}publicbooleanload(ByteArraybyteArray,V[]value){returnload(byteArray,newValueArray().setValue(value));}public_ValueArraynewValueArray(){returnnew_ValueArray();}@OverridepublicvoidwriteExternal(ObjectOutputout)throwsIOException{out.writeInt(size);for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}}@OverridepublicvoidreadExternal(ObjectInputin)throwsIOException,ClassNotFoundException{size=in.readInt();for(inti=0;i<child.length;++i){intflag=in.readInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(in);}}}publicvoidparseLongestText(Stringtext,AhoCorasickDoubleArrayTrie.IHit<V>processor){intlength=text.length();for(inti=0;i<length;++i){BaseNode<V>state=transition(text.charAt(i));if(state!=null){intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text.charAt(to));if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}}}}publicvoidparseLongestText(char[]text,AhoCorasickDoubleArrayTrie.IHit<V>processor){intlength=text.length;for(inti=0;i<length;++i){BaseNode<V>state=transition(text[i]);if(state!=null){intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text[to]);if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}}}}publicvoidparseText(Stringtext,AhoCorasickDoubleArrayTrie.IHit<V>processor){intlength=text.length();intbegin=0;BaseNode<V>state=this;for(inti=begin;i<length;++i){state=state.transition(text.charAt(i));if(state!=null){Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}}else{i=begin;++begin;state=this;}}}publicvoidparseText(char[]text,AhoCorasickDoubleArrayTrie.IHit<V>processor){intlength=text.length;intbegin=0;BaseNode<V>state=this;for(inti=begin;i<length;++i){state=state.transition(text[i]);if(state!=null){Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}}else{i=begin;++begin;state=this;}}}}<EOF> "]
118054[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.bintrie; "]
218055[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie "]
318056[label="packageName\n com.hankcs.hanlp.collection.trie "]
418057[label="packageName\n com.hankcs.hanlp.collection "]
518058[label="packageName\n com.hankcs.hanlp "]
618059[label="packageName\n com.hankcs "]
718060[label="packageName\n com "]
118061[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie; "]
218062[label="typeName\n com.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie "]
318063[label="packageOrTypeName\n com.hankcs.hanlp.collection.AhoCorasick "]
418064[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
518065[label="packageOrTypeName\n com.hankcs.hanlp "]
618066[label="packageOrTypeName\n com.hankcs "]
718067[label="packageOrTypeName\n com "]
118068[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.ITrie; "]
218069[label="typeName\n com.hankcs.hanlp.collection.trie.ITrie "]
318070[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
418071[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
518072[label="packageOrTypeName\n com.hankcs.hanlp "]
618073[label="packageOrTypeName\n com.hankcs "]
718074[label="packageOrTypeName\n com "]
118075[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.ByteArray; "]
218076[label="typeName\n com.hankcs.hanlp.corpus.io.ByteArray "]
318077[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
418078[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
518079[label="packageOrTypeName\n com.hankcs.hanlp "]
618080[label="packageOrTypeName\n com.hankcs "]
718081[label="packageOrTypeName\n com "]
118082[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
218083[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
318084[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
418085[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
518086[label="packageOrTypeName\n com.hankcs.hanlp "]
618087[label="packageOrTypeName\n com.hankcs "]
718088[label="packageOrTypeName\n com "]
118089[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.TextUtility; "]
218090[label="typeName\n com.hankcs.hanlp.utility.TextUtility "]
318091[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
418092[label="packageOrTypeName\n com.hankcs.hanlp "]
518093[label="packageOrTypeName\n com.hankcs "]
618094[label="packageOrTypeName\n com "]
118095[label="typeImportOnDemandDeclaration\n importjava.io.*; "]
218096[label="packageOrTypeName\n java.io "]
318097[label="packageOrTypeName\n java "]
118098[label="typeImportOnDemandDeclaration\n importjava.util.*; "]
218099[label="packageOrTypeName\n java.util "]
318100[label="packageOrTypeName\n java "]
118101[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.utility.Predefine.logger; "]
218102[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
318103[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
418104[label="packageOrTypeName\n com.hankcs.hanlp "]
518105[label="packageOrTypeName\n com.hankcs "]
618106[label="packageOrTypeName\n com "]
118107[label="normalClassDeclaration\n publicclassBinTrie<V>extendsBaseNode<V>implementsITrie<V>,Externalizable{privateintsize;publicBinTrie(){child=newBaseNode[65535+1];size=0;status=Status.NOT_WORD_1;}publicvoidput(Stringkey,Vvalue){if(key.length()==0)return;BaseNodebranch=this;char[]chars=key.toCharArray();for(inti=0;i<chars.length-1;++i){branch.addChild(newNode(chars[i],Status.NOT_WORD_1,null));branch=branch.getChild(chars[i]);}if(branch.addChild(newNode<V>(chars[chars.length-1],Status.WORD_END_3,value))){++size;}}publicvoidput(char[]key,Vvalue){BaseNodebranch=this;for(inti=0;i<key.length-1;++i){branch.addChild(newNode(key[i],Status.NOT_WORD_1,null));branch=branch.getChild(key[i]);}if(branch.addChild(newNode<V>(key[key.length-1],Status.WORD_END_3,value))){++size;}}publicvoidset(Stringkey,Vvalue){put(key.toCharArray(),value);}publicvoidremove(Stringkey){BaseNodebranch=this;char[]chars=key.toCharArray();for(inti=0;i<chars.length-1;++i){if(branch==null)return;branch=branch.getChild(chars[i]);}if(branch==null)return;if(branch.addChild(newNode(chars[chars.length-1],Status.UNDEFINED_0,value))){--size;}}publicbooleancontainsKey(Stringkey){BaseNodebranch=this;char[]chars=key.toCharArray();for(charaChar:chars){if(branch==null)returnfalse;branch=branch.getChild(aChar);}returnbranch!=null&&(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2);}publicVget(Stringkey){BaseNodebranch=this;char[]chars=key.toCharArray();for(charaChar:chars){if(branch==null)returnnull;branch=branch.getChild(aChar);}if(branch==null)returnnull;if(!(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2))returnnull;return(V)branch.getValue();}publicVget(char[]key){BaseNodebranch=this;for(charaChar:key){if(branch==null)returnnull;branch=branch.getChild(aChar);}if(branch==null)returnnull;if(!(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2))returnnull;return(V)branch.getValue();}@OverridepublicV[]getValueArray(V[]a){if(a.length<size)a=(V[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),size);inti=0;for(Map.Entry<String,V>entry:entrySet()){a[i++]=entry.getValue();}returna;}publicSet<Map.Entry<String,V>>entrySet(){Set<Map.Entry<String,V>>entrySet=newTreeSet<Map.Entry<String,V>>();StringBuildersb=newStringBuilder();for(BaseNodenode:child){if(node==null)continue;node.walk(newStringBuilder(sb.toString()),entrySet);}returnentrySet;}publicSet<String>keySet(){TreeSet<String>keySet=newTreeSet<String>();for(Map.Entry<String,V>entry:entrySet()){keySet.add(entry.getKey());}returnkeySet;}publicSet<Map.Entry<String,V>>prefixSearch(Stringkey){Set<Map.Entry<String,V>>entrySet=newTreeSet<Map.Entry<String,V>>();StringBuildersb=newStringBuilder(key.substring(0,key.length()-1));BaseNodebranch=this;char[]chars=key.toCharArray();for(charaChar:chars){if(branch==null)returnentrySet;branch=branch.getChild(aChar);}if(branch==null)returnentrySet;branch.walk(sb,entrySet);returnentrySet;}publicLinkedList<Map.Entry<String,V>>commonPrefixSearchWithValue(Stringkey){char[]chars=key.toCharArray();returncommonPrefixSearchWithValue(chars,0);}publicLinkedList<Map.Entry<String,V>>commonPrefixSearchWithValue(char[]chars,intbegin){LinkedList<Map.Entry<String,V>>result=newLinkedList<Map.Entry<String,V>>();StringBuildersb=newStringBuilder();BaseNodebranch=this;for(inti=begin;i<chars.length;++i){charaChar=chars[i];branch=branch.getChild(aChar);if(branch==null||branch.status==Status.UNDEFINED_0)returnresult;sb.append(aChar);if(branch.status==Status.WORD_MIDDLE_2||branch.status==Status.WORD_END_3){result.add(newAbstractMap.SimpleEntry<String,V>(sb.toString(),(V)branch.value));}}returnresult;}@OverrideprotectedbooleanaddChild(BaseNodenode){booleanadd=false;charc=node.getChar();BaseNodetarget=getChild(c);if(target==null){child[c]=node;add=true;}else{switch(node.status){caseUNDEFINED_0:if(target.status!=Status.NOT_WORD_1){target.status=Status.NOT_WORD_1;add=true;}break;caseNOT_WORD_1:if(target.status==Status.WORD_END_3){target.status=Status.WORD_MIDDLE_2;}break;caseWORD_END_3:if(target.status==Status.NOT_WORD_1){target.status=Status.WORD_MIDDLE_2;}if(target.getValue()==null){add=true;}target.setValue(node.getValue());break;}}returnadd;}publicintsize(){returnsize;}@OverrideprotectedchargetChar(){return0;}@OverridepublicBaseNodegetChild(charc){returnchild[c];}publicbooleansave(Stringpath){try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path));for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}out.close();}catch(Exceptione){logger.warning(\"保存到\"+path+\"失败\"+TextUtility.exceptionToString(e));returnfalse;}returntrue;}@Overridepublicintbuild(TreeMap<String,V>keyValueMap){for(Map.Entry<String,V>entry:keyValueMap.entrySet()){put(entry.getKey(),entry.getValue());}return0;}publicbooleansave(DataOutputStreamout){try{for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}}catch(Exceptione){logger.warning(\"保存到\"+out+\"失败\"+TextUtility.exceptionToString(e));returnfalse;}returntrue;}publicbooleanload(Stringpath,V[]value){byte[]bytes=IOUtil.readBytes(path);if(bytes==null)returnfalse;_ValueArrayvalueArray=new_ValueArray(value);ByteArraybyteArray=newByteArray(bytes);for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}size=value.length;returntrue;}publicbooleanload(Stringpath){byte[]bytes=IOUtil.readBytes(path);if(bytes==null)returnfalse;_ValueArrayvalueArray=new_EmptyValueArray();ByteArraybyteArray=newByteArray(bytes);for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}size=-1;returntrue;}publicbooleanload(ByteArraybyteArray,_ValueArrayvalueArray){for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}size=valueArray.value.length;returntrue;}publicbooleanload(ByteArraybyteArray,V[]value){returnload(byteArray,newValueArray().setValue(value));}public_ValueArraynewValueArray(){returnnew_ValueArray();}@OverridepublicvoidwriteExternal(ObjectOutputout)throwsIOException{out.writeInt(size);for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}}@OverridepublicvoidreadExternal(ObjectInputin)throwsIOException,ClassNotFoundException{size=in.readInt();for(inti=0;i<child.length;++i){intflag=in.readInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(in);}}}publicvoidparseLongestText(Stringtext,AhoCorasickDoubleArrayTrie.IHit<V>processor){intlength=text.length();for(inti=0;i<length;++i){BaseNode<V>state=transition(text.charAt(i));if(state!=null){intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text.charAt(to));if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}}}}publicvoidparseLongestText(char[]text,AhoCorasickDoubleArrayTrie.IHit<V>processor){intlength=text.length;for(inti=0;i<length;++i){BaseNode<V>state=transition(text[i]);if(state!=null){intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text[to]);if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}}}}publicvoidparseText(Stringtext,AhoCorasickDoubleArrayTrie.IHit<V>processor){intlength=text.length();intbegin=0;BaseNode<V>state=this;for(inti=begin;i<length;++i){state=state.transition(text.charAt(i));if(state!=null){Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}}else{i=begin;++begin;state=this;}}}publicvoidparseText(char[]text,AhoCorasickDoubleArrayTrie.IHit<V>processor){intlength=text.length;intbegin=0;BaseNode<V>state=this;for(inti=begin;i<length;++i){state=state.transition(text[i]);if(state!=null){Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}}else{i=begin;++begin;state=this;}}}} "]
218108[label="classModifier\n public "]
218109[label="typeParameters\n <V> "]
318110[label="typeParameter\n V "]
218111[label="superclass\n extendsBaseNode<V> "]
318112[label="classType\n BaseNode<V> "]
418113[label="typeArguments\n <V> "]
518114[label="classType_lfno_classOrInterfaceType\n V "]
218115[label="superinterfaces\n implementsITrie<V>,Externalizable "]
318116[label="interfaceTypeList\n ITrie<V>,Externalizable "]
418117[label="classType\n ITrie<V> "]
518118[label="typeArguments\n <V> "]
618119[label="classType_lfno_classOrInterfaceType\n V "]
418120[label="classType\n Externalizable "]
218121[label="classBody\n {privateintsize;publicBinTrie(){child=newBaseNode[65535+1];size=0;status=Status.NOT_WORD_1;}publicvoidput(Stringkey,Vvalue){if(key.length()==0)return;BaseNodebranch=this;char[]chars=key.toCharArray();for(inti=0;i<chars.length-1;++i){branch.addChild(newNode(chars[i],Status.NOT_WORD_1,null));branch=branch.getChild(chars[i]);}if(branch.addChild(newNode<V>(chars[chars.length-1],Status.WORD_END_3,value))){++size;}}publicvoidput(char[]key,Vvalue){BaseNodebranch=this;for(inti=0;i<key.length-1;++i){branch.addChild(newNode(key[i],Status.NOT_WORD_1,null));branch=branch.getChild(key[i]);}if(branch.addChild(newNode<V>(key[key.length-1],Status.WORD_END_3,value))){++size;}}publicvoidset(Stringkey,Vvalue){put(key.toCharArray(),value);}publicvoidremove(Stringkey){BaseNodebranch=this;char[]chars=key.toCharArray();for(inti=0;i<chars.length-1;++i){if(branch==null)return;branch=branch.getChild(chars[i]);}if(branch==null)return;if(branch.addChild(newNode(chars[chars.length-1],Status.UNDEFINED_0,value))){--size;}}publicbooleancontainsKey(Stringkey){BaseNodebranch=this;char[]chars=key.toCharArray();for(charaChar:chars){if(branch==null)returnfalse;branch=branch.getChild(aChar);}returnbranch!=null&&(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2);}publicVget(Stringkey){BaseNodebranch=this;char[]chars=key.toCharArray();for(charaChar:chars){if(branch==null)returnnull;branch=branch.getChild(aChar);}if(branch==null)returnnull;if(!(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2))returnnull;return(V)branch.getValue();}publicVget(char[]key){BaseNodebranch=this;for(charaChar:key){if(branch==null)returnnull;branch=branch.getChild(aChar);}if(branch==null)returnnull;if(!(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2))returnnull;return(V)branch.getValue();}@OverridepublicV[]getValueArray(V[]a){if(a.length<size)a=(V[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),size);inti=0;for(Map.Entry<String,V>entry:entrySet()){a[i++]=entry.getValue();}returna;}publicSet<Map.Entry<String,V>>entrySet(){Set<Map.Entry<String,V>>entrySet=newTreeSet<Map.Entry<String,V>>();StringBuildersb=newStringBuilder();for(BaseNodenode:child){if(node==null)continue;node.walk(newStringBuilder(sb.toString()),entrySet);}returnentrySet;}publicSet<String>keySet(){TreeSet<String>keySet=newTreeSet<String>();for(Map.Entry<String,V>entry:entrySet()){keySet.add(entry.getKey());}returnkeySet;}publicSet<Map.Entry<String,V>>prefixSearch(Stringkey){Set<Map.Entry<String,V>>entrySet=newTreeSet<Map.Entry<String,V>>();StringBuildersb=newStringBuilder(key.substring(0,key.length()-1));BaseNodebranch=this;char[]chars=key.toCharArray();for(charaChar:chars){if(branch==null)returnentrySet;branch=branch.getChild(aChar);}if(branch==null)returnentrySet;branch.walk(sb,entrySet);returnentrySet;}publicLinkedList<Map.Entry<String,V>>commonPrefixSearchWithValue(Stringkey){char[]chars=key.toCharArray();returncommonPrefixSearchWithValue(chars,0);}publicLinkedList<Map.Entry<String,V>>commonPrefixSearchWithValue(char[]chars,intbegin){LinkedList<Map.Entry<String,V>>result=newLinkedList<Map.Entry<String,V>>();StringBuildersb=newStringBuilder();BaseNodebranch=this;for(inti=begin;i<chars.length;++i){charaChar=chars[i];branch=branch.getChild(aChar);if(branch==null||branch.status==Status.UNDEFINED_0)returnresult;sb.append(aChar);if(branch.status==Status.WORD_MIDDLE_2||branch.status==Status.WORD_END_3){result.add(newAbstractMap.SimpleEntry<String,V>(sb.toString(),(V)branch.value));}}returnresult;}@OverrideprotectedbooleanaddChild(BaseNodenode){booleanadd=false;charc=node.getChar();BaseNodetarget=getChild(c);if(target==null){child[c]=node;add=true;}else{switch(node.status){caseUNDEFINED_0:if(target.status!=Status.NOT_WORD_1){target.status=Status.NOT_WORD_1;add=true;}break;caseNOT_WORD_1:if(target.status==Status.WORD_END_3){target.status=Status.WORD_MIDDLE_2;}break;caseWORD_END_3:if(target.status==Status.NOT_WORD_1){target.status=Status.WORD_MIDDLE_2;}if(target.getValue()==null){add=true;}target.setValue(node.getValue());break;}}returnadd;}publicintsize(){returnsize;}@OverrideprotectedchargetChar(){return0;}@OverridepublicBaseNodegetChild(charc){returnchild[c];}publicbooleansave(Stringpath){try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path));for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}out.close();}catch(Exceptione){logger.warning(\"保存到\"+path+\"失败\"+TextUtility.exceptionToString(e));returnfalse;}returntrue;}@Overridepublicintbuild(TreeMap<String,V>keyValueMap){for(Map.Entry<String,V>entry:keyValueMap.entrySet()){put(entry.getKey(),entry.getValue());}return0;}publicbooleansave(DataOutputStreamout){try{for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}}catch(Exceptione){logger.warning(\"保存到\"+out+\"失败\"+TextUtility.exceptionToString(e));returnfalse;}returntrue;}publicbooleanload(Stringpath,V[]value){byte[]bytes=IOUtil.readBytes(path);if(bytes==null)returnfalse;_ValueArrayvalueArray=new_ValueArray(value);ByteArraybyteArray=newByteArray(bytes);for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}size=value.length;returntrue;}publicbooleanload(Stringpath){byte[]bytes=IOUtil.readBytes(path);if(bytes==null)returnfalse;_ValueArrayvalueArray=new_EmptyValueArray();ByteArraybyteArray=newByteArray(bytes);for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}size=-1;returntrue;}publicbooleanload(ByteArraybyteArray,_ValueArrayvalueArray){for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}size=valueArray.value.length;returntrue;}publicbooleanload(ByteArraybyteArray,V[]value){returnload(byteArray,newValueArray().setValue(value));}public_ValueArraynewValueArray(){returnnew_ValueArray();}@OverridepublicvoidwriteExternal(ObjectOutputout)throwsIOException{out.writeInt(size);for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}}@OverridepublicvoidreadExternal(ObjectInputin)throwsIOException,ClassNotFoundException{size=in.readInt();for(inti=0;i<child.length;++i){intflag=in.readInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(in);}}}publicvoidparseLongestText(Stringtext,AhoCorasickDoubleArrayTrie.IHit<V>processor){intlength=text.length();for(inti=0;i<length;++i){BaseNode<V>state=transition(text.charAt(i));if(state!=null){intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text.charAt(to));if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}}}}publicvoidparseLongestText(char[]text,AhoCorasickDoubleArrayTrie.IHit<V>processor){intlength=text.length;for(inti=0;i<length;++i){BaseNode<V>state=transition(text[i]);if(state!=null){intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text[to]);if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}}}}publicvoidparseText(Stringtext,AhoCorasickDoubleArrayTrie.IHit<V>processor){intlength=text.length();intbegin=0;BaseNode<V>state=this;for(inti=begin;i<length;++i){state=state.transition(text.charAt(i));if(state!=null){Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}}else{i=begin;++begin;state=this;}}}publicvoidparseText(char[]text,AhoCorasickDoubleArrayTrie.IHit<V>processor){intlength=text.length;intbegin=0;BaseNode<V>state=this;for(inti=begin;i<length;++i){state=state.transition(text[i]);if(state!=null){Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}}else{i=begin;++begin;state=this;}}}} "]
318122[label="fieldDeclaration\n privateintsize; "]
418123[label="fieldModifier\n private "]
418124[label="integralType\n int "]
418125[label="variableDeclaratorId\n size "]
318126[label="constructorDeclaration\n publicBinTrie(){child=newBaseNode[65535+1];size=0;status=Status.NOT_WORD_1;} "]
418127[label="constructorModifier\n public "]
418128[label="constructorDeclarator\n BinTrie() "]
518129[label="simpleTypeName\n BinTrie "]
418130[label="constructorBody\n {child=newBaseNode[65535+1];size=0;status=Status.NOT_WORD_1;} "]
518131[label="blockStatements\n child=newBaseNode[65535+1];size=0;status=Status.NOT_WORD_1; "]
618132[label="expressionStatement\n child=newBaseNode[65535+1]; "]
718133[label="assignment\n child=newBaseNode[65535+1] "]
818134[label="expressionName\n child "]
818135[label="assignmentOperator\n = "]
818136[label="arrayCreationExpression\n newBaseNode[65535+1] "]
918137[label="classType_lfno_classOrInterfaceType\n BaseNode "]
918138[label="dimExpr\n [65535+1] "]
1018139[label="additiveExpression\n 65535+1 "]
1118140[label="literal\n 65535 "]
1118141[label="literal\n 1 "]
618142[label="expressionStatement\n size=0; "]
718143[label="assignment\n size=0 "]
818144[label="expressionName\n size "]
818145[label="assignmentOperator\n = "]
818146[label="literal\n 0 "]
618147[label="expressionStatement\n status=Status.NOT_WORD_1; "]
718148[label="assignment\n status=Status.NOT_WORD_1 "]
818149[label="expressionName\n status "]
818150[label="assignmentOperator\n = "]
818151[label="expressionName\n Status.NOT_WORD_1 "]
918152[label="ambiguousName\n Status "]
318153[label="methodDeclaration\n publicvoidput(Stringkey,Vvalue){if(key.length()==0)return;BaseNodebranch=this;char[]chars=key.toCharArray();for(inti=0;i<chars.length-1;++i){branch.addChild(newNode(chars[i],Status.NOT_WORD_1,null));branch=branch.getChild(chars[i]);}if(branch.addChild(newNode<V>(chars[chars.length-1],Status.WORD_END_3,value))){++size;}} "]
418154[label="methodModifier\n public "]
418155[label="methodHeader\n voidput(Stringkey,Vvalue) "]
518156[label="result\n void "]
518157[label="methodDeclarator\n put(Stringkey,Vvalue) "]
618158[label="formalParameterList\n Stringkey,Vvalue "]
718159[label="formalParameter\n Stringkey "]
818160[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
818161[label="variableDeclaratorId\n key "]
718162[label="formalParameter\n Vvalue "]
818163[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
818164[label="variableDeclaratorId\n value "]
418165[label="block\n {if(key.length()==0)return;BaseNodebranch=this;char[]chars=key.toCharArray();for(inti=0;i<chars.length-1;++i){branch.addChild(newNode(chars[i],Status.NOT_WORD_1,null));branch=branch.getChild(chars[i]);}if(branch.addChild(newNode<V>(chars[chars.length-1],Status.WORD_END_3,value))){++size;}} "]
518166[label="blockStatements\n if(key.length()==0)return;BaseNodebranch=this;char[]chars=key.toCharArray();for(inti=0;i<chars.length-1;++i){branch.addChild(newNode(chars[i],Status.NOT_WORD_1,null));branch=branch.getChild(chars[i]);}if(branch.addChild(newNode<V>(chars[chars.length-1],Status.WORD_END_3,value))){++size;} "]
618167[label="ifThenStatement\n if(key.length()==0)return; "]
718168[label="equalityExpression\n key.length()==0 "]
818169[label="methodInvocation_lfno_primary\n key.length() "]
918170[label="typeName\n key "]
818171[label="literal\n 0 "]
718172[label="returnStatement\n return; "]
618173[label="localVariableDeclarationStatement\n BaseNodebranch=this; "]
718174[label="localVariableDeclaration\n BaseNodebranch=this "]
818175[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
818176[label="variableDeclarator\n branch=this "]
918177[label="variableDeclaratorId\n branch "]
918178[label="primaryNoNewArray_lfno_primary\n this "]
618179[label="localVariableDeclarationStatement\n char[]chars=key.toCharArray(); "]
718180[label="localVariableDeclaration\n char[]chars=key.toCharArray() "]
818181[label="unannArrayType\n char[] "]
918182[label="integralType\n char "]
918183[label="dims\n [] "]
818184[label="variableDeclarator\n chars=key.toCharArray() "]
918185[label="variableDeclaratorId\n chars "]
918186[label="methodInvocation_lfno_primary\n key.toCharArray() "]
1018187[label="typeName\n key "]
618188[label="basicForStatement\n for(inti=0;i<chars.length-1;++i){branch.addChild(newNode(chars[i],Status.NOT_WORD_1,null));branch=branch.getChild(chars[i]);} "]
718189[label="localVariableDeclaration\n inti=0 "]
818190[label="integralType\n int "]
818191[label="variableDeclarator\n i=0 "]
918192[label="variableDeclaratorId\n i "]
918193[label="literal\n 0 "]
718194[label="relationalExpression\n i<chars.length-1 "]
818195[label="expressionName\n i "]
818196[label="additiveExpression\n chars.length-1 "]
918197[label="expressionName\n chars.length "]
1018198[label="ambiguousName\n chars "]
918199[label="literal\n 1 "]
718200[label="preIncrementExpression\n ++i "]
818201[label="expressionName\n i "]
718202[label="block\n {branch.addChild(newNode(chars[i],Status.NOT_WORD_1,null));branch=branch.getChild(chars[i]);} "]
818203[label="blockStatements\n branch.addChild(newNode(chars[i],Status.NOT_WORD_1,null));branch=branch.getChild(chars[i]); "]
918204[label="expressionStatement\n branch.addChild(newNode(chars[i],Status.NOT_WORD_1,null)); "]
1018205[label="methodInvocation\n branch.addChild(newNode(chars[i],Status.NOT_WORD_1,null)) "]
1118206[label="typeName\n branch "]
1118207[label="classInstanceCreationExpression_lfno_primary\n newNode(chars[i],Status.NOT_WORD_1,null) "]
1218208[label="argumentList\n chars[i],Status.NOT_WORD_1,null "]
1318209[label="arrayAccess_lfno_primary\n chars[i] "]
1418210[label="expressionName\n chars "]
1418211[label="expressionName\n i "]
1318212[label="expressionName\n Status.NOT_WORD_1 "]
1418213[label="ambiguousName\n Status "]
1318214[label="literal\n null "]
918215[label="expressionStatement\n branch=branch.getChild(chars[i]); "]
1018216[label="assignment\n branch=branch.getChild(chars[i]) "]
1118217[label="expressionName\n branch "]
1118218[label="assignmentOperator\n = "]
1118219[label="methodInvocation_lfno_primary\n branch.getChild(chars[i]) "]
1218220[label="typeName\n branch "]
1218221[label="arrayAccess_lfno_primary\n chars[i] "]
1318222[label="expressionName\n chars "]
1318223[label="expressionName\n i "]
618224[label="ifThenStatement\n if(branch.addChild(newNode<V>(chars[chars.length-1],Status.WORD_END_3,value))){++size;} "]
718225[label="methodInvocation_lfno_primary\n branch.addChild(newNode<V>(chars[chars.length-1],Status.WORD_END_3,value)) "]
818226[label="typeName\n branch "]
818227[label="classInstanceCreationExpression_lfno_primary\n newNode<V>(chars[chars.length-1],Status.WORD_END_3,value) "]
918228[label="typeArguments\n <V> "]
1018229[label="classType_lfno_classOrInterfaceType\n V "]
918230[label="argumentList\n chars[chars.length-1],Status.WORD_END_3,value "]
1018231[label="arrayAccess_lfno_primary\n chars[chars.length-1] "]
1118232[label="expressionName\n chars "]
1118233[label="additiveExpression\n chars.length-1 "]
1218234[label="expressionName\n chars.length "]
1318235[label="ambiguousName\n chars "]
1218236[label="literal\n 1 "]
1018237[label="expressionName\n Status.WORD_END_3 "]
1118238[label="ambiguousName\n Status "]
1018239[label="expressionName\n value "]
718240[label="block\n {++size;} "]
818241[label="expressionStatement\n ++size; "]
918242[label="preIncrementExpression\n ++size "]
1018243[label="expressionName\n size "]
318244[label="methodDeclaration\n publicvoidput(char[]key,Vvalue){BaseNodebranch=this;for(inti=0;i<key.length-1;++i){branch.addChild(newNode(key[i],Status.NOT_WORD_1,null));branch=branch.getChild(key[i]);}if(branch.addChild(newNode<V>(key[key.length-1],Status.WORD_END_3,value))){++size;}} "]
418245[label="methodModifier\n public "]
418246[label="methodHeader\n voidput(char[]key,Vvalue) "]
518247[label="result\n void "]
518248[label="methodDeclarator\n put(char[]key,Vvalue) "]
618249[label="formalParameterList\n char[]key,Vvalue "]
718250[label="formalParameter\n char[]key "]
818251[label="unannArrayType\n char[] "]
918252[label="integralType\n char "]
918253[label="dims\n [] "]
818254[label="variableDeclaratorId\n key "]
718255[label="formalParameter\n Vvalue "]
818256[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
818257[label="variableDeclaratorId\n value "]
418258[label="block\n {BaseNodebranch=this;for(inti=0;i<key.length-1;++i){branch.addChild(newNode(key[i],Status.NOT_WORD_1,null));branch=branch.getChild(key[i]);}if(branch.addChild(newNode<V>(key[key.length-1],Status.WORD_END_3,value))){++size;}} "]
518259[label="blockStatements\n BaseNodebranch=this;for(inti=0;i<key.length-1;++i){branch.addChild(newNode(key[i],Status.NOT_WORD_1,null));branch=branch.getChild(key[i]);}if(branch.addChild(newNode<V>(key[key.length-1],Status.WORD_END_3,value))){++size;} "]
618260[label="localVariableDeclarationStatement\n BaseNodebranch=this; "]
718261[label="localVariableDeclaration\n BaseNodebranch=this "]
818262[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
818263[label="variableDeclarator\n branch=this "]
918264[label="variableDeclaratorId\n branch "]
918265[label="primaryNoNewArray_lfno_primary\n this "]
618266[label="basicForStatement\n for(inti=0;i<key.length-1;++i){branch.addChild(newNode(key[i],Status.NOT_WORD_1,null));branch=branch.getChild(key[i]);} "]
718267[label="localVariableDeclaration\n inti=0 "]
818268[label="integralType\n int "]
818269[label="variableDeclarator\n i=0 "]
918270[label="variableDeclaratorId\n i "]
918271[label="literal\n 0 "]
718272[label="relationalExpression\n i<key.length-1 "]
818273[label="expressionName\n i "]
818274[label="additiveExpression\n key.length-1 "]
918275[label="expressionName\n key.length "]
1018276[label="ambiguousName\n key "]
918277[label="literal\n 1 "]
718278[label="preIncrementExpression\n ++i "]
818279[label="expressionName\n i "]
718280[label="block\n {branch.addChild(newNode(key[i],Status.NOT_WORD_1,null));branch=branch.getChild(key[i]);} "]
818281[label="blockStatements\n branch.addChild(newNode(key[i],Status.NOT_WORD_1,null));branch=branch.getChild(key[i]); "]
918282[label="expressionStatement\n branch.addChild(newNode(key[i],Status.NOT_WORD_1,null)); "]
1018283[label="methodInvocation\n branch.addChild(newNode(key[i],Status.NOT_WORD_1,null)) "]
1118284[label="typeName\n branch "]
1118285[label="classInstanceCreationExpression_lfno_primary\n newNode(key[i],Status.NOT_WORD_1,null) "]
1218286[label="argumentList\n key[i],Status.NOT_WORD_1,null "]
1318287[label="arrayAccess_lfno_primary\n key[i] "]
1418288[label="expressionName\n key "]
1418289[label="expressionName\n i "]
1318290[label="expressionName\n Status.NOT_WORD_1 "]
1418291[label="ambiguousName\n Status "]
1318292[label="literal\n null "]
918293[label="expressionStatement\n branch=branch.getChild(key[i]); "]
1018294[label="assignment\n branch=branch.getChild(key[i]) "]
1118295[label="expressionName\n branch "]
1118296[label="assignmentOperator\n = "]
1118297[label="methodInvocation_lfno_primary\n branch.getChild(key[i]) "]
1218298[label="typeName\n branch "]
1218299[label="arrayAccess_lfno_primary\n key[i] "]
1318300[label="expressionName\n key "]
1318301[label="expressionName\n i "]
618302[label="ifThenStatement\n if(branch.addChild(newNode<V>(key[key.length-1],Status.WORD_END_3,value))){++size;} "]
718303[label="methodInvocation_lfno_primary\n branch.addChild(newNode<V>(key[key.length-1],Status.WORD_END_3,value)) "]
818304[label="typeName\n branch "]
818305[label="classInstanceCreationExpression_lfno_primary\n newNode<V>(key[key.length-1],Status.WORD_END_3,value) "]
918306[label="typeArguments\n <V> "]
1018307[label="classType_lfno_classOrInterfaceType\n V "]
918308[label="argumentList\n key[key.length-1],Status.WORD_END_3,value "]
1018309[label="arrayAccess_lfno_primary\n key[key.length-1] "]
1118310[label="expressionName\n key "]
1118311[label="additiveExpression\n key.length-1 "]
1218312[label="expressionName\n key.length "]
1318313[label="ambiguousName\n key "]
1218314[label="literal\n 1 "]
1018315[label="expressionName\n Status.WORD_END_3 "]
1118316[label="ambiguousName\n Status "]
1018317[label="expressionName\n value "]
718318[label="block\n {++size;} "]
818319[label="expressionStatement\n ++size; "]
918320[label="preIncrementExpression\n ++size "]
1018321[label="expressionName\n size "]
318322[label="methodDeclaration\n publicvoidset(Stringkey,Vvalue){put(key.toCharArray(),value);} "]
418323[label="methodModifier\n public "]
418324[label="methodHeader\n voidset(Stringkey,Vvalue) "]
518325[label="result\n void "]
518326[label="methodDeclarator\n set(Stringkey,Vvalue) "]
618327[label="formalParameterList\n Stringkey,Vvalue "]
718328[label="formalParameter\n Stringkey "]
818329[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
818330[label="variableDeclaratorId\n key "]
718331[label="formalParameter\n Vvalue "]
818332[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
818333[label="variableDeclaratorId\n value "]
418334[label="block\n {put(key.toCharArray(),value);} "]
518335[label="expressionStatement\n put(key.toCharArray(),value); "]
618336[label="methodInvocation\n put(key.toCharArray(),value) "]
718337[label="methodName\n put "]
718338[label="argumentList\n key.toCharArray(),value "]
818339[label="methodInvocation_lfno_primary\n key.toCharArray() "]
918340[label="typeName\n key "]
818341[label="expressionName\n value "]
318342[label="methodDeclaration\n publicvoidremove(Stringkey){BaseNodebranch=this;char[]chars=key.toCharArray();for(inti=0;i<chars.length-1;++i){if(branch==null)return;branch=branch.getChild(chars[i]);}if(branch==null)return;if(branch.addChild(newNode(chars[chars.length-1],Status.UNDEFINED_0,value))){--size;}} "]
418343[label="methodModifier\n public "]
418344[label="methodHeader\n voidremove(Stringkey) "]
518345[label="result\n void "]
518346[label="methodDeclarator\n remove(Stringkey) "]
618347[label="formalParameter\n Stringkey "]
718348[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
718349[label="variableDeclaratorId\n key "]
418350[label="block\n {BaseNodebranch=this;char[]chars=key.toCharArray();for(inti=0;i<chars.length-1;++i){if(branch==null)return;branch=branch.getChild(chars[i]);}if(branch==null)return;if(branch.addChild(newNode(chars[chars.length-1],Status.UNDEFINED_0,value))){--size;}} "]
518351[label="blockStatements\n BaseNodebranch=this;char[]chars=key.toCharArray();for(inti=0;i<chars.length-1;++i){if(branch==null)return;branch=branch.getChild(chars[i]);}if(branch==null)return;if(branch.addChild(newNode(chars[chars.length-1],Status.UNDEFINED_0,value))){--size;} "]
618352[label="localVariableDeclarationStatement\n BaseNodebranch=this; "]
718353[label="localVariableDeclaration\n BaseNodebranch=this "]
818354[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
818355[label="variableDeclarator\n branch=this "]
918356[label="variableDeclaratorId\n branch "]
918357[label="primaryNoNewArray_lfno_primary\n this "]
618358[label="localVariableDeclarationStatement\n char[]chars=key.toCharArray(); "]
718359[label="localVariableDeclaration\n char[]chars=key.toCharArray() "]
818360[label="unannArrayType\n char[] "]
918361[label="integralType\n char "]
918362[label="dims\n [] "]
818363[label="variableDeclarator\n chars=key.toCharArray() "]
918364[label="variableDeclaratorId\n chars "]
918365[label="methodInvocation_lfno_primary\n key.toCharArray() "]
1018366[label="typeName\n key "]
618367[label="basicForStatement\n for(inti=0;i<chars.length-1;++i){if(branch==null)return;branch=branch.getChild(chars[i]);} "]
718368[label="localVariableDeclaration\n inti=0 "]
818369[label="integralType\n int "]
818370[label="variableDeclarator\n i=0 "]
918371[label="variableDeclaratorId\n i "]
918372[label="literal\n 0 "]
718373[label="relationalExpression\n i<chars.length-1 "]
818374[label="expressionName\n i "]
818375[label="additiveExpression\n chars.length-1 "]
918376[label="expressionName\n chars.length "]
1018377[label="ambiguousName\n chars "]
918378[label="literal\n 1 "]
718379[label="preIncrementExpression\n ++i "]
818380[label="expressionName\n i "]
718381[label="block\n {if(branch==null)return;branch=branch.getChild(chars[i]);} "]
818382[label="blockStatements\n if(branch==null)return;branch=branch.getChild(chars[i]); "]
918383[label="ifThenStatement\n if(branch==null)return; "]
1018384[label="equalityExpression\n branch==null "]
1118385[label="expressionName\n branch "]
1118386[label="literal\n null "]
1018387[label="returnStatement\n return; "]
918388[label="expressionStatement\n branch=branch.getChild(chars[i]); "]
1018389[label="assignment\n branch=branch.getChild(chars[i]) "]
1118390[label="expressionName\n branch "]
1118391[label="assignmentOperator\n = "]
1118392[label="methodInvocation_lfno_primary\n branch.getChild(chars[i]) "]
1218393[label="typeName\n branch "]
1218394[label="arrayAccess_lfno_primary\n chars[i] "]
1318395[label="expressionName\n chars "]
1318396[label="expressionName\n i "]
618397[label="ifThenStatement\n if(branch==null)return; "]
718398[label="equalityExpression\n branch==null "]
818399[label="expressionName\n branch "]
818400[label="literal\n null "]
718401[label="returnStatement\n return; "]
618402[label="ifThenStatement\n if(branch.addChild(newNode(chars[chars.length-1],Status.UNDEFINED_0,value))){--size;} "]
718403[label="methodInvocation_lfno_primary\n branch.addChild(newNode(chars[chars.length-1],Status.UNDEFINED_0,value)) "]
818404[label="typeName\n branch "]
818405[label="classInstanceCreationExpression_lfno_primary\n newNode(chars[chars.length-1],Status.UNDEFINED_0,value) "]
918406[label="argumentList\n chars[chars.length-1],Status.UNDEFINED_0,value "]
1018407[label="arrayAccess_lfno_primary\n chars[chars.length-1] "]
1118408[label="expressionName\n chars "]
1118409[label="additiveExpression\n chars.length-1 "]
1218410[label="expressionName\n chars.length "]
1318411[label="ambiguousName\n chars "]
1218412[label="literal\n 1 "]
1018413[label="expressionName\n Status.UNDEFINED_0 "]
1118414[label="ambiguousName\n Status "]
1018415[label="expressionName\n value "]
718416[label="block\n {--size;} "]
818417[label="expressionStatement\n --size; "]
918418[label="preDecrementExpression\n --size "]
1018419[label="expressionName\n size "]
318420[label="methodDeclaration\n publicbooleancontainsKey(Stringkey){BaseNodebranch=this;char[]chars=key.toCharArray();for(charaChar:chars){if(branch==null)returnfalse;branch=branch.getChild(aChar);}returnbranch!=null&&(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2);} "]
418421[label="methodModifier\n public "]
418422[label="methodHeader\n booleancontainsKey(Stringkey) "]
518423[label="unannPrimitiveType\n boolean "]
518424[label="methodDeclarator\n containsKey(Stringkey) "]
618425[label="formalParameter\n Stringkey "]
718426[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
718427[label="variableDeclaratorId\n key "]
418428[label="block\n {BaseNodebranch=this;char[]chars=key.toCharArray();for(charaChar:chars){if(branch==null)returnfalse;branch=branch.getChild(aChar);}returnbranch!=null&&(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2);} "]
518429[label="blockStatements\n BaseNodebranch=this;char[]chars=key.toCharArray();for(charaChar:chars){if(branch==null)returnfalse;branch=branch.getChild(aChar);}returnbranch!=null&&(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2); "]
618430[label="localVariableDeclarationStatement\n BaseNodebranch=this; "]
718431[label="localVariableDeclaration\n BaseNodebranch=this "]
818432[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
818433[label="variableDeclarator\n branch=this "]
918434[label="variableDeclaratorId\n branch "]
918435[label="primaryNoNewArray_lfno_primary\n this "]
618436[label="localVariableDeclarationStatement\n char[]chars=key.toCharArray(); "]
718437[label="localVariableDeclaration\n char[]chars=key.toCharArray() "]
818438[label="unannArrayType\n char[] "]
918439[label="integralType\n char "]
918440[label="dims\n [] "]
818441[label="variableDeclarator\n chars=key.toCharArray() "]
918442[label="variableDeclaratorId\n chars "]
918443[label="methodInvocation_lfno_primary\n key.toCharArray() "]
1018444[label="typeName\n key "]
618445[label="enhancedForStatement\n for(charaChar:chars){if(branch==null)returnfalse;branch=branch.getChild(aChar);} "]
718446[label="integralType\n char "]
718447[label="variableDeclaratorId\n aChar "]
718448[label="expressionName\n chars "]
718449[label="block\n {if(branch==null)returnfalse;branch=branch.getChild(aChar);} "]
818450[label="blockStatements\n if(branch==null)returnfalse;branch=branch.getChild(aChar); "]
918451[label="ifThenStatement\n if(branch==null)returnfalse; "]
1018452[label="equalityExpression\n branch==null "]
1118453[label="expressionName\n branch "]
1118454[label="literal\n null "]
1018455[label="returnStatement\n returnfalse; "]
1118456[label="literal\n false "]
918457[label="expressionStatement\n branch=branch.getChild(aChar); "]
1018458[label="assignment\n branch=branch.getChild(aChar) "]
1118459[label="expressionName\n branch "]
1118460[label="assignmentOperator\n = "]
1118461[label="methodInvocation_lfno_primary\n branch.getChild(aChar) "]
1218462[label="typeName\n branch "]
1218463[label="expressionName\n aChar "]
618464[label="returnStatement\n returnbranch!=null&&(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2); "]
718465[label="conditionalAndExpression\n branch!=null&&(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2) "]
818466[label="equalityExpression\n branch!=null "]
918467[label="expressionName\n branch "]
918468[label="literal\n null "]
818469[label="primaryNoNewArray_lfno_primary\n (branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2) "]
918470[label="conditionalOrExpression\n branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2 "]
1018471[label="equalityExpression\n branch.status==Status.WORD_END_3 "]
1118472[label="expressionName\n branch.status "]
1218473[label="ambiguousName\n branch "]
1118474[label="expressionName\n Status.WORD_END_3 "]
1218475[label="ambiguousName\n Status "]
1018476[label="equalityExpression\n branch.status==Status.WORD_MIDDLE_2 "]
1118477[label="expressionName\n branch.status "]
1218478[label="ambiguousName\n branch "]
1118479[label="expressionName\n Status.WORD_MIDDLE_2 "]
1218480[label="ambiguousName\n Status "]
318481[label="methodDeclaration\n publicVget(Stringkey){BaseNodebranch=this;char[]chars=key.toCharArray();for(charaChar:chars){if(branch==null)returnnull;branch=branch.getChild(aChar);}if(branch==null)returnnull;if(!(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2))returnnull;return(V)branch.getValue();} "]
418482[label="methodModifier\n public "]
418483[label="methodHeader\n Vget(Stringkey) "]
518484[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
518485[label="methodDeclarator\n get(Stringkey) "]
618486[label="formalParameter\n Stringkey "]
718487[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
718488[label="variableDeclaratorId\n key "]
418489[label="block\n {BaseNodebranch=this;char[]chars=key.toCharArray();for(charaChar:chars){if(branch==null)returnnull;branch=branch.getChild(aChar);}if(branch==null)returnnull;if(!(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2))returnnull;return(V)branch.getValue();} "]
518490[label="blockStatements\n BaseNodebranch=this;char[]chars=key.toCharArray();for(charaChar:chars){if(branch==null)returnnull;branch=branch.getChild(aChar);}if(branch==null)returnnull;if(!(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2))returnnull;return(V)branch.getValue(); "]
618491[label="localVariableDeclarationStatement\n BaseNodebranch=this; "]
718492[label="localVariableDeclaration\n BaseNodebranch=this "]
818493[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
818494[label="variableDeclarator\n branch=this "]
918495[label="variableDeclaratorId\n branch "]
918496[label="primaryNoNewArray_lfno_primary\n this "]
618497[label="localVariableDeclarationStatement\n char[]chars=key.toCharArray(); "]
718498[label="localVariableDeclaration\n char[]chars=key.toCharArray() "]
818499[label="unannArrayType\n char[] "]
918500[label="integralType\n char "]
918501[label="dims\n [] "]
818502[label="variableDeclarator\n chars=key.toCharArray() "]
918503[label="variableDeclaratorId\n chars "]
918504[label="methodInvocation_lfno_primary\n key.toCharArray() "]
1018505[label="typeName\n key "]
618506[label="enhancedForStatement\n for(charaChar:chars){if(branch==null)returnnull;branch=branch.getChild(aChar);} "]
718507[label="integralType\n char "]
718508[label="variableDeclaratorId\n aChar "]
718509[label="expressionName\n chars "]
718510[label="block\n {if(branch==null)returnnull;branch=branch.getChild(aChar);} "]
818511[label="blockStatements\n if(branch==null)returnnull;branch=branch.getChild(aChar); "]
918512[label="ifThenStatement\n if(branch==null)returnnull; "]
1018513[label="equalityExpression\n branch==null "]
1118514[label="expressionName\n branch "]
1118515[label="literal\n null "]
1018516[label="returnStatement\n returnnull; "]
1118517[label="literal\n null "]
918518[label="expressionStatement\n branch=branch.getChild(aChar); "]
1018519[label="assignment\n branch=branch.getChild(aChar) "]
1118520[label="expressionName\n branch "]
1118521[label="assignmentOperator\n = "]
1118522[label="methodInvocation_lfno_primary\n branch.getChild(aChar) "]
1218523[label="typeName\n branch "]
1218524[label="expressionName\n aChar "]
618525[label="ifThenStatement\n if(branch==null)returnnull; "]
718526[label="equalityExpression\n branch==null "]
818527[label="expressionName\n branch "]
818528[label="literal\n null "]
718529[label="returnStatement\n returnnull; "]
818530[label="literal\n null "]
618531[label="ifThenStatement\n if(!(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2))returnnull; "]
718532[label="unaryExpressionNotPlusMinus\n !(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2) "]
818533[label="primaryNoNewArray_lfno_primary\n (branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2) "]
918534[label="conditionalOrExpression\n branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2 "]
1018535[label="equalityExpression\n branch.status==Status.WORD_END_3 "]
1118536[label="expressionName\n branch.status "]
1218537[label="ambiguousName\n branch "]
1118538[label="expressionName\n Status.WORD_END_3 "]
1218539[label="ambiguousName\n Status "]
1018540[label="equalityExpression\n branch.status==Status.WORD_MIDDLE_2 "]
1118541[label="expressionName\n branch.status "]
1218542[label="ambiguousName\n branch "]
1118543[label="expressionName\n Status.WORD_MIDDLE_2 "]
1218544[label="ambiguousName\n Status "]
718545[label="returnStatement\n returnnull; "]
818546[label="literal\n null "]
618547[label="returnStatement\n return(V)branch.getValue(); "]
718548[label="castExpression\n (V)branch.getValue() "]
818549[label="classType_lfno_classOrInterfaceType\n V "]
818550[label="methodInvocation_lfno_primary\n branch.getValue() "]
918551[label="typeName\n branch "]
318552[label="methodDeclaration\n publicVget(char[]key){BaseNodebranch=this;for(charaChar:key){if(branch==null)returnnull;branch=branch.getChild(aChar);}if(branch==null)returnnull;if(!(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2))returnnull;return(V)branch.getValue();} "]
418553[label="methodModifier\n public "]
418554[label="methodHeader\n Vget(char[]key) "]
518555[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
518556[label="methodDeclarator\n get(char[]key) "]
618557[label="formalParameter\n char[]key "]
718558[label="unannArrayType\n char[] "]
818559[label="integralType\n char "]
818560[label="dims\n [] "]
718561[label="variableDeclaratorId\n key "]
418562[label="block\n {BaseNodebranch=this;for(charaChar:key){if(branch==null)returnnull;branch=branch.getChild(aChar);}if(branch==null)returnnull;if(!(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2))returnnull;return(V)branch.getValue();} "]
518563[label="blockStatements\n BaseNodebranch=this;for(charaChar:key){if(branch==null)returnnull;branch=branch.getChild(aChar);}if(branch==null)returnnull;if(!(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2))returnnull;return(V)branch.getValue(); "]
618564[label="localVariableDeclarationStatement\n BaseNodebranch=this; "]
718565[label="localVariableDeclaration\n BaseNodebranch=this "]
818566[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
818567[label="variableDeclarator\n branch=this "]
918568[label="variableDeclaratorId\n branch "]
918569[label="primaryNoNewArray_lfno_primary\n this "]
618570[label="enhancedForStatement\n for(charaChar:key){if(branch==null)returnnull;branch=branch.getChild(aChar);} "]
718571[label="integralType\n char "]
718572[label="variableDeclaratorId\n aChar "]
718573[label="expressionName\n key "]
718574[label="block\n {if(branch==null)returnnull;branch=branch.getChild(aChar);} "]
818575[label="blockStatements\n if(branch==null)returnnull;branch=branch.getChild(aChar); "]
918576[label="ifThenStatement\n if(branch==null)returnnull; "]
1018577[label="equalityExpression\n branch==null "]
1118578[label="expressionName\n branch "]
1118579[label="literal\n null "]
1018580[label="returnStatement\n returnnull; "]
1118581[label="literal\n null "]
918582[label="expressionStatement\n branch=branch.getChild(aChar); "]
1018583[label="assignment\n branch=branch.getChild(aChar) "]
1118584[label="expressionName\n branch "]
1118585[label="assignmentOperator\n = "]
1118586[label="methodInvocation_lfno_primary\n branch.getChild(aChar) "]
1218587[label="typeName\n branch "]
1218588[label="expressionName\n aChar "]
618589[label="ifThenStatement\n if(branch==null)returnnull; "]
718590[label="equalityExpression\n branch==null "]
818591[label="expressionName\n branch "]
818592[label="literal\n null "]
718593[label="returnStatement\n returnnull; "]
818594[label="literal\n null "]
618595[label="ifThenStatement\n if(!(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2))returnnull; "]
718596[label="unaryExpressionNotPlusMinus\n !(branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2) "]
818597[label="primaryNoNewArray_lfno_primary\n (branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2) "]
918598[label="conditionalOrExpression\n branch.status==Status.WORD_END_3||branch.status==Status.WORD_MIDDLE_2 "]
1018599[label="equalityExpression\n branch.status==Status.WORD_END_3 "]
1118600[label="expressionName\n branch.status "]
1218601[label="ambiguousName\n branch "]
1118602[label="expressionName\n Status.WORD_END_3 "]
1218603[label="ambiguousName\n Status "]
1018604[label="equalityExpression\n branch.status==Status.WORD_MIDDLE_2 "]
1118605[label="expressionName\n branch.status "]
1218606[label="ambiguousName\n branch "]
1118607[label="expressionName\n Status.WORD_MIDDLE_2 "]
1218608[label="ambiguousName\n Status "]
718609[label="returnStatement\n returnnull; "]
818610[label="literal\n null "]
618611[label="returnStatement\n return(V)branch.getValue(); "]
718612[label="castExpression\n (V)branch.getValue() "]
818613[label="classType_lfno_classOrInterfaceType\n V "]
818614[label="methodInvocation_lfno_primary\n branch.getValue() "]
918615[label="typeName\n branch "]
318616[label="methodDeclaration\n @OverridepublicV[]getValueArray(V[]a){if(a.length<size)a=(V[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),size);inti=0;for(Map.Entry<String,V>entry:entrySet()){a[i++]=entry.getValue();}returna;} "]
418617[label="markerAnnotation\n @Override "]
518618[label="typeName\n Override "]
418619[label="methodModifier\n public "]
418620[label="methodHeader\n V[]getValueArray(V[]a) "]
518621[label="unannArrayType\n V[] "]
618622[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
618623[label="dims\n [] "]
518624[label="methodDeclarator\n getValueArray(V[]a) "]
618625[label="formalParameter\n V[]a "]
718626[label="unannArrayType\n V[] "]
818627[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
818628[label="dims\n [] "]
718629[label="variableDeclaratorId\n a "]
418630[label="block\n {if(a.length<size)a=(V[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),size);inti=0;for(Map.Entry<String,V>entry:entrySet()){a[i++]=entry.getValue();}returna;} "]
518631[label="blockStatements\n if(a.length<size)a=(V[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),size);inti=0;for(Map.Entry<String,V>entry:entrySet()){a[i++]=entry.getValue();}returna; "]
618632[label="ifThenStatement\n if(a.length<size)a=(V[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),size); "]
718633[label="relationalExpression\n a.length<size "]
818634[label="expressionName\n a.length "]
918635[label="ambiguousName\n a "]
818636[label="expressionName\n size "]
718637[label="expressionStatement\n a=(V[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),size); "]
818638[label="assignment\n a=(V[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),size) "]
918639[label="expressionName\n a "]
918640[label="assignmentOperator\n = "]
918641[label="castExpression\n (V[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),size) "]
1018642[label="arrayType\n V[] "]
1118643[label="classType_lfno_classOrInterfaceType\n V "]
1118644[label="dims\n [] "]
1018645[label="methodInvocation_lfno_primary\n java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),size) "]
1118646[label="typeName\n java.lang.reflect.Array "]
1218647[label="packageOrTypeName\n java.lang.reflect "]
1318648[label="packageOrTypeName\n java.lang "]
1418649[label="packageOrTypeName\n java "]
1118650[label="argumentList\n a.getClass().getComponentType(),size "]
1218651[label="primary\n a.getClass().getComponentType() "]
1318652[label="methodInvocation_lfno_primary\n a.getClass() "]
1418653[label="typeName\n a "]
1318654[label="methodInvocation_lf_primary\n .getComponentType() "]
1218655[label="expressionName\n size "]
618656[label="localVariableDeclarationStatement\n inti=0; "]
718657[label="localVariableDeclaration\n inti=0 "]
818658[label="integralType\n int "]
818659[label="variableDeclarator\n i=0 "]
918660[label="variableDeclaratorId\n i "]
918661[label="literal\n 0 "]
618662[label="enhancedForStatement\n for(Map.Entry<String,V>entry:entrySet()){a[i++]=entry.getValue();} "]
718663[label="unannClassOrInterfaceType\n Map.Entry<String,V> "]
818664[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
818665[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,V> "]
918666[label="typeArguments\n <String,V> "]
1018667[label="typeArgumentList\n String,V "]
1118668[label="classType_lfno_classOrInterfaceType\n String "]
1118669[label="classType_lfno_classOrInterfaceType\n V "]
718670[label="variableDeclaratorId\n entry "]
718671[label="methodInvocation_lfno_primary\n entrySet() "]
818672[label="methodName\n entrySet "]
718673[label="block\n {a[i++]=entry.getValue();} "]
818674[label="expressionStatement\n a[i++]=entry.getValue(); "]
918675[label="assignment\n a[i++]=entry.getValue() "]
1018676[label="arrayAccess\n a[i++] "]
1118677[label="expressionName\n a "]
1118678[label="postfixExpression\n i++ "]
1218679[label="expressionName\n i "]
1218680[label="postIncrementExpression_lf_postfixExpression\n ++ "]
1018681[label="assignmentOperator\n = "]
1018682[label="methodInvocation_lfno_primary\n entry.getValue() "]
1118683[label="typeName\n entry "]
618684[label="returnStatement\n returna; "]
718685[label="expressionName\n a "]
318686[label="methodDeclaration\n publicSet<Map.Entry<String,V>>entrySet(){Set<Map.Entry<String,V>>entrySet=newTreeSet<Map.Entry<String,V>>();StringBuildersb=newStringBuilder();for(BaseNodenode:child){if(node==null)continue;node.walk(newStringBuilder(sb.toString()),entrySet);}returnentrySet;} "]
418687[label="methodModifier\n public "]
418688[label="methodHeader\n Set<Map.Entry<String,V>>entrySet() "]
518689[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<Map.Entry<String,V>> "]
618690[label="typeArguments\n <Map.Entry<String,V>> "]
718691[label="classOrInterfaceType\n Map.Entry<String,V> "]
818692[label="classType_lfno_classOrInterfaceType\n Map "]
818693[label="classType_lf_classOrInterfaceType\n .Entry<String,V> "]
918694[label="typeArguments\n <String,V> "]
1018695[label="typeArgumentList\n String,V "]
1118696[label="classType_lfno_classOrInterfaceType\n String "]
1118697[label="classType_lfno_classOrInterfaceType\n V "]
518698[label="methodDeclarator\n entrySet() "]
418699[label="block\n {Set<Map.Entry<String,V>>entrySet=newTreeSet<Map.Entry<String,V>>();StringBuildersb=newStringBuilder();for(BaseNodenode:child){if(node==null)continue;node.walk(newStringBuilder(sb.toString()),entrySet);}returnentrySet;} "]
518700[label="blockStatements\n Set<Map.Entry<String,V>>entrySet=newTreeSet<Map.Entry<String,V>>();StringBuildersb=newStringBuilder();for(BaseNodenode:child){if(node==null)continue;node.walk(newStringBuilder(sb.toString()),entrySet);}returnentrySet; "]
618701[label="localVariableDeclarationStatement\n Set<Map.Entry<String,V>>entrySet=newTreeSet<Map.Entry<String,V>>(); "]
718702[label="localVariableDeclaration\n Set<Map.Entry<String,V>>entrySet=newTreeSet<Map.Entry<String,V>>() "]
818703[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<Map.Entry<String,V>> "]
918704[label="typeArguments\n <Map.Entry<String,V>> "]
1018705[label="classOrInterfaceType\n Map.Entry<String,V> "]
1118706[label="classType_lfno_classOrInterfaceType\n Map "]
1118707[label="classType_lf_classOrInterfaceType\n .Entry<String,V> "]
1218708[label="typeArguments\n <String,V> "]
1318709[label="typeArgumentList\n String,V "]
1418710[label="classType_lfno_classOrInterfaceType\n String "]
1418711[label="classType_lfno_classOrInterfaceType\n V "]
818712[label="variableDeclarator\n entrySet=newTreeSet<Map.Entry<String,V>>() "]
918713[label="variableDeclaratorId\n entrySet "]
918714[label="classInstanceCreationExpression_lfno_primary\n newTreeSet<Map.Entry<String,V>>() "]
1018715[label="typeArguments\n <Map.Entry<String,V>> "]
1118716[label="classOrInterfaceType\n Map.Entry<String,V> "]
1218717[label="classType_lfno_classOrInterfaceType\n Map "]
1218718[label="classType_lf_classOrInterfaceType\n .Entry<String,V> "]
1318719[label="typeArguments\n <String,V> "]
1418720[label="typeArgumentList\n String,V "]
1518721[label="classType_lfno_classOrInterfaceType\n String "]
1518722[label="classType_lfno_classOrInterfaceType\n V "]
618723[label="localVariableDeclarationStatement\n StringBuildersb=newStringBuilder(); "]
718724[label="localVariableDeclaration\n StringBuildersb=newStringBuilder() "]
818725[label="unannClassType_lfno_unannClassOrInterfaceType\n StringBuilder "]
818726[label="variableDeclarator\n sb=newStringBuilder() "]
918727[label="variableDeclaratorId\n sb "]
918728[label="classInstanceCreationExpression_lfno_primary\n newStringBuilder() "]
618729[label="enhancedForStatement\n for(BaseNodenode:child){if(node==null)continue;node.walk(newStringBuilder(sb.toString()),entrySet);} "]
718730[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
718731[label="variableDeclaratorId\n node "]
718732[label="expressionName\n child "]
718733[label="block\n {if(node==null)continue;node.walk(newStringBuilder(sb.toString()),entrySet);} "]
818734[label="blockStatements\n if(node==null)continue;node.walk(newStringBuilder(sb.toString()),entrySet); "]
918735[label="ifThenStatement\n if(node==null)continue; "]
1018736[label="equalityExpression\n node==null "]
1118737[label="expressionName\n node "]
1118738[label="literal\n null "]
1018739[label="continueStatement\n continue; "]
918740[label="expressionStatement\n node.walk(newStringBuilder(sb.toString()),entrySet); "]
1018741[label="methodInvocation\n node.walk(newStringBuilder(sb.toString()),entrySet) "]
1118742[label="typeName\n node "]
1118743[label="argumentList\n newStringBuilder(sb.toString()),entrySet "]
1218744[label="classInstanceCreationExpression_lfno_primary\n newStringBuilder(sb.toString()) "]
1318745[label="methodInvocation_lfno_primary\n sb.toString() "]
1418746[label="typeName\n sb "]
1218747[label="expressionName\n entrySet "]
618748[label="returnStatement\n returnentrySet; "]
718749[label="expressionName\n entrySet "]
318750[label="methodDeclaration\n publicSet<String>keySet(){TreeSet<String>keySet=newTreeSet<String>();for(Map.Entry<String,V>entry:entrySet()){keySet.add(entry.getKey());}returnkeySet;} "]
418751[label="methodModifier\n public "]
418752[label="methodHeader\n Set<String>keySet() "]
518753[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
618754[label="typeArguments\n <String> "]
718755[label="classType_lfno_classOrInterfaceType\n String "]
518756[label="methodDeclarator\n keySet() "]
418757[label="block\n {TreeSet<String>keySet=newTreeSet<String>();for(Map.Entry<String,V>entry:entrySet()){keySet.add(entry.getKey());}returnkeySet;} "]
518758[label="blockStatements\n TreeSet<String>keySet=newTreeSet<String>();for(Map.Entry<String,V>entry:entrySet()){keySet.add(entry.getKey());}returnkeySet; "]
618759[label="localVariableDeclarationStatement\n TreeSet<String>keySet=newTreeSet<String>(); "]
718760[label="localVariableDeclaration\n TreeSet<String>keySet=newTreeSet<String>() "]
818761[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeSet<String> "]
918762[label="typeArguments\n <String> "]
1018763[label="classType_lfno_classOrInterfaceType\n String "]
818764[label="variableDeclarator\n keySet=newTreeSet<String>() "]
918765[label="variableDeclaratorId\n keySet "]
918766[label="classInstanceCreationExpression_lfno_primary\n newTreeSet<String>() "]
1018767[label="typeArguments\n <String> "]
1118768[label="classType_lfno_classOrInterfaceType\n String "]
618769[label="enhancedForStatement\n for(Map.Entry<String,V>entry:entrySet()){keySet.add(entry.getKey());} "]
718770[label="unannClassOrInterfaceType\n Map.Entry<String,V> "]
818771[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
818772[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,V> "]
918773[label="typeArguments\n <String,V> "]
1018774[label="typeArgumentList\n String,V "]
1118775[label="classType_lfno_classOrInterfaceType\n String "]
1118776[label="classType_lfno_classOrInterfaceType\n V "]
718777[label="variableDeclaratorId\n entry "]
718778[label="methodInvocation_lfno_primary\n entrySet() "]
818779[label="methodName\n entrySet "]
718780[label="block\n {keySet.add(entry.getKey());} "]
818781[label="expressionStatement\n keySet.add(entry.getKey()); "]
918782[label="methodInvocation\n keySet.add(entry.getKey()) "]
1018783[label="typeName\n keySet "]
1018784[label="methodInvocation_lfno_primary\n entry.getKey() "]
1118785[label="typeName\n entry "]
618786[label="returnStatement\n returnkeySet; "]
718787[label="expressionName\n keySet "]
318788[label="methodDeclaration\n publicSet<Map.Entry<String,V>>prefixSearch(Stringkey){Set<Map.Entry<String,V>>entrySet=newTreeSet<Map.Entry<String,V>>();StringBuildersb=newStringBuilder(key.substring(0,key.length()-1));BaseNodebranch=this;char[]chars=key.toCharArray();for(charaChar:chars){if(branch==null)returnentrySet;branch=branch.getChild(aChar);}if(branch==null)returnentrySet;branch.walk(sb,entrySet);returnentrySet;} "]
418789[label="methodModifier\n public "]
418790[label="methodHeader\n Set<Map.Entry<String,V>>prefixSearch(Stringkey) "]
518791[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<Map.Entry<String,V>> "]
618792[label="typeArguments\n <Map.Entry<String,V>> "]
718793[label="classOrInterfaceType\n Map.Entry<String,V> "]
818794[label="classType_lfno_classOrInterfaceType\n Map "]
818795[label="classType_lf_classOrInterfaceType\n .Entry<String,V> "]
918796[label="typeArguments\n <String,V> "]
1018797[label="typeArgumentList\n String,V "]
1118798[label="classType_lfno_classOrInterfaceType\n String "]
1118799[label="classType_lfno_classOrInterfaceType\n V "]
518800[label="methodDeclarator\n prefixSearch(Stringkey) "]
618801[label="formalParameter\n Stringkey "]
718802[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
718803[label="variableDeclaratorId\n key "]
418804[label="block\n {Set<Map.Entry<String,V>>entrySet=newTreeSet<Map.Entry<String,V>>();StringBuildersb=newStringBuilder(key.substring(0,key.length()-1));BaseNodebranch=this;char[]chars=key.toCharArray();for(charaChar:chars){if(branch==null)returnentrySet;branch=branch.getChild(aChar);}if(branch==null)returnentrySet;branch.walk(sb,entrySet);returnentrySet;} "]
518805[label="blockStatements\n Set<Map.Entry<String,V>>entrySet=newTreeSet<Map.Entry<String,V>>();StringBuildersb=newStringBuilder(key.substring(0,key.length()-1));BaseNodebranch=this;char[]chars=key.toCharArray();for(charaChar:chars){if(branch==null)returnentrySet;branch=branch.getChild(aChar);}if(branch==null)returnentrySet;branch.walk(sb,entrySet);returnentrySet; "]
618806[label="localVariableDeclarationStatement\n Set<Map.Entry<String,V>>entrySet=newTreeSet<Map.Entry<String,V>>(); "]
718807[label="localVariableDeclaration\n Set<Map.Entry<String,V>>entrySet=newTreeSet<Map.Entry<String,V>>() "]
818808[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<Map.Entry<String,V>> "]
918809[label="typeArguments\n <Map.Entry<String,V>> "]
1018810[label="classOrInterfaceType\n Map.Entry<String,V> "]
1118811[label="classType_lfno_classOrInterfaceType\n Map "]
1118812[label="classType_lf_classOrInterfaceType\n .Entry<String,V> "]
1218813[label="typeArguments\n <String,V> "]
1318814[label="typeArgumentList\n String,V "]
1418815[label="classType_lfno_classOrInterfaceType\n String "]
1418816[label="classType_lfno_classOrInterfaceType\n V "]
818817[label="variableDeclarator\n entrySet=newTreeSet<Map.Entry<String,V>>() "]
918818[label="variableDeclaratorId\n entrySet "]
918819[label="classInstanceCreationExpression_lfno_primary\n newTreeSet<Map.Entry<String,V>>() "]
1018820[label="typeArguments\n <Map.Entry<String,V>> "]
1118821[label="classOrInterfaceType\n Map.Entry<String,V> "]
1218822[label="classType_lfno_classOrInterfaceType\n Map "]
1218823[label="classType_lf_classOrInterfaceType\n .Entry<String,V> "]
1318824[label="typeArguments\n <String,V> "]
1418825[label="typeArgumentList\n String,V "]
1518826[label="classType_lfno_classOrInterfaceType\n String "]
1518827[label="classType_lfno_classOrInterfaceType\n V "]
618828[label="localVariableDeclarationStatement\n StringBuildersb=newStringBuilder(key.substring(0,key.length()-1)); "]
718829[label="localVariableDeclaration\n StringBuildersb=newStringBuilder(key.substring(0,key.length()-1)) "]
818830[label="unannClassType_lfno_unannClassOrInterfaceType\n StringBuilder "]
818831[label="variableDeclarator\n sb=newStringBuilder(key.substring(0,key.length()-1)) "]
918832[label="variableDeclaratorId\n sb "]
918833[label="classInstanceCreationExpression_lfno_primary\n newStringBuilder(key.substring(0,key.length()-1)) "]
1018834[label="methodInvocation_lfno_primary\n key.substring(0,key.length()-1) "]
1118835[label="typeName\n key "]
1118836[label="argumentList\n 0,key.length()-1 "]
1218837[label="literal\n 0 "]
1218838[label="additiveExpression\n key.length()-1 "]
1318839[label="methodInvocation_lfno_primary\n key.length() "]
1418840[label="typeName\n key "]
1318841[label="literal\n 1 "]
618842[label="localVariableDeclarationStatement\n BaseNodebranch=this; "]
718843[label="localVariableDeclaration\n BaseNodebranch=this "]
818844[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
818845[label="variableDeclarator\n branch=this "]
918846[label="variableDeclaratorId\n branch "]
918847[label="primaryNoNewArray_lfno_primary\n this "]
618848[label="localVariableDeclarationStatement\n char[]chars=key.toCharArray(); "]
718849[label="localVariableDeclaration\n char[]chars=key.toCharArray() "]
818850[label="unannArrayType\n char[] "]
918851[label="integralType\n char "]
918852[label="dims\n [] "]
818853[label="variableDeclarator\n chars=key.toCharArray() "]
918854[label="variableDeclaratorId\n chars "]
918855[label="methodInvocation_lfno_primary\n key.toCharArray() "]
1018856[label="typeName\n key "]
618857[label="enhancedForStatement\n for(charaChar:chars){if(branch==null)returnentrySet;branch=branch.getChild(aChar);} "]
718858[label="integralType\n char "]
718859[label="variableDeclaratorId\n aChar "]
718860[label="expressionName\n chars "]
718861[label="block\n {if(branch==null)returnentrySet;branch=branch.getChild(aChar);} "]
818862[label="blockStatements\n if(branch==null)returnentrySet;branch=branch.getChild(aChar); "]
918863[label="ifThenStatement\n if(branch==null)returnentrySet; "]
1018864[label="equalityExpression\n branch==null "]
1118865[label="expressionName\n branch "]
1118866[label="literal\n null "]
1018867[label="returnStatement\n returnentrySet; "]
1118868[label="expressionName\n entrySet "]
918869[label="expressionStatement\n branch=branch.getChild(aChar); "]
1018870[label="assignment\n branch=branch.getChild(aChar) "]
1118871[label="expressionName\n branch "]
1118872[label="assignmentOperator\n = "]
1118873[label="methodInvocation_lfno_primary\n branch.getChild(aChar) "]
1218874[label="typeName\n branch "]
1218875[label="expressionName\n aChar "]
618876[label="ifThenStatement\n if(branch==null)returnentrySet; "]
718877[label="equalityExpression\n branch==null "]
818878[label="expressionName\n branch "]
818879[label="literal\n null "]
718880[label="returnStatement\n returnentrySet; "]
818881[label="expressionName\n entrySet "]
618882[label="expressionStatement\n branch.walk(sb,entrySet); "]
718883[label="methodInvocation\n branch.walk(sb,entrySet) "]
818884[label="typeName\n branch "]
818885[label="argumentList\n sb,entrySet "]
918886[label="expressionName\n sb "]
918887[label="expressionName\n entrySet "]
618888[label="returnStatement\n returnentrySet; "]
718889[label="expressionName\n entrySet "]
318890[label="methodDeclaration\n publicLinkedList<Map.Entry<String,V>>commonPrefixSearchWithValue(Stringkey){char[]chars=key.toCharArray();returncommonPrefixSearchWithValue(chars,0);} "]
418891[label="methodModifier\n public "]
418892[label="methodHeader\n LinkedList<Map.Entry<String,V>>commonPrefixSearchWithValue(Stringkey) "]
518893[label="unannClassType_lfno_unannClassOrInterfaceType\n LinkedList<Map.Entry<String,V>> "]
618894[label="typeArguments\n <Map.Entry<String,V>> "]
718895[label="classOrInterfaceType\n Map.Entry<String,V> "]
818896[label="classType_lfno_classOrInterfaceType\n Map "]
818897[label="classType_lf_classOrInterfaceType\n .Entry<String,V> "]
918898[label="typeArguments\n <String,V> "]
1018899[label="typeArgumentList\n String,V "]
1118900[label="classType_lfno_classOrInterfaceType\n String "]
1118901[label="classType_lfno_classOrInterfaceType\n V "]
518902[label="methodDeclarator\n commonPrefixSearchWithValue(Stringkey) "]
618903[label="formalParameter\n Stringkey "]
718904[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
718905[label="variableDeclaratorId\n key "]
418906[label="block\n {char[]chars=key.toCharArray();returncommonPrefixSearchWithValue(chars,0);} "]
518907[label="blockStatements\n char[]chars=key.toCharArray();returncommonPrefixSearchWithValue(chars,0); "]
618908[label="localVariableDeclarationStatement\n char[]chars=key.toCharArray(); "]
718909[label="localVariableDeclaration\n char[]chars=key.toCharArray() "]
818910[label="unannArrayType\n char[] "]
918911[label="integralType\n char "]
918912[label="dims\n [] "]
818913[label="variableDeclarator\n chars=key.toCharArray() "]
918914[label="variableDeclaratorId\n chars "]
918915[label="methodInvocation_lfno_primary\n key.toCharArray() "]
1018916[label="typeName\n key "]
618917[label="returnStatement\n returncommonPrefixSearchWithValue(chars,0); "]
718918[label="methodInvocation_lfno_primary\n commonPrefixSearchWithValue(chars,0) "]
818919[label="methodName\n commonPrefixSearchWithValue "]
818920[label="argumentList\n chars,0 "]
918921[label="expressionName\n chars "]
918922[label="literal\n 0 "]
318923[label="methodDeclaration\n publicLinkedList<Map.Entry<String,V>>commonPrefixSearchWithValue(char[]chars,intbegin){LinkedList<Map.Entry<String,V>>result=newLinkedList<Map.Entry<String,V>>();StringBuildersb=newStringBuilder();BaseNodebranch=this;for(inti=begin;i<chars.length;++i){charaChar=chars[i];branch=branch.getChild(aChar);if(branch==null||branch.status==Status.UNDEFINED_0)returnresult;sb.append(aChar);if(branch.status==Status.WORD_MIDDLE_2||branch.status==Status.WORD_END_3){result.add(newAbstractMap.SimpleEntry<String,V>(sb.toString(),(V)branch.value));}}returnresult;} "]
418924[label="methodModifier\n public "]
418925[label="methodHeader\n LinkedList<Map.Entry<String,V>>commonPrefixSearchWithValue(char[]chars,intbegin) "]
518926[label="unannClassType_lfno_unannClassOrInterfaceType\n LinkedList<Map.Entry<String,V>> "]
618927[label="typeArguments\n <Map.Entry<String,V>> "]
718928[label="classOrInterfaceType\n Map.Entry<String,V> "]
818929[label="classType_lfno_classOrInterfaceType\n Map "]
818930[label="classType_lf_classOrInterfaceType\n .Entry<String,V> "]
918931[label="typeArguments\n <String,V> "]
1018932[label="typeArgumentList\n String,V "]
1118933[label="classType_lfno_classOrInterfaceType\n String "]
1118934[label="classType_lfno_classOrInterfaceType\n V "]
518935[label="methodDeclarator\n commonPrefixSearchWithValue(char[]chars,intbegin) "]
618936[label="formalParameterList\n char[]chars,intbegin "]
718937[label="formalParameter\n char[]chars "]
818938[label="unannArrayType\n char[] "]
918939[label="integralType\n char "]
918940[label="dims\n [] "]
818941[label="variableDeclaratorId\n chars "]
718942[label="formalParameter\n intbegin "]
818943[label="integralType\n int "]
818944[label="variableDeclaratorId\n begin "]
418945[label="block\n {LinkedList<Map.Entry<String,V>>result=newLinkedList<Map.Entry<String,V>>();StringBuildersb=newStringBuilder();BaseNodebranch=this;for(inti=begin;i<chars.length;++i){charaChar=chars[i];branch=branch.getChild(aChar);if(branch==null||branch.status==Status.UNDEFINED_0)returnresult;sb.append(aChar);if(branch.status==Status.WORD_MIDDLE_2||branch.status==Status.WORD_END_3){result.add(newAbstractMap.SimpleEntry<String,V>(sb.toString(),(V)branch.value));}}returnresult;} "]
518946[label="blockStatements\n LinkedList<Map.Entry<String,V>>result=newLinkedList<Map.Entry<String,V>>();StringBuildersb=newStringBuilder();BaseNodebranch=this;for(inti=begin;i<chars.length;++i){charaChar=chars[i];branch=branch.getChild(aChar);if(branch==null||branch.status==Status.UNDEFINED_0)returnresult;sb.append(aChar);if(branch.status==Status.WORD_MIDDLE_2||branch.status==Status.WORD_END_3){result.add(newAbstractMap.SimpleEntry<String,V>(sb.toString(),(V)branch.value));}}returnresult; "]
618947[label="localVariableDeclarationStatement\n LinkedList<Map.Entry<String,V>>result=newLinkedList<Map.Entry<String,V>>(); "]
718948[label="localVariableDeclaration\n LinkedList<Map.Entry<String,V>>result=newLinkedList<Map.Entry<String,V>>() "]
818949[label="unannClassType_lfno_unannClassOrInterfaceType\n LinkedList<Map.Entry<String,V>> "]
918950[label="typeArguments\n <Map.Entry<String,V>> "]
1018951[label="classOrInterfaceType\n Map.Entry<String,V> "]
1118952[label="classType_lfno_classOrInterfaceType\n Map "]
1118953[label="classType_lf_classOrInterfaceType\n .Entry<String,V> "]
1218954[label="typeArguments\n <String,V> "]
1318955[label="typeArgumentList\n String,V "]
1418956[label="classType_lfno_classOrInterfaceType\n String "]
1418957[label="classType_lfno_classOrInterfaceType\n V "]
818958[label="variableDeclarator\n result=newLinkedList<Map.Entry<String,V>>() "]
918959[label="variableDeclaratorId\n result "]
918960[label="classInstanceCreationExpression_lfno_primary\n newLinkedList<Map.Entry<String,V>>() "]
1018961[label="typeArguments\n <Map.Entry<String,V>> "]
1118962[label="classOrInterfaceType\n Map.Entry<String,V> "]
1218963[label="classType_lfno_classOrInterfaceType\n Map "]
1218964[label="classType_lf_classOrInterfaceType\n .Entry<String,V> "]
1318965[label="typeArguments\n <String,V> "]
1418966[label="typeArgumentList\n String,V "]
1518967[label="classType_lfno_classOrInterfaceType\n String "]
1518968[label="classType_lfno_classOrInterfaceType\n V "]
618969[label="localVariableDeclarationStatement\n StringBuildersb=newStringBuilder(); "]
718970[label="localVariableDeclaration\n StringBuildersb=newStringBuilder() "]
818971[label="unannClassType_lfno_unannClassOrInterfaceType\n StringBuilder "]
818972[label="variableDeclarator\n sb=newStringBuilder() "]
918973[label="variableDeclaratorId\n sb "]
918974[label="classInstanceCreationExpression_lfno_primary\n newStringBuilder() "]
618975[label="localVariableDeclarationStatement\n BaseNodebranch=this; "]
718976[label="localVariableDeclaration\n BaseNodebranch=this "]
818977[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
818978[label="variableDeclarator\n branch=this "]
918979[label="variableDeclaratorId\n branch "]
918980[label="primaryNoNewArray_lfno_primary\n this "]
618981[label="basicForStatement\n for(inti=begin;i<chars.length;++i){charaChar=chars[i];branch=branch.getChild(aChar);if(branch==null||branch.status==Status.UNDEFINED_0)returnresult;sb.append(aChar);if(branch.status==Status.WORD_MIDDLE_2||branch.status==Status.WORD_END_3){result.add(newAbstractMap.SimpleEntry<String,V>(sb.toString(),(V)branch.value));}} "]
718982[label="localVariableDeclaration\n inti=begin "]
818983[label="integralType\n int "]
818984[label="variableDeclarator\n i=begin "]
918985[label="variableDeclaratorId\n i "]
918986[label="expressionName\n begin "]
718987[label="relationalExpression\n i<chars.length "]
818988[label="expressionName\n i "]
818989[label="expressionName\n chars.length "]
918990[label="ambiguousName\n chars "]
718991[label="preIncrementExpression\n ++i "]
818992[label="expressionName\n i "]
718993[label="block\n {charaChar=chars[i];branch=branch.getChild(aChar);if(branch==null||branch.status==Status.UNDEFINED_0)returnresult;sb.append(aChar);if(branch.status==Status.WORD_MIDDLE_2||branch.status==Status.WORD_END_3){result.add(newAbstractMap.SimpleEntry<String,V>(sb.toString(),(V)branch.value));}} "]
818994[label="blockStatements\n charaChar=chars[i];branch=branch.getChild(aChar);if(branch==null||branch.status==Status.UNDEFINED_0)returnresult;sb.append(aChar);if(branch.status==Status.WORD_MIDDLE_2||branch.status==Status.WORD_END_3){result.add(newAbstractMap.SimpleEntry<String,V>(sb.toString(),(V)branch.value));} "]
918995[label="localVariableDeclarationStatement\n charaChar=chars[i]; "]
1018996[label="localVariableDeclaration\n charaChar=chars[i] "]
1118997[label="integralType\n char "]
1118998[label="variableDeclarator\n aChar=chars[i] "]
1218999[label="variableDeclaratorId\n aChar "]
1219000[label="arrayAccess_lfno_primary\n chars[i] "]
1319001[label="expressionName\n chars "]
1319002[label="expressionName\n i "]
919003[label="expressionStatement\n branch=branch.getChild(aChar); "]
1019004[label="assignment\n branch=branch.getChild(aChar) "]
1119005[label="expressionName\n branch "]
1119006[label="assignmentOperator\n = "]
1119007[label="methodInvocation_lfno_primary\n branch.getChild(aChar) "]
1219008[label="typeName\n branch "]
1219009[label="expressionName\n aChar "]
919010[label="ifThenStatement\n if(branch==null||branch.status==Status.UNDEFINED_0)returnresult; "]
1019011[label="conditionalOrExpression\n branch==null||branch.status==Status.UNDEFINED_0 "]
1119012[label="equalityExpression\n branch==null "]
1219013[label="expressionName\n branch "]
1219014[label="literal\n null "]
1119015[label="equalityExpression\n branch.status==Status.UNDEFINED_0 "]
1219016[label="expressionName\n branch.status "]
1319017[label="ambiguousName\n branch "]
1219018[label="expressionName\n Status.UNDEFINED_0 "]
1319019[label="ambiguousName\n Status "]
1019020[label="returnStatement\n returnresult; "]
1119021[label="expressionName\n result "]
919022[label="expressionStatement\n sb.append(aChar); "]
1019023[label="methodInvocation\n sb.append(aChar) "]
1119024[label="typeName\n sb "]
1119025[label="expressionName\n aChar "]
919026[label="ifThenStatement\n if(branch.status==Status.WORD_MIDDLE_2||branch.status==Status.WORD_END_3){result.add(newAbstractMap.SimpleEntry<String,V>(sb.toString(),(V)branch.value));} "]
1019027[label="conditionalOrExpression\n branch.status==Status.WORD_MIDDLE_2||branch.status==Status.WORD_END_3 "]
1119028[label="equalityExpression\n branch.status==Status.WORD_MIDDLE_2 "]
1219029[label="expressionName\n branch.status "]
1319030[label="ambiguousName\n branch "]
1219031[label="expressionName\n Status.WORD_MIDDLE_2 "]
1319032[label="ambiguousName\n Status "]
1119033[label="equalityExpression\n branch.status==Status.WORD_END_3 "]
1219034[label="expressionName\n branch.status "]
1319035[label="ambiguousName\n branch "]
1219036[label="expressionName\n Status.WORD_END_3 "]
1319037[label="ambiguousName\n Status "]
1019038[label="block\n {result.add(newAbstractMap.SimpleEntry<String,V>(sb.toString(),(V)branch.value));} "]
1119039[label="expressionStatement\n result.add(newAbstractMap.SimpleEntry<String,V>(sb.toString(),(V)branch.value)); "]
1219040[label="methodInvocation\n result.add(newAbstractMap.SimpleEntry<String,V>(sb.toString(),(V)branch.value)) "]
1319041[label="typeName\n result "]
1319042[label="classInstanceCreationExpression_lfno_primary\n newAbstractMap.SimpleEntry<String,V>(sb.toString(),(V)branch.value) "]
1419043[label="typeArguments\n <String,V> "]
1519044[label="typeArgumentList\n String,V "]
1619045[label="classType_lfno_classOrInterfaceType\n String "]
1619046[label="classType_lfno_classOrInterfaceType\n V "]
1419047[label="argumentList\n sb.toString(),(V)branch.value "]
1519048[label="methodInvocation_lfno_primary\n sb.toString() "]
1619049[label="typeName\n sb "]
1519050[label="castExpression\n (V)branch.value "]
1619051[label="classType_lfno_classOrInterfaceType\n V "]
1619052[label="expressionName\n branch.value "]
1719053[label="ambiguousName\n branch "]
619054[label="returnStatement\n returnresult; "]
719055[label="expressionName\n result "]
319056[label="methodDeclaration\n @OverrideprotectedbooleanaddChild(BaseNodenode){booleanadd=false;charc=node.getChar();BaseNodetarget=getChild(c);if(target==null){child[c]=node;add=true;}else{switch(node.status){caseUNDEFINED_0:if(target.status!=Status.NOT_WORD_1){target.status=Status.NOT_WORD_1;add=true;}break;caseNOT_WORD_1:if(target.status==Status.WORD_END_3){target.status=Status.WORD_MIDDLE_2;}break;caseWORD_END_3:if(target.status==Status.NOT_WORD_1){target.status=Status.WORD_MIDDLE_2;}if(target.getValue()==null){add=true;}target.setValue(node.getValue());break;}}returnadd;} "]
419057[label="markerAnnotation\n @Override "]
519058[label="typeName\n Override "]
419059[label="methodModifier\n protected "]
419060[label="methodHeader\n booleanaddChild(BaseNodenode) "]
519061[label="unannPrimitiveType\n boolean "]
519062[label="methodDeclarator\n addChild(BaseNodenode) "]
619063[label="formalParameter\n BaseNodenode "]
719064[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
719065[label="variableDeclaratorId\n node "]
419066[label="block\n {booleanadd=false;charc=node.getChar();BaseNodetarget=getChild(c);if(target==null){child[c]=node;add=true;}else{switch(node.status){caseUNDEFINED_0:if(target.status!=Status.NOT_WORD_1){target.status=Status.NOT_WORD_1;add=true;}break;caseNOT_WORD_1:if(target.status==Status.WORD_END_3){target.status=Status.WORD_MIDDLE_2;}break;caseWORD_END_3:if(target.status==Status.NOT_WORD_1){target.status=Status.WORD_MIDDLE_2;}if(target.getValue()==null){add=true;}target.setValue(node.getValue());break;}}returnadd;} "]
519067[label="blockStatements\n booleanadd=false;charc=node.getChar();BaseNodetarget=getChild(c);if(target==null){child[c]=node;add=true;}else{switch(node.status){caseUNDEFINED_0:if(target.status!=Status.NOT_WORD_1){target.status=Status.NOT_WORD_1;add=true;}break;caseNOT_WORD_1:if(target.status==Status.WORD_END_3){target.status=Status.WORD_MIDDLE_2;}break;caseWORD_END_3:if(target.status==Status.NOT_WORD_1){target.status=Status.WORD_MIDDLE_2;}if(target.getValue()==null){add=true;}target.setValue(node.getValue());break;}}returnadd; "]
619068[label="localVariableDeclarationStatement\n booleanadd=false; "]
719069[label="localVariableDeclaration\n booleanadd=false "]
819070[label="unannPrimitiveType\n boolean "]
819071[label="variableDeclarator\n add=false "]
919072[label="variableDeclaratorId\n add "]
919073[label="literal\n false "]
619074[label="localVariableDeclarationStatement\n charc=node.getChar(); "]
719075[label="localVariableDeclaration\n charc=node.getChar() "]
819076[label="integralType\n char "]
819077[label="variableDeclarator\n c=node.getChar() "]
919078[label="variableDeclaratorId\n c "]
919079[label="methodInvocation_lfno_primary\n node.getChar() "]
1019080[label="typeName\n node "]
619081[label="localVariableDeclarationStatement\n BaseNodetarget=getChild(c); "]
719082[label="localVariableDeclaration\n BaseNodetarget=getChild(c) "]
819083[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
819084[label="variableDeclarator\n target=getChild(c) "]
919085[label="variableDeclaratorId\n target "]
919086[label="methodInvocation_lfno_primary\n getChild(c) "]
1019087[label="methodName\n getChild "]
1019088[label="expressionName\n c "]
619089[label="ifThenElseStatement\n if(target==null){child[c]=node;add=true;}else{switch(node.status){caseUNDEFINED_0:if(target.status!=Status.NOT_WORD_1){target.status=Status.NOT_WORD_1;add=true;}break;caseNOT_WORD_1:if(target.status==Status.WORD_END_3){target.status=Status.WORD_MIDDLE_2;}break;caseWORD_END_3:if(target.status==Status.NOT_WORD_1){target.status=Status.WORD_MIDDLE_2;}if(target.getValue()==null){add=true;}target.setValue(node.getValue());break;}} "]
719090[label="equalityExpression\n target==null "]
819091[label="expressionName\n target "]
819092[label="literal\n null "]
719093[label="block\n {child[c]=node;add=true;} "]
819094[label="blockStatements\n child[c]=node;add=true; "]
919095[label="expressionStatement\n child[c]=node; "]
1019096[label="assignment\n child[c]=node "]
1119097[label="arrayAccess\n child[c] "]
1219098[label="expressionName\n child "]
1219099[label="expressionName\n c "]
1119100[label="assignmentOperator\n = "]
1119101[label="expressionName\n node "]
919102[label="expressionStatement\n add=true; "]
1019103[label="assignment\n add=true "]
1119104[label="expressionName\n add "]
1119105[label="assignmentOperator\n = "]
1119106[label="literal\n true "]
719107[label="block\n {switch(node.status){caseUNDEFINED_0:if(target.status!=Status.NOT_WORD_1){target.status=Status.NOT_WORD_1;add=true;}break;caseNOT_WORD_1:if(target.status==Status.WORD_END_3){target.status=Status.WORD_MIDDLE_2;}break;caseWORD_END_3:if(target.status==Status.NOT_WORD_1){target.status=Status.WORD_MIDDLE_2;}if(target.getValue()==null){add=true;}target.setValue(node.getValue());break;}} "]
819108[label="switchStatement\n switch(node.status){caseUNDEFINED_0:if(target.status!=Status.NOT_WORD_1){target.status=Status.NOT_WORD_1;add=true;}break;caseNOT_WORD_1:if(target.status==Status.WORD_END_3){target.status=Status.WORD_MIDDLE_2;}break;caseWORD_END_3:if(target.status==Status.NOT_WORD_1){target.status=Status.WORD_MIDDLE_2;}if(target.getValue()==null){add=true;}target.setValue(node.getValue());break;} "]
919109[label="expressionName\n node.status "]
1019110[label="ambiguousName\n node "]
919111[label="switchBlock\n {caseUNDEFINED_0:if(target.status!=Status.NOT_WORD_1){target.status=Status.NOT_WORD_1;add=true;}break;caseNOT_WORD_1:if(target.status==Status.WORD_END_3){target.status=Status.WORD_MIDDLE_2;}break;caseWORD_END_3:if(target.status==Status.NOT_WORD_1){target.status=Status.WORD_MIDDLE_2;}if(target.getValue()==null){add=true;}target.setValue(node.getValue());break;} "]
1019112[label="switchBlockStatementGroup\n caseUNDEFINED_0:if(target.status!=Status.NOT_WORD_1){target.status=Status.NOT_WORD_1;add=true;}break; "]
1119113[label="switchLabel\n caseUNDEFINED_0: "]
1219114[label="expressionName\n UNDEFINED_0 "]
1119115[label="blockStatements\n if(target.status!=Status.NOT_WORD_1){target.status=Status.NOT_WORD_1;add=true;}break; "]
1219116[label="ifThenStatement\n if(target.status!=Status.NOT_WORD_1){target.status=Status.NOT_WORD_1;add=true;} "]
1319117[label="equalityExpression\n target.status!=Status.NOT_WORD_1 "]
1419118[label="expressionName\n target.status "]
1519119[label="ambiguousName\n target "]
1419120[label="expressionName\n Status.NOT_WORD_1 "]
1519121[label="ambiguousName\n Status "]
1319122[label="block\n {target.status=Status.NOT_WORD_1;add=true;} "]
1419123[label="blockStatements\n target.status=Status.NOT_WORD_1;add=true; "]
1519124[label="expressionStatement\n target.status=Status.NOT_WORD_1; "]
1619125[label="assignment\n target.status=Status.NOT_WORD_1 "]
1719126[label="expressionName\n target.status "]
1819127[label="ambiguousName\n target "]
1719128[label="assignmentOperator\n = "]
1719129[label="expressionName\n Status.NOT_WORD_1 "]
1819130[label="ambiguousName\n Status "]
1519131[label="expressionStatement\n add=true; "]
1619132[label="assignment\n add=true "]
1719133[label="expressionName\n add "]
1719134[label="assignmentOperator\n = "]
1719135[label="literal\n true "]
1219136[label="breakStatement\n break; "]
1019137[label="switchBlockStatementGroup\n caseNOT_WORD_1:if(target.status==Status.WORD_END_3){target.status=Status.WORD_MIDDLE_2;}break; "]
1119138[label="switchLabel\n caseNOT_WORD_1: "]
1219139[label="expressionName\n NOT_WORD_1 "]
1119140[label="blockStatements\n if(target.status==Status.WORD_END_3){target.status=Status.WORD_MIDDLE_2;}break; "]
1219141[label="ifThenStatement\n if(target.status==Status.WORD_END_3){target.status=Status.WORD_MIDDLE_2;} "]
1319142[label="equalityExpression\n target.status==Status.WORD_END_3 "]
1419143[label="expressionName\n target.status "]
1519144[label="ambiguousName\n target "]
1419145[label="expressionName\n Status.WORD_END_3 "]
1519146[label="ambiguousName\n Status "]
1319147[label="block\n {target.status=Status.WORD_MIDDLE_2;} "]
1419148[label="expressionStatement\n target.status=Status.WORD_MIDDLE_2; "]
1519149[label="assignment\n target.status=Status.WORD_MIDDLE_2 "]
1619150[label="expressionName\n target.status "]
1719151[label="ambiguousName\n target "]
1619152[label="assignmentOperator\n = "]
1619153[label="expressionName\n Status.WORD_MIDDLE_2 "]
1719154[label="ambiguousName\n Status "]
1219155[label="breakStatement\n break; "]
1019156[label="switchBlockStatementGroup\n caseWORD_END_3:if(target.status==Status.NOT_WORD_1){target.status=Status.WORD_MIDDLE_2;}if(target.getValue()==null){add=true;}target.setValue(node.getValue());break; "]
1119157[label="switchLabel\n caseWORD_END_3: "]
1219158[label="expressionName\n WORD_END_3 "]
1119159[label="blockStatements\n if(target.status==Status.NOT_WORD_1){target.status=Status.WORD_MIDDLE_2;}if(target.getValue()==null){add=true;}target.setValue(node.getValue());break; "]
1219160[label="ifThenStatement\n if(target.status==Status.NOT_WORD_1){target.status=Status.WORD_MIDDLE_2;} "]
1319161[label="equalityExpression\n target.status==Status.NOT_WORD_1 "]
1419162[label="expressionName\n target.status "]
1519163[label="ambiguousName\n target "]
1419164[label="expressionName\n Status.NOT_WORD_1 "]
1519165[label="ambiguousName\n Status "]
1319166[label="block\n {target.status=Status.WORD_MIDDLE_2;} "]
1419167[label="expressionStatement\n target.status=Status.WORD_MIDDLE_2; "]
1519168[label="assignment\n target.status=Status.WORD_MIDDLE_2 "]
1619169[label="expressionName\n target.status "]
1719170[label="ambiguousName\n target "]
1619171[label="assignmentOperator\n = "]
1619172[label="expressionName\n Status.WORD_MIDDLE_2 "]
1719173[label="ambiguousName\n Status "]
1219174[label="ifThenStatement\n if(target.getValue()==null){add=true;} "]
1319175[label="equalityExpression\n target.getValue()==null "]
1419176[label="methodInvocation_lfno_primary\n target.getValue() "]
1519177[label="typeName\n target "]
1419178[label="literal\n null "]
1319179[label="block\n {add=true;} "]
1419180[label="expressionStatement\n add=true; "]
1519181[label="assignment\n add=true "]
1619182[label="expressionName\n add "]
1619183[label="assignmentOperator\n = "]
1619184[label="literal\n true "]
1219185[label="expressionStatement\n target.setValue(node.getValue()); "]
1319186[label="methodInvocation\n target.setValue(node.getValue()) "]
1419187[label="typeName\n target "]
1419188[label="methodInvocation_lfno_primary\n node.getValue() "]
1519189[label="typeName\n node "]
1219190[label="breakStatement\n break; "]
619191[label="returnStatement\n returnadd; "]
719192[label="expressionName\n add "]
319193[label="methodDeclaration\n publicintsize(){returnsize;} "]
419194[label="methodModifier\n public "]
419195[label="methodHeader\n intsize() "]
519196[label="integralType\n int "]
519197[label="methodDeclarator\n size() "]
419198[label="block\n {returnsize;} "]
519199[label="returnStatement\n returnsize; "]
619200[label="expressionName\n size "]
319201[label="methodDeclaration\n @OverrideprotectedchargetChar(){return0;} "]
419202[label="markerAnnotation\n @Override "]
519203[label="typeName\n Override "]
419204[label="methodModifier\n protected "]
419205[label="methodHeader\n chargetChar() "]
519206[label="integralType\n char "]
519207[label="methodDeclarator\n getChar() "]
419208[label="block\n {return0;} "]
519209[label="returnStatement\n return0; "]
619210[label="literal\n 0 "]
319211[label="methodDeclaration\n @OverridepublicBaseNodegetChild(charc){returnchild[c];} "]
419212[label="markerAnnotation\n @Override "]
519213[label="typeName\n Override "]
419214[label="methodModifier\n public "]
419215[label="methodHeader\n BaseNodegetChild(charc) "]
519216[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
519217[label="methodDeclarator\n getChild(charc) "]
619218[label="formalParameter\n charc "]
719219[label="integralType\n char "]
719220[label="variableDeclaratorId\n c "]
419221[label="block\n {returnchild[c];} "]
519222[label="returnStatement\n returnchild[c]; "]
619223[label="arrayAccess_lfno_primary\n child[c] "]
719224[label="expressionName\n child "]
719225[label="expressionName\n c "]
319226[label="methodDeclaration\n publicbooleansave(Stringpath){try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path));for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}out.close();}catch(Exceptione){logger.warning(\"保存到\"+path+\"失败\"+TextUtility.exceptionToString(e));returnfalse;}returntrue;} "]
419227[label="methodModifier\n public "]
419228[label="methodHeader\n booleansave(Stringpath) "]
519229[label="unannPrimitiveType\n boolean "]
519230[label="methodDeclarator\n save(Stringpath) "]
619231[label="formalParameter\n Stringpath "]
719232[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
719233[label="variableDeclaratorId\n path "]
419234[label="block\n {try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path));for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}out.close();}catch(Exceptione){logger.warning(\"保存到\"+path+\"失败\"+TextUtility.exceptionToString(e));returnfalse;}returntrue;} "]
519235[label="blockStatements\n try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path));for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}out.close();}catch(Exceptione){logger.warning(\"保存到\"+path+\"失败\"+TextUtility.exceptionToString(e));returnfalse;}returntrue; "]
619236[label="tryStatement\n try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path));for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}out.close();}catch(Exceptione){logger.warning(\"保存到\"+path+\"失败\"+TextUtility.exceptionToString(e));returnfalse;} "]
719237[label="block\n {DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path));for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}out.close();} "]
819238[label="blockStatements\n DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path));for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}out.close(); "]
919239[label="localVariableDeclarationStatement\n DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path)); "]
1019240[label="localVariableDeclaration\n DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path)) "]
1119241[label="unannClassType_lfno_unannClassOrInterfaceType\n DataOutputStream "]
1119242[label="variableDeclarator\n out=newDataOutputStream(IOUtil.newOutputStream(path)) "]
1219243[label="variableDeclaratorId\n out "]
1219244[label="classInstanceCreationExpression_lfno_primary\n newDataOutputStream(IOUtil.newOutputStream(path)) "]
1319245[label="methodInvocation_lfno_primary\n IOUtil.newOutputStream(path) "]
1419246[label="typeName\n IOUtil "]
1419247[label="expressionName\n path "]
919248[label="enhancedForStatement\n for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}} "]
1019249[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
1019250[label="variableDeclaratorId\n node "]
1019251[label="expressionName\n child "]
1019252[label="block\n {if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}} "]
1119253[label="ifThenElseStatement\n if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);} "]
1219254[label="equalityExpression\n node==null "]
1319255[label="expressionName\n node "]
1319256[label="literal\n null "]
1219257[label="block\n {out.writeInt(0);} "]
1319258[label="expressionStatement\n out.writeInt(0); "]
1419259[label="methodInvocation\n out.writeInt(0) "]
1519260[label="typeName\n out "]
1519261[label="literal\n 0 "]
1219262[label="block\n {out.writeInt(1);node.walkToSave(out);} "]
1319263[label="blockStatements\n out.writeInt(1);node.walkToSave(out); "]
1419264[label="expressionStatement\n out.writeInt(1); "]
1519265[label="methodInvocation\n out.writeInt(1) "]
1619266[label="typeName\n out "]
1619267[label="literal\n 1 "]
1419268[label="expressionStatement\n node.walkToSave(out); "]
1519269[label="methodInvocation\n node.walkToSave(out) "]
1619270[label="typeName\n node "]
1619271[label="expressionName\n out "]
919272[label="expressionStatement\n out.close(); "]
1019273[label="methodInvocation\n out.close() "]
1119274[label="typeName\n out "]
719275[label="catchClause\n catch(Exceptione){logger.warning(\"保存到\"+path+\"失败\"+TextUtility.exceptionToString(e));returnfalse;} "]
819276[label="catchFormalParameter\n Exceptione "]
919277[label="unannClassType\n Exception "]
919278[label="variableDeclaratorId\n e "]
819279[label="block\n {logger.warning(\"保存到\"+path+\"失败\"+TextUtility.exceptionToString(e));returnfalse;} "]
919280[label="blockStatements\n logger.warning(\"保存到\"+path+\"失败\"+TextUtility.exceptionToString(e));returnfalse; "]
1019281[label="expressionStatement\n logger.warning(\"保存到\"+path+\"失败\"+TextUtility.exceptionToString(e)); "]
1119282[label="methodInvocation\n logger.warning(\"保存到\"+path+\"失败\"+TextUtility.exceptionToString(e)) "]
1219283[label="typeName\n logger "]
1219284[label="additiveExpression\n \"保存到\"+path+\"失败\"+TextUtility.exceptionToString(e) "]
1319285[label="additiveExpression\n \"保存到\"+path+\"失败\" "]
1419286[label="additiveExpression\n \"保存到\"+path "]
1519287[label="literal\n \"保存到\" "]
1519288[label="expressionName\n path "]
1419289[label="literal\n \"失败\" "]
1319290[label="methodInvocation_lfno_primary\n TextUtility.exceptionToString(e) "]
1419291[label="typeName\n TextUtility "]
1419292[label="expressionName\n e "]
1019293[label="returnStatement\n returnfalse; "]
1119294[label="literal\n false "]
619295[label="returnStatement\n returntrue; "]
719296[label="literal\n true "]
319297[label="methodDeclaration\n @Overridepublicintbuild(TreeMap<String,V>keyValueMap){for(Map.Entry<String,V>entry:keyValueMap.entrySet()){put(entry.getKey(),entry.getValue());}return0;} "]
419298[label="markerAnnotation\n @Override "]
519299[label="typeName\n Override "]
419300[label="methodModifier\n public "]
419301[label="methodHeader\n intbuild(TreeMap<String,V>keyValueMap) "]
519302[label="integralType\n int "]
519303[label="methodDeclarator\n build(TreeMap<String,V>keyValueMap) "]
619304[label="formalParameter\n TreeMap<String,V>keyValueMap "]
719305[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,V> "]
819306[label="typeArguments\n <String,V> "]
919307[label="typeArgumentList\n String,V "]
1019308[label="classType_lfno_classOrInterfaceType\n String "]
1019309[label="classType_lfno_classOrInterfaceType\n V "]
719310[label="variableDeclaratorId\n keyValueMap "]
419311[label="block\n {for(Map.Entry<String,V>entry:keyValueMap.entrySet()){put(entry.getKey(),entry.getValue());}return0;} "]
519312[label="blockStatements\n for(Map.Entry<String,V>entry:keyValueMap.entrySet()){put(entry.getKey(),entry.getValue());}return0; "]
619313[label="enhancedForStatement\n for(Map.Entry<String,V>entry:keyValueMap.entrySet()){put(entry.getKey(),entry.getValue());} "]
719314[label="unannClassOrInterfaceType\n Map.Entry<String,V> "]
819315[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
819316[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,V> "]
919317[label="typeArguments\n <String,V> "]
1019318[label="typeArgumentList\n String,V "]
1119319[label="classType_lfno_classOrInterfaceType\n String "]
1119320[label="classType_lfno_classOrInterfaceType\n V "]
719321[label="variableDeclaratorId\n entry "]
719322[label="methodInvocation_lfno_primary\n keyValueMap.entrySet() "]
819323[label="typeName\n keyValueMap "]
719324[label="block\n {put(entry.getKey(),entry.getValue());} "]
819325[label="expressionStatement\n put(entry.getKey(),entry.getValue()); "]
919326[label="methodInvocation\n put(entry.getKey(),entry.getValue()) "]
1019327[label="methodName\n put "]
1019328[label="argumentList\n entry.getKey(),entry.getValue() "]
1119329[label="methodInvocation_lfno_primary\n entry.getKey() "]
1219330[label="typeName\n entry "]
1119331[label="methodInvocation_lfno_primary\n entry.getValue() "]
1219332[label="typeName\n entry "]
619333[label="returnStatement\n return0; "]
719334[label="literal\n 0 "]
319335[label="methodDeclaration\n publicbooleansave(DataOutputStreamout){try{for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}}catch(Exceptione){logger.warning(\"保存到\"+out+\"失败\"+TextUtility.exceptionToString(e));returnfalse;}returntrue;} "]
419336[label="methodModifier\n public "]
419337[label="methodHeader\n booleansave(DataOutputStreamout) "]
519338[label="unannPrimitiveType\n boolean "]
519339[label="methodDeclarator\n save(DataOutputStreamout) "]
619340[label="formalParameter\n DataOutputStreamout "]
719341[label="unannClassType_lfno_unannClassOrInterfaceType\n DataOutputStream "]
719342[label="variableDeclaratorId\n out "]
419343[label="block\n {try{for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}}catch(Exceptione){logger.warning(\"保存到\"+out+\"失败\"+TextUtility.exceptionToString(e));returnfalse;}returntrue;} "]
519344[label="blockStatements\n try{for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}}catch(Exceptione){logger.warning(\"保存到\"+out+\"失败\"+TextUtility.exceptionToString(e));returnfalse;}returntrue; "]
619345[label="tryStatement\n try{for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}}catch(Exceptione){logger.warning(\"保存到\"+out+\"失败\"+TextUtility.exceptionToString(e));returnfalse;} "]
719346[label="block\n {for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}} "]
819347[label="enhancedForStatement\n for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}} "]
919348[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
919349[label="variableDeclaratorId\n node "]
919350[label="expressionName\n child "]
919351[label="block\n {if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}} "]
1019352[label="ifThenElseStatement\n if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);} "]
1119353[label="equalityExpression\n node==null "]
1219354[label="expressionName\n node "]
1219355[label="literal\n null "]
1119356[label="block\n {out.writeInt(0);} "]
1219357[label="expressionStatement\n out.writeInt(0); "]
1319358[label="methodInvocation\n out.writeInt(0) "]
1419359[label="typeName\n out "]
1419360[label="literal\n 0 "]
1119361[label="block\n {out.writeInt(1);node.walkToSave(out);} "]
1219362[label="blockStatements\n out.writeInt(1);node.walkToSave(out); "]
1319363[label="expressionStatement\n out.writeInt(1); "]
1419364[label="methodInvocation\n out.writeInt(1) "]
1519365[label="typeName\n out "]
1519366[label="literal\n 1 "]
1319367[label="expressionStatement\n node.walkToSave(out); "]
1419368[label="methodInvocation\n node.walkToSave(out) "]
1519369[label="typeName\n node "]
1519370[label="expressionName\n out "]
719371[label="catchClause\n catch(Exceptione){logger.warning(\"保存到\"+out+\"失败\"+TextUtility.exceptionToString(e));returnfalse;} "]
819372[label="catchFormalParameter\n Exceptione "]
919373[label="unannClassType\n Exception "]
919374[label="variableDeclaratorId\n e "]
819375[label="block\n {logger.warning(\"保存到\"+out+\"失败\"+TextUtility.exceptionToString(e));returnfalse;} "]
919376[label="blockStatements\n logger.warning(\"保存到\"+out+\"失败\"+TextUtility.exceptionToString(e));returnfalse; "]
1019377[label="expressionStatement\n logger.warning(\"保存到\"+out+\"失败\"+TextUtility.exceptionToString(e)); "]
1119378[label="methodInvocation\n logger.warning(\"保存到\"+out+\"失败\"+TextUtility.exceptionToString(e)) "]
1219379[label="typeName\n logger "]
1219380[label="additiveExpression\n \"保存到\"+out+\"失败\"+TextUtility.exceptionToString(e) "]
1319381[label="additiveExpression\n \"保存到\"+out+\"失败\" "]
1419382[label="additiveExpression\n \"保存到\"+out "]
1519383[label="literal\n \"保存到\" "]
1519384[label="expressionName\n out "]
1419385[label="literal\n \"失败\" "]
1319386[label="methodInvocation_lfno_primary\n TextUtility.exceptionToString(e) "]
1419387[label="typeName\n TextUtility "]
1419388[label="expressionName\n e "]
1019389[label="returnStatement\n returnfalse; "]
1119390[label="literal\n false "]
619391[label="returnStatement\n returntrue; "]
719392[label="literal\n true "]
319393[label="methodDeclaration\n publicbooleanload(Stringpath,V[]value){byte[]bytes=IOUtil.readBytes(path);if(bytes==null)returnfalse;_ValueArrayvalueArray=new_ValueArray(value);ByteArraybyteArray=newByteArray(bytes);for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}size=value.length;returntrue;} "]
419394[label="methodModifier\n public "]
419395[label="methodHeader\n booleanload(Stringpath,V[]value) "]
519396[label="unannPrimitiveType\n boolean "]
519397[label="methodDeclarator\n load(Stringpath,V[]value) "]
619398[label="formalParameterList\n Stringpath,V[]value "]
719399[label="formalParameter\n Stringpath "]
819400[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
819401[label="variableDeclaratorId\n path "]
719402[label="formalParameter\n V[]value "]
819403[label="unannArrayType\n V[] "]
919404[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
919405[label="dims\n [] "]
819406[label="variableDeclaratorId\n value "]
419407[label="block\n {byte[]bytes=IOUtil.readBytes(path);if(bytes==null)returnfalse;_ValueArrayvalueArray=new_ValueArray(value);ByteArraybyteArray=newByteArray(bytes);for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}size=value.length;returntrue;} "]
519408[label="blockStatements\n byte[]bytes=IOUtil.readBytes(path);if(bytes==null)returnfalse;_ValueArrayvalueArray=new_ValueArray(value);ByteArraybyteArray=newByteArray(bytes);for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}size=value.length;returntrue; "]
619409[label="localVariableDeclarationStatement\n byte[]bytes=IOUtil.readBytes(path); "]
719410[label="localVariableDeclaration\n byte[]bytes=IOUtil.readBytes(path) "]
819411[label="unannArrayType\n byte[] "]
919412[label="integralType\n byte "]
919413[label="dims\n [] "]
819414[label="variableDeclarator\n bytes=IOUtil.readBytes(path) "]
919415[label="variableDeclaratorId\n bytes "]
919416[label="methodInvocation_lfno_primary\n IOUtil.readBytes(path) "]
1019417[label="typeName\n IOUtil "]
1019418[label="expressionName\n path "]
619419[label="ifThenStatement\n if(bytes==null)returnfalse; "]
719420[label="equalityExpression\n bytes==null "]
819421[label="expressionName\n bytes "]
819422[label="literal\n null "]
719423[label="returnStatement\n returnfalse; "]
819424[label="literal\n false "]
619425[label="localVariableDeclarationStatement\n _ValueArrayvalueArray=new_ValueArray(value); "]
719426[label="localVariableDeclaration\n _ValueArrayvalueArray=new_ValueArray(value) "]
819427[label="unannClassType_lfno_unannClassOrInterfaceType\n _ValueArray "]
819428[label="variableDeclarator\n valueArray=new_ValueArray(value) "]
919429[label="variableDeclaratorId\n valueArray "]
919430[label="classInstanceCreationExpression_lfno_primary\n new_ValueArray(value) "]
1019431[label="expressionName\n value "]
619432[label="localVariableDeclarationStatement\n ByteArraybyteArray=newByteArray(bytes); "]
719433[label="localVariableDeclaration\n ByteArraybyteArray=newByteArray(bytes) "]
819434[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
819435[label="variableDeclarator\n byteArray=newByteArray(bytes) "]
919436[label="variableDeclaratorId\n byteArray "]
919437[label="classInstanceCreationExpression_lfno_primary\n newByteArray(bytes) "]
1019438[label="expressionName\n bytes "]
619439[label="basicForStatement\n for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}} "]
719440[label="localVariableDeclaration\n inti=0 "]
819441[label="integralType\n int "]
819442[label="variableDeclarator\n i=0 "]
919443[label="variableDeclaratorId\n i "]
919444[label="literal\n 0 "]
719445[label="relationalExpression\n i<child.length "]
819446[label="expressionName\n i "]
819447[label="expressionName\n child.length "]
919448[label="ambiguousName\n child "]
719449[label="preIncrementExpression\n ++i "]
819450[label="expressionName\n i "]
719451[label="block\n {intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}} "]
819452[label="blockStatements\n intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);} "]
919453[label="localVariableDeclarationStatement\n intflag=byteArray.nextInt(); "]
1019454[label="localVariableDeclaration\n intflag=byteArray.nextInt() "]
1119455[label="integralType\n int "]
1119456[label="variableDeclarator\n flag=byteArray.nextInt() "]
1219457[label="variableDeclaratorId\n flag "]
1219458[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
1319459[label="typeName\n byteArray "]
919460[label="ifThenStatement\n if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);} "]
1019461[label="equalityExpression\n flag==1 "]
1119462[label="expressionName\n flag "]
1119463[label="literal\n 1 "]
1019464[label="block\n {child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);} "]
1119465[label="blockStatements\n child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray); "]
1219466[label="expressionStatement\n child[i]=newNode<V>(); "]
1319467[label="assignment\n child[i]=newNode<V>() "]
1419468[label="arrayAccess\n child[i] "]
1519469[label="expressionName\n child "]
1519470[label="expressionName\n i "]
1419471[label="assignmentOperator\n = "]
1419472[label="classInstanceCreationExpression_lfno_primary\n newNode<V>() "]
1519473[label="typeArguments\n <V> "]
1619474[label="classType_lfno_classOrInterfaceType\n V "]
1219475[label="expressionStatement\n child[i].walkToLoad(byteArray,valueArray); "]
1319476[label="methodInvocation\n child[i].walkToLoad(byteArray,valueArray) "]
1419477[label="arrayAccess_lfno_primary\n child[i] "]
1519478[label="expressionName\n child "]
1519479[label="expressionName\n i "]
1419480[label="argumentList\n byteArray,valueArray "]
1519481[label="expressionName\n byteArray "]
1519482[label="expressionName\n valueArray "]
619483[label="expressionStatement\n size=value.length; "]
719484[label="assignment\n size=value.length "]
819485[label="expressionName\n size "]
819486[label="assignmentOperator\n = "]
819487[label="expressionName\n value.length "]
919488[label="ambiguousName\n value "]
619489[label="returnStatement\n returntrue; "]
719490[label="literal\n true "]
319491[label="methodDeclaration\n publicbooleanload(Stringpath){byte[]bytes=IOUtil.readBytes(path);if(bytes==null)returnfalse;_ValueArrayvalueArray=new_EmptyValueArray();ByteArraybyteArray=newByteArray(bytes);for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}size=-1;returntrue;} "]
419492[label="methodModifier\n public "]
419493[label="methodHeader\n booleanload(Stringpath) "]
519494[label="unannPrimitiveType\n boolean "]
519495[label="methodDeclarator\n load(Stringpath) "]
619496[label="formalParameter\n Stringpath "]
719497[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
719498[label="variableDeclaratorId\n path "]
419499[label="block\n {byte[]bytes=IOUtil.readBytes(path);if(bytes==null)returnfalse;_ValueArrayvalueArray=new_EmptyValueArray();ByteArraybyteArray=newByteArray(bytes);for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}size=-1;returntrue;} "]
519500[label="blockStatements\n byte[]bytes=IOUtil.readBytes(path);if(bytes==null)returnfalse;_ValueArrayvalueArray=new_EmptyValueArray();ByteArraybyteArray=newByteArray(bytes);for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}size=-1;returntrue; "]
619501[label="localVariableDeclarationStatement\n byte[]bytes=IOUtil.readBytes(path); "]
719502[label="localVariableDeclaration\n byte[]bytes=IOUtil.readBytes(path) "]
819503[label="unannArrayType\n byte[] "]
919504[label="integralType\n byte "]
919505[label="dims\n [] "]
819506[label="variableDeclarator\n bytes=IOUtil.readBytes(path) "]
919507[label="variableDeclaratorId\n bytes "]
919508[label="methodInvocation_lfno_primary\n IOUtil.readBytes(path) "]
1019509[label="typeName\n IOUtil "]
1019510[label="expressionName\n path "]
619511[label="ifThenStatement\n if(bytes==null)returnfalse; "]
719512[label="equalityExpression\n bytes==null "]
819513[label="expressionName\n bytes "]
819514[label="literal\n null "]
719515[label="returnStatement\n returnfalse; "]
819516[label="literal\n false "]
619517[label="localVariableDeclarationStatement\n _ValueArrayvalueArray=new_EmptyValueArray(); "]
719518[label="localVariableDeclaration\n _ValueArrayvalueArray=new_EmptyValueArray() "]
819519[label="unannClassType_lfno_unannClassOrInterfaceType\n _ValueArray "]
819520[label="variableDeclarator\n valueArray=new_EmptyValueArray() "]
919521[label="variableDeclaratorId\n valueArray "]
919522[label="classInstanceCreationExpression_lfno_primary\n new_EmptyValueArray() "]
619523[label="localVariableDeclarationStatement\n ByteArraybyteArray=newByteArray(bytes); "]
719524[label="localVariableDeclaration\n ByteArraybyteArray=newByteArray(bytes) "]
819525[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
819526[label="variableDeclarator\n byteArray=newByteArray(bytes) "]
919527[label="variableDeclaratorId\n byteArray "]
919528[label="classInstanceCreationExpression_lfno_primary\n newByteArray(bytes) "]
1019529[label="expressionName\n bytes "]
619530[label="basicForStatement\n for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}} "]
719531[label="localVariableDeclaration\n inti=0 "]
819532[label="integralType\n int "]
819533[label="variableDeclarator\n i=0 "]
919534[label="variableDeclaratorId\n i "]
919535[label="literal\n 0 "]
719536[label="relationalExpression\n i<child.length "]
819537[label="expressionName\n i "]
819538[label="expressionName\n child.length "]
919539[label="ambiguousName\n child "]
719540[label="preIncrementExpression\n ++i "]
819541[label="expressionName\n i "]
719542[label="block\n {intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}} "]
819543[label="blockStatements\n intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);} "]
919544[label="localVariableDeclarationStatement\n intflag=byteArray.nextInt(); "]
1019545[label="localVariableDeclaration\n intflag=byteArray.nextInt() "]
1119546[label="integralType\n int "]
1119547[label="variableDeclarator\n flag=byteArray.nextInt() "]
1219548[label="variableDeclaratorId\n flag "]
1219549[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
1319550[label="typeName\n byteArray "]
919551[label="ifThenStatement\n if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);} "]
1019552[label="equalityExpression\n flag==1 "]
1119553[label="expressionName\n flag "]
1119554[label="literal\n 1 "]
1019555[label="block\n {child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);} "]
1119556[label="blockStatements\n child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray); "]
1219557[label="expressionStatement\n child[i]=newNode<V>(); "]
1319558[label="assignment\n child[i]=newNode<V>() "]
1419559[label="arrayAccess\n child[i] "]
1519560[label="expressionName\n child "]
1519561[label="expressionName\n i "]
1419562[label="assignmentOperator\n = "]
1419563[label="classInstanceCreationExpression_lfno_primary\n newNode<V>() "]
1519564[label="typeArguments\n <V> "]
1619565[label="classType_lfno_classOrInterfaceType\n V "]
1219566[label="expressionStatement\n child[i].walkToLoad(byteArray,valueArray); "]
1319567[label="methodInvocation\n child[i].walkToLoad(byteArray,valueArray) "]
1419568[label="arrayAccess_lfno_primary\n child[i] "]
1519569[label="expressionName\n child "]
1519570[label="expressionName\n i "]
1419571[label="argumentList\n byteArray,valueArray "]
1519572[label="expressionName\n byteArray "]
1519573[label="expressionName\n valueArray "]
619574[label="expressionStatement\n size=-1; "]
719575[label="assignment\n size=-1 "]
819576[label="expressionName\n size "]
819577[label="assignmentOperator\n = "]
819578[label="unaryExpression\n -1 "]
919579[label="literal\n 1 "]
619580[label="returnStatement\n returntrue; "]
719581[label="literal\n true "]
319582[label="methodDeclaration\n publicbooleanload(ByteArraybyteArray,_ValueArrayvalueArray){for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}size=valueArray.value.length;returntrue;} "]
419583[label="methodModifier\n public "]
419584[label="methodHeader\n booleanload(ByteArraybyteArray,_ValueArrayvalueArray) "]
519585[label="unannPrimitiveType\n boolean "]
519586[label="methodDeclarator\n load(ByteArraybyteArray,_ValueArrayvalueArray) "]
619587[label="formalParameterList\n ByteArraybyteArray,_ValueArrayvalueArray "]
719588[label="formalParameter\n ByteArraybyteArray "]
819589[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
819590[label="variableDeclaratorId\n byteArray "]
719591[label="formalParameter\n _ValueArrayvalueArray "]
819592[label="unannClassType_lfno_unannClassOrInterfaceType\n _ValueArray "]
819593[label="variableDeclaratorId\n valueArray "]
419594[label="block\n {for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}size=valueArray.value.length;returntrue;} "]
519595[label="blockStatements\n for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}}size=valueArray.value.length;returntrue; "]
619596[label="basicForStatement\n for(inti=0;i<child.length;++i){intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}} "]
719597[label="localVariableDeclaration\n inti=0 "]
819598[label="integralType\n int "]
819599[label="variableDeclarator\n i=0 "]
919600[label="variableDeclaratorId\n i "]
919601[label="literal\n 0 "]
719602[label="relationalExpression\n i<child.length "]
819603[label="expressionName\n i "]
819604[label="expressionName\n child.length "]
919605[label="ambiguousName\n child "]
719606[label="preIncrementExpression\n ++i "]
819607[label="expressionName\n i "]
719608[label="block\n {intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);}} "]
819609[label="blockStatements\n intflag=byteArray.nextInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);} "]
919610[label="localVariableDeclarationStatement\n intflag=byteArray.nextInt(); "]
1019611[label="localVariableDeclaration\n intflag=byteArray.nextInt() "]
1119612[label="integralType\n int "]
1119613[label="variableDeclarator\n flag=byteArray.nextInt() "]
1219614[label="variableDeclaratorId\n flag "]
1219615[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
1319616[label="typeName\n byteArray "]
919617[label="ifThenStatement\n if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);} "]
1019618[label="equalityExpression\n flag==1 "]
1119619[label="expressionName\n flag "]
1119620[label="literal\n 1 "]
1019621[label="block\n {child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray);} "]
1119622[label="blockStatements\n child[i]=newNode<V>();child[i].walkToLoad(byteArray,valueArray); "]
1219623[label="expressionStatement\n child[i]=newNode<V>(); "]
1319624[label="assignment\n child[i]=newNode<V>() "]
1419625[label="arrayAccess\n child[i] "]
1519626[label="expressionName\n child "]
1519627[label="expressionName\n i "]
1419628[label="assignmentOperator\n = "]
1419629[label="classInstanceCreationExpression_lfno_primary\n newNode<V>() "]
1519630[label="typeArguments\n <V> "]
1619631[label="classType_lfno_classOrInterfaceType\n V "]
1219632[label="expressionStatement\n child[i].walkToLoad(byteArray,valueArray); "]
1319633[label="methodInvocation\n child[i].walkToLoad(byteArray,valueArray) "]
1419634[label="arrayAccess_lfno_primary\n child[i] "]
1519635[label="expressionName\n child "]
1519636[label="expressionName\n i "]
1419637[label="argumentList\n byteArray,valueArray "]
1519638[label="expressionName\n byteArray "]
1519639[label="expressionName\n valueArray "]
619640[label="expressionStatement\n size=valueArray.value.length; "]
719641[label="assignment\n size=valueArray.value.length "]
819642[label="expressionName\n size "]
819643[label="assignmentOperator\n = "]
819644[label="expressionName\n valueArray.value.length "]
919645[label="ambiguousName\n valueArray.value "]
1019646[label="ambiguousName\n valueArray "]
619647[label="returnStatement\n returntrue; "]
719648[label="literal\n true "]
319649[label="methodDeclaration\n publicbooleanload(ByteArraybyteArray,V[]value){returnload(byteArray,newValueArray().setValue(value));} "]
419650[label="methodModifier\n public "]
419651[label="methodHeader\n booleanload(ByteArraybyteArray,V[]value) "]
519652[label="unannPrimitiveType\n boolean "]
519653[label="methodDeclarator\n load(ByteArraybyteArray,V[]value) "]
619654[label="formalParameterList\n ByteArraybyteArray,V[]value "]
719655[label="formalParameter\n ByteArraybyteArray "]
819656[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
819657[label="variableDeclaratorId\n byteArray "]
719658[label="formalParameter\n V[]value "]
819659[label="unannArrayType\n V[] "]
919660[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
919661[label="dims\n [] "]
819662[label="variableDeclaratorId\n value "]
419663[label="block\n {returnload(byteArray,newValueArray().setValue(value));} "]
519664[label="returnStatement\n returnload(byteArray,newValueArray().setValue(value)); "]
619665[label="methodInvocation_lfno_primary\n load(byteArray,newValueArray().setValue(value)) "]
719666[label="methodName\n load "]
719667[label="argumentList\n byteArray,newValueArray().setValue(value) "]
819668[label="expressionName\n byteArray "]
819669[label="primary\n newValueArray().setValue(value) "]
919670[label="methodInvocation_lfno_primary\n newValueArray() "]
1019671[label="methodName\n newValueArray "]
919672[label="methodInvocation_lf_primary\n .setValue(value) "]
1019673[label="expressionName\n value "]
319674[label="methodDeclaration\n public_ValueArraynewValueArray(){returnnew_ValueArray();} "]
419675[label="methodModifier\n public "]
419676[label="methodHeader\n _ValueArraynewValueArray() "]
519677[label="unannClassType_lfno_unannClassOrInterfaceType\n _ValueArray "]
519678[label="methodDeclarator\n newValueArray() "]
419679[label="block\n {returnnew_ValueArray();} "]
519680[label="returnStatement\n returnnew_ValueArray(); "]
619681[label="classInstanceCreationExpression_lfno_primary\n new_ValueArray() "]
319682[label="methodDeclaration\n @OverridepublicvoidwriteExternal(ObjectOutputout)throwsIOException{out.writeInt(size);for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}} "]
419683[label="markerAnnotation\n @Override "]
519684[label="typeName\n Override "]
419685[label="methodModifier\n public "]
419686[label="methodHeader\n voidwriteExternal(ObjectOutputout)throwsIOException "]
519687[label="result\n void "]
519688[label="methodDeclarator\n writeExternal(ObjectOutputout) "]
619689[label="formalParameter\n ObjectOutputout "]
719690[label="unannClassType_lfno_unannClassOrInterfaceType\n ObjectOutput "]
719691[label="variableDeclaratorId\n out "]
519692[label="throws_\n throwsIOException "]
619693[label="classType\n IOException "]
419694[label="block\n {out.writeInt(size);for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}}} "]
519695[label="blockStatements\n out.writeInt(size);for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}} "]
619696[label="expressionStatement\n out.writeInt(size); "]
719697[label="methodInvocation\n out.writeInt(size) "]
819698[label="typeName\n out "]
819699[label="expressionName\n size "]
619700[label="enhancedForStatement\n for(BaseNodenode:child){if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}} "]
719701[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode "]
719702[label="variableDeclaratorId\n node "]
719703[label="expressionName\n child "]
719704[label="block\n {if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);}} "]
819705[label="ifThenElseStatement\n if(node==null){out.writeInt(0);}else{out.writeInt(1);node.walkToSave(out);} "]
919706[label="equalityExpression\n node==null "]
1019707[label="expressionName\n node "]
1019708[label="literal\n null "]
919709[label="block\n {out.writeInt(0);} "]
1019710[label="expressionStatement\n out.writeInt(0); "]
1119711[label="methodInvocation\n out.writeInt(0) "]
1219712[label="typeName\n out "]
1219713[label="literal\n 0 "]
919714[label="block\n {out.writeInt(1);node.walkToSave(out);} "]
1019715[label="blockStatements\n out.writeInt(1);node.walkToSave(out); "]
1119716[label="expressionStatement\n out.writeInt(1); "]
1219717[label="methodInvocation\n out.writeInt(1) "]
1319718[label="typeName\n out "]
1319719[label="literal\n 1 "]
1119720[label="expressionStatement\n node.walkToSave(out); "]
1219721[label="methodInvocation\n node.walkToSave(out) "]
1319722[label="typeName\n node "]
1319723[label="expressionName\n out "]
319724[label="methodDeclaration\n @OverridepublicvoidreadExternal(ObjectInputin)throwsIOException,ClassNotFoundException{size=in.readInt();for(inti=0;i<child.length;++i){intflag=in.readInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(in);}}} "]
419725[label="markerAnnotation\n @Override "]
519726[label="typeName\n Override "]
419727[label="methodModifier\n public "]
419728[label="methodHeader\n voidreadExternal(ObjectInputin)throwsIOException,ClassNotFoundException "]
519729[label="result\n void "]
519730[label="methodDeclarator\n readExternal(ObjectInputin) "]
619731[label="formalParameter\n ObjectInputin "]
719732[label="unannClassType_lfno_unannClassOrInterfaceType\n ObjectInput "]
719733[label="variableDeclaratorId\n in "]
519734[label="throws_\n throwsIOException,ClassNotFoundException "]
619735[label="exceptionTypeList\n IOException,ClassNotFoundException "]
719736[label="classType\n IOException "]
719737[label="classType\n ClassNotFoundException "]
419738[label="block\n {size=in.readInt();for(inti=0;i<child.length;++i){intflag=in.readInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(in);}}} "]
519739[label="blockStatements\n size=in.readInt();for(inti=0;i<child.length;++i){intflag=in.readInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(in);}} "]
619740[label="expressionStatement\n size=in.readInt(); "]
719741[label="assignment\n size=in.readInt() "]
819742[label="expressionName\n size "]
819743[label="assignmentOperator\n = "]
819744[label="methodInvocation_lfno_primary\n in.readInt() "]
919745[label="typeName\n in "]
619746[label="basicForStatement\n for(inti=0;i<child.length;++i){intflag=in.readInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(in);}} "]
719747[label="localVariableDeclaration\n inti=0 "]
819748[label="integralType\n int "]
819749[label="variableDeclarator\n i=0 "]
919750[label="variableDeclaratorId\n i "]
919751[label="literal\n 0 "]
719752[label="relationalExpression\n i<child.length "]
819753[label="expressionName\n i "]
819754[label="expressionName\n child.length "]
919755[label="ambiguousName\n child "]
719756[label="preIncrementExpression\n ++i "]
819757[label="expressionName\n i "]
719758[label="block\n {intflag=in.readInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(in);}} "]
819759[label="blockStatements\n intflag=in.readInt();if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(in);} "]
919760[label="localVariableDeclarationStatement\n intflag=in.readInt(); "]
1019761[label="localVariableDeclaration\n intflag=in.readInt() "]
1119762[label="integralType\n int "]
1119763[label="variableDeclarator\n flag=in.readInt() "]
1219764[label="variableDeclaratorId\n flag "]
1219765[label="methodInvocation_lfno_primary\n in.readInt() "]
1319766[label="typeName\n in "]
919767[label="ifThenStatement\n if(flag==1){child[i]=newNode<V>();child[i].walkToLoad(in);} "]
1019768[label="equalityExpression\n flag==1 "]
1119769[label="expressionName\n flag "]
1119770[label="literal\n 1 "]
1019771[label="block\n {child[i]=newNode<V>();child[i].walkToLoad(in);} "]
1119772[label="blockStatements\n child[i]=newNode<V>();child[i].walkToLoad(in); "]
1219773[label="expressionStatement\n child[i]=newNode<V>(); "]
1319774[label="assignment\n child[i]=newNode<V>() "]
1419775[label="arrayAccess\n child[i] "]
1519776[label="expressionName\n child "]
1519777[label="expressionName\n i "]
1419778[label="assignmentOperator\n = "]
1419779[label="classInstanceCreationExpression_lfno_primary\n newNode<V>() "]
1519780[label="typeArguments\n <V> "]
1619781[label="classType_lfno_classOrInterfaceType\n V "]
1219782[label="expressionStatement\n child[i].walkToLoad(in); "]
1319783[label="methodInvocation\n child[i].walkToLoad(in) "]
1419784[label="arrayAccess_lfno_primary\n child[i] "]
1519785[label="expressionName\n child "]
1519786[label="expressionName\n i "]
1419787[label="expressionName\n in "]
319788[label="methodDeclaration\n publicvoidparseLongestText(Stringtext,AhoCorasickDoubleArrayTrie.IHit<V>processor){intlength=text.length();for(inti=0;i<length;++i){BaseNode<V>state=transition(text.charAt(i));if(state!=null){intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text.charAt(to));if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}}}} "]
419789[label="methodModifier\n public "]
419790[label="methodHeader\n voidparseLongestText(Stringtext,AhoCorasickDoubleArrayTrie.IHit<V>processor) "]
519791[label="result\n void "]
519792[label="methodDeclarator\n parseLongestText(Stringtext,AhoCorasickDoubleArrayTrie.IHit<V>processor) "]
619793[label="formalParameterList\n Stringtext,AhoCorasickDoubleArrayTrie.IHit<V>processor "]
719794[label="formalParameter\n Stringtext "]
819795[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
819796[label="variableDeclaratorId\n text "]
719797[label="formalParameter\n AhoCorasickDoubleArrayTrie.IHit<V>processor "]
819798[label="unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie.IHit<V> "]
919799[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie "]
919800[label="unannClassType_lf_unannClassOrInterfaceType\n .IHit<V> "]
1019801[label="typeArguments\n <V> "]
1119802[label="classType_lfno_classOrInterfaceType\n V "]
819803[label="variableDeclaratorId\n processor "]
419804[label="block\n {intlength=text.length();for(inti=0;i<length;++i){BaseNode<V>state=transition(text.charAt(i));if(state!=null){intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text.charAt(to));if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}}}} "]
519805[label="blockStatements\n intlength=text.length();for(inti=0;i<length;++i){BaseNode<V>state=transition(text.charAt(i));if(state!=null){intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text.charAt(to));if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}}} "]
619806[label="localVariableDeclarationStatement\n intlength=text.length(); "]
719807[label="localVariableDeclaration\n intlength=text.length() "]
819808[label="integralType\n int "]
819809[label="variableDeclarator\n length=text.length() "]
919810[label="variableDeclaratorId\n length "]
919811[label="methodInvocation_lfno_primary\n text.length() "]
1019812[label="typeName\n text "]
619813[label="basicForStatement\n for(inti=0;i<length;++i){BaseNode<V>state=transition(text.charAt(i));if(state!=null){intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text.charAt(to));if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}}} "]
719814[label="localVariableDeclaration\n inti=0 "]
819815[label="integralType\n int "]
819816[label="variableDeclarator\n i=0 "]
919817[label="variableDeclaratorId\n i "]
919818[label="literal\n 0 "]
719819[label="relationalExpression\n i<length "]
819820[label="expressionName\n i "]
819821[label="expressionName\n length "]
719822[label="preIncrementExpression\n ++i "]
819823[label="expressionName\n i "]
719824[label="block\n {BaseNode<V>state=transition(text.charAt(i));if(state!=null){intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text.charAt(to));if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}}} "]
819825[label="blockStatements\n BaseNode<V>state=transition(text.charAt(i));if(state!=null){intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text.charAt(to));if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}} "]
919826[label="localVariableDeclarationStatement\n BaseNode<V>state=transition(text.charAt(i)); "]
1019827[label="localVariableDeclaration\n BaseNode<V>state=transition(text.charAt(i)) "]
1119828[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode<V> "]
1219829[label="typeArguments\n <V> "]
1319830[label="classType_lfno_classOrInterfaceType\n V "]
1119831[label="variableDeclarator\n state=transition(text.charAt(i)) "]
1219832[label="variableDeclaratorId\n state "]
1219833[label="methodInvocation_lfno_primary\n transition(text.charAt(i)) "]
1319834[label="methodName\n transition "]
1319835[label="methodInvocation_lfno_primary\n text.charAt(i) "]
1419836[label="typeName\n text "]
1419837[label="expressionName\n i "]
919838[label="ifThenStatement\n if(state!=null){intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text.charAt(to));if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}} "]
1019839[label="equalityExpression\n state!=null "]
1119840[label="expressionName\n state "]
1119841[label="literal\n null "]
1019842[label="block\n {intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text.charAt(to));if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}} "]
1119843[label="blockStatements\n intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text.charAt(to));if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;} "]
1219844[label="localVariableDeclarationStatement\n intto=i+1; "]
1319845[label="localVariableDeclaration\n intto=i+1 "]
1419846[label="integralType\n int "]
1419847[label="variableDeclarator\n to=i+1 "]
1519848[label="variableDeclaratorId\n to "]
1519849[label="additiveExpression\n i+1 "]
1619850[label="expressionName\n i "]
1619851[label="literal\n 1 "]
1219852[label="localVariableDeclarationStatement\n intend=to; "]
1319853[label="localVariableDeclaration\n intend=to "]
1419854[label="integralType\n int "]
1419855[label="variableDeclarator\n end=to "]
1519856[label="variableDeclaratorId\n end "]
1519857[label="expressionName\n to "]
1219858[label="localVariableDeclarationStatement\n Vvalue=state.getValue(); "]
1319859[label="localVariableDeclaration\n Vvalue=state.getValue() "]
1419860[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
1419861[label="variableDeclarator\n value=state.getValue() "]
1519862[label="variableDeclaratorId\n value "]
1519863[label="methodInvocation_lfno_primary\n state.getValue() "]
1619864[label="typeName\n state "]
1219865[label="basicForStatement\n for(;to<length;++to){state=state.transition(text.charAt(to));if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}} "]
1319866[label="relationalExpression\n to<length "]
1419867[label="expressionName\n to "]
1419868[label="expressionName\n length "]
1319869[label="preIncrementExpression\n ++to "]
1419870[label="expressionName\n to "]
1319871[label="block\n {state=state.transition(text.charAt(to));if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}} "]
1419872[label="blockStatements\n state=state.transition(text.charAt(to));if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;} "]
1519873[label="expressionStatement\n state=state.transition(text.charAt(to)); "]
1619874[label="assignment\n state=state.transition(text.charAt(to)) "]
1719875[label="expressionName\n state "]
1719876[label="assignmentOperator\n = "]
1719877[label="methodInvocation_lfno_primary\n state.transition(text.charAt(to)) "]
1819878[label="typeName\n state "]
1819879[label="methodInvocation_lfno_primary\n text.charAt(to) "]
1919880[label="typeName\n text "]
1919881[label="expressionName\n to "]
1519882[label="ifThenStatement\n if(state==null)break; "]
1619883[label="equalityExpression\n state==null "]
1719884[label="expressionName\n state "]
1719885[label="literal\n null "]
1619886[label="breakStatement\n break; "]
1519887[label="ifThenStatement\n if(state.getValue()!=null){value=state.getValue();end=to+1;} "]
1619888[label="equalityExpression\n state.getValue()!=null "]
1719889[label="methodInvocation_lfno_primary\n state.getValue() "]
1819890[label="typeName\n state "]
1719891[label="literal\n null "]
1619892[label="block\n {value=state.getValue();end=to+1;} "]
1719893[label="blockStatements\n value=state.getValue();end=to+1; "]
1819894[label="expressionStatement\n value=state.getValue(); "]
1919895[label="assignment\n value=state.getValue() "]
2019896[label="expressionName\n value "]
2019897[label="assignmentOperator\n = "]
2019898[label="methodInvocation_lfno_primary\n state.getValue() "]
2119899[label="typeName\n state "]
1819900[label="expressionStatement\n end=to+1; "]
1919901[label="assignment\n end=to+1 "]
2019902[label="expressionName\n end "]
2019903[label="assignmentOperator\n = "]
2019904[label="additiveExpression\n to+1 "]
2119905[label="expressionName\n to "]
2119906[label="literal\n 1 "]
1219907[label="ifThenStatement\n if(value!=null){processor.hit(i,end,value);i=end-1;} "]
1319908[label="equalityExpression\n value!=null "]
1419909[label="expressionName\n value "]
1419910[label="literal\n null "]
1319911[label="block\n {processor.hit(i,end,value);i=end-1;} "]
1419912[label="blockStatements\n processor.hit(i,end,value);i=end-1; "]
1519913[label="expressionStatement\n processor.hit(i,end,value); "]
1619914[label="methodInvocation\n processor.hit(i,end,value) "]
1719915[label="typeName\n processor "]
1719916[label="argumentList\n i,end,value "]
1819917[label="expressionName\n i "]
1819918[label="expressionName\n end "]
1819919[label="expressionName\n value "]
1519920[label="expressionStatement\n i=end-1; "]
1619921[label="assignment\n i=end-1 "]
1719922[label="expressionName\n i "]
1719923[label="assignmentOperator\n = "]
1719924[label="additiveExpression\n end-1 "]
1819925[label="expressionName\n end "]
1819926[label="literal\n 1 "]
319927[label="methodDeclaration\n publicvoidparseLongestText(char[]text,AhoCorasickDoubleArrayTrie.IHit<V>processor){intlength=text.length;for(inti=0;i<length;++i){BaseNode<V>state=transition(text[i]);if(state!=null){intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text[to]);if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}}}} "]
419928[label="methodModifier\n public "]
419929[label="methodHeader\n voidparseLongestText(char[]text,AhoCorasickDoubleArrayTrie.IHit<V>processor) "]
519930[label="result\n void "]
519931[label="methodDeclarator\n parseLongestText(char[]text,AhoCorasickDoubleArrayTrie.IHit<V>processor) "]
619932[label="formalParameterList\n char[]text,AhoCorasickDoubleArrayTrie.IHit<V>processor "]
719933[label="formalParameter\n char[]text "]
819934[label="unannArrayType\n char[] "]
919935[label="integralType\n char "]
919936[label="dims\n [] "]
819937[label="variableDeclaratorId\n text "]
719938[label="formalParameter\n AhoCorasickDoubleArrayTrie.IHit<V>processor "]
819939[label="unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie.IHit<V> "]
919940[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie "]
919941[label="unannClassType_lf_unannClassOrInterfaceType\n .IHit<V> "]
1019942[label="typeArguments\n <V> "]
1119943[label="classType_lfno_classOrInterfaceType\n V "]
819944[label="variableDeclaratorId\n processor "]
419945[label="block\n {intlength=text.length;for(inti=0;i<length;++i){BaseNode<V>state=transition(text[i]);if(state!=null){intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text[to]);if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}}}} "]
519946[label="blockStatements\n intlength=text.length;for(inti=0;i<length;++i){BaseNode<V>state=transition(text[i]);if(state!=null){intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text[to]);if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}}} "]
619947[label="localVariableDeclarationStatement\n intlength=text.length; "]
719948[label="localVariableDeclaration\n intlength=text.length "]
819949[label="integralType\n int "]
819950[label="variableDeclarator\n length=text.length "]
919951[label="variableDeclaratorId\n length "]
919952[label="expressionName\n text.length "]
1019953[label="ambiguousName\n text "]
619954[label="basicForStatement\n for(inti=0;i<length;++i){BaseNode<V>state=transition(text[i]);if(state!=null){intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text[to]);if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}}} "]
719955[label="localVariableDeclaration\n inti=0 "]
819956[label="integralType\n int "]
819957[label="variableDeclarator\n i=0 "]
919958[label="variableDeclaratorId\n i "]
919959[label="literal\n 0 "]
719960[label="relationalExpression\n i<length "]
819961[label="expressionName\n i "]
819962[label="expressionName\n length "]
719963[label="preIncrementExpression\n ++i "]
819964[label="expressionName\n i "]
719965[label="block\n {BaseNode<V>state=transition(text[i]);if(state!=null){intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text[to]);if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}}} "]
819966[label="blockStatements\n BaseNode<V>state=transition(text[i]);if(state!=null){intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text[to]);if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}} "]
919967[label="localVariableDeclarationStatement\n BaseNode<V>state=transition(text[i]); "]
1019968[label="localVariableDeclaration\n BaseNode<V>state=transition(text[i]) "]
1119969[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode<V> "]
1219970[label="typeArguments\n <V> "]
1319971[label="classType_lfno_classOrInterfaceType\n V "]
1119972[label="variableDeclarator\n state=transition(text[i]) "]
1219973[label="variableDeclaratorId\n state "]
1219974[label="methodInvocation_lfno_primary\n transition(text[i]) "]
1319975[label="methodName\n transition "]
1319976[label="arrayAccess_lfno_primary\n text[i] "]
1419977[label="expressionName\n text "]
1419978[label="expressionName\n i "]
919979[label="ifThenStatement\n if(state!=null){intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text[to]);if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}} "]
1019980[label="equalityExpression\n state!=null "]
1119981[label="expressionName\n state "]
1119982[label="literal\n null "]
1019983[label="block\n {intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text[to]);if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;}} "]
1119984[label="blockStatements\n intto=i+1;intend=to;Vvalue=state.getValue();for(;to<length;++to){state=state.transition(text[to]);if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}}if(value!=null){processor.hit(i,end,value);i=end-1;} "]
1219985[label="localVariableDeclarationStatement\n intto=i+1; "]
1319986[label="localVariableDeclaration\n intto=i+1 "]
1419987[label="integralType\n int "]
1419988[label="variableDeclarator\n to=i+1 "]
1519989[label="variableDeclaratorId\n to "]
1519990[label="additiveExpression\n i+1 "]
1619991[label="expressionName\n i "]
1619992[label="literal\n 1 "]
1219993[label="localVariableDeclarationStatement\n intend=to; "]
1319994[label="localVariableDeclaration\n intend=to "]
1419995[label="integralType\n int "]
1419996[label="variableDeclarator\n end=to "]
1519997[label="variableDeclaratorId\n end "]
1519998[label="expressionName\n to "]
1219999[label="localVariableDeclarationStatement\n Vvalue=state.getValue(); "]
1320000[label="localVariableDeclaration\n Vvalue=state.getValue() "]
1420001[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
1420002[label="variableDeclarator\n value=state.getValue() "]
1520003[label="variableDeclaratorId\n value "]
1520004[label="methodInvocation_lfno_primary\n state.getValue() "]
1620005[label="typeName\n state "]
1220006[label="basicForStatement\n for(;to<length;++to){state=state.transition(text[to]);if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}} "]
1320007[label="relationalExpression\n to<length "]
1420008[label="expressionName\n to "]
1420009[label="expressionName\n length "]
1320010[label="preIncrementExpression\n ++to "]
1420011[label="expressionName\n to "]
1320012[label="block\n {state=state.transition(text[to]);if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;}} "]
1420013[label="blockStatements\n state=state.transition(text[to]);if(state==null)break;if(state.getValue()!=null){value=state.getValue();end=to+1;} "]
1520014[label="expressionStatement\n state=state.transition(text[to]); "]
1620015[label="assignment\n state=state.transition(text[to]) "]
1720016[label="expressionName\n state "]
1720017[label="assignmentOperator\n = "]
1720018[label="methodInvocation_lfno_primary\n state.transition(text[to]) "]
1820019[label="typeName\n state "]
1820020[label="arrayAccess_lfno_primary\n text[to] "]
1920021[label="expressionName\n text "]
1920022[label="expressionName\n to "]
1520023[label="ifThenStatement\n if(state==null)break; "]
1620024[label="equalityExpression\n state==null "]
1720025[label="expressionName\n state "]
1720026[label="literal\n null "]
1620027[label="breakStatement\n break; "]
1520028[label="ifThenStatement\n if(state.getValue()!=null){value=state.getValue();end=to+1;} "]
1620029[label="equalityExpression\n state.getValue()!=null "]
1720030[label="methodInvocation_lfno_primary\n state.getValue() "]
1820031[label="typeName\n state "]
1720032[label="literal\n null "]
1620033[label="block\n {value=state.getValue();end=to+1;} "]
1720034[label="blockStatements\n value=state.getValue();end=to+1; "]
1820035[label="expressionStatement\n value=state.getValue(); "]
1920036[label="assignment\n value=state.getValue() "]
2020037[label="expressionName\n value "]
2020038[label="assignmentOperator\n = "]
2020039[label="methodInvocation_lfno_primary\n state.getValue() "]
2120040[label="typeName\n state "]
1820041[label="expressionStatement\n end=to+1; "]
1920042[label="assignment\n end=to+1 "]
2020043[label="expressionName\n end "]
2020044[label="assignmentOperator\n = "]
2020045[label="additiveExpression\n to+1 "]
2120046[label="expressionName\n to "]
2120047[label="literal\n 1 "]
1220048[label="ifThenStatement\n if(value!=null){processor.hit(i,end,value);i=end-1;} "]
1320049[label="equalityExpression\n value!=null "]
1420050[label="expressionName\n value "]
1420051[label="literal\n null "]
1320052[label="block\n {processor.hit(i,end,value);i=end-1;} "]
1420053[label="blockStatements\n processor.hit(i,end,value);i=end-1; "]
1520054[label="expressionStatement\n processor.hit(i,end,value); "]
1620055[label="methodInvocation\n processor.hit(i,end,value) "]
1720056[label="typeName\n processor "]
1720057[label="argumentList\n i,end,value "]
1820058[label="expressionName\n i "]
1820059[label="expressionName\n end "]
1820060[label="expressionName\n value "]
1520061[label="expressionStatement\n i=end-1; "]
1620062[label="assignment\n i=end-1 "]
1720063[label="expressionName\n i "]
1720064[label="assignmentOperator\n = "]
1720065[label="additiveExpression\n end-1 "]
1820066[label="expressionName\n end "]
1820067[label="literal\n 1 "]
320068[label="methodDeclaration\n publicvoidparseText(Stringtext,AhoCorasickDoubleArrayTrie.IHit<V>processor){intlength=text.length();intbegin=0;BaseNode<V>state=this;for(inti=begin;i<length;++i){state=state.transition(text.charAt(i));if(state!=null){Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}}else{i=begin;++begin;state=this;}}} "]
420069[label="methodModifier\n public "]
420070[label="methodHeader\n voidparseText(Stringtext,AhoCorasickDoubleArrayTrie.IHit<V>processor) "]
520071[label="result\n void "]
520072[label="methodDeclarator\n parseText(Stringtext,AhoCorasickDoubleArrayTrie.IHit<V>processor) "]
620073[label="formalParameterList\n Stringtext,AhoCorasickDoubleArrayTrie.IHit<V>processor "]
720074[label="formalParameter\n Stringtext "]
820075[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
820076[label="variableDeclaratorId\n text "]
720077[label="formalParameter\n AhoCorasickDoubleArrayTrie.IHit<V>processor "]
820078[label="unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie.IHit<V> "]
920079[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie "]
920080[label="unannClassType_lf_unannClassOrInterfaceType\n .IHit<V> "]
1020081[label="typeArguments\n <V> "]
1120082[label="classType_lfno_classOrInterfaceType\n V "]
820083[label="variableDeclaratorId\n processor "]
420084[label="block\n {intlength=text.length();intbegin=0;BaseNode<V>state=this;for(inti=begin;i<length;++i){state=state.transition(text.charAt(i));if(state!=null){Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}}else{i=begin;++begin;state=this;}}} "]
520085[label="blockStatements\n intlength=text.length();intbegin=0;BaseNode<V>state=this;for(inti=begin;i<length;++i){state=state.transition(text.charAt(i));if(state!=null){Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}}else{i=begin;++begin;state=this;}} "]
620086[label="localVariableDeclarationStatement\n intlength=text.length(); "]
720087[label="localVariableDeclaration\n intlength=text.length() "]
820088[label="integralType\n int "]
820089[label="variableDeclarator\n length=text.length() "]
920090[label="variableDeclaratorId\n length "]
920091[label="methodInvocation_lfno_primary\n text.length() "]
1020092[label="typeName\n text "]
620093[label="localVariableDeclarationStatement\n intbegin=0; "]
720094[label="localVariableDeclaration\n intbegin=0 "]
820095[label="integralType\n int "]
820096[label="variableDeclarator\n begin=0 "]
920097[label="variableDeclaratorId\n begin "]
920098[label="literal\n 0 "]
620099[label="localVariableDeclarationStatement\n BaseNode<V>state=this; "]
720100[label="localVariableDeclaration\n BaseNode<V>state=this "]
820101[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode<V> "]
920102[label="typeArguments\n <V> "]
1020103[label="classType_lfno_classOrInterfaceType\n V "]
820104[label="variableDeclarator\n state=this "]
920105[label="variableDeclaratorId\n state "]
920106[label="primaryNoNewArray_lfno_primary\n this "]
620107[label="basicForStatement\n for(inti=begin;i<length;++i){state=state.transition(text.charAt(i));if(state!=null){Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}}else{i=begin;++begin;state=this;}} "]
720108[label="localVariableDeclaration\n inti=begin "]
820109[label="integralType\n int "]
820110[label="variableDeclarator\n i=begin "]
920111[label="variableDeclaratorId\n i "]
920112[label="expressionName\n begin "]
720113[label="relationalExpression\n i<length "]
820114[label="expressionName\n i "]
820115[label="expressionName\n length "]
720116[label="preIncrementExpression\n ++i "]
820117[label="expressionName\n i "]
720118[label="block\n {state=state.transition(text.charAt(i));if(state!=null){Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}}else{i=begin;++begin;state=this;}} "]
820119[label="blockStatements\n state=state.transition(text.charAt(i));if(state!=null){Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}}else{i=begin;++begin;state=this;} "]
920120[label="expressionStatement\n state=state.transition(text.charAt(i)); "]
1020121[label="assignment\n state=state.transition(text.charAt(i)) "]
1120122[label="expressionName\n state "]
1120123[label="assignmentOperator\n = "]
1120124[label="methodInvocation_lfno_primary\n state.transition(text.charAt(i)) "]
1220125[label="typeName\n state "]
1220126[label="methodInvocation_lfno_primary\n text.charAt(i) "]
1320127[label="typeName\n text "]
1320128[label="expressionName\n i "]
920129[label="ifThenElseStatement\n if(state!=null){Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}}else{i=begin;++begin;state=this;} "]
1020130[label="equalityExpression\n state!=null "]
1120131[label="expressionName\n state "]
1120132[label="literal\n null "]
1020133[label="block\n {Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}} "]
1120134[label="blockStatements\n Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);} "]
1220135[label="localVariableDeclarationStatement\n Vvalue=state.getValue(); "]
1320136[label="localVariableDeclaration\n Vvalue=state.getValue() "]
1420137[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
1420138[label="variableDeclarator\n value=state.getValue() "]
1520139[label="variableDeclaratorId\n value "]
1520140[label="methodInvocation_lfno_primary\n state.getValue() "]
1620141[label="typeName\n state "]
1220142[label="ifThenStatement\n if(value!=null){processor.hit(begin,i+1,value);} "]
1320143[label="equalityExpression\n value!=null "]
1420144[label="expressionName\n value "]
1420145[label="literal\n null "]
1320146[label="block\n {processor.hit(begin,i+1,value);} "]
1420147[label="expressionStatement\n processor.hit(begin,i+1,value); "]
1520148[label="methodInvocation\n processor.hit(begin,i+1,value) "]
1620149[label="typeName\n processor "]
1620150[label="argumentList\n begin,i+1,value "]
1720151[label="expressionName\n begin "]
1720152[label="additiveExpression\n i+1 "]
1820153[label="expressionName\n i "]
1820154[label="literal\n 1 "]
1720155[label="expressionName\n value "]
1020156[label="block\n {i=begin;++begin;state=this;} "]
1120157[label="blockStatements\n i=begin;++begin;state=this; "]
1220158[label="expressionStatement\n i=begin; "]
1320159[label="assignment\n i=begin "]
1420160[label="expressionName\n i "]
1420161[label="assignmentOperator\n = "]
1420162[label="expressionName\n begin "]
1220163[label="expressionStatement\n ++begin; "]
1320164[label="preIncrementExpression\n ++begin "]
1420165[label="expressionName\n begin "]
1220166[label="expressionStatement\n state=this; "]
1320167[label="assignment\n state=this "]
1420168[label="expressionName\n state "]
1420169[label="assignmentOperator\n = "]
1420170[label="primaryNoNewArray_lfno_primary\n this "]
320171[label="methodDeclaration\n publicvoidparseText(char[]text,AhoCorasickDoubleArrayTrie.IHit<V>processor){intlength=text.length;intbegin=0;BaseNode<V>state=this;for(inti=begin;i<length;++i){state=state.transition(text[i]);if(state!=null){Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}}else{i=begin;++begin;state=this;}}} "]
420172[label="methodModifier\n public "]
420173[label="methodHeader\n voidparseText(char[]text,AhoCorasickDoubleArrayTrie.IHit<V>processor) "]
520174[label="result\n void "]
520175[label="methodDeclarator\n parseText(char[]text,AhoCorasickDoubleArrayTrie.IHit<V>processor) "]
620176[label="formalParameterList\n char[]text,AhoCorasickDoubleArrayTrie.IHit<V>processor "]
720177[label="formalParameter\n char[]text "]
820178[label="unannArrayType\n char[] "]
920179[label="integralType\n char "]
920180[label="dims\n [] "]
820181[label="variableDeclaratorId\n text "]
720182[label="formalParameter\n AhoCorasickDoubleArrayTrie.IHit<V>processor "]
820183[label="unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie.IHit<V> "]
920184[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie "]
920185[label="unannClassType_lf_unannClassOrInterfaceType\n .IHit<V> "]
1020186[label="typeArguments\n <V> "]
1120187[label="classType_lfno_classOrInterfaceType\n V "]
820188[label="variableDeclaratorId\n processor "]
420189[label="block\n {intlength=text.length;intbegin=0;BaseNode<V>state=this;for(inti=begin;i<length;++i){state=state.transition(text[i]);if(state!=null){Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}}else{i=begin;++begin;state=this;}}} "]
520190[label="blockStatements\n intlength=text.length;intbegin=0;BaseNode<V>state=this;for(inti=begin;i<length;++i){state=state.transition(text[i]);if(state!=null){Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}}else{i=begin;++begin;state=this;}} "]
620191[label="localVariableDeclarationStatement\n intlength=text.length; "]
720192[label="localVariableDeclaration\n intlength=text.length "]
820193[label="integralType\n int "]
820194[label="variableDeclarator\n length=text.length "]
920195[label="variableDeclaratorId\n length "]
920196[label="expressionName\n text.length "]
1020197[label="ambiguousName\n text "]
620198[label="localVariableDeclarationStatement\n intbegin=0; "]
720199[label="localVariableDeclaration\n intbegin=0 "]
820200[label="integralType\n int "]
820201[label="variableDeclarator\n begin=0 "]
920202[label="variableDeclaratorId\n begin "]
920203[label="literal\n 0 "]
620204[label="localVariableDeclarationStatement\n BaseNode<V>state=this; "]
720205[label="localVariableDeclaration\n BaseNode<V>state=this "]
820206[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseNode<V> "]
920207[label="typeArguments\n <V> "]
1020208[label="classType_lfno_classOrInterfaceType\n V "]
820209[label="variableDeclarator\n state=this "]
920210[label="variableDeclaratorId\n state "]
920211[label="primaryNoNewArray_lfno_primary\n this "]
620212[label="basicForStatement\n for(inti=begin;i<length;++i){state=state.transition(text[i]);if(state!=null){Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}}else{i=begin;++begin;state=this;}} "]
720213[label="localVariableDeclaration\n inti=begin "]
820214[label="integralType\n int "]
820215[label="variableDeclarator\n i=begin "]
920216[label="variableDeclaratorId\n i "]
920217[label="expressionName\n begin "]
720218[label="relationalExpression\n i<length "]
820219[label="expressionName\n i "]
820220[label="expressionName\n length "]
720221[label="preIncrementExpression\n ++i "]
820222[label="expressionName\n i "]
720223[label="block\n {state=state.transition(text[i]);if(state!=null){Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}}else{i=begin;++begin;state=this;}} "]
820224[label="blockStatements\n state=state.transition(text[i]);if(state!=null){Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}}else{i=begin;++begin;state=this;} "]
920225[label="expressionStatement\n state=state.transition(text[i]); "]
1020226[label="assignment\n state=state.transition(text[i]) "]
1120227[label="expressionName\n state "]
1120228[label="assignmentOperator\n = "]
1120229[label="methodInvocation_lfno_primary\n state.transition(text[i]) "]
1220230[label="typeName\n state "]
1220231[label="arrayAccess_lfno_primary\n text[i] "]
1320232[label="expressionName\n text "]
1320233[label="expressionName\n i "]
920234[label="ifThenElseStatement\n if(state!=null){Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}}else{i=begin;++begin;state=this;} "]
1020235[label="equalityExpression\n state!=null "]
1120236[label="expressionName\n state "]
1120237[label="literal\n null "]
1020238[label="block\n {Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);}} "]
1120239[label="blockStatements\n Vvalue=state.getValue();if(value!=null){processor.hit(begin,i+1,value);} "]
1220240[label="localVariableDeclarationStatement\n Vvalue=state.getValue(); "]
1320241[label="localVariableDeclaration\n Vvalue=state.getValue() "]
1420242[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
1420243[label="variableDeclarator\n value=state.getValue() "]
1520244[label="variableDeclaratorId\n value "]
1520245[label="methodInvocation_lfno_primary\n state.getValue() "]
1620246[label="typeName\n state "]
1220247[label="ifThenStatement\n if(value!=null){processor.hit(begin,i+1,value);} "]
1320248[label="equalityExpression\n value!=null "]
1420249[label="expressionName\n value "]
1420250[label="literal\n null "]
1320251[label="block\n {processor.hit(begin,i+1,value);} "]
1420252[label="expressionStatement\n processor.hit(begin,i+1,value); "]
1520253[label="methodInvocation\n processor.hit(begin,i+1,value) "]
1620254[label="typeName\n processor "]
1620255[label="argumentList\n begin,i+1,value "]
1720256[label="expressionName\n begin "]
1720257[label="additiveExpression\n i+1 "]
1820258[label="expressionName\n i "]
1820259[label="literal\n 1 "]
1720260[label="expressionName\n value "]
1020261[label="block\n {i=begin;++begin;state=this;} "]
1120262[label="blockStatements\n i=begin;++begin;state=this; "]
1220263[label="expressionStatement\n i=begin; "]
1320264[label="assignment\n i=begin "]
1420265[label="expressionName\n i "]
1420266[label="assignmentOperator\n = "]
1420267[label="expressionName\n begin "]
1220268[label="expressionStatement\n ++begin; "]
1320269[label="preIncrementExpression\n ++begin "]
1420270[label="expressionName\n begin "]
1220271[label="expressionStatement\n state=this; "]
1320272[label="assignment\n state=this "]
1420273[label="expressionName\n state "]
1420274[label="assignmentOperator\n = "]
1420275[label="primaryNoNewArray_lfno_primary\n this "]
020276[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.bintrie;importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie;importjunit.framework.TestCase;publicclassBinTrieTestextendsTestCase{publicvoidtestParseText()throwsException{BinTrie<String>trie=newBinTrie<String>();String[]keys=newString[]{\"he\",\"her\",\"his\"};for(Stringkey:keys){trie.put(key,key);}finalStringtext=\" her4he7his \";AhoCorasickDoubleArrayTrie.IHit<String>processor=newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d, %d)=%s\n\",begin,end,value);assertEquals(value,text.substring(begin,end));}};trie.parseText(text,processor);}}<EOF> "]
120277[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.bintrie; "]
220278[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie "]
320279[label="packageName\n com.hankcs.hanlp.collection.trie "]
420280[label="packageName\n com.hankcs.hanlp.collection "]
520281[label="packageName\n com.hankcs.hanlp "]
620282[label="packageName\n com.hankcs "]
720283[label="packageName\n com "]
120284[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie; "]
220285[label="typeName\n com.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie "]
320286[label="packageOrTypeName\n com.hankcs.hanlp.collection.AhoCorasick "]
420287[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
520288[label="packageOrTypeName\n com.hankcs.hanlp "]
620289[label="packageOrTypeName\n com.hankcs "]
720290[label="packageOrTypeName\n com "]
120291[label="singleTypeImportDeclaration\n importjunit.framework.TestCase; "]
220292[label="typeName\n junit.framework.TestCase "]
320293[label="packageOrTypeName\n junit.framework "]
420294[label="packageOrTypeName\n junit "]
120295[label="normalClassDeclaration\n publicclassBinTrieTestextendsTestCase{publicvoidtestParseText()throwsException{BinTrie<String>trie=newBinTrie<String>();String[]keys=newString[]{\"he\",\"her\",\"his\"};for(Stringkey:keys){trie.put(key,key);}finalStringtext=\" her4he7his \";AhoCorasickDoubleArrayTrie.IHit<String>processor=newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d, %d)=%s\n\",begin,end,value);assertEquals(value,text.substring(begin,end));}};trie.parseText(text,processor);}} "]
220296[label="classModifier\n public "]
220297[label="superclass\n extendsTestCase "]
320298[label="classType\n TestCase "]
220299[label="classBody\n {publicvoidtestParseText()throwsException{BinTrie<String>trie=newBinTrie<String>();String[]keys=newString[]{\"he\",\"her\",\"his\"};for(Stringkey:keys){trie.put(key,key);}finalStringtext=\" her4he7his \";AhoCorasickDoubleArrayTrie.IHit<String>processor=newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d, %d)=%s\n\",begin,end,value);assertEquals(value,text.substring(begin,end));}};trie.parseText(text,processor);}} "]
320300[label="methodDeclaration\n publicvoidtestParseText()throwsException{BinTrie<String>trie=newBinTrie<String>();String[]keys=newString[]{\"he\",\"her\",\"his\"};for(Stringkey:keys){trie.put(key,key);}finalStringtext=\" her4he7his \";AhoCorasickDoubleArrayTrie.IHit<String>processor=newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d, %d)=%s\n\",begin,end,value);assertEquals(value,text.substring(begin,end));}};trie.parseText(text,processor);} "]
420301[label="methodModifier\n public "]
420302[label="methodHeader\n voidtestParseText()throwsException "]
520303[label="result\n void "]
520304[label="methodDeclarator\n testParseText() "]
520305[label="throws_\n throwsException "]
620306[label="classType\n Exception "]
420307[label="block\n {BinTrie<String>trie=newBinTrie<String>();String[]keys=newString[]{\"he\",\"her\",\"his\"};for(Stringkey:keys){trie.put(key,key);}finalStringtext=\" her4he7his \";AhoCorasickDoubleArrayTrie.IHit<String>processor=newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d, %d)=%s\n\",begin,end,value);assertEquals(value,text.substring(begin,end));}};trie.parseText(text,processor);} "]
520308[label="blockStatements\n BinTrie<String>trie=newBinTrie<String>();String[]keys=newString[]{\"he\",\"her\",\"his\"};for(Stringkey:keys){trie.put(key,key);}finalStringtext=\" her4he7his \";AhoCorasickDoubleArrayTrie.IHit<String>processor=newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d, %d)=%s\n\",begin,end,value);assertEquals(value,text.substring(begin,end));}};trie.parseText(text,processor); "]
620309[label="localVariableDeclarationStatement\n BinTrie<String>trie=newBinTrie<String>(); "]
720310[label="localVariableDeclaration\n BinTrie<String>trie=newBinTrie<String>() "]
820311[label="unannClassType_lfno_unannClassOrInterfaceType\n BinTrie<String> "]
920312[label="typeArguments\n <String> "]
1020313[label="classType_lfno_classOrInterfaceType\n String "]
820314[label="variableDeclarator\n trie=newBinTrie<String>() "]
920315[label="variableDeclaratorId\n trie "]
920316[label="classInstanceCreationExpression_lfno_primary\n newBinTrie<String>() "]
1020317[label="typeArguments\n <String> "]
1120318[label="classType_lfno_classOrInterfaceType\n String "]
620319[label="localVariableDeclarationStatement\n String[]keys=newString[]{\"he\",\"her\",\"his\"}; "]
720320[label="localVariableDeclaration\n String[]keys=newString[]{\"he\",\"her\",\"his\"} "]
820321[label="unannArrayType\n String[] "]
920322[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
920323[label="dims\n [] "]
820324[label="variableDeclarator\n keys=newString[]{\"he\",\"her\",\"his\"} "]
920325[label="variableDeclaratorId\n keys "]
920326[label="arrayCreationExpression\n newString[]{\"he\",\"her\",\"his\"} "]
1020327[label="classType_lfno_classOrInterfaceType\n String "]
1020328[label="dims\n [] "]
1020329[label="arrayInitializer\n {\"he\",\"her\",\"his\"} "]
1120330[label="variableInitializerList\n \"he\",\"her\",\"his\" "]
1220331[label="literal\n \"he\" "]
1220332[label="literal\n \"her\" "]
1220333[label="literal\n \"his\" "]
620334[label="enhancedForStatement\n for(Stringkey:keys){trie.put(key,key);} "]
720335[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
720336[label="variableDeclaratorId\n key "]
720337[label="expressionName\n keys "]
720338[label="block\n {trie.put(key,key);} "]
820339[label="expressionStatement\n trie.put(key,key); "]
920340[label="methodInvocation\n trie.put(key,key) "]
1020341[label="typeName\n trie "]
1020342[label="argumentList\n key,key "]
1120343[label="expressionName\n key "]
1120344[label="expressionName\n key "]
620345[label="localVariableDeclarationStatement\n finalStringtext=\" her4he7his \"; "]
720346[label="localVariableDeclaration\n finalStringtext=\" her4he7his \" "]
820347[label="variableModifier\n final "]
820348[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
820349[label="variableDeclarator\n text=\" her4he7his \" "]
920350[label="variableDeclaratorId\n text "]
920351[label="literal\n \" her4he7his \" "]
620352[label="localVariableDeclarationStatement\n AhoCorasickDoubleArrayTrie.IHit<String>processor=newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d, %d)=%s\n\",begin,end,value);assertEquals(value,text.substring(begin,end));}}; "]
720353[label="localVariableDeclaration\n AhoCorasickDoubleArrayTrie.IHit<String>processor=newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d, %d)=%s\n\",begin,end,value);assertEquals(value,text.substring(begin,end));}} "]
820354[label="unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie.IHit<String> "]
920355[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie "]
920356[label="unannClassType_lf_unannClassOrInterfaceType\n .IHit<String> "]
1020357[label="typeArguments\n <String> "]
1120358[label="classType_lfno_classOrInterfaceType\n String "]
820359[label="variableDeclarator\n processor=newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d, %d)=%s\n\",begin,end,value);assertEquals(value,text.substring(begin,end));}} "]
920360[label="variableDeclaratorId\n processor "]
920361[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie.IHit<String>(){@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d, %d)=%s\n\",begin,end,value);assertEquals(value,text.substring(begin,end));}} "]
1020362[label="typeArguments\n <String> "]
1120363[label="classType_lfno_classOrInterfaceType\n String "]
1020364[label="classBody\n {@Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d, %d)=%s\n\",begin,end,value);assertEquals(value,text.substring(begin,end));}} "]
1120365[label="methodDeclaration\n @Overridepublicvoidhit(intbegin,intend,Stringvalue){System.out.printf(\"[%d, %d)=%s\n\",begin,end,value);assertEquals(value,text.substring(begin,end));} "]
1220366[label="markerAnnotation\n @Override "]
1320367[label="typeName\n Override "]
1220368[label="methodModifier\n public "]
1220369[label="methodHeader\n voidhit(intbegin,intend,Stringvalue) "]
1320370[label="result\n void "]
1320371[label="methodDeclarator\n hit(intbegin,intend,Stringvalue) "]
1420372[label="formalParameterList\n intbegin,intend,Stringvalue "]
1520373[label="formalParameters\n intbegin,intend "]
1620374[label="formalParameter\n intbegin "]
1720375[label="integralType\n int "]
1720376[label="variableDeclaratorId\n begin "]
1620377[label="formalParameter\n intend "]
1720378[label="integralType\n int "]
1720379[label="variableDeclaratorId\n end "]
1520380[label="formalParameter\n Stringvalue "]
1620381[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1620382[label="variableDeclaratorId\n value "]
1220383[label="block\n {System.out.printf(\"[%d, %d)=%s\n\",begin,end,value);assertEquals(value,text.substring(begin,end));} "]
1320384[label="blockStatements\n System.out.printf(\"[%d, %d)=%s\n\",begin,end,value);assertEquals(value,text.substring(begin,end)); "]
1420385[label="expressionStatement\n System.out.printf(\"[%d, %d)=%s\n\",begin,end,value); "]
1520386[label="methodInvocation\n System.out.printf(\"[%d, %d)=%s\n\",begin,end,value) "]
1620387[label="typeName\n System.out "]
1720388[label="packageOrTypeName\n System "]
1620389[label="argumentList\n \"[%d, %d)=%s\n\",begin,end,value "]
1720390[label="literal\n \"[%d, %d)=%s\n\" "]
1720391[label="expressionName\n begin "]
1720392[label="expressionName\n end "]
1720393[label="expressionName\n value "]
1420394[label="expressionStatement\n assertEquals(value,text.substring(begin,end)); "]
1520395[label="methodInvocation\n assertEquals(value,text.substring(begin,end)) "]
1620396[label="methodName\n assertEquals "]
1620397[label="argumentList\n value,text.substring(begin,end) "]
1720398[label="expressionName\n value "]
1720399[label="methodInvocation_lfno_primary\n text.substring(begin,end) "]
1820400[label="typeName\n text "]
1820401[label="argumentList\n begin,end "]
1920402[label="expressionName\n begin "]
1920403[label="expressionName\n end "]
620404[label="expressionStatement\n trie.parseText(text,processor); "]
720405[label="methodInvocation\n trie.parseText(text,processor) "]
820406[label="typeName\n trie "]
820407[label="argumentList\n text,processor "]
920408[label="expressionName\n text "]
920409[label="expressionName\n processor "]
020410[label="compilationUnit\n packagecom.hankcs.hanlp.collection.dartsclone.details;classBitVector{booleanget(intid){return(_units.get(id/UNIT_SIZE)>>>(id%UNIT_SIZE)&1)==1;}voidset(intid,booleanbit){if(bit){_units.set(id/UNIT_SIZE,_units.get(id/UNIT_SIZE)|1<<(id%UNIT_SIZE));}}intrank(intid){intunit_id=id/UNIT_SIZE;return_ranks[unit_id]+popCount(_units.get(unit_id)&(~0>>>(UNIT_SIZE-(id%UNIT_SIZE)-1)));}booleanempty(){return_units.empty();}intnumOnes(){return_numOnes;}intsize(){return_size;}voidappend(){if((_size%UNIT_SIZE)==0){_units.add(0);}++_size;}voidbuild(){_ranks=newint[_units.size()];_numOnes=0;for(inti=0;i<_units.size();++i){_ranks[i]=_numOnes;_numOnes+=popCount(_units.get(i));}}voidclear(){_units.clear();_ranks=null;}privatestaticfinalintUNIT_SIZE=32;privatestaticintpopCount(intunit){unit=((unit&0xAAAAAAAA)>>>1)+(unit&0x55555555);unit=((unit&0xCCCCCCCC)>>>2)+(unit&0x33333333);unit=((unit>>>4)+unit)&0x0F0F0F0F;unit+=unit>>>8;unit+=unit>>>16;returnunit&0xFF;}privateAutoIntPool_units=newAutoIntPool();privateint[]_ranks;privateint_numOnes;privateint_size;}<EOF> "]
120411[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.dartsclone.details; "]
220412[label="packageName\n com.hankcs.hanlp.collection.dartsclone.details "]
320413[label="packageName\n com.hankcs.hanlp.collection.dartsclone "]
420414[label="packageName\n com.hankcs.hanlp.collection "]
520415[label="packageName\n com.hankcs.hanlp "]
620416[label="packageName\n com.hankcs "]
720417[label="packageName\n com "]
120418[label="normalClassDeclaration\n classBitVector{booleanget(intid){return(_units.get(id/UNIT_SIZE)>>>(id%UNIT_SIZE)&1)==1;}voidset(intid,booleanbit){if(bit){_units.set(id/UNIT_SIZE,_units.get(id/UNIT_SIZE)|1<<(id%UNIT_SIZE));}}intrank(intid){intunit_id=id/UNIT_SIZE;return_ranks[unit_id]+popCount(_units.get(unit_id)&(~0>>>(UNIT_SIZE-(id%UNIT_SIZE)-1)));}booleanempty(){return_units.empty();}intnumOnes(){return_numOnes;}intsize(){return_size;}voidappend(){if((_size%UNIT_SIZE)==0){_units.add(0);}++_size;}voidbuild(){_ranks=newint[_units.size()];_numOnes=0;for(inti=0;i<_units.size();++i){_ranks[i]=_numOnes;_numOnes+=popCount(_units.get(i));}}voidclear(){_units.clear();_ranks=null;}privatestaticfinalintUNIT_SIZE=32;privatestaticintpopCount(intunit){unit=((unit&0xAAAAAAAA)>>>1)+(unit&0x55555555);unit=((unit&0xCCCCCCCC)>>>2)+(unit&0x33333333);unit=((unit>>>4)+unit)&0x0F0F0F0F;unit+=unit>>>8;unit+=unit>>>16;returnunit&0xFF;}privateAutoIntPool_units=newAutoIntPool();privateint[]_ranks;privateint_numOnes;privateint_size;} "]
220419[label="classBody\n {booleanget(intid){return(_units.get(id/UNIT_SIZE)>>>(id%UNIT_SIZE)&1)==1;}voidset(intid,booleanbit){if(bit){_units.set(id/UNIT_SIZE,_units.get(id/UNIT_SIZE)|1<<(id%UNIT_SIZE));}}intrank(intid){intunit_id=id/UNIT_SIZE;return_ranks[unit_id]+popCount(_units.get(unit_id)&(~0>>>(UNIT_SIZE-(id%UNIT_SIZE)-1)));}booleanempty(){return_units.empty();}intnumOnes(){return_numOnes;}intsize(){return_size;}voidappend(){if((_size%UNIT_SIZE)==0){_units.add(0);}++_size;}voidbuild(){_ranks=newint[_units.size()];_numOnes=0;for(inti=0;i<_units.size();++i){_ranks[i]=_numOnes;_numOnes+=popCount(_units.get(i));}}voidclear(){_units.clear();_ranks=null;}privatestaticfinalintUNIT_SIZE=32;privatestaticintpopCount(intunit){unit=((unit&0xAAAAAAAA)>>>1)+(unit&0x55555555);unit=((unit&0xCCCCCCCC)>>>2)+(unit&0x33333333);unit=((unit>>>4)+unit)&0x0F0F0F0F;unit+=unit>>>8;unit+=unit>>>16;returnunit&0xFF;}privateAutoIntPool_units=newAutoIntPool();privateint[]_ranks;privateint_numOnes;privateint_size;} "]
320420[label="methodDeclaration\n booleanget(intid){return(_units.get(id/UNIT_SIZE)>>>(id%UNIT_SIZE)&1)==1;} "]
420421[label="methodHeader\n booleanget(intid) "]
520422[label="unannPrimitiveType\n boolean "]
520423[label="methodDeclarator\n get(intid) "]
620424[label="formalParameter\n intid "]
720425[label="integralType\n int "]
720426[label="variableDeclaratorId\n id "]
420427[label="block\n {return(_units.get(id/UNIT_SIZE)>>>(id%UNIT_SIZE)&1)==1;} "]
520428[label="returnStatement\n return(_units.get(id/UNIT_SIZE)>>>(id%UNIT_SIZE)&1)==1; "]
620429[label="equalityExpression\n (_units.get(id/UNIT_SIZE)>>>(id%UNIT_SIZE)&1)==1 "]
720430[label="primaryNoNewArray_lfno_primary\n (_units.get(id/UNIT_SIZE)>>>(id%UNIT_SIZE)&1) "]
820431[label="andExpression\n _units.get(id/UNIT_SIZE)>>>(id%UNIT_SIZE)&1 "]
920432[label="shiftExpression\n _units.get(id/UNIT_SIZE)>>>(id%UNIT_SIZE) "]
1020433[label="methodInvocation_lfno_primary\n _units.get(id/UNIT_SIZE) "]
1120434[label="typeName\n _units "]
1120435[label="multiplicativeExpression\n id/UNIT_SIZE "]
1220436[label="expressionName\n id "]
1220437[label="expressionName\n UNIT_SIZE "]
1020438[label="primaryNoNewArray_lfno_primary\n (id%UNIT_SIZE) "]
1120439[label="multiplicativeExpression\n id%UNIT_SIZE "]
1220440[label="expressionName\n id "]
1220441[label="expressionName\n UNIT_SIZE "]
920442[label="literal\n 1 "]
720443[label="literal\n 1 "]
320444[label="methodDeclaration\n voidset(intid,booleanbit){if(bit){_units.set(id/UNIT_SIZE,_units.get(id/UNIT_SIZE)|1<<(id%UNIT_SIZE));}} "]
420445[label="methodHeader\n voidset(intid,booleanbit) "]
520446[label="result\n void "]
520447[label="methodDeclarator\n set(intid,booleanbit) "]
620448[label="formalParameterList\n intid,booleanbit "]
720449[label="formalParameter\n intid "]
820450[label="integralType\n int "]
820451[label="variableDeclaratorId\n id "]
720452[label="formalParameter\n booleanbit "]
820453[label="unannPrimitiveType\n boolean "]
820454[label="variableDeclaratorId\n bit "]
420455[label="block\n {if(bit){_units.set(id/UNIT_SIZE,_units.get(id/UNIT_SIZE)|1<<(id%UNIT_SIZE));}} "]
520456[label="ifThenStatement\n if(bit){_units.set(id/UNIT_SIZE,_units.get(id/UNIT_SIZE)|1<<(id%UNIT_SIZE));} "]
620457[label="expressionName\n bit "]
620458[label="block\n {_units.set(id/UNIT_SIZE,_units.get(id/UNIT_SIZE)|1<<(id%UNIT_SIZE));} "]
720459[label="expressionStatement\n _units.set(id/UNIT_SIZE,_units.get(id/UNIT_SIZE)|1<<(id%UNIT_SIZE)); "]
820460[label="methodInvocation\n _units.set(id/UNIT_SIZE,_units.get(id/UNIT_SIZE)|1<<(id%UNIT_SIZE)) "]
920461[label="typeName\n _units "]
920462[label="argumentList\n id/UNIT_SIZE,_units.get(id/UNIT_SIZE)|1<<(id%UNIT_SIZE) "]
1020463[label="multiplicativeExpression\n id/UNIT_SIZE "]
1120464[label="expressionName\n id "]
1120465[label="expressionName\n UNIT_SIZE "]
1020466[label="inclusiveOrExpression\n _units.get(id/UNIT_SIZE)|1<<(id%UNIT_SIZE) "]
1120467[label="methodInvocation_lfno_primary\n _units.get(id/UNIT_SIZE) "]
1220468[label="typeName\n _units "]
1220469[label="multiplicativeExpression\n id/UNIT_SIZE "]
1320470[label="expressionName\n id "]
1320471[label="expressionName\n UNIT_SIZE "]
1120472[label="shiftExpression\n 1<<(id%UNIT_SIZE) "]
1220473[label="literal\n 1 "]
1220474[label="primaryNoNewArray_lfno_primary\n (id%UNIT_SIZE) "]
1320475[label="multiplicativeExpression\n id%UNIT_SIZE "]
1420476[label="expressionName\n id "]
1420477[label="expressionName\n UNIT_SIZE "]
320478[label="methodDeclaration\n intrank(intid){intunit_id=id/UNIT_SIZE;return_ranks[unit_id]+popCount(_units.get(unit_id)&(~0>>>(UNIT_SIZE-(id%UNIT_SIZE)-1)));} "]
420479[label="methodHeader\n intrank(intid) "]
520480[label="integralType\n int "]
520481[label="methodDeclarator\n rank(intid) "]
620482[label="formalParameter\n intid "]
720483[label="integralType\n int "]
720484[label="variableDeclaratorId\n id "]
420485[label="block\n {intunit_id=id/UNIT_SIZE;return_ranks[unit_id]+popCount(_units.get(unit_id)&(~0>>>(UNIT_SIZE-(id%UNIT_SIZE)-1)));} "]
520486[label="blockStatements\n intunit_id=id/UNIT_SIZE;return_ranks[unit_id]+popCount(_units.get(unit_id)&(~0>>>(UNIT_SIZE-(id%UNIT_SIZE)-1))); "]
620487[label="localVariableDeclarationStatement\n intunit_id=id/UNIT_SIZE; "]
720488[label="localVariableDeclaration\n intunit_id=id/UNIT_SIZE "]
820489[label="integralType\n int "]
820490[label="variableDeclarator\n unit_id=id/UNIT_SIZE "]
920491[label="variableDeclaratorId\n unit_id "]
920492[label="multiplicativeExpression\n id/UNIT_SIZE "]
1020493[label="expressionName\n id "]
1020494[label="expressionName\n UNIT_SIZE "]
620495[label="returnStatement\n return_ranks[unit_id]+popCount(_units.get(unit_id)&(~0>>>(UNIT_SIZE-(id%UNIT_SIZE)-1))); "]
720496[label="additiveExpression\n _ranks[unit_id]+popCount(_units.get(unit_id)&(~0>>>(UNIT_SIZE-(id%UNIT_SIZE)-1))) "]
820497[label="arrayAccess_lfno_primary\n _ranks[unit_id] "]
920498[label="expressionName\n _ranks "]
920499[label="expressionName\n unit_id "]
820500[label="methodInvocation_lfno_primary\n popCount(_units.get(unit_id)&(~0>>>(UNIT_SIZE-(id%UNIT_SIZE)-1))) "]
920501[label="methodName\n popCount "]
920502[label="andExpression\n _units.get(unit_id)&(~0>>>(UNIT_SIZE-(id%UNIT_SIZE)-1)) "]
1020503[label="methodInvocation_lfno_primary\n _units.get(unit_id) "]
1120504[label="typeName\n _units "]
1120505[label="expressionName\n unit_id "]
1020506[label="primaryNoNewArray_lfno_primary\n (~0>>>(UNIT_SIZE-(id%UNIT_SIZE)-1)) "]
1120507[label="shiftExpression\n ~0>>>(UNIT_SIZE-(id%UNIT_SIZE)-1) "]
1220508[label="unaryExpressionNotPlusMinus\n ~0 "]
1320509[label="literal\n 0 "]
1220510[label="primaryNoNewArray_lfno_primary\n (UNIT_SIZE-(id%UNIT_SIZE)-1) "]
1320511[label="additiveExpression\n UNIT_SIZE-(id%UNIT_SIZE)-1 "]
1420512[label="additiveExpression\n UNIT_SIZE-(id%UNIT_SIZE) "]
1520513[label="expressionName\n UNIT_SIZE "]
1520514[label="primaryNoNewArray_lfno_primary\n (id%UNIT_SIZE) "]
1620515[label="multiplicativeExpression\n id%UNIT_SIZE "]
1720516[label="expressionName\n id "]
1720517[label="expressionName\n UNIT_SIZE "]
1420518[label="literal\n 1 "]
320519[label="methodDeclaration\n booleanempty(){return_units.empty();} "]
420520[label="methodHeader\n booleanempty() "]
520521[label="unannPrimitiveType\n boolean "]
520522[label="methodDeclarator\n empty() "]
420523[label="block\n {return_units.empty();} "]
520524[label="returnStatement\n return_units.empty(); "]
620525[label="methodInvocation_lfno_primary\n _units.empty() "]
720526[label="typeName\n _units "]
320527[label="methodDeclaration\n intnumOnes(){return_numOnes;} "]
420528[label="methodHeader\n intnumOnes() "]
520529[label="integralType\n int "]
520530[label="methodDeclarator\n numOnes() "]
420531[label="block\n {return_numOnes;} "]
520532[label="returnStatement\n return_numOnes; "]
620533[label="expressionName\n _numOnes "]
320534[label="methodDeclaration\n intsize(){return_size;} "]
420535[label="methodHeader\n intsize() "]
520536[label="integralType\n int "]
520537[label="methodDeclarator\n size() "]
420538[label="block\n {return_size;} "]
520539[label="returnStatement\n return_size; "]
620540[label="expressionName\n _size "]
320541[label="methodDeclaration\n voidappend(){if((_size%UNIT_SIZE)==0){_units.add(0);}++_size;} "]
420542[label="methodHeader\n voidappend() "]
520543[label="result\n void "]
520544[label="methodDeclarator\n append() "]
420545[label="block\n {if((_size%UNIT_SIZE)==0){_units.add(0);}++_size;} "]
520546[label="blockStatements\n if((_size%UNIT_SIZE)==0){_units.add(0);}++_size; "]
620547[label="ifThenStatement\n if((_size%UNIT_SIZE)==0){_units.add(0);} "]
720548[label="equalityExpression\n (_size%UNIT_SIZE)==0 "]
820549[label="primaryNoNewArray_lfno_primary\n (_size%UNIT_SIZE) "]
920550[label="multiplicativeExpression\n _size%UNIT_SIZE "]
1020551[label="expressionName\n _size "]
1020552[label="expressionName\n UNIT_SIZE "]
820553[label="literal\n 0 "]
720554[label="block\n {_units.add(0);} "]
820555[label="expressionStatement\n _units.add(0); "]
920556[label="methodInvocation\n _units.add(0) "]
1020557[label="typeName\n _units "]
1020558[label="literal\n 0 "]
620559[label="expressionStatement\n ++_size; "]
720560[label="preIncrementExpression\n ++_size "]
820561[label="expressionName\n _size "]
320562[label="methodDeclaration\n voidbuild(){_ranks=newint[_units.size()];_numOnes=0;for(inti=0;i<_units.size();++i){_ranks[i]=_numOnes;_numOnes+=popCount(_units.get(i));}} "]
420563[label="methodHeader\n voidbuild() "]
520564[label="result\n void "]
520565[label="methodDeclarator\n build() "]
420566[label="block\n {_ranks=newint[_units.size()];_numOnes=0;for(inti=0;i<_units.size();++i){_ranks[i]=_numOnes;_numOnes+=popCount(_units.get(i));}} "]
520567[label="blockStatements\n _ranks=newint[_units.size()];_numOnes=0;for(inti=0;i<_units.size();++i){_ranks[i]=_numOnes;_numOnes+=popCount(_units.get(i));} "]
620568[label="expressionStatement\n _ranks=newint[_units.size()]; "]
720569[label="assignment\n _ranks=newint[_units.size()] "]
820570[label="expressionName\n _ranks "]
820571[label="assignmentOperator\n = "]
820572[label="arrayCreationExpression\n newint[_units.size()] "]
920573[label="integralType\n int "]
920574[label="dimExpr\n [_units.size()] "]
1020575[label="methodInvocation_lfno_primary\n _units.size() "]
1120576[label="typeName\n _units "]
620577[label="expressionStatement\n _numOnes=0; "]
720578[label="assignment\n _numOnes=0 "]
820579[label="expressionName\n _numOnes "]
820580[label="assignmentOperator\n = "]
820581[label="literal\n 0 "]
620582[label="basicForStatement\n for(inti=0;i<_units.size();++i){_ranks[i]=_numOnes;_numOnes+=popCount(_units.get(i));} "]
720583[label="localVariableDeclaration\n inti=0 "]
820584[label="integralType\n int "]
820585[label="variableDeclarator\n i=0 "]
920586[label="variableDeclaratorId\n i "]
920587[label="literal\n 0 "]
720588[label="relationalExpression\n i<_units.size() "]
820589[label="expressionName\n i "]
820590[label="methodInvocation_lfno_primary\n _units.size() "]
920591[label="typeName\n _units "]
720592[label="preIncrementExpression\n ++i "]
820593[label="expressionName\n i "]
720594[label="block\n {_ranks[i]=_numOnes;_numOnes+=popCount(_units.get(i));} "]
820595[label="blockStatements\n _ranks[i]=_numOnes;_numOnes+=popCount(_units.get(i)); "]
920596[label="expressionStatement\n _ranks[i]=_numOnes; "]
1020597[label="assignment\n _ranks[i]=_numOnes "]
1120598[label="arrayAccess\n _ranks[i] "]
1220599[label="expressionName\n _ranks "]
1220600[label="expressionName\n i "]
1120601[label="assignmentOperator\n = "]
1120602[label="expressionName\n _numOnes "]
920603[label="expressionStatement\n _numOnes+=popCount(_units.get(i)); "]
1020604[label="assignment\n _numOnes+=popCount(_units.get(i)) "]
1120605[label="expressionName\n _numOnes "]
1120606[label="assignmentOperator\n += "]
1120607[label="methodInvocation_lfno_primary\n popCount(_units.get(i)) "]
1220608[label="methodName\n popCount "]
1220609[label="methodInvocation_lfno_primary\n _units.get(i) "]
1320610[label="typeName\n _units "]
1320611[label="expressionName\n i "]
320612[label="methodDeclaration\n voidclear(){_units.clear();_ranks=null;} "]
420613[label="methodHeader\n voidclear() "]
520614[label="result\n void "]
520615[label="methodDeclarator\n clear() "]
420616[label="block\n {_units.clear();_ranks=null;} "]
520617[label="blockStatements\n _units.clear();_ranks=null; "]
620618[label="expressionStatement\n _units.clear(); "]
720619[label="methodInvocation\n _units.clear() "]
820620[label="typeName\n _units "]
620621[label="expressionStatement\n _ranks=null; "]
720622[label="assignment\n _ranks=null "]
820623[label="expressionName\n _ranks "]
820624[label="assignmentOperator\n = "]
820625[label="literal\n null "]
320626[label="fieldDeclaration\n privatestaticfinalintUNIT_SIZE=32; "]
420627[label="fieldModifier\n private "]
420628[label="fieldModifier\n static "]
420629[label="fieldModifier\n final "]
420630[label="integralType\n int "]
420631[label="variableDeclarator\n UNIT_SIZE=32 "]
520632[label="variableDeclaratorId\n UNIT_SIZE "]
520633[label="literal\n 32 "]
320634[label="methodDeclaration\n privatestaticintpopCount(intunit){unit=((unit&0xAAAAAAAA)>>>1)+(unit&0x55555555);unit=((unit&0xCCCCCCCC)>>>2)+(unit&0x33333333);unit=((unit>>>4)+unit)&0x0F0F0F0F;unit+=unit>>>8;unit+=unit>>>16;returnunit&0xFF;} "]
420635[label="methodModifier\n private "]
420636[label="methodModifier\n static "]
420637[label="methodHeader\n intpopCount(intunit) "]
520638[label="integralType\n int "]
520639[label="methodDeclarator\n popCount(intunit) "]
620640[label="formalParameter\n intunit "]
720641[label="integralType\n int "]
720642[label="variableDeclaratorId\n unit "]
420643[label="block\n {unit=((unit&0xAAAAAAAA)>>>1)+(unit&0x55555555);unit=((unit&0xCCCCCCCC)>>>2)+(unit&0x33333333);unit=((unit>>>4)+unit)&0x0F0F0F0F;unit+=unit>>>8;unit+=unit>>>16;returnunit&0xFF;} "]
520644[label="blockStatements\n unit=((unit&0xAAAAAAAA)>>>1)+(unit&0x55555555);unit=((unit&0xCCCCCCCC)>>>2)+(unit&0x33333333);unit=((unit>>>4)+unit)&0x0F0F0F0F;unit+=unit>>>8;unit+=unit>>>16;returnunit&0xFF; "]
620645[label="expressionStatement\n unit=((unit&0xAAAAAAAA)>>>1)+(unit&0x55555555); "]
720646[label="assignment\n unit=((unit&0xAAAAAAAA)>>>1)+(unit&0x55555555) "]
820647[label="expressionName\n unit "]
820648[label="assignmentOperator\n = "]
820649[label="additiveExpression\n ((unit&0xAAAAAAAA)>>>1)+(unit&0x55555555) "]
920650[label="primaryNoNewArray_lfno_primary\n ((unit&0xAAAAAAAA)>>>1) "]
1020651[label="shiftExpression\n (unit&0xAAAAAAAA)>>>1 "]
1120652[label="primaryNoNewArray_lfno_primary\n (unit&0xAAAAAAAA) "]
1220653[label="andExpression\n unit&0xAAAAAAAA "]
1320654[label="expressionName\n unit "]
1320655[label="literal\n 0xAAAAAAAA "]
1120656[label="literal\n 1 "]
920657[label="primaryNoNewArray_lfno_primary\n (unit&0x55555555) "]
1020658[label="andExpression\n unit&0x55555555 "]
1120659[label="expressionName\n unit "]
1120660[label="literal\n 0x55555555 "]
620661[label="expressionStatement\n unit=((unit&0xCCCCCCCC)>>>2)+(unit&0x33333333); "]
720662[label="assignment\n unit=((unit&0xCCCCCCCC)>>>2)+(unit&0x33333333) "]
820663[label="expressionName\n unit "]
820664[label="assignmentOperator\n = "]
820665[label="additiveExpression\n ((unit&0xCCCCCCCC)>>>2)+(unit&0x33333333) "]
920666[label="primaryNoNewArray_lfno_primary\n ((unit&0xCCCCCCCC)>>>2) "]
1020667[label="shiftExpression\n (unit&0xCCCCCCCC)>>>2 "]
1120668[label="primaryNoNewArray_lfno_primary\n (unit&0xCCCCCCCC) "]
1220669[label="andExpression\n unit&0xCCCCCCCC "]
1320670[label="expressionName\n unit "]
1320671[label="literal\n 0xCCCCCCCC "]
1120672[label="literal\n 2 "]
920673[label="primaryNoNewArray_lfno_primary\n (unit&0x33333333) "]
1020674[label="andExpression\n unit&0x33333333 "]
1120675[label="expressionName\n unit "]
1120676[label="literal\n 0x33333333 "]
620677[label="expressionStatement\n unit=((unit>>>4)+unit)&0x0F0F0F0F; "]
720678[label="assignment\n unit=((unit>>>4)+unit)&0x0F0F0F0F "]
820679[label="expressionName\n unit "]
820680[label="assignmentOperator\n = "]
820681[label="andExpression\n ((unit>>>4)+unit)&0x0F0F0F0F "]
920682[label="primaryNoNewArray_lfno_primary\n ((unit>>>4)+unit) "]
1020683[label="additiveExpression\n (unit>>>4)+unit "]
1120684[label="primaryNoNewArray_lfno_primary\n (unit>>>4) "]
1220685[label="shiftExpression\n unit>>>4 "]
1320686[label="expressionName\n unit "]
1320687[label="literal\n 4 "]
1120688[label="expressionName\n unit "]
920689[label="literal\n 0x0F0F0F0F "]
620690[label="expressionStatement\n unit+=unit>>>8; "]
720691[label="assignment\n unit+=unit>>>8 "]
820692[label="expressionName\n unit "]
820693[label="assignmentOperator\n += "]
820694[label="shiftExpression\n unit>>>8 "]
920695[label="expressionName\n unit "]
920696[label="literal\n 8 "]
620697[label="expressionStatement\n unit+=unit>>>16; "]
720698[label="assignment\n unit+=unit>>>16 "]
820699[label="expressionName\n unit "]
820700[label="assignmentOperator\n += "]
820701[label="shiftExpression\n unit>>>16 "]
920702[label="expressionName\n unit "]
920703[label="literal\n 16 "]
620704[label="returnStatement\n returnunit&0xFF; "]
720705[label="andExpression\n unit&0xFF "]
820706[label="expressionName\n unit "]
820707[label="literal\n 0xFF "]
320708[label="fieldDeclaration\n privateAutoIntPool_units=newAutoIntPool(); "]
420709[label="fieldModifier\n private "]
420710[label="unannClassType_lfno_unannClassOrInterfaceType\n AutoIntPool "]
420711[label="variableDeclarator\n _units=newAutoIntPool() "]
520712[label="variableDeclaratorId\n _units "]
520713[label="classInstanceCreationExpression_lfno_primary\n newAutoIntPool() "]
320714[label="fieldDeclaration\n privateint[]_ranks; "]
420715[label="fieldModifier\n private "]
420716[label="unannArrayType\n int[] "]
520717[label="integralType\n int "]
520718[label="dims\n [] "]
420719[label="variableDeclaratorId\n _ranks "]
320720[label="fieldDeclaration\n privateint_numOnes; "]
420721[label="fieldModifier\n private "]
420722[label="integralType\n int "]
420723[label="variableDeclaratorId\n _numOnes "]
320724[label="fieldDeclaration\n privateint_size; "]
420725[label="fieldModifier\n private "]
420726[label="integralType\n int "]
420727[label="variableDeclaratorId\n _size "]
020728[label="compilationUnit\n packagecom.hankcs.hanlp.classification.tokenizers;publicclassBlankTokenizerimplementsITokenizer{publicString[]segment(Stringtext){returntext.split(\"\\s\");}}<EOF> "]
120729[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.tokenizers; "]
220730[label="packageName\n com.hankcs.hanlp.classification.tokenizers "]
320731[label="packageName\n com.hankcs.hanlp.classification "]
420732[label="packageName\n com.hankcs.hanlp "]
520733[label="packageName\n com.hankcs "]
620734[label="packageName\n com "]
120735[label="normalClassDeclaration\n publicclassBlankTokenizerimplementsITokenizer{publicString[]segment(Stringtext){returntext.split(\"\\s\");}} "]
220736[label="classModifier\n public "]
220737[label="superinterfaces\n implementsITokenizer "]
320738[label="classType\n ITokenizer "]
220739[label="classBody\n {publicString[]segment(Stringtext){returntext.split(\"\\s\");}} "]
320740[label="methodDeclaration\n publicString[]segment(Stringtext){returntext.split(\"\\s\");} "]
420741[label="methodModifier\n public "]
420742[label="methodHeader\n String[]segment(Stringtext) "]
520743[label="unannArrayType\n String[] "]
620744[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
620745[label="dims\n [] "]
520746[label="methodDeclarator\n segment(Stringtext) "]
620747[label="formalParameter\n Stringtext "]
720748[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
720749[label="variableDeclaratorId\n text "]
420750[label="block\n {returntext.split(\"\\s\");} "]
520751[label="returnStatement\n returntext.split(\"\\s\"); "]
620752[label="methodInvocation_lfno_primary\n text.split(\"\\s\") "]
720753[label="typeName\n text "]
720754[label="literal\n \"\\s\" "]
020755[label="compilationUnit\n packagecom.hankcs.hanlp.summary;importjava.util.List;importjava.util.Map;importjava.util.TreeMap;publicclassBM25{intD;doubleavgdl;List<List<String>>docs;Map<String,Integer>[]f;Map<String,Integer>df;Map<String,Double>idf;finalstaticfloatk1=1.5f;finalstaticfloatb=0.75f;publicBM25(List<List<String>>docs){this.docs=docs;D=docs.size();for(List<String>sentence:docs){avgdl+=sentence.size();}avgdl/=D;f=newMap[D];df=newTreeMap<String,Integer>();idf=newTreeMap<String,Double>();init();}privatevoidinit(){intindex=0;for(List<String>sentence:docs){Map<String,Integer>tf=newTreeMap<String,Integer>();for(Stringword:sentence){Integerfreq=tf.get(word);freq=(freq==null?0:freq)+1;tf.put(word,freq);}f[index]=tf;for(Map.Entry<String,Integer>entry:tf.entrySet()){Stringword=entry.getKey();Integerfreq=df.get(word);freq=(freq==null?0:freq)+1;df.put(word,freq);}++index;}for(Map.Entry<String,Integer>entry:df.entrySet()){Stringword=entry.getKey();Integerfreq=entry.getValue();idf.put(word,Math.log(D-freq+0.5)-Math.log(freq+0.5));}}publicdoublesim(List<String>sentence,intindex){doublescore=0;for(Stringword:sentence){if(!f[index].containsKey(word))continue;intd=docs.get(index).size();Integerwf=f[index].get(word);score+=(idf.get(word)*wf*(k1+1)/(wf+k1*(1-b+b*d/avgdl)));}returnscore;}publicdouble[]simAll(List<String>sentence){double[]scores=newdouble[D];for(inti=0;i<D;++i){scores[i]=sim(sentence,i);}returnscores;}}<EOF> "]
120756[label="packageDeclaration\n packagecom.hankcs.hanlp.summary; "]
220757[label="packageName\n com.hankcs.hanlp.summary "]
320758[label="packageName\n com.hankcs.hanlp "]
420759[label="packageName\n com.hankcs "]
520760[label="packageName\n com "]
120761[label="singleTypeImportDeclaration\n importjava.util.List; "]
220762[label="typeName\n java.util.List "]
320763[label="packageOrTypeName\n java.util "]
420764[label="packageOrTypeName\n java "]
120765[label="singleTypeImportDeclaration\n importjava.util.Map; "]
220766[label="typeName\n java.util.Map "]
320767[label="packageOrTypeName\n java.util "]
420768[label="packageOrTypeName\n java "]
120769[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
220770[label="typeName\n java.util.TreeMap "]
320771[label="packageOrTypeName\n java.util "]
420772[label="packageOrTypeName\n java "]
120773[label="normalClassDeclaration\n publicclassBM25{intD;doubleavgdl;List<List<String>>docs;Map<String,Integer>[]f;Map<String,Integer>df;Map<String,Double>idf;finalstaticfloatk1=1.5f;finalstaticfloatb=0.75f;publicBM25(List<List<String>>docs){this.docs=docs;D=docs.size();for(List<String>sentence:docs){avgdl+=sentence.size();}avgdl/=D;f=newMap[D];df=newTreeMap<String,Integer>();idf=newTreeMap<String,Double>();init();}privatevoidinit(){intindex=0;for(List<String>sentence:docs){Map<String,Integer>tf=newTreeMap<String,Integer>();for(Stringword:sentence){Integerfreq=tf.get(word);freq=(freq==null?0:freq)+1;tf.put(word,freq);}f[index]=tf;for(Map.Entry<String,Integer>entry:tf.entrySet()){Stringword=entry.getKey();Integerfreq=df.get(word);freq=(freq==null?0:freq)+1;df.put(word,freq);}++index;}for(Map.Entry<String,Integer>entry:df.entrySet()){Stringword=entry.getKey();Integerfreq=entry.getValue();idf.put(word,Math.log(D-freq+0.5)-Math.log(freq+0.5));}}publicdoublesim(List<String>sentence,intindex){doublescore=0;for(Stringword:sentence){if(!f[index].containsKey(word))continue;intd=docs.get(index).size();Integerwf=f[index].get(word);score+=(idf.get(word)*wf*(k1+1)/(wf+k1*(1-b+b*d/avgdl)));}returnscore;}publicdouble[]simAll(List<String>sentence){double[]scores=newdouble[D];for(inti=0;i<D;++i){scores[i]=sim(sentence,i);}returnscores;}} "]
220774[label="classModifier\n public "]
220775[label="classBody\n {intD;doubleavgdl;List<List<String>>docs;Map<String,Integer>[]f;Map<String,Integer>df;Map<String,Double>idf;finalstaticfloatk1=1.5f;finalstaticfloatb=0.75f;publicBM25(List<List<String>>docs){this.docs=docs;D=docs.size();for(List<String>sentence:docs){avgdl+=sentence.size();}avgdl/=D;f=newMap[D];df=newTreeMap<String,Integer>();idf=newTreeMap<String,Double>();init();}privatevoidinit(){intindex=0;for(List<String>sentence:docs){Map<String,Integer>tf=newTreeMap<String,Integer>();for(Stringword:sentence){Integerfreq=tf.get(word);freq=(freq==null?0:freq)+1;tf.put(word,freq);}f[index]=tf;for(Map.Entry<String,Integer>entry:tf.entrySet()){Stringword=entry.getKey();Integerfreq=df.get(word);freq=(freq==null?0:freq)+1;df.put(word,freq);}++index;}for(Map.Entry<String,Integer>entry:df.entrySet()){Stringword=entry.getKey();Integerfreq=entry.getValue();idf.put(word,Math.log(D-freq+0.5)-Math.log(freq+0.5));}}publicdoublesim(List<String>sentence,intindex){doublescore=0;for(Stringword:sentence){if(!f[index].containsKey(word))continue;intd=docs.get(index).size();Integerwf=f[index].get(word);score+=(idf.get(word)*wf*(k1+1)/(wf+k1*(1-b+b*d/avgdl)));}returnscore;}publicdouble[]simAll(List<String>sentence){double[]scores=newdouble[D];for(inti=0;i<D;++i){scores[i]=sim(sentence,i);}returnscores;}} "]
320776[label="fieldDeclaration\n intD; "]
420777[label="integralType\n int "]
420778[label="variableDeclaratorId\n D "]
320779[label="fieldDeclaration\n doubleavgdl; "]
420780[label="floatingPointType\n double "]
420781[label="variableDeclaratorId\n avgdl "]
320782[label="fieldDeclaration\n List<List<String>>docs; "]
420783[label="unannClassType_lfno_unannClassOrInterfaceType\n List<List<String>> "]
520784[label="typeArguments\n <List<String>> "]
620785[label="classType_lfno_classOrInterfaceType\n List<String> "]
720786[label="typeArguments\n <String> "]
820787[label="classType_lfno_classOrInterfaceType\n String "]
420788[label="variableDeclaratorId\n docs "]
320789[label="fieldDeclaration\n Map<String,Integer>[]f; "]
420790[label="unannArrayType\n Map<String,Integer>[] "]
520791[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Integer> "]
620792[label="typeArguments\n <String,Integer> "]
720793[label="typeArgumentList\n String,Integer "]
820794[label="classType_lfno_classOrInterfaceType\n String "]
820795[label="classType_lfno_classOrInterfaceType\n Integer "]
520796[label="dims\n [] "]
420797[label="variableDeclaratorId\n f "]
320798[label="fieldDeclaration\n Map<String,Integer>df; "]
420799[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Integer> "]
520800[label="typeArguments\n <String,Integer> "]
620801[label="typeArgumentList\n String,Integer "]
720802[label="classType_lfno_classOrInterfaceType\n String "]
720803[label="classType_lfno_classOrInterfaceType\n Integer "]
420804[label="variableDeclaratorId\n df "]
320805[label="fieldDeclaration\n Map<String,Double>idf; "]
420806[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
520807[label="typeArguments\n <String,Double> "]
620808[label="typeArgumentList\n String,Double "]
720809[label="classType_lfno_classOrInterfaceType\n String "]
720810[label="classType_lfno_classOrInterfaceType\n Double "]
420811[label="variableDeclaratorId\n idf "]
320812[label="fieldDeclaration\n finalstaticfloatk1=1.5f; "]
420813[label="fieldModifier\n final "]
420814[label="fieldModifier\n static "]
420815[label="floatingPointType\n float "]
420816[label="variableDeclarator\n k1=1.5f "]
520817[label="variableDeclaratorId\n k1 "]
520818[label="literal\n 1.5f "]
320819[label="fieldDeclaration\n finalstaticfloatb=0.75f; "]
420820[label="fieldModifier\n final "]
420821[label="fieldModifier\n static "]
420822[label="floatingPointType\n float "]
420823[label="variableDeclarator\n b=0.75f "]
520824[label="variableDeclaratorId\n b "]
520825[label="literal\n 0.75f "]
320826[label="constructorDeclaration\n publicBM25(List<List<String>>docs){this.docs=docs;D=docs.size();for(List<String>sentence:docs){avgdl+=sentence.size();}avgdl/=D;f=newMap[D];df=newTreeMap<String,Integer>();idf=newTreeMap<String,Double>();init();} "]
420827[label="constructorModifier\n public "]
420828[label="constructorDeclarator\n BM25(List<List<String>>docs) "]
520829[label="simpleTypeName\n BM25 "]
520830[label="formalParameter\n List<List<String>>docs "]
620831[label="unannClassType_lfno_unannClassOrInterfaceType\n List<List<String>> "]
720832[label="typeArguments\n <List<String>> "]
820833[label="classType_lfno_classOrInterfaceType\n List<String> "]
920834[label="typeArguments\n <String> "]
1020835[label="classType_lfno_classOrInterfaceType\n String "]
620836[label="variableDeclaratorId\n docs "]
420837[label="constructorBody\n {this.docs=docs;D=docs.size();for(List<String>sentence:docs){avgdl+=sentence.size();}avgdl/=D;f=newMap[D];df=newTreeMap<String,Integer>();idf=newTreeMap<String,Double>();init();} "]
520838[label="blockStatements\n this.docs=docs;D=docs.size();for(List<String>sentence:docs){avgdl+=sentence.size();}avgdl/=D;f=newMap[D];df=newTreeMap<String,Integer>();idf=newTreeMap<String,Double>();init(); "]
620839[label="expressionStatement\n this.docs=docs; "]
720840[label="assignment\n this.docs=docs "]
820841[label="fieldAccess\n this.docs "]
920842[label="primaryNoNewArray_lfno_primary\n this "]
820843[label="assignmentOperator\n = "]
820844[label="expressionName\n docs "]
620845[label="expressionStatement\n D=docs.size(); "]
720846[label="assignment\n D=docs.size() "]
820847[label="expressionName\n D "]
820848[label="assignmentOperator\n = "]
820849[label="methodInvocation_lfno_primary\n docs.size() "]
920850[label="typeName\n docs "]
620851[label="enhancedForStatement\n for(List<String>sentence:docs){avgdl+=sentence.size();} "]
720852[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
820853[label="typeArguments\n <String> "]
920854[label="classType_lfno_classOrInterfaceType\n String "]
720855[label="variableDeclaratorId\n sentence "]
720856[label="expressionName\n docs "]
720857[label="block\n {avgdl+=sentence.size();} "]
820858[label="expressionStatement\n avgdl+=sentence.size(); "]
920859[label="assignment\n avgdl+=sentence.size() "]
1020860[label="expressionName\n avgdl "]
1020861[label="assignmentOperator\n += "]
1020862[label="methodInvocation_lfno_primary\n sentence.size() "]
1120863[label="typeName\n sentence "]
620864[label="expressionStatement\n avgdl/=D; "]
720865[label="assignment\n avgdl/=D "]
820866[label="expressionName\n avgdl "]
820867[label="assignmentOperator\n /= "]
820868[label="expressionName\n D "]
620869[label="expressionStatement\n f=newMap[D]; "]
720870[label="assignment\n f=newMap[D] "]
820871[label="expressionName\n f "]
820872[label="assignmentOperator\n = "]
820873[label="arrayCreationExpression\n newMap[D] "]
920874[label="classType_lfno_classOrInterfaceType\n Map "]
920875[label="dimExpr\n [D] "]
1020876[label="expressionName\n D "]
620877[label="expressionStatement\n df=newTreeMap<String,Integer>(); "]
720878[label="assignment\n df=newTreeMap<String,Integer>() "]
820879[label="expressionName\n df "]
820880[label="assignmentOperator\n = "]
820881[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,Integer>() "]
920882[label="typeArguments\n <String,Integer> "]
1020883[label="typeArgumentList\n String,Integer "]
1120884[label="classType_lfno_classOrInterfaceType\n String "]
1120885[label="classType_lfno_classOrInterfaceType\n Integer "]
620886[label="expressionStatement\n idf=newTreeMap<String,Double>(); "]
720887[label="assignment\n idf=newTreeMap<String,Double>() "]
820888[label="expressionName\n idf "]
820889[label="assignmentOperator\n = "]
820890[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,Double>() "]
920891[label="typeArguments\n <String,Double> "]
1020892[label="typeArgumentList\n String,Double "]
1120893[label="classType_lfno_classOrInterfaceType\n String "]
1120894[label="classType_lfno_classOrInterfaceType\n Double "]
620895[label="expressionStatement\n init(); "]
720896[label="methodInvocation\n init() "]
820897[label="methodName\n init "]
320898[label="methodDeclaration\n privatevoidinit(){intindex=0;for(List<String>sentence:docs){Map<String,Integer>tf=newTreeMap<String,Integer>();for(Stringword:sentence){Integerfreq=tf.get(word);freq=(freq==null?0:freq)+1;tf.put(word,freq);}f[index]=tf;for(Map.Entry<String,Integer>entry:tf.entrySet()){Stringword=entry.getKey();Integerfreq=df.get(word);freq=(freq==null?0:freq)+1;df.put(word,freq);}++index;}for(Map.Entry<String,Integer>entry:df.entrySet()){Stringword=entry.getKey();Integerfreq=entry.getValue();idf.put(word,Math.log(D-freq+0.5)-Math.log(freq+0.5));}} "]
420899[label="methodModifier\n private "]
420900[label="methodHeader\n voidinit() "]
520901[label="result\n void "]
520902[label="methodDeclarator\n init() "]
420903[label="block\n {intindex=0;for(List<String>sentence:docs){Map<String,Integer>tf=newTreeMap<String,Integer>();for(Stringword:sentence){Integerfreq=tf.get(word);freq=(freq==null?0:freq)+1;tf.put(word,freq);}f[index]=tf;for(Map.Entry<String,Integer>entry:tf.entrySet()){Stringword=entry.getKey();Integerfreq=df.get(word);freq=(freq==null?0:freq)+1;df.put(word,freq);}++index;}for(Map.Entry<String,Integer>entry:df.entrySet()){Stringword=entry.getKey();Integerfreq=entry.getValue();idf.put(word,Math.log(D-freq+0.5)-Math.log(freq+0.5));}} "]
520904[label="blockStatements\n intindex=0;for(List<String>sentence:docs){Map<String,Integer>tf=newTreeMap<String,Integer>();for(Stringword:sentence){Integerfreq=tf.get(word);freq=(freq==null?0:freq)+1;tf.put(word,freq);}f[index]=tf;for(Map.Entry<String,Integer>entry:tf.entrySet()){Stringword=entry.getKey();Integerfreq=df.get(word);freq=(freq==null?0:freq)+1;df.put(word,freq);}++index;}for(Map.Entry<String,Integer>entry:df.entrySet()){Stringword=entry.getKey();Integerfreq=entry.getValue();idf.put(word,Math.log(D-freq+0.5)-Math.log(freq+0.5));} "]
620905[label="localVariableDeclarationStatement\n intindex=0; "]
720906[label="localVariableDeclaration\n intindex=0 "]
820907[label="integralType\n int "]
820908[label="variableDeclarator\n index=0 "]
920909[label="variableDeclaratorId\n index "]
920910[label="literal\n 0 "]
620911[label="enhancedForStatement\n for(List<String>sentence:docs){Map<String,Integer>tf=newTreeMap<String,Integer>();for(Stringword:sentence){Integerfreq=tf.get(word);freq=(freq==null?0:freq)+1;tf.put(word,freq);}f[index]=tf;for(Map.Entry<String,Integer>entry:tf.entrySet()){Stringword=entry.getKey();Integerfreq=df.get(word);freq=(freq==null?0:freq)+1;df.put(word,freq);}++index;} "]
720912[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
820913[label="typeArguments\n <String> "]
920914[label="classType_lfno_classOrInterfaceType\n String "]
720915[label="variableDeclaratorId\n sentence "]
720916[label="expressionName\n docs "]
720917[label="block\n {Map<String,Integer>tf=newTreeMap<String,Integer>();for(Stringword:sentence){Integerfreq=tf.get(word);freq=(freq==null?0:freq)+1;tf.put(word,freq);}f[index]=tf;for(Map.Entry<String,Integer>entry:tf.entrySet()){Stringword=entry.getKey();Integerfreq=df.get(word);freq=(freq==null?0:freq)+1;df.put(word,freq);}++index;} "]
820918[label="blockStatements\n Map<String,Integer>tf=newTreeMap<String,Integer>();for(Stringword:sentence){Integerfreq=tf.get(word);freq=(freq==null?0:freq)+1;tf.put(word,freq);}f[index]=tf;for(Map.Entry<String,Integer>entry:tf.entrySet()){Stringword=entry.getKey();Integerfreq=df.get(word);freq=(freq==null?0:freq)+1;df.put(word,freq);}++index; "]
920919[label="localVariableDeclarationStatement\n Map<String,Integer>tf=newTreeMap<String,Integer>(); "]
1020920[label="localVariableDeclaration\n Map<String,Integer>tf=newTreeMap<String,Integer>() "]
1120921[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Integer> "]
1220922[label="typeArguments\n <String,Integer> "]
1320923[label="typeArgumentList\n String,Integer "]
1420924[label="classType_lfno_classOrInterfaceType\n String "]
1420925[label="classType_lfno_classOrInterfaceType\n Integer "]
1120926[label="variableDeclarator\n tf=newTreeMap<String,Integer>() "]
1220927[label="variableDeclaratorId\n tf "]
1220928[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,Integer>() "]
1320929[label="typeArguments\n <String,Integer> "]
1420930[label="typeArgumentList\n String,Integer "]
1520931[label="classType_lfno_classOrInterfaceType\n String "]
1520932[label="classType_lfno_classOrInterfaceType\n Integer "]
920933[label="enhancedForStatement\n for(Stringword:sentence){Integerfreq=tf.get(word);freq=(freq==null?0:freq)+1;tf.put(word,freq);} "]
1020934[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1020935[label="variableDeclaratorId\n word "]
1020936[label="expressionName\n sentence "]
1020937[label="block\n {Integerfreq=tf.get(word);freq=(freq==null?0:freq)+1;tf.put(word,freq);} "]
1120938[label="blockStatements\n Integerfreq=tf.get(word);freq=(freq==null?0:freq)+1;tf.put(word,freq); "]
1220939[label="localVariableDeclarationStatement\n Integerfreq=tf.get(word); "]
1320940[label="localVariableDeclaration\n Integerfreq=tf.get(word) "]
1420941[label="unannClassType_lfno_unannClassOrInterfaceType\n Integer "]
1420942[label="variableDeclarator\n freq=tf.get(word) "]
1520943[label="variableDeclaratorId\n freq "]
1520944[label="methodInvocation_lfno_primary\n tf.get(word) "]
1620945[label="typeName\n tf "]
1620946[label="expressionName\n word "]
1220947[label="expressionStatement\n freq=(freq==null?0:freq)+1; "]
1320948[label="assignment\n freq=(freq==null?0:freq)+1 "]
1420949[label="expressionName\n freq "]
1420950[label="assignmentOperator\n = "]
1420951[label="additiveExpression\n (freq==null?0:freq)+1 "]
1520952[label="primaryNoNewArray_lfno_primary\n (freq==null?0:freq) "]
1620953[label="conditionalExpression\n freq==null?0:freq "]
1720954[label="equalityExpression\n freq==null "]
1820955[label="expressionName\n freq "]
1820956[label="literal\n null "]
1720957[label="literal\n 0 "]
1720958[label="expressionName\n freq "]
1520959[label="literal\n 1 "]
1220960[label="expressionStatement\n tf.put(word,freq); "]
1320961[label="methodInvocation\n tf.put(word,freq) "]
1420962[label="typeName\n tf "]
1420963[label="argumentList\n word,freq "]
1520964[label="expressionName\n word "]
1520965[label="expressionName\n freq "]
920966[label="expressionStatement\n f[index]=tf; "]
1020967[label="assignment\n f[index]=tf "]
1120968[label="arrayAccess\n f[index] "]
1220969[label="expressionName\n f "]
1220970[label="expressionName\n index "]
1120971[label="assignmentOperator\n = "]
1120972[label="expressionName\n tf "]
920973[label="enhancedForStatement\n for(Map.Entry<String,Integer>entry:tf.entrySet()){Stringword=entry.getKey();Integerfreq=df.get(word);freq=(freq==null?0:freq)+1;df.put(word,freq);} "]
1020974[label="unannClassOrInterfaceType\n Map.Entry<String,Integer> "]
1120975[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
1120976[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,Integer> "]
1220977[label="typeArguments\n <String,Integer> "]
1320978[label="typeArgumentList\n String,Integer "]
1420979[label="classType_lfno_classOrInterfaceType\n String "]
1420980[label="classType_lfno_classOrInterfaceType\n Integer "]
1020981[label="variableDeclaratorId\n entry "]
1020982[label="methodInvocation_lfno_primary\n tf.entrySet() "]
1120983[label="typeName\n tf "]
1020984[label="block\n {Stringword=entry.getKey();Integerfreq=df.get(word);freq=(freq==null?0:freq)+1;df.put(word,freq);} "]
1120985[label="blockStatements\n Stringword=entry.getKey();Integerfreq=df.get(word);freq=(freq==null?0:freq)+1;df.put(word,freq); "]
1220986[label="localVariableDeclarationStatement\n Stringword=entry.getKey(); "]
1320987[label="localVariableDeclaration\n Stringword=entry.getKey() "]
1420988[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1420989[label="variableDeclarator\n word=entry.getKey() "]
1520990[label="variableDeclaratorId\n word "]
1520991[label="methodInvocation_lfno_primary\n entry.getKey() "]
1620992[label="typeName\n entry "]
1220993[label="localVariableDeclarationStatement\n Integerfreq=df.get(word); "]
1320994[label="localVariableDeclaration\n Integerfreq=df.get(word) "]
1420995[label="unannClassType_lfno_unannClassOrInterfaceType\n Integer "]
1420996[label="variableDeclarator\n freq=df.get(word) "]
1520997[label="variableDeclaratorId\n freq "]
1520998[label="methodInvocation_lfno_primary\n df.get(word) "]
1620999[label="typeName\n df "]
1621000[label="expressionName\n word "]
1221001[label="expressionStatement\n freq=(freq==null?0:freq)+1; "]
1321002[label="assignment\n freq=(freq==null?0:freq)+1 "]
1421003[label="expressionName\n freq "]
1421004[label="assignmentOperator\n = "]
1421005[label="additiveExpression\n (freq==null?0:freq)+1 "]
1521006[label="primaryNoNewArray_lfno_primary\n (freq==null?0:freq) "]
1621007[label="conditionalExpression\n freq==null?0:freq "]
1721008[label="equalityExpression\n freq==null "]
1821009[label="expressionName\n freq "]
1821010[label="literal\n null "]
1721011[label="literal\n 0 "]
1721012[label="expressionName\n freq "]
1521013[label="literal\n 1 "]
1221014[label="expressionStatement\n df.put(word,freq); "]
1321015[label="methodInvocation\n df.put(word,freq) "]
1421016[label="typeName\n df "]
1421017[label="argumentList\n word,freq "]
1521018[label="expressionName\n word "]
1521019[label="expressionName\n freq "]
921020[label="expressionStatement\n ++index; "]
1021021[label="preIncrementExpression\n ++index "]
1121022[label="expressionName\n index "]
621023[label="enhancedForStatement\n for(Map.Entry<String,Integer>entry:df.entrySet()){Stringword=entry.getKey();Integerfreq=entry.getValue();idf.put(word,Math.log(D-freq+0.5)-Math.log(freq+0.5));} "]
721024[label="unannClassOrInterfaceType\n Map.Entry<String,Integer> "]
821025[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
821026[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,Integer> "]
921027[label="typeArguments\n <String,Integer> "]
1021028[label="typeArgumentList\n String,Integer "]
1121029[label="classType_lfno_classOrInterfaceType\n String "]
1121030[label="classType_lfno_classOrInterfaceType\n Integer "]
721031[label="variableDeclaratorId\n entry "]
721032[label="methodInvocation_lfno_primary\n df.entrySet() "]
821033[label="typeName\n df "]
721034[label="block\n {Stringword=entry.getKey();Integerfreq=entry.getValue();idf.put(word,Math.log(D-freq+0.5)-Math.log(freq+0.5));} "]
821035[label="blockStatements\n Stringword=entry.getKey();Integerfreq=entry.getValue();idf.put(word,Math.log(D-freq+0.5)-Math.log(freq+0.5)); "]
921036[label="localVariableDeclarationStatement\n Stringword=entry.getKey(); "]
1021037[label="localVariableDeclaration\n Stringword=entry.getKey() "]
1121038[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1121039[label="variableDeclarator\n word=entry.getKey() "]
1221040[label="variableDeclaratorId\n word "]
1221041[label="methodInvocation_lfno_primary\n entry.getKey() "]
1321042[label="typeName\n entry "]
921043[label="localVariableDeclarationStatement\n Integerfreq=entry.getValue(); "]
1021044[label="localVariableDeclaration\n Integerfreq=entry.getValue() "]
1121045[label="unannClassType_lfno_unannClassOrInterfaceType\n Integer "]
1121046[label="variableDeclarator\n freq=entry.getValue() "]
1221047[label="variableDeclaratorId\n freq "]
1221048[label="methodInvocation_lfno_primary\n entry.getValue() "]
1321049[label="typeName\n entry "]
921050[label="expressionStatement\n idf.put(word,Math.log(D-freq+0.5)-Math.log(freq+0.5)); "]
1021051[label="methodInvocation\n idf.put(word,Math.log(D-freq+0.5)-Math.log(freq+0.5)) "]
1121052[label="typeName\n idf "]
1121053[label="argumentList\n word,Math.log(D-freq+0.5)-Math.log(freq+0.5) "]
1221054[label="expressionName\n word "]
1221055[label="additiveExpression\n Math.log(D-freq+0.5)-Math.log(freq+0.5) "]
1321056[label="methodInvocation_lfno_primary\n Math.log(D-freq+0.5) "]
1421057[label="typeName\n Math "]
1421058[label="additiveExpression\n D-freq+0.5 "]
1521059[label="additiveExpression\n D-freq "]
1621060[label="expressionName\n D "]
1621061[label="expressionName\n freq "]
1521062[label="literal\n 0.5 "]
1321063[label="methodInvocation_lfno_primary\n Math.log(freq+0.5) "]
1421064[label="typeName\n Math "]
1421065[label="additiveExpression\n freq+0.5 "]
1521066[label="expressionName\n freq "]
1521067[label="literal\n 0.5 "]
321068[label="methodDeclaration\n publicdoublesim(List<String>sentence,intindex){doublescore=0;for(Stringword:sentence){if(!f[index].containsKey(word))continue;intd=docs.get(index).size();Integerwf=f[index].get(word);score+=(idf.get(word)*wf*(k1+1)/(wf+k1*(1-b+b*d/avgdl)));}returnscore;} "]
421069[label="methodModifier\n public "]
421070[label="methodHeader\n doublesim(List<String>sentence,intindex) "]
521071[label="floatingPointType\n double "]
521072[label="methodDeclarator\n sim(List<String>sentence,intindex) "]
621073[label="formalParameterList\n List<String>sentence,intindex "]
721074[label="formalParameter\n List<String>sentence "]
821075[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
921076[label="typeArguments\n <String> "]
1021077[label="classType_lfno_classOrInterfaceType\n String "]
821078[label="variableDeclaratorId\n sentence "]
721079[label="formalParameter\n intindex "]
821080[label="integralType\n int "]
821081[label="variableDeclaratorId\n index "]
421082[label="block\n {doublescore=0;for(Stringword:sentence){if(!f[index].containsKey(word))continue;intd=docs.get(index).size();Integerwf=f[index].get(word);score+=(idf.get(word)*wf*(k1+1)/(wf+k1*(1-b+b*d/avgdl)));}returnscore;} "]
521083[label="blockStatements\n doublescore=0;for(Stringword:sentence){if(!f[index].containsKey(word))continue;intd=docs.get(index).size();Integerwf=f[index].get(word);score+=(idf.get(word)*wf*(k1+1)/(wf+k1*(1-b+b*d/avgdl)));}returnscore; "]
621084[label="localVariableDeclarationStatement\n doublescore=0; "]
721085[label="localVariableDeclaration\n doublescore=0 "]
821086[label="floatingPointType\n double "]
821087[label="variableDeclarator\n score=0 "]
921088[label="variableDeclaratorId\n score "]
921089[label="literal\n 0 "]
621090[label="enhancedForStatement\n for(Stringword:sentence){if(!f[index].containsKey(word))continue;intd=docs.get(index).size();Integerwf=f[index].get(word);score+=(idf.get(word)*wf*(k1+1)/(wf+k1*(1-b+b*d/avgdl)));} "]
721091[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
721092[label="variableDeclaratorId\n word "]
721093[label="expressionName\n sentence "]
721094[label="block\n {if(!f[index].containsKey(word))continue;intd=docs.get(index).size();Integerwf=f[index].get(word);score+=(idf.get(word)*wf*(k1+1)/(wf+k1*(1-b+b*d/avgdl)));} "]
821095[label="blockStatements\n if(!f[index].containsKey(word))continue;intd=docs.get(index).size();Integerwf=f[index].get(word);score+=(idf.get(word)*wf*(k1+1)/(wf+k1*(1-b+b*d/avgdl))); "]
921096[label="ifThenStatement\n if(!f[index].containsKey(word))continue; "]
1021097[label="unaryExpressionNotPlusMinus\n !f[index].containsKey(word) "]
1121098[label="primary\n f[index].containsKey(word) "]
1221099[label="arrayAccess_lfno_primary\n f[index] "]
1321100[label="expressionName\n f "]
1321101[label="expressionName\n index "]
1221102[label="methodInvocation_lf_primary\n .containsKey(word) "]
1321103[label="expressionName\n word "]
1021104[label="continueStatement\n continue; "]
921105[label="localVariableDeclarationStatement\n intd=docs.get(index).size(); "]
1021106[label="localVariableDeclaration\n intd=docs.get(index).size() "]
1121107[label="integralType\n int "]
1121108[label="variableDeclarator\n d=docs.get(index).size() "]
1221109[label="variableDeclaratorId\n d "]
1221110[label="primary\n docs.get(index).size() "]
1321111[label="methodInvocation_lfno_primary\n docs.get(index) "]
1421112[label="typeName\n docs "]
1421113[label="expressionName\n index "]
1321114[label="methodInvocation_lf_primary\n .size() "]
921115[label="localVariableDeclarationStatement\n Integerwf=f[index].get(word); "]
1021116[label="localVariableDeclaration\n Integerwf=f[index].get(word) "]
1121117[label="unannClassType_lfno_unannClassOrInterfaceType\n Integer "]
1121118[label="variableDeclarator\n wf=f[index].get(word) "]
1221119[label="variableDeclaratorId\n wf "]
1221120[label="primary\n f[index].get(word) "]
1321121[label="arrayAccess_lfno_primary\n f[index] "]
1421122[label="expressionName\n f "]
1421123[label="expressionName\n index "]
1321124[label="methodInvocation_lf_primary\n .get(word) "]
1421125[label="expressionName\n word "]
921126[label="expressionStatement\n score+=(idf.get(word)*wf*(k1+1)/(wf+k1*(1-b+b*d/avgdl))); "]
1021127[label="assignment\n score+=(idf.get(word)*wf*(k1+1)/(wf+k1*(1-b+b*d/avgdl))) "]
1121128[label="expressionName\n score "]
1121129[label="assignmentOperator\n += "]
1121130[label="primaryNoNewArray_lfno_primary\n (idf.get(word)*wf*(k1+1)/(wf+k1*(1-b+b*d/avgdl))) "]
1221131[label="multiplicativeExpression\n idf.get(word)*wf*(k1+1)/(wf+k1*(1-b+b*d/avgdl)) "]
1321132[label="multiplicativeExpression\n idf.get(word)*wf*(k1+1) "]
1421133[label="multiplicativeExpression\n idf.get(word)*wf "]
1521134[label="methodInvocation_lfno_primary\n idf.get(word) "]
1621135[label="typeName\n idf "]
1621136[label="expressionName\n word "]
1521137[label="expressionName\n wf "]
1421138[label="primaryNoNewArray_lfno_primary\n (k1+1) "]
1521139[label="additiveExpression\n k1+1 "]
1621140[label="expressionName\n k1 "]
1621141[label="literal\n 1 "]
1321142[label="primaryNoNewArray_lfno_primary\n (wf+k1*(1-b+b*d/avgdl)) "]
1421143[label="additiveExpression\n wf+k1*(1-b+b*d/avgdl) "]
1521144[label="expressionName\n wf "]
1521145[label="multiplicativeExpression\n k1*(1-b+b*d/avgdl) "]
1621146[label="expressionName\n k1 "]
1621147[label="primaryNoNewArray_lfno_primary\n (1-b+b*d/avgdl) "]
1721148[label="additiveExpression\n 1-b+b*d/avgdl "]
1821149[label="additiveExpression\n 1-b "]
1921150[label="literal\n 1 "]
1921151[label="expressionName\n b "]
1821152[label="multiplicativeExpression\n b*d/avgdl "]
1921153[label="multiplicativeExpression\n b*d "]
2021154[label="expressionName\n b "]
2021155[label="expressionName\n d "]
1921156[label="expressionName\n avgdl "]
621157[label="returnStatement\n returnscore; "]
721158[label="expressionName\n score "]
321159[label="methodDeclaration\n publicdouble[]simAll(List<String>sentence){double[]scores=newdouble[D];for(inti=0;i<D;++i){scores[i]=sim(sentence,i);}returnscores;} "]
421160[label="methodModifier\n public "]
421161[label="methodHeader\n double[]simAll(List<String>sentence) "]
521162[label="unannArrayType\n double[] "]
621163[label="floatingPointType\n double "]
621164[label="dims\n [] "]
521165[label="methodDeclarator\n simAll(List<String>sentence) "]
621166[label="formalParameter\n List<String>sentence "]
721167[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
821168[label="typeArguments\n <String> "]
921169[label="classType_lfno_classOrInterfaceType\n String "]
721170[label="variableDeclaratorId\n sentence "]
421171[label="block\n {double[]scores=newdouble[D];for(inti=0;i<D;++i){scores[i]=sim(sentence,i);}returnscores;} "]
521172[label="blockStatements\n double[]scores=newdouble[D];for(inti=0;i<D;++i){scores[i]=sim(sentence,i);}returnscores; "]
621173[label="localVariableDeclarationStatement\n double[]scores=newdouble[D]; "]
721174[label="localVariableDeclaration\n double[]scores=newdouble[D] "]
821175[label="unannArrayType\n double[] "]
921176[label="floatingPointType\n double "]
921177[label="dims\n [] "]
821178[label="variableDeclarator\n scores=newdouble[D] "]
921179[label="variableDeclaratorId\n scores "]
921180[label="arrayCreationExpression\n newdouble[D] "]
1021181[label="floatingPointType\n double "]
1021182[label="dimExpr\n [D] "]
1121183[label="expressionName\n D "]
621184[label="basicForStatement\n for(inti=0;i<D;++i){scores[i]=sim(sentence,i);} "]
721185[label="localVariableDeclaration\n inti=0 "]
821186[label="integralType\n int "]
821187[label="variableDeclarator\n i=0 "]
921188[label="variableDeclaratorId\n i "]
921189[label="literal\n 0 "]
721190[label="relationalExpression\n i<D "]
821191[label="expressionName\n i "]
821192[label="expressionName\n D "]
721193[label="preIncrementExpression\n ++i "]
821194[label="expressionName\n i "]
721195[label="block\n {scores[i]=sim(sentence,i);} "]
821196[label="expressionStatement\n scores[i]=sim(sentence,i); "]
921197[label="assignment\n scores[i]=sim(sentence,i) "]
1021198[label="arrayAccess\n scores[i] "]
1121199[label="expressionName\n scores "]
1121200[label="expressionName\n i "]
1021201[label="assignmentOperator\n = "]
1021202[label="methodInvocation_lfno_primary\n sim(sentence,i) "]
1121203[label="methodName\n sim "]
1121204[label="argumentList\n sentence,i "]
1221205[label="expressionName\n sentence "]
1221206[label="expressionName\n i "]
621207[label="returnStatement\n returnscores; "]
721208[label="expressionName\n scores "]
021209[label="compilationUnit\n packagecom.hankcs.hanlp.corpus.io;importcom.hankcs.hanlp.utility.ByteUtil;importstaticcom.hankcs.hanlp.utility.Predefine.logger;publicclassByteArray{byte[]bytes;intoffset;publicByteArray(byte[]bytes){this.bytes=bytes;}publicstaticByteArraycreateByteArray(Stringpath){byte[]bytes=IOUtil.readBytes(path);if(bytes==null)returnnull;returnnewByteArray(bytes);}publicbyte[]getBytes(){returnbytes;}publicintnextInt(){intresult=ByteUtil.bytesHighFirstToInt(bytes,offset);offset+=4;returnresult;}publicdoublenextDouble(){doubleresult=ByteUtil.bytesHighFirstToDouble(bytes,offset);offset+=8;returnresult;}publiccharnextChar(){charresult=ByteUtil.bytesHighFirstToChar(bytes,offset);offset+=2;returnresult;}publicbytenextByte(){returnbytes[offset++];}publicbooleanhasMore(){returnoffset<bytes.length;}publicStringnextString(){char[]buffer=newchar[nextInt()];for(inti=0;i<buffer.length;++i){buffer[i]=nextChar();}returnnewString(buffer);}publicfloatnextFloat(){floatresult=ByteUtil.bytesHighFirstToFloat(bytes,offset);offset+=4;returnresult;}publicintnextUnsignedShort(){bytea=nextByte();byteb=nextByte();return(((a&0xff)<<8)|(b&0xff));}publicStringnextUTF(){intutflen=nextUnsignedShort();byte[]bytearr=null;char[]chararr=null;bytearr=newbyte[utflen];chararr=newchar[utflen];intc,char2,char3;intcount=0;intchararr_count=0;for(inti=0;i<utflen;++i){bytearr[i]=nextByte();}while(count<utflen){c=(int)bytearr[count]&0xff;if(c>127)break;count++;chararr[chararr_count++]=(char)c;}while(count<utflen){c=(int)bytearr[count]&0xff;switch(c>>4){case0:case1:case2:case3:case4:case5:case6:case7:count++;chararr[chararr_count++]=(char)c;break;case12:case13:count+=2;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-1];if((char2&0xC0)!=0x80)logger.severe(\"malformed input around byte \"+count);chararr[chararr_count++]=(char)(((c&0x1F)<<6)|(char2&0x3F));break;case14:count+=3;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-2];char3=(int)bytearr[count-1];if(((char2&0xC0)!=0x80)||((char3&0xC0)!=0x80))logger.severe(\"malformed input around byte \"+(count-1));chararr[chararr_count++]=(char)(((c&0x0F)<<12)|((char2&0x3F)<<6)|((char3&0x3F)<<0));break;default:logger.severe(\"malformed input around byte \"+count);}}returnnewString(chararr,0,chararr_count);}publicintgetOffset(){returnoffset;}publicintgetLength(){returnbytes.length;}publicvoidclose(){bytes=null;}@Overrideprotectedvoidfinalize()throwsThrowable{close();}}<EOF> "]
121210[label="packageDeclaration\n packagecom.hankcs.hanlp.corpus.io; "]
221211[label="packageName\n com.hankcs.hanlp.corpus.io "]
321212[label="packageName\n com.hankcs.hanlp.corpus "]
421213[label="packageName\n com.hankcs.hanlp "]
521214[label="packageName\n com.hankcs "]
621215[label="packageName\n com "]
121216[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.ByteUtil; "]
221217[label="typeName\n com.hankcs.hanlp.utility.ByteUtil "]
321218[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
421219[label="packageOrTypeName\n com.hankcs.hanlp "]
521220[label="packageOrTypeName\n com.hankcs "]
621221[label="packageOrTypeName\n com "]
121222[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.utility.Predefine.logger; "]
221223[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
321224[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
421225[label="packageOrTypeName\n com.hankcs.hanlp "]
521226[label="packageOrTypeName\n com.hankcs "]
621227[label="packageOrTypeName\n com "]
121228[label="normalClassDeclaration\n publicclassByteArray{byte[]bytes;intoffset;publicByteArray(byte[]bytes){this.bytes=bytes;}publicstaticByteArraycreateByteArray(Stringpath){byte[]bytes=IOUtil.readBytes(path);if(bytes==null)returnnull;returnnewByteArray(bytes);}publicbyte[]getBytes(){returnbytes;}publicintnextInt(){intresult=ByteUtil.bytesHighFirstToInt(bytes,offset);offset+=4;returnresult;}publicdoublenextDouble(){doubleresult=ByteUtil.bytesHighFirstToDouble(bytes,offset);offset+=8;returnresult;}publiccharnextChar(){charresult=ByteUtil.bytesHighFirstToChar(bytes,offset);offset+=2;returnresult;}publicbytenextByte(){returnbytes[offset++];}publicbooleanhasMore(){returnoffset<bytes.length;}publicStringnextString(){char[]buffer=newchar[nextInt()];for(inti=0;i<buffer.length;++i){buffer[i]=nextChar();}returnnewString(buffer);}publicfloatnextFloat(){floatresult=ByteUtil.bytesHighFirstToFloat(bytes,offset);offset+=4;returnresult;}publicintnextUnsignedShort(){bytea=nextByte();byteb=nextByte();return(((a&0xff)<<8)|(b&0xff));}publicStringnextUTF(){intutflen=nextUnsignedShort();byte[]bytearr=null;char[]chararr=null;bytearr=newbyte[utflen];chararr=newchar[utflen];intc,char2,char3;intcount=0;intchararr_count=0;for(inti=0;i<utflen;++i){bytearr[i]=nextByte();}while(count<utflen){c=(int)bytearr[count]&0xff;if(c>127)break;count++;chararr[chararr_count++]=(char)c;}while(count<utflen){c=(int)bytearr[count]&0xff;switch(c>>4){case0:case1:case2:case3:case4:case5:case6:case7:count++;chararr[chararr_count++]=(char)c;break;case12:case13:count+=2;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-1];if((char2&0xC0)!=0x80)logger.severe(\"malformed input around byte \"+count);chararr[chararr_count++]=(char)(((c&0x1F)<<6)|(char2&0x3F));break;case14:count+=3;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-2];char3=(int)bytearr[count-1];if(((char2&0xC0)!=0x80)||((char3&0xC0)!=0x80))logger.severe(\"malformed input around byte \"+(count-1));chararr[chararr_count++]=(char)(((c&0x0F)<<12)|((char2&0x3F)<<6)|((char3&0x3F)<<0));break;default:logger.severe(\"malformed input around byte \"+count);}}returnnewString(chararr,0,chararr_count);}publicintgetOffset(){returnoffset;}publicintgetLength(){returnbytes.length;}publicvoidclose(){bytes=null;}@Overrideprotectedvoidfinalize()throwsThrowable{close();}} "]
221229[label="classModifier\n public "]
221230[label="classBody\n {byte[]bytes;intoffset;publicByteArray(byte[]bytes){this.bytes=bytes;}publicstaticByteArraycreateByteArray(Stringpath){byte[]bytes=IOUtil.readBytes(path);if(bytes==null)returnnull;returnnewByteArray(bytes);}publicbyte[]getBytes(){returnbytes;}publicintnextInt(){intresult=ByteUtil.bytesHighFirstToInt(bytes,offset);offset+=4;returnresult;}publicdoublenextDouble(){doubleresult=ByteUtil.bytesHighFirstToDouble(bytes,offset);offset+=8;returnresult;}publiccharnextChar(){charresult=ByteUtil.bytesHighFirstToChar(bytes,offset);offset+=2;returnresult;}publicbytenextByte(){returnbytes[offset++];}publicbooleanhasMore(){returnoffset<bytes.length;}publicStringnextString(){char[]buffer=newchar[nextInt()];for(inti=0;i<buffer.length;++i){buffer[i]=nextChar();}returnnewString(buffer);}publicfloatnextFloat(){floatresult=ByteUtil.bytesHighFirstToFloat(bytes,offset);offset+=4;returnresult;}publicintnextUnsignedShort(){bytea=nextByte();byteb=nextByte();return(((a&0xff)<<8)|(b&0xff));}publicStringnextUTF(){intutflen=nextUnsignedShort();byte[]bytearr=null;char[]chararr=null;bytearr=newbyte[utflen];chararr=newchar[utflen];intc,char2,char3;intcount=0;intchararr_count=0;for(inti=0;i<utflen;++i){bytearr[i]=nextByte();}while(count<utflen){c=(int)bytearr[count]&0xff;if(c>127)break;count++;chararr[chararr_count++]=(char)c;}while(count<utflen){c=(int)bytearr[count]&0xff;switch(c>>4){case0:case1:case2:case3:case4:case5:case6:case7:count++;chararr[chararr_count++]=(char)c;break;case12:case13:count+=2;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-1];if((char2&0xC0)!=0x80)logger.severe(\"malformed input around byte \"+count);chararr[chararr_count++]=(char)(((c&0x1F)<<6)|(char2&0x3F));break;case14:count+=3;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-2];char3=(int)bytearr[count-1];if(((char2&0xC0)!=0x80)||((char3&0xC0)!=0x80))logger.severe(\"malformed input around byte \"+(count-1));chararr[chararr_count++]=(char)(((c&0x0F)<<12)|((char2&0x3F)<<6)|((char3&0x3F)<<0));break;default:logger.severe(\"malformed input around byte \"+count);}}returnnewString(chararr,0,chararr_count);}publicintgetOffset(){returnoffset;}publicintgetLength(){returnbytes.length;}publicvoidclose(){bytes=null;}@Overrideprotectedvoidfinalize()throwsThrowable{close();}} "]
321231[label="fieldDeclaration\n byte[]bytes; "]
421232[label="unannArrayType\n byte[] "]
521233[label="integralType\n byte "]
521234[label="dims\n [] "]
421235[label="variableDeclaratorId\n bytes "]
321236[label="fieldDeclaration\n intoffset; "]
421237[label="integralType\n int "]
421238[label="variableDeclaratorId\n offset "]
321239[label="constructorDeclaration\n publicByteArray(byte[]bytes){this.bytes=bytes;} "]
421240[label="constructorModifier\n public "]
421241[label="constructorDeclarator\n ByteArray(byte[]bytes) "]
521242[label="simpleTypeName\n ByteArray "]
521243[label="formalParameter\n byte[]bytes "]
621244[label="unannArrayType\n byte[] "]
721245[label="integralType\n byte "]
721246[label="dims\n [] "]
621247[label="variableDeclaratorId\n bytes "]
421248[label="constructorBody\n {this.bytes=bytes;} "]
521249[label="expressionStatement\n this.bytes=bytes; "]
621250[label="assignment\n this.bytes=bytes "]
721251[label="fieldAccess\n this.bytes "]
821252[label="primaryNoNewArray_lfno_primary\n this "]
721253[label="assignmentOperator\n = "]
721254[label="expressionName\n bytes "]
321255[label="methodDeclaration\n publicstaticByteArraycreateByteArray(Stringpath){byte[]bytes=IOUtil.readBytes(path);if(bytes==null)returnnull;returnnewByteArray(bytes);} "]
421256[label="methodModifier\n public "]
421257[label="methodModifier\n static "]
421258[label="methodHeader\n ByteArraycreateByteArray(Stringpath) "]
521259[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
521260[label="methodDeclarator\n createByteArray(Stringpath) "]
621261[label="formalParameter\n Stringpath "]
721262[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
721263[label="variableDeclaratorId\n path "]
421264[label="block\n {byte[]bytes=IOUtil.readBytes(path);if(bytes==null)returnnull;returnnewByteArray(bytes);} "]
521265[label="blockStatements\n byte[]bytes=IOUtil.readBytes(path);if(bytes==null)returnnull;returnnewByteArray(bytes); "]
621266[label="localVariableDeclarationStatement\n byte[]bytes=IOUtil.readBytes(path); "]
721267[label="localVariableDeclaration\n byte[]bytes=IOUtil.readBytes(path) "]
821268[label="unannArrayType\n byte[] "]
921269[label="integralType\n byte "]
921270[label="dims\n [] "]
821271[label="variableDeclarator\n bytes=IOUtil.readBytes(path) "]
921272[label="variableDeclaratorId\n bytes "]
921273[label="methodInvocation_lfno_primary\n IOUtil.readBytes(path) "]
1021274[label="typeName\n IOUtil "]
1021275[label="expressionName\n path "]
621276[label="ifThenStatement\n if(bytes==null)returnnull; "]
721277[label="equalityExpression\n bytes==null "]
821278[label="expressionName\n bytes "]
821279[label="literal\n null "]
721280[label="returnStatement\n returnnull; "]
821281[label="literal\n null "]
621282[label="returnStatement\n returnnewByteArray(bytes); "]
721283[label="classInstanceCreationExpression_lfno_primary\n newByteArray(bytes) "]
821284[label="expressionName\n bytes "]
321285[label="methodDeclaration\n publicbyte[]getBytes(){returnbytes;} "]
421286[label="methodModifier\n public "]
421287[label="methodHeader\n byte[]getBytes() "]
521288[label="unannArrayType\n byte[] "]
621289[label="integralType\n byte "]
621290[label="dims\n [] "]
521291[label="methodDeclarator\n getBytes() "]
421292[label="block\n {returnbytes;} "]
521293[label="returnStatement\n returnbytes; "]
621294[label="expressionName\n bytes "]
321295[label="methodDeclaration\n publicintnextInt(){intresult=ByteUtil.bytesHighFirstToInt(bytes,offset);offset+=4;returnresult;} "]
421296[label="methodModifier\n public "]
421297[label="methodHeader\n intnextInt() "]
521298[label="integralType\n int "]
521299[label="methodDeclarator\n nextInt() "]
421300[label="block\n {intresult=ByteUtil.bytesHighFirstToInt(bytes,offset);offset+=4;returnresult;} "]
521301[label="blockStatements\n intresult=ByteUtil.bytesHighFirstToInt(bytes,offset);offset+=4;returnresult; "]
621302[label="localVariableDeclarationStatement\n intresult=ByteUtil.bytesHighFirstToInt(bytes,offset); "]
721303[label="localVariableDeclaration\n intresult=ByteUtil.bytesHighFirstToInt(bytes,offset) "]
821304[label="integralType\n int "]
821305[label="variableDeclarator\n result=ByteUtil.bytesHighFirstToInt(bytes,offset) "]
921306[label="variableDeclaratorId\n result "]
921307[label="methodInvocation_lfno_primary\n ByteUtil.bytesHighFirstToInt(bytes,offset) "]
1021308[label="typeName\n ByteUtil "]
1021309[label="argumentList\n bytes,offset "]
1121310[label="expressionName\n bytes "]
1121311[label="expressionName\n offset "]
621312[label="expressionStatement\n offset+=4; "]
721313[label="assignment\n offset+=4 "]
821314[label="expressionName\n offset "]
821315[label="assignmentOperator\n += "]
821316[label="literal\n 4 "]
621317[label="returnStatement\n returnresult; "]
721318[label="expressionName\n result "]
321319[label="methodDeclaration\n publicdoublenextDouble(){doubleresult=ByteUtil.bytesHighFirstToDouble(bytes,offset);offset+=8;returnresult;} "]
421320[label="methodModifier\n public "]
421321[label="methodHeader\n doublenextDouble() "]
521322[label="floatingPointType\n double "]
521323[label="methodDeclarator\n nextDouble() "]
421324[label="block\n {doubleresult=ByteUtil.bytesHighFirstToDouble(bytes,offset);offset+=8;returnresult;} "]
521325[label="blockStatements\n doubleresult=ByteUtil.bytesHighFirstToDouble(bytes,offset);offset+=8;returnresult; "]
621326[label="localVariableDeclarationStatement\n doubleresult=ByteUtil.bytesHighFirstToDouble(bytes,offset); "]
721327[label="localVariableDeclaration\n doubleresult=ByteUtil.bytesHighFirstToDouble(bytes,offset) "]
821328[label="floatingPointType\n double "]
821329[label="variableDeclarator\n result=ByteUtil.bytesHighFirstToDouble(bytes,offset) "]
921330[label="variableDeclaratorId\n result "]
921331[label="methodInvocation_lfno_primary\n ByteUtil.bytesHighFirstToDouble(bytes,offset) "]
1021332[label="typeName\n ByteUtil "]
1021333[label="argumentList\n bytes,offset "]
1121334[label="expressionName\n bytes "]
1121335[label="expressionName\n offset "]
621336[label="expressionStatement\n offset+=8; "]
721337[label="assignment\n offset+=8 "]
821338[label="expressionName\n offset "]
821339[label="assignmentOperator\n += "]
821340[label="literal\n 8 "]
621341[label="returnStatement\n returnresult; "]
721342[label="expressionName\n result "]
321343[label="methodDeclaration\n publiccharnextChar(){charresult=ByteUtil.bytesHighFirstToChar(bytes,offset);offset+=2;returnresult;} "]
421344[label="methodModifier\n public "]
421345[label="methodHeader\n charnextChar() "]
521346[label="integralType\n char "]
521347[label="methodDeclarator\n nextChar() "]
421348[label="block\n {charresult=ByteUtil.bytesHighFirstToChar(bytes,offset);offset+=2;returnresult;} "]
521349[label="blockStatements\n charresult=ByteUtil.bytesHighFirstToChar(bytes,offset);offset+=2;returnresult; "]
621350[label="localVariableDeclarationStatement\n charresult=ByteUtil.bytesHighFirstToChar(bytes,offset); "]
721351[label="localVariableDeclaration\n charresult=ByteUtil.bytesHighFirstToChar(bytes,offset) "]
821352[label="integralType\n char "]
821353[label="variableDeclarator\n result=ByteUtil.bytesHighFirstToChar(bytes,offset) "]
921354[label="variableDeclaratorId\n result "]
921355[label="methodInvocation_lfno_primary\n ByteUtil.bytesHighFirstToChar(bytes,offset) "]
1021356[label="typeName\n ByteUtil "]
1021357[label="argumentList\n bytes,offset "]
1121358[label="expressionName\n bytes "]
1121359[label="expressionName\n offset "]
621360[label="expressionStatement\n offset+=2; "]
721361[label="assignment\n offset+=2 "]
821362[label="expressionName\n offset "]
821363[label="assignmentOperator\n += "]
821364[label="literal\n 2 "]
621365[label="returnStatement\n returnresult; "]
721366[label="expressionName\n result "]
321367[label="methodDeclaration\n publicbytenextByte(){returnbytes[offset++];} "]
421368[label="methodModifier\n public "]
421369[label="methodHeader\n bytenextByte() "]
521370[label="integralType\n byte "]
521371[label="methodDeclarator\n nextByte() "]
421372[label="block\n {returnbytes[offset++];} "]
521373[label="returnStatement\n returnbytes[offset++]; "]
621374[label="arrayAccess_lfno_primary\n bytes[offset++] "]
721375[label="expressionName\n bytes "]
721376[label="postfixExpression\n offset++ "]
821377[label="expressionName\n offset "]
821378[label="postIncrementExpression_lf_postfixExpression\n ++ "]
321379[label="methodDeclaration\n publicbooleanhasMore(){returnoffset<bytes.length;} "]
421380[label="methodModifier\n public "]
421381[label="methodHeader\n booleanhasMore() "]
521382[label="unannPrimitiveType\n boolean "]
521383[label="methodDeclarator\n hasMore() "]
421384[label="block\n {returnoffset<bytes.length;} "]
521385[label="returnStatement\n returnoffset<bytes.length; "]
621386[label="relationalExpression\n offset<bytes.length "]
721387[label="expressionName\n offset "]
721388[label="expressionName\n bytes.length "]
821389[label="ambiguousName\n bytes "]
321390[label="methodDeclaration\n publicStringnextString(){char[]buffer=newchar[nextInt()];for(inti=0;i<buffer.length;++i){buffer[i]=nextChar();}returnnewString(buffer);} "]
421391[label="methodModifier\n public "]
421392[label="methodHeader\n StringnextString() "]
521393[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
521394[label="methodDeclarator\n nextString() "]
421395[label="block\n {char[]buffer=newchar[nextInt()];for(inti=0;i<buffer.length;++i){buffer[i]=nextChar();}returnnewString(buffer);} "]
521396[label="blockStatements\n char[]buffer=newchar[nextInt()];for(inti=0;i<buffer.length;++i){buffer[i]=nextChar();}returnnewString(buffer); "]
621397[label="localVariableDeclarationStatement\n char[]buffer=newchar[nextInt()]; "]
721398[label="localVariableDeclaration\n char[]buffer=newchar[nextInt()] "]
821399[label="unannArrayType\n char[] "]
921400[label="integralType\n char "]
921401[label="dims\n [] "]
821402[label="variableDeclarator\n buffer=newchar[nextInt()] "]
921403[label="variableDeclaratorId\n buffer "]
921404[label="arrayCreationExpression\n newchar[nextInt()] "]
1021405[label="integralType\n char "]
1021406[label="dimExpr\n [nextInt()] "]
1121407[label="methodInvocation_lfno_primary\n nextInt() "]
1221408[label="methodName\n nextInt "]
621409[label="basicForStatement\n for(inti=0;i<buffer.length;++i){buffer[i]=nextChar();} "]
721410[label="localVariableDeclaration\n inti=0 "]
821411[label="integralType\n int "]
821412[label="variableDeclarator\n i=0 "]
921413[label="variableDeclaratorId\n i "]
921414[label="literal\n 0 "]
721415[label="relationalExpression\n i<buffer.length "]
821416[label="expressionName\n i "]
821417[label="expressionName\n buffer.length "]
921418[label="ambiguousName\n buffer "]
721419[label="preIncrementExpression\n ++i "]
821420[label="expressionName\n i "]
721421[label="block\n {buffer[i]=nextChar();} "]
821422[label="expressionStatement\n buffer[i]=nextChar(); "]
921423[label="assignment\n buffer[i]=nextChar() "]
1021424[label="arrayAccess\n buffer[i] "]
1121425[label="expressionName\n buffer "]
1121426[label="expressionName\n i "]
1021427[label="assignmentOperator\n = "]
1021428[label="methodInvocation_lfno_primary\n nextChar() "]
1121429[label="methodName\n nextChar "]
621430[label="returnStatement\n returnnewString(buffer); "]
721431[label="classInstanceCreationExpression_lfno_primary\n newString(buffer) "]
821432[label="expressionName\n buffer "]
321433[label="methodDeclaration\n publicfloatnextFloat(){floatresult=ByteUtil.bytesHighFirstToFloat(bytes,offset);offset+=4;returnresult;} "]
421434[label="methodModifier\n public "]
421435[label="methodHeader\n floatnextFloat() "]
521436[label="floatingPointType\n float "]
521437[label="methodDeclarator\n nextFloat() "]
421438[label="block\n {floatresult=ByteUtil.bytesHighFirstToFloat(bytes,offset);offset+=4;returnresult;} "]
521439[label="blockStatements\n floatresult=ByteUtil.bytesHighFirstToFloat(bytes,offset);offset+=4;returnresult; "]
621440[label="localVariableDeclarationStatement\n floatresult=ByteUtil.bytesHighFirstToFloat(bytes,offset); "]
721441[label="localVariableDeclaration\n floatresult=ByteUtil.bytesHighFirstToFloat(bytes,offset) "]
821442[label="floatingPointType\n float "]
821443[label="variableDeclarator\n result=ByteUtil.bytesHighFirstToFloat(bytes,offset) "]
921444[label="variableDeclaratorId\n result "]
921445[label="methodInvocation_lfno_primary\n ByteUtil.bytesHighFirstToFloat(bytes,offset) "]
1021446[label="typeName\n ByteUtil "]
1021447[label="argumentList\n bytes,offset "]
1121448[label="expressionName\n bytes "]
1121449[label="expressionName\n offset "]
621450[label="expressionStatement\n offset+=4; "]
721451[label="assignment\n offset+=4 "]
821452[label="expressionName\n offset "]
821453[label="assignmentOperator\n += "]
821454[label="literal\n 4 "]
621455[label="returnStatement\n returnresult; "]
721456[label="expressionName\n result "]
321457[label="methodDeclaration\n publicintnextUnsignedShort(){bytea=nextByte();byteb=nextByte();return(((a&0xff)<<8)|(b&0xff));} "]
421458[label="methodModifier\n public "]
421459[label="methodHeader\n intnextUnsignedShort() "]
521460[label="integralType\n int "]
521461[label="methodDeclarator\n nextUnsignedShort() "]
421462[label="block\n {bytea=nextByte();byteb=nextByte();return(((a&0xff)<<8)|(b&0xff));} "]
521463[label="blockStatements\n bytea=nextByte();byteb=nextByte();return(((a&0xff)<<8)|(b&0xff)); "]
621464[label="localVariableDeclarationStatement\n bytea=nextByte(); "]
721465[label="localVariableDeclaration\n bytea=nextByte() "]
821466[label="integralType\n byte "]
821467[label="variableDeclarator\n a=nextByte() "]
921468[label="variableDeclaratorId\n a "]
921469[label="methodInvocation_lfno_primary\n nextByte() "]
1021470[label="methodName\n nextByte "]
621471[label="localVariableDeclarationStatement\n byteb=nextByte(); "]
721472[label="localVariableDeclaration\n byteb=nextByte() "]
821473[label="integralType\n byte "]
821474[label="variableDeclarator\n b=nextByte() "]
921475[label="variableDeclaratorId\n b "]
921476[label="methodInvocation_lfno_primary\n nextByte() "]
1021477[label="methodName\n nextByte "]
621478[label="returnStatement\n return(((a&0xff)<<8)|(b&0xff)); "]
721479[label="primaryNoNewArray_lfno_primary\n (((a&0xff)<<8)|(b&0xff)) "]
821480[label="inclusiveOrExpression\n ((a&0xff)<<8)|(b&0xff) "]
921481[label="primaryNoNewArray_lfno_primary\n ((a&0xff)<<8) "]
1021482[label="shiftExpression\n (a&0xff)<<8 "]
1121483[label="primaryNoNewArray_lfno_primary\n (a&0xff) "]
1221484[label="andExpression\n a&0xff "]
1321485[label="expressionName\n a "]
1321486[label="literal\n 0xff "]
1121487[label="literal\n 8 "]
921488[label="primaryNoNewArray_lfno_primary\n (b&0xff) "]
1021489[label="andExpression\n b&0xff "]
1121490[label="expressionName\n b "]
1121491[label="literal\n 0xff "]
321492[label="methodDeclaration\n publicStringnextUTF(){intutflen=nextUnsignedShort();byte[]bytearr=null;char[]chararr=null;bytearr=newbyte[utflen];chararr=newchar[utflen];intc,char2,char3;intcount=0;intchararr_count=0;for(inti=0;i<utflen;++i){bytearr[i]=nextByte();}while(count<utflen){c=(int)bytearr[count]&0xff;if(c>127)break;count++;chararr[chararr_count++]=(char)c;}while(count<utflen){c=(int)bytearr[count]&0xff;switch(c>>4){case0:case1:case2:case3:case4:case5:case6:case7:count++;chararr[chararr_count++]=(char)c;break;case12:case13:count+=2;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-1];if((char2&0xC0)!=0x80)logger.severe(\"malformed input around byte \"+count);chararr[chararr_count++]=(char)(((c&0x1F)<<6)|(char2&0x3F));break;case14:count+=3;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-2];char3=(int)bytearr[count-1];if(((char2&0xC0)!=0x80)||((char3&0xC0)!=0x80))logger.severe(\"malformed input around byte \"+(count-1));chararr[chararr_count++]=(char)(((c&0x0F)<<12)|((char2&0x3F)<<6)|((char3&0x3F)<<0));break;default:logger.severe(\"malformed input around byte \"+count);}}returnnewString(chararr,0,chararr_count);} "]
421493[label="methodModifier\n public "]
421494[label="methodHeader\n StringnextUTF() "]
521495[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
521496[label="methodDeclarator\n nextUTF() "]
421497[label="block\n {intutflen=nextUnsignedShort();byte[]bytearr=null;char[]chararr=null;bytearr=newbyte[utflen];chararr=newchar[utflen];intc,char2,char3;intcount=0;intchararr_count=0;for(inti=0;i<utflen;++i){bytearr[i]=nextByte();}while(count<utflen){c=(int)bytearr[count]&0xff;if(c>127)break;count++;chararr[chararr_count++]=(char)c;}while(count<utflen){c=(int)bytearr[count]&0xff;switch(c>>4){case0:case1:case2:case3:case4:case5:case6:case7:count++;chararr[chararr_count++]=(char)c;break;case12:case13:count+=2;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-1];if((char2&0xC0)!=0x80)logger.severe(\"malformed input around byte \"+count);chararr[chararr_count++]=(char)(((c&0x1F)<<6)|(char2&0x3F));break;case14:count+=3;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-2];char3=(int)bytearr[count-1];if(((char2&0xC0)!=0x80)||((char3&0xC0)!=0x80))logger.severe(\"malformed input around byte \"+(count-1));chararr[chararr_count++]=(char)(((c&0x0F)<<12)|((char2&0x3F)<<6)|((char3&0x3F)<<0));break;default:logger.severe(\"malformed input around byte \"+count);}}returnnewString(chararr,0,chararr_count);} "]
521498[label="blockStatements\n intutflen=nextUnsignedShort();byte[]bytearr=null;char[]chararr=null;bytearr=newbyte[utflen];chararr=newchar[utflen];intc,char2,char3;intcount=0;intchararr_count=0;for(inti=0;i<utflen;++i){bytearr[i]=nextByte();}while(count<utflen){c=(int)bytearr[count]&0xff;if(c>127)break;count++;chararr[chararr_count++]=(char)c;}while(count<utflen){c=(int)bytearr[count]&0xff;switch(c>>4){case0:case1:case2:case3:case4:case5:case6:case7:count++;chararr[chararr_count++]=(char)c;break;case12:case13:count+=2;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-1];if((char2&0xC0)!=0x80)logger.severe(\"malformed input around byte \"+count);chararr[chararr_count++]=(char)(((c&0x1F)<<6)|(char2&0x3F));break;case14:count+=3;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-2];char3=(int)bytearr[count-1];if(((char2&0xC0)!=0x80)||((char3&0xC0)!=0x80))logger.severe(\"malformed input around byte \"+(count-1));chararr[chararr_count++]=(char)(((c&0x0F)<<12)|((char2&0x3F)<<6)|((char3&0x3F)<<0));break;default:logger.severe(\"malformed input around byte \"+count);}}returnnewString(chararr,0,chararr_count); "]
621499[label="localVariableDeclarationStatement\n intutflen=nextUnsignedShort(); "]
721500[label="localVariableDeclaration\n intutflen=nextUnsignedShort() "]
821501[label="integralType\n int "]
821502[label="variableDeclarator\n utflen=nextUnsignedShort() "]
921503[label="variableDeclaratorId\n utflen "]
921504[label="methodInvocation_lfno_primary\n nextUnsignedShort() "]
1021505[label="methodName\n nextUnsignedShort "]
621506[label="localVariableDeclarationStatement\n byte[]bytearr=null; "]
721507[label="localVariableDeclaration\n byte[]bytearr=null "]
821508[label="unannArrayType\n byte[] "]
921509[label="integralType\n byte "]
921510[label="dims\n [] "]
821511[label="variableDeclarator\n bytearr=null "]
921512[label="variableDeclaratorId\n bytearr "]
921513[label="literal\n null "]
621514[label="localVariableDeclarationStatement\n char[]chararr=null; "]
721515[label="localVariableDeclaration\n char[]chararr=null "]
821516[label="unannArrayType\n char[] "]
921517[label="integralType\n char "]
921518[label="dims\n [] "]
821519[label="variableDeclarator\n chararr=null "]
921520[label="variableDeclaratorId\n chararr "]
921521[label="literal\n null "]
621522[label="expressionStatement\n bytearr=newbyte[utflen]; "]
721523[label="assignment\n bytearr=newbyte[utflen] "]
821524[label="expressionName\n bytearr "]
821525[label="assignmentOperator\n = "]
821526[label="arrayCreationExpression\n newbyte[utflen] "]
921527[label="integralType\n byte "]
921528[label="dimExpr\n [utflen] "]
1021529[label="expressionName\n utflen "]
621530[label="expressionStatement\n chararr=newchar[utflen]; "]
721531[label="assignment\n chararr=newchar[utflen] "]
821532[label="expressionName\n chararr "]
821533[label="assignmentOperator\n = "]
821534[label="arrayCreationExpression\n newchar[utflen] "]
921535[label="integralType\n char "]
921536[label="dimExpr\n [utflen] "]
1021537[label="expressionName\n utflen "]
621538[label="localVariableDeclarationStatement\n intc,char2,char3; "]
721539[label="localVariableDeclaration\n intc,char2,char3 "]
821540[label="integralType\n int "]
821541[label="variableDeclaratorList\n c,char2,char3 "]
921542[label="variableDeclaratorId\n c "]
921543[label="variableDeclaratorId\n char2 "]
921544[label="variableDeclaratorId\n char3 "]
621545[label="localVariableDeclarationStatement\n intcount=0; "]
721546[label="localVariableDeclaration\n intcount=0 "]
821547[label="integralType\n int "]
821548[label="variableDeclarator\n count=0 "]
921549[label="variableDeclaratorId\n count "]
921550[label="literal\n 0 "]
621551[label="localVariableDeclarationStatement\n intchararr_count=0; "]
721552[label="localVariableDeclaration\n intchararr_count=0 "]
821553[label="integralType\n int "]
821554[label="variableDeclarator\n chararr_count=0 "]
921555[label="variableDeclaratorId\n chararr_count "]
921556[label="literal\n 0 "]
621557[label="basicForStatement\n for(inti=0;i<utflen;++i){bytearr[i]=nextByte();} "]
721558[label="localVariableDeclaration\n inti=0 "]
821559[label="integralType\n int "]
821560[label="variableDeclarator\n i=0 "]
921561[label="variableDeclaratorId\n i "]
921562[label="literal\n 0 "]
721563[label="relationalExpression\n i<utflen "]
821564[label="expressionName\n i "]
821565[label="expressionName\n utflen "]
721566[label="preIncrementExpression\n ++i "]
821567[label="expressionName\n i "]
721568[label="block\n {bytearr[i]=nextByte();} "]
821569[label="expressionStatement\n bytearr[i]=nextByte(); "]
921570[label="assignment\n bytearr[i]=nextByte() "]
1021571[label="arrayAccess\n bytearr[i] "]
1121572[label="expressionName\n bytearr "]
1121573[label="expressionName\n i "]
1021574[label="assignmentOperator\n = "]
1021575[label="methodInvocation_lfno_primary\n nextByte() "]
1121576[label="methodName\n nextByte "]
621577[label="whileStatement\n while(count<utflen){c=(int)bytearr[count]&0xff;if(c>127)break;count++;chararr[chararr_count++]=(char)c;} "]
721578[label="relationalExpression\n count<utflen "]
821579[label="expressionName\n count "]
821580[label="expressionName\n utflen "]
721581[label="block\n {c=(int)bytearr[count]&0xff;if(c>127)break;count++;chararr[chararr_count++]=(char)c;} "]
821582[label="blockStatements\n c=(int)bytearr[count]&0xff;if(c>127)break;count++;chararr[chararr_count++]=(char)c; "]
921583[label="expressionStatement\n c=(int)bytearr[count]&0xff; "]
1021584[label="assignment\n c=(int)bytearr[count]&0xff "]
1121585[label="expressionName\n c "]
1121586[label="assignmentOperator\n = "]
1121587[label="andExpression\n (int)bytearr[count]&0xff "]
1221588[label="castExpression\n (int)bytearr[count] "]
1321589[label="integralType\n int "]
1321590[label="arrayAccess_lfno_primary\n bytearr[count] "]
1421591[label="expressionName\n bytearr "]
1421592[label="expressionName\n count "]
1221593[label="literal\n 0xff "]
921594[label="ifThenStatement\n if(c>127)break; "]
1021595[label="relationalExpression\n c>127 "]
1121596[label="expressionName\n c "]
1121597[label="literal\n 127 "]
1021598[label="breakStatement\n break; "]
921599[label="expressionStatement\n count++; "]
1021600[label="postIncrementExpression\n count++ "]
1121601[label="expressionName\n count "]
921602[label="expressionStatement\n chararr[chararr_count++]=(char)c; "]
1021603[label="assignment\n chararr[chararr_count++]=(char)c "]
1121604[label="arrayAccess\n chararr[chararr_count++] "]
1221605[label="expressionName\n chararr "]
1221606[label="postfixExpression\n chararr_count++ "]
1321607[label="expressionName\n chararr_count "]
1321608[label="postIncrementExpression_lf_postfixExpression\n ++ "]
1121609[label="assignmentOperator\n = "]
1121610[label="castExpression\n (char)c "]
1221611[label="integralType\n char "]
1221612[label="expressionName\n c "]
621613[label="whileStatement\n while(count<utflen){c=(int)bytearr[count]&0xff;switch(c>>4){case0:case1:case2:case3:case4:case5:case6:case7:count++;chararr[chararr_count++]=(char)c;break;case12:case13:count+=2;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-1];if((char2&0xC0)!=0x80)logger.severe(\"malformed input around byte \"+count);chararr[chararr_count++]=(char)(((c&0x1F)<<6)|(char2&0x3F));break;case14:count+=3;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-2];char3=(int)bytearr[count-1];if(((char2&0xC0)!=0x80)||((char3&0xC0)!=0x80))logger.severe(\"malformed input around byte \"+(count-1));chararr[chararr_count++]=(char)(((c&0x0F)<<12)|((char2&0x3F)<<6)|((char3&0x3F)<<0));break;default:logger.severe(\"malformed input around byte \"+count);}} "]
721614[label="relationalExpression\n count<utflen "]
821615[label="expressionName\n count "]
821616[label="expressionName\n utflen "]
721617[label="block\n {c=(int)bytearr[count]&0xff;switch(c>>4){case0:case1:case2:case3:case4:case5:case6:case7:count++;chararr[chararr_count++]=(char)c;break;case12:case13:count+=2;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-1];if((char2&0xC0)!=0x80)logger.severe(\"malformed input around byte \"+count);chararr[chararr_count++]=(char)(((c&0x1F)<<6)|(char2&0x3F));break;case14:count+=3;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-2];char3=(int)bytearr[count-1];if(((char2&0xC0)!=0x80)||((char3&0xC0)!=0x80))logger.severe(\"malformed input around byte \"+(count-1));chararr[chararr_count++]=(char)(((c&0x0F)<<12)|((char2&0x3F)<<6)|((char3&0x3F)<<0));break;default:logger.severe(\"malformed input around byte \"+count);}} "]
821618[label="blockStatements\n c=(int)bytearr[count]&0xff;switch(c>>4){case0:case1:case2:case3:case4:case5:case6:case7:count++;chararr[chararr_count++]=(char)c;break;case12:case13:count+=2;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-1];if((char2&0xC0)!=0x80)logger.severe(\"malformed input around byte \"+count);chararr[chararr_count++]=(char)(((c&0x1F)<<6)|(char2&0x3F));break;case14:count+=3;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-2];char3=(int)bytearr[count-1];if(((char2&0xC0)!=0x80)||((char3&0xC0)!=0x80))logger.severe(\"malformed input around byte \"+(count-1));chararr[chararr_count++]=(char)(((c&0x0F)<<12)|((char2&0x3F)<<6)|((char3&0x3F)<<0));break;default:logger.severe(\"malformed input around byte \"+count);} "]
921619[label="expressionStatement\n c=(int)bytearr[count]&0xff; "]
1021620[label="assignment\n c=(int)bytearr[count]&0xff "]
1121621[label="expressionName\n c "]
1121622[label="assignmentOperator\n = "]
1121623[label="andExpression\n (int)bytearr[count]&0xff "]
1221624[label="castExpression\n (int)bytearr[count] "]
1321625[label="integralType\n int "]
1321626[label="arrayAccess_lfno_primary\n bytearr[count] "]
1421627[label="expressionName\n bytearr "]
1421628[label="expressionName\n count "]
1221629[label="literal\n 0xff "]
921630[label="switchStatement\n switch(c>>4){case0:case1:case2:case3:case4:case5:case6:case7:count++;chararr[chararr_count++]=(char)c;break;case12:case13:count+=2;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-1];if((char2&0xC0)!=0x80)logger.severe(\"malformed input around byte \"+count);chararr[chararr_count++]=(char)(((c&0x1F)<<6)|(char2&0x3F));break;case14:count+=3;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-2];char3=(int)bytearr[count-1];if(((char2&0xC0)!=0x80)||((char3&0xC0)!=0x80))logger.severe(\"malformed input around byte \"+(count-1));chararr[chararr_count++]=(char)(((c&0x0F)<<12)|((char2&0x3F)<<6)|((char3&0x3F)<<0));break;default:logger.severe(\"malformed input around byte \"+count);} "]
1021631[label="shiftExpression\n c>>4 "]
1121632[label="expressionName\n c "]
1121633[label="literal\n 4 "]
1021634[label="switchBlock\n {case0:case1:case2:case3:case4:case5:case6:case7:count++;chararr[chararr_count++]=(char)c;break;case12:case13:count+=2;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-1];if((char2&0xC0)!=0x80)logger.severe(\"malformed input around byte \"+count);chararr[chararr_count++]=(char)(((c&0x1F)<<6)|(char2&0x3F));break;case14:count+=3;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-2];char3=(int)bytearr[count-1];if(((char2&0xC0)!=0x80)||((char3&0xC0)!=0x80))logger.severe(\"malformed input around byte \"+(count-1));chararr[chararr_count++]=(char)(((c&0x0F)<<12)|((char2&0x3F)<<6)|((char3&0x3F)<<0));break;default:logger.severe(\"malformed input around byte \"+count);} "]
1121635[label="switchBlockStatementGroup\n case0:case1:case2:case3:case4:case5:case6:case7:count++;chararr[chararr_count++]=(char)c;break; "]
1221636[label="switchLabels\n case0:case1:case2:case3:case4:case5:case6:case7: "]
1321637[label="switchLabel\n case0: "]
1421638[label="literal\n 0 "]
1321639[label="switchLabel\n case1: "]
1421640[label="literal\n 1 "]
1321641[label="switchLabel\n case2: "]
1421642[label="literal\n 2 "]
1321643[label="switchLabel\n case3: "]
1421644[label="literal\n 3 "]
1321645[label="switchLabel\n case4: "]
1421646[label="literal\n 4 "]
1321647[label="switchLabel\n case5: "]
1421648[label="literal\n 5 "]
1321649[label="switchLabel\n case6: "]
1421650[label="literal\n 6 "]
1321651[label="switchLabel\n case7: "]
1421652[label="literal\n 7 "]
1221653[label="blockStatements\n count++;chararr[chararr_count++]=(char)c;break; "]
1321654[label="expressionStatement\n count++; "]
1421655[label="postIncrementExpression\n count++ "]
1521656[label="expressionName\n count "]
1321657[label="expressionStatement\n chararr[chararr_count++]=(char)c; "]
1421658[label="assignment\n chararr[chararr_count++]=(char)c "]
1521659[label="arrayAccess\n chararr[chararr_count++] "]
1621660[label="expressionName\n chararr "]
1621661[label="postfixExpression\n chararr_count++ "]
1721662[label="expressionName\n chararr_count "]
1721663[label="postIncrementExpression_lf_postfixExpression\n ++ "]
1521664[label="assignmentOperator\n = "]
1521665[label="castExpression\n (char)c "]
1621666[label="integralType\n char "]
1621667[label="expressionName\n c "]
1321668[label="breakStatement\n break; "]
1121669[label="switchBlockStatementGroup\n case12:case13:count+=2;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-1];if((char2&0xC0)!=0x80)logger.severe(\"malformed input around byte \"+count);chararr[chararr_count++]=(char)(((c&0x1F)<<6)|(char2&0x3F));break; "]
1221670[label="switchLabels\n case12:case13: "]
1321671[label="switchLabel\n case12: "]
1421672[label="literal\n 12 "]
1321673[label="switchLabel\n case13: "]
1421674[label="literal\n 13 "]
1221675[label="blockStatements\n count+=2;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-1];if((char2&0xC0)!=0x80)logger.severe(\"malformed input around byte \"+count);chararr[chararr_count++]=(char)(((c&0x1F)<<6)|(char2&0x3F));break; "]
1321676[label="expressionStatement\n count+=2; "]
1421677[label="assignment\n count+=2 "]
1521678[label="expressionName\n count "]
1521679[label="assignmentOperator\n += "]
1521680[label="literal\n 2 "]
1321681[label="ifThenStatement\n if(count>utflen)logger.severe(\"malformed input: partial character at end\"); "]
1421682[label="relationalExpression\n count>utflen "]
1521683[label="expressionName\n count "]
1521684[label="expressionName\n utflen "]
1421685[label="expressionStatement\n logger.severe(\"malformed input: partial character at end\"); "]
1521686[label="methodInvocation\n logger.severe(\"malformed input: partial character at end\") "]
1621687[label="typeName\n logger "]
1621688[label="literal\n \"malformed input: partial character at end\" "]
1321689[label="expressionStatement\n char2=(int)bytearr[count-1]; "]
1421690[label="assignment\n char2=(int)bytearr[count-1] "]
1521691[label="expressionName\n char2 "]
1521692[label="assignmentOperator\n = "]
1521693[label="castExpression\n (int)bytearr[count-1] "]
1621694[label="integralType\n int "]
1621695[label="arrayAccess_lfno_primary\n bytearr[count-1] "]
1721696[label="expressionName\n bytearr "]
1721697[label="additiveExpression\n count-1 "]
1821698[label="expressionName\n count "]
1821699[label="literal\n 1 "]
1321700[label="ifThenStatement\n if((char2&0xC0)!=0x80)logger.severe(\"malformed input around byte \"+count); "]
1421701[label="equalityExpression\n (char2&0xC0)!=0x80 "]
1521702[label="primaryNoNewArray_lfno_primary\n (char2&0xC0) "]
1621703[label="andExpression\n char2&0xC0 "]
1721704[label="expressionName\n char2 "]
1721705[label="literal\n 0xC0 "]
1521706[label="literal\n 0x80 "]
1421707[label="expressionStatement\n logger.severe(\"malformed input around byte \"+count); "]
1521708[label="methodInvocation\n logger.severe(\"malformed input around byte \"+count) "]
1621709[label="typeName\n logger "]
1621710[label="additiveExpression\n \"malformed input around byte \"+count "]
1721711[label="literal\n \"malformed input around byte \" "]
1721712[label="expressionName\n count "]
1321713[label="expressionStatement\n chararr[chararr_count++]=(char)(((c&0x1F)<<6)|(char2&0x3F)); "]
1421714[label="assignment\n chararr[chararr_count++]=(char)(((c&0x1F)<<6)|(char2&0x3F)) "]
1521715[label="arrayAccess\n chararr[chararr_count++] "]
1621716[label="expressionName\n chararr "]
1621717[label="postfixExpression\n chararr_count++ "]
1721718[label="expressionName\n chararr_count "]
1721719[label="postIncrementExpression_lf_postfixExpression\n ++ "]
1521720[label="assignmentOperator\n = "]
1521721[label="castExpression\n (char)(((c&0x1F)<<6)|(char2&0x3F)) "]
1621722[label="integralType\n char "]
1621723[label="primaryNoNewArray_lfno_primary\n (((c&0x1F)<<6)|(char2&0x3F)) "]
1721724[label="inclusiveOrExpression\n ((c&0x1F)<<6)|(char2&0x3F) "]
1821725[label="primaryNoNewArray_lfno_primary\n ((c&0x1F)<<6) "]
1921726[label="shiftExpression\n (c&0x1F)<<6 "]
2021727[label="primaryNoNewArray_lfno_primary\n (c&0x1F) "]
2121728[label="andExpression\n c&0x1F "]
2221729[label="expressionName\n c "]
2221730[label="literal\n 0x1F "]
2021731[label="literal\n 6 "]
1821732[label="primaryNoNewArray_lfno_primary\n (char2&0x3F) "]
1921733[label="andExpression\n char2&0x3F "]
2021734[label="expressionName\n char2 "]
2021735[label="literal\n 0x3F "]
1321736[label="breakStatement\n break; "]
1121737[label="switchBlockStatementGroup\n case14:count+=3;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-2];char3=(int)bytearr[count-1];if(((char2&0xC0)!=0x80)||((char3&0xC0)!=0x80))logger.severe(\"malformed input around byte \"+(count-1));chararr[chararr_count++]=(char)(((c&0x0F)<<12)|((char2&0x3F)<<6)|((char3&0x3F)<<0));break; "]
1221738[label="switchLabel\n case14: "]
1321739[label="literal\n 14 "]
1221740[label="blockStatements\n count+=3;if(count>utflen)logger.severe(\"malformed input: partial character at end\");char2=(int)bytearr[count-2];char3=(int)bytearr[count-1];if(((char2&0xC0)!=0x80)||((char3&0xC0)!=0x80))logger.severe(\"malformed input around byte \"+(count-1));chararr[chararr_count++]=(char)(((c&0x0F)<<12)|((char2&0x3F)<<6)|((char3&0x3F)<<0));break; "]
1321741[label="expressionStatement\n count+=3; "]
1421742[label="assignment\n count+=3 "]
1521743[label="expressionName\n count "]
1521744[label="assignmentOperator\n += "]
1521745[label="literal\n 3 "]
1321746[label="ifThenStatement\n if(count>utflen)logger.severe(\"malformed input: partial character at end\"); "]
1421747[label="relationalExpression\n count>utflen "]
1521748[label="expressionName\n count "]
1521749[label="expressionName\n utflen "]
1421750[label="expressionStatement\n logger.severe(\"malformed input: partial character at end\"); "]
1521751[label="methodInvocation\n logger.severe(\"malformed input: partial character at end\") "]
1621752[label="typeName\n logger "]
1621753[label="literal\n \"malformed input: partial character at end\" "]
1321754[label="expressionStatement\n char2=(int)bytearr[count-2]; "]
1421755[label="assignment\n char2=(int)bytearr[count-2] "]
1521756[label="expressionName\n char2 "]
1521757[label="assignmentOperator\n = "]
1521758[label="castExpression\n (int)bytearr[count-2] "]
1621759[label="integralType\n int "]
1621760[label="arrayAccess_lfno_primary\n bytearr[count-2] "]
1721761[label="expressionName\n bytearr "]
1721762[label="additiveExpression\n count-2 "]
1821763[label="expressionName\n count "]
1821764[label="literal\n 2 "]
1321765[label="expressionStatement\n char3=(int)bytearr[count-1]; "]
1421766[label="assignment\n char3=(int)bytearr[count-1] "]
1521767[label="expressionName\n char3 "]
1521768[label="assignmentOperator\n = "]
1521769[label="castExpression\n (int)bytearr[count-1] "]
1621770[label="integralType\n int "]
1621771[label="arrayAccess_lfno_primary\n bytearr[count-1] "]
1721772[label="expressionName\n bytearr "]
1721773[label="additiveExpression\n count-1 "]
1821774[label="expressionName\n count "]
1821775[label="literal\n 1 "]
1321776[label="ifThenStatement\n if(((char2&0xC0)!=0x80)||((char3&0xC0)!=0x80))logger.severe(\"malformed input around byte \"+(count-1)); "]
1421777[label="conditionalOrExpression\n ((char2&0xC0)!=0x80)||((char3&0xC0)!=0x80) "]
1521778[label="primaryNoNewArray_lfno_primary\n ((char2&0xC0)!=0x80) "]
1621779[label="equalityExpression\n (char2&0xC0)!=0x80 "]
1721780[label="primaryNoNewArray_lfno_primary\n (char2&0xC0) "]
1821781[label="andExpression\n char2&0xC0 "]
1921782[label="expressionName\n char2 "]
1921783[label="literal\n 0xC0 "]
1721784[label="literal\n 0x80 "]
1521785[label="primaryNoNewArray_lfno_primary\n ((char3&0xC0)!=0x80) "]
1621786[label="equalityExpression\n (char3&0xC0)!=0x80 "]
1721787[label="primaryNoNewArray_lfno_primary\n (char3&0xC0) "]
1821788[label="andExpression\n char3&0xC0 "]
1921789[label="expressionName\n char3 "]
1921790[label="literal\n 0xC0 "]
1721791[label="literal\n 0x80 "]
1421792[label="expressionStatement\n logger.severe(\"malformed input around byte \"+(count-1)); "]
1521793[label="methodInvocation\n logger.severe(\"malformed input around byte \"+(count-1)) "]
1621794[label="typeName\n logger "]
1621795[label="additiveExpression\n \"malformed input around byte \"+(count-1) "]
1721796[label="literal\n \"malformed input around byte \" "]
1721797[label="primaryNoNewArray_lfno_primary\n (count-1) "]
1821798[label="additiveExpression\n count-1 "]
1921799[label="expressionName\n count "]
1921800[label="literal\n 1 "]
1321801[label="expressionStatement\n chararr[chararr_count++]=(char)(((c&0x0F)<<12)|((char2&0x3F)<<6)|((char3&0x3F)<<0)); "]
1421802[label="assignment\n chararr[chararr_count++]=(char)(((c&0x0F)<<12)|((char2&0x3F)<<6)|((char3&0x3F)<<0)) "]
1521803[label="arrayAccess\n chararr[chararr_count++] "]
1621804[label="expressionName\n chararr "]
1621805[label="postfixExpression\n chararr_count++ "]
1721806[label="expressionName\n chararr_count "]
1721807[label="postIncrementExpression_lf_postfixExpression\n ++ "]
1521808[label="assignmentOperator\n = "]
1521809[label="castExpression\n (char)(((c&0x0F)<<12)|((char2&0x3F)<<6)|((char3&0x3F)<<0)) "]
1621810[label="integralType\n char "]
1621811[label="primaryNoNewArray_lfno_primary\n (((c&0x0F)<<12)|((char2&0x3F)<<6)|((char3&0x3F)<<0)) "]
1721812[label="inclusiveOrExpression\n ((c&0x0F)<<12)|((char2&0x3F)<<6)|((char3&0x3F)<<0) "]
1821813[label="inclusiveOrExpression\n ((c&0x0F)<<12)|((char2&0x3F)<<6) "]
1921814[label="primaryNoNewArray_lfno_primary\n ((c&0x0F)<<12) "]
2021815[label="shiftExpression\n (c&0x0F)<<12 "]
2121816[label="primaryNoNewArray_lfno_primary\n (c&0x0F) "]
2221817[label="andExpression\n c&0x0F "]
2321818[label="expressionName\n c "]
2321819[label="literal\n 0x0F "]
2121820[label="literal\n 12 "]
1921821[label="primaryNoNewArray_lfno_primary\n ((char2&0x3F)<<6) "]
2021822[label="shiftExpression\n (char2&0x3F)<<6 "]
2121823[label="primaryNoNewArray_lfno_primary\n (char2&0x3F) "]
2221824[label="andExpression\n char2&0x3F "]
2321825[label="expressionName\n char2 "]
2321826[label="literal\n 0x3F "]
2121827[label="literal\n 6 "]
1821828[label="primaryNoNewArray_lfno_primary\n ((char3&0x3F)<<0) "]
1921829[label="shiftExpression\n (char3&0x3F)<<0 "]
2021830[label="primaryNoNewArray_lfno_primary\n (char3&0x3F) "]
2121831[label="andExpression\n char3&0x3F "]
2221832[label="expressionName\n char3 "]
2221833[label="literal\n 0x3F "]
2021834[label="literal\n 0 "]
1321835[label="breakStatement\n break; "]
1121836[label="switchBlockStatementGroup\n default:logger.severe(\"malformed input around byte \"+count); "]
1221837[label="switchLabel\n default: "]
1221838[label="expressionStatement\n logger.severe(\"malformed input around byte \"+count); "]
1321839[label="methodInvocation\n logger.severe(\"malformed input around byte \"+count) "]
1421840[label="typeName\n logger "]
1421841[label="additiveExpression\n \"malformed input around byte \"+count "]
1521842[label="literal\n \"malformed input around byte \" "]
1521843[label="expressionName\n count "]
621844[label="returnStatement\n returnnewString(chararr,0,chararr_count); "]
721845[label="classInstanceCreationExpression_lfno_primary\n newString(chararr,0,chararr_count) "]
821846[label="argumentList\n chararr,0,chararr_count "]
921847[label="expressionName\n chararr "]
921848[label="literal\n 0 "]
921849[label="expressionName\n chararr_count "]
321850[label="methodDeclaration\n publicintgetOffset(){returnoffset;} "]
421851[label="methodModifier\n public "]
421852[label="methodHeader\n intgetOffset() "]
521853[label="integralType\n int "]
521854[label="methodDeclarator\n getOffset() "]
421855[label="block\n {returnoffset;} "]
521856[label="returnStatement\n returnoffset; "]
621857[label="expressionName\n offset "]
321858[label="methodDeclaration\n publicintgetLength(){returnbytes.length;} "]
421859[label="methodModifier\n public "]
421860[label="methodHeader\n intgetLength() "]
521861[label="integralType\n int "]
521862[label="methodDeclarator\n getLength() "]
421863[label="block\n {returnbytes.length;} "]
521864[label="returnStatement\n returnbytes.length; "]
621865[label="expressionName\n bytes.length "]
721866[label="ambiguousName\n bytes "]
321867[label="methodDeclaration\n publicvoidclose(){bytes=null;} "]
421868[label="methodModifier\n public "]
421869[label="methodHeader\n voidclose() "]
521870[label="result\n void "]
521871[label="methodDeclarator\n close() "]
421872[label="block\n {bytes=null;} "]
521873[label="expressionStatement\n bytes=null; "]
621874[label="assignment\n bytes=null "]
721875[label="expressionName\n bytes "]
721876[label="assignmentOperator\n = "]
721877[label="literal\n null "]
321878[label="methodDeclaration\n @Overrideprotectedvoidfinalize()throwsThrowable{close();} "]
421879[label="markerAnnotation\n @Override "]
521880[label="typeName\n Override "]
421881[label="methodModifier\n protected "]
421882[label="methodHeader\n voidfinalize()throwsThrowable "]
521883[label="result\n void "]
521884[label="methodDeclarator\n finalize() "]
521885[label="throws_\n throwsThrowable "]
621886[label="classType\n Throwable "]
421887[label="block\n {close();} "]
521888[label="expressionStatement\n close(); "]
621889[label="methodInvocation\n close() "]
721890[label="methodName\n close "]
021891[label="compilationUnit\n packagecom.hankcs.hanlp.corpus.io;importcom.hankcs.hanlp.utility.TextUtility;importjava.io.FileInputStream;importjava.io.IOException;importjava.nio.ByteBuffer;importjava.nio.channels.FileChannel;importstaticcom.hankcs.hanlp.utility.Predefine.logger;publicclassByteArrayFileStreamextendsByteArrayStream{privateFileChannelfileChannel;publicByteArrayFileStream(byte[]bytes,intbufferSize,FileChannelfileChannel){super(bytes,bufferSize);this.fileChannel=fileChannel;}publicstaticByteArrayFileStreamcreateByteArrayFileStream(Stringpath){try{FileInputStreamfileInputStream=newFileInputStream(path);returncreateByteArrayFileStream(fileInputStream);}catch(Exceptione){logger.warning(TextUtility.exceptionToString(e));returnnull;}}publicstaticByteArrayFileStreamcreateByteArrayFileStream(FileInputStreamfileInputStream)throwsIOException{FileChannelchannel=fileInputStream.getChannel();longsize=channel.size();intbufferSize=(int)Math.min(1048576,size);ByteBufferbyteBuffer=ByteBuffer.allocate(bufferSize);if(channel.read(byteBuffer)==size){channel.close();channel=null;}byteBuffer.flip();byte[]bytes=byteBuffer.array();returnnewByteArrayFileStream(bytes,bufferSize,channel);}@OverridepublicbooleanhasMore(){returnoffset<bufferSize||fileChannel!=null;}@OverrideprotectedvoidensureAvailableBytes(intsize){if(offset+size>bufferSize){try{intavailableBytes=(int)(fileChannel.size()-fileChannel.position());ByteBufferbyteBuffer=ByteBuffer.allocate(Math.min(availableBytes,offset));intreadBytes=fileChannel.read(byteBuffer);if(readBytes==availableBytes){fileChannel.close();fileChannel=null;}assertreadBytes>0:\"已到达文件尾部！\";byteBuffer.flip();byte[]bytes=byteBuffer.array();System.arraycopy(this.bytes,offset,this.bytes,offset-readBytes,bufferSize-offset);System.arraycopy(bytes,0,this.bytes,bufferSize-readBytes,readBytes);offset-=readBytes;}catch(IOExceptione){thrownewRuntimeException(e);}}}@Overridepublicvoidclose(){super.close();try{fileChannel.close();}catch(IOExceptione){logger.warning(TextUtility.exceptionToString(e));}}}<EOF> "]
121892[label="packageDeclaration\n packagecom.hankcs.hanlp.corpus.io; "]
221893[label="packageName\n com.hankcs.hanlp.corpus.io "]
321894[label="packageName\n com.hankcs.hanlp.corpus "]
421895[label="packageName\n com.hankcs.hanlp "]
521896[label="packageName\n com.hankcs "]
621897[label="packageName\n com "]
121898[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.TextUtility; "]
221899[label="typeName\n com.hankcs.hanlp.utility.TextUtility "]
321900[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
421901[label="packageOrTypeName\n com.hankcs.hanlp "]
521902[label="packageOrTypeName\n com.hankcs "]
621903[label="packageOrTypeName\n com "]
121904[label="singleTypeImportDeclaration\n importjava.io.FileInputStream; "]
221905[label="typeName\n java.io.FileInputStream "]
321906[label="packageOrTypeName\n java.io "]
421907[label="packageOrTypeName\n java "]
121908[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
221909[label="typeName\n java.io.IOException "]
321910[label="packageOrTypeName\n java.io "]
421911[label="packageOrTypeName\n java "]
121912[label="singleTypeImportDeclaration\n importjava.nio.ByteBuffer; "]
221913[label="typeName\n java.nio.ByteBuffer "]
321914[label="packageOrTypeName\n java.nio "]
421915[label="packageOrTypeName\n java "]
121916[label="singleTypeImportDeclaration\n importjava.nio.channels.FileChannel; "]
221917[label="typeName\n java.nio.channels.FileChannel "]
321918[label="packageOrTypeName\n java.nio.channels "]
421919[label="packageOrTypeName\n java.nio "]
521920[label="packageOrTypeName\n java "]
121921[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.utility.Predefine.logger; "]
221922[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
321923[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
421924[label="packageOrTypeName\n com.hankcs.hanlp "]
521925[label="packageOrTypeName\n com.hankcs "]
621926[label="packageOrTypeName\n com "]
121927[label="normalClassDeclaration\n publicclassByteArrayFileStreamextendsByteArrayStream{privateFileChannelfileChannel;publicByteArrayFileStream(byte[]bytes,intbufferSize,FileChannelfileChannel){super(bytes,bufferSize);this.fileChannel=fileChannel;}publicstaticByteArrayFileStreamcreateByteArrayFileStream(Stringpath){try{FileInputStreamfileInputStream=newFileInputStream(path);returncreateByteArrayFileStream(fileInputStream);}catch(Exceptione){logger.warning(TextUtility.exceptionToString(e));returnnull;}}publicstaticByteArrayFileStreamcreateByteArrayFileStream(FileInputStreamfileInputStream)throwsIOException{FileChannelchannel=fileInputStream.getChannel();longsize=channel.size();intbufferSize=(int)Math.min(1048576,size);ByteBufferbyteBuffer=ByteBuffer.allocate(bufferSize);if(channel.read(byteBuffer)==size){channel.close();channel=null;}byteBuffer.flip();byte[]bytes=byteBuffer.array();returnnewByteArrayFileStream(bytes,bufferSize,channel);}@OverridepublicbooleanhasMore(){returnoffset<bufferSize||fileChannel!=null;}@OverrideprotectedvoidensureAvailableBytes(intsize){if(offset+size>bufferSize){try{intavailableBytes=(int)(fileChannel.size()-fileChannel.position());ByteBufferbyteBuffer=ByteBuffer.allocate(Math.min(availableBytes,offset));intreadBytes=fileChannel.read(byteBuffer);if(readBytes==availableBytes){fileChannel.close();fileChannel=null;}assertreadBytes>0:\"已到达文件尾部！\";byteBuffer.flip();byte[]bytes=byteBuffer.array();System.arraycopy(this.bytes,offset,this.bytes,offset-readBytes,bufferSize-offset);System.arraycopy(bytes,0,this.bytes,bufferSize-readBytes,readBytes);offset-=readBytes;}catch(IOExceptione){thrownewRuntimeException(e);}}}@Overridepublicvoidclose(){super.close();try{fileChannel.close();}catch(IOExceptione){logger.warning(TextUtility.exceptionToString(e));}}} "]
221928[label="classModifier\n public "]
221929[label="superclass\n extendsByteArrayStream "]
321930[label="classType\n ByteArrayStream "]
221931[label="classBody\n {privateFileChannelfileChannel;publicByteArrayFileStream(byte[]bytes,intbufferSize,FileChannelfileChannel){super(bytes,bufferSize);this.fileChannel=fileChannel;}publicstaticByteArrayFileStreamcreateByteArrayFileStream(Stringpath){try{FileInputStreamfileInputStream=newFileInputStream(path);returncreateByteArrayFileStream(fileInputStream);}catch(Exceptione){logger.warning(TextUtility.exceptionToString(e));returnnull;}}publicstaticByteArrayFileStreamcreateByteArrayFileStream(FileInputStreamfileInputStream)throwsIOException{FileChannelchannel=fileInputStream.getChannel();longsize=channel.size();intbufferSize=(int)Math.min(1048576,size);ByteBufferbyteBuffer=ByteBuffer.allocate(bufferSize);if(channel.read(byteBuffer)==size){channel.close();channel=null;}byteBuffer.flip();byte[]bytes=byteBuffer.array();returnnewByteArrayFileStream(bytes,bufferSize,channel);}@OverridepublicbooleanhasMore(){returnoffset<bufferSize||fileChannel!=null;}@OverrideprotectedvoidensureAvailableBytes(intsize){if(offset+size>bufferSize){try{intavailableBytes=(int)(fileChannel.size()-fileChannel.position());ByteBufferbyteBuffer=ByteBuffer.allocate(Math.min(availableBytes,offset));intreadBytes=fileChannel.read(byteBuffer);if(readBytes==availableBytes){fileChannel.close();fileChannel=null;}assertreadBytes>0:\"已到达文件尾部！\";byteBuffer.flip();byte[]bytes=byteBuffer.array();System.arraycopy(this.bytes,offset,this.bytes,offset-readBytes,bufferSize-offset);System.arraycopy(bytes,0,this.bytes,bufferSize-readBytes,readBytes);offset-=readBytes;}catch(IOExceptione){thrownewRuntimeException(e);}}}@Overridepublicvoidclose(){super.close();try{fileChannel.close();}catch(IOExceptione){logger.warning(TextUtility.exceptionToString(e));}}} "]
321932[label="fieldDeclaration\n privateFileChannelfileChannel; "]
421933[label="fieldModifier\n private "]
421934[label="unannClassType_lfno_unannClassOrInterfaceType\n FileChannel "]
421935[label="variableDeclaratorId\n fileChannel "]
321936[label="constructorDeclaration\n publicByteArrayFileStream(byte[]bytes,intbufferSize,FileChannelfileChannel){super(bytes,bufferSize);this.fileChannel=fileChannel;} "]
421937[label="constructorModifier\n public "]
421938[label="constructorDeclarator\n ByteArrayFileStream(byte[]bytes,intbufferSize,FileChannelfileChannel) "]
521939[label="simpleTypeName\n ByteArrayFileStream "]
521940[label="formalParameterList\n byte[]bytes,intbufferSize,FileChannelfileChannel "]
621941[label="formalParameters\n byte[]bytes,intbufferSize "]
721942[label="formalParameter\n byte[]bytes "]
821943[label="unannArrayType\n byte[] "]
921944[label="integralType\n byte "]
921945[label="dims\n [] "]
821946[label="variableDeclaratorId\n bytes "]
721947[label="formalParameter\n intbufferSize "]
821948[label="integralType\n int "]
821949[label="variableDeclaratorId\n bufferSize "]
621950[label="formalParameter\n FileChannelfileChannel "]
721951[label="unannClassType_lfno_unannClassOrInterfaceType\n FileChannel "]
721952[label="variableDeclaratorId\n fileChannel "]
421953[label="constructorBody\n {super(bytes,bufferSize);this.fileChannel=fileChannel;} "]
521954[label="explicitConstructorInvocation\n super(bytes,bufferSize); "]
621955[label="argumentList\n bytes,bufferSize "]
721956[label="expressionName\n bytes "]
721957[label="expressionName\n bufferSize "]
521958[label="expressionStatement\n this.fileChannel=fileChannel; "]
621959[label="assignment\n this.fileChannel=fileChannel "]
721960[label="fieldAccess\n this.fileChannel "]
821961[label="primaryNoNewArray_lfno_primary\n this "]
721962[label="assignmentOperator\n = "]
721963[label="expressionName\n fileChannel "]
321964[label="methodDeclaration\n publicstaticByteArrayFileStreamcreateByteArrayFileStream(Stringpath){try{FileInputStreamfileInputStream=newFileInputStream(path);returncreateByteArrayFileStream(fileInputStream);}catch(Exceptione){logger.warning(TextUtility.exceptionToString(e));returnnull;}} "]
421965[label="methodModifier\n public "]
421966[label="methodModifier\n static "]
421967[label="methodHeader\n ByteArrayFileStreamcreateByteArrayFileStream(Stringpath) "]
521968[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArrayFileStream "]
521969[label="methodDeclarator\n createByteArrayFileStream(Stringpath) "]
621970[label="formalParameter\n Stringpath "]
721971[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
721972[label="variableDeclaratorId\n path "]
421973[label="block\n {try{FileInputStreamfileInputStream=newFileInputStream(path);returncreateByteArrayFileStream(fileInputStream);}catch(Exceptione){logger.warning(TextUtility.exceptionToString(e));returnnull;}} "]
521974[label="tryStatement\n try{FileInputStreamfileInputStream=newFileInputStream(path);returncreateByteArrayFileStream(fileInputStream);}catch(Exceptione){logger.warning(TextUtility.exceptionToString(e));returnnull;} "]
621975[label="block\n {FileInputStreamfileInputStream=newFileInputStream(path);returncreateByteArrayFileStream(fileInputStream);} "]
721976[label="blockStatements\n FileInputStreamfileInputStream=newFileInputStream(path);returncreateByteArrayFileStream(fileInputStream); "]
821977[label="localVariableDeclarationStatement\n FileInputStreamfileInputStream=newFileInputStream(path); "]
921978[label="localVariableDeclaration\n FileInputStreamfileInputStream=newFileInputStream(path) "]
1021979[label="unannClassType_lfno_unannClassOrInterfaceType\n FileInputStream "]
1021980[label="variableDeclarator\n fileInputStream=newFileInputStream(path) "]
1121981[label="variableDeclaratorId\n fileInputStream "]
1121982[label="classInstanceCreationExpression_lfno_primary\n newFileInputStream(path) "]
1221983[label="expressionName\n path "]
821984[label="returnStatement\n returncreateByteArrayFileStream(fileInputStream); "]
921985[label="methodInvocation_lfno_primary\n createByteArrayFileStream(fileInputStream) "]
1021986[label="methodName\n createByteArrayFileStream "]
1021987[label="expressionName\n fileInputStream "]
621988[label="catchClause\n catch(Exceptione){logger.warning(TextUtility.exceptionToString(e));returnnull;} "]
721989[label="catchFormalParameter\n Exceptione "]
821990[label="unannClassType\n Exception "]
821991[label="variableDeclaratorId\n e "]
721992[label="block\n {logger.warning(TextUtility.exceptionToString(e));returnnull;} "]
821993[label="blockStatements\n logger.warning(TextUtility.exceptionToString(e));returnnull; "]
921994[label="expressionStatement\n logger.warning(TextUtility.exceptionToString(e)); "]
1021995[label="methodInvocation\n logger.warning(TextUtility.exceptionToString(e)) "]
1121996[label="typeName\n logger "]
1121997[label="methodInvocation_lfno_primary\n TextUtility.exceptionToString(e) "]
1221998[label="typeName\n TextUtility "]
1221999[label="expressionName\n e "]
922000[label="returnStatement\n returnnull; "]
1022001[label="literal\n null "]
322002[label="methodDeclaration\n publicstaticByteArrayFileStreamcreateByteArrayFileStream(FileInputStreamfileInputStream)throwsIOException{FileChannelchannel=fileInputStream.getChannel();longsize=channel.size();intbufferSize=(int)Math.min(1048576,size);ByteBufferbyteBuffer=ByteBuffer.allocate(bufferSize);if(channel.read(byteBuffer)==size){channel.close();channel=null;}byteBuffer.flip();byte[]bytes=byteBuffer.array();returnnewByteArrayFileStream(bytes,bufferSize,channel);} "]
422003[label="methodModifier\n public "]
422004[label="methodModifier\n static "]
422005[label="methodHeader\n ByteArrayFileStreamcreateByteArrayFileStream(FileInputStreamfileInputStream)throwsIOException "]
522006[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArrayFileStream "]
522007[label="methodDeclarator\n createByteArrayFileStream(FileInputStreamfileInputStream) "]
622008[label="formalParameter\n FileInputStreamfileInputStream "]
722009[label="unannClassType_lfno_unannClassOrInterfaceType\n FileInputStream "]
722010[label="variableDeclaratorId\n fileInputStream "]
522011[label="throws_\n throwsIOException "]
622012[label="classType\n IOException "]
422013[label="block\n {FileChannelchannel=fileInputStream.getChannel();longsize=channel.size();intbufferSize=(int)Math.min(1048576,size);ByteBufferbyteBuffer=ByteBuffer.allocate(bufferSize);if(channel.read(byteBuffer)==size){channel.close();channel=null;}byteBuffer.flip();byte[]bytes=byteBuffer.array();returnnewByteArrayFileStream(bytes,bufferSize,channel);} "]
522014[label="blockStatements\n FileChannelchannel=fileInputStream.getChannel();longsize=channel.size();intbufferSize=(int)Math.min(1048576,size);ByteBufferbyteBuffer=ByteBuffer.allocate(bufferSize);if(channel.read(byteBuffer)==size){channel.close();channel=null;}byteBuffer.flip();byte[]bytes=byteBuffer.array();returnnewByteArrayFileStream(bytes,bufferSize,channel); "]
622015[label="localVariableDeclarationStatement\n FileChannelchannel=fileInputStream.getChannel(); "]
722016[label="localVariableDeclaration\n FileChannelchannel=fileInputStream.getChannel() "]
822017[label="unannClassType_lfno_unannClassOrInterfaceType\n FileChannel "]
822018[label="variableDeclarator\n channel=fileInputStream.getChannel() "]
922019[label="variableDeclaratorId\n channel "]
922020[label="methodInvocation_lfno_primary\n fileInputStream.getChannel() "]
1022021[label="typeName\n fileInputStream "]
622022[label="localVariableDeclarationStatement\n longsize=channel.size(); "]
722023[label="localVariableDeclaration\n longsize=channel.size() "]
822024[label="integralType\n long "]
822025[label="variableDeclarator\n size=channel.size() "]
922026[label="variableDeclaratorId\n size "]
922027[label="methodInvocation_lfno_primary\n channel.size() "]
1022028[label="typeName\n channel "]
622029[label="localVariableDeclarationStatement\n intbufferSize=(int)Math.min(1048576,size); "]
722030[label="localVariableDeclaration\n intbufferSize=(int)Math.min(1048576,size) "]
822031[label="integralType\n int "]
822032[label="variableDeclarator\n bufferSize=(int)Math.min(1048576,size) "]
922033[label="variableDeclaratorId\n bufferSize "]
922034[label="castExpression\n (int)Math.min(1048576,size) "]
1022035[label="integralType\n int "]
1022036[label="methodInvocation_lfno_primary\n Math.min(1048576,size) "]
1122037[label="typeName\n Math "]
1122038[label="argumentList\n 1048576,size "]
1222039[label="literal\n 1048576 "]
1222040[label="expressionName\n size "]
622041[label="localVariableDeclarationStatement\n ByteBufferbyteBuffer=ByteBuffer.allocate(bufferSize); "]
722042[label="localVariableDeclaration\n ByteBufferbyteBuffer=ByteBuffer.allocate(bufferSize) "]
822043[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteBuffer "]
822044[label="variableDeclarator\n byteBuffer=ByteBuffer.allocate(bufferSize) "]
922045[label="variableDeclaratorId\n byteBuffer "]
922046[label="methodInvocation_lfno_primary\n ByteBuffer.allocate(bufferSize) "]
1022047[label="typeName\n ByteBuffer "]
1022048[label="expressionName\n bufferSize "]
622049[label="ifThenStatement\n if(channel.read(byteBuffer)==size){channel.close();channel=null;} "]
722050[label="equalityExpression\n channel.read(byteBuffer)==size "]
822051[label="methodInvocation_lfno_primary\n channel.read(byteBuffer) "]
922052[label="typeName\n channel "]
922053[label="expressionName\n byteBuffer "]
822054[label="expressionName\n size "]
722055[label="block\n {channel.close();channel=null;} "]
822056[label="blockStatements\n channel.close();channel=null; "]
922057[label="expressionStatement\n channel.close(); "]
1022058[label="methodInvocation\n channel.close() "]
1122059[label="typeName\n channel "]
922060[label="expressionStatement\n channel=null; "]
1022061[label="assignment\n channel=null "]
1122062[label="expressionName\n channel "]
1122063[label="assignmentOperator\n = "]
1122064[label="literal\n null "]
622065[label="expressionStatement\n byteBuffer.flip(); "]
722066[label="methodInvocation\n byteBuffer.flip() "]
822067[label="typeName\n byteBuffer "]
622068[label="localVariableDeclarationStatement\n byte[]bytes=byteBuffer.array(); "]
722069[label="localVariableDeclaration\n byte[]bytes=byteBuffer.array() "]
822070[label="unannArrayType\n byte[] "]
922071[label="integralType\n byte "]
922072[label="dims\n [] "]
822073[label="variableDeclarator\n bytes=byteBuffer.array() "]
922074[label="variableDeclaratorId\n bytes "]
922075[label="methodInvocation_lfno_primary\n byteBuffer.array() "]
1022076[label="typeName\n byteBuffer "]
622077[label="returnStatement\n returnnewByteArrayFileStream(bytes,bufferSize,channel); "]
722078[label="classInstanceCreationExpression_lfno_primary\n newByteArrayFileStream(bytes,bufferSize,channel) "]
822079[label="argumentList\n bytes,bufferSize,channel "]
922080[label="expressionName\n bytes "]
922081[label="expressionName\n bufferSize "]
922082[label="expressionName\n channel "]
322083[label="methodDeclaration\n @OverridepublicbooleanhasMore(){returnoffset<bufferSize||fileChannel!=null;} "]
422084[label="markerAnnotation\n @Override "]
522085[label="typeName\n Override "]
422086[label="methodModifier\n public "]
422087[label="methodHeader\n booleanhasMore() "]
522088[label="unannPrimitiveType\n boolean "]
522089[label="methodDeclarator\n hasMore() "]
422090[label="block\n {returnoffset<bufferSize||fileChannel!=null;} "]
522091[label="returnStatement\n returnoffset<bufferSize||fileChannel!=null; "]
622092[label="conditionalOrExpression\n offset<bufferSize||fileChannel!=null "]
722093[label="relationalExpression\n offset<bufferSize "]
822094[label="expressionName\n offset "]
822095[label="expressionName\n bufferSize "]
722096[label="equalityExpression\n fileChannel!=null "]
822097[label="expressionName\n fileChannel "]
822098[label="literal\n null "]
322099[label="methodDeclaration\n @OverrideprotectedvoidensureAvailableBytes(intsize){if(offset+size>bufferSize){try{intavailableBytes=(int)(fileChannel.size()-fileChannel.position());ByteBufferbyteBuffer=ByteBuffer.allocate(Math.min(availableBytes,offset));intreadBytes=fileChannel.read(byteBuffer);if(readBytes==availableBytes){fileChannel.close();fileChannel=null;}assertreadBytes>0:\"已到达文件尾部！\";byteBuffer.flip();byte[]bytes=byteBuffer.array();System.arraycopy(this.bytes,offset,this.bytes,offset-readBytes,bufferSize-offset);System.arraycopy(bytes,0,this.bytes,bufferSize-readBytes,readBytes);offset-=readBytes;}catch(IOExceptione){thrownewRuntimeException(e);}}} "]
422100[label="markerAnnotation\n @Override "]
522101[label="typeName\n Override "]
422102[label="methodModifier\n protected "]
422103[label="methodHeader\n voidensureAvailableBytes(intsize) "]
522104[label="result\n void "]
522105[label="methodDeclarator\n ensureAvailableBytes(intsize) "]
622106[label="formalParameter\n intsize "]
722107[label="integralType\n int "]
722108[label="variableDeclaratorId\n size "]
422109[label="block\n {if(offset+size>bufferSize){try{intavailableBytes=(int)(fileChannel.size()-fileChannel.position());ByteBufferbyteBuffer=ByteBuffer.allocate(Math.min(availableBytes,offset));intreadBytes=fileChannel.read(byteBuffer);if(readBytes==availableBytes){fileChannel.close();fileChannel=null;}assertreadBytes>0:\"已到达文件尾部！\";byteBuffer.flip();byte[]bytes=byteBuffer.array();System.arraycopy(this.bytes,offset,this.bytes,offset-readBytes,bufferSize-offset);System.arraycopy(bytes,0,this.bytes,bufferSize-readBytes,readBytes);offset-=readBytes;}catch(IOExceptione){thrownewRuntimeException(e);}}} "]
522110[label="ifThenStatement\n if(offset+size>bufferSize){try{intavailableBytes=(int)(fileChannel.size()-fileChannel.position());ByteBufferbyteBuffer=ByteBuffer.allocate(Math.min(availableBytes,offset));intreadBytes=fileChannel.read(byteBuffer);if(readBytes==availableBytes){fileChannel.close();fileChannel=null;}assertreadBytes>0:\"已到达文件尾部！\";byteBuffer.flip();byte[]bytes=byteBuffer.array();System.arraycopy(this.bytes,offset,this.bytes,offset-readBytes,bufferSize-offset);System.arraycopy(bytes,0,this.bytes,bufferSize-readBytes,readBytes);offset-=readBytes;}catch(IOExceptione){thrownewRuntimeException(e);}} "]
622111[label="relationalExpression\n offset+size>bufferSize "]
722112[label="additiveExpression\n offset+size "]
822113[label="expressionName\n offset "]
822114[label="expressionName\n size "]
722115[label="expressionName\n bufferSize "]
622116[label="block\n {try{intavailableBytes=(int)(fileChannel.size()-fileChannel.position());ByteBufferbyteBuffer=ByteBuffer.allocate(Math.min(availableBytes,offset));intreadBytes=fileChannel.read(byteBuffer);if(readBytes==availableBytes){fileChannel.close();fileChannel=null;}assertreadBytes>0:\"已到达文件尾部！\";byteBuffer.flip();byte[]bytes=byteBuffer.array();System.arraycopy(this.bytes,offset,this.bytes,offset-readBytes,bufferSize-offset);System.arraycopy(bytes,0,this.bytes,bufferSize-readBytes,readBytes);offset-=readBytes;}catch(IOExceptione){thrownewRuntimeException(e);}} "]
722117[label="tryStatement\n try{intavailableBytes=(int)(fileChannel.size()-fileChannel.position());ByteBufferbyteBuffer=ByteBuffer.allocate(Math.min(availableBytes,offset));intreadBytes=fileChannel.read(byteBuffer);if(readBytes==availableBytes){fileChannel.close();fileChannel=null;}assertreadBytes>0:\"已到达文件尾部！\";byteBuffer.flip();byte[]bytes=byteBuffer.array();System.arraycopy(this.bytes,offset,this.bytes,offset-readBytes,bufferSize-offset);System.arraycopy(bytes,0,this.bytes,bufferSize-readBytes,readBytes);offset-=readBytes;}catch(IOExceptione){thrownewRuntimeException(e);} "]
822118[label="block\n {intavailableBytes=(int)(fileChannel.size()-fileChannel.position());ByteBufferbyteBuffer=ByteBuffer.allocate(Math.min(availableBytes,offset));intreadBytes=fileChannel.read(byteBuffer);if(readBytes==availableBytes){fileChannel.close();fileChannel=null;}assertreadBytes>0:\"已到达文件尾部！\";byteBuffer.flip();byte[]bytes=byteBuffer.array();System.arraycopy(this.bytes,offset,this.bytes,offset-readBytes,bufferSize-offset);System.arraycopy(bytes,0,this.bytes,bufferSize-readBytes,readBytes);offset-=readBytes;} "]
922119[label="blockStatements\n intavailableBytes=(int)(fileChannel.size()-fileChannel.position());ByteBufferbyteBuffer=ByteBuffer.allocate(Math.min(availableBytes,offset));intreadBytes=fileChannel.read(byteBuffer);if(readBytes==availableBytes){fileChannel.close();fileChannel=null;}assertreadBytes>0:\"已到达文件尾部！\";byteBuffer.flip();byte[]bytes=byteBuffer.array();System.arraycopy(this.bytes,offset,this.bytes,offset-readBytes,bufferSize-offset);System.arraycopy(bytes,0,this.bytes,bufferSize-readBytes,readBytes);offset-=readBytes; "]
1022120[label="localVariableDeclarationStatement\n intavailableBytes=(int)(fileChannel.size()-fileChannel.position()); "]
1122121[label="localVariableDeclaration\n intavailableBytes=(int)(fileChannel.size()-fileChannel.position()) "]
1222122[label="integralType\n int "]
1222123[label="variableDeclarator\n availableBytes=(int)(fileChannel.size()-fileChannel.position()) "]
1322124[label="variableDeclaratorId\n availableBytes "]
1322125[label="castExpression\n (int)(fileChannel.size()-fileChannel.position()) "]
1422126[label="integralType\n int "]
1422127[label="primaryNoNewArray_lfno_primary\n (fileChannel.size()-fileChannel.position()) "]
1522128[label="additiveExpression\n fileChannel.size()-fileChannel.position() "]
1622129[label="methodInvocation_lfno_primary\n fileChannel.size() "]
1722130[label="typeName\n fileChannel "]
1622131[label="methodInvocation_lfno_primary\n fileChannel.position() "]
1722132[label="typeName\n fileChannel "]
1022133[label="localVariableDeclarationStatement\n ByteBufferbyteBuffer=ByteBuffer.allocate(Math.min(availableBytes,offset)); "]
1122134[label="localVariableDeclaration\n ByteBufferbyteBuffer=ByteBuffer.allocate(Math.min(availableBytes,offset)) "]
1222135[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteBuffer "]
1222136[label="variableDeclarator\n byteBuffer=ByteBuffer.allocate(Math.min(availableBytes,offset)) "]
1322137[label="variableDeclaratorId\n byteBuffer "]
1322138[label="methodInvocation_lfno_primary\n ByteBuffer.allocate(Math.min(availableBytes,offset)) "]
1422139[label="typeName\n ByteBuffer "]
1422140[label="methodInvocation_lfno_primary\n Math.min(availableBytes,offset) "]
1522141[label="typeName\n Math "]
1522142[label="argumentList\n availableBytes,offset "]
1622143[label="expressionName\n availableBytes "]
1622144[label="expressionName\n offset "]
1022145[label="localVariableDeclarationStatement\n intreadBytes=fileChannel.read(byteBuffer); "]
1122146[label="localVariableDeclaration\n intreadBytes=fileChannel.read(byteBuffer) "]
1222147[label="integralType\n int "]
1222148[label="variableDeclarator\n readBytes=fileChannel.read(byteBuffer) "]
1322149[label="variableDeclaratorId\n readBytes "]
1322150[label="methodInvocation_lfno_primary\n fileChannel.read(byteBuffer) "]
1422151[label="typeName\n fileChannel "]
1422152[label="expressionName\n byteBuffer "]
1022153[label="ifThenStatement\n if(readBytes==availableBytes){fileChannel.close();fileChannel=null;} "]
1122154[label="equalityExpression\n readBytes==availableBytes "]
1222155[label="expressionName\n readBytes "]
1222156[label="expressionName\n availableBytes "]
1122157[label="block\n {fileChannel.close();fileChannel=null;} "]
1222158[label="blockStatements\n fileChannel.close();fileChannel=null; "]
1322159[label="expressionStatement\n fileChannel.close(); "]
1422160[label="methodInvocation\n fileChannel.close() "]
1522161[label="typeName\n fileChannel "]
1322162[label="expressionStatement\n fileChannel=null; "]
1422163[label="assignment\n fileChannel=null "]
1522164[label="expressionName\n fileChannel "]
1522165[label="assignmentOperator\n = "]
1522166[label="literal\n null "]
1022167[label="assertStatement\n assertreadBytes>0:\"已到达文件尾部！\"; "]
1122168[label="relationalExpression\n readBytes>0 "]
1222169[label="expressionName\n readBytes "]
1222170[label="literal\n 0 "]
1122171[label="literal\n \"已到达文件尾部！\" "]
1022172[label="expressionStatement\n byteBuffer.flip(); "]
1122173[label="methodInvocation\n byteBuffer.flip() "]
1222174[label="typeName\n byteBuffer "]
1022175[label="localVariableDeclarationStatement\n byte[]bytes=byteBuffer.array(); "]
1122176[label="localVariableDeclaration\n byte[]bytes=byteBuffer.array() "]
1222177[label="unannArrayType\n byte[] "]
1322178[label="integralType\n byte "]
1322179[label="dims\n [] "]
1222180[label="variableDeclarator\n bytes=byteBuffer.array() "]
1322181[label="variableDeclaratorId\n bytes "]
1322182[label="methodInvocation_lfno_primary\n byteBuffer.array() "]
1422183[label="typeName\n byteBuffer "]
1022184[label="expressionStatement\n System.arraycopy(this.bytes,offset,this.bytes,offset-readBytes,bufferSize-offset); "]
1122185[label="methodInvocation\n System.arraycopy(this.bytes,offset,this.bytes,offset-readBytes,bufferSize-offset) "]
1222186[label="typeName\n System "]
1222187[label="argumentList\n this.bytes,offset,this.bytes,offset-readBytes,bufferSize-offset "]
1322188[label="primary\n this.bytes "]
1422189[label="primaryNoNewArray_lfno_primary\n this "]
1422190[label="fieldAccess_lf_primary\n .bytes "]
1322191[label="expressionName\n offset "]
1322192[label="primary\n this.bytes "]
1422193[label="primaryNoNewArray_lfno_primary\n this "]
1422194[label="fieldAccess_lf_primary\n .bytes "]
1322195[label="additiveExpression\n offset-readBytes "]
1422196[label="expressionName\n offset "]
1422197[label="expressionName\n readBytes "]
1322198[label="additiveExpression\n bufferSize-offset "]
1422199[label="expressionName\n bufferSize "]
1422200[label="expressionName\n offset "]
1022201[label="expressionStatement\n System.arraycopy(bytes,0,this.bytes,bufferSize-readBytes,readBytes); "]
1122202[label="methodInvocation\n System.arraycopy(bytes,0,this.bytes,bufferSize-readBytes,readBytes) "]
1222203[label="typeName\n System "]
1222204[label="argumentList\n bytes,0,this.bytes,bufferSize-readBytes,readBytes "]
1322205[label="expressionName\n bytes "]
1322206[label="literal\n 0 "]
1322207[label="primary\n this.bytes "]
1422208[label="primaryNoNewArray_lfno_primary\n this "]
1422209[label="fieldAccess_lf_primary\n .bytes "]
1322210[label="additiveExpression\n bufferSize-readBytes "]
1422211[label="expressionName\n bufferSize "]
1422212[label="expressionName\n readBytes "]
1322213[label="expressionName\n readBytes "]
1022214[label="expressionStatement\n offset-=readBytes; "]
1122215[label="assignment\n offset-=readBytes "]
1222216[label="expressionName\n offset "]
1222217[label="assignmentOperator\n -= "]
1222218[label="expressionName\n readBytes "]
822219[label="catchClause\n catch(IOExceptione){thrownewRuntimeException(e);} "]
922220[label="catchFormalParameter\n IOExceptione "]
1022221[label="unannClassType\n IOException "]
1022222[label="variableDeclaratorId\n e "]
922223[label="block\n {thrownewRuntimeException(e);} "]
1022224[label="throwStatement\n thrownewRuntimeException(e); "]
1122225[label="classInstanceCreationExpression_lfno_primary\n newRuntimeException(e) "]
1222226[label="expressionName\n e "]
322227[label="methodDeclaration\n @Overridepublicvoidclose(){super.close();try{fileChannel.close();}catch(IOExceptione){logger.warning(TextUtility.exceptionToString(e));}} "]
422228[label="markerAnnotation\n @Override "]
522229[label="typeName\n Override "]
422230[label="methodModifier\n public "]
422231[label="methodHeader\n voidclose() "]
522232[label="result\n void "]
522233[label="methodDeclarator\n close() "]
422234[label="block\n {super.close();try{fileChannel.close();}catch(IOExceptione){logger.warning(TextUtility.exceptionToString(e));}} "]
522235[label="blockStatements\n super.close();try{fileChannel.close();}catch(IOExceptione){logger.warning(TextUtility.exceptionToString(e));} "]
622236[label="expressionStatement\n super.close(); "]
722237[label="methodInvocation\n super.close() "]
622238[label="tryStatement\n try{fileChannel.close();}catch(IOExceptione){logger.warning(TextUtility.exceptionToString(e));} "]
722239[label="block\n {fileChannel.close();} "]
822240[label="expressionStatement\n fileChannel.close(); "]
922241[label="methodInvocation\n fileChannel.close() "]
1022242[label="typeName\n fileChannel "]
722243[label="catchClause\n catch(IOExceptione){logger.warning(TextUtility.exceptionToString(e));} "]
822244[label="catchFormalParameter\n IOExceptione "]
922245[label="unannClassType\n IOException "]
922246[label="variableDeclaratorId\n e "]
822247[label="block\n {logger.warning(TextUtility.exceptionToString(e));} "]
922248[label="expressionStatement\n logger.warning(TextUtility.exceptionToString(e)); "]
1022249[label="methodInvocation\n logger.warning(TextUtility.exceptionToString(e)) "]
1122250[label="typeName\n logger "]
1122251[label="methodInvocation_lfno_primary\n TextUtility.exceptionToString(e) "]
1222252[label="typeName\n TextUtility "]
1222253[label="expressionName\n e "]
022254[label="compilationUnit\n packagecom.hankcs.hanlp.corpus.io;importcom.hankcs.hanlp.utility.TextUtility;importjava.io.FileInputStream;importjava.io.IOException;importjava.io.InputStream;importstaticcom.hankcs.hanlp.HanLP.Config.IOAdapter;importstaticcom.hankcs.hanlp.utility.Predefine.logger;publicclassByteArrayOtherStreamextendsByteArrayStream{InputStreamis;publicByteArrayOtherStream(byte[]bytes,intbufferSize){super(bytes,bufferSize);}publicByteArrayOtherStream(byte[]bytes,intbufferSize,InputStreamis){super(bytes,bufferSize);this.is=is;}publicstaticByteArrayOtherStreamcreateByteArrayOtherStream(Stringpath){try{InputStreamis=IOAdapter==null?newFileInputStream(path):IOAdapter.open(path);returncreateByteArrayOtherStream(is);}catch(Exceptione){logger.warning(TextUtility.exceptionToString(e));returnnull;}}publicstaticByteArrayOtherStreamcreateByteArrayOtherStream(InputStreamis)throwsIOException{if(is==null)returnnull;intsize=is.available();size=Math.max(102400,size);intbufferSize=Math.min(1048576,size);byte[]bytes=newbyte[bufferSize];if(IOUtil.readBytesFromOtherInputStream(is,bytes)==0){thrownewIOException(\"读取了空文件，或参数InputStream已经到了文件尾部\");}returnnewByteArrayOtherStream(bytes,bufferSize,is);}@OverrideprotectedvoidensureAvailableBytes(intsize){if(offset+size>bufferSize){try{intwantedBytes=offset+size-bufferSize;wantedBytes=Math.max(wantedBytes,is.available());wantedBytes=Math.min(wantedBytes,offset);byte[]bytes=newbyte[wantedBytes];intreadBytes=IOUtil.readBytesFromOtherInputStream(is,bytes);assertreadBytes>0:\"已到达文件尾部！\";System.arraycopy(this.bytes,offset,this.bytes,offset-wantedBytes,bufferSize-offset);System.arraycopy(bytes,0,this.bytes,bufferSize-wantedBytes,wantedBytes);offset-=wantedBytes;}catch(IOExceptione){thrownewRuntimeException(e);}}}@Overridepublicvoidclose(){super.close();if(is==null){return;}try{is.close();}catch(IOExceptione){logger.warning(TextUtility.exceptionToString(e));}}}<EOF> "]
122255[label="packageDeclaration\n packagecom.hankcs.hanlp.corpus.io; "]
222256[label="packageName\n com.hankcs.hanlp.corpus.io "]
322257[label="packageName\n com.hankcs.hanlp.corpus "]
422258[label="packageName\n com.hankcs.hanlp "]
522259[label="packageName\n com.hankcs "]
622260[label="packageName\n com "]
122261[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.TextUtility; "]
222262[label="typeName\n com.hankcs.hanlp.utility.TextUtility "]
322263[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
422264[label="packageOrTypeName\n com.hankcs.hanlp "]
522265[label="packageOrTypeName\n com.hankcs "]
622266[label="packageOrTypeName\n com "]
122267[label="singleTypeImportDeclaration\n importjava.io.FileInputStream; "]
222268[label="typeName\n java.io.FileInputStream "]
322269[label="packageOrTypeName\n java.io "]
422270[label="packageOrTypeName\n java "]
122271[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
222272[label="typeName\n java.io.IOException "]
322273[label="packageOrTypeName\n java.io "]
422274[label="packageOrTypeName\n java "]
122275[label="singleTypeImportDeclaration\n importjava.io.InputStream; "]
222276[label="typeName\n java.io.InputStream "]
322277[label="packageOrTypeName\n java.io "]
422278[label="packageOrTypeName\n java "]
122279[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.HanLP.Config.IOAdapter; "]
222280[label="typeName\n com.hankcs.hanlp.HanLP.Config "]
322281[label="packageOrTypeName\n com.hankcs.hanlp.HanLP "]
422282[label="packageOrTypeName\n com.hankcs.hanlp "]
522283[label="packageOrTypeName\n com.hankcs "]
622284[label="packageOrTypeName\n com "]
122285[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.utility.Predefine.logger; "]
222286[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
322287[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
422288[label="packageOrTypeName\n com.hankcs.hanlp "]
522289[label="packageOrTypeName\n com.hankcs "]
622290[label="packageOrTypeName\n com "]
122291[label="normalClassDeclaration\n publicclassByteArrayOtherStreamextendsByteArrayStream{InputStreamis;publicByteArrayOtherStream(byte[]bytes,intbufferSize){super(bytes,bufferSize);}publicByteArrayOtherStream(byte[]bytes,intbufferSize,InputStreamis){super(bytes,bufferSize);this.is=is;}publicstaticByteArrayOtherStreamcreateByteArrayOtherStream(Stringpath){try{InputStreamis=IOAdapter==null?newFileInputStream(path):IOAdapter.open(path);returncreateByteArrayOtherStream(is);}catch(Exceptione){logger.warning(TextUtility.exceptionToString(e));returnnull;}}publicstaticByteArrayOtherStreamcreateByteArrayOtherStream(InputStreamis)throwsIOException{if(is==null)returnnull;intsize=is.available();size=Math.max(102400,size);intbufferSize=Math.min(1048576,size);byte[]bytes=newbyte[bufferSize];if(IOUtil.readBytesFromOtherInputStream(is,bytes)==0){thrownewIOException(\"读取了空文件，或参数InputStream已经到了文件尾部\");}returnnewByteArrayOtherStream(bytes,bufferSize,is);}@OverrideprotectedvoidensureAvailableBytes(intsize){if(offset+size>bufferSize){try{intwantedBytes=offset+size-bufferSize;wantedBytes=Math.max(wantedBytes,is.available());wantedBytes=Math.min(wantedBytes,offset);byte[]bytes=newbyte[wantedBytes];intreadBytes=IOUtil.readBytesFromOtherInputStream(is,bytes);assertreadBytes>0:\"已到达文件尾部！\";System.arraycopy(this.bytes,offset,this.bytes,offset-wantedBytes,bufferSize-offset);System.arraycopy(bytes,0,this.bytes,bufferSize-wantedBytes,wantedBytes);offset-=wantedBytes;}catch(IOExceptione){thrownewRuntimeException(e);}}}@Overridepublicvoidclose(){super.close();if(is==null){return;}try{is.close();}catch(IOExceptione){logger.warning(TextUtility.exceptionToString(e));}}} "]
222292[label="classModifier\n public "]
222293[label="superclass\n extendsByteArrayStream "]
322294[label="classType\n ByteArrayStream "]
222295[label="classBody\n {InputStreamis;publicByteArrayOtherStream(byte[]bytes,intbufferSize){super(bytes,bufferSize);}publicByteArrayOtherStream(byte[]bytes,intbufferSize,InputStreamis){super(bytes,bufferSize);this.is=is;}publicstaticByteArrayOtherStreamcreateByteArrayOtherStream(Stringpath){try{InputStreamis=IOAdapter==null?newFileInputStream(path):IOAdapter.open(path);returncreateByteArrayOtherStream(is);}catch(Exceptione){logger.warning(TextUtility.exceptionToString(e));returnnull;}}publicstaticByteArrayOtherStreamcreateByteArrayOtherStream(InputStreamis)throwsIOException{if(is==null)returnnull;intsize=is.available();size=Math.max(102400,size);intbufferSize=Math.min(1048576,size);byte[]bytes=newbyte[bufferSize];if(IOUtil.readBytesFromOtherInputStream(is,bytes)==0){thrownewIOException(\"读取了空文件，或参数InputStream已经到了文件尾部\");}returnnewByteArrayOtherStream(bytes,bufferSize,is);}@OverrideprotectedvoidensureAvailableBytes(intsize){if(offset+size>bufferSize){try{intwantedBytes=offset+size-bufferSize;wantedBytes=Math.max(wantedBytes,is.available());wantedBytes=Math.min(wantedBytes,offset);byte[]bytes=newbyte[wantedBytes];intreadBytes=IOUtil.readBytesFromOtherInputStream(is,bytes);assertreadBytes>0:\"已到达文件尾部！\";System.arraycopy(this.bytes,offset,this.bytes,offset-wantedBytes,bufferSize-offset);System.arraycopy(bytes,0,this.bytes,bufferSize-wantedBytes,wantedBytes);offset-=wantedBytes;}catch(IOExceptione){thrownewRuntimeException(e);}}}@Overridepublicvoidclose(){super.close();if(is==null){return;}try{is.close();}catch(IOExceptione){logger.warning(TextUtility.exceptionToString(e));}}} "]
322296[label="fieldDeclaration\n InputStreamis; "]
422297[label="unannClassType_lfno_unannClassOrInterfaceType\n InputStream "]
422298[label="variableDeclaratorId\n is "]
322299[label="constructorDeclaration\n publicByteArrayOtherStream(byte[]bytes,intbufferSize){super(bytes,bufferSize);} "]
422300[label="constructorModifier\n public "]
422301[label="constructorDeclarator\n ByteArrayOtherStream(byte[]bytes,intbufferSize) "]
522302[label="simpleTypeName\n ByteArrayOtherStream "]
522303[label="formalParameterList\n byte[]bytes,intbufferSize "]
622304[label="formalParameter\n byte[]bytes "]
722305[label="unannArrayType\n byte[] "]
822306[label="integralType\n byte "]
822307[label="dims\n [] "]
722308[label="variableDeclaratorId\n bytes "]
622309[label="formalParameter\n intbufferSize "]
722310[label="integralType\n int "]
722311[label="variableDeclaratorId\n bufferSize "]
422312[label="constructorBody\n {super(bytes,bufferSize);} "]
522313[label="explicitConstructorInvocation\n super(bytes,bufferSize); "]
622314[label="argumentList\n bytes,bufferSize "]
722315[label="expressionName\n bytes "]
722316[label="expressionName\n bufferSize "]
322317[label="constructorDeclaration\n publicByteArrayOtherStream(byte[]bytes,intbufferSize,InputStreamis){super(bytes,bufferSize);this.is=is;} "]
422318[label="constructorModifier\n public "]
422319[label="constructorDeclarator\n ByteArrayOtherStream(byte[]bytes,intbufferSize,InputStreamis) "]
522320[label="simpleTypeName\n ByteArrayOtherStream "]
522321[label="formalParameterList\n byte[]bytes,intbufferSize,InputStreamis "]
622322[label="formalParameters\n byte[]bytes,intbufferSize "]
722323[label="formalParameter\n byte[]bytes "]
822324[label="unannArrayType\n byte[] "]
922325[label="integralType\n byte "]
922326[label="dims\n [] "]
822327[label="variableDeclaratorId\n bytes "]
722328[label="formalParameter\n intbufferSize "]
822329[label="integralType\n int "]
822330[label="variableDeclaratorId\n bufferSize "]
622331[label="formalParameter\n InputStreamis "]
722332[label="unannClassType_lfno_unannClassOrInterfaceType\n InputStream "]
722333[label="variableDeclaratorId\n is "]
422334[label="constructorBody\n {super(bytes,bufferSize);this.is=is;} "]
522335[label="explicitConstructorInvocation\n super(bytes,bufferSize); "]
622336[label="argumentList\n bytes,bufferSize "]
722337[label="expressionName\n bytes "]
722338[label="expressionName\n bufferSize "]
522339[label="expressionStatement\n this.is=is; "]
622340[label="assignment\n this.is=is "]
722341[label="fieldAccess\n this.is "]
822342[label="primaryNoNewArray_lfno_primary\n this "]
722343[label="assignmentOperator\n = "]
722344[label="expressionName\n is "]
322345[label="methodDeclaration\n publicstaticByteArrayOtherStreamcreateByteArrayOtherStream(Stringpath){try{InputStreamis=IOAdapter==null?newFileInputStream(path):IOAdapter.open(path);returncreateByteArrayOtherStream(is);}catch(Exceptione){logger.warning(TextUtility.exceptionToString(e));returnnull;}} "]
422346[label="methodModifier\n public "]
422347[label="methodModifier\n static "]
422348[label="methodHeader\n ByteArrayOtherStreamcreateByteArrayOtherStream(Stringpath) "]
522349[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArrayOtherStream "]
522350[label="methodDeclarator\n createByteArrayOtherStream(Stringpath) "]
622351[label="formalParameter\n Stringpath "]
722352[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
722353[label="variableDeclaratorId\n path "]
422354[label="block\n {try{InputStreamis=IOAdapter==null?newFileInputStream(path):IOAdapter.open(path);returncreateByteArrayOtherStream(is);}catch(Exceptione){logger.warning(TextUtility.exceptionToString(e));returnnull;}} "]
522355[label="tryStatement\n try{InputStreamis=IOAdapter==null?newFileInputStream(path):IOAdapter.open(path);returncreateByteArrayOtherStream(is);}catch(Exceptione){logger.warning(TextUtility.exceptionToString(e));returnnull;} "]
622356[label="block\n {InputStreamis=IOAdapter==null?newFileInputStream(path):IOAdapter.open(path);returncreateByteArrayOtherStream(is);} "]
722357[label="blockStatements\n InputStreamis=IOAdapter==null?newFileInputStream(path):IOAdapter.open(path);returncreateByteArrayOtherStream(is); "]
822358[label="localVariableDeclarationStatement\n InputStreamis=IOAdapter==null?newFileInputStream(path):IOAdapter.open(path); "]
922359[label="localVariableDeclaration\n InputStreamis=IOAdapter==null?newFileInputStream(path):IOAdapter.open(path) "]
1022360[label="unannClassType_lfno_unannClassOrInterfaceType\n InputStream "]
1022361[label="variableDeclarator\n is=IOAdapter==null?newFileInputStream(path):IOAdapter.open(path) "]
1122362[label="variableDeclaratorId\n is "]
1122363[label="conditionalExpression\n IOAdapter==null?newFileInputStream(path):IOAdapter.open(path) "]
1222364[label="equalityExpression\n IOAdapter==null "]
1322365[label="expressionName\n IOAdapter "]
1322366[label="literal\n null "]
1222367[label="classInstanceCreationExpression_lfno_primary\n newFileInputStream(path) "]
1322368[label="expressionName\n path "]
1222369[label="methodInvocation_lfno_primary\n IOAdapter.open(path) "]
1322370[label="typeName\n IOAdapter "]
1322371[label="expressionName\n path "]
822372[label="returnStatement\n returncreateByteArrayOtherStream(is); "]
922373[label="methodInvocation_lfno_primary\n createByteArrayOtherStream(is) "]
1022374[label="methodName\n createByteArrayOtherStream "]
1022375[label="expressionName\n is "]
622376[label="catchClause\n catch(Exceptione){logger.warning(TextUtility.exceptionToString(e));returnnull;} "]
722377[label="catchFormalParameter\n Exceptione "]
822378[label="unannClassType\n Exception "]
822379[label="variableDeclaratorId\n e "]
722380[label="block\n {logger.warning(TextUtility.exceptionToString(e));returnnull;} "]
822381[label="blockStatements\n logger.warning(TextUtility.exceptionToString(e));returnnull; "]
922382[label="expressionStatement\n logger.warning(TextUtility.exceptionToString(e)); "]
1022383[label="methodInvocation\n logger.warning(TextUtility.exceptionToString(e)) "]
1122384[label="typeName\n logger "]
1122385[label="methodInvocation_lfno_primary\n TextUtility.exceptionToString(e) "]
1222386[label="typeName\n TextUtility "]
1222387[label="expressionName\n e "]
922388[label="returnStatement\n returnnull; "]
1022389[label="literal\n null "]
322390[label="methodDeclaration\n publicstaticByteArrayOtherStreamcreateByteArrayOtherStream(InputStreamis)throwsIOException{if(is==null)returnnull;intsize=is.available();size=Math.max(102400,size);intbufferSize=Math.min(1048576,size);byte[]bytes=newbyte[bufferSize];if(IOUtil.readBytesFromOtherInputStream(is,bytes)==0){thrownewIOException(\"读取了空文件，或参数InputStream已经到了文件尾部\");}returnnewByteArrayOtherStream(bytes,bufferSize,is);} "]
422391[label="methodModifier\n public "]
422392[label="methodModifier\n static "]
422393[label="methodHeader\n ByteArrayOtherStreamcreateByteArrayOtherStream(InputStreamis)throwsIOException "]
522394[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArrayOtherStream "]
522395[label="methodDeclarator\n createByteArrayOtherStream(InputStreamis) "]
622396[label="formalParameter\n InputStreamis "]
722397[label="unannClassType_lfno_unannClassOrInterfaceType\n InputStream "]
722398[label="variableDeclaratorId\n is "]
522399[label="throws_\n throwsIOException "]
622400[label="classType\n IOException "]
422401[label="block\n {if(is==null)returnnull;intsize=is.available();size=Math.max(102400,size);intbufferSize=Math.min(1048576,size);byte[]bytes=newbyte[bufferSize];if(IOUtil.readBytesFromOtherInputStream(is,bytes)==0){thrownewIOException(\"读取了空文件，或参数InputStream已经到了文件尾部\");}returnnewByteArrayOtherStream(bytes,bufferSize,is);} "]
522402[label="blockStatements\n if(is==null)returnnull;intsize=is.available();size=Math.max(102400,size);intbufferSize=Math.min(1048576,size);byte[]bytes=newbyte[bufferSize];if(IOUtil.readBytesFromOtherInputStream(is,bytes)==0){thrownewIOException(\"读取了空文件，或参数InputStream已经到了文件尾部\");}returnnewByteArrayOtherStream(bytes,bufferSize,is); "]
622403[label="ifThenStatement\n if(is==null)returnnull; "]
722404[label="equalityExpression\n is==null "]
822405[label="expressionName\n is "]
822406[label="literal\n null "]
722407[label="returnStatement\n returnnull; "]
822408[label="literal\n null "]
622409[label="localVariableDeclarationStatement\n intsize=is.available(); "]
722410[label="localVariableDeclaration\n intsize=is.available() "]
822411[label="integralType\n int "]
822412[label="variableDeclarator\n size=is.available() "]
922413[label="variableDeclaratorId\n size "]
922414[label="methodInvocation_lfno_primary\n is.available() "]
1022415[label="typeName\n is "]
622416[label="expressionStatement\n size=Math.max(102400,size); "]
722417[label="assignment\n size=Math.max(102400,size) "]
822418[label="expressionName\n size "]
822419[label="assignmentOperator\n = "]
822420[label="methodInvocation_lfno_primary\n Math.max(102400,size) "]
922421[label="typeName\n Math "]
922422[label="argumentList\n 102400,size "]
1022423[label="literal\n 102400 "]
1022424[label="expressionName\n size "]
622425[label="localVariableDeclarationStatement\n intbufferSize=Math.min(1048576,size); "]
722426[label="localVariableDeclaration\n intbufferSize=Math.min(1048576,size) "]
822427[label="integralType\n int "]
822428[label="variableDeclarator\n bufferSize=Math.min(1048576,size) "]
922429[label="variableDeclaratorId\n bufferSize "]
922430[label="methodInvocation_lfno_primary\n Math.min(1048576,size) "]
1022431[label="typeName\n Math "]
1022432[label="argumentList\n 1048576,size "]
1122433[label="literal\n 1048576 "]
1122434[label="expressionName\n size "]
622435[label="localVariableDeclarationStatement\n byte[]bytes=newbyte[bufferSize]; "]
722436[label="localVariableDeclaration\n byte[]bytes=newbyte[bufferSize] "]
822437[label="unannArrayType\n byte[] "]
922438[label="integralType\n byte "]
922439[label="dims\n [] "]
822440[label="variableDeclarator\n bytes=newbyte[bufferSize] "]
922441[label="variableDeclaratorId\n bytes "]
922442[label="arrayCreationExpression\n newbyte[bufferSize] "]
1022443[label="integralType\n byte "]
1022444[label="dimExpr\n [bufferSize] "]
1122445[label="expressionName\n bufferSize "]
622446[label="ifThenStatement\n if(IOUtil.readBytesFromOtherInputStream(is,bytes)==0){thrownewIOException(\"读取了空文件，或参数InputStream已经到了文件尾部\");} "]
722447[label="equalityExpression\n IOUtil.readBytesFromOtherInputStream(is,bytes)==0 "]
822448[label="methodInvocation_lfno_primary\n IOUtil.readBytesFromOtherInputStream(is,bytes) "]
922449[label="typeName\n IOUtil "]
922450[label="argumentList\n is,bytes "]
1022451[label="expressionName\n is "]
1022452[label="expressionName\n bytes "]
822453[label="literal\n 0 "]
722454[label="block\n {thrownewIOException(\"读取了空文件，或参数InputStream已经到了文件尾部\");} "]
822455[label="throwStatement\n thrownewIOException(\"读取了空文件，或参数InputStream已经到了文件尾部\"); "]
922456[label="classInstanceCreationExpression_lfno_primary\n newIOException(\"读取了空文件，或参数InputStream已经到了文件尾部\") "]
1022457[label="literal\n \"读取了空文件，或参数InputStream已经到了文件尾部\" "]
622458[label="returnStatement\n returnnewByteArrayOtherStream(bytes,bufferSize,is); "]
722459[label="classInstanceCreationExpression_lfno_primary\n newByteArrayOtherStream(bytes,bufferSize,is) "]
822460[label="argumentList\n bytes,bufferSize,is "]
922461[label="expressionName\n bytes "]
922462[label="expressionName\n bufferSize "]
922463[label="expressionName\n is "]
322464[label="methodDeclaration\n @OverrideprotectedvoidensureAvailableBytes(intsize){if(offset+size>bufferSize){try{intwantedBytes=offset+size-bufferSize;wantedBytes=Math.max(wantedBytes,is.available());wantedBytes=Math.min(wantedBytes,offset);byte[]bytes=newbyte[wantedBytes];intreadBytes=IOUtil.readBytesFromOtherInputStream(is,bytes);assertreadBytes>0:\"已到达文件尾部！\";System.arraycopy(this.bytes,offset,this.bytes,offset-wantedBytes,bufferSize-offset);System.arraycopy(bytes,0,this.bytes,bufferSize-wantedBytes,wantedBytes);offset-=wantedBytes;}catch(IOExceptione){thrownewRuntimeException(e);}}} "]
422465[label="markerAnnotation\n @Override "]
522466[label="typeName\n Override "]
422467[label="methodModifier\n protected "]
422468[label="methodHeader\n voidensureAvailableBytes(intsize) "]
522469[label="result\n void "]
522470[label="methodDeclarator\n ensureAvailableBytes(intsize) "]
622471[label="formalParameter\n intsize "]
722472[label="integralType\n int "]
722473[label="variableDeclaratorId\n size "]
422474[label="block\n {if(offset+size>bufferSize){try{intwantedBytes=offset+size-bufferSize;wantedBytes=Math.max(wantedBytes,is.available());wantedBytes=Math.min(wantedBytes,offset);byte[]bytes=newbyte[wantedBytes];intreadBytes=IOUtil.readBytesFromOtherInputStream(is,bytes);assertreadBytes>0:\"已到达文件尾部！\";System.arraycopy(this.bytes,offset,this.bytes,offset-wantedBytes,bufferSize-offset);System.arraycopy(bytes,0,this.bytes,bufferSize-wantedBytes,wantedBytes);offset-=wantedBytes;}catch(IOExceptione){thrownewRuntimeException(e);}}} "]
522475[label="ifThenStatement\n if(offset+size>bufferSize){try{intwantedBytes=offset+size-bufferSize;wantedBytes=Math.max(wantedBytes,is.available());wantedBytes=Math.min(wantedBytes,offset);byte[]bytes=newbyte[wantedBytes];intreadBytes=IOUtil.readBytesFromOtherInputStream(is,bytes);assertreadBytes>0:\"已到达文件尾部！\";System.arraycopy(this.bytes,offset,this.bytes,offset-wantedBytes,bufferSize-offset);System.arraycopy(bytes,0,this.bytes,bufferSize-wantedBytes,wantedBytes);offset-=wantedBytes;}catch(IOExceptione){thrownewRuntimeException(e);}} "]
622476[label="relationalExpression\n offset+size>bufferSize "]
722477[label="additiveExpression\n offset+size "]
822478[label="expressionName\n offset "]
822479[label="expressionName\n size "]
722480[label="expressionName\n bufferSize "]
622481[label="block\n {try{intwantedBytes=offset+size-bufferSize;wantedBytes=Math.max(wantedBytes,is.available());wantedBytes=Math.min(wantedBytes,offset);byte[]bytes=newbyte[wantedBytes];intreadBytes=IOUtil.readBytesFromOtherInputStream(is,bytes);assertreadBytes>0:\"已到达文件尾部！\";System.arraycopy(this.bytes,offset,this.bytes,offset-wantedBytes,bufferSize-offset);System.arraycopy(bytes,0,this.bytes,bufferSize-wantedBytes,wantedBytes);offset-=wantedBytes;}catch(IOExceptione){thrownewRuntimeException(e);}} "]
722482[label="tryStatement\n try{intwantedBytes=offset+size-bufferSize;wantedBytes=Math.max(wantedBytes,is.available());wantedBytes=Math.min(wantedBytes,offset);byte[]bytes=newbyte[wantedBytes];intreadBytes=IOUtil.readBytesFromOtherInputStream(is,bytes);assertreadBytes>0:\"已到达文件尾部！\";System.arraycopy(this.bytes,offset,this.bytes,offset-wantedBytes,bufferSize-offset);System.arraycopy(bytes,0,this.bytes,bufferSize-wantedBytes,wantedBytes);offset-=wantedBytes;}catch(IOExceptione){thrownewRuntimeException(e);} "]
822483[label="block\n {intwantedBytes=offset+size-bufferSize;wantedBytes=Math.max(wantedBytes,is.available());wantedBytes=Math.min(wantedBytes,offset);byte[]bytes=newbyte[wantedBytes];intreadBytes=IOUtil.readBytesFromOtherInputStream(is,bytes);assertreadBytes>0:\"已到达文件尾部！\";System.arraycopy(this.bytes,offset,this.bytes,offset-wantedBytes,bufferSize-offset);System.arraycopy(bytes,0,this.bytes,bufferSize-wantedBytes,wantedBytes);offset-=wantedBytes;} "]
922484[label="blockStatements\n intwantedBytes=offset+size-bufferSize;wantedBytes=Math.max(wantedBytes,is.available());wantedBytes=Math.min(wantedBytes,offset);byte[]bytes=newbyte[wantedBytes];intreadBytes=IOUtil.readBytesFromOtherInputStream(is,bytes);assertreadBytes>0:\"已到达文件尾部！\";System.arraycopy(this.bytes,offset,this.bytes,offset-wantedBytes,bufferSize-offset);System.arraycopy(bytes,0,this.bytes,bufferSize-wantedBytes,wantedBytes);offset-=wantedBytes; "]
1022485[label="localVariableDeclarationStatement\n intwantedBytes=offset+size-bufferSize; "]
1122486[label="localVariableDeclaration\n intwantedBytes=offset+size-bufferSize "]
1222487[label="integralType\n int "]
1222488[label="variableDeclarator\n wantedBytes=offset+size-bufferSize "]
1322489[label="variableDeclaratorId\n wantedBytes "]
1322490[label="additiveExpression\n offset+size-bufferSize "]
1422491[label="additiveExpression\n offset+size "]
1522492[label="expressionName\n offset "]
1522493[label="expressionName\n size "]
1422494[label="expressionName\n bufferSize "]
1022495[label="expressionStatement\n wantedBytes=Math.max(wantedBytes,is.available()); "]
1122496[label="assignment\n wantedBytes=Math.max(wantedBytes,is.available()) "]
1222497[label="expressionName\n wantedBytes "]
1222498[label="assignmentOperator\n = "]
1222499[label="methodInvocation_lfno_primary\n Math.max(wantedBytes,is.available()) "]
1322500[label="typeName\n Math "]
1322501[label="argumentList\n wantedBytes,is.available() "]
1422502[label="expressionName\n wantedBytes "]
1422503[label="methodInvocation_lfno_primary\n is.available() "]
1522504[label="typeName\n is "]
1022505[label="expressionStatement\n wantedBytes=Math.min(wantedBytes,offset); "]
1122506[label="assignment\n wantedBytes=Math.min(wantedBytes,offset) "]
1222507[label="expressionName\n wantedBytes "]
1222508[label="assignmentOperator\n = "]
1222509[label="methodInvocation_lfno_primary\n Math.min(wantedBytes,offset) "]
1322510[label="typeName\n Math "]
1322511[label="argumentList\n wantedBytes,offset "]
1422512[label="expressionName\n wantedBytes "]
1422513[label="expressionName\n offset "]
1022514[label="localVariableDeclarationStatement\n byte[]bytes=newbyte[wantedBytes]; "]
1122515[label="localVariableDeclaration\n byte[]bytes=newbyte[wantedBytes] "]
1222516[label="unannArrayType\n byte[] "]
1322517[label="integralType\n byte "]
1322518[label="dims\n [] "]
1222519[label="variableDeclarator\n bytes=newbyte[wantedBytes] "]
1322520[label="variableDeclaratorId\n bytes "]
1322521[label="arrayCreationExpression\n newbyte[wantedBytes] "]
1422522[label="integralType\n byte "]
1422523[label="dimExpr\n [wantedBytes] "]
1522524[label="expressionName\n wantedBytes "]
1022525[label="localVariableDeclarationStatement\n intreadBytes=IOUtil.readBytesFromOtherInputStream(is,bytes); "]
1122526[label="localVariableDeclaration\n intreadBytes=IOUtil.readBytesFromOtherInputStream(is,bytes) "]
1222527[label="integralType\n int "]
1222528[label="variableDeclarator\n readBytes=IOUtil.readBytesFromOtherInputStream(is,bytes) "]
1322529[label="variableDeclaratorId\n readBytes "]
1322530[label="methodInvocation_lfno_primary\n IOUtil.readBytesFromOtherInputStream(is,bytes) "]
1422531[label="typeName\n IOUtil "]
1422532[label="argumentList\n is,bytes "]
1522533[label="expressionName\n is "]
1522534[label="expressionName\n bytes "]
1022535[label="assertStatement\n assertreadBytes>0:\"已到达文件尾部！\"; "]
1122536[label="relationalExpression\n readBytes>0 "]
1222537[label="expressionName\n readBytes "]
1222538[label="literal\n 0 "]
1122539[label="literal\n \"已到达文件尾部！\" "]
1022540[label="expressionStatement\n System.arraycopy(this.bytes,offset,this.bytes,offset-wantedBytes,bufferSize-offset); "]
1122541[label="methodInvocation\n System.arraycopy(this.bytes,offset,this.bytes,offset-wantedBytes,bufferSize-offset) "]
1222542[label="typeName\n System "]
1222543[label="argumentList\n this.bytes,offset,this.bytes,offset-wantedBytes,bufferSize-offset "]
1322544[label="primary\n this.bytes "]
1422545[label="primaryNoNewArray_lfno_primary\n this "]
1422546[label="fieldAccess_lf_primary\n .bytes "]
1322547[label="expressionName\n offset "]
1322548[label="primary\n this.bytes "]
1422549[label="primaryNoNewArray_lfno_primary\n this "]
1422550[label="fieldAccess_lf_primary\n .bytes "]
1322551[label="additiveExpression\n offset-wantedBytes "]
1422552[label="expressionName\n offset "]
1422553[label="expressionName\n wantedBytes "]
1322554[label="additiveExpression\n bufferSize-offset "]
1422555[label="expressionName\n bufferSize "]
1422556[label="expressionName\n offset "]
1022557[label="expressionStatement\n System.arraycopy(bytes,0,this.bytes,bufferSize-wantedBytes,wantedBytes); "]
1122558[label="methodInvocation\n System.arraycopy(bytes,0,this.bytes,bufferSize-wantedBytes,wantedBytes) "]
1222559[label="typeName\n System "]
1222560[label="argumentList\n bytes,0,this.bytes,bufferSize-wantedBytes,wantedBytes "]
1322561[label="expressionName\n bytes "]
1322562[label="literal\n 0 "]
1322563[label="primary\n this.bytes "]
1422564[label="primaryNoNewArray_lfno_primary\n this "]
1422565[label="fieldAccess_lf_primary\n .bytes "]
1322566[label="additiveExpression\n bufferSize-wantedBytes "]
1422567[label="expressionName\n bufferSize "]
1422568[label="expressionName\n wantedBytes "]
1322569[label="expressionName\n wantedBytes "]
1022570[label="expressionStatement\n offset-=wantedBytes; "]
1122571[label="assignment\n offset-=wantedBytes "]
1222572[label="expressionName\n offset "]
1222573[label="assignmentOperator\n -= "]
1222574[label="expressionName\n wantedBytes "]
822575[label="catchClause\n catch(IOExceptione){thrownewRuntimeException(e);} "]
922576[label="catchFormalParameter\n IOExceptione "]
1022577[label="unannClassType\n IOException "]
1022578[label="variableDeclaratorId\n e "]
922579[label="block\n {thrownewRuntimeException(e);} "]
1022580[label="throwStatement\n thrownewRuntimeException(e); "]
1122581[label="classInstanceCreationExpression_lfno_primary\n newRuntimeException(e) "]
1222582[label="expressionName\n e "]
322583[label="methodDeclaration\n @Overridepublicvoidclose(){super.close();if(is==null){return;}try{is.close();}catch(IOExceptione){logger.warning(TextUtility.exceptionToString(e));}} "]
422584[label="markerAnnotation\n @Override "]
522585[label="typeName\n Override "]
422586[label="methodModifier\n public "]
422587[label="methodHeader\n voidclose() "]
522588[label="result\n void "]
522589[label="methodDeclarator\n close() "]
422590[label="block\n {super.close();if(is==null){return;}try{is.close();}catch(IOExceptione){logger.warning(TextUtility.exceptionToString(e));}} "]
522591[label="blockStatements\n super.close();if(is==null){return;}try{is.close();}catch(IOExceptione){logger.warning(TextUtility.exceptionToString(e));} "]
622592[label="expressionStatement\n super.close(); "]
722593[label="methodInvocation\n super.close() "]
622594[label="ifThenStatement\n if(is==null){return;} "]
722595[label="equalityExpression\n is==null "]
822596[label="expressionName\n is "]
822597[label="literal\n null "]
722598[label="block\n {return;} "]
822599[label="returnStatement\n return; "]
622600[label="tryStatement\n try{is.close();}catch(IOExceptione){logger.warning(TextUtility.exceptionToString(e));} "]
722601[label="block\n {is.close();} "]
822602[label="expressionStatement\n is.close(); "]
922603[label="methodInvocation\n is.close() "]
1022604[label="typeName\n is "]
722605[label="catchClause\n catch(IOExceptione){logger.warning(TextUtility.exceptionToString(e));} "]
822606[label="catchFormalParameter\n IOExceptione "]
922607[label="unannClassType\n IOException "]
922608[label="variableDeclaratorId\n e "]
822609[label="block\n {logger.warning(TextUtility.exceptionToString(e));} "]
922610[label="expressionStatement\n logger.warning(TextUtility.exceptionToString(e)); "]
1022611[label="methodInvocation\n logger.warning(TextUtility.exceptionToString(e)) "]
1122612[label="typeName\n logger "]
1122613[label="methodInvocation_lfno_primary\n TextUtility.exceptionToString(e) "]
1222614[label="typeName\n TextUtility "]
1222615[label="expressionName\n e "]
022616[label="compilationUnit\n packagecom.hankcs.hanlp.corpus.io;importjava.io.FileInputStream;importjava.io.IOException;importjava.io.InputStream;importstaticcom.hankcs.hanlp.HanLP.Config.IOAdapter;importstaticcom.hankcs.hanlp.utility.Predefine.logger;publicabstractclassByteArrayStreamextendsByteArray{protectedintbufferSize;publicByteArrayStream(byte[]bytes,intbufferSize){super(bytes);this.bufferSize=bufferSize;}publicstaticByteArrayStreamcreateByteArrayStream(Stringpath){if(IOAdapter==null)returnByteArrayFileStream.createByteArrayFileStream(path);try{InputStreamis=IOAdapter.open(path);if(isinstanceofFileInputStream)returnByteArrayFileStream.createByteArrayFileStream((FileInputStream)is);returnByteArrayOtherStream.createByteArrayOtherStream(is);}catch(IOExceptione){logger.warning(\"打开失败：\"+path);returnnull;}}@OverridepublicintnextInt(){ensureAvailableBytes(4);returnsuper.nextInt();}@OverridepubliccharnextChar(){ensureAvailableBytes(2);returnsuper.nextChar();}@OverridepublicdoublenextDouble(){ensureAvailableBytes(8);returnsuper.nextDouble();}@OverridepublicbytenextByte(){ensureAvailableBytes(1);returnsuper.nextByte();}@OverridepublicfloatnextFloat(){ensureAvailableBytes(4);returnsuper.nextFloat();}protectedabstractvoidensureAvailableBytes(intsize);}<EOF> "]
122617[label="packageDeclaration\n packagecom.hankcs.hanlp.corpus.io; "]
222618[label="packageName\n com.hankcs.hanlp.corpus.io "]
322619[label="packageName\n com.hankcs.hanlp.corpus "]
422620[label="packageName\n com.hankcs.hanlp "]
522621[label="packageName\n com.hankcs "]
622622[label="packageName\n com "]
122623[label="singleTypeImportDeclaration\n importjava.io.FileInputStream; "]
222624[label="typeName\n java.io.FileInputStream "]
322625[label="packageOrTypeName\n java.io "]
422626[label="packageOrTypeName\n java "]
122627[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
222628[label="typeName\n java.io.IOException "]
322629[label="packageOrTypeName\n java.io "]
422630[label="packageOrTypeName\n java "]
122631[label="singleTypeImportDeclaration\n importjava.io.InputStream; "]
222632[label="typeName\n java.io.InputStream "]
322633[label="packageOrTypeName\n java.io "]
422634[label="packageOrTypeName\n java "]
122635[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.HanLP.Config.IOAdapter; "]
222636[label="typeName\n com.hankcs.hanlp.HanLP.Config "]
322637[label="packageOrTypeName\n com.hankcs.hanlp.HanLP "]
422638[label="packageOrTypeName\n com.hankcs.hanlp "]
522639[label="packageOrTypeName\n com.hankcs "]
622640[label="packageOrTypeName\n com "]
122641[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.utility.Predefine.logger; "]
222642[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
322643[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
422644[label="packageOrTypeName\n com.hankcs.hanlp "]
522645[label="packageOrTypeName\n com.hankcs "]
622646[label="packageOrTypeName\n com "]
122647[label="normalClassDeclaration\n publicabstractclassByteArrayStreamextendsByteArray{protectedintbufferSize;publicByteArrayStream(byte[]bytes,intbufferSize){super(bytes);this.bufferSize=bufferSize;}publicstaticByteArrayStreamcreateByteArrayStream(Stringpath){if(IOAdapter==null)returnByteArrayFileStream.createByteArrayFileStream(path);try{InputStreamis=IOAdapter.open(path);if(isinstanceofFileInputStream)returnByteArrayFileStream.createByteArrayFileStream((FileInputStream)is);returnByteArrayOtherStream.createByteArrayOtherStream(is);}catch(IOExceptione){logger.warning(\"打开失败：\"+path);returnnull;}}@OverridepublicintnextInt(){ensureAvailableBytes(4);returnsuper.nextInt();}@OverridepubliccharnextChar(){ensureAvailableBytes(2);returnsuper.nextChar();}@OverridepublicdoublenextDouble(){ensureAvailableBytes(8);returnsuper.nextDouble();}@OverridepublicbytenextByte(){ensureAvailableBytes(1);returnsuper.nextByte();}@OverridepublicfloatnextFloat(){ensureAvailableBytes(4);returnsuper.nextFloat();}protectedabstractvoidensureAvailableBytes(intsize);} "]
222648[label="classModifier\n public "]
222649[label="classModifier\n abstract "]
222650[label="superclass\n extendsByteArray "]
322651[label="classType\n ByteArray "]
222652[label="classBody\n {protectedintbufferSize;publicByteArrayStream(byte[]bytes,intbufferSize){super(bytes);this.bufferSize=bufferSize;}publicstaticByteArrayStreamcreateByteArrayStream(Stringpath){if(IOAdapter==null)returnByteArrayFileStream.createByteArrayFileStream(path);try{InputStreamis=IOAdapter.open(path);if(isinstanceofFileInputStream)returnByteArrayFileStream.createByteArrayFileStream((FileInputStream)is);returnByteArrayOtherStream.createByteArrayOtherStream(is);}catch(IOExceptione){logger.warning(\"打开失败：\"+path);returnnull;}}@OverridepublicintnextInt(){ensureAvailableBytes(4);returnsuper.nextInt();}@OverridepubliccharnextChar(){ensureAvailableBytes(2);returnsuper.nextChar();}@OverridepublicdoublenextDouble(){ensureAvailableBytes(8);returnsuper.nextDouble();}@OverridepublicbytenextByte(){ensureAvailableBytes(1);returnsuper.nextByte();}@OverridepublicfloatnextFloat(){ensureAvailableBytes(4);returnsuper.nextFloat();}protectedabstractvoidensureAvailableBytes(intsize);} "]
322653[label="fieldDeclaration\n protectedintbufferSize; "]
422654[label="fieldModifier\n protected "]
422655[label="integralType\n int "]
422656[label="variableDeclaratorId\n bufferSize "]
322657[label="constructorDeclaration\n publicByteArrayStream(byte[]bytes,intbufferSize){super(bytes);this.bufferSize=bufferSize;} "]
422658[label="constructorModifier\n public "]
422659[label="constructorDeclarator\n ByteArrayStream(byte[]bytes,intbufferSize) "]
522660[label="simpleTypeName\n ByteArrayStream "]
522661[label="formalParameterList\n byte[]bytes,intbufferSize "]
622662[label="formalParameter\n byte[]bytes "]
722663[label="unannArrayType\n byte[] "]
822664[label="integralType\n byte "]
822665[label="dims\n [] "]
722666[label="variableDeclaratorId\n bytes "]
622667[label="formalParameter\n intbufferSize "]
722668[label="integralType\n int "]
722669[label="variableDeclaratorId\n bufferSize "]
422670[label="constructorBody\n {super(bytes);this.bufferSize=bufferSize;} "]
522671[label="explicitConstructorInvocation\n super(bytes); "]
622672[label="expressionName\n bytes "]
522673[label="expressionStatement\n this.bufferSize=bufferSize; "]
622674[label="assignment\n this.bufferSize=bufferSize "]
722675[label="fieldAccess\n this.bufferSize "]
822676[label="primaryNoNewArray_lfno_primary\n this "]
722677[label="assignmentOperator\n = "]
722678[label="expressionName\n bufferSize "]
322679[label="methodDeclaration\n publicstaticByteArrayStreamcreateByteArrayStream(Stringpath){if(IOAdapter==null)returnByteArrayFileStream.createByteArrayFileStream(path);try{InputStreamis=IOAdapter.open(path);if(isinstanceofFileInputStream)returnByteArrayFileStream.createByteArrayFileStream((FileInputStream)is);returnByteArrayOtherStream.createByteArrayOtherStream(is);}catch(IOExceptione){logger.warning(\"打开失败：\"+path);returnnull;}} "]
422680[label="methodModifier\n public "]
422681[label="methodModifier\n static "]
422682[label="methodHeader\n ByteArrayStreamcreateByteArrayStream(Stringpath) "]
522683[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArrayStream "]
522684[label="methodDeclarator\n createByteArrayStream(Stringpath) "]
622685[label="formalParameter\n Stringpath "]
722686[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
722687[label="variableDeclaratorId\n path "]
422688[label="block\n {if(IOAdapter==null)returnByteArrayFileStream.createByteArrayFileStream(path);try{InputStreamis=IOAdapter.open(path);if(isinstanceofFileInputStream)returnByteArrayFileStream.createByteArrayFileStream((FileInputStream)is);returnByteArrayOtherStream.createByteArrayOtherStream(is);}catch(IOExceptione){logger.warning(\"打开失败：\"+path);returnnull;}} "]
522689[label="blockStatements\n if(IOAdapter==null)returnByteArrayFileStream.createByteArrayFileStream(path);try{InputStreamis=IOAdapter.open(path);if(isinstanceofFileInputStream)returnByteArrayFileStream.createByteArrayFileStream((FileInputStream)is);returnByteArrayOtherStream.createByteArrayOtherStream(is);}catch(IOExceptione){logger.warning(\"打开失败：\"+path);returnnull;} "]
622690[label="ifThenStatement\n if(IOAdapter==null)returnByteArrayFileStream.createByteArrayFileStream(path); "]
722691[label="equalityExpression\n IOAdapter==null "]
822692[label="expressionName\n IOAdapter "]
822693[label="literal\n null "]
722694[label="returnStatement\n returnByteArrayFileStream.createByteArrayFileStream(path); "]
822695[label="methodInvocation_lfno_primary\n ByteArrayFileStream.createByteArrayFileStream(path) "]
922696[label="typeName\n ByteArrayFileStream "]
922697[label="expressionName\n path "]
622698[label="tryStatement\n try{InputStreamis=IOAdapter.open(path);if(isinstanceofFileInputStream)returnByteArrayFileStream.createByteArrayFileStream((FileInputStream)is);returnByteArrayOtherStream.createByteArrayOtherStream(is);}catch(IOExceptione){logger.warning(\"打开失败：\"+path);returnnull;} "]
722699[label="block\n {InputStreamis=IOAdapter.open(path);if(isinstanceofFileInputStream)returnByteArrayFileStream.createByteArrayFileStream((FileInputStream)is);returnByteArrayOtherStream.createByteArrayOtherStream(is);} "]
822700[label="blockStatements\n InputStreamis=IOAdapter.open(path);if(isinstanceofFileInputStream)returnByteArrayFileStream.createByteArrayFileStream((FileInputStream)is);returnByteArrayOtherStream.createByteArrayOtherStream(is); "]
922701[label="localVariableDeclarationStatement\n InputStreamis=IOAdapter.open(path); "]
1022702[label="localVariableDeclaration\n InputStreamis=IOAdapter.open(path) "]
1122703[label="unannClassType_lfno_unannClassOrInterfaceType\n InputStream "]
1122704[label="variableDeclarator\n is=IOAdapter.open(path) "]
1222705[label="variableDeclaratorId\n is "]
1222706[label="methodInvocation_lfno_primary\n IOAdapter.open(path) "]
1322707[label="typeName\n IOAdapter "]
1322708[label="expressionName\n path "]
922709[label="ifThenStatement\n if(isinstanceofFileInputStream)returnByteArrayFileStream.createByteArrayFileStream((FileInputStream)is); "]
1022710[label="relationalExpression\n isinstanceofFileInputStream "]
1122711[label="expressionName\n is "]
1122712[label="classType_lfno_classOrInterfaceType\n FileInputStream "]
1022713[label="returnStatement\n returnByteArrayFileStream.createByteArrayFileStream((FileInputStream)is); "]
1122714[label="methodInvocation_lfno_primary\n ByteArrayFileStream.createByteArrayFileStream((FileInputStream)is) "]
1222715[label="typeName\n ByteArrayFileStream "]
1222716[label="castExpression\n (FileInputStream)is "]
1322717[label="classType_lfno_classOrInterfaceType\n FileInputStream "]
1322718[label="expressionName\n is "]
922719[label="returnStatement\n returnByteArrayOtherStream.createByteArrayOtherStream(is); "]
1022720[label="methodInvocation_lfno_primary\n ByteArrayOtherStream.createByteArrayOtherStream(is) "]
1122721[label="typeName\n ByteArrayOtherStream "]
1122722[label="expressionName\n is "]
722723[label="catchClause\n catch(IOExceptione){logger.warning(\"打开失败：\"+path);returnnull;} "]
822724[label="catchFormalParameter\n IOExceptione "]
922725[label="unannClassType\n IOException "]
922726[label="variableDeclaratorId\n e "]
822727[label="block\n {logger.warning(\"打开失败：\"+path);returnnull;} "]
922728[label="blockStatements\n logger.warning(\"打开失败：\"+path);returnnull; "]
1022729[label="expressionStatement\n logger.warning(\"打开失败：\"+path); "]
1122730[label="methodInvocation\n logger.warning(\"打开失败：\"+path) "]
1222731[label="typeName\n logger "]
1222732[label="additiveExpression\n \"打开失败：\"+path "]
1322733[label="literal\n \"打开失败：\" "]
1322734[label="expressionName\n path "]
1022735[label="returnStatement\n returnnull; "]
1122736[label="literal\n null "]
322737[label="methodDeclaration\n @OverridepublicintnextInt(){ensureAvailableBytes(4);returnsuper.nextInt();} "]
422738[label="markerAnnotation\n @Override "]
522739[label="typeName\n Override "]
422740[label="methodModifier\n public "]
422741[label="methodHeader\n intnextInt() "]
522742[label="integralType\n int "]
522743[label="methodDeclarator\n nextInt() "]
422744[label="block\n {ensureAvailableBytes(4);returnsuper.nextInt();} "]
522745[label="blockStatements\n ensureAvailableBytes(4);returnsuper.nextInt(); "]
622746[label="expressionStatement\n ensureAvailableBytes(4); "]
722747[label="methodInvocation\n ensureAvailableBytes(4) "]
822748[label="methodName\n ensureAvailableBytes "]
822749[label="literal\n 4 "]
622750[label="returnStatement\n returnsuper.nextInt(); "]
722751[label="methodInvocation_lfno_primary\n super.nextInt() "]
322752[label="methodDeclaration\n @OverridepubliccharnextChar(){ensureAvailableBytes(2);returnsuper.nextChar();} "]
422753[label="markerAnnotation\n @Override "]
522754[label="typeName\n Override "]
422755[label="methodModifier\n public "]
422756[label="methodHeader\n charnextChar() "]
522757[label="integralType\n char "]
522758[label="methodDeclarator\n nextChar() "]
422759[label="block\n {ensureAvailableBytes(2);returnsuper.nextChar();} "]
522760[label="blockStatements\n ensureAvailableBytes(2);returnsuper.nextChar(); "]
622761[label="expressionStatement\n ensureAvailableBytes(2); "]
722762[label="methodInvocation\n ensureAvailableBytes(2) "]
822763[label="methodName\n ensureAvailableBytes "]
822764[label="literal\n 2 "]
622765[label="returnStatement\n returnsuper.nextChar(); "]
722766[label="methodInvocation_lfno_primary\n super.nextChar() "]
322767[label="methodDeclaration\n @OverridepublicdoublenextDouble(){ensureAvailableBytes(8);returnsuper.nextDouble();} "]
422768[label="markerAnnotation\n @Override "]
522769[label="typeName\n Override "]
422770[label="methodModifier\n public "]
422771[label="methodHeader\n doublenextDouble() "]
522772[label="floatingPointType\n double "]
522773[label="methodDeclarator\n nextDouble() "]
422774[label="block\n {ensureAvailableBytes(8);returnsuper.nextDouble();} "]
522775[label="blockStatements\n ensureAvailableBytes(8);returnsuper.nextDouble(); "]
622776[label="expressionStatement\n ensureAvailableBytes(8); "]
722777[label="methodInvocation\n ensureAvailableBytes(8) "]
822778[label="methodName\n ensureAvailableBytes "]
822779[label="literal\n 8 "]
622780[label="returnStatement\n returnsuper.nextDouble(); "]
722781[label="methodInvocation_lfno_primary\n super.nextDouble() "]
322782[label="methodDeclaration\n @OverridepublicbytenextByte(){ensureAvailableBytes(1);returnsuper.nextByte();} "]
422783[label="markerAnnotation\n @Override "]
522784[label="typeName\n Override "]
422785[label="methodModifier\n public "]
422786[label="methodHeader\n bytenextByte() "]
522787[label="integralType\n byte "]
522788[label="methodDeclarator\n nextByte() "]
422789[label="block\n {ensureAvailableBytes(1);returnsuper.nextByte();} "]
522790[label="blockStatements\n ensureAvailableBytes(1);returnsuper.nextByte(); "]
622791[label="expressionStatement\n ensureAvailableBytes(1); "]
722792[label="methodInvocation\n ensureAvailableBytes(1) "]
822793[label="methodName\n ensureAvailableBytes "]
822794[label="literal\n 1 "]
622795[label="returnStatement\n returnsuper.nextByte(); "]
722796[label="methodInvocation_lfno_primary\n super.nextByte() "]
322797[label="methodDeclaration\n @OverridepublicfloatnextFloat(){ensureAvailableBytes(4);returnsuper.nextFloat();} "]
422798[label="markerAnnotation\n @Override "]
522799[label="typeName\n Override "]
422800[label="methodModifier\n public "]
422801[label="methodHeader\n floatnextFloat() "]
522802[label="floatingPointType\n float "]
522803[label="methodDeclarator\n nextFloat() "]
422804[label="block\n {ensureAvailableBytes(4);returnsuper.nextFloat();} "]
522805[label="blockStatements\n ensureAvailableBytes(4);returnsuper.nextFloat(); "]
622806[label="expressionStatement\n ensureAvailableBytes(4); "]
722807[label="methodInvocation\n ensureAvailableBytes(4) "]
822808[label="methodName\n ensureAvailableBytes "]
822809[label="literal\n 4 "]
622810[label="returnStatement\n returnsuper.nextFloat(); "]
722811[label="methodInvocation_lfno_primary\n super.nextFloat() "]
322812[label="methodDeclaration\n protectedabstractvoidensureAvailableBytes(intsize); "]
422813[label="methodModifier\n protected "]
422814[label="methodModifier\n abstract "]
422815[label="methodHeader\n voidensureAvailableBytes(intsize) "]
522816[label="result\n void "]
522817[label="methodDeclarator\n ensureAvailableBytes(intsize) "]
622818[label="formalParameter\n intsize "]
722819[label="integralType\n int "]
722820[label="variableDeclaratorId\n size "]
422821[label="methodBody\n ; "]
022822[label="compilationUnit\n packagecom.hankcs.hanlp.utility;importjava.io.DataOutputStream;importjava.io.IOException;publicclassByteUtil{publicstaticcharbytesToChar(byte[]b){charc=(char)((b[0]<<8)&0xFF00L);c|=(char)(b[1]&0xFFL);returnc;}publicstaticdoublebytesToDouble(byte[]b){returnDouble.longBitsToDouble(bytesToLong(b));}publicstaticdoublebytesHighFirstToDouble(byte[]bytes,intstart){longl=((long)bytes[start]<<56)&0xFF00000000000000L;l|=((long)bytes[1+start]<<48)&0xFF000000000000L;l|=((long)bytes[2+start]<<40)&0xFF0000000000L;l|=((long)bytes[3+start]<<32)&0xFF00000000L;l|=((long)bytes[4+start]<<24)&0xFF000000L;l|=((long)bytes[5+start]<<16)&0xFF0000L;l|=((long)bytes[6+start]<<8)&0xFF00L;l|=(long)bytes[7+start]&0xFFL;returnDouble.longBitsToDouble(l);}publicstaticfloatbytesToFloat(byte[]b){returnFloat.intBitsToFloat(bytesToInt(b));}publicstaticintbytesToInt(byte[]b){inti=(b[0]<<24)&0xFF000000;i|=(b[1]<<16)&0xFF0000;i|=(b[2]<<8)&0xFF00;i|=b[3]&0xFF;returni;}publicstaticlongbytesToLong(byte[]b){longl=((long)b[0]<<56)&0xFF00000000000000L;l|=((long)b[1]<<48)&0xFF000000000000L;l|=((long)b[2]<<40)&0xFF0000000000L;l|=((long)b[3]<<32)&0xFF00000000L;l|=((long)b[4]<<24)&0xFF000000L;l|=((long)b[5]<<16)&0xFF0000L;l|=((long)b[6]<<8)&0xFF00L;l|=(long)b[7]&0xFFL;returnl;}publicstaticlongbytesHighFirstToLong(byte[]b){longl=((long)b[0]<<56)&0xFF00000000000000L;l|=((long)b[1]<<48)&0xFF000000000000L;l|=((long)b[2]<<40)&0xFF0000000000L;l|=((long)b[3]<<32)&0xFF00000000L;l|=((long)b[4]<<24)&0xFF000000L;l|=((long)b[5]<<16)&0xFF0000L;l|=((long)b[6]<<8)&0xFF00L;l|=(long)b[7]&0xFFL;returnl;}publicstaticbyte[]charToBytes(charc){byte[]b=newbyte[8];b[0]=(byte)(c>>>8);b[1]=(byte)c;returnb;}publicstaticbyte[]doubleToBytes(doubled){returnlongToBytes(Double.doubleToLongBits(d));}publicstaticbyte[]floatToBytes(floatf){returnintToBytes(Float.floatToIntBits(f));}publicstaticbyte[]intToBytes(inti){byte[]b=newbyte[4];b[0]=(byte)(i>>>24);b[1]=(byte)(i>>>16);b[2]=(byte)(i>>>8);b[3]=(byte)i;returnb;}publicstaticbyte[]longToBytes(longl){byte[]b=newbyte[8];b[0]=(byte)(l>>>56);b[1]=(byte)(l>>>48);b[2]=(byte)(l>>>40);b[3]=(byte)(l>>>32);b[4]=(byte)(l>>>24);b[5]=(byte)(l>>>16);b[6]=(byte)(l>>>8);b[7]=(byte)(l);returnb;}publicstaticintbytesToInt(byte[]bytes,intstart){intnum=bytes[start]&0xFF;num|=((bytes[start+1]<<8)&0xFF00);num|=((bytes[start+2]<<16)&0xFF0000);num|=((bytes[start+3]<<24)&0xFF000000);returnnum;}publicstaticintbytesHighFirstToInt(byte[]bytes,intstart){intnum=bytes[start+3]&0xFF;num|=((bytes[start+2]<<8)&0xFF00);num|=((bytes[start+1]<<16)&0xFF0000);num|=((bytes[start]<<24)&0xFF000000);returnnum;}publicstaticcharbytesHighFirstToChar(byte[]bytes,intstart){charc=(char)(((bytes[start]&0xFF)<<8)|(bytes[start+1]&0xFF));returnc;}publicstaticfloatbytesHighFirstToFloat(byte[]bytes,intstart){intl=bytesHighFirstToInt(bytes,start);returnFloat.intBitsToFloat(l);}publicstaticvoidwriteUnsignedInt(DataOutputStreamout,intuint)throwsIOException{out.writeByte((byte)((uint>>>8)&0xFF));out.writeByte((byte)((uint>>>0)&0xFF));}publicstaticintconvertTwoCharToInt(charhigh,charlow){intresult=high<<16;result|=low;returnresult;}publicstaticchar[]convertIntToTwoChar(intn){char[]result=newchar[2];result[0]=(char)(n>>>16);result[1]=(char)(0x0000FFFF&n);returnresult;}}<EOF> "]
122823[label="packageDeclaration\n packagecom.hankcs.hanlp.utility; "]
222824[label="packageName\n com.hankcs.hanlp.utility "]
322825[label="packageName\n com.hankcs.hanlp "]
422826[label="packageName\n com.hankcs "]
522827[label="packageName\n com "]
122828[label="singleTypeImportDeclaration\n importjava.io.DataOutputStream; "]
222829[label="typeName\n java.io.DataOutputStream "]
322830[label="packageOrTypeName\n java.io "]
422831[label="packageOrTypeName\n java "]
122832[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
222833[label="typeName\n java.io.IOException "]
322834[label="packageOrTypeName\n java.io "]
422835[label="packageOrTypeName\n java "]
122836[label="normalClassDeclaration\n publicclassByteUtil{publicstaticcharbytesToChar(byte[]b){charc=(char)((b[0]<<8)&0xFF00L);c|=(char)(b[1]&0xFFL);returnc;}publicstaticdoublebytesToDouble(byte[]b){returnDouble.longBitsToDouble(bytesToLong(b));}publicstaticdoublebytesHighFirstToDouble(byte[]bytes,intstart){longl=((long)bytes[start]<<56)&0xFF00000000000000L;l|=((long)bytes[1+start]<<48)&0xFF000000000000L;l|=((long)bytes[2+start]<<40)&0xFF0000000000L;l|=((long)bytes[3+start]<<32)&0xFF00000000L;l|=((long)bytes[4+start]<<24)&0xFF000000L;l|=((long)bytes[5+start]<<16)&0xFF0000L;l|=((long)bytes[6+start]<<8)&0xFF00L;l|=(long)bytes[7+start]&0xFFL;returnDouble.longBitsToDouble(l);}publicstaticfloatbytesToFloat(byte[]b){returnFloat.intBitsToFloat(bytesToInt(b));}publicstaticintbytesToInt(byte[]b){inti=(b[0]<<24)&0xFF000000;i|=(b[1]<<16)&0xFF0000;i|=(b[2]<<8)&0xFF00;i|=b[3]&0xFF;returni;}publicstaticlongbytesToLong(byte[]b){longl=((long)b[0]<<56)&0xFF00000000000000L;l|=((long)b[1]<<48)&0xFF000000000000L;l|=((long)b[2]<<40)&0xFF0000000000L;l|=((long)b[3]<<32)&0xFF00000000L;l|=((long)b[4]<<24)&0xFF000000L;l|=((long)b[5]<<16)&0xFF0000L;l|=((long)b[6]<<8)&0xFF00L;l|=(long)b[7]&0xFFL;returnl;}publicstaticlongbytesHighFirstToLong(byte[]b){longl=((long)b[0]<<56)&0xFF00000000000000L;l|=((long)b[1]<<48)&0xFF000000000000L;l|=((long)b[2]<<40)&0xFF0000000000L;l|=((long)b[3]<<32)&0xFF00000000L;l|=((long)b[4]<<24)&0xFF000000L;l|=((long)b[5]<<16)&0xFF0000L;l|=((long)b[6]<<8)&0xFF00L;l|=(long)b[7]&0xFFL;returnl;}publicstaticbyte[]charToBytes(charc){byte[]b=newbyte[8];b[0]=(byte)(c>>>8);b[1]=(byte)c;returnb;}publicstaticbyte[]doubleToBytes(doubled){returnlongToBytes(Double.doubleToLongBits(d));}publicstaticbyte[]floatToBytes(floatf){returnintToBytes(Float.floatToIntBits(f));}publicstaticbyte[]intToBytes(inti){byte[]b=newbyte[4];b[0]=(byte)(i>>>24);b[1]=(byte)(i>>>16);b[2]=(byte)(i>>>8);b[3]=(byte)i;returnb;}publicstaticbyte[]longToBytes(longl){byte[]b=newbyte[8];b[0]=(byte)(l>>>56);b[1]=(byte)(l>>>48);b[2]=(byte)(l>>>40);b[3]=(byte)(l>>>32);b[4]=(byte)(l>>>24);b[5]=(byte)(l>>>16);b[6]=(byte)(l>>>8);b[7]=(byte)(l);returnb;}publicstaticintbytesToInt(byte[]bytes,intstart){intnum=bytes[start]&0xFF;num|=((bytes[start+1]<<8)&0xFF00);num|=((bytes[start+2]<<16)&0xFF0000);num|=((bytes[start+3]<<24)&0xFF000000);returnnum;}publicstaticintbytesHighFirstToInt(byte[]bytes,intstart){intnum=bytes[start+3]&0xFF;num|=((bytes[start+2]<<8)&0xFF00);num|=((bytes[start+1]<<16)&0xFF0000);num|=((bytes[start]<<24)&0xFF000000);returnnum;}publicstaticcharbytesHighFirstToChar(byte[]bytes,intstart){charc=(char)(((bytes[start]&0xFF)<<8)|(bytes[start+1]&0xFF));returnc;}publicstaticfloatbytesHighFirstToFloat(byte[]bytes,intstart){intl=bytesHighFirstToInt(bytes,start);returnFloat.intBitsToFloat(l);}publicstaticvoidwriteUnsignedInt(DataOutputStreamout,intuint)throwsIOException{out.writeByte((byte)((uint>>>8)&0xFF));out.writeByte((byte)((uint>>>0)&0xFF));}publicstaticintconvertTwoCharToInt(charhigh,charlow){intresult=high<<16;result|=low;returnresult;}publicstaticchar[]convertIntToTwoChar(intn){char[]result=newchar[2];result[0]=(char)(n>>>16);result[1]=(char)(0x0000FFFF&n);returnresult;}} "]
222837[label="classModifier\n public "]
222838[label="classBody\n {publicstaticcharbytesToChar(byte[]b){charc=(char)((b[0]<<8)&0xFF00L);c|=(char)(b[1]&0xFFL);returnc;}publicstaticdoublebytesToDouble(byte[]b){returnDouble.longBitsToDouble(bytesToLong(b));}publicstaticdoublebytesHighFirstToDouble(byte[]bytes,intstart){longl=((long)bytes[start]<<56)&0xFF00000000000000L;l|=((long)bytes[1+start]<<48)&0xFF000000000000L;l|=((long)bytes[2+start]<<40)&0xFF0000000000L;l|=((long)bytes[3+start]<<32)&0xFF00000000L;l|=((long)bytes[4+start]<<24)&0xFF000000L;l|=((long)bytes[5+start]<<16)&0xFF0000L;l|=((long)bytes[6+start]<<8)&0xFF00L;l|=(long)bytes[7+start]&0xFFL;returnDouble.longBitsToDouble(l);}publicstaticfloatbytesToFloat(byte[]b){returnFloat.intBitsToFloat(bytesToInt(b));}publicstaticintbytesToInt(byte[]b){inti=(b[0]<<24)&0xFF000000;i|=(b[1]<<16)&0xFF0000;i|=(b[2]<<8)&0xFF00;i|=b[3]&0xFF;returni;}publicstaticlongbytesToLong(byte[]b){longl=((long)b[0]<<56)&0xFF00000000000000L;l|=((long)b[1]<<48)&0xFF000000000000L;l|=((long)b[2]<<40)&0xFF0000000000L;l|=((long)b[3]<<32)&0xFF00000000L;l|=((long)b[4]<<24)&0xFF000000L;l|=((long)b[5]<<16)&0xFF0000L;l|=((long)b[6]<<8)&0xFF00L;l|=(long)b[7]&0xFFL;returnl;}publicstaticlongbytesHighFirstToLong(byte[]b){longl=((long)b[0]<<56)&0xFF00000000000000L;l|=((long)b[1]<<48)&0xFF000000000000L;l|=((long)b[2]<<40)&0xFF0000000000L;l|=((long)b[3]<<32)&0xFF00000000L;l|=((long)b[4]<<24)&0xFF000000L;l|=((long)b[5]<<16)&0xFF0000L;l|=((long)b[6]<<8)&0xFF00L;l|=(long)b[7]&0xFFL;returnl;}publicstaticbyte[]charToBytes(charc){byte[]b=newbyte[8];b[0]=(byte)(c>>>8);b[1]=(byte)c;returnb;}publicstaticbyte[]doubleToBytes(doubled){returnlongToBytes(Double.doubleToLongBits(d));}publicstaticbyte[]floatToBytes(floatf){returnintToBytes(Float.floatToIntBits(f));}publicstaticbyte[]intToBytes(inti){byte[]b=newbyte[4];b[0]=(byte)(i>>>24);b[1]=(byte)(i>>>16);b[2]=(byte)(i>>>8);b[3]=(byte)i;returnb;}publicstaticbyte[]longToBytes(longl){byte[]b=newbyte[8];b[0]=(byte)(l>>>56);b[1]=(byte)(l>>>48);b[2]=(byte)(l>>>40);b[3]=(byte)(l>>>32);b[4]=(byte)(l>>>24);b[5]=(byte)(l>>>16);b[6]=(byte)(l>>>8);b[7]=(byte)(l);returnb;}publicstaticintbytesToInt(byte[]bytes,intstart){intnum=bytes[start]&0xFF;num|=((bytes[start+1]<<8)&0xFF00);num|=((bytes[start+2]<<16)&0xFF0000);num|=((bytes[start+3]<<24)&0xFF000000);returnnum;}publicstaticintbytesHighFirstToInt(byte[]bytes,intstart){intnum=bytes[start+3]&0xFF;num|=((bytes[start+2]<<8)&0xFF00);num|=((bytes[start+1]<<16)&0xFF0000);num|=((bytes[start]<<24)&0xFF000000);returnnum;}publicstaticcharbytesHighFirstToChar(byte[]bytes,intstart){charc=(char)(((bytes[start]&0xFF)<<8)|(bytes[start+1]&0xFF));returnc;}publicstaticfloatbytesHighFirstToFloat(byte[]bytes,intstart){intl=bytesHighFirstToInt(bytes,start);returnFloat.intBitsToFloat(l);}publicstaticvoidwriteUnsignedInt(DataOutputStreamout,intuint)throwsIOException{out.writeByte((byte)((uint>>>8)&0xFF));out.writeByte((byte)((uint>>>0)&0xFF));}publicstaticintconvertTwoCharToInt(charhigh,charlow){intresult=high<<16;result|=low;returnresult;}publicstaticchar[]convertIntToTwoChar(intn){char[]result=newchar[2];result[0]=(char)(n>>>16);result[1]=(char)(0x0000FFFF&n);returnresult;}} "]
322839[label="methodDeclaration\n publicstaticcharbytesToChar(byte[]b){charc=(char)((b[0]<<8)&0xFF00L);c|=(char)(b[1]&0xFFL);returnc;} "]
422840[label="methodModifier\n public "]
422841[label="methodModifier\n static "]
422842[label="methodHeader\n charbytesToChar(byte[]b) "]
522843[label="integralType\n char "]
522844[label="methodDeclarator\n bytesToChar(byte[]b) "]
622845[label="formalParameter\n byte[]b "]
722846[label="unannArrayType\n byte[] "]
822847[label="integralType\n byte "]
822848[label="dims\n [] "]
722849[label="variableDeclaratorId\n b "]
422850[label="block\n {charc=(char)((b[0]<<8)&0xFF00L);c|=(char)(b[1]&0xFFL);returnc;} "]
522851[label="blockStatements\n charc=(char)((b[0]<<8)&0xFF00L);c|=(char)(b[1]&0xFFL);returnc; "]
622852[label="localVariableDeclarationStatement\n charc=(char)((b[0]<<8)&0xFF00L); "]
722853[label="localVariableDeclaration\n charc=(char)((b[0]<<8)&0xFF00L) "]
822854[label="integralType\n char "]
822855[label="variableDeclarator\n c=(char)((b[0]<<8)&0xFF00L) "]
922856[label="variableDeclaratorId\n c "]
922857[label="castExpression\n (char)((b[0]<<8)&0xFF00L) "]
1022858[label="integralType\n char "]
1022859[label="primaryNoNewArray_lfno_primary\n ((b[0]<<8)&0xFF00L) "]
1122860[label="andExpression\n (b[0]<<8)&0xFF00L "]
1222861[label="primaryNoNewArray_lfno_primary\n (b[0]<<8) "]
1322862[label="shiftExpression\n b[0]<<8 "]
1422863[label="arrayAccess_lfno_primary\n b[0] "]
1522864[label="expressionName\n b "]
1522865[label="literal\n 0 "]
1422866[label="literal\n 8 "]
1222867[label="literal\n 0xFF00L "]
622868[label="expressionStatement\n c|=(char)(b[1]&0xFFL); "]
722869[label="assignment\n c|=(char)(b[1]&0xFFL) "]
822870[label="expressionName\n c "]
822871[label="assignmentOperator\n |= "]
822872[label="castExpression\n (char)(b[1]&0xFFL) "]
922873[label="integralType\n char "]
922874[label="primaryNoNewArray_lfno_primary\n (b[1]&0xFFL) "]
1022875[label="andExpression\n b[1]&0xFFL "]
1122876[label="arrayAccess_lfno_primary\n b[1] "]
1222877[label="expressionName\n b "]
1222878[label="literal\n 1 "]
1122879[label="literal\n 0xFFL "]
622880[label="returnStatement\n returnc; "]
722881[label="expressionName\n c "]
322882[label="methodDeclaration\n publicstaticdoublebytesToDouble(byte[]b){returnDouble.longBitsToDouble(bytesToLong(b));} "]
422883[label="methodModifier\n public "]
422884[label="methodModifier\n static "]
422885[label="methodHeader\n doublebytesToDouble(byte[]b) "]
522886[label="floatingPointType\n double "]
522887[label="methodDeclarator\n bytesToDouble(byte[]b) "]
622888[label="formalParameter\n byte[]b "]
722889[label="unannArrayType\n byte[] "]
822890[label="integralType\n byte "]
822891[label="dims\n [] "]
722892[label="variableDeclaratorId\n b "]
422893[label="block\n {returnDouble.longBitsToDouble(bytesToLong(b));} "]
522894[label="returnStatement\n returnDouble.longBitsToDouble(bytesToLong(b)); "]
622895[label="methodInvocation_lfno_primary\n Double.longBitsToDouble(bytesToLong(b)) "]
722896[label="typeName\n Double "]
722897[label="methodInvocation_lfno_primary\n bytesToLong(b) "]
822898[label="methodName\n bytesToLong "]
822899[label="expressionName\n b "]
322900[label="methodDeclaration\n publicstaticdoublebytesHighFirstToDouble(byte[]bytes,intstart){longl=((long)bytes[start]<<56)&0xFF00000000000000L;l|=((long)bytes[1+start]<<48)&0xFF000000000000L;l|=((long)bytes[2+start]<<40)&0xFF0000000000L;l|=((long)bytes[3+start]<<32)&0xFF00000000L;l|=((long)bytes[4+start]<<24)&0xFF000000L;l|=((long)bytes[5+start]<<16)&0xFF0000L;l|=((long)bytes[6+start]<<8)&0xFF00L;l|=(long)bytes[7+start]&0xFFL;returnDouble.longBitsToDouble(l);} "]
422901[label="methodModifier\n public "]
422902[label="methodModifier\n static "]
422903[label="methodHeader\n doublebytesHighFirstToDouble(byte[]bytes,intstart) "]
522904[label="floatingPointType\n double "]
522905[label="methodDeclarator\n bytesHighFirstToDouble(byte[]bytes,intstart) "]
622906[label="formalParameterList\n byte[]bytes,intstart "]
722907[label="formalParameter\n byte[]bytes "]
822908[label="unannArrayType\n byte[] "]
922909[label="integralType\n byte "]
922910[label="dims\n [] "]
822911[label="variableDeclaratorId\n bytes "]
722912[label="formalParameter\n intstart "]
822913[label="integralType\n int "]
822914[label="variableDeclaratorId\n start "]
422915[label="block\n {longl=((long)bytes[start]<<56)&0xFF00000000000000L;l|=((long)bytes[1+start]<<48)&0xFF000000000000L;l|=((long)bytes[2+start]<<40)&0xFF0000000000L;l|=((long)bytes[3+start]<<32)&0xFF00000000L;l|=((long)bytes[4+start]<<24)&0xFF000000L;l|=((long)bytes[5+start]<<16)&0xFF0000L;l|=((long)bytes[6+start]<<8)&0xFF00L;l|=(long)bytes[7+start]&0xFFL;returnDouble.longBitsToDouble(l);} "]
522916[label="blockStatements\n longl=((long)bytes[start]<<56)&0xFF00000000000000L;l|=((long)bytes[1+start]<<48)&0xFF000000000000L;l|=((long)bytes[2+start]<<40)&0xFF0000000000L;l|=((long)bytes[3+start]<<32)&0xFF00000000L;l|=((long)bytes[4+start]<<24)&0xFF000000L;l|=((long)bytes[5+start]<<16)&0xFF0000L;l|=((long)bytes[6+start]<<8)&0xFF00L;l|=(long)bytes[7+start]&0xFFL;returnDouble.longBitsToDouble(l); "]
622917[label="localVariableDeclarationStatement\n longl=((long)bytes[start]<<56)&0xFF00000000000000L; "]
722918[label="localVariableDeclaration\n longl=((long)bytes[start]<<56)&0xFF00000000000000L "]
822919[label="integralType\n long "]
822920[label="variableDeclarator\n l=((long)bytes[start]<<56)&0xFF00000000000000L "]
922921[label="variableDeclaratorId\n l "]
922922[label="andExpression\n ((long)bytes[start]<<56)&0xFF00000000000000L "]
1022923[label="primaryNoNewArray_lfno_primary\n ((long)bytes[start]<<56) "]
1122924[label="shiftExpression\n (long)bytes[start]<<56 "]
1222925[label="castExpression\n (long)bytes[start] "]
1322926[label="integralType\n long "]
1322927[label="arrayAccess_lfno_primary\n bytes[start] "]
1422928[label="expressionName\n bytes "]
1422929[label="expressionName\n start "]
1222930[label="literal\n 56 "]
1022931[label="literal\n 0xFF00000000000000L "]
622932[label="expressionStatement\n l|=((long)bytes[1+start]<<48)&0xFF000000000000L; "]
722933[label="assignment\n l|=((long)bytes[1+start]<<48)&0xFF000000000000L "]
822934[label="expressionName\n l "]
822935[label="assignmentOperator\n |= "]
822936[label="andExpression\n ((long)bytes[1+start]<<48)&0xFF000000000000L "]
922937[label="primaryNoNewArray_lfno_primary\n ((long)bytes[1+start]<<48) "]
1022938[label="shiftExpression\n (long)bytes[1+start]<<48 "]
1122939[label="castExpression\n (long)bytes[1+start] "]
1222940[label="integralType\n long "]
1222941[label="arrayAccess_lfno_primary\n bytes[1+start] "]
1322942[label="expressionName\n bytes "]
1322943[label="additiveExpression\n 1+start "]
1422944[label="literal\n 1 "]
1422945[label="expressionName\n start "]
1122946[label="literal\n 48 "]
922947[label="literal\n 0xFF000000000000L "]
622948[label="expressionStatement\n l|=((long)bytes[2+start]<<40)&0xFF0000000000L; "]
722949[label="assignment\n l|=((long)bytes[2+start]<<40)&0xFF0000000000L "]
822950[label="expressionName\n l "]
822951[label="assignmentOperator\n |= "]
822952[label="andExpression\n ((long)bytes[2+start]<<40)&0xFF0000000000L "]
922953[label="primaryNoNewArray_lfno_primary\n ((long)bytes[2+start]<<40) "]
1022954[label="shiftExpression\n (long)bytes[2+start]<<40 "]
1122955[label="castExpression\n (long)bytes[2+start] "]
1222956[label="integralType\n long "]
1222957[label="arrayAccess_lfno_primary\n bytes[2+start] "]
1322958[label="expressionName\n bytes "]
1322959[label="additiveExpression\n 2+start "]
1422960[label="literal\n 2 "]
1422961[label="expressionName\n start "]
1122962[label="literal\n 40 "]
922963[label="literal\n 0xFF0000000000L "]
622964[label="expressionStatement\n l|=((long)bytes[3+start]<<32)&0xFF00000000L; "]
722965[label="assignment\n l|=((long)bytes[3+start]<<32)&0xFF00000000L "]
822966[label="expressionName\n l "]
822967[label="assignmentOperator\n |= "]
822968[label="andExpression\n ((long)bytes[3+start]<<32)&0xFF00000000L "]
922969[label="primaryNoNewArray_lfno_primary\n ((long)bytes[3+start]<<32) "]
1022970[label="shiftExpression\n (long)bytes[3+start]<<32 "]
1122971[label="castExpression\n (long)bytes[3+start] "]
1222972[label="integralType\n long "]
1222973[label="arrayAccess_lfno_primary\n bytes[3+start] "]
1322974[label="expressionName\n bytes "]
1322975[label="additiveExpression\n 3+start "]
1422976[label="literal\n 3 "]
1422977[label="expressionName\n start "]
1122978[label="literal\n 32 "]
922979[label="literal\n 0xFF00000000L "]
622980[label="expressionStatement\n l|=((long)bytes[4+start]<<24)&0xFF000000L; "]
722981[label="assignment\n l|=((long)bytes[4+start]<<24)&0xFF000000L "]
822982[label="expressionName\n l "]
822983[label="assignmentOperator\n |= "]
822984[label="andExpression\n ((long)bytes[4+start]<<24)&0xFF000000L "]
922985[label="primaryNoNewArray_lfno_primary\n ((long)bytes[4+start]<<24) "]
1022986[label="shiftExpression\n (long)bytes[4+start]<<24 "]
1122987[label="castExpression\n (long)bytes[4+start] "]
1222988[label="integralType\n long "]
1222989[label="arrayAccess_lfno_primary\n bytes[4+start] "]
1322990[label="expressionName\n bytes "]
1322991[label="additiveExpression\n 4+start "]
1422992[label="literal\n 4 "]
1422993[label="expressionName\n start "]
1122994[label="literal\n 24 "]
922995[label="literal\n 0xFF000000L "]
622996[label="expressionStatement\n l|=((long)bytes[5+start]<<16)&0xFF0000L; "]
722997[label="assignment\n l|=((long)bytes[5+start]<<16)&0xFF0000L "]
822998[label="expressionName\n l "]
822999[label="assignmentOperator\n |= "]
823000[label="andExpression\n ((long)bytes[5+start]<<16)&0xFF0000L "]
923001[label="primaryNoNewArray_lfno_primary\n ((long)bytes[5+start]<<16) "]
1023002[label="shiftExpression\n (long)bytes[5+start]<<16 "]
1123003[label="castExpression\n (long)bytes[5+start] "]
1223004[label="integralType\n long "]
1223005[label="arrayAccess_lfno_primary\n bytes[5+start] "]
1323006[label="expressionName\n bytes "]
1323007[label="additiveExpression\n 5+start "]
1423008[label="literal\n 5 "]
1423009[label="expressionName\n start "]
1123010[label="literal\n 16 "]
923011[label="literal\n 0xFF0000L "]
623012[label="expressionStatement\n l|=((long)bytes[6+start]<<8)&0xFF00L; "]
723013[label="assignment\n l|=((long)bytes[6+start]<<8)&0xFF00L "]
823014[label="expressionName\n l "]
823015[label="assignmentOperator\n |= "]
823016[label="andExpression\n ((long)bytes[6+start]<<8)&0xFF00L "]
923017[label="primaryNoNewArray_lfno_primary\n ((long)bytes[6+start]<<8) "]
1023018[label="shiftExpression\n (long)bytes[6+start]<<8 "]
1123019[label="castExpression\n (long)bytes[6+start] "]
1223020[label="integralType\n long "]
1223021[label="arrayAccess_lfno_primary\n bytes[6+start] "]
1323022[label="expressionName\n bytes "]
1323023[label="additiveExpression\n 6+start "]
1423024[label="literal\n 6 "]
1423025[label="expressionName\n start "]
1123026[label="literal\n 8 "]
923027[label="literal\n 0xFF00L "]
623028[label="expressionStatement\n l|=(long)bytes[7+start]&0xFFL; "]
723029[label="assignment\n l|=(long)bytes[7+start]&0xFFL "]
823030[label="expressionName\n l "]
823031[label="assignmentOperator\n |= "]
823032[label="andExpression\n (long)bytes[7+start]&0xFFL "]
923033[label="castExpression\n (long)bytes[7+start] "]
1023034[label="integralType\n long "]
1023035[label="arrayAccess_lfno_primary\n bytes[7+start] "]
1123036[label="expressionName\n bytes "]
1123037[label="additiveExpression\n 7+start "]
1223038[label="literal\n 7 "]
1223039[label="expressionName\n start "]
923040[label="literal\n 0xFFL "]
623041[label="returnStatement\n returnDouble.longBitsToDouble(l); "]
723042[label="methodInvocation_lfno_primary\n Double.longBitsToDouble(l) "]
823043[label="typeName\n Double "]
823044[label="expressionName\n l "]
323045[label="methodDeclaration\n publicstaticfloatbytesToFloat(byte[]b){returnFloat.intBitsToFloat(bytesToInt(b));} "]
423046[label="methodModifier\n public "]
423047[label="methodModifier\n static "]
423048[label="methodHeader\n floatbytesToFloat(byte[]b) "]
523049[label="floatingPointType\n float "]
523050[label="methodDeclarator\n bytesToFloat(byte[]b) "]
623051[label="formalParameter\n byte[]b "]
723052[label="unannArrayType\n byte[] "]
823053[label="integralType\n byte "]
823054[label="dims\n [] "]
723055[label="variableDeclaratorId\n b "]
423056[label="block\n {returnFloat.intBitsToFloat(bytesToInt(b));} "]
523057[label="returnStatement\n returnFloat.intBitsToFloat(bytesToInt(b)); "]
623058[label="methodInvocation_lfno_primary\n Float.intBitsToFloat(bytesToInt(b)) "]
723059[label="typeName\n Float "]
723060[label="methodInvocation_lfno_primary\n bytesToInt(b) "]
823061[label="methodName\n bytesToInt "]
823062[label="expressionName\n b "]
323063[label="methodDeclaration\n publicstaticintbytesToInt(byte[]b){inti=(b[0]<<24)&0xFF000000;i|=(b[1]<<16)&0xFF0000;i|=(b[2]<<8)&0xFF00;i|=b[3]&0xFF;returni;} "]
423064[label="methodModifier\n public "]
423065[label="methodModifier\n static "]
423066[label="methodHeader\n intbytesToInt(byte[]b) "]
523067[label="integralType\n int "]
523068[label="methodDeclarator\n bytesToInt(byte[]b) "]
623069[label="formalParameter\n byte[]b "]
723070[label="unannArrayType\n byte[] "]
823071[label="integralType\n byte "]
823072[label="dims\n [] "]
723073[label="variableDeclaratorId\n b "]
423074[label="block\n {inti=(b[0]<<24)&0xFF000000;i|=(b[1]<<16)&0xFF0000;i|=(b[2]<<8)&0xFF00;i|=b[3]&0xFF;returni;} "]
523075[label="blockStatements\n inti=(b[0]<<24)&0xFF000000;i|=(b[1]<<16)&0xFF0000;i|=(b[2]<<8)&0xFF00;i|=b[3]&0xFF;returni; "]
623076[label="localVariableDeclarationStatement\n inti=(b[0]<<24)&0xFF000000; "]
723077[label="localVariableDeclaration\n inti=(b[0]<<24)&0xFF000000 "]
823078[label="integralType\n int "]
823079[label="variableDeclarator\n i=(b[0]<<24)&0xFF000000 "]
923080[label="variableDeclaratorId\n i "]
923081[label="andExpression\n (b[0]<<24)&0xFF000000 "]
1023082[label="primaryNoNewArray_lfno_primary\n (b[0]<<24) "]
1123083[label="shiftExpression\n b[0]<<24 "]
1223084[label="arrayAccess_lfno_primary\n b[0] "]
1323085[label="expressionName\n b "]
1323086[label="literal\n 0 "]
1223087[label="literal\n 24 "]
1023088[label="literal\n 0xFF000000 "]
623089[label="expressionStatement\n i|=(b[1]<<16)&0xFF0000; "]
723090[label="assignment\n i|=(b[1]<<16)&0xFF0000 "]
823091[label="expressionName\n i "]
823092[label="assignmentOperator\n |= "]
823093[label="andExpression\n (b[1]<<16)&0xFF0000 "]
923094[label="primaryNoNewArray_lfno_primary\n (b[1]<<16) "]
1023095[label="shiftExpression\n b[1]<<16 "]
1123096[label="arrayAccess_lfno_primary\n b[1] "]
1223097[label="expressionName\n b "]
1223098[label="literal\n 1 "]
1123099[label="literal\n 16 "]
923100[label="literal\n 0xFF0000 "]
623101[label="expressionStatement\n i|=(b[2]<<8)&0xFF00; "]
723102[label="assignment\n i|=(b[2]<<8)&0xFF00 "]
823103[label="expressionName\n i "]
823104[label="assignmentOperator\n |= "]
823105[label="andExpression\n (b[2]<<8)&0xFF00 "]
923106[label="primaryNoNewArray_lfno_primary\n (b[2]<<8) "]
1023107[label="shiftExpression\n b[2]<<8 "]
1123108[label="arrayAccess_lfno_primary\n b[2] "]
1223109[label="expressionName\n b "]
1223110[label="literal\n 2 "]
1123111[label="literal\n 8 "]
923112[label="literal\n 0xFF00 "]
623113[label="expressionStatement\n i|=b[3]&0xFF; "]
723114[label="assignment\n i|=b[3]&0xFF "]
823115[label="expressionName\n i "]
823116[label="assignmentOperator\n |= "]
823117[label="andExpression\n b[3]&0xFF "]
923118[label="arrayAccess_lfno_primary\n b[3] "]
1023119[label="expressionName\n b "]
1023120[label="literal\n 3 "]
923121[label="literal\n 0xFF "]
623122[label="returnStatement\n returni; "]
723123[label="expressionName\n i "]
323124[label="methodDeclaration\n publicstaticlongbytesToLong(byte[]b){longl=((long)b[0]<<56)&0xFF00000000000000L;l|=((long)b[1]<<48)&0xFF000000000000L;l|=((long)b[2]<<40)&0xFF0000000000L;l|=((long)b[3]<<32)&0xFF00000000L;l|=((long)b[4]<<24)&0xFF000000L;l|=((long)b[5]<<16)&0xFF0000L;l|=((long)b[6]<<8)&0xFF00L;l|=(long)b[7]&0xFFL;returnl;} "]
423125[label="methodModifier\n public "]
423126[label="methodModifier\n static "]
423127[label="methodHeader\n longbytesToLong(byte[]b) "]
523128[label="integralType\n long "]
523129[label="methodDeclarator\n bytesToLong(byte[]b) "]
623130[label="formalParameter\n byte[]b "]
723131[label="unannArrayType\n byte[] "]
823132[label="integralType\n byte "]
823133[label="dims\n [] "]
723134[label="variableDeclaratorId\n b "]
423135[label="block\n {longl=((long)b[0]<<56)&0xFF00000000000000L;l|=((long)b[1]<<48)&0xFF000000000000L;l|=((long)b[2]<<40)&0xFF0000000000L;l|=((long)b[3]<<32)&0xFF00000000L;l|=((long)b[4]<<24)&0xFF000000L;l|=((long)b[5]<<16)&0xFF0000L;l|=((long)b[6]<<8)&0xFF00L;l|=(long)b[7]&0xFFL;returnl;} "]
523136[label="blockStatements\n longl=((long)b[0]<<56)&0xFF00000000000000L;l|=((long)b[1]<<48)&0xFF000000000000L;l|=((long)b[2]<<40)&0xFF0000000000L;l|=((long)b[3]<<32)&0xFF00000000L;l|=((long)b[4]<<24)&0xFF000000L;l|=((long)b[5]<<16)&0xFF0000L;l|=((long)b[6]<<8)&0xFF00L;l|=(long)b[7]&0xFFL;returnl; "]
623137[label="localVariableDeclarationStatement\n longl=((long)b[0]<<56)&0xFF00000000000000L; "]
723138[label="localVariableDeclaration\n longl=((long)b[0]<<56)&0xFF00000000000000L "]
823139[label="integralType\n long "]
823140[label="variableDeclarator\n l=((long)b[0]<<56)&0xFF00000000000000L "]
923141[label="variableDeclaratorId\n l "]
923142[label="andExpression\n ((long)b[0]<<56)&0xFF00000000000000L "]
1023143[label="primaryNoNewArray_lfno_primary\n ((long)b[0]<<56) "]
1123144[label="shiftExpression\n (long)b[0]<<56 "]
1223145[label="castExpression\n (long)b[0] "]
1323146[label="integralType\n long "]
1323147[label="arrayAccess_lfno_primary\n b[0] "]
1423148[label="expressionName\n b "]
1423149[label="literal\n 0 "]
1223150[label="literal\n 56 "]
1023151[label="literal\n 0xFF00000000000000L "]
623152[label="expressionStatement\n l|=((long)b[1]<<48)&0xFF000000000000L; "]
723153[label="assignment\n l|=((long)b[1]<<48)&0xFF000000000000L "]
823154[label="expressionName\n l "]
823155[label="assignmentOperator\n |= "]
823156[label="andExpression\n ((long)b[1]<<48)&0xFF000000000000L "]
923157[label="primaryNoNewArray_lfno_primary\n ((long)b[1]<<48) "]
1023158[label="shiftExpression\n (long)b[1]<<48 "]
1123159[label="castExpression\n (long)b[1] "]
1223160[label="integralType\n long "]
1223161[label="arrayAccess_lfno_primary\n b[1] "]
1323162[label="expressionName\n b "]
1323163[label="literal\n 1 "]
1123164[label="literal\n 48 "]
923165[label="literal\n 0xFF000000000000L "]
623166[label="expressionStatement\n l|=((long)b[2]<<40)&0xFF0000000000L; "]
723167[label="assignment\n l|=((long)b[2]<<40)&0xFF0000000000L "]
823168[label="expressionName\n l "]
823169[label="assignmentOperator\n |= "]
823170[label="andExpression\n ((long)b[2]<<40)&0xFF0000000000L "]
923171[label="primaryNoNewArray_lfno_primary\n ((long)b[2]<<40) "]
1023172[label="shiftExpression\n (long)b[2]<<40 "]
1123173[label="castExpression\n (long)b[2] "]
1223174[label="integralType\n long "]
1223175[label="arrayAccess_lfno_primary\n b[2] "]
1323176[label="expressionName\n b "]
1323177[label="literal\n 2 "]
1123178[label="literal\n 40 "]
923179[label="literal\n 0xFF0000000000L "]
623180[label="expressionStatement\n l|=((long)b[3]<<32)&0xFF00000000L; "]
723181[label="assignment\n l|=((long)b[3]<<32)&0xFF00000000L "]
823182[label="expressionName\n l "]
823183[label="assignmentOperator\n |= "]
823184[label="andExpression\n ((long)b[3]<<32)&0xFF00000000L "]
923185[label="primaryNoNewArray_lfno_primary\n ((long)b[3]<<32) "]
1023186[label="shiftExpression\n (long)b[3]<<32 "]
1123187[label="castExpression\n (long)b[3] "]
1223188[label="integralType\n long "]
1223189[label="arrayAccess_lfno_primary\n b[3] "]
1323190[label="expressionName\n b "]
1323191[label="literal\n 3 "]
1123192[label="literal\n 32 "]
923193[label="literal\n 0xFF00000000L "]
623194[label="expressionStatement\n l|=((long)b[4]<<24)&0xFF000000L; "]
723195[label="assignment\n l|=((long)b[4]<<24)&0xFF000000L "]
823196[label="expressionName\n l "]
823197[label="assignmentOperator\n |= "]
823198[label="andExpression\n ((long)b[4]<<24)&0xFF000000L "]
923199[label="primaryNoNewArray_lfno_primary\n ((long)b[4]<<24) "]
1023200[label="shiftExpression\n (long)b[4]<<24 "]
1123201[label="castExpression\n (long)b[4] "]
1223202[label="integralType\n long "]
1223203[label="arrayAccess_lfno_primary\n b[4] "]
1323204[label="expressionName\n b "]
1323205[label="literal\n 4 "]
1123206[label="literal\n 24 "]
923207[label="literal\n 0xFF000000L "]
623208[label="expressionStatement\n l|=((long)b[5]<<16)&0xFF0000L; "]
723209[label="assignment\n l|=((long)b[5]<<16)&0xFF0000L "]
823210[label="expressionName\n l "]
823211[label="assignmentOperator\n |= "]
823212[label="andExpression\n ((long)b[5]<<16)&0xFF0000L "]
923213[label="primaryNoNewArray_lfno_primary\n ((long)b[5]<<16) "]
1023214[label="shiftExpression\n (long)b[5]<<16 "]
1123215[label="castExpression\n (long)b[5] "]
1223216[label="integralType\n long "]
1223217[label="arrayAccess_lfno_primary\n b[5] "]
1323218[label="expressionName\n b "]
1323219[label="literal\n 5 "]
1123220[label="literal\n 16 "]
923221[label="literal\n 0xFF0000L "]
623222[label="expressionStatement\n l|=((long)b[6]<<8)&0xFF00L; "]
723223[label="assignment\n l|=((long)b[6]<<8)&0xFF00L "]
823224[label="expressionName\n l "]
823225[label="assignmentOperator\n |= "]
823226[label="andExpression\n ((long)b[6]<<8)&0xFF00L "]
923227[label="primaryNoNewArray_lfno_primary\n ((long)b[6]<<8) "]
1023228[label="shiftExpression\n (long)b[6]<<8 "]
1123229[label="castExpression\n (long)b[6] "]
1223230[label="integralType\n long "]
1223231[label="arrayAccess_lfno_primary\n b[6] "]
1323232[label="expressionName\n b "]
1323233[label="literal\n 6 "]
1123234[label="literal\n 8 "]
923235[label="literal\n 0xFF00L "]
623236[label="expressionStatement\n l|=(long)b[7]&0xFFL; "]
723237[label="assignment\n l|=(long)b[7]&0xFFL "]
823238[label="expressionName\n l "]
823239[label="assignmentOperator\n |= "]
823240[label="andExpression\n (long)b[7]&0xFFL "]
923241[label="castExpression\n (long)b[7] "]
1023242[label="integralType\n long "]
1023243[label="arrayAccess_lfno_primary\n b[7] "]
1123244[label="expressionName\n b "]
1123245[label="literal\n 7 "]
923246[label="literal\n 0xFFL "]
623247[label="returnStatement\n returnl; "]
723248[label="expressionName\n l "]
323249[label="methodDeclaration\n publicstaticlongbytesHighFirstToLong(byte[]b){longl=((long)b[0]<<56)&0xFF00000000000000L;l|=((long)b[1]<<48)&0xFF000000000000L;l|=((long)b[2]<<40)&0xFF0000000000L;l|=((long)b[3]<<32)&0xFF00000000L;l|=((long)b[4]<<24)&0xFF000000L;l|=((long)b[5]<<16)&0xFF0000L;l|=((long)b[6]<<8)&0xFF00L;l|=(long)b[7]&0xFFL;returnl;} "]
423250[label="methodModifier\n public "]
423251[label="methodModifier\n static "]
423252[label="methodHeader\n longbytesHighFirstToLong(byte[]b) "]
523253[label="integralType\n long "]
523254[label="methodDeclarator\n bytesHighFirstToLong(byte[]b) "]
623255[label="formalParameter\n byte[]b "]
723256[label="unannArrayType\n byte[] "]
823257[label="integralType\n byte "]
823258[label="dims\n [] "]
723259[label="variableDeclaratorId\n b "]
423260[label="block\n {longl=((long)b[0]<<56)&0xFF00000000000000L;l|=((long)b[1]<<48)&0xFF000000000000L;l|=((long)b[2]<<40)&0xFF0000000000L;l|=((long)b[3]<<32)&0xFF00000000L;l|=((long)b[4]<<24)&0xFF000000L;l|=((long)b[5]<<16)&0xFF0000L;l|=((long)b[6]<<8)&0xFF00L;l|=(long)b[7]&0xFFL;returnl;} "]
523261[label="blockStatements\n longl=((long)b[0]<<56)&0xFF00000000000000L;l|=((long)b[1]<<48)&0xFF000000000000L;l|=((long)b[2]<<40)&0xFF0000000000L;l|=((long)b[3]<<32)&0xFF00000000L;l|=((long)b[4]<<24)&0xFF000000L;l|=((long)b[5]<<16)&0xFF0000L;l|=((long)b[6]<<8)&0xFF00L;l|=(long)b[7]&0xFFL;returnl; "]
623262[label="localVariableDeclarationStatement\n longl=((long)b[0]<<56)&0xFF00000000000000L; "]
723263[label="localVariableDeclaration\n longl=((long)b[0]<<56)&0xFF00000000000000L "]
823264[label="integralType\n long "]
823265[label="variableDeclarator\n l=((long)b[0]<<56)&0xFF00000000000000L "]
923266[label="variableDeclaratorId\n l "]
923267[label="andExpression\n ((long)b[0]<<56)&0xFF00000000000000L "]
1023268[label="primaryNoNewArray_lfno_primary\n ((long)b[0]<<56) "]
1123269[label="shiftExpression\n (long)b[0]<<56 "]
1223270[label="castExpression\n (long)b[0] "]
1323271[label="integralType\n long "]
1323272[label="arrayAccess_lfno_primary\n b[0] "]
1423273[label="expressionName\n b "]
1423274[label="literal\n 0 "]
1223275[label="literal\n 56 "]
1023276[label="literal\n 0xFF00000000000000L "]
623277[label="expressionStatement\n l|=((long)b[1]<<48)&0xFF000000000000L; "]
723278[label="assignment\n l|=((long)b[1]<<48)&0xFF000000000000L "]
823279[label="expressionName\n l "]
823280[label="assignmentOperator\n |= "]
823281[label="andExpression\n ((long)b[1]<<48)&0xFF000000000000L "]
923282[label="primaryNoNewArray_lfno_primary\n ((long)b[1]<<48) "]
1023283[label="shiftExpression\n (long)b[1]<<48 "]
1123284[label="castExpression\n (long)b[1] "]
1223285[label="integralType\n long "]
1223286[label="arrayAccess_lfno_primary\n b[1] "]
1323287[label="expressionName\n b "]
1323288[label="literal\n 1 "]
1123289[label="literal\n 48 "]
923290[label="literal\n 0xFF000000000000L "]
623291[label="expressionStatement\n l|=((long)b[2]<<40)&0xFF0000000000L; "]
723292[label="assignment\n l|=((long)b[2]<<40)&0xFF0000000000L "]
823293[label="expressionName\n l "]
823294[label="assignmentOperator\n |= "]
823295[label="andExpression\n ((long)b[2]<<40)&0xFF0000000000L "]
923296[label="primaryNoNewArray_lfno_primary\n ((long)b[2]<<40) "]
1023297[label="shiftExpression\n (long)b[2]<<40 "]
1123298[label="castExpression\n (long)b[2] "]
1223299[label="integralType\n long "]
1223300[label="arrayAccess_lfno_primary\n b[2] "]
1323301[label="expressionName\n b "]
1323302[label="literal\n 2 "]
1123303[label="literal\n 40 "]
923304[label="literal\n 0xFF0000000000L "]
623305[label="expressionStatement\n l|=((long)b[3]<<32)&0xFF00000000L; "]
723306[label="assignment\n l|=((long)b[3]<<32)&0xFF00000000L "]
823307[label="expressionName\n l "]
823308[label="assignmentOperator\n |= "]
823309[label="andExpression\n ((long)b[3]<<32)&0xFF00000000L "]
923310[label="primaryNoNewArray_lfno_primary\n ((long)b[3]<<32) "]
1023311[label="shiftExpression\n (long)b[3]<<32 "]
1123312[label="castExpression\n (long)b[3] "]
1223313[label="integralType\n long "]
1223314[label="arrayAccess_lfno_primary\n b[3] "]
1323315[label="expressionName\n b "]
1323316[label="literal\n 3 "]
1123317[label="literal\n 32 "]
923318[label="literal\n 0xFF00000000L "]
623319[label="expressionStatement\n l|=((long)b[4]<<24)&0xFF000000L; "]
723320[label="assignment\n l|=((long)b[4]<<24)&0xFF000000L "]
823321[label="expressionName\n l "]
823322[label="assignmentOperator\n |= "]
823323[label="andExpression\n ((long)b[4]<<24)&0xFF000000L "]
923324[label="primaryNoNewArray_lfno_primary\n ((long)b[4]<<24) "]
1023325[label="shiftExpression\n (long)b[4]<<24 "]
1123326[label="castExpression\n (long)b[4] "]
1223327[label="integralType\n long "]
1223328[label="arrayAccess_lfno_primary\n b[4] "]
1323329[label="expressionName\n b "]
1323330[label="literal\n 4 "]
1123331[label="literal\n 24 "]
923332[label="literal\n 0xFF000000L "]
623333[label="expressionStatement\n l|=((long)b[5]<<16)&0xFF0000L; "]
723334[label="assignment\n l|=((long)b[5]<<16)&0xFF0000L "]
823335[label="expressionName\n l "]
823336[label="assignmentOperator\n |= "]
823337[label="andExpression\n ((long)b[5]<<16)&0xFF0000L "]
923338[label="primaryNoNewArray_lfno_primary\n ((long)b[5]<<16) "]
1023339[label="shiftExpression\n (long)b[5]<<16 "]
1123340[label="castExpression\n (long)b[5] "]
1223341[label="integralType\n long "]
1223342[label="arrayAccess_lfno_primary\n b[5] "]
1323343[label="expressionName\n b "]
1323344[label="literal\n 5 "]
1123345[label="literal\n 16 "]
923346[label="literal\n 0xFF0000L "]
623347[label="expressionStatement\n l|=((long)b[6]<<8)&0xFF00L; "]
723348[label="assignment\n l|=((long)b[6]<<8)&0xFF00L "]
823349[label="expressionName\n l "]
823350[label="assignmentOperator\n |= "]
823351[label="andExpression\n ((long)b[6]<<8)&0xFF00L "]
923352[label="primaryNoNewArray_lfno_primary\n ((long)b[6]<<8) "]
1023353[label="shiftExpression\n (long)b[6]<<8 "]
1123354[label="castExpression\n (long)b[6] "]
1223355[label="integralType\n long "]
1223356[label="arrayAccess_lfno_primary\n b[6] "]
1323357[label="expressionName\n b "]
1323358[label="literal\n 6 "]
1123359[label="literal\n 8 "]
923360[label="literal\n 0xFF00L "]
623361[label="expressionStatement\n l|=(long)b[7]&0xFFL; "]
723362[label="assignment\n l|=(long)b[7]&0xFFL "]
823363[label="expressionName\n l "]
823364[label="assignmentOperator\n |= "]
823365[label="andExpression\n (long)b[7]&0xFFL "]
923366[label="castExpression\n (long)b[7] "]
1023367[label="integralType\n long "]
1023368[label="arrayAccess_lfno_primary\n b[7] "]
1123369[label="expressionName\n b "]
1123370[label="literal\n 7 "]
923371[label="literal\n 0xFFL "]
623372[label="returnStatement\n returnl; "]
723373[label="expressionName\n l "]
323374[label="methodDeclaration\n publicstaticbyte[]charToBytes(charc){byte[]b=newbyte[8];b[0]=(byte)(c>>>8);b[1]=(byte)c;returnb;} "]
423375[label="methodModifier\n public "]
423376[label="methodModifier\n static "]
423377[label="methodHeader\n byte[]charToBytes(charc) "]
523378[label="unannArrayType\n byte[] "]
623379[label="integralType\n byte "]
623380[label="dims\n [] "]
523381[label="methodDeclarator\n charToBytes(charc) "]
623382[label="formalParameter\n charc "]
723383[label="integralType\n char "]
723384[label="variableDeclaratorId\n c "]
423385[label="block\n {byte[]b=newbyte[8];b[0]=(byte)(c>>>8);b[1]=(byte)c;returnb;} "]
523386[label="blockStatements\n byte[]b=newbyte[8];b[0]=(byte)(c>>>8);b[1]=(byte)c;returnb; "]
623387[label="localVariableDeclarationStatement\n byte[]b=newbyte[8]; "]
723388[label="localVariableDeclaration\n byte[]b=newbyte[8] "]
823389[label="unannArrayType\n byte[] "]
923390[label="integralType\n byte "]
923391[label="dims\n [] "]
823392[label="variableDeclarator\n b=newbyte[8] "]
923393[label="variableDeclaratorId\n b "]
923394[label="arrayCreationExpression\n newbyte[8] "]
1023395[label="integralType\n byte "]
1023396[label="dimExpr\n [8] "]
1123397[label="literal\n 8 "]
623398[label="expressionStatement\n b[0]=(byte)(c>>>8); "]
723399[label="assignment\n b[0]=(byte)(c>>>8) "]
823400[label="arrayAccess\n b[0] "]
923401[label="expressionName\n b "]
923402[label="literal\n 0 "]
823403[label="assignmentOperator\n = "]
823404[label="castExpression\n (byte)(c>>>8) "]
923405[label="integralType\n byte "]
923406[label="primaryNoNewArray_lfno_primary\n (c>>>8) "]
1023407[label="shiftExpression\n c>>>8 "]
1123408[label="expressionName\n c "]
1123409[label="literal\n 8 "]
623410[label="expressionStatement\n b[1]=(byte)c; "]
723411[label="assignment\n b[1]=(byte)c "]
823412[label="arrayAccess\n b[1] "]
923413[label="expressionName\n b "]
923414[label="literal\n 1 "]
823415[label="assignmentOperator\n = "]
823416[label="castExpression\n (byte)c "]
923417[label="integralType\n byte "]
923418[label="expressionName\n c "]
623419[label="returnStatement\n returnb; "]
723420[label="expressionName\n b "]
323421[label="methodDeclaration\n publicstaticbyte[]doubleToBytes(doubled){returnlongToBytes(Double.doubleToLongBits(d));} "]
423422[label="methodModifier\n public "]
423423[label="methodModifier\n static "]
423424[label="methodHeader\n byte[]doubleToBytes(doubled) "]
523425[label="unannArrayType\n byte[] "]
623426[label="integralType\n byte "]
623427[label="dims\n [] "]
523428[label="methodDeclarator\n doubleToBytes(doubled) "]
623429[label="formalParameter\n doubled "]
723430[label="floatingPointType\n double "]
723431[label="variableDeclaratorId\n d "]
423432[label="block\n {returnlongToBytes(Double.doubleToLongBits(d));} "]
523433[label="returnStatement\n returnlongToBytes(Double.doubleToLongBits(d)); "]
623434[label="methodInvocation_lfno_primary\n longToBytes(Double.doubleToLongBits(d)) "]
723435[label="methodName\n longToBytes "]
723436[label="methodInvocation_lfno_primary\n Double.doubleToLongBits(d) "]
823437[label="typeName\n Double "]
823438[label="expressionName\n d "]
323439[label="methodDeclaration\n publicstaticbyte[]floatToBytes(floatf){returnintToBytes(Float.floatToIntBits(f));} "]
423440[label="methodModifier\n public "]
423441[label="methodModifier\n static "]
423442[label="methodHeader\n byte[]floatToBytes(floatf) "]
523443[label="unannArrayType\n byte[] "]
623444[label="integralType\n byte "]
623445[label="dims\n [] "]
523446[label="methodDeclarator\n floatToBytes(floatf) "]
623447[label="formalParameter\n floatf "]
723448[label="floatingPointType\n float "]
723449[label="variableDeclaratorId\n f "]
423450[label="block\n {returnintToBytes(Float.floatToIntBits(f));} "]
523451[label="returnStatement\n returnintToBytes(Float.floatToIntBits(f)); "]
623452[label="methodInvocation_lfno_primary\n intToBytes(Float.floatToIntBits(f)) "]
723453[label="methodName\n intToBytes "]
723454[label="methodInvocation_lfno_primary\n Float.floatToIntBits(f) "]
823455[label="typeName\n Float "]
823456[label="expressionName\n f "]
323457[label="methodDeclaration\n publicstaticbyte[]intToBytes(inti){byte[]b=newbyte[4];b[0]=(byte)(i>>>24);b[1]=(byte)(i>>>16);b[2]=(byte)(i>>>8);b[3]=(byte)i;returnb;} "]
423458[label="methodModifier\n public "]
423459[label="methodModifier\n static "]
423460[label="methodHeader\n byte[]intToBytes(inti) "]
523461[label="unannArrayType\n byte[] "]
623462[label="integralType\n byte "]
623463[label="dims\n [] "]
523464[label="methodDeclarator\n intToBytes(inti) "]
623465[label="formalParameter\n inti "]
723466[label="integralType\n int "]
723467[label="variableDeclaratorId\n i "]
423468[label="block\n {byte[]b=newbyte[4];b[0]=(byte)(i>>>24);b[1]=(byte)(i>>>16);b[2]=(byte)(i>>>8);b[3]=(byte)i;returnb;} "]
523469[label="blockStatements\n byte[]b=newbyte[4];b[0]=(byte)(i>>>24);b[1]=(byte)(i>>>16);b[2]=(byte)(i>>>8);b[3]=(byte)i;returnb; "]
623470[label="localVariableDeclarationStatement\n byte[]b=newbyte[4]; "]
723471[label="localVariableDeclaration\n byte[]b=newbyte[4] "]
823472[label="unannArrayType\n byte[] "]
923473[label="integralType\n byte "]
923474[label="dims\n [] "]
823475[label="variableDeclarator\n b=newbyte[4] "]
923476[label="variableDeclaratorId\n b "]
923477[label="arrayCreationExpression\n newbyte[4] "]
1023478[label="integralType\n byte "]
1023479[label="dimExpr\n [4] "]
1123480[label="literal\n 4 "]
623481[label="expressionStatement\n b[0]=(byte)(i>>>24); "]
723482[label="assignment\n b[0]=(byte)(i>>>24) "]
823483[label="arrayAccess\n b[0] "]
923484[label="expressionName\n b "]
923485[label="literal\n 0 "]
823486[label="assignmentOperator\n = "]
823487[label="castExpression\n (byte)(i>>>24) "]
923488[label="integralType\n byte "]
923489[label="primaryNoNewArray_lfno_primary\n (i>>>24) "]
1023490[label="shiftExpression\n i>>>24 "]
1123491[label="expressionName\n i "]
1123492[label="literal\n 24 "]
623493[label="expressionStatement\n b[1]=(byte)(i>>>16); "]
723494[label="assignment\n b[1]=(byte)(i>>>16) "]
823495[label="arrayAccess\n b[1] "]
923496[label="expressionName\n b "]
923497[label="literal\n 1 "]
823498[label="assignmentOperator\n = "]
823499[label="castExpression\n (byte)(i>>>16) "]
923500[label="integralType\n byte "]
923501[label="primaryNoNewArray_lfno_primary\n (i>>>16) "]
1023502[label="shiftExpression\n i>>>16 "]
1123503[label="expressionName\n i "]
1123504[label="literal\n 16 "]
623505[label="expressionStatement\n b[2]=(byte)(i>>>8); "]
723506[label="assignment\n b[2]=(byte)(i>>>8) "]
823507[label="arrayAccess\n b[2] "]
923508[label="expressionName\n b "]
923509[label="literal\n 2 "]
823510[label="assignmentOperator\n = "]
823511[label="castExpression\n (byte)(i>>>8) "]
923512[label="integralType\n byte "]
923513[label="primaryNoNewArray_lfno_primary\n (i>>>8) "]
1023514[label="shiftExpression\n i>>>8 "]
1123515[label="expressionName\n i "]
1123516[label="literal\n 8 "]
623517[label="expressionStatement\n b[3]=(byte)i; "]
723518[label="assignment\n b[3]=(byte)i "]
823519[label="arrayAccess\n b[3] "]
923520[label="expressionName\n b "]
923521[label="literal\n 3 "]
823522[label="assignmentOperator\n = "]
823523[label="castExpression\n (byte)i "]
923524[label="integralType\n byte "]
923525[label="expressionName\n i "]
623526[label="returnStatement\n returnb; "]
723527[label="expressionName\n b "]
323528[label="methodDeclaration\n publicstaticbyte[]longToBytes(longl){byte[]b=newbyte[8];b[0]=(byte)(l>>>56);b[1]=(byte)(l>>>48);b[2]=(byte)(l>>>40);b[3]=(byte)(l>>>32);b[4]=(byte)(l>>>24);b[5]=(byte)(l>>>16);b[6]=(byte)(l>>>8);b[7]=(byte)(l);returnb;} "]
423529[label="methodModifier\n public "]
423530[label="methodModifier\n static "]
423531[label="methodHeader\n byte[]longToBytes(longl) "]
523532[label="unannArrayType\n byte[] "]
623533[label="integralType\n byte "]
623534[label="dims\n [] "]
523535[label="methodDeclarator\n longToBytes(longl) "]
623536[label="formalParameter\n longl "]
723537[label="integralType\n long "]
723538[label="variableDeclaratorId\n l "]
423539[label="block\n {byte[]b=newbyte[8];b[0]=(byte)(l>>>56);b[1]=(byte)(l>>>48);b[2]=(byte)(l>>>40);b[3]=(byte)(l>>>32);b[4]=(byte)(l>>>24);b[5]=(byte)(l>>>16);b[6]=(byte)(l>>>8);b[7]=(byte)(l);returnb;} "]
523540[label="blockStatements\n byte[]b=newbyte[8];b[0]=(byte)(l>>>56);b[1]=(byte)(l>>>48);b[2]=(byte)(l>>>40);b[3]=(byte)(l>>>32);b[4]=(byte)(l>>>24);b[5]=(byte)(l>>>16);b[6]=(byte)(l>>>8);b[7]=(byte)(l);returnb; "]
623541[label="localVariableDeclarationStatement\n byte[]b=newbyte[8]; "]
723542[label="localVariableDeclaration\n byte[]b=newbyte[8] "]
823543[label="unannArrayType\n byte[] "]
923544[label="integralType\n byte "]
923545[label="dims\n [] "]
823546[label="variableDeclarator\n b=newbyte[8] "]
923547[label="variableDeclaratorId\n b "]
923548[label="arrayCreationExpression\n newbyte[8] "]
1023549[label="integralType\n byte "]
1023550[label="dimExpr\n [8] "]
1123551[label="literal\n 8 "]
623552[label="expressionStatement\n b[0]=(byte)(l>>>56); "]
723553[label="assignment\n b[0]=(byte)(l>>>56) "]
823554[label="arrayAccess\n b[0] "]
923555[label="expressionName\n b "]
923556[label="literal\n 0 "]
823557[label="assignmentOperator\n = "]
823558[label="castExpression\n (byte)(l>>>56) "]
923559[label="integralType\n byte "]
923560[label="primaryNoNewArray_lfno_primary\n (l>>>56) "]
1023561[label="shiftExpression\n l>>>56 "]
1123562[label="expressionName\n l "]
1123563[label="literal\n 56 "]
623564[label="expressionStatement\n b[1]=(byte)(l>>>48); "]
723565[label="assignment\n b[1]=(byte)(l>>>48) "]
823566[label="arrayAccess\n b[1] "]
923567[label="expressionName\n b "]
923568[label="literal\n 1 "]
823569[label="assignmentOperator\n = "]
823570[label="castExpression\n (byte)(l>>>48) "]
923571[label="integralType\n byte "]
923572[label="primaryNoNewArray_lfno_primary\n (l>>>48) "]
1023573[label="shiftExpression\n l>>>48 "]
1123574[label="expressionName\n l "]
1123575[label="literal\n 48 "]
623576[label="expressionStatement\n b[2]=(byte)(l>>>40); "]
723577[label="assignment\n b[2]=(byte)(l>>>40) "]
823578[label="arrayAccess\n b[2] "]
923579[label="expressionName\n b "]
923580[label="literal\n 2 "]
823581[label="assignmentOperator\n = "]
823582[label="castExpression\n (byte)(l>>>40) "]
923583[label="integralType\n byte "]
923584[label="primaryNoNewArray_lfno_primary\n (l>>>40) "]
1023585[label="shiftExpression\n l>>>40 "]
1123586[label="expressionName\n l "]
1123587[label="literal\n 40 "]
623588[label="expressionStatement\n b[3]=(byte)(l>>>32); "]
723589[label="assignment\n b[3]=(byte)(l>>>32) "]
823590[label="arrayAccess\n b[3] "]
923591[label="expressionName\n b "]
923592[label="literal\n 3 "]
823593[label="assignmentOperator\n = "]
823594[label="castExpression\n (byte)(l>>>32) "]
923595[label="integralType\n byte "]
923596[label="primaryNoNewArray_lfno_primary\n (l>>>32) "]
1023597[label="shiftExpression\n l>>>32 "]
1123598[label="expressionName\n l "]
1123599[label="literal\n 32 "]
623600[label="expressionStatement\n b[4]=(byte)(l>>>24); "]
723601[label="assignment\n b[4]=(byte)(l>>>24) "]
823602[label="arrayAccess\n b[4] "]
923603[label="expressionName\n b "]
923604[label="literal\n 4 "]
823605[label="assignmentOperator\n = "]
823606[label="castExpression\n (byte)(l>>>24) "]
923607[label="integralType\n byte "]
923608[label="primaryNoNewArray_lfno_primary\n (l>>>24) "]
1023609[label="shiftExpression\n l>>>24 "]
1123610[label="expressionName\n l "]
1123611[label="literal\n 24 "]
623612[label="expressionStatement\n b[5]=(byte)(l>>>16); "]
723613[label="assignment\n b[5]=(byte)(l>>>16) "]
823614[label="arrayAccess\n b[5] "]
923615[label="expressionName\n b "]
923616[label="literal\n 5 "]
823617[label="assignmentOperator\n = "]
823618[label="castExpression\n (byte)(l>>>16) "]
923619[label="integralType\n byte "]
923620[label="primaryNoNewArray_lfno_primary\n (l>>>16) "]
1023621[label="shiftExpression\n l>>>16 "]
1123622[label="expressionName\n l "]
1123623[label="literal\n 16 "]
623624[label="expressionStatement\n b[6]=(byte)(l>>>8); "]
723625[label="assignment\n b[6]=(byte)(l>>>8) "]
823626[label="arrayAccess\n b[6] "]
923627[label="expressionName\n b "]
923628[label="literal\n 6 "]
823629[label="assignmentOperator\n = "]
823630[label="castExpression\n (byte)(l>>>8) "]
923631[label="integralType\n byte "]
923632[label="primaryNoNewArray_lfno_primary\n (l>>>8) "]
1023633[label="shiftExpression\n l>>>8 "]
1123634[label="expressionName\n l "]
1123635[label="literal\n 8 "]
623636[label="expressionStatement\n b[7]=(byte)(l); "]
723637[label="assignment\n b[7]=(byte)(l) "]
823638[label="arrayAccess\n b[7] "]
923639[label="expressionName\n b "]
923640[label="literal\n 7 "]
823641[label="assignmentOperator\n = "]
823642[label="castExpression\n (byte)(l) "]
923643[label="integralType\n byte "]
923644[label="primaryNoNewArray_lfno_primary\n (l) "]
1023645[label="expressionName\n l "]
623646[label="returnStatement\n returnb; "]
723647[label="expressionName\n b "]
323648[label="methodDeclaration\n publicstaticintbytesToInt(byte[]bytes,intstart){intnum=bytes[start]&0xFF;num|=((bytes[start+1]<<8)&0xFF00);num|=((bytes[start+2]<<16)&0xFF0000);num|=((bytes[start+3]<<24)&0xFF000000);returnnum;} "]
423649[label="methodModifier\n public "]
423650[label="methodModifier\n static "]
423651[label="methodHeader\n intbytesToInt(byte[]bytes,intstart) "]
523652[label="integralType\n int "]
523653[label="methodDeclarator\n bytesToInt(byte[]bytes,intstart) "]
623654[label="formalParameterList\n byte[]bytes,intstart "]
723655[label="formalParameter\n byte[]bytes "]
823656[label="unannArrayType\n byte[] "]
923657[label="integralType\n byte "]
923658[label="dims\n [] "]
823659[label="variableDeclaratorId\n bytes "]
723660[label="formalParameter\n intstart "]
823661[label="integralType\n int "]
823662[label="variableDeclaratorId\n start "]
423663[label="block\n {intnum=bytes[start]&0xFF;num|=((bytes[start+1]<<8)&0xFF00);num|=((bytes[start+2]<<16)&0xFF0000);num|=((bytes[start+3]<<24)&0xFF000000);returnnum;} "]
523664[label="blockStatements\n intnum=bytes[start]&0xFF;num|=((bytes[start+1]<<8)&0xFF00);num|=((bytes[start+2]<<16)&0xFF0000);num|=((bytes[start+3]<<24)&0xFF000000);returnnum; "]
623665[label="localVariableDeclarationStatement\n intnum=bytes[start]&0xFF; "]
723666[label="localVariableDeclaration\n intnum=bytes[start]&0xFF "]
823667[label="integralType\n int "]
823668[label="variableDeclarator\n num=bytes[start]&0xFF "]
923669[label="variableDeclaratorId\n num "]
923670[label="andExpression\n bytes[start]&0xFF "]
1023671[label="arrayAccess_lfno_primary\n bytes[start] "]
1123672[label="expressionName\n bytes "]
1123673[label="expressionName\n start "]
1023674[label="literal\n 0xFF "]
623675[label="expressionStatement\n num|=((bytes[start+1]<<8)&0xFF00); "]
723676[label="assignment\n num|=((bytes[start+1]<<8)&0xFF00) "]
823677[label="expressionName\n num "]
823678[label="assignmentOperator\n |= "]
823679[label="primaryNoNewArray_lfno_primary\n ((bytes[start+1]<<8)&0xFF00) "]
923680[label="andExpression\n (bytes[start+1]<<8)&0xFF00 "]
1023681[label="primaryNoNewArray_lfno_primary\n (bytes[start+1]<<8) "]
1123682[label="shiftExpression\n bytes[start+1]<<8 "]
1223683[label="arrayAccess_lfno_primary\n bytes[start+1] "]
1323684[label="expressionName\n bytes "]
1323685[label="additiveExpression\n start+1 "]
1423686[label="expressionName\n start "]
1423687[label="literal\n 1 "]
1223688[label="literal\n 8 "]
1023689[label="literal\n 0xFF00 "]
623690[label="expressionStatement\n num|=((bytes[start+2]<<16)&0xFF0000); "]
723691[label="assignment\n num|=((bytes[start+2]<<16)&0xFF0000) "]
823692[label="expressionName\n num "]
823693[label="assignmentOperator\n |= "]
823694[label="primaryNoNewArray_lfno_primary\n ((bytes[start+2]<<16)&0xFF0000) "]
923695[label="andExpression\n (bytes[start+2]<<16)&0xFF0000 "]
1023696[label="primaryNoNewArray_lfno_primary\n (bytes[start+2]<<16) "]
1123697[label="shiftExpression\n bytes[start+2]<<16 "]
1223698[label="arrayAccess_lfno_primary\n bytes[start+2] "]
1323699[label="expressionName\n bytes "]
1323700[label="additiveExpression\n start+2 "]
1423701[label="expressionName\n start "]
1423702[label="literal\n 2 "]
1223703[label="literal\n 16 "]
1023704[label="literal\n 0xFF0000 "]
623705[label="expressionStatement\n num|=((bytes[start+3]<<24)&0xFF000000); "]
723706[label="assignment\n num|=((bytes[start+3]<<24)&0xFF000000) "]
823707[label="expressionName\n num "]
823708[label="assignmentOperator\n |= "]
823709[label="primaryNoNewArray_lfno_primary\n ((bytes[start+3]<<24)&0xFF000000) "]
923710[label="andExpression\n (bytes[start+3]<<24)&0xFF000000 "]
1023711[label="primaryNoNewArray_lfno_primary\n (bytes[start+3]<<24) "]
1123712[label="shiftExpression\n bytes[start+3]<<24 "]
1223713[label="arrayAccess_lfno_primary\n bytes[start+3] "]
1323714[label="expressionName\n bytes "]
1323715[label="additiveExpression\n start+3 "]
1423716[label="expressionName\n start "]
1423717[label="literal\n 3 "]
1223718[label="literal\n 24 "]
1023719[label="literal\n 0xFF000000 "]
623720[label="returnStatement\n returnnum; "]
723721[label="expressionName\n num "]
323722[label="methodDeclaration\n publicstaticintbytesHighFirstToInt(byte[]bytes,intstart){intnum=bytes[start+3]&0xFF;num|=((bytes[start+2]<<8)&0xFF00);num|=((bytes[start+1]<<16)&0xFF0000);num|=((bytes[start]<<24)&0xFF000000);returnnum;} "]
423723[label="methodModifier\n public "]
423724[label="methodModifier\n static "]
423725[label="methodHeader\n intbytesHighFirstToInt(byte[]bytes,intstart) "]
523726[label="integralType\n int "]
523727[label="methodDeclarator\n bytesHighFirstToInt(byte[]bytes,intstart) "]
623728[label="formalParameterList\n byte[]bytes,intstart "]
723729[label="formalParameter\n byte[]bytes "]
823730[label="unannArrayType\n byte[] "]
923731[label="integralType\n byte "]
923732[label="dims\n [] "]
823733[label="variableDeclaratorId\n bytes "]
723734[label="formalParameter\n intstart "]
823735[label="integralType\n int "]
823736[label="variableDeclaratorId\n start "]
423737[label="block\n {intnum=bytes[start+3]&0xFF;num|=((bytes[start+2]<<8)&0xFF00);num|=((bytes[start+1]<<16)&0xFF0000);num|=((bytes[start]<<24)&0xFF000000);returnnum;} "]
523738[label="blockStatements\n intnum=bytes[start+3]&0xFF;num|=((bytes[start+2]<<8)&0xFF00);num|=((bytes[start+1]<<16)&0xFF0000);num|=((bytes[start]<<24)&0xFF000000);returnnum; "]
623739[label="localVariableDeclarationStatement\n intnum=bytes[start+3]&0xFF; "]
723740[label="localVariableDeclaration\n intnum=bytes[start+3]&0xFF "]
823741[label="integralType\n int "]
823742[label="variableDeclarator\n num=bytes[start+3]&0xFF "]
923743[label="variableDeclaratorId\n num "]
923744[label="andExpression\n bytes[start+3]&0xFF "]
1023745[label="arrayAccess_lfno_primary\n bytes[start+3] "]
1123746[label="expressionName\n bytes "]
1123747[label="additiveExpression\n start+3 "]
1223748[label="expressionName\n start "]
1223749[label="literal\n 3 "]
1023750[label="literal\n 0xFF "]
623751[label="expressionStatement\n num|=((bytes[start+2]<<8)&0xFF00); "]
723752[label="assignment\n num|=((bytes[start+2]<<8)&0xFF00) "]
823753[label="expressionName\n num "]
823754[label="assignmentOperator\n |= "]
823755[label="primaryNoNewArray_lfno_primary\n ((bytes[start+2]<<8)&0xFF00) "]
923756[label="andExpression\n (bytes[start+2]<<8)&0xFF00 "]
1023757[label="primaryNoNewArray_lfno_primary\n (bytes[start+2]<<8) "]
1123758[label="shiftExpression\n bytes[start+2]<<8 "]
1223759[label="arrayAccess_lfno_primary\n bytes[start+2] "]
1323760[label="expressionName\n bytes "]
1323761[label="additiveExpression\n start+2 "]
1423762[label="expressionName\n start "]
1423763[label="literal\n 2 "]
1223764[label="literal\n 8 "]
1023765[label="literal\n 0xFF00 "]
623766[label="expressionStatement\n num|=((bytes[start+1]<<16)&0xFF0000); "]
723767[label="assignment\n num|=((bytes[start+1]<<16)&0xFF0000) "]
823768[label="expressionName\n num "]
823769[label="assignmentOperator\n |= "]
823770[label="primaryNoNewArray_lfno_primary\n ((bytes[start+1]<<16)&0xFF0000) "]
923771[label="andExpression\n (bytes[start+1]<<16)&0xFF0000 "]
1023772[label="primaryNoNewArray_lfno_primary\n (bytes[start+1]<<16) "]
1123773[label="shiftExpression\n bytes[start+1]<<16 "]
1223774[label="arrayAccess_lfno_primary\n bytes[start+1] "]
1323775[label="expressionName\n bytes "]
1323776[label="additiveExpression\n start+1 "]
1423777[label="expressionName\n start "]
1423778[label="literal\n 1 "]
1223779[label="literal\n 16 "]
1023780[label="literal\n 0xFF0000 "]
623781[label="expressionStatement\n num|=((bytes[start]<<24)&0xFF000000); "]
723782[label="assignment\n num|=((bytes[start]<<24)&0xFF000000) "]
823783[label="expressionName\n num "]
823784[label="assignmentOperator\n |= "]
823785[label="primaryNoNewArray_lfno_primary\n ((bytes[start]<<24)&0xFF000000) "]
923786[label="andExpression\n (bytes[start]<<24)&0xFF000000 "]
1023787[label="primaryNoNewArray_lfno_primary\n (bytes[start]<<24) "]
1123788[label="shiftExpression\n bytes[start]<<24 "]
1223789[label="arrayAccess_lfno_primary\n bytes[start] "]
1323790[label="expressionName\n bytes "]
1323791[label="expressionName\n start "]
1223792[label="literal\n 24 "]
1023793[label="literal\n 0xFF000000 "]
623794[label="returnStatement\n returnnum; "]
723795[label="expressionName\n num "]
323796[label="methodDeclaration\n publicstaticcharbytesHighFirstToChar(byte[]bytes,intstart){charc=(char)(((bytes[start]&0xFF)<<8)|(bytes[start+1]&0xFF));returnc;} "]
423797[label="methodModifier\n public "]
423798[label="methodModifier\n static "]
423799[label="methodHeader\n charbytesHighFirstToChar(byte[]bytes,intstart) "]
523800[label="integralType\n char "]
523801[label="methodDeclarator\n bytesHighFirstToChar(byte[]bytes,intstart) "]
623802[label="formalParameterList\n byte[]bytes,intstart "]
723803[label="formalParameter\n byte[]bytes "]
823804[label="unannArrayType\n byte[] "]
923805[label="integralType\n byte "]
923806[label="dims\n [] "]
823807[label="variableDeclaratorId\n bytes "]
723808[label="formalParameter\n intstart "]
823809[label="integralType\n int "]
823810[label="variableDeclaratorId\n start "]
423811[label="block\n {charc=(char)(((bytes[start]&0xFF)<<8)|(bytes[start+1]&0xFF));returnc;} "]
523812[label="blockStatements\n charc=(char)(((bytes[start]&0xFF)<<8)|(bytes[start+1]&0xFF));returnc; "]
623813[label="localVariableDeclarationStatement\n charc=(char)(((bytes[start]&0xFF)<<8)|(bytes[start+1]&0xFF)); "]
723814[label="localVariableDeclaration\n charc=(char)(((bytes[start]&0xFF)<<8)|(bytes[start+1]&0xFF)) "]
823815[label="integralType\n char "]
823816[label="variableDeclarator\n c=(char)(((bytes[start]&0xFF)<<8)|(bytes[start+1]&0xFF)) "]
923817[label="variableDeclaratorId\n c "]
923818[label="castExpression\n (char)(((bytes[start]&0xFF)<<8)|(bytes[start+1]&0xFF)) "]
1023819[label="integralType\n char "]
1023820[label="primaryNoNewArray_lfno_primary\n (((bytes[start]&0xFF)<<8)|(bytes[start+1]&0xFF)) "]
1123821[label="inclusiveOrExpression\n ((bytes[start]&0xFF)<<8)|(bytes[start+1]&0xFF) "]
1223822[label="primaryNoNewArray_lfno_primary\n ((bytes[start]&0xFF)<<8) "]
1323823[label="shiftExpression\n (bytes[start]&0xFF)<<8 "]
1423824[label="primaryNoNewArray_lfno_primary\n (bytes[start]&0xFF) "]
1523825[label="andExpression\n bytes[start]&0xFF "]
1623826[label="arrayAccess_lfno_primary\n bytes[start] "]
1723827[label="expressionName\n bytes "]
1723828[label="expressionName\n start "]
1623829[label="literal\n 0xFF "]
1423830[label="literal\n 8 "]
1223831[label="primaryNoNewArray_lfno_primary\n (bytes[start+1]&0xFF) "]
1323832[label="andExpression\n bytes[start+1]&0xFF "]
1423833[label="arrayAccess_lfno_primary\n bytes[start+1] "]
1523834[label="expressionName\n bytes "]
1523835[label="additiveExpression\n start+1 "]
1623836[label="expressionName\n start "]
1623837[label="literal\n 1 "]
1423838[label="literal\n 0xFF "]
623839[label="returnStatement\n returnc; "]
723840[label="expressionName\n c "]
323841[label="methodDeclaration\n publicstaticfloatbytesHighFirstToFloat(byte[]bytes,intstart){intl=bytesHighFirstToInt(bytes,start);returnFloat.intBitsToFloat(l);} "]
423842[label="methodModifier\n public "]
423843[label="methodModifier\n static "]
423844[label="methodHeader\n floatbytesHighFirstToFloat(byte[]bytes,intstart) "]
523845[label="floatingPointType\n float "]
523846[label="methodDeclarator\n bytesHighFirstToFloat(byte[]bytes,intstart) "]
623847[label="formalParameterList\n byte[]bytes,intstart "]
723848[label="formalParameter\n byte[]bytes "]
823849[label="unannArrayType\n byte[] "]
923850[label="integralType\n byte "]
923851[label="dims\n [] "]
823852[label="variableDeclaratorId\n bytes "]
723853[label="formalParameter\n intstart "]
823854[label="integralType\n int "]
823855[label="variableDeclaratorId\n start "]
423856[label="block\n {intl=bytesHighFirstToInt(bytes,start);returnFloat.intBitsToFloat(l);} "]
523857[label="blockStatements\n intl=bytesHighFirstToInt(bytes,start);returnFloat.intBitsToFloat(l); "]
623858[label="localVariableDeclarationStatement\n intl=bytesHighFirstToInt(bytes,start); "]
723859[label="localVariableDeclaration\n intl=bytesHighFirstToInt(bytes,start) "]
823860[label="integralType\n int "]
823861[label="variableDeclarator\n l=bytesHighFirstToInt(bytes,start) "]
923862[label="variableDeclaratorId\n l "]
923863[label="methodInvocation_lfno_primary\n bytesHighFirstToInt(bytes,start) "]
1023864[label="methodName\n bytesHighFirstToInt "]
1023865[label="argumentList\n bytes,start "]
1123866[label="expressionName\n bytes "]
1123867[label="expressionName\n start "]
623868[label="returnStatement\n returnFloat.intBitsToFloat(l); "]
723869[label="methodInvocation_lfno_primary\n Float.intBitsToFloat(l) "]
823870[label="typeName\n Float "]
823871[label="expressionName\n l "]
323872[label="methodDeclaration\n publicstaticvoidwriteUnsignedInt(DataOutputStreamout,intuint)throwsIOException{out.writeByte((byte)((uint>>>8)&0xFF));out.writeByte((byte)((uint>>>0)&0xFF));} "]
423873[label="methodModifier\n public "]
423874[label="methodModifier\n static "]
423875[label="methodHeader\n voidwriteUnsignedInt(DataOutputStreamout,intuint)throwsIOException "]
523876[label="result\n void "]
523877[label="methodDeclarator\n writeUnsignedInt(DataOutputStreamout,intuint) "]
623878[label="formalParameterList\n DataOutputStreamout,intuint "]
723879[label="formalParameter\n DataOutputStreamout "]
823880[label="unannClassType_lfno_unannClassOrInterfaceType\n DataOutputStream "]
823881[label="variableDeclaratorId\n out "]
723882[label="formalParameter\n intuint "]
823883[label="integralType\n int "]
823884[label="variableDeclaratorId\n uint "]
523885[label="throws_\n throwsIOException "]
623886[label="classType\n IOException "]
423887[label="block\n {out.writeByte((byte)((uint>>>8)&0xFF));out.writeByte((byte)((uint>>>0)&0xFF));} "]
523888[label="blockStatements\n out.writeByte((byte)((uint>>>8)&0xFF));out.writeByte((byte)((uint>>>0)&0xFF)); "]
623889[label="expressionStatement\n out.writeByte((byte)((uint>>>8)&0xFF)); "]
723890[label="methodInvocation\n out.writeByte((byte)((uint>>>8)&0xFF)) "]
823891[label="typeName\n out "]
823892[label="castExpression\n (byte)((uint>>>8)&0xFF) "]
923893[label="integralType\n byte "]
923894[label="primaryNoNewArray_lfno_primary\n ((uint>>>8)&0xFF) "]
1023895[label="andExpression\n (uint>>>8)&0xFF "]
1123896[label="primaryNoNewArray_lfno_primary\n (uint>>>8) "]
1223897[label="shiftExpression\n uint>>>8 "]
1323898[label="expressionName\n uint "]
1323899[label="literal\n 8 "]
1123900[label="literal\n 0xFF "]
623901[label="expressionStatement\n out.writeByte((byte)((uint>>>0)&0xFF)); "]
723902[label="methodInvocation\n out.writeByte((byte)((uint>>>0)&0xFF)) "]
823903[label="typeName\n out "]
823904[label="castExpression\n (byte)((uint>>>0)&0xFF) "]
923905[label="integralType\n byte "]
923906[label="primaryNoNewArray_lfno_primary\n ((uint>>>0)&0xFF) "]
1023907[label="andExpression\n (uint>>>0)&0xFF "]
1123908[label="primaryNoNewArray_lfno_primary\n (uint>>>0) "]
1223909[label="shiftExpression\n uint>>>0 "]
1323910[label="expressionName\n uint "]
1323911[label="literal\n 0 "]
1123912[label="literal\n 0xFF "]
323913[label="methodDeclaration\n publicstaticintconvertTwoCharToInt(charhigh,charlow){intresult=high<<16;result|=low;returnresult;} "]
423914[label="methodModifier\n public "]
423915[label="methodModifier\n static "]
423916[label="methodHeader\n intconvertTwoCharToInt(charhigh,charlow) "]
523917[label="integralType\n int "]
523918[label="methodDeclarator\n convertTwoCharToInt(charhigh,charlow) "]
623919[label="formalParameterList\n charhigh,charlow "]
723920[label="formalParameter\n charhigh "]
823921[label="integralType\n char "]
823922[label="variableDeclaratorId\n high "]
723923[label="formalParameter\n charlow "]
823924[label="integralType\n char "]
823925[label="variableDeclaratorId\n low "]
423926[label="block\n {intresult=high<<16;result|=low;returnresult;} "]
523927[label="blockStatements\n intresult=high<<16;result|=low;returnresult; "]
623928[label="localVariableDeclarationStatement\n intresult=high<<16; "]
723929[label="localVariableDeclaration\n intresult=high<<16 "]
823930[label="integralType\n int "]
823931[label="variableDeclarator\n result=high<<16 "]
923932[label="variableDeclaratorId\n result "]
923933[label="shiftExpression\n high<<16 "]
1023934[label="expressionName\n high "]
1023935[label="literal\n 16 "]
623936[label="expressionStatement\n result|=low; "]
723937[label="assignment\n result|=low "]
823938[label="expressionName\n result "]
823939[label="assignmentOperator\n |= "]
823940[label="expressionName\n low "]
623941[label="returnStatement\n returnresult; "]
723942[label="expressionName\n result "]
323943[label="methodDeclaration\n publicstaticchar[]convertIntToTwoChar(intn){char[]result=newchar[2];result[0]=(char)(n>>>16);result[1]=(char)(0x0000FFFF&n);returnresult;} "]
423944[label="methodModifier\n public "]
423945[label="methodModifier\n static "]
423946[label="methodHeader\n char[]convertIntToTwoChar(intn) "]
523947[label="unannArrayType\n char[] "]
623948[label="integralType\n char "]
623949[label="dims\n [] "]
523950[label="methodDeclarator\n convertIntToTwoChar(intn) "]
623951[label="formalParameter\n intn "]
723952[label="integralType\n int "]
723953[label="variableDeclaratorId\n n "]
423954[label="block\n {char[]result=newchar[2];result[0]=(char)(n>>>16);result[1]=(char)(0x0000FFFF&n);returnresult;} "]
523955[label="blockStatements\n char[]result=newchar[2];result[0]=(char)(n>>>16);result[1]=(char)(0x0000FFFF&n);returnresult; "]
623956[label="localVariableDeclarationStatement\n char[]result=newchar[2]; "]
723957[label="localVariableDeclaration\n char[]result=newchar[2] "]
823958[label="unannArrayType\n char[] "]
923959[label="integralType\n char "]
923960[label="dims\n [] "]
823961[label="variableDeclarator\n result=newchar[2] "]
923962[label="variableDeclaratorId\n result "]
923963[label="arrayCreationExpression\n newchar[2] "]
1023964[label="integralType\n char "]
1023965[label="dimExpr\n [2] "]
1123966[label="literal\n 2 "]
623967[label="expressionStatement\n result[0]=(char)(n>>>16); "]
723968[label="assignment\n result[0]=(char)(n>>>16) "]
823969[label="arrayAccess\n result[0] "]
923970[label="expressionName\n result "]
923971[label="literal\n 0 "]
823972[label="assignmentOperator\n = "]
823973[label="castExpression\n (char)(n>>>16) "]
923974[label="integralType\n char "]
923975[label="primaryNoNewArray_lfno_primary\n (n>>>16) "]
1023976[label="shiftExpression\n n>>>16 "]
1123977[label="expressionName\n n "]
1123978[label="literal\n 16 "]
623979[label="expressionStatement\n result[1]=(char)(0x0000FFFF&n); "]
723980[label="assignment\n result[1]=(char)(0x0000FFFF&n) "]
823981[label="arrayAccess\n result[1] "]
923982[label="expressionName\n result "]
923983[label="literal\n 1 "]
823984[label="assignmentOperator\n = "]
823985[label="castExpression\n (char)(0x0000FFFF&n) "]
923986[label="integralType\n char "]
923987[label="primaryNoNewArray_lfno_primary\n (0x0000FFFF&n) "]
1023988[label="andExpression\n 0x0000FFFF&n "]
1123989[label="literal\n 0x0000FFFF "]
1123990[label="expressionName\n n "]
623991[label="returnStatement\n returnresult; "]
723992[label="expressionName\n result "]
023993[label="compilationUnit\n packagecom.hankcs.test.algorithm;importcom.hankcs.hanlp.corpus.io.ByteArray;importcom.hankcs.hanlp.utility.ByteUtil;importjunit.framework.TestCase;importjava.io.DataOutputStream;importjava.io.FileOutputStream;publicclassByteUtilTestextendsTestCase{publicstaticfinalStringDATA_TEST_OUT_BIN=\"data/test/out.bin\";publicvoidtestReadDouble()throwsException{DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN));out.writeDouble(0.123456789);out.writeInt(3389);ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN);System.out.println(byteArray.nextDouble());System.out.println(byteArray.nextInt());}publicvoidtestReadUTF()throwsException{DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN));out.writeUTF(\"hankcs你好123\");ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN);System.out.println(byteArray.nextUTF());}publicvoidtestReadUnsignedShort()throwsException{DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN));intutflen=123;out.writeByte((byte)((utflen>>>8)&0xFF));out.writeByte((byte)((utflen>>>0)&0xFF));ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN);System.out.println(byteArray.nextUnsignedShort());}publicvoidtestConvertCharToInt()throwsException{for(inti=0;i<Integer.MAX_VALUE;++i){intn=i;char[]twoChar=ByteUtil.convertIntToTwoChar(n);assertEquals(n,ByteUtil.convertTwoCharToInt(twoChar[0],twoChar[1]));}}}<EOF> "]
123994[label="packageDeclaration\n packagecom.hankcs.test.algorithm; "]
223995[label="packageName\n com.hankcs.test.algorithm "]
323996[label="packageName\n com.hankcs.test "]
423997[label="packageName\n com.hankcs "]
523998[label="packageName\n com "]
123999[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.ByteArray; "]
224000[label="typeName\n com.hankcs.hanlp.corpus.io.ByteArray "]
324001[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
424002[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
524003[label="packageOrTypeName\n com.hankcs.hanlp "]
624004[label="packageOrTypeName\n com.hankcs "]
724005[label="packageOrTypeName\n com "]
124006[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.ByteUtil; "]
224007[label="typeName\n com.hankcs.hanlp.utility.ByteUtil "]
324008[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
424009[label="packageOrTypeName\n com.hankcs.hanlp "]
524010[label="packageOrTypeName\n com.hankcs "]
624011[label="packageOrTypeName\n com "]
124012[label="singleTypeImportDeclaration\n importjunit.framework.TestCase; "]
224013[label="typeName\n junit.framework.TestCase "]
324014[label="packageOrTypeName\n junit.framework "]
424015[label="packageOrTypeName\n junit "]
124016[label="singleTypeImportDeclaration\n importjava.io.DataOutputStream; "]
224017[label="typeName\n java.io.DataOutputStream "]
324018[label="packageOrTypeName\n java.io "]
424019[label="packageOrTypeName\n java "]
124020[label="singleTypeImportDeclaration\n importjava.io.FileOutputStream; "]
224021[label="typeName\n java.io.FileOutputStream "]
324022[label="packageOrTypeName\n java.io "]
424023[label="packageOrTypeName\n java "]
124024[label="normalClassDeclaration\n publicclassByteUtilTestextendsTestCase{publicstaticfinalStringDATA_TEST_OUT_BIN=\"data/test/out.bin\";publicvoidtestReadDouble()throwsException{DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN));out.writeDouble(0.123456789);out.writeInt(3389);ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN);System.out.println(byteArray.nextDouble());System.out.println(byteArray.nextInt());}publicvoidtestReadUTF()throwsException{DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN));out.writeUTF(\"hankcs你好123\");ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN);System.out.println(byteArray.nextUTF());}publicvoidtestReadUnsignedShort()throwsException{DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN));intutflen=123;out.writeByte((byte)((utflen>>>8)&0xFF));out.writeByte((byte)((utflen>>>0)&0xFF));ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN);System.out.println(byteArray.nextUnsignedShort());}publicvoidtestConvertCharToInt()throwsException{for(inti=0;i<Integer.MAX_VALUE;++i){intn=i;char[]twoChar=ByteUtil.convertIntToTwoChar(n);assertEquals(n,ByteUtil.convertTwoCharToInt(twoChar[0],twoChar[1]));}}} "]
224025[label="classModifier\n public "]
224026[label="superclass\n extendsTestCase "]
324027[label="classType\n TestCase "]
224028[label="classBody\n {publicstaticfinalStringDATA_TEST_OUT_BIN=\"data/test/out.bin\";publicvoidtestReadDouble()throwsException{DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN));out.writeDouble(0.123456789);out.writeInt(3389);ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN);System.out.println(byteArray.nextDouble());System.out.println(byteArray.nextInt());}publicvoidtestReadUTF()throwsException{DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN));out.writeUTF(\"hankcs你好123\");ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN);System.out.println(byteArray.nextUTF());}publicvoidtestReadUnsignedShort()throwsException{DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN));intutflen=123;out.writeByte((byte)((utflen>>>8)&0xFF));out.writeByte((byte)((utflen>>>0)&0xFF));ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN);System.out.println(byteArray.nextUnsignedShort());}publicvoidtestConvertCharToInt()throwsException{for(inti=0;i<Integer.MAX_VALUE;++i){intn=i;char[]twoChar=ByteUtil.convertIntToTwoChar(n);assertEquals(n,ByteUtil.convertTwoCharToInt(twoChar[0],twoChar[1]));}}} "]
324029[label="fieldDeclaration\n publicstaticfinalStringDATA_TEST_OUT_BIN=\"data/test/out.bin\"; "]
424030[label="fieldModifier\n public "]
424031[label="fieldModifier\n static "]
424032[label="fieldModifier\n final "]
424033[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
424034[label="variableDeclarator\n DATA_TEST_OUT_BIN=\"data/test/out.bin\" "]
524035[label="variableDeclaratorId\n DATA_TEST_OUT_BIN "]
524036[label="literal\n \"data/test/out.bin\" "]
324037[label="methodDeclaration\n publicvoidtestReadDouble()throwsException{DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN));out.writeDouble(0.123456789);out.writeInt(3389);ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN);System.out.println(byteArray.nextDouble());System.out.println(byteArray.nextInt());} "]
424038[label="methodModifier\n public "]
424039[label="methodHeader\n voidtestReadDouble()throwsException "]
524040[label="result\n void "]
524041[label="methodDeclarator\n testReadDouble() "]
524042[label="throws_\n throwsException "]
624043[label="classType\n Exception "]
424044[label="block\n {DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN));out.writeDouble(0.123456789);out.writeInt(3389);ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN);System.out.println(byteArray.nextDouble());System.out.println(byteArray.nextInt());} "]
524045[label="blockStatements\n DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN));out.writeDouble(0.123456789);out.writeInt(3389);ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN);System.out.println(byteArray.nextDouble());System.out.println(byteArray.nextInt()); "]
624046[label="localVariableDeclarationStatement\n DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN)); "]
724047[label="localVariableDeclaration\n DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN)) "]
824048[label="unannClassType_lfno_unannClassOrInterfaceType\n DataOutputStream "]
824049[label="variableDeclarator\n out=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN)) "]
924050[label="variableDeclaratorId\n out "]
924051[label="classInstanceCreationExpression_lfno_primary\n newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN)) "]
1024052[label="classInstanceCreationExpression_lfno_primary\n newFileOutputStream(DATA_TEST_OUT_BIN) "]
1124053[label="expressionName\n DATA_TEST_OUT_BIN "]
624054[label="expressionStatement\n out.writeDouble(0.123456789); "]
724055[label="methodInvocation\n out.writeDouble(0.123456789) "]
824056[label="typeName\n out "]
824057[label="literal\n 0.123456789 "]
624058[label="expressionStatement\n out.writeInt(3389); "]
724059[label="methodInvocation\n out.writeInt(3389) "]
824060[label="typeName\n out "]
824061[label="literal\n 3389 "]
624062[label="localVariableDeclarationStatement\n ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN); "]
724063[label="localVariableDeclaration\n ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN) "]
824064[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
824065[label="variableDeclarator\n byteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN) "]
924066[label="variableDeclaratorId\n byteArray "]
924067[label="methodInvocation_lfno_primary\n ByteArray.createByteArray(DATA_TEST_OUT_BIN) "]
1024068[label="typeName\n ByteArray "]
1024069[label="expressionName\n DATA_TEST_OUT_BIN "]
624070[label="expressionStatement\n System.out.println(byteArray.nextDouble()); "]
724071[label="methodInvocation\n System.out.println(byteArray.nextDouble()) "]
824072[label="typeName\n System.out "]
924073[label="packageOrTypeName\n System "]
824074[label="methodInvocation_lfno_primary\n byteArray.nextDouble() "]
924075[label="typeName\n byteArray "]
624076[label="expressionStatement\n System.out.println(byteArray.nextInt()); "]
724077[label="methodInvocation\n System.out.println(byteArray.nextInt()) "]
824078[label="typeName\n System.out "]
924079[label="packageOrTypeName\n System "]
824080[label="methodInvocation_lfno_primary\n byteArray.nextInt() "]
924081[label="typeName\n byteArray "]
324082[label="methodDeclaration\n publicvoidtestReadUTF()throwsException{DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN));out.writeUTF(\"hankcs你好123\");ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN);System.out.println(byteArray.nextUTF());} "]
424083[label="methodModifier\n public "]
424084[label="methodHeader\n voidtestReadUTF()throwsException "]
524085[label="result\n void "]
524086[label="methodDeclarator\n testReadUTF() "]
524087[label="throws_\n throwsException "]
624088[label="classType\n Exception "]
424089[label="block\n {DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN));out.writeUTF(\"hankcs你好123\");ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN);System.out.println(byteArray.nextUTF());} "]
524090[label="blockStatements\n DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN));out.writeUTF(\"hankcs你好123\");ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN);System.out.println(byteArray.nextUTF()); "]
624091[label="localVariableDeclarationStatement\n DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN)); "]
724092[label="localVariableDeclaration\n DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN)) "]
824093[label="unannClassType_lfno_unannClassOrInterfaceType\n DataOutputStream "]
824094[label="variableDeclarator\n out=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN)) "]
924095[label="variableDeclaratorId\n out "]
924096[label="classInstanceCreationExpression_lfno_primary\n newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN)) "]
1024097[label="classInstanceCreationExpression_lfno_primary\n newFileOutputStream(DATA_TEST_OUT_BIN) "]
1124098[label="expressionName\n DATA_TEST_OUT_BIN "]
624099[label="expressionStatement\n out.writeUTF(\"hankcs你好123\"); "]
724100[label="methodInvocation\n out.writeUTF(\"hankcs你好123\") "]
824101[label="typeName\n out "]
824102[label="literal\n \"hankcs你好123\" "]
624103[label="localVariableDeclarationStatement\n ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN); "]
724104[label="localVariableDeclaration\n ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN) "]
824105[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
824106[label="variableDeclarator\n byteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN) "]
924107[label="variableDeclaratorId\n byteArray "]
924108[label="methodInvocation_lfno_primary\n ByteArray.createByteArray(DATA_TEST_OUT_BIN) "]
1024109[label="typeName\n ByteArray "]
1024110[label="expressionName\n DATA_TEST_OUT_BIN "]
624111[label="expressionStatement\n System.out.println(byteArray.nextUTF()); "]
724112[label="methodInvocation\n System.out.println(byteArray.nextUTF()) "]
824113[label="typeName\n System.out "]
924114[label="packageOrTypeName\n System "]
824115[label="methodInvocation_lfno_primary\n byteArray.nextUTF() "]
924116[label="typeName\n byteArray "]
324117[label="methodDeclaration\n publicvoidtestReadUnsignedShort()throwsException{DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN));intutflen=123;out.writeByte((byte)((utflen>>>8)&0xFF));out.writeByte((byte)((utflen>>>0)&0xFF));ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN);System.out.println(byteArray.nextUnsignedShort());} "]
424118[label="methodModifier\n public "]
424119[label="methodHeader\n voidtestReadUnsignedShort()throwsException "]
524120[label="result\n void "]
524121[label="methodDeclarator\n testReadUnsignedShort() "]
524122[label="throws_\n throwsException "]
624123[label="classType\n Exception "]
424124[label="block\n {DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN));intutflen=123;out.writeByte((byte)((utflen>>>8)&0xFF));out.writeByte((byte)((utflen>>>0)&0xFF));ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN);System.out.println(byteArray.nextUnsignedShort());} "]
524125[label="blockStatements\n DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN));intutflen=123;out.writeByte((byte)((utflen>>>8)&0xFF));out.writeByte((byte)((utflen>>>0)&0xFF));ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN);System.out.println(byteArray.nextUnsignedShort()); "]
624126[label="localVariableDeclarationStatement\n DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN)); "]
724127[label="localVariableDeclaration\n DataOutputStreamout=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN)) "]
824128[label="unannClassType_lfno_unannClassOrInterfaceType\n DataOutputStream "]
824129[label="variableDeclarator\n out=newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN)) "]
924130[label="variableDeclaratorId\n out "]
924131[label="classInstanceCreationExpression_lfno_primary\n newDataOutputStream(newFileOutputStream(DATA_TEST_OUT_BIN)) "]
1024132[label="classInstanceCreationExpression_lfno_primary\n newFileOutputStream(DATA_TEST_OUT_BIN) "]
1124133[label="expressionName\n DATA_TEST_OUT_BIN "]
624134[label="localVariableDeclarationStatement\n intutflen=123; "]
724135[label="localVariableDeclaration\n intutflen=123 "]
824136[label="integralType\n int "]
824137[label="variableDeclarator\n utflen=123 "]
924138[label="variableDeclaratorId\n utflen "]
924139[label="literal\n 123 "]
624140[label="expressionStatement\n out.writeByte((byte)((utflen>>>8)&0xFF)); "]
724141[label="methodInvocation\n out.writeByte((byte)((utflen>>>8)&0xFF)) "]
824142[label="typeName\n out "]
824143[label="castExpression\n (byte)((utflen>>>8)&0xFF) "]
924144[label="integralType\n byte "]
924145[label="primaryNoNewArray_lfno_primary\n ((utflen>>>8)&0xFF) "]
1024146[label="andExpression\n (utflen>>>8)&0xFF "]
1124147[label="primaryNoNewArray_lfno_primary\n (utflen>>>8) "]
1224148[label="shiftExpression\n utflen>>>8 "]
1324149[label="expressionName\n utflen "]
1324150[label="literal\n 8 "]
1124151[label="literal\n 0xFF "]
624152[label="expressionStatement\n out.writeByte((byte)((utflen>>>0)&0xFF)); "]
724153[label="methodInvocation\n out.writeByte((byte)((utflen>>>0)&0xFF)) "]
824154[label="typeName\n out "]
824155[label="castExpression\n (byte)((utflen>>>0)&0xFF) "]
924156[label="integralType\n byte "]
924157[label="primaryNoNewArray_lfno_primary\n ((utflen>>>0)&0xFF) "]
1024158[label="andExpression\n (utflen>>>0)&0xFF "]
1124159[label="primaryNoNewArray_lfno_primary\n (utflen>>>0) "]
1224160[label="shiftExpression\n utflen>>>0 "]
1324161[label="expressionName\n utflen "]
1324162[label="literal\n 0 "]
1124163[label="literal\n 0xFF "]
624164[label="localVariableDeclarationStatement\n ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN); "]
724165[label="localVariableDeclaration\n ByteArraybyteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN) "]
824166[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
824167[label="variableDeclarator\n byteArray=ByteArray.createByteArray(DATA_TEST_OUT_BIN) "]
924168[label="variableDeclaratorId\n byteArray "]
924169[label="methodInvocation_lfno_primary\n ByteArray.createByteArray(DATA_TEST_OUT_BIN) "]
1024170[label="typeName\n ByteArray "]
1024171[label="expressionName\n DATA_TEST_OUT_BIN "]
624172[label="expressionStatement\n System.out.println(byteArray.nextUnsignedShort()); "]
724173[label="methodInvocation\n System.out.println(byteArray.nextUnsignedShort()) "]
824174[label="typeName\n System.out "]
924175[label="packageOrTypeName\n System "]
824176[label="methodInvocation_lfno_primary\n byteArray.nextUnsignedShort() "]
924177[label="typeName\n byteArray "]
324178[label="methodDeclaration\n publicvoidtestConvertCharToInt()throwsException{for(inti=0;i<Integer.MAX_VALUE;++i){intn=i;char[]twoChar=ByteUtil.convertIntToTwoChar(n);assertEquals(n,ByteUtil.convertTwoCharToInt(twoChar[0],twoChar[1]));}} "]
424179[label="methodModifier\n public "]
424180[label="methodHeader\n voidtestConvertCharToInt()throwsException "]
524181[label="result\n void "]
524182[label="methodDeclarator\n testConvertCharToInt() "]
524183[label="throws_\n throwsException "]
624184[label="classType\n Exception "]
424185[label="block\n {for(inti=0;i<Integer.MAX_VALUE;++i){intn=i;char[]twoChar=ByteUtil.convertIntToTwoChar(n);assertEquals(n,ByteUtil.convertTwoCharToInt(twoChar[0],twoChar[1]));}} "]
524186[label="basicForStatement\n for(inti=0;i<Integer.MAX_VALUE;++i){intn=i;char[]twoChar=ByteUtil.convertIntToTwoChar(n);assertEquals(n,ByteUtil.convertTwoCharToInt(twoChar[0],twoChar[1]));} "]
624187[label="localVariableDeclaration\n inti=0 "]
724188[label="integralType\n int "]
724189[label="variableDeclarator\n i=0 "]
824190[label="variableDeclaratorId\n i "]
824191[label="literal\n 0 "]
624192[label="relationalExpression\n i<Integer.MAX_VALUE "]
724193[label="expressionName\n i "]
724194[label="expressionName\n Integer.MAX_VALUE "]
824195[label="ambiguousName\n Integer "]
624196[label="preIncrementExpression\n ++i "]
724197[label="expressionName\n i "]
624198[label="block\n {intn=i;char[]twoChar=ByteUtil.convertIntToTwoChar(n);assertEquals(n,ByteUtil.convertTwoCharToInt(twoChar[0],twoChar[1]));} "]
724199[label="blockStatements\n intn=i;char[]twoChar=ByteUtil.convertIntToTwoChar(n);assertEquals(n,ByteUtil.convertTwoCharToInt(twoChar[0],twoChar[1])); "]
824200[label="localVariableDeclarationStatement\n intn=i; "]
924201[label="localVariableDeclaration\n intn=i "]
1024202[label="integralType\n int "]
1024203[label="variableDeclarator\n n=i "]
1124204[label="variableDeclaratorId\n n "]
1124205[label="expressionName\n i "]
824206[label="localVariableDeclarationStatement\n char[]twoChar=ByteUtil.convertIntToTwoChar(n); "]
924207[label="localVariableDeclaration\n char[]twoChar=ByteUtil.convertIntToTwoChar(n) "]
1024208[label="unannArrayType\n char[] "]
1124209[label="integralType\n char "]
1124210[label="dims\n [] "]
1024211[label="variableDeclarator\n twoChar=ByteUtil.convertIntToTwoChar(n) "]
1124212[label="variableDeclaratorId\n twoChar "]
1124213[label="methodInvocation_lfno_primary\n ByteUtil.convertIntToTwoChar(n) "]
1224214[label="typeName\n ByteUtil "]
1224215[label="expressionName\n n "]
824216[label="expressionStatement\n assertEquals(n,ByteUtil.convertTwoCharToInt(twoChar[0],twoChar[1])); "]
924217[label="methodInvocation\n assertEquals(n,ByteUtil.convertTwoCharToInt(twoChar[0],twoChar[1])) "]
1024218[label="methodName\n assertEquals "]
1024219[label="argumentList\n n,ByteUtil.convertTwoCharToInt(twoChar[0],twoChar[1]) "]
1124220[label="expressionName\n n "]
1124221[label="methodInvocation_lfno_primary\n ByteUtil.convertTwoCharToInt(twoChar[0],twoChar[1]) "]
1224222[label="typeName\n ByteUtil "]
1224223[label="argumentList\n twoChar[0],twoChar[1] "]
1324224[label="arrayAccess_lfno_primary\n twoChar[0] "]
1424225[label="expressionName\n twoChar "]
1424226[label="literal\n 0 "]
1324227[label="arrayAccess_lfno_primary\n twoChar[1] "]
1424228[label="expressionName\n twoChar "]
1424229[label="literal\n 1 "]
024230[label="compilationUnit\n packagecom.hankcs.hanlp.mining.word2vec;importjava.io.IOException;importjava.io.RandomAccessFile;publicclassCacheCorpusextendsCorpus{privateRandomAccessFileraf;publicCacheCorpus(CorpuscloneSrc)throwsIOException{super(cloneSrc);raf=newRandomAccessFile(((TextFileCorpus)cloneSrc).cacheFile,\"r\");}@OverridepublicStringnextWord()throwsIOException{returnnull;}@OverridepublicintreadWordIndex()throwsIOException{intid=nextId();while(id==-4){id=nextId();}returnid;}privateintnextId()throwsIOException{if(raf.length()-raf.getFilePointer()>=4){intid=raf.readInt();returnid<0?id:table[id];}return-2;}@Overridepublicvoidrewind(intnumThreads,intid)throwsIOException{super.rewind(numThreads,id);raf.seek(raf.length()/4/numThreads*id*4);}}<EOF> "]
124231[label="packageDeclaration\n packagecom.hankcs.hanlp.mining.word2vec; "]
224232[label="packageName\n com.hankcs.hanlp.mining.word2vec "]
324233[label="packageName\n com.hankcs.hanlp.mining "]
424234[label="packageName\n com.hankcs.hanlp "]
524235[label="packageName\n com.hankcs "]
624236[label="packageName\n com "]
124237[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
224238[label="typeName\n java.io.IOException "]
324239[label="packageOrTypeName\n java.io "]
424240[label="packageOrTypeName\n java "]
124241[label="singleTypeImportDeclaration\n importjava.io.RandomAccessFile; "]
224242[label="typeName\n java.io.RandomAccessFile "]
324243[label="packageOrTypeName\n java.io "]
424244[label="packageOrTypeName\n java "]
124245[label="normalClassDeclaration\n publicclassCacheCorpusextendsCorpus{privateRandomAccessFileraf;publicCacheCorpus(CorpuscloneSrc)throwsIOException{super(cloneSrc);raf=newRandomAccessFile(((TextFileCorpus)cloneSrc).cacheFile,\"r\");}@OverridepublicStringnextWord()throwsIOException{returnnull;}@OverridepublicintreadWordIndex()throwsIOException{intid=nextId();while(id==-4){id=nextId();}returnid;}privateintnextId()throwsIOException{if(raf.length()-raf.getFilePointer()>=4){intid=raf.readInt();returnid<0?id:table[id];}return-2;}@Overridepublicvoidrewind(intnumThreads,intid)throwsIOException{super.rewind(numThreads,id);raf.seek(raf.length()/4/numThreads*id*4);}} "]
224246[label="classModifier\n public "]
224247[label="superclass\n extendsCorpus "]
324248[label="classType\n Corpus "]
224249[label="classBody\n {privateRandomAccessFileraf;publicCacheCorpus(CorpuscloneSrc)throwsIOException{super(cloneSrc);raf=newRandomAccessFile(((TextFileCorpus)cloneSrc).cacheFile,\"r\");}@OverridepublicStringnextWord()throwsIOException{returnnull;}@OverridepublicintreadWordIndex()throwsIOException{intid=nextId();while(id==-4){id=nextId();}returnid;}privateintnextId()throwsIOException{if(raf.length()-raf.getFilePointer()>=4){intid=raf.readInt();returnid<0?id:table[id];}return-2;}@Overridepublicvoidrewind(intnumThreads,intid)throwsIOException{super.rewind(numThreads,id);raf.seek(raf.length()/4/numThreads*id*4);}} "]
324250[label="fieldDeclaration\n privateRandomAccessFileraf; "]
424251[label="fieldModifier\n private "]
424252[label="unannClassType_lfno_unannClassOrInterfaceType\n RandomAccessFile "]
424253[label="variableDeclaratorId\n raf "]
324254[label="constructorDeclaration\n publicCacheCorpus(CorpuscloneSrc)throwsIOException{super(cloneSrc);raf=newRandomAccessFile(((TextFileCorpus)cloneSrc).cacheFile,\"r\");} "]
424255[label="constructorModifier\n public "]
424256[label="constructorDeclarator\n CacheCorpus(CorpuscloneSrc) "]
524257[label="simpleTypeName\n CacheCorpus "]
524258[label="formalParameter\n CorpuscloneSrc "]
624259[label="unannClassType_lfno_unannClassOrInterfaceType\n Corpus "]
624260[label="variableDeclaratorId\n cloneSrc "]
424261[label="throws_\n throwsIOException "]
524262[label="classType\n IOException "]
424263[label="constructorBody\n {super(cloneSrc);raf=newRandomAccessFile(((TextFileCorpus)cloneSrc).cacheFile,\"r\");} "]
524264[label="explicitConstructorInvocation\n super(cloneSrc); "]
624265[label="expressionName\n cloneSrc "]
524266[label="expressionStatement\n raf=newRandomAccessFile(((TextFileCorpus)cloneSrc).cacheFile,\"r\"); "]
624267[label="assignment\n raf=newRandomAccessFile(((TextFileCorpus)cloneSrc).cacheFile,\"r\") "]
724268[label="expressionName\n raf "]
724269[label="assignmentOperator\n = "]
724270[label="classInstanceCreationExpression_lfno_primary\n newRandomAccessFile(((TextFileCorpus)cloneSrc).cacheFile,\"r\") "]
824271[label="argumentList\n ((TextFileCorpus)cloneSrc).cacheFile,\"r\" "]
924272[label="primary\n ((TextFileCorpus)cloneSrc).cacheFile "]
1024273[label="primaryNoNewArray_lfno_primary\n ((TextFileCorpus)cloneSrc) "]
1124274[label="castExpression\n (TextFileCorpus)cloneSrc "]
1224275[label="classType_lfno_classOrInterfaceType\n TextFileCorpus "]
1224276[label="expressionName\n cloneSrc "]
1024277[label="fieldAccess_lf_primary\n .cacheFile "]
924278[label="literal\n \"r\" "]
324279[label="methodDeclaration\n @OverridepublicStringnextWord()throwsIOException{returnnull;} "]
424280[label="markerAnnotation\n @Override "]
524281[label="typeName\n Override "]
424282[label="methodModifier\n public "]
424283[label="methodHeader\n StringnextWord()throwsIOException "]
524284[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
524285[label="methodDeclarator\n nextWord() "]
524286[label="throws_\n throwsIOException "]
624287[label="classType\n IOException "]
424288[label="block\n {returnnull;} "]
524289[label="returnStatement\n returnnull; "]
624290[label="literal\n null "]
324291[label="methodDeclaration\n @OverridepublicintreadWordIndex()throwsIOException{intid=nextId();while(id==-4){id=nextId();}returnid;} "]
424292[label="markerAnnotation\n @Override "]
524293[label="typeName\n Override "]
424294[label="methodModifier\n public "]
424295[label="methodHeader\n intreadWordIndex()throwsIOException "]
524296[label="integralType\n int "]
524297[label="methodDeclarator\n readWordIndex() "]
524298[label="throws_\n throwsIOException "]
624299[label="classType\n IOException "]
424300[label="block\n {intid=nextId();while(id==-4){id=nextId();}returnid;} "]
524301[label="blockStatements\n intid=nextId();while(id==-4){id=nextId();}returnid; "]
624302[label="localVariableDeclarationStatement\n intid=nextId(); "]
724303[label="localVariableDeclaration\n intid=nextId() "]
824304[label="integralType\n int "]
824305[label="variableDeclarator\n id=nextId() "]
924306[label="variableDeclaratorId\n id "]
924307[label="methodInvocation_lfno_primary\n nextId() "]
1024308[label="methodName\n nextId "]
624309[label="whileStatement\n while(id==-4){id=nextId();} "]
724310[label="equalityExpression\n id==-4 "]
824311[label="expressionName\n id "]
824312[label="unaryExpression\n -4 "]
924313[label="literal\n 4 "]
724314[label="block\n {id=nextId();} "]
824315[label="expressionStatement\n id=nextId(); "]
924316[label="assignment\n id=nextId() "]
1024317[label="expressionName\n id "]
1024318[label="assignmentOperator\n = "]
1024319[label="methodInvocation_lfno_primary\n nextId() "]
1124320[label="methodName\n nextId "]
624321[label="returnStatement\n returnid; "]
724322[label="expressionName\n id "]
324323[label="methodDeclaration\n privateintnextId()throwsIOException{if(raf.length()-raf.getFilePointer()>=4){intid=raf.readInt();returnid<0?id:table[id];}return-2;} "]
424324[label="methodModifier\n private "]
424325[label="methodHeader\n intnextId()throwsIOException "]
524326[label="integralType\n int "]
524327[label="methodDeclarator\n nextId() "]
524328[label="throws_\n throwsIOException "]
624329[label="classType\n IOException "]
424330[label="block\n {if(raf.length()-raf.getFilePointer()>=4){intid=raf.readInt();returnid<0?id:table[id];}return-2;} "]
524331[label="blockStatements\n if(raf.length()-raf.getFilePointer()>=4){intid=raf.readInt();returnid<0?id:table[id];}return-2; "]
624332[label="ifThenStatement\n if(raf.length()-raf.getFilePointer()>=4){intid=raf.readInt();returnid<0?id:table[id];} "]
724333[label="relationalExpression\n raf.length()-raf.getFilePointer()>=4 "]
824334[label="additiveExpression\n raf.length()-raf.getFilePointer() "]
924335[label="methodInvocation_lfno_primary\n raf.length() "]
1024336[label="typeName\n raf "]
924337[label="methodInvocation_lfno_primary\n raf.getFilePointer() "]
1024338[label="typeName\n raf "]
824339[label="literal\n 4 "]
724340[label="block\n {intid=raf.readInt();returnid<0?id:table[id];} "]
824341[label="blockStatements\n intid=raf.readInt();returnid<0?id:table[id]; "]
924342[label="localVariableDeclarationStatement\n intid=raf.readInt(); "]
1024343[label="localVariableDeclaration\n intid=raf.readInt() "]
1124344[label="integralType\n int "]
1124345[label="variableDeclarator\n id=raf.readInt() "]
1224346[label="variableDeclaratorId\n id "]
1224347[label="methodInvocation_lfno_primary\n raf.readInt() "]
1324348[label="typeName\n raf "]
924349[label="returnStatement\n returnid<0?id:table[id]; "]
1024350[label="conditionalExpression\n id<0?id:table[id] "]
1124351[label="relationalExpression\n id<0 "]
1224352[label="expressionName\n id "]
1224353[label="literal\n 0 "]
1124354[label="expressionName\n id "]
1124355[label="arrayAccess_lfno_primary\n table[id] "]
1224356[label="expressionName\n table "]
1224357[label="expressionName\n id "]
624358[label="returnStatement\n return-2; "]
724359[label="unaryExpression\n -2 "]
824360[label="literal\n 2 "]
324361[label="methodDeclaration\n @Overridepublicvoidrewind(intnumThreads,intid)throwsIOException{super.rewind(numThreads,id);raf.seek(raf.length()/4/numThreads*id*4);} "]
424362[label="markerAnnotation\n @Override "]
524363[label="typeName\n Override "]
424364[label="methodModifier\n public "]
424365[label="methodHeader\n voidrewind(intnumThreads,intid)throwsIOException "]
524366[label="result\n void "]
524367[label="methodDeclarator\n rewind(intnumThreads,intid) "]
624368[label="formalParameterList\n intnumThreads,intid "]
724369[label="formalParameter\n intnumThreads "]
824370[label="integralType\n int "]
824371[label="variableDeclaratorId\n numThreads "]
724372[label="formalParameter\n intid "]
824373[label="integralType\n int "]
824374[label="variableDeclaratorId\n id "]
524375[label="throws_\n throwsIOException "]
624376[label="classType\n IOException "]
424377[label="block\n {super.rewind(numThreads,id);raf.seek(raf.length()/4/numThreads*id*4);} "]
524378[label="blockStatements\n super.rewind(numThreads,id);raf.seek(raf.length()/4/numThreads*id*4); "]
624379[label="expressionStatement\n super.rewind(numThreads,id); "]
724380[label="methodInvocation\n super.rewind(numThreads,id) "]
824381[label="argumentList\n numThreads,id "]
924382[label="expressionName\n numThreads "]
924383[label="expressionName\n id "]
624384[label="expressionStatement\n raf.seek(raf.length()/4/numThreads*id*4); "]
724385[label="methodInvocation\n raf.seek(raf.length()/4/numThreads*id*4) "]
824386[label="typeName\n raf "]
824387[label="multiplicativeExpression\n raf.length()/4/numThreads*id*4 "]
924388[label="multiplicativeExpression\n raf.length()/4/numThreads*id "]
1024389[label="multiplicativeExpression\n raf.length()/4/numThreads "]
1124390[label="multiplicativeExpression\n raf.length()/4 "]
1224391[label="methodInvocation_lfno_primary\n raf.length() "]
1324392[label="typeName\n raf "]
1224393[label="literal\n 4 "]
1124394[label="expressionName\n numThreads "]
1024395[label="expressionName\n id "]
924396[label="literal\n 4 "]
024397[label="compilationUnit\n packagecom.hankcs.hanlp.classification.corpus;importjava.io.Serializable;importjava.util.ArrayList;importjava.util.List;importjava.util.Map;importjava.util.TreeMap;publicclassCatalogimplementsSerializable{Map<String,Integer>categoryId;List<String>idCategory;publicCatalog(){categoryId=newTreeMap<String,Integer>();idCategory=newArrayList<String>();}publicCatalog(String[]catalog){this();for(inti=0;i<catalog.length;i++){categoryId.put(catalog[i],i);idCategory.add(catalog[i]);}}publicintaddCategory(Stringcategory){Integerid=categoryId.get(category);if(id==null){id=categoryId.size();categoryId.put(category,id);assertidCategory.size()==id;idCategory.add(category);}returnid;}publicIntegergetId(Stringcategory){returncategoryId.get(category);}publicStringgetCategory(intid){assert0<=id;assertid<idCategory.size();returnidCategory.get(id);}publicintsize(){returnidCategory.size();}publicString[]toArray(){String[]catalog=newString[idCategory.size()];idCategory.toArray(catalog);returncatalog;}}<EOF> "]
124398[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.corpus; "]
224399[label="packageName\n com.hankcs.hanlp.classification.corpus "]
324400[label="packageName\n com.hankcs.hanlp.classification "]
424401[label="packageName\n com.hankcs.hanlp "]
524402[label="packageName\n com.hankcs "]
624403[label="packageName\n com "]
124404[label="singleTypeImportDeclaration\n importjava.io.Serializable; "]
224405[label="typeName\n java.io.Serializable "]
324406[label="packageOrTypeName\n java.io "]
424407[label="packageOrTypeName\n java "]
124408[label="singleTypeImportDeclaration\n importjava.util.ArrayList; "]
224409[label="typeName\n java.util.ArrayList "]
324410[label="packageOrTypeName\n java.util "]
424411[label="packageOrTypeName\n java "]
124412[label="singleTypeImportDeclaration\n importjava.util.List; "]
224413[label="typeName\n java.util.List "]
324414[label="packageOrTypeName\n java.util "]
424415[label="packageOrTypeName\n java "]
124416[label="singleTypeImportDeclaration\n importjava.util.Map; "]
224417[label="typeName\n java.util.Map "]
324418[label="packageOrTypeName\n java.util "]
424419[label="packageOrTypeName\n java "]
124420[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
224421[label="typeName\n java.util.TreeMap "]
324422[label="packageOrTypeName\n java.util "]
424423[label="packageOrTypeName\n java "]
124424[label="normalClassDeclaration\n publicclassCatalogimplementsSerializable{Map<String,Integer>categoryId;List<String>idCategory;publicCatalog(){categoryId=newTreeMap<String,Integer>();idCategory=newArrayList<String>();}publicCatalog(String[]catalog){this();for(inti=0;i<catalog.length;i++){categoryId.put(catalog[i],i);idCategory.add(catalog[i]);}}publicintaddCategory(Stringcategory){Integerid=categoryId.get(category);if(id==null){id=categoryId.size();categoryId.put(category,id);assertidCategory.size()==id;idCategory.add(category);}returnid;}publicIntegergetId(Stringcategory){returncategoryId.get(category);}publicStringgetCategory(intid){assert0<=id;assertid<idCategory.size();returnidCategory.get(id);}publicintsize(){returnidCategory.size();}publicString[]toArray(){String[]catalog=newString[idCategory.size()];idCategory.toArray(catalog);returncatalog;}} "]
224425[label="classModifier\n public "]
224426[label="superinterfaces\n implementsSerializable "]
324427[label="classType\n Serializable "]
224428[label="classBody\n {Map<String,Integer>categoryId;List<String>idCategory;publicCatalog(){categoryId=newTreeMap<String,Integer>();idCategory=newArrayList<String>();}publicCatalog(String[]catalog){this();for(inti=0;i<catalog.length;i++){categoryId.put(catalog[i],i);idCategory.add(catalog[i]);}}publicintaddCategory(Stringcategory){Integerid=categoryId.get(category);if(id==null){id=categoryId.size();categoryId.put(category,id);assertidCategory.size()==id;idCategory.add(category);}returnid;}publicIntegergetId(Stringcategory){returncategoryId.get(category);}publicStringgetCategory(intid){assert0<=id;assertid<idCategory.size();returnidCategory.get(id);}publicintsize(){returnidCategory.size();}publicString[]toArray(){String[]catalog=newString[idCategory.size()];idCategory.toArray(catalog);returncatalog;}} "]
324429[label="fieldDeclaration\n Map<String,Integer>categoryId; "]
424430[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Integer> "]
524431[label="typeArguments\n <String,Integer> "]
624432[label="typeArgumentList\n String,Integer "]
724433[label="classType_lfno_classOrInterfaceType\n String "]
724434[label="classType_lfno_classOrInterfaceType\n Integer "]
424435[label="variableDeclaratorId\n categoryId "]
324436[label="fieldDeclaration\n List<String>idCategory; "]
424437[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
524438[label="typeArguments\n <String> "]
624439[label="classType_lfno_classOrInterfaceType\n String "]
424440[label="variableDeclaratorId\n idCategory "]
324441[label="constructorDeclaration\n publicCatalog(){categoryId=newTreeMap<String,Integer>();idCategory=newArrayList<String>();} "]
424442[label="constructorModifier\n public "]
424443[label="constructorDeclarator\n Catalog() "]
524444[label="simpleTypeName\n Catalog "]
424445[label="constructorBody\n {categoryId=newTreeMap<String,Integer>();idCategory=newArrayList<String>();} "]
524446[label="blockStatements\n categoryId=newTreeMap<String,Integer>();idCategory=newArrayList<String>(); "]
624447[label="expressionStatement\n categoryId=newTreeMap<String,Integer>(); "]
724448[label="assignment\n categoryId=newTreeMap<String,Integer>() "]
824449[label="expressionName\n categoryId "]
824450[label="assignmentOperator\n = "]
824451[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,Integer>() "]
924452[label="typeArguments\n <String,Integer> "]
1024453[label="typeArgumentList\n String,Integer "]
1124454[label="classType_lfno_classOrInterfaceType\n String "]
1124455[label="classType_lfno_classOrInterfaceType\n Integer "]
624456[label="expressionStatement\n idCategory=newArrayList<String>(); "]
724457[label="assignment\n idCategory=newArrayList<String>() "]
824458[label="expressionName\n idCategory "]
824459[label="assignmentOperator\n = "]
824460[label="classInstanceCreationExpression_lfno_primary\n newArrayList<String>() "]
924461[label="typeArguments\n <String> "]
1024462[label="classType_lfno_classOrInterfaceType\n String "]
324463[label="constructorDeclaration\n publicCatalog(String[]catalog){this();for(inti=0;i<catalog.length;i++){categoryId.put(catalog[i],i);idCategory.add(catalog[i]);}} "]
424464[label="constructorModifier\n public "]
424465[label="constructorDeclarator\n Catalog(String[]catalog) "]
524466[label="simpleTypeName\n Catalog "]
524467[label="formalParameter\n String[]catalog "]
624468[label="unannArrayType\n String[] "]
724469[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
724470[label="dims\n [] "]
624471[label="variableDeclaratorId\n catalog "]
424472[label="constructorBody\n {this();for(inti=0;i<catalog.length;i++){categoryId.put(catalog[i],i);idCategory.add(catalog[i]);}} "]
524473[label="explicitConstructorInvocation\n this(); "]
524474[label="basicForStatement\n for(inti=0;i<catalog.length;i++){categoryId.put(catalog[i],i);idCategory.add(catalog[i]);} "]
624475[label="localVariableDeclaration\n inti=0 "]
724476[label="integralType\n int "]
724477[label="variableDeclarator\n i=0 "]
824478[label="variableDeclaratorId\n i "]
824479[label="literal\n 0 "]
624480[label="relationalExpression\n i<catalog.length "]
724481[label="expressionName\n i "]
724482[label="expressionName\n catalog.length "]
824483[label="ambiguousName\n catalog "]
624484[label="postIncrementExpression\n i++ "]
724485[label="expressionName\n i "]
624486[label="block\n {categoryId.put(catalog[i],i);idCategory.add(catalog[i]);} "]
724487[label="blockStatements\n categoryId.put(catalog[i],i);idCategory.add(catalog[i]); "]
824488[label="expressionStatement\n categoryId.put(catalog[i],i); "]
924489[label="methodInvocation\n categoryId.put(catalog[i],i) "]
1024490[label="typeName\n categoryId "]
1024491[label="argumentList\n catalog[i],i "]
1124492[label="arrayAccess_lfno_primary\n catalog[i] "]
1224493[label="expressionName\n catalog "]
1224494[label="expressionName\n i "]
1124495[label="expressionName\n i "]
824496[label="expressionStatement\n idCategory.add(catalog[i]); "]
924497[label="methodInvocation\n idCategory.add(catalog[i]) "]
1024498[label="typeName\n idCategory "]
1024499[label="arrayAccess_lfno_primary\n catalog[i] "]
1124500[label="expressionName\n catalog "]
1124501[label="expressionName\n i "]
324502[label="methodDeclaration\n publicintaddCategory(Stringcategory){Integerid=categoryId.get(category);if(id==null){id=categoryId.size();categoryId.put(category,id);assertidCategory.size()==id;idCategory.add(category);}returnid;} "]
424503[label="methodModifier\n public "]
424504[label="methodHeader\n intaddCategory(Stringcategory) "]
524505[label="integralType\n int "]
524506[label="methodDeclarator\n addCategory(Stringcategory) "]
624507[label="formalParameter\n Stringcategory "]
724508[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
724509[label="variableDeclaratorId\n category "]
424510[label="block\n {Integerid=categoryId.get(category);if(id==null){id=categoryId.size();categoryId.put(category,id);assertidCategory.size()==id;idCategory.add(category);}returnid;} "]
524511[label="blockStatements\n Integerid=categoryId.get(category);if(id==null){id=categoryId.size();categoryId.put(category,id);assertidCategory.size()==id;idCategory.add(category);}returnid; "]
624512[label="localVariableDeclarationStatement\n Integerid=categoryId.get(category); "]
724513[label="localVariableDeclaration\n Integerid=categoryId.get(category) "]
824514[label="unannClassType_lfno_unannClassOrInterfaceType\n Integer "]
824515[label="variableDeclarator\n id=categoryId.get(category) "]
924516[label="variableDeclaratorId\n id "]
924517[label="methodInvocation_lfno_primary\n categoryId.get(category) "]
1024518[label="typeName\n categoryId "]
1024519[label="expressionName\n category "]
624520[label="ifThenStatement\n if(id==null){id=categoryId.size();categoryId.put(category,id);assertidCategory.size()==id;idCategory.add(category);} "]
724521[label="equalityExpression\n id==null "]
824522[label="expressionName\n id "]
824523[label="literal\n null "]
724524[label="block\n {id=categoryId.size();categoryId.put(category,id);assertidCategory.size()==id;idCategory.add(category);} "]
824525[label="blockStatements\n id=categoryId.size();categoryId.put(category,id);assertidCategory.size()==id;idCategory.add(category); "]
924526[label="expressionStatement\n id=categoryId.size(); "]
1024527[label="assignment\n id=categoryId.size() "]
1124528[label="expressionName\n id "]
1124529[label="assignmentOperator\n = "]
1124530[label="methodInvocation_lfno_primary\n categoryId.size() "]
1224531[label="typeName\n categoryId "]
924532[label="expressionStatement\n categoryId.put(category,id); "]
1024533[label="methodInvocation\n categoryId.put(category,id) "]
1124534[label="typeName\n categoryId "]
1124535[label="argumentList\n category,id "]
1224536[label="expressionName\n category "]
1224537[label="expressionName\n id "]
924538[label="assertStatement\n assertidCategory.size()==id; "]
1024539[label="equalityExpression\n idCategory.size()==id "]
1124540[label="methodInvocation_lfno_primary\n idCategory.size() "]
1224541[label="typeName\n idCategory "]
1124542[label="expressionName\n id "]
924543[label="expressionStatement\n idCategory.add(category); "]
1024544[label="methodInvocation\n idCategory.add(category) "]
1124545[label="typeName\n idCategory "]
1124546[label="expressionName\n category "]
624547[label="returnStatement\n returnid; "]
724548[label="expressionName\n id "]
324549[label="methodDeclaration\n publicIntegergetId(Stringcategory){returncategoryId.get(category);} "]
424550[label="methodModifier\n public "]
424551[label="methodHeader\n IntegergetId(Stringcategory) "]
524552[label="unannClassType_lfno_unannClassOrInterfaceType\n Integer "]
524553[label="methodDeclarator\n getId(Stringcategory) "]
624554[label="formalParameter\n Stringcategory "]
724555[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
724556[label="variableDeclaratorId\n category "]
424557[label="block\n {returncategoryId.get(category);} "]
524558[label="returnStatement\n returncategoryId.get(category); "]
624559[label="methodInvocation_lfno_primary\n categoryId.get(category) "]
724560[label="typeName\n categoryId "]
724561[label="expressionName\n category "]
324562[label="methodDeclaration\n publicStringgetCategory(intid){assert0<=id;assertid<idCategory.size();returnidCategory.get(id);} "]
424563[label="methodModifier\n public "]
424564[label="methodHeader\n StringgetCategory(intid) "]
524565[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
524566[label="methodDeclarator\n getCategory(intid) "]
624567[label="formalParameter\n intid "]
724568[label="integralType\n int "]
724569[label="variableDeclaratorId\n id "]
424570[label="block\n {assert0<=id;assertid<idCategory.size();returnidCategory.get(id);} "]
524571[label="blockStatements\n assert0<=id;assertid<idCategory.size();returnidCategory.get(id); "]
624572[label="assertStatement\n assert0<=id; "]
724573[label="relationalExpression\n 0<=id "]
824574[label="literal\n 0 "]
824575[label="expressionName\n id "]
624576[label="assertStatement\n assertid<idCategory.size(); "]
724577[label="relationalExpression\n id<idCategory.size() "]
824578[label="expressionName\n id "]
824579[label="methodInvocation_lfno_primary\n idCategory.size() "]
924580[label="typeName\n idCategory "]
624581[label="returnStatement\n returnidCategory.get(id); "]
724582[label="methodInvocation_lfno_primary\n idCategory.get(id) "]
824583[label="typeName\n idCategory "]
824584[label="expressionName\n id "]
324585[label="methodDeclaration\n publicintsize(){returnidCategory.size();} "]
424586[label="methodModifier\n public "]
424587[label="methodHeader\n intsize() "]
524588[label="integralType\n int "]
524589[label="methodDeclarator\n size() "]
424590[label="block\n {returnidCategory.size();} "]
524591[label="returnStatement\n returnidCategory.size(); "]
624592[label="methodInvocation_lfno_primary\n idCategory.size() "]
724593[label="typeName\n idCategory "]
324594[label="methodDeclaration\n publicString[]toArray(){String[]catalog=newString[idCategory.size()];idCategory.toArray(catalog);returncatalog;} "]
424595[label="methodModifier\n public "]
424596[label="methodHeader\n String[]toArray() "]
524597[label="unannArrayType\n String[] "]
624598[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
624599[label="dims\n [] "]
524600[label="methodDeclarator\n toArray() "]
424601[label="block\n {String[]catalog=newString[idCategory.size()];idCategory.toArray(catalog);returncatalog;} "]
524602[label="blockStatements\n String[]catalog=newString[idCategory.size()];idCategory.toArray(catalog);returncatalog; "]
624603[label="localVariableDeclarationStatement\n String[]catalog=newString[idCategory.size()]; "]
724604[label="localVariableDeclaration\n String[]catalog=newString[idCategory.size()] "]
824605[label="unannArrayType\n String[] "]
924606[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
924607[label="dims\n [] "]
824608[label="variableDeclarator\n catalog=newString[idCategory.size()] "]
924609[label="variableDeclaratorId\n catalog "]
924610[label="arrayCreationExpression\n newString[idCategory.size()] "]
1024611[label="classType_lfno_classOrInterfaceType\n String "]
1024612[label="dimExpr\n [idCategory.size()] "]
1124613[label="methodInvocation_lfno_primary\n idCategory.size() "]
1224614[label="typeName\n idCategory "]
624615[label="expressionStatement\n idCategory.toArray(catalog); "]
724616[label="methodInvocation\n idCategory.toArray(catalog) "]
824617[label="typeName\n idCategory "]
824618[label="expressionName\n catalog "]
624619[label="returnStatement\n returncatalog; "]
724620[label="expressionName\n catalog "]
024621[label="compilationUnit\n packagecom.hankcs.hanlp.model.trigram;importcom.hankcs.hanlp.corpus.document.sentence.word.IWord;importcom.hankcs.hanlp.corpus.document.sentence.word.Word;importcom.hankcs.hanlp.corpus.io.ByteArray;importcom.hankcs.hanlp.corpus.io.ICacheAble;importcom.hankcs.hanlp.model.trigram.frequency.Probability;importjava.io.DataOutputStream;importjava.util.LinkedList;importjava.util.List;publicclassCharacterBasedGenerativeModelimplementsICacheAble{doublel1,l2,l3;Probabilitytf;int[][][]transMatrix;staticfinalchar[]id2tag=newchar[]{'b','m','e','s','x'};staticfinalchar[]bos={'\b','x'};staticfinaldoubleinf=-1e10;staticfinalint[][]probableTail={{0,2},{1,2},{2,3},{3,3}};publicCharacterBasedGenerativeModel(){tf=newProbability();finalint[]nullArray={0,0,0,0,0};transMatrix=newint[5][][];transMatrix[0]=newint[][]{nullArray,{0,150,330,0,0},{160,0,0,168,20},nullArray,nullArray};transMatrix[1]=newint[][]{nullArray,{0,35,150,0,0},{210,0,0,263,3},nullArray,nullArray};transMatrix[2]=newint[][]{{0,200,1600,0,0},nullArray,nullArray,{1080,0,0,650,205},nullArray};transMatrix[3]=newint[][]{{0,200,1600,0,0},nullArray,nullArray,{640,0,0,700,63},nullArray};transMatrix[4]=newint[][]{{0,30,150,0,0},nullArray,nullArray,{60,0,0,50,3},{180,0,0,120,0}};}publicvoidlearn(List<Word>wordList){LinkedList<char[]>sentence=newLinkedList<char[]>();for(IWordiWord:wordList){Stringword=iWord.getValue();if(word.length()==1){sentence.add(newchar[]{word.charAt(0),'s'});}else{sentence.add(newchar[]{word.charAt(0),'b'});for(inti=1;i<word.length()-1;++i){sentence.add(newchar[]{word.charAt(i),'m'});}sentence.add(newchar[]{word.charAt(word.length()-1),'e'});}}char[][]now=newchar[3][];now[1]=bos;now[2]=bos;tf.add(1,bos,bos);tf.add(2,bos);for(char[]i:sentence){System.arraycopy(now,1,now,0,2);now[2]=i;tf.add(1,i);tf.add(1,now[1],now[2]);tf.add(1,now);}}publicvoidtrain(){doubletl1=0.0;doubletl2=0.0;doubletl3=0.0;for(Stringkey:tf.d.keySet()){if(key.length()!=6)continue;char[][]now=newchar[][]{{key.charAt(0),key.charAt(1)},{key.charAt(2),key.charAt(3)},{key.charAt(4),key.charAt(5)},};doublec3=div(tf.get(now)-1,tf.get(now[0],now[1])-1);doublec2=div(tf.get(now[1],now[2])-1,tf.get(now[1])-1);doublec1=div(tf.get(now[2])-1,tf.getsum()-1);if(c3>=c1&&c3>=c2)tl3+=tf.get(key.toCharArray());elseif(c2>=c1&&c2>=c3)tl2+=tf.get(key.toCharArray());elseif(c1>=c2&&c1>=c3)tl1+=tf.get(key.toCharArray());}l1=div(tl1,tl1+tl2+tl3);l2=div(tl2,tl1+tl2+tl3);l3=div(tl3,tl1+tl2+tl3);}doublelog_prob(chars1,inti1,chars2,inti2,chars3,inti3){if(transMatrix[i1][i2][i3]==0)returninf;chart1=id2tag[i1];chart2=id2tag[i2];chart3=id2tag[i3];doubleuni=l1*tf.freq(s3,t3);doublebi=div(l2*tf.get(s2,t2,s3,t3),tf.get(s2,t2));doubletri=div(l3*tf.get(s1,t1,s2,t2,s3,t3),tf.get(s1,t1,s2,t2));if(uni+bi+tri==0)returninf;returnMath.log(uni+bi+tri);}publicchar[]tag(char[]charArray){if(charArray.length==0)returnnewchar[0];if(charArray.length==1)returnnewchar[]{'s'};char[]tag=newchar[charArray.length];double[][]now=newdouble[4][4];double[]first=newdouble[4];int[][][]link=newint[charArray.length][4][4];for(ints=0;s<4;++s){doublep=(s==1||s==2)?inf:log_prob(bos[0],4,bos[0],4,charArray[0],s);first[s]=p;}for(intf=0;f<4;++f){for(ints=0;s<4;++s){doublep=first[f]+log_prob(bos[0],4,charArray[0],f,charArray[1],s);now[f][s]=p;link[1][f][s]=f;}}double[][]pre=newdouble[4][4];for(inti=2;i<charArray.length;i++){double[][]_=pre;pre=now;now=_;for(ints=0;s<4;++s){for(intt=0;t<4;++t){now[s][t]=-1e20;for(intf=0;f<4;++f){doublep=pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t);if(p>now[s][t]){now[s][t]=p;link[i][s][t]=f;}}}}}doublescore=charArray.length*inf;ints=0;intt=0;for(inti=0;i<probableTail.length;i++){int[]state=probableTail[i];if(now[state[0]][state[1]]>score){score=now[state[0]][state[1]];s=state[0];t=state[1];}}for(inti=link.length-1;i>=0;--i){tag[i]=id2tag[t];intf=link[i][s][t];t=s;s=f;}returntag;}privatestaticdoublediv(intv1,intv2){if(v2==0)return0.0;returnv1/(double)v2;}privatestaticdoublediv(doublev1,doublev2){if(v2==0)return0.0;returnv1/v2;}@Overridepublicvoidsave(DataOutputStreamout)throwsException{out.writeDouble(l1);out.writeDouble(l2);out.writeDouble(l3);tf.save(out);}@Overridepublicbooleanload(ByteArraybyteArray){l1=byteArray.nextDouble();l2=byteArray.nextDouble();l3=byteArray.nextDouble();tf.load(byteArray);returntrue;}}<EOF> "]
124622[label="packageDeclaration\n packagecom.hankcs.hanlp.model.trigram; "]
224623[label="packageName\n com.hankcs.hanlp.model.trigram "]
324624[label="packageName\n com.hankcs.hanlp.model "]
424625[label="packageName\n com.hankcs.hanlp "]
524626[label="packageName\n com.hankcs "]
624627[label="packageName\n com "]
124628[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.document.sentence.word.IWord; "]
224629[label="typeName\n com.hankcs.hanlp.corpus.document.sentence.word.IWord "]
324630[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document.sentence.word "]
424631[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document.sentence "]
524632[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document "]
624633[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
724634[label="packageOrTypeName\n com.hankcs.hanlp "]
824635[label="packageOrTypeName\n com.hankcs "]
924636[label="packageOrTypeName\n com "]
124637[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.document.sentence.word.Word; "]
224638[label="typeName\n com.hankcs.hanlp.corpus.document.sentence.word.Word "]
324639[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document.sentence.word "]
424640[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document.sentence "]
524641[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document "]
624642[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
724643[label="packageOrTypeName\n com.hankcs.hanlp "]
824644[label="packageOrTypeName\n com.hankcs "]
924645[label="packageOrTypeName\n com "]
124646[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.ByteArray; "]
224647[label="typeName\n com.hankcs.hanlp.corpus.io.ByteArray "]
324648[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
424649[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
524650[label="packageOrTypeName\n com.hankcs.hanlp "]
624651[label="packageOrTypeName\n com.hankcs "]
724652[label="packageOrTypeName\n com "]
124653[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.ICacheAble; "]
224654[label="typeName\n com.hankcs.hanlp.corpus.io.ICacheAble "]
324655[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
424656[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
524657[label="packageOrTypeName\n com.hankcs.hanlp "]
624658[label="packageOrTypeName\n com.hankcs "]
724659[label="packageOrTypeName\n com "]
124660[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.model.trigram.frequency.Probability; "]
224661[label="typeName\n com.hankcs.hanlp.model.trigram.frequency.Probability "]
324662[label="packageOrTypeName\n com.hankcs.hanlp.model.trigram.frequency "]
424663[label="packageOrTypeName\n com.hankcs.hanlp.model.trigram "]
524664[label="packageOrTypeName\n com.hankcs.hanlp.model "]
624665[label="packageOrTypeName\n com.hankcs.hanlp "]
724666[label="packageOrTypeName\n com.hankcs "]
824667[label="packageOrTypeName\n com "]
124668[label="singleTypeImportDeclaration\n importjava.io.DataOutputStream; "]
224669[label="typeName\n java.io.DataOutputStream "]
324670[label="packageOrTypeName\n java.io "]
424671[label="packageOrTypeName\n java "]
124672[label="singleTypeImportDeclaration\n importjava.util.LinkedList; "]
224673[label="typeName\n java.util.LinkedList "]
324674[label="packageOrTypeName\n java.util "]
424675[label="packageOrTypeName\n java "]
124676[label="singleTypeImportDeclaration\n importjava.util.List; "]
224677[label="typeName\n java.util.List "]
324678[label="packageOrTypeName\n java.util "]
424679[label="packageOrTypeName\n java "]
124680[label="normalClassDeclaration\n publicclassCharacterBasedGenerativeModelimplementsICacheAble{doublel1,l2,l3;Probabilitytf;int[][][]transMatrix;staticfinalchar[]id2tag=newchar[]{'b','m','e','s','x'};staticfinalchar[]bos={'\b','x'};staticfinaldoubleinf=-1e10;staticfinalint[][]probableTail={{0,2},{1,2},{2,3},{3,3}};publicCharacterBasedGenerativeModel(){tf=newProbability();finalint[]nullArray={0,0,0,0,0};transMatrix=newint[5][][];transMatrix[0]=newint[][]{nullArray,{0,150,330,0,0},{160,0,0,168,20},nullArray,nullArray};transMatrix[1]=newint[][]{nullArray,{0,35,150,0,0},{210,0,0,263,3},nullArray,nullArray};transMatrix[2]=newint[][]{{0,200,1600,0,0},nullArray,nullArray,{1080,0,0,650,205},nullArray};transMatrix[3]=newint[][]{{0,200,1600,0,0},nullArray,nullArray,{640,0,0,700,63},nullArray};transMatrix[4]=newint[][]{{0,30,150,0,0},nullArray,nullArray,{60,0,0,50,3},{180,0,0,120,0}};}publicvoidlearn(List<Word>wordList){LinkedList<char[]>sentence=newLinkedList<char[]>();for(IWordiWord:wordList){Stringword=iWord.getValue();if(word.length()==1){sentence.add(newchar[]{word.charAt(0),'s'});}else{sentence.add(newchar[]{word.charAt(0),'b'});for(inti=1;i<word.length()-1;++i){sentence.add(newchar[]{word.charAt(i),'m'});}sentence.add(newchar[]{word.charAt(word.length()-1),'e'});}}char[][]now=newchar[3][];now[1]=bos;now[2]=bos;tf.add(1,bos,bos);tf.add(2,bos);for(char[]i:sentence){System.arraycopy(now,1,now,0,2);now[2]=i;tf.add(1,i);tf.add(1,now[1],now[2]);tf.add(1,now);}}publicvoidtrain(){doubletl1=0.0;doubletl2=0.0;doubletl3=0.0;for(Stringkey:tf.d.keySet()){if(key.length()!=6)continue;char[][]now=newchar[][]{{key.charAt(0),key.charAt(1)},{key.charAt(2),key.charAt(3)},{key.charAt(4),key.charAt(5)},};doublec3=div(tf.get(now)-1,tf.get(now[0],now[1])-1);doublec2=div(tf.get(now[1],now[2])-1,tf.get(now[1])-1);doublec1=div(tf.get(now[2])-1,tf.getsum()-1);if(c3>=c1&&c3>=c2)tl3+=tf.get(key.toCharArray());elseif(c2>=c1&&c2>=c3)tl2+=tf.get(key.toCharArray());elseif(c1>=c2&&c1>=c3)tl1+=tf.get(key.toCharArray());}l1=div(tl1,tl1+tl2+tl3);l2=div(tl2,tl1+tl2+tl3);l3=div(tl3,tl1+tl2+tl3);}doublelog_prob(chars1,inti1,chars2,inti2,chars3,inti3){if(transMatrix[i1][i2][i3]==0)returninf;chart1=id2tag[i1];chart2=id2tag[i2];chart3=id2tag[i3];doubleuni=l1*tf.freq(s3,t3);doublebi=div(l2*tf.get(s2,t2,s3,t3),tf.get(s2,t2));doubletri=div(l3*tf.get(s1,t1,s2,t2,s3,t3),tf.get(s1,t1,s2,t2));if(uni+bi+tri==0)returninf;returnMath.log(uni+bi+tri);}publicchar[]tag(char[]charArray){if(charArray.length==0)returnnewchar[0];if(charArray.length==1)returnnewchar[]{'s'};char[]tag=newchar[charArray.length];double[][]now=newdouble[4][4];double[]first=newdouble[4];int[][][]link=newint[charArray.length][4][4];for(ints=0;s<4;++s){doublep=(s==1||s==2)?inf:log_prob(bos[0],4,bos[0],4,charArray[0],s);first[s]=p;}for(intf=0;f<4;++f){for(ints=0;s<4;++s){doublep=first[f]+log_prob(bos[0],4,charArray[0],f,charArray[1],s);now[f][s]=p;link[1][f][s]=f;}}double[][]pre=newdouble[4][4];for(inti=2;i<charArray.length;i++){double[][]_=pre;pre=now;now=_;for(ints=0;s<4;++s){for(intt=0;t<4;++t){now[s][t]=-1e20;for(intf=0;f<4;++f){doublep=pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t);if(p>now[s][t]){now[s][t]=p;link[i][s][t]=f;}}}}}doublescore=charArray.length*inf;ints=0;intt=0;for(inti=0;i<probableTail.length;i++){int[]state=probableTail[i];if(now[state[0]][state[1]]>score){score=now[state[0]][state[1]];s=state[0];t=state[1];}}for(inti=link.length-1;i>=0;--i){tag[i]=id2tag[t];intf=link[i][s][t];t=s;s=f;}returntag;}privatestaticdoublediv(intv1,intv2){if(v2==0)return0.0;returnv1/(double)v2;}privatestaticdoublediv(doublev1,doublev2){if(v2==0)return0.0;returnv1/v2;}@Overridepublicvoidsave(DataOutputStreamout)throwsException{out.writeDouble(l1);out.writeDouble(l2);out.writeDouble(l3);tf.save(out);}@Overridepublicbooleanload(ByteArraybyteArray){l1=byteArray.nextDouble();l2=byteArray.nextDouble();l3=byteArray.nextDouble();tf.load(byteArray);returntrue;}} "]
224681[label="classModifier\n public "]
224682[label="superinterfaces\n implementsICacheAble "]
324683[label="classType\n ICacheAble "]
224684[label="classBody\n {doublel1,l2,l3;Probabilitytf;int[][][]transMatrix;staticfinalchar[]id2tag=newchar[]{'b','m','e','s','x'};staticfinalchar[]bos={'\b','x'};staticfinaldoubleinf=-1e10;staticfinalint[][]probableTail={{0,2},{1,2},{2,3},{3,3}};publicCharacterBasedGenerativeModel(){tf=newProbability();finalint[]nullArray={0,0,0,0,0};transMatrix=newint[5][][];transMatrix[0]=newint[][]{nullArray,{0,150,330,0,0},{160,0,0,168,20},nullArray,nullArray};transMatrix[1]=newint[][]{nullArray,{0,35,150,0,0},{210,0,0,263,3},nullArray,nullArray};transMatrix[2]=newint[][]{{0,200,1600,0,0},nullArray,nullArray,{1080,0,0,650,205},nullArray};transMatrix[3]=newint[][]{{0,200,1600,0,0},nullArray,nullArray,{640,0,0,700,63},nullArray};transMatrix[4]=newint[][]{{0,30,150,0,0},nullArray,nullArray,{60,0,0,50,3},{180,0,0,120,0}};}publicvoidlearn(List<Word>wordList){LinkedList<char[]>sentence=newLinkedList<char[]>();for(IWordiWord:wordList){Stringword=iWord.getValue();if(word.length()==1){sentence.add(newchar[]{word.charAt(0),'s'});}else{sentence.add(newchar[]{word.charAt(0),'b'});for(inti=1;i<word.length()-1;++i){sentence.add(newchar[]{word.charAt(i),'m'});}sentence.add(newchar[]{word.charAt(word.length()-1),'e'});}}char[][]now=newchar[3][];now[1]=bos;now[2]=bos;tf.add(1,bos,bos);tf.add(2,bos);for(char[]i:sentence){System.arraycopy(now,1,now,0,2);now[2]=i;tf.add(1,i);tf.add(1,now[1],now[2]);tf.add(1,now);}}publicvoidtrain(){doubletl1=0.0;doubletl2=0.0;doubletl3=0.0;for(Stringkey:tf.d.keySet()){if(key.length()!=6)continue;char[][]now=newchar[][]{{key.charAt(0),key.charAt(1)},{key.charAt(2),key.charAt(3)},{key.charAt(4),key.charAt(5)},};doublec3=div(tf.get(now)-1,tf.get(now[0],now[1])-1);doublec2=div(tf.get(now[1],now[2])-1,tf.get(now[1])-1);doublec1=div(tf.get(now[2])-1,tf.getsum()-1);if(c3>=c1&&c3>=c2)tl3+=tf.get(key.toCharArray());elseif(c2>=c1&&c2>=c3)tl2+=tf.get(key.toCharArray());elseif(c1>=c2&&c1>=c3)tl1+=tf.get(key.toCharArray());}l1=div(tl1,tl1+tl2+tl3);l2=div(tl2,tl1+tl2+tl3);l3=div(tl3,tl1+tl2+tl3);}doublelog_prob(chars1,inti1,chars2,inti2,chars3,inti3){if(transMatrix[i1][i2][i3]==0)returninf;chart1=id2tag[i1];chart2=id2tag[i2];chart3=id2tag[i3];doubleuni=l1*tf.freq(s3,t3);doublebi=div(l2*tf.get(s2,t2,s3,t3),tf.get(s2,t2));doubletri=div(l3*tf.get(s1,t1,s2,t2,s3,t3),tf.get(s1,t1,s2,t2));if(uni+bi+tri==0)returninf;returnMath.log(uni+bi+tri);}publicchar[]tag(char[]charArray){if(charArray.length==0)returnnewchar[0];if(charArray.length==1)returnnewchar[]{'s'};char[]tag=newchar[charArray.length];double[][]now=newdouble[4][4];double[]first=newdouble[4];int[][][]link=newint[charArray.length][4][4];for(ints=0;s<4;++s){doublep=(s==1||s==2)?inf:log_prob(bos[0],4,bos[0],4,charArray[0],s);first[s]=p;}for(intf=0;f<4;++f){for(ints=0;s<4;++s){doublep=first[f]+log_prob(bos[0],4,charArray[0],f,charArray[1],s);now[f][s]=p;link[1][f][s]=f;}}double[][]pre=newdouble[4][4];for(inti=2;i<charArray.length;i++){double[][]_=pre;pre=now;now=_;for(ints=0;s<4;++s){for(intt=0;t<4;++t){now[s][t]=-1e20;for(intf=0;f<4;++f){doublep=pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t);if(p>now[s][t]){now[s][t]=p;link[i][s][t]=f;}}}}}doublescore=charArray.length*inf;ints=0;intt=0;for(inti=0;i<probableTail.length;i++){int[]state=probableTail[i];if(now[state[0]][state[1]]>score){score=now[state[0]][state[1]];s=state[0];t=state[1];}}for(inti=link.length-1;i>=0;--i){tag[i]=id2tag[t];intf=link[i][s][t];t=s;s=f;}returntag;}privatestaticdoublediv(intv1,intv2){if(v2==0)return0.0;returnv1/(double)v2;}privatestaticdoublediv(doublev1,doublev2){if(v2==0)return0.0;returnv1/v2;}@Overridepublicvoidsave(DataOutputStreamout)throwsException{out.writeDouble(l1);out.writeDouble(l2);out.writeDouble(l3);tf.save(out);}@Overridepublicbooleanload(ByteArraybyteArray){l1=byteArray.nextDouble();l2=byteArray.nextDouble();l3=byteArray.nextDouble();tf.load(byteArray);returntrue;}} "]
324685[label="fieldDeclaration\n doublel1,l2,l3; "]
424686[label="floatingPointType\n double "]
424687[label="variableDeclaratorList\n l1,l2,l3 "]
524688[label="variableDeclaratorId\n l1 "]
524689[label="variableDeclaratorId\n l2 "]
524690[label="variableDeclaratorId\n l3 "]
324691[label="fieldDeclaration\n Probabilitytf; "]
424692[label="unannClassType_lfno_unannClassOrInterfaceType\n Probability "]
424693[label="variableDeclaratorId\n tf "]
324694[label="fieldDeclaration\n int[][][]transMatrix; "]
424695[label="unannArrayType\n int[][][] "]
524696[label="integralType\n int "]
524697[label="dims\n [][][] "]
424698[label="variableDeclaratorId\n transMatrix "]
324699[label="fieldDeclaration\n staticfinalchar[]id2tag=newchar[]{'b','m','e','s','x'}; "]
424700[label="fieldModifier\n static "]
424701[label="fieldModifier\n final "]
424702[label="unannArrayType\n char[] "]
524703[label="integralType\n char "]
524704[label="dims\n [] "]
424705[label="variableDeclarator\n id2tag=newchar[]{'b','m','e','s','x'} "]
524706[label="variableDeclaratorId\n id2tag "]
524707[label="arrayCreationExpression\n newchar[]{'b','m','e','s','x'} "]
624708[label="integralType\n char "]
624709[label="dims\n [] "]
624710[label="arrayInitializer\n {'b','m','e','s','x'} "]
724711[label="variableInitializerList\n 'b','m','e','s','x' "]
824712[label="literal\n 'b' "]
824713[label="literal\n 'm' "]
824714[label="literal\n 'e' "]
824715[label="literal\n 's' "]
824716[label="literal\n 'x' "]
324717[label="fieldDeclaration\n staticfinalchar[]bos={'\b','x'}; "]
424718[label="fieldModifier\n static "]
424719[label="fieldModifier\n final "]
424720[label="unannArrayType\n char[] "]
524721[label="integralType\n char "]
524722[label="dims\n [] "]
424723[label="variableDeclarator\n bos={'\b','x'} "]
524724[label="variableDeclaratorId\n bos "]
524725[label="arrayInitializer\n {'\b','x'} "]
624726[label="variableInitializerList\n '\b','x' "]
724727[label="literal\n '\b' "]
724728[label="literal\n 'x' "]
324729[label="fieldDeclaration\n staticfinaldoubleinf=-1e10; "]
424730[label="fieldModifier\n static "]
424731[label="fieldModifier\n final "]
424732[label="floatingPointType\n double "]
424733[label="variableDeclarator\n inf=-1e10 "]
524734[label="variableDeclaratorId\n inf "]
524735[label="unaryExpression\n -1e10 "]
624736[label="literal\n 1e10 "]
324737[label="fieldDeclaration\n staticfinalint[][]probableTail={{0,2},{1,2},{2,3},{3,3}}; "]
424738[label="fieldModifier\n static "]
424739[label="fieldModifier\n final "]
424740[label="unannArrayType\n int[][] "]
524741[label="integralType\n int "]
524742[label="dims\n [][] "]
424743[label="variableDeclarator\n probableTail={{0,2},{1,2},{2,3},{3,3}} "]
524744[label="variableDeclaratorId\n probableTail "]
524745[label="arrayInitializer\n {{0,2},{1,2},{2,3},{3,3}} "]
624746[label="variableInitializerList\n {0,2},{1,2},{2,3},{3,3} "]
724747[label="arrayInitializer\n {0,2} "]
824748[label="variableInitializerList\n 0,2 "]
924749[label="literal\n 0 "]
924750[label="literal\n 2 "]
724751[label="arrayInitializer\n {1,2} "]
824752[label="variableInitializerList\n 1,2 "]
924753[label="literal\n 1 "]
924754[label="literal\n 2 "]
724755[label="arrayInitializer\n {2,3} "]
824756[label="variableInitializerList\n 2,3 "]
924757[label="literal\n 2 "]
924758[label="literal\n 3 "]
724759[label="arrayInitializer\n {3,3} "]
824760[label="variableInitializerList\n 3,3 "]
924761[label="literal\n 3 "]
924762[label="literal\n 3 "]
324763[label="constructorDeclaration\n publicCharacterBasedGenerativeModel(){tf=newProbability();finalint[]nullArray={0,0,0,0,0};transMatrix=newint[5][][];transMatrix[0]=newint[][]{nullArray,{0,150,330,0,0},{160,0,0,168,20},nullArray,nullArray};transMatrix[1]=newint[][]{nullArray,{0,35,150,0,0},{210,0,0,263,3},nullArray,nullArray};transMatrix[2]=newint[][]{{0,200,1600,0,0},nullArray,nullArray,{1080,0,0,650,205},nullArray};transMatrix[3]=newint[][]{{0,200,1600,0,0},nullArray,nullArray,{640,0,0,700,63},nullArray};transMatrix[4]=newint[][]{{0,30,150,0,0},nullArray,nullArray,{60,0,0,50,3},{180,0,0,120,0}};} "]
424764[label="constructorModifier\n public "]
424765[label="constructorDeclarator\n CharacterBasedGenerativeModel() "]
524766[label="simpleTypeName\n CharacterBasedGenerativeModel "]
424767[label="constructorBody\n {tf=newProbability();finalint[]nullArray={0,0,0,0,0};transMatrix=newint[5][][];transMatrix[0]=newint[][]{nullArray,{0,150,330,0,0},{160,0,0,168,20},nullArray,nullArray};transMatrix[1]=newint[][]{nullArray,{0,35,150,0,0},{210,0,0,263,3},nullArray,nullArray};transMatrix[2]=newint[][]{{0,200,1600,0,0},nullArray,nullArray,{1080,0,0,650,205},nullArray};transMatrix[3]=newint[][]{{0,200,1600,0,0},nullArray,nullArray,{640,0,0,700,63},nullArray};transMatrix[4]=newint[][]{{0,30,150,0,0},nullArray,nullArray,{60,0,0,50,3},{180,0,0,120,0}};} "]
524768[label="blockStatements\n tf=newProbability();finalint[]nullArray={0,0,0,0,0};transMatrix=newint[5][][];transMatrix[0]=newint[][]{nullArray,{0,150,330,0,0},{160,0,0,168,20},nullArray,nullArray};transMatrix[1]=newint[][]{nullArray,{0,35,150,0,0},{210,0,0,263,3},nullArray,nullArray};transMatrix[2]=newint[][]{{0,200,1600,0,0},nullArray,nullArray,{1080,0,0,650,205},nullArray};transMatrix[3]=newint[][]{{0,200,1600,0,0},nullArray,nullArray,{640,0,0,700,63},nullArray};transMatrix[4]=newint[][]{{0,30,150,0,0},nullArray,nullArray,{60,0,0,50,3},{180,0,0,120,0}}; "]
624769[label="expressionStatement\n tf=newProbability(); "]
724770[label="assignment\n tf=newProbability() "]
824771[label="expressionName\n tf "]
824772[label="assignmentOperator\n = "]
824773[label="classInstanceCreationExpression_lfno_primary\n newProbability() "]
624774[label="localVariableDeclarationStatement\n finalint[]nullArray={0,0,0,0,0}; "]
724775[label="localVariableDeclaration\n finalint[]nullArray={0,0,0,0,0} "]
824776[label="variableModifier\n final "]
824777[label="unannArrayType\n int[] "]
924778[label="integralType\n int "]
924779[label="dims\n [] "]
824780[label="variableDeclarator\n nullArray={0,0,0,0,0} "]
924781[label="variableDeclaratorId\n nullArray "]
924782[label="arrayInitializer\n {0,0,0,0,0} "]
1024783[label="variableInitializerList\n 0,0,0,0,0 "]
1124784[label="literal\n 0 "]
1124785[label="literal\n 0 "]
1124786[label="literal\n 0 "]
1124787[label="literal\n 0 "]
1124788[label="literal\n 0 "]
624789[label="expressionStatement\n transMatrix=newint[5][][]; "]
724790[label="assignment\n transMatrix=newint[5][][] "]
824791[label="expressionName\n transMatrix "]
824792[label="assignmentOperator\n = "]
824793[label="arrayCreationExpression\n newint[5][][] "]
924794[label="integralType\n int "]
924795[label="dimExpr\n [5] "]
1024796[label="literal\n 5 "]
924797[label="dims\n [][] "]
624798[label="expressionStatement\n transMatrix[0]=newint[][]{nullArray,{0,150,330,0,0},{160,0,0,168,20},nullArray,nullArray}; "]
724799[label="assignment\n transMatrix[0]=newint[][]{nullArray,{0,150,330,0,0},{160,0,0,168,20},nullArray,nullArray} "]
824800[label="arrayAccess\n transMatrix[0] "]
924801[label="expressionName\n transMatrix "]
924802[label="literal\n 0 "]
824803[label="assignmentOperator\n = "]
824804[label="arrayCreationExpression\n newint[][]{nullArray,{0,150,330,0,0},{160,0,0,168,20},nullArray,nullArray} "]
924805[label="integralType\n int "]
924806[label="dims\n [][] "]
924807[label="arrayInitializer\n {nullArray,{0,150,330,0,0},{160,0,0,168,20},nullArray,nullArray} "]
1024808[label="variableInitializerList\n nullArray,{0,150,330,0,0},{160,0,0,168,20},nullArray,nullArray "]
1124809[label="expressionName\n nullArray "]
1124810[label="arrayInitializer\n {0,150,330,0,0} "]
1224811[label="variableInitializerList\n 0,150,330,0,0 "]
1324812[label="literal\n 0 "]
1324813[label="literal\n 150 "]
1324814[label="literal\n 330 "]
1324815[label="literal\n 0 "]
1324816[label="literal\n 0 "]
1124817[label="arrayInitializer\n {160,0,0,168,20} "]
1224818[label="variableInitializerList\n 160,0,0,168,20 "]
1324819[label="literal\n 160 "]
1324820[label="literal\n 0 "]
1324821[label="literal\n 0 "]
1324822[label="literal\n 168 "]
1324823[label="literal\n 20 "]
1124824[label="expressionName\n nullArray "]
1124825[label="expressionName\n nullArray "]
624826[label="expressionStatement\n transMatrix[1]=newint[][]{nullArray,{0,35,150,0,0},{210,0,0,263,3},nullArray,nullArray}; "]
724827[label="assignment\n transMatrix[1]=newint[][]{nullArray,{0,35,150,0,0},{210,0,0,263,3},nullArray,nullArray} "]
824828[label="arrayAccess\n transMatrix[1] "]
924829[label="expressionName\n transMatrix "]
924830[label="literal\n 1 "]
824831[label="assignmentOperator\n = "]
824832[label="arrayCreationExpression\n newint[][]{nullArray,{0,35,150,0,0},{210,0,0,263,3},nullArray,nullArray} "]
924833[label="integralType\n int "]
924834[label="dims\n [][] "]
924835[label="arrayInitializer\n {nullArray,{0,35,150,0,0},{210,0,0,263,3},nullArray,nullArray} "]
1024836[label="variableInitializerList\n nullArray,{0,35,150,0,0},{210,0,0,263,3},nullArray,nullArray "]
1124837[label="expressionName\n nullArray "]
1124838[label="arrayInitializer\n {0,35,150,0,0} "]
1224839[label="variableInitializerList\n 0,35,150,0,0 "]
1324840[label="literal\n 0 "]
1324841[label="literal\n 35 "]
1324842[label="literal\n 150 "]
1324843[label="literal\n 0 "]
1324844[label="literal\n 0 "]
1124845[label="arrayInitializer\n {210,0,0,263,3} "]
1224846[label="variableInitializerList\n 210,0,0,263,3 "]
1324847[label="literal\n 210 "]
1324848[label="literal\n 0 "]
1324849[label="literal\n 0 "]
1324850[label="literal\n 263 "]
1324851[label="literal\n 3 "]
1124852[label="expressionName\n nullArray "]
1124853[label="expressionName\n nullArray "]
624854[label="expressionStatement\n transMatrix[2]=newint[][]{{0,200,1600,0,0},nullArray,nullArray,{1080,0,0,650,205},nullArray}; "]
724855[label="assignment\n transMatrix[2]=newint[][]{{0,200,1600,0,0},nullArray,nullArray,{1080,0,0,650,205},nullArray} "]
824856[label="arrayAccess\n transMatrix[2] "]
924857[label="expressionName\n transMatrix "]
924858[label="literal\n 2 "]
824859[label="assignmentOperator\n = "]
824860[label="arrayCreationExpression\n newint[][]{{0,200,1600,0,0},nullArray,nullArray,{1080,0,0,650,205},nullArray} "]
924861[label="integralType\n int "]
924862[label="dims\n [][] "]
924863[label="arrayInitializer\n {{0,200,1600,0,0},nullArray,nullArray,{1080,0,0,650,205},nullArray} "]
1024864[label="variableInitializerList\n {0,200,1600,0,0},nullArray,nullArray,{1080,0,0,650,205},nullArray "]
1124865[label="arrayInitializer\n {0,200,1600,0,0} "]
1224866[label="variableInitializerList\n 0,200,1600,0,0 "]
1324867[label="literal\n 0 "]
1324868[label="literal\n 200 "]
1324869[label="literal\n 1600 "]
1324870[label="literal\n 0 "]
1324871[label="literal\n 0 "]
1124872[label="expressionName\n nullArray "]
1124873[label="expressionName\n nullArray "]
1124874[label="arrayInitializer\n {1080,0,0,650,205} "]
1224875[label="variableInitializerList\n 1080,0,0,650,205 "]
1324876[label="literal\n 1080 "]
1324877[label="literal\n 0 "]
1324878[label="literal\n 0 "]
1324879[label="literal\n 650 "]
1324880[label="literal\n 205 "]
1124881[label="expressionName\n nullArray "]
624882[label="expressionStatement\n transMatrix[3]=newint[][]{{0,200,1600,0,0},nullArray,nullArray,{640,0,0,700,63},nullArray}; "]
724883[label="assignment\n transMatrix[3]=newint[][]{{0,200,1600,0,0},nullArray,nullArray,{640,0,0,700,63},nullArray} "]
824884[label="arrayAccess\n transMatrix[3] "]
924885[label="expressionName\n transMatrix "]
924886[label="literal\n 3 "]
824887[label="assignmentOperator\n = "]
824888[label="arrayCreationExpression\n newint[][]{{0,200,1600,0,0},nullArray,nullArray,{640,0,0,700,63},nullArray} "]
924889[label="integralType\n int "]
924890[label="dims\n [][] "]
924891[label="arrayInitializer\n {{0,200,1600,0,0},nullArray,nullArray,{640,0,0,700,63},nullArray} "]
1024892[label="variableInitializerList\n {0,200,1600,0,0},nullArray,nullArray,{640,0,0,700,63},nullArray "]
1124893[label="arrayInitializer\n {0,200,1600,0,0} "]
1224894[label="variableInitializerList\n 0,200,1600,0,0 "]
1324895[label="literal\n 0 "]
1324896[label="literal\n 200 "]
1324897[label="literal\n 1600 "]
1324898[label="literal\n 0 "]
1324899[label="literal\n 0 "]
1124900[label="expressionName\n nullArray "]
1124901[label="expressionName\n nullArray "]
1124902[label="arrayInitializer\n {640,0,0,700,63} "]
1224903[label="variableInitializerList\n 640,0,0,700,63 "]
1324904[label="literal\n 640 "]
1324905[label="literal\n 0 "]
1324906[label="literal\n 0 "]
1324907[label="literal\n 700 "]
1324908[label="literal\n 63 "]
1124909[label="expressionName\n nullArray "]
624910[label="expressionStatement\n transMatrix[4]=newint[][]{{0,30,150,0,0},nullArray,nullArray,{60,0,0,50,3},{180,0,0,120,0}}; "]
724911[label="assignment\n transMatrix[4]=newint[][]{{0,30,150,0,0},nullArray,nullArray,{60,0,0,50,3},{180,0,0,120,0}} "]
824912[label="arrayAccess\n transMatrix[4] "]
924913[label="expressionName\n transMatrix "]
924914[label="literal\n 4 "]
824915[label="assignmentOperator\n = "]
824916[label="arrayCreationExpression\n newint[][]{{0,30,150,0,0},nullArray,nullArray,{60,0,0,50,3},{180,0,0,120,0}} "]
924917[label="integralType\n int "]
924918[label="dims\n [][] "]
924919[label="arrayInitializer\n {{0,30,150,0,0},nullArray,nullArray,{60,0,0,50,3},{180,0,0,120,0}} "]
1024920[label="variableInitializerList\n {0,30,150,0,0},nullArray,nullArray,{60,0,0,50,3},{180,0,0,120,0} "]
1124921[label="arrayInitializer\n {0,30,150,0,0} "]
1224922[label="variableInitializerList\n 0,30,150,0,0 "]
1324923[label="literal\n 0 "]
1324924[label="literal\n 30 "]
1324925[label="literal\n 150 "]
1324926[label="literal\n 0 "]
1324927[label="literal\n 0 "]
1124928[label="expressionName\n nullArray "]
1124929[label="expressionName\n nullArray "]
1124930[label="arrayInitializer\n {60,0,0,50,3} "]
1224931[label="variableInitializerList\n 60,0,0,50,3 "]
1324932[label="literal\n 60 "]
1324933[label="literal\n 0 "]
1324934[label="literal\n 0 "]
1324935[label="literal\n 50 "]
1324936[label="literal\n 3 "]
1124937[label="arrayInitializer\n {180,0,0,120,0} "]
1224938[label="variableInitializerList\n 180,0,0,120,0 "]
1324939[label="literal\n 180 "]
1324940[label="literal\n 0 "]
1324941[label="literal\n 0 "]
1324942[label="literal\n 120 "]
1324943[label="literal\n 0 "]
324944[label="methodDeclaration\n publicvoidlearn(List<Word>wordList){LinkedList<char[]>sentence=newLinkedList<char[]>();for(IWordiWord:wordList){Stringword=iWord.getValue();if(word.length()==1){sentence.add(newchar[]{word.charAt(0),'s'});}else{sentence.add(newchar[]{word.charAt(0),'b'});for(inti=1;i<word.length()-1;++i){sentence.add(newchar[]{word.charAt(i),'m'});}sentence.add(newchar[]{word.charAt(word.length()-1),'e'});}}char[][]now=newchar[3][];now[1]=bos;now[2]=bos;tf.add(1,bos,bos);tf.add(2,bos);for(char[]i:sentence){System.arraycopy(now,1,now,0,2);now[2]=i;tf.add(1,i);tf.add(1,now[1],now[2]);tf.add(1,now);}} "]
424945[label="methodModifier\n public "]
424946[label="methodHeader\n voidlearn(List<Word>wordList) "]
524947[label="result\n void "]
524948[label="methodDeclarator\n learn(List<Word>wordList) "]
624949[label="formalParameter\n List<Word>wordList "]
724950[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Word> "]
824951[label="typeArguments\n <Word> "]
924952[label="classType_lfno_classOrInterfaceType\n Word "]
724953[label="variableDeclaratorId\n wordList "]
424954[label="block\n {LinkedList<char[]>sentence=newLinkedList<char[]>();for(IWordiWord:wordList){Stringword=iWord.getValue();if(word.length()==1){sentence.add(newchar[]{word.charAt(0),'s'});}else{sentence.add(newchar[]{word.charAt(0),'b'});for(inti=1;i<word.length()-1;++i){sentence.add(newchar[]{word.charAt(i),'m'});}sentence.add(newchar[]{word.charAt(word.length()-1),'e'});}}char[][]now=newchar[3][];now[1]=bos;now[2]=bos;tf.add(1,bos,bos);tf.add(2,bos);for(char[]i:sentence){System.arraycopy(now,1,now,0,2);now[2]=i;tf.add(1,i);tf.add(1,now[1],now[2]);tf.add(1,now);}} "]
524955[label="blockStatements\n LinkedList<char[]>sentence=newLinkedList<char[]>();for(IWordiWord:wordList){Stringword=iWord.getValue();if(word.length()==1){sentence.add(newchar[]{word.charAt(0),'s'});}else{sentence.add(newchar[]{word.charAt(0),'b'});for(inti=1;i<word.length()-1;++i){sentence.add(newchar[]{word.charAt(i),'m'});}sentence.add(newchar[]{word.charAt(word.length()-1),'e'});}}char[][]now=newchar[3][];now[1]=bos;now[2]=bos;tf.add(1,bos,bos);tf.add(2,bos);for(char[]i:sentence){System.arraycopy(now,1,now,0,2);now[2]=i;tf.add(1,i);tf.add(1,now[1],now[2]);tf.add(1,now);} "]
624956[label="localVariableDeclarationStatement\n LinkedList<char[]>sentence=newLinkedList<char[]>(); "]
724957[label="localVariableDeclaration\n LinkedList<char[]>sentence=newLinkedList<char[]>() "]
824958[label="unannClassType_lfno_unannClassOrInterfaceType\n LinkedList<char[]> "]
924959[label="typeArguments\n <char[]> "]
1024960[label="arrayType\n char[] "]
1124961[label="integralType\n char "]
1124962[label="dims\n [] "]
824963[label="variableDeclarator\n sentence=newLinkedList<char[]>() "]
924964[label="variableDeclaratorId\n sentence "]
924965[label="classInstanceCreationExpression_lfno_primary\n newLinkedList<char[]>() "]
1024966[label="typeArguments\n <char[]> "]
1124967[label="arrayType\n char[] "]
1224968[label="integralType\n char "]
1224969[label="dims\n [] "]
624970[label="enhancedForStatement\n for(IWordiWord:wordList){Stringword=iWord.getValue();if(word.length()==1){sentence.add(newchar[]{word.charAt(0),'s'});}else{sentence.add(newchar[]{word.charAt(0),'b'});for(inti=1;i<word.length()-1;++i){sentence.add(newchar[]{word.charAt(i),'m'});}sentence.add(newchar[]{word.charAt(word.length()-1),'e'});}} "]
724971[label="unannClassType_lfno_unannClassOrInterfaceType\n IWord "]
724972[label="variableDeclaratorId\n iWord "]
724973[label="expressionName\n wordList "]
724974[label="block\n {Stringword=iWord.getValue();if(word.length()==1){sentence.add(newchar[]{word.charAt(0),'s'});}else{sentence.add(newchar[]{word.charAt(0),'b'});for(inti=1;i<word.length()-1;++i){sentence.add(newchar[]{word.charAt(i),'m'});}sentence.add(newchar[]{word.charAt(word.length()-1),'e'});}} "]
824975[label="blockStatements\n Stringword=iWord.getValue();if(word.length()==1){sentence.add(newchar[]{word.charAt(0),'s'});}else{sentence.add(newchar[]{word.charAt(0),'b'});for(inti=1;i<word.length()-1;++i){sentence.add(newchar[]{word.charAt(i),'m'});}sentence.add(newchar[]{word.charAt(word.length()-1),'e'});} "]
924976[label="localVariableDeclarationStatement\n Stringword=iWord.getValue(); "]
1024977[label="localVariableDeclaration\n Stringword=iWord.getValue() "]
1124978[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1124979[label="variableDeclarator\n word=iWord.getValue() "]
1224980[label="variableDeclaratorId\n word "]
1224981[label="methodInvocation_lfno_primary\n iWord.getValue() "]
1324982[label="typeName\n iWord "]
924983[label="ifThenElseStatement\n if(word.length()==1){sentence.add(newchar[]{word.charAt(0),'s'});}else{sentence.add(newchar[]{word.charAt(0),'b'});for(inti=1;i<word.length()-1;++i){sentence.add(newchar[]{word.charAt(i),'m'});}sentence.add(newchar[]{word.charAt(word.length()-1),'e'});} "]
1024984[label="equalityExpression\n word.length()==1 "]
1124985[label="methodInvocation_lfno_primary\n word.length() "]
1224986[label="typeName\n word "]
1124987[label="literal\n 1 "]
1024988[label="block\n {sentence.add(newchar[]{word.charAt(0),'s'});} "]
1124989[label="expressionStatement\n sentence.add(newchar[]{word.charAt(0),'s'}); "]
1224990[label="methodInvocation\n sentence.add(newchar[]{word.charAt(0),'s'}) "]
1324991[label="typeName\n sentence "]
1324992[label="arrayCreationExpression\n newchar[]{word.charAt(0),'s'} "]
1424993[label="integralType\n char "]
1424994[label="dims\n [] "]
1424995[label="arrayInitializer\n {word.charAt(0),'s'} "]
1524996[label="variableInitializerList\n word.charAt(0),'s' "]
1624997[label="methodInvocation_lfno_primary\n word.charAt(0) "]
1724998[label="typeName\n word "]
1724999[label="literal\n 0 "]
1625000[label="literal\n 's' "]
1025001[label="block\n {sentence.add(newchar[]{word.charAt(0),'b'});for(inti=1;i<word.length()-1;++i){sentence.add(newchar[]{word.charAt(i),'m'});}sentence.add(newchar[]{word.charAt(word.length()-1),'e'});} "]
1125002[label="blockStatements\n sentence.add(newchar[]{word.charAt(0),'b'});for(inti=1;i<word.length()-1;++i){sentence.add(newchar[]{word.charAt(i),'m'});}sentence.add(newchar[]{word.charAt(word.length()-1),'e'}); "]
1225003[label="expressionStatement\n sentence.add(newchar[]{word.charAt(0),'b'}); "]
1325004[label="methodInvocation\n sentence.add(newchar[]{word.charAt(0),'b'}) "]
1425005[label="typeName\n sentence "]
1425006[label="arrayCreationExpression\n newchar[]{word.charAt(0),'b'} "]
1525007[label="integralType\n char "]
1525008[label="dims\n [] "]
1525009[label="arrayInitializer\n {word.charAt(0),'b'} "]
1625010[label="variableInitializerList\n word.charAt(0),'b' "]
1725011[label="methodInvocation_lfno_primary\n word.charAt(0) "]
1825012[label="typeName\n word "]
1825013[label="literal\n 0 "]
1725014[label="literal\n 'b' "]
1225015[label="basicForStatement\n for(inti=1;i<word.length()-1;++i){sentence.add(newchar[]{word.charAt(i),'m'});} "]
1325016[label="localVariableDeclaration\n inti=1 "]
1425017[label="integralType\n int "]
1425018[label="variableDeclarator\n i=1 "]
1525019[label="variableDeclaratorId\n i "]
1525020[label="literal\n 1 "]
1325021[label="relationalExpression\n i<word.length()-1 "]
1425022[label="expressionName\n i "]
1425023[label="additiveExpression\n word.length()-1 "]
1525024[label="methodInvocation_lfno_primary\n word.length() "]
1625025[label="typeName\n word "]
1525026[label="literal\n 1 "]
1325027[label="preIncrementExpression\n ++i "]
1425028[label="expressionName\n i "]
1325029[label="block\n {sentence.add(newchar[]{word.charAt(i),'m'});} "]
1425030[label="expressionStatement\n sentence.add(newchar[]{word.charAt(i),'m'}); "]
1525031[label="methodInvocation\n sentence.add(newchar[]{word.charAt(i),'m'}) "]
1625032[label="typeName\n sentence "]
1625033[label="arrayCreationExpression\n newchar[]{word.charAt(i),'m'} "]
1725034[label="integralType\n char "]
1725035[label="dims\n [] "]
1725036[label="arrayInitializer\n {word.charAt(i),'m'} "]
1825037[label="variableInitializerList\n word.charAt(i),'m' "]
1925038[label="methodInvocation_lfno_primary\n word.charAt(i) "]
2025039[label="typeName\n word "]
2025040[label="expressionName\n i "]
1925041[label="literal\n 'm' "]
1225042[label="expressionStatement\n sentence.add(newchar[]{word.charAt(word.length()-1),'e'}); "]
1325043[label="methodInvocation\n sentence.add(newchar[]{word.charAt(word.length()-1),'e'}) "]
1425044[label="typeName\n sentence "]
1425045[label="arrayCreationExpression\n newchar[]{word.charAt(word.length()-1),'e'} "]
1525046[label="integralType\n char "]
1525047[label="dims\n [] "]
1525048[label="arrayInitializer\n {word.charAt(word.length()-1),'e'} "]
1625049[label="variableInitializerList\n word.charAt(word.length()-1),'e' "]
1725050[label="methodInvocation_lfno_primary\n word.charAt(word.length()-1) "]
1825051[label="typeName\n word "]
1825052[label="additiveExpression\n word.length()-1 "]
1925053[label="methodInvocation_lfno_primary\n word.length() "]
2025054[label="typeName\n word "]
1925055[label="literal\n 1 "]
1725056[label="literal\n 'e' "]
625057[label="localVariableDeclarationStatement\n char[][]now=newchar[3][]; "]
725058[label="localVariableDeclaration\n char[][]now=newchar[3][] "]
825059[label="unannArrayType\n char[][] "]
925060[label="integralType\n char "]
925061[label="dims\n [][] "]
825062[label="variableDeclarator\n now=newchar[3][] "]
925063[label="variableDeclaratorId\n now "]
925064[label="arrayCreationExpression\n newchar[3][] "]
1025065[label="integralType\n char "]
1025066[label="dimExpr\n [3] "]
1125067[label="literal\n 3 "]
1025068[label="dims\n [] "]
625069[label="expressionStatement\n now[1]=bos; "]
725070[label="assignment\n now[1]=bos "]
825071[label="arrayAccess\n now[1] "]
925072[label="expressionName\n now "]
925073[label="literal\n 1 "]
825074[label="assignmentOperator\n = "]
825075[label="expressionName\n bos "]
625076[label="expressionStatement\n now[2]=bos; "]
725077[label="assignment\n now[2]=bos "]
825078[label="arrayAccess\n now[2] "]
925079[label="expressionName\n now "]
925080[label="literal\n 2 "]
825081[label="assignmentOperator\n = "]
825082[label="expressionName\n bos "]
625083[label="expressionStatement\n tf.add(1,bos,bos); "]
725084[label="methodInvocation\n tf.add(1,bos,bos) "]
825085[label="typeName\n tf "]
825086[label="argumentList\n 1,bos,bos "]
925087[label="literal\n 1 "]
925088[label="expressionName\n bos "]
925089[label="expressionName\n bos "]
625090[label="expressionStatement\n tf.add(2,bos); "]
725091[label="methodInvocation\n tf.add(2,bos) "]
825092[label="typeName\n tf "]
825093[label="argumentList\n 2,bos "]
925094[label="literal\n 2 "]
925095[label="expressionName\n bos "]
625096[label="enhancedForStatement\n for(char[]i:sentence){System.arraycopy(now,1,now,0,2);now[2]=i;tf.add(1,i);tf.add(1,now[1],now[2]);tf.add(1,now);} "]
725097[label="unannArrayType\n char[] "]
825098[label="integralType\n char "]
825099[label="dims\n [] "]
725100[label="variableDeclaratorId\n i "]
725101[label="expressionName\n sentence "]
725102[label="block\n {System.arraycopy(now,1,now,0,2);now[2]=i;tf.add(1,i);tf.add(1,now[1],now[2]);tf.add(1,now);} "]
825103[label="blockStatements\n System.arraycopy(now,1,now,0,2);now[2]=i;tf.add(1,i);tf.add(1,now[1],now[2]);tf.add(1,now); "]
925104[label="expressionStatement\n System.arraycopy(now,1,now,0,2); "]
1025105[label="methodInvocation\n System.arraycopy(now,1,now,0,2) "]
1125106[label="typeName\n System "]
1125107[label="argumentList\n now,1,now,0,2 "]
1225108[label="expressionName\n now "]
1225109[label="literal\n 1 "]
1225110[label="expressionName\n now "]
1225111[label="literal\n 0 "]
1225112[label="literal\n 2 "]
925113[label="expressionStatement\n now[2]=i; "]
1025114[label="assignment\n now[2]=i "]
1125115[label="arrayAccess\n now[2] "]
1225116[label="expressionName\n now "]
1225117[label="literal\n 2 "]
1125118[label="assignmentOperator\n = "]
1125119[label="expressionName\n i "]
925120[label="expressionStatement\n tf.add(1,i); "]
1025121[label="methodInvocation\n tf.add(1,i) "]
1125122[label="typeName\n tf "]
1125123[label="argumentList\n 1,i "]
1225124[label="literal\n 1 "]
1225125[label="expressionName\n i "]
925126[label="expressionStatement\n tf.add(1,now[1],now[2]); "]
1025127[label="methodInvocation\n tf.add(1,now[1],now[2]) "]
1125128[label="typeName\n tf "]
1125129[label="argumentList\n 1,now[1],now[2] "]
1225130[label="literal\n 1 "]
1225131[label="arrayAccess_lfno_primary\n now[1] "]
1325132[label="expressionName\n now "]
1325133[label="literal\n 1 "]
1225134[label="arrayAccess_lfno_primary\n now[2] "]
1325135[label="expressionName\n now "]
1325136[label="literal\n 2 "]
925137[label="expressionStatement\n tf.add(1,now); "]
1025138[label="methodInvocation\n tf.add(1,now) "]
1125139[label="typeName\n tf "]
1125140[label="argumentList\n 1,now "]
1225141[label="literal\n 1 "]
1225142[label="expressionName\n now "]
325143[label="methodDeclaration\n publicvoidtrain(){doubletl1=0.0;doubletl2=0.0;doubletl3=0.0;for(Stringkey:tf.d.keySet()){if(key.length()!=6)continue;char[][]now=newchar[][]{{key.charAt(0),key.charAt(1)},{key.charAt(2),key.charAt(3)},{key.charAt(4),key.charAt(5)},};doublec3=div(tf.get(now)-1,tf.get(now[0],now[1])-1);doublec2=div(tf.get(now[1],now[2])-1,tf.get(now[1])-1);doublec1=div(tf.get(now[2])-1,tf.getsum()-1);if(c3>=c1&&c3>=c2)tl3+=tf.get(key.toCharArray());elseif(c2>=c1&&c2>=c3)tl2+=tf.get(key.toCharArray());elseif(c1>=c2&&c1>=c3)tl1+=tf.get(key.toCharArray());}l1=div(tl1,tl1+tl2+tl3);l2=div(tl2,tl1+tl2+tl3);l3=div(tl3,tl1+tl2+tl3);} "]
425144[label="methodModifier\n public "]
425145[label="methodHeader\n voidtrain() "]
525146[label="result\n void "]
525147[label="methodDeclarator\n train() "]
425148[label="block\n {doubletl1=0.0;doubletl2=0.0;doubletl3=0.0;for(Stringkey:tf.d.keySet()){if(key.length()!=6)continue;char[][]now=newchar[][]{{key.charAt(0),key.charAt(1)},{key.charAt(2),key.charAt(3)},{key.charAt(4),key.charAt(5)},};doublec3=div(tf.get(now)-1,tf.get(now[0],now[1])-1);doublec2=div(tf.get(now[1],now[2])-1,tf.get(now[1])-1);doublec1=div(tf.get(now[2])-1,tf.getsum()-1);if(c3>=c1&&c3>=c2)tl3+=tf.get(key.toCharArray());elseif(c2>=c1&&c2>=c3)tl2+=tf.get(key.toCharArray());elseif(c1>=c2&&c1>=c3)tl1+=tf.get(key.toCharArray());}l1=div(tl1,tl1+tl2+tl3);l2=div(tl2,tl1+tl2+tl3);l3=div(tl3,tl1+tl2+tl3);} "]
525149[label="blockStatements\n doubletl1=0.0;doubletl2=0.0;doubletl3=0.0;for(Stringkey:tf.d.keySet()){if(key.length()!=6)continue;char[][]now=newchar[][]{{key.charAt(0),key.charAt(1)},{key.charAt(2),key.charAt(3)},{key.charAt(4),key.charAt(5)},};doublec3=div(tf.get(now)-1,tf.get(now[0],now[1])-1);doublec2=div(tf.get(now[1],now[2])-1,tf.get(now[1])-1);doublec1=div(tf.get(now[2])-1,tf.getsum()-1);if(c3>=c1&&c3>=c2)tl3+=tf.get(key.toCharArray());elseif(c2>=c1&&c2>=c3)tl2+=tf.get(key.toCharArray());elseif(c1>=c2&&c1>=c3)tl1+=tf.get(key.toCharArray());}l1=div(tl1,tl1+tl2+tl3);l2=div(tl2,tl1+tl2+tl3);l3=div(tl3,tl1+tl2+tl3); "]
625150[label="localVariableDeclarationStatement\n doubletl1=0.0; "]
725151[label="localVariableDeclaration\n doubletl1=0.0 "]
825152[label="floatingPointType\n double "]
825153[label="variableDeclarator\n tl1=0.0 "]
925154[label="variableDeclaratorId\n tl1 "]
925155[label="literal\n 0.0 "]
625156[label="localVariableDeclarationStatement\n doubletl2=0.0; "]
725157[label="localVariableDeclaration\n doubletl2=0.0 "]
825158[label="floatingPointType\n double "]
825159[label="variableDeclarator\n tl2=0.0 "]
925160[label="variableDeclaratorId\n tl2 "]
925161[label="literal\n 0.0 "]
625162[label="localVariableDeclarationStatement\n doubletl3=0.0; "]
725163[label="localVariableDeclaration\n doubletl3=0.0 "]
825164[label="floatingPointType\n double "]
825165[label="variableDeclarator\n tl3=0.0 "]
925166[label="variableDeclaratorId\n tl3 "]
925167[label="literal\n 0.0 "]
625168[label="enhancedForStatement\n for(Stringkey:tf.d.keySet()){if(key.length()!=6)continue;char[][]now=newchar[][]{{key.charAt(0),key.charAt(1)},{key.charAt(2),key.charAt(3)},{key.charAt(4),key.charAt(5)},};doublec3=div(tf.get(now)-1,tf.get(now[0],now[1])-1);doublec2=div(tf.get(now[1],now[2])-1,tf.get(now[1])-1);doublec1=div(tf.get(now[2])-1,tf.getsum()-1);if(c3>=c1&&c3>=c2)tl3+=tf.get(key.toCharArray());elseif(c2>=c1&&c2>=c3)tl2+=tf.get(key.toCharArray());elseif(c1>=c2&&c1>=c3)tl1+=tf.get(key.toCharArray());} "]
725169[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
725170[label="variableDeclaratorId\n key "]
725171[label="methodInvocation_lfno_primary\n tf.d.keySet() "]
825172[label="typeName\n tf.d "]
925173[label="packageOrTypeName\n tf "]
725174[label="block\n {if(key.length()!=6)continue;char[][]now=newchar[][]{{key.charAt(0),key.charAt(1)},{key.charAt(2),key.charAt(3)},{key.charAt(4),key.charAt(5)},};doublec3=div(tf.get(now)-1,tf.get(now[0],now[1])-1);doublec2=div(tf.get(now[1],now[2])-1,tf.get(now[1])-1);doublec1=div(tf.get(now[2])-1,tf.getsum()-1);if(c3>=c1&&c3>=c2)tl3+=tf.get(key.toCharArray());elseif(c2>=c1&&c2>=c3)tl2+=tf.get(key.toCharArray());elseif(c1>=c2&&c1>=c3)tl1+=tf.get(key.toCharArray());} "]
825175[label="blockStatements\n if(key.length()!=6)continue;char[][]now=newchar[][]{{key.charAt(0),key.charAt(1)},{key.charAt(2),key.charAt(3)},{key.charAt(4),key.charAt(5)},};doublec3=div(tf.get(now)-1,tf.get(now[0],now[1])-1);doublec2=div(tf.get(now[1],now[2])-1,tf.get(now[1])-1);doublec1=div(tf.get(now[2])-1,tf.getsum()-1);if(c3>=c1&&c3>=c2)tl3+=tf.get(key.toCharArray());elseif(c2>=c1&&c2>=c3)tl2+=tf.get(key.toCharArray());elseif(c1>=c2&&c1>=c3)tl1+=tf.get(key.toCharArray()); "]
925176[label="ifThenStatement\n if(key.length()!=6)continue; "]
1025177[label="equalityExpression\n key.length()!=6 "]
1125178[label="methodInvocation_lfno_primary\n key.length() "]
1225179[label="typeName\n key "]
1125180[label="literal\n 6 "]
1025181[label="continueStatement\n continue; "]
925182[label="localVariableDeclarationStatement\n char[][]now=newchar[][]{{key.charAt(0),key.charAt(1)},{key.charAt(2),key.charAt(3)},{key.charAt(4),key.charAt(5)},}; "]
1025183[label="localVariableDeclaration\n char[][]now=newchar[][]{{key.charAt(0),key.charAt(1)},{key.charAt(2),key.charAt(3)},{key.charAt(4),key.charAt(5)},} "]
1125184[label="unannArrayType\n char[][] "]
1225185[label="integralType\n char "]
1225186[label="dims\n [][] "]
1125187[label="variableDeclarator\n now=newchar[][]{{key.charAt(0),key.charAt(1)},{key.charAt(2),key.charAt(3)},{key.charAt(4),key.charAt(5)},} "]
1225188[label="variableDeclaratorId\n now "]
1225189[label="arrayCreationExpression\n newchar[][]{{key.charAt(0),key.charAt(1)},{key.charAt(2),key.charAt(3)},{key.charAt(4),key.charAt(5)},} "]
1325190[label="integralType\n char "]
1325191[label="dims\n [][] "]
1325192[label="arrayInitializer\n {{key.charAt(0),key.charAt(1)},{key.charAt(2),key.charAt(3)},{key.charAt(4),key.charAt(5)},} "]
1425193[label="variableInitializerList\n {key.charAt(0),key.charAt(1)},{key.charAt(2),key.charAt(3)},{key.charAt(4),key.charAt(5)} "]
1525194[label="arrayInitializer\n {key.charAt(0),key.charAt(1)} "]
1625195[label="variableInitializerList\n key.charAt(0),key.charAt(1) "]
1725196[label="methodInvocation_lfno_primary\n key.charAt(0) "]
1825197[label="typeName\n key "]
1825198[label="literal\n 0 "]
1725199[label="methodInvocation_lfno_primary\n key.charAt(1) "]
1825200[label="typeName\n key "]
1825201[label="literal\n 1 "]
1525202[label="arrayInitializer\n {key.charAt(2),key.charAt(3)} "]
1625203[label="variableInitializerList\n key.charAt(2),key.charAt(3) "]
1725204[label="methodInvocation_lfno_primary\n key.charAt(2) "]
1825205[label="typeName\n key "]
1825206[label="literal\n 2 "]
1725207[label="methodInvocation_lfno_primary\n key.charAt(3) "]
1825208[label="typeName\n key "]
1825209[label="literal\n 3 "]
1525210[label="arrayInitializer\n {key.charAt(4),key.charAt(5)} "]
1625211[label="variableInitializerList\n key.charAt(4),key.charAt(5) "]
1725212[label="methodInvocation_lfno_primary\n key.charAt(4) "]
1825213[label="typeName\n key "]
1825214[label="literal\n 4 "]
1725215[label="methodInvocation_lfno_primary\n key.charAt(5) "]
1825216[label="typeName\n key "]
1825217[label="literal\n 5 "]
925218[label="localVariableDeclarationStatement\n doublec3=div(tf.get(now)-1,tf.get(now[0],now[1])-1); "]
1025219[label="localVariableDeclaration\n doublec3=div(tf.get(now)-1,tf.get(now[0],now[1])-1) "]
1125220[label="floatingPointType\n double "]
1125221[label="variableDeclarator\n c3=div(tf.get(now)-1,tf.get(now[0],now[1])-1) "]
1225222[label="variableDeclaratorId\n c3 "]
1225223[label="methodInvocation_lfno_primary\n div(tf.get(now)-1,tf.get(now[0],now[1])-1) "]
1325224[label="methodName\n div "]
1325225[label="argumentList\n tf.get(now)-1,tf.get(now[0],now[1])-1 "]
1425226[label="additiveExpression\n tf.get(now)-1 "]
1525227[label="methodInvocation_lfno_primary\n tf.get(now) "]
1625228[label="typeName\n tf "]
1625229[label="expressionName\n now "]
1525230[label="literal\n 1 "]
1425231[label="additiveExpression\n tf.get(now[0],now[1])-1 "]
1525232[label="methodInvocation_lfno_primary\n tf.get(now[0],now[1]) "]
1625233[label="typeName\n tf "]
1625234[label="argumentList\n now[0],now[1] "]
1725235[label="arrayAccess_lfno_primary\n now[0] "]
1825236[label="expressionName\n now "]
1825237[label="literal\n 0 "]
1725238[label="arrayAccess_lfno_primary\n now[1] "]
1825239[label="expressionName\n now "]
1825240[label="literal\n 1 "]
1525241[label="literal\n 1 "]
925242[label="localVariableDeclarationStatement\n doublec2=div(tf.get(now[1],now[2])-1,tf.get(now[1])-1); "]
1025243[label="localVariableDeclaration\n doublec2=div(tf.get(now[1],now[2])-1,tf.get(now[1])-1) "]
1125244[label="floatingPointType\n double "]
1125245[label="variableDeclarator\n c2=div(tf.get(now[1],now[2])-1,tf.get(now[1])-1) "]
1225246[label="variableDeclaratorId\n c2 "]
1225247[label="methodInvocation_lfno_primary\n div(tf.get(now[1],now[2])-1,tf.get(now[1])-1) "]
1325248[label="methodName\n div "]
1325249[label="argumentList\n tf.get(now[1],now[2])-1,tf.get(now[1])-1 "]
1425250[label="additiveExpression\n tf.get(now[1],now[2])-1 "]
1525251[label="methodInvocation_lfno_primary\n tf.get(now[1],now[2]) "]
1625252[label="typeName\n tf "]
1625253[label="argumentList\n now[1],now[2] "]
1725254[label="arrayAccess_lfno_primary\n now[1] "]
1825255[label="expressionName\n now "]
1825256[label="literal\n 1 "]
1725257[label="arrayAccess_lfno_primary\n now[2] "]
1825258[label="expressionName\n now "]
1825259[label="literal\n 2 "]
1525260[label="literal\n 1 "]
1425261[label="additiveExpression\n tf.get(now[1])-1 "]
1525262[label="methodInvocation_lfno_primary\n tf.get(now[1]) "]
1625263[label="typeName\n tf "]
1625264[label="arrayAccess_lfno_primary\n now[1] "]
1725265[label="expressionName\n now "]
1725266[label="literal\n 1 "]
1525267[label="literal\n 1 "]
925268[label="localVariableDeclarationStatement\n doublec1=div(tf.get(now[2])-1,tf.getsum()-1); "]
1025269[label="localVariableDeclaration\n doublec1=div(tf.get(now[2])-1,tf.getsum()-1) "]
1125270[label="floatingPointType\n double "]
1125271[label="variableDeclarator\n c1=div(tf.get(now[2])-1,tf.getsum()-1) "]
1225272[label="variableDeclaratorId\n c1 "]
1225273[label="methodInvocation_lfno_primary\n div(tf.get(now[2])-1,tf.getsum()-1) "]
1325274[label="methodName\n div "]
1325275[label="argumentList\n tf.get(now[2])-1,tf.getsum()-1 "]
1425276[label="additiveExpression\n tf.get(now[2])-1 "]
1525277[label="methodInvocation_lfno_primary\n tf.get(now[2]) "]
1625278[label="typeName\n tf "]
1625279[label="arrayAccess_lfno_primary\n now[2] "]
1725280[label="expressionName\n now "]
1725281[label="literal\n 2 "]
1525282[label="literal\n 1 "]
1425283[label="additiveExpression\n tf.getsum()-1 "]
1525284[label="methodInvocation_lfno_primary\n tf.getsum() "]
1625285[label="typeName\n tf "]
1525286[label="literal\n 1 "]
925287[label="ifThenElseStatement\n if(c3>=c1&&c3>=c2)tl3+=tf.get(key.toCharArray());elseif(c2>=c1&&c2>=c3)tl2+=tf.get(key.toCharArray());elseif(c1>=c2&&c1>=c3)tl1+=tf.get(key.toCharArray()); "]
1025288[label="conditionalAndExpression\n c3>=c1&&c3>=c2 "]
1125289[label="relationalExpression\n c3>=c1 "]
1225290[label="expressionName\n c3 "]
1225291[label="expressionName\n c1 "]
1125292[label="relationalExpression\n c3>=c2 "]
1225293[label="expressionName\n c3 "]
1225294[label="expressionName\n c2 "]
1025295[label="expressionStatement\n tl3+=tf.get(key.toCharArray()); "]
1125296[label="assignment\n tl3+=tf.get(key.toCharArray()) "]
1225297[label="expressionName\n tl3 "]
1225298[label="assignmentOperator\n += "]
1225299[label="methodInvocation_lfno_primary\n tf.get(key.toCharArray()) "]
1325300[label="typeName\n tf "]
1325301[label="methodInvocation_lfno_primary\n key.toCharArray() "]
1425302[label="typeName\n key "]
1025303[label="ifThenElseStatement\n if(c2>=c1&&c2>=c3)tl2+=tf.get(key.toCharArray());elseif(c1>=c2&&c1>=c3)tl1+=tf.get(key.toCharArray()); "]
1125304[label="conditionalAndExpression\n c2>=c1&&c2>=c3 "]
1225305[label="relationalExpression\n c2>=c1 "]
1325306[label="expressionName\n c2 "]
1325307[label="expressionName\n c1 "]
1225308[label="relationalExpression\n c2>=c3 "]
1325309[label="expressionName\n c2 "]
1325310[label="expressionName\n c3 "]
1125311[label="expressionStatement\n tl2+=tf.get(key.toCharArray()); "]
1225312[label="assignment\n tl2+=tf.get(key.toCharArray()) "]
1325313[label="expressionName\n tl2 "]
1325314[label="assignmentOperator\n += "]
1325315[label="methodInvocation_lfno_primary\n tf.get(key.toCharArray()) "]
1425316[label="typeName\n tf "]
1425317[label="methodInvocation_lfno_primary\n key.toCharArray() "]
1525318[label="typeName\n key "]
1125319[label="ifThenStatement\n if(c1>=c2&&c1>=c3)tl1+=tf.get(key.toCharArray()); "]
1225320[label="conditionalAndExpression\n c1>=c2&&c1>=c3 "]
1325321[label="relationalExpression\n c1>=c2 "]
1425322[label="expressionName\n c1 "]
1425323[label="expressionName\n c2 "]
1325324[label="relationalExpression\n c1>=c3 "]
1425325[label="expressionName\n c1 "]
1425326[label="expressionName\n c3 "]
1225327[label="expressionStatement\n tl1+=tf.get(key.toCharArray()); "]
1325328[label="assignment\n tl1+=tf.get(key.toCharArray()) "]
1425329[label="expressionName\n tl1 "]
1425330[label="assignmentOperator\n += "]
1425331[label="methodInvocation_lfno_primary\n tf.get(key.toCharArray()) "]
1525332[label="typeName\n tf "]
1525333[label="methodInvocation_lfno_primary\n key.toCharArray() "]
1625334[label="typeName\n key "]
625335[label="expressionStatement\n l1=div(tl1,tl1+tl2+tl3); "]
725336[label="assignment\n l1=div(tl1,tl1+tl2+tl3) "]
825337[label="expressionName\n l1 "]
825338[label="assignmentOperator\n = "]
825339[label="methodInvocation_lfno_primary\n div(tl1,tl1+tl2+tl3) "]
925340[label="methodName\n div "]
925341[label="argumentList\n tl1,tl1+tl2+tl3 "]
1025342[label="expressionName\n tl1 "]
1025343[label="additiveExpression\n tl1+tl2+tl3 "]
1125344[label="additiveExpression\n tl1+tl2 "]
1225345[label="expressionName\n tl1 "]
1225346[label="expressionName\n tl2 "]
1125347[label="expressionName\n tl3 "]
625348[label="expressionStatement\n l2=div(tl2,tl1+tl2+tl3); "]
725349[label="assignment\n l2=div(tl2,tl1+tl2+tl3) "]
825350[label="expressionName\n l2 "]
825351[label="assignmentOperator\n = "]
825352[label="methodInvocation_lfno_primary\n div(tl2,tl1+tl2+tl3) "]
925353[label="methodName\n div "]
925354[label="argumentList\n tl2,tl1+tl2+tl3 "]
1025355[label="expressionName\n tl2 "]
1025356[label="additiveExpression\n tl1+tl2+tl3 "]
1125357[label="additiveExpression\n tl1+tl2 "]
1225358[label="expressionName\n tl1 "]
1225359[label="expressionName\n tl2 "]
1125360[label="expressionName\n tl3 "]
625361[label="expressionStatement\n l3=div(tl3,tl1+tl2+tl3); "]
725362[label="assignment\n l3=div(tl3,tl1+tl2+tl3) "]
825363[label="expressionName\n l3 "]
825364[label="assignmentOperator\n = "]
825365[label="methodInvocation_lfno_primary\n div(tl3,tl1+tl2+tl3) "]
925366[label="methodName\n div "]
925367[label="argumentList\n tl3,tl1+tl2+tl3 "]
1025368[label="expressionName\n tl3 "]
1025369[label="additiveExpression\n tl1+tl2+tl3 "]
1125370[label="additiveExpression\n tl1+tl2 "]
1225371[label="expressionName\n tl1 "]
1225372[label="expressionName\n tl2 "]
1125373[label="expressionName\n tl3 "]
325374[label="methodDeclaration\n doublelog_prob(chars1,inti1,chars2,inti2,chars3,inti3){if(transMatrix[i1][i2][i3]==0)returninf;chart1=id2tag[i1];chart2=id2tag[i2];chart3=id2tag[i3];doubleuni=l1*tf.freq(s3,t3);doublebi=div(l2*tf.get(s2,t2,s3,t3),tf.get(s2,t2));doubletri=div(l3*tf.get(s1,t1,s2,t2,s3,t3),tf.get(s1,t1,s2,t2));if(uni+bi+tri==0)returninf;returnMath.log(uni+bi+tri);} "]
425375[label="methodHeader\n doublelog_prob(chars1,inti1,chars2,inti2,chars3,inti3) "]
525376[label="floatingPointType\n double "]
525377[label="methodDeclarator\n log_prob(chars1,inti1,chars2,inti2,chars3,inti3) "]
625378[label="formalParameterList\n chars1,inti1,chars2,inti2,chars3,inti3 "]
725379[label="formalParameters\n chars1,inti1,chars2,inti2,chars3 "]
825380[label="formalParameter\n chars1 "]
925381[label="integralType\n char "]
925382[label="variableDeclaratorId\n s1 "]
825383[label="formalParameter\n inti1 "]
925384[label="integralType\n int "]
925385[label="variableDeclaratorId\n i1 "]
825386[label="formalParameter\n chars2 "]
925387[label="integralType\n char "]
925388[label="variableDeclaratorId\n s2 "]
825389[label="formalParameter\n inti2 "]
925390[label="integralType\n int "]
925391[label="variableDeclaratorId\n i2 "]
825392[label="formalParameter\n chars3 "]
925393[label="integralType\n char "]
925394[label="variableDeclaratorId\n s3 "]
725395[label="formalParameter\n inti3 "]
825396[label="integralType\n int "]
825397[label="variableDeclaratorId\n i3 "]
425398[label="block\n {if(transMatrix[i1][i2][i3]==0)returninf;chart1=id2tag[i1];chart2=id2tag[i2];chart3=id2tag[i3];doubleuni=l1*tf.freq(s3,t3);doublebi=div(l2*tf.get(s2,t2,s3,t3),tf.get(s2,t2));doubletri=div(l3*tf.get(s1,t1,s2,t2,s3,t3),tf.get(s1,t1,s2,t2));if(uni+bi+tri==0)returninf;returnMath.log(uni+bi+tri);} "]
525399[label="blockStatements\n if(transMatrix[i1][i2][i3]==0)returninf;chart1=id2tag[i1];chart2=id2tag[i2];chart3=id2tag[i3];doubleuni=l1*tf.freq(s3,t3);doublebi=div(l2*tf.get(s2,t2,s3,t3),tf.get(s2,t2));doubletri=div(l3*tf.get(s1,t1,s2,t2,s3,t3),tf.get(s1,t1,s2,t2));if(uni+bi+tri==0)returninf;returnMath.log(uni+bi+tri); "]
625400[label="ifThenStatement\n if(transMatrix[i1][i2][i3]==0)returninf; "]
725401[label="equalityExpression\n transMatrix[i1][i2][i3]==0 "]
825402[label="arrayAccess_lfno_primary\n transMatrix[i1][i2][i3] "]
925403[label="expressionName\n transMatrix "]
925404[label="expressionName\n i1 "]
925405[label="primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary\n  "]
925406[label="expressionName\n i2 "]
925407[label="primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary\n  "]
925408[label="expressionName\n i3 "]
825409[label="literal\n 0 "]
725410[label="returnStatement\n returninf; "]
825411[label="expressionName\n inf "]
625412[label="localVariableDeclarationStatement\n chart1=id2tag[i1]; "]
725413[label="localVariableDeclaration\n chart1=id2tag[i1] "]
825414[label="integralType\n char "]
825415[label="variableDeclarator\n t1=id2tag[i1] "]
925416[label="variableDeclaratorId\n t1 "]
925417[label="arrayAccess_lfno_primary\n id2tag[i1] "]
1025418[label="expressionName\n id2tag "]
1025419[label="expressionName\n i1 "]
625420[label="localVariableDeclarationStatement\n chart2=id2tag[i2]; "]
725421[label="localVariableDeclaration\n chart2=id2tag[i2] "]
825422[label="integralType\n char "]
825423[label="variableDeclarator\n t2=id2tag[i2] "]
925424[label="variableDeclaratorId\n t2 "]
925425[label="arrayAccess_lfno_primary\n id2tag[i2] "]
1025426[label="expressionName\n id2tag "]
1025427[label="expressionName\n i2 "]
625428[label="localVariableDeclarationStatement\n chart3=id2tag[i3]; "]
725429[label="localVariableDeclaration\n chart3=id2tag[i3] "]
825430[label="integralType\n char "]
825431[label="variableDeclarator\n t3=id2tag[i3] "]
925432[label="variableDeclaratorId\n t3 "]
925433[label="arrayAccess_lfno_primary\n id2tag[i3] "]
1025434[label="expressionName\n id2tag "]
1025435[label="expressionName\n i3 "]
625436[label="localVariableDeclarationStatement\n doubleuni=l1*tf.freq(s3,t3); "]
725437[label="localVariableDeclaration\n doubleuni=l1*tf.freq(s3,t3) "]
825438[label="floatingPointType\n double "]
825439[label="variableDeclarator\n uni=l1*tf.freq(s3,t3) "]
925440[label="variableDeclaratorId\n uni "]
925441[label="multiplicativeExpression\n l1*tf.freq(s3,t3) "]
1025442[label="expressionName\n l1 "]
1025443[label="methodInvocation_lfno_primary\n tf.freq(s3,t3) "]
1125444[label="typeName\n tf "]
1125445[label="argumentList\n s3,t3 "]
1225446[label="expressionName\n s3 "]
1225447[label="expressionName\n t3 "]
625448[label="localVariableDeclarationStatement\n doublebi=div(l2*tf.get(s2,t2,s3,t3),tf.get(s2,t2)); "]
725449[label="localVariableDeclaration\n doublebi=div(l2*tf.get(s2,t2,s3,t3),tf.get(s2,t2)) "]
825450[label="floatingPointType\n double "]
825451[label="variableDeclarator\n bi=div(l2*tf.get(s2,t2,s3,t3),tf.get(s2,t2)) "]
925452[label="variableDeclaratorId\n bi "]
925453[label="methodInvocation_lfno_primary\n div(l2*tf.get(s2,t2,s3,t3),tf.get(s2,t2)) "]
1025454[label="methodName\n div "]
1025455[label="argumentList\n l2*tf.get(s2,t2,s3,t3),tf.get(s2,t2) "]
1125456[label="multiplicativeExpression\n l2*tf.get(s2,t2,s3,t3) "]
1225457[label="expressionName\n l2 "]
1225458[label="methodInvocation_lfno_primary\n tf.get(s2,t2,s3,t3) "]
1325459[label="typeName\n tf "]
1325460[label="argumentList\n s2,t2,s3,t3 "]
1425461[label="expressionName\n s2 "]
1425462[label="expressionName\n t2 "]
1425463[label="expressionName\n s3 "]
1425464[label="expressionName\n t3 "]
1125465[label="methodInvocation_lfno_primary\n tf.get(s2,t2) "]
1225466[label="typeName\n tf "]
1225467[label="argumentList\n s2,t2 "]
1325468[label="expressionName\n s2 "]
1325469[label="expressionName\n t2 "]
625470[label="localVariableDeclarationStatement\n doubletri=div(l3*tf.get(s1,t1,s2,t2,s3,t3),tf.get(s1,t1,s2,t2)); "]
725471[label="localVariableDeclaration\n doubletri=div(l3*tf.get(s1,t1,s2,t2,s3,t3),tf.get(s1,t1,s2,t2)) "]
825472[label="floatingPointType\n double "]
825473[label="variableDeclarator\n tri=div(l3*tf.get(s1,t1,s2,t2,s3,t3),tf.get(s1,t1,s2,t2)) "]
925474[label="variableDeclaratorId\n tri "]
925475[label="methodInvocation_lfno_primary\n div(l3*tf.get(s1,t1,s2,t2,s3,t3),tf.get(s1,t1,s2,t2)) "]
1025476[label="methodName\n div "]
1025477[label="argumentList\n l3*tf.get(s1,t1,s2,t2,s3,t3),tf.get(s1,t1,s2,t2) "]
1125478[label="multiplicativeExpression\n l3*tf.get(s1,t1,s2,t2,s3,t3) "]
1225479[label="expressionName\n l3 "]
1225480[label="methodInvocation_lfno_primary\n tf.get(s1,t1,s2,t2,s3,t3) "]
1325481[label="typeName\n tf "]
1325482[label="argumentList\n s1,t1,s2,t2,s3,t3 "]
1425483[label="expressionName\n s1 "]
1425484[label="expressionName\n t1 "]
1425485[label="expressionName\n s2 "]
1425486[label="expressionName\n t2 "]
1425487[label="expressionName\n s3 "]
1425488[label="expressionName\n t3 "]
1125489[label="methodInvocation_lfno_primary\n tf.get(s1,t1,s2,t2) "]
1225490[label="typeName\n tf "]
1225491[label="argumentList\n s1,t1,s2,t2 "]
1325492[label="expressionName\n s1 "]
1325493[label="expressionName\n t1 "]
1325494[label="expressionName\n s2 "]
1325495[label="expressionName\n t2 "]
625496[label="ifThenStatement\n if(uni+bi+tri==0)returninf; "]
725497[label="equalityExpression\n uni+bi+tri==0 "]
825498[label="additiveExpression\n uni+bi+tri "]
925499[label="additiveExpression\n uni+bi "]
1025500[label="expressionName\n uni "]
1025501[label="expressionName\n bi "]
925502[label="expressionName\n tri "]
825503[label="literal\n 0 "]
725504[label="returnStatement\n returninf; "]
825505[label="expressionName\n inf "]
625506[label="returnStatement\n returnMath.log(uni+bi+tri); "]
725507[label="methodInvocation_lfno_primary\n Math.log(uni+bi+tri) "]
825508[label="typeName\n Math "]
825509[label="additiveExpression\n uni+bi+tri "]
925510[label="additiveExpression\n uni+bi "]
1025511[label="expressionName\n uni "]
1025512[label="expressionName\n bi "]
925513[label="expressionName\n tri "]
325514[label="methodDeclaration\n publicchar[]tag(char[]charArray){if(charArray.length==0)returnnewchar[0];if(charArray.length==1)returnnewchar[]{'s'};char[]tag=newchar[charArray.length];double[][]now=newdouble[4][4];double[]first=newdouble[4];int[][][]link=newint[charArray.length][4][4];for(ints=0;s<4;++s){doublep=(s==1||s==2)?inf:log_prob(bos[0],4,bos[0],4,charArray[0],s);first[s]=p;}for(intf=0;f<4;++f){for(ints=0;s<4;++s){doublep=first[f]+log_prob(bos[0],4,charArray[0],f,charArray[1],s);now[f][s]=p;link[1][f][s]=f;}}double[][]pre=newdouble[4][4];for(inti=2;i<charArray.length;i++){double[][]_=pre;pre=now;now=_;for(ints=0;s<4;++s){for(intt=0;t<4;++t){now[s][t]=-1e20;for(intf=0;f<4;++f){doublep=pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t);if(p>now[s][t]){now[s][t]=p;link[i][s][t]=f;}}}}}doublescore=charArray.length*inf;ints=0;intt=0;for(inti=0;i<probableTail.length;i++){int[]state=probableTail[i];if(now[state[0]][state[1]]>score){score=now[state[0]][state[1]];s=state[0];t=state[1];}}for(inti=link.length-1;i>=0;--i){tag[i]=id2tag[t];intf=link[i][s][t];t=s;s=f;}returntag;} "]
425515[label="methodModifier\n public "]
425516[label="methodHeader\n char[]tag(char[]charArray) "]
525517[label="unannArrayType\n char[] "]
625518[label="integralType\n char "]
625519[label="dims\n [] "]
525520[label="methodDeclarator\n tag(char[]charArray) "]
625521[label="formalParameter\n char[]charArray "]
725522[label="unannArrayType\n char[] "]
825523[label="integralType\n char "]
825524[label="dims\n [] "]
725525[label="variableDeclaratorId\n charArray "]
425526[label="block\n {if(charArray.length==0)returnnewchar[0];if(charArray.length==1)returnnewchar[]{'s'};char[]tag=newchar[charArray.length];double[][]now=newdouble[4][4];double[]first=newdouble[4];int[][][]link=newint[charArray.length][4][4];for(ints=0;s<4;++s){doublep=(s==1||s==2)?inf:log_prob(bos[0],4,bos[0],4,charArray[0],s);first[s]=p;}for(intf=0;f<4;++f){for(ints=0;s<4;++s){doublep=first[f]+log_prob(bos[0],4,charArray[0],f,charArray[1],s);now[f][s]=p;link[1][f][s]=f;}}double[][]pre=newdouble[4][4];for(inti=2;i<charArray.length;i++){double[][]_=pre;pre=now;now=_;for(ints=0;s<4;++s){for(intt=0;t<4;++t){now[s][t]=-1e20;for(intf=0;f<4;++f){doublep=pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t);if(p>now[s][t]){now[s][t]=p;link[i][s][t]=f;}}}}}doublescore=charArray.length*inf;ints=0;intt=0;for(inti=0;i<probableTail.length;i++){int[]state=probableTail[i];if(now[state[0]][state[1]]>score){score=now[state[0]][state[1]];s=state[0];t=state[1];}}for(inti=link.length-1;i>=0;--i){tag[i]=id2tag[t];intf=link[i][s][t];t=s;s=f;}returntag;} "]
525527[label="blockStatements\n if(charArray.length==0)returnnewchar[0];if(charArray.length==1)returnnewchar[]{'s'};char[]tag=newchar[charArray.length];double[][]now=newdouble[4][4];double[]first=newdouble[4];int[][][]link=newint[charArray.length][4][4];for(ints=0;s<4;++s){doublep=(s==1||s==2)?inf:log_prob(bos[0],4,bos[0],4,charArray[0],s);first[s]=p;}for(intf=0;f<4;++f){for(ints=0;s<4;++s){doublep=first[f]+log_prob(bos[0],4,charArray[0],f,charArray[1],s);now[f][s]=p;link[1][f][s]=f;}}double[][]pre=newdouble[4][4];for(inti=2;i<charArray.length;i++){double[][]_=pre;pre=now;now=_;for(ints=0;s<4;++s){for(intt=0;t<4;++t){now[s][t]=-1e20;for(intf=0;f<4;++f){doublep=pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t);if(p>now[s][t]){now[s][t]=p;link[i][s][t]=f;}}}}}doublescore=charArray.length*inf;ints=0;intt=0;for(inti=0;i<probableTail.length;i++){int[]state=probableTail[i];if(now[state[0]][state[1]]>score){score=now[state[0]][state[1]];s=state[0];t=state[1];}}for(inti=link.length-1;i>=0;--i){tag[i]=id2tag[t];intf=link[i][s][t];t=s;s=f;}returntag; "]
625528[label="ifThenStatement\n if(charArray.length==0)returnnewchar[0]; "]
725529[label="equalityExpression\n charArray.length==0 "]
825530[label="expressionName\n charArray.length "]
925531[label="ambiguousName\n charArray "]
825532[label="literal\n 0 "]
725533[label="returnStatement\n returnnewchar[0]; "]
825534[label="arrayCreationExpression\n newchar[0] "]
925535[label="integralType\n char "]
925536[label="dimExpr\n [0] "]
1025537[label="literal\n 0 "]
625538[label="ifThenStatement\n if(charArray.length==1)returnnewchar[]{'s'}; "]
725539[label="equalityExpression\n charArray.length==1 "]
825540[label="expressionName\n charArray.length "]
925541[label="ambiguousName\n charArray "]
825542[label="literal\n 1 "]
725543[label="returnStatement\n returnnewchar[]{'s'}; "]
825544[label="arrayCreationExpression\n newchar[]{'s'} "]
925545[label="integralType\n char "]
925546[label="dims\n [] "]
925547[label="arrayInitializer\n {'s'} "]
1025548[label="literal\n 's' "]
625549[label="localVariableDeclarationStatement\n char[]tag=newchar[charArray.length]; "]
725550[label="localVariableDeclaration\n char[]tag=newchar[charArray.length] "]
825551[label="unannArrayType\n char[] "]
925552[label="integralType\n char "]
925553[label="dims\n [] "]
825554[label="variableDeclarator\n tag=newchar[charArray.length] "]
925555[label="variableDeclaratorId\n tag "]
925556[label="arrayCreationExpression\n newchar[charArray.length] "]
1025557[label="integralType\n char "]
1025558[label="dimExpr\n [charArray.length] "]
1125559[label="expressionName\n charArray.length "]
1225560[label="ambiguousName\n charArray "]
625561[label="localVariableDeclarationStatement\n double[][]now=newdouble[4][4]; "]
725562[label="localVariableDeclaration\n double[][]now=newdouble[4][4] "]
825563[label="unannArrayType\n double[][] "]
925564[label="floatingPointType\n double "]
925565[label="dims\n [][] "]
825566[label="variableDeclarator\n now=newdouble[4][4] "]
925567[label="variableDeclaratorId\n now "]
925568[label="arrayCreationExpression\n newdouble[4][4] "]
1025569[label="floatingPointType\n double "]
1025570[label="dimExprs\n [4][4] "]
1125571[label="dimExpr\n [4] "]
1225572[label="literal\n 4 "]
1125573[label="dimExpr\n [4] "]
1225574[label="literal\n 4 "]
625575[label="localVariableDeclarationStatement\n double[]first=newdouble[4]; "]
725576[label="localVariableDeclaration\n double[]first=newdouble[4] "]
825577[label="unannArrayType\n double[] "]
925578[label="floatingPointType\n double "]
925579[label="dims\n [] "]
825580[label="variableDeclarator\n first=newdouble[4] "]
925581[label="variableDeclaratorId\n first "]
925582[label="arrayCreationExpression\n newdouble[4] "]
1025583[label="floatingPointType\n double "]
1025584[label="dimExpr\n [4] "]
1125585[label="literal\n 4 "]
625586[label="localVariableDeclarationStatement\n int[][][]link=newint[charArray.length][4][4]; "]
725587[label="localVariableDeclaration\n int[][][]link=newint[charArray.length][4][4] "]
825588[label="unannArrayType\n int[][][] "]
925589[label="integralType\n int "]
925590[label="dims\n [][][] "]
825591[label="variableDeclarator\n link=newint[charArray.length][4][4] "]
925592[label="variableDeclaratorId\n link "]
925593[label="arrayCreationExpression\n newint[charArray.length][4][4] "]
1025594[label="integralType\n int "]
1025595[label="dimExprs\n [charArray.length][4][4] "]
1125596[label="dimExpr\n [charArray.length] "]
1225597[label="expressionName\n charArray.length "]
1325598[label="ambiguousName\n charArray "]
1125599[label="dimExpr\n [4] "]
1225600[label="literal\n 4 "]
1125601[label="dimExpr\n [4] "]
1225602[label="literal\n 4 "]
625603[label="basicForStatement\n for(ints=0;s<4;++s){doublep=(s==1||s==2)?inf:log_prob(bos[0],4,bos[0],4,charArray[0],s);first[s]=p;} "]
725604[label="localVariableDeclaration\n ints=0 "]
825605[label="integralType\n int "]
825606[label="variableDeclarator\n s=0 "]
925607[label="variableDeclaratorId\n s "]
925608[label="literal\n 0 "]
725609[label="relationalExpression\n s<4 "]
825610[label="expressionName\n s "]
825611[label="literal\n 4 "]
725612[label="preIncrementExpression\n ++s "]
825613[label="expressionName\n s "]
725614[label="block\n {doublep=(s==1||s==2)?inf:log_prob(bos[0],4,bos[0],4,charArray[0],s);first[s]=p;} "]
825615[label="blockStatements\n doublep=(s==1||s==2)?inf:log_prob(bos[0],4,bos[0],4,charArray[0],s);first[s]=p; "]
925616[label="localVariableDeclarationStatement\n doublep=(s==1||s==2)?inf:log_prob(bos[0],4,bos[0],4,charArray[0],s); "]
1025617[label="localVariableDeclaration\n doublep=(s==1||s==2)?inf:log_prob(bos[0],4,bos[0],4,charArray[0],s) "]
1125618[label="floatingPointType\n double "]
1125619[label="variableDeclarator\n p=(s==1||s==2)?inf:log_prob(bos[0],4,bos[0],4,charArray[0],s) "]
1225620[label="variableDeclaratorId\n p "]
1225621[label="conditionalExpression\n (s==1||s==2)?inf:log_prob(bos[0],4,bos[0],4,charArray[0],s) "]
1325622[label="primaryNoNewArray_lfno_primary\n (s==1||s==2) "]
1425623[label="conditionalOrExpression\n s==1||s==2 "]
1525624[label="equalityExpression\n s==1 "]
1625625[label="expressionName\n s "]
1625626[label="literal\n 1 "]
1525627[label="equalityExpression\n s==2 "]
1625628[label="expressionName\n s "]
1625629[label="literal\n 2 "]
1325630[label="expressionName\n inf "]
1325631[label="methodInvocation_lfno_primary\n log_prob(bos[0],4,bos[0],4,charArray[0],s) "]
1425632[label="methodName\n log_prob "]
1425633[label="argumentList\n bos[0],4,bos[0],4,charArray[0],s "]
1525634[label="arrayAccess_lfno_primary\n bos[0] "]
1625635[label="expressionName\n bos "]
1625636[label="literal\n 0 "]
1525637[label="literal\n 4 "]
1525638[label="arrayAccess_lfno_primary\n bos[0] "]
1625639[label="expressionName\n bos "]
1625640[label="literal\n 0 "]
1525641[label="literal\n 4 "]
1525642[label="arrayAccess_lfno_primary\n charArray[0] "]
1625643[label="expressionName\n charArray "]
1625644[label="literal\n 0 "]
1525645[label="expressionName\n s "]
925646[label="expressionStatement\n first[s]=p; "]
1025647[label="assignment\n first[s]=p "]
1125648[label="arrayAccess\n first[s] "]
1225649[label="expressionName\n first "]
1225650[label="expressionName\n s "]
1125651[label="assignmentOperator\n = "]
1125652[label="expressionName\n p "]
625653[label="basicForStatement\n for(intf=0;f<4;++f){for(ints=0;s<4;++s){doublep=first[f]+log_prob(bos[0],4,charArray[0],f,charArray[1],s);now[f][s]=p;link[1][f][s]=f;}} "]
725654[label="localVariableDeclaration\n intf=0 "]
825655[label="integralType\n int "]
825656[label="variableDeclarator\n f=0 "]
925657[label="variableDeclaratorId\n f "]
925658[label="literal\n 0 "]
725659[label="relationalExpression\n f<4 "]
825660[label="expressionName\n f "]
825661[label="literal\n 4 "]
725662[label="preIncrementExpression\n ++f "]
825663[label="expressionName\n f "]
725664[label="block\n {for(ints=0;s<4;++s){doublep=first[f]+log_prob(bos[0],4,charArray[0],f,charArray[1],s);now[f][s]=p;link[1][f][s]=f;}} "]
825665[label="basicForStatement\n for(ints=0;s<4;++s){doublep=first[f]+log_prob(bos[0],4,charArray[0],f,charArray[1],s);now[f][s]=p;link[1][f][s]=f;} "]
925666[label="localVariableDeclaration\n ints=0 "]
1025667[label="integralType\n int "]
1025668[label="variableDeclarator\n s=0 "]
1125669[label="variableDeclaratorId\n s "]
1125670[label="literal\n 0 "]
925671[label="relationalExpression\n s<4 "]
1025672[label="expressionName\n s "]
1025673[label="literal\n 4 "]
925674[label="preIncrementExpression\n ++s "]
1025675[label="expressionName\n s "]
925676[label="block\n {doublep=first[f]+log_prob(bos[0],4,charArray[0],f,charArray[1],s);now[f][s]=p;link[1][f][s]=f;} "]
1025677[label="blockStatements\n doublep=first[f]+log_prob(bos[0],4,charArray[0],f,charArray[1],s);now[f][s]=p;link[1][f][s]=f; "]
1125678[label="localVariableDeclarationStatement\n doublep=first[f]+log_prob(bos[0],4,charArray[0],f,charArray[1],s); "]
1225679[label="localVariableDeclaration\n doublep=first[f]+log_prob(bos[0],4,charArray[0],f,charArray[1],s) "]
1325680[label="floatingPointType\n double "]
1325681[label="variableDeclarator\n p=first[f]+log_prob(bos[0],4,charArray[0],f,charArray[1],s) "]
1425682[label="variableDeclaratorId\n p "]
1425683[label="additiveExpression\n first[f]+log_prob(bos[0],4,charArray[0],f,charArray[1],s) "]
1525684[label="arrayAccess_lfno_primary\n first[f] "]
1625685[label="expressionName\n first "]
1625686[label="expressionName\n f "]
1525687[label="methodInvocation_lfno_primary\n log_prob(bos[0],4,charArray[0],f,charArray[1],s) "]
1625688[label="methodName\n log_prob "]
1625689[label="argumentList\n bos[0],4,charArray[0],f,charArray[1],s "]
1725690[label="arrayAccess_lfno_primary\n bos[0] "]
1825691[label="expressionName\n bos "]
1825692[label="literal\n 0 "]
1725693[label="literal\n 4 "]
1725694[label="arrayAccess_lfno_primary\n charArray[0] "]
1825695[label="expressionName\n charArray "]
1825696[label="literal\n 0 "]
1725697[label="expressionName\n f "]
1725698[label="arrayAccess_lfno_primary\n charArray[1] "]
1825699[label="expressionName\n charArray "]
1825700[label="literal\n 1 "]
1725701[label="expressionName\n s "]
1125702[label="expressionStatement\n now[f][s]=p; "]
1225703[label="assignment\n now[f][s]=p "]
1325704[label="arrayAccess\n now[f][s] "]
1425705[label="expressionName\n now "]
1425706[label="expressionName\n f "]
1425707[label="primaryNoNewArray_lf_arrayAccess\n  "]
1425708[label="expressionName\n s "]
1325709[label="assignmentOperator\n = "]
1325710[label="expressionName\n p "]
1125711[label="expressionStatement\n link[1][f][s]=f; "]
1225712[label="assignment\n link[1][f][s]=f "]
1325713[label="arrayAccess\n link[1][f][s] "]
1425714[label="expressionName\n link "]
1425715[label="literal\n 1 "]
1425716[label="primaryNoNewArray_lf_arrayAccess\n  "]
1425717[label="expressionName\n f "]
1425718[label="primaryNoNewArray_lf_arrayAccess\n  "]
1425719[label="expressionName\n s "]
1325720[label="assignmentOperator\n = "]
1325721[label="expressionName\n f "]
625722[label="localVariableDeclarationStatement\n double[][]pre=newdouble[4][4]; "]
725723[label="localVariableDeclaration\n double[][]pre=newdouble[4][4] "]
825724[label="unannArrayType\n double[][] "]
925725[label="floatingPointType\n double "]
925726[label="dims\n [][] "]
825727[label="variableDeclarator\n pre=newdouble[4][4] "]
925728[label="variableDeclaratorId\n pre "]
925729[label="arrayCreationExpression\n newdouble[4][4] "]
1025730[label="floatingPointType\n double "]
1025731[label="dimExprs\n [4][4] "]
1125732[label="dimExpr\n [4] "]
1225733[label="literal\n 4 "]
1125734[label="dimExpr\n [4] "]
1225735[label="literal\n 4 "]
625736[label="basicForStatement\n for(inti=2;i<charArray.length;i++){double[][]_=pre;pre=now;now=_;for(ints=0;s<4;++s){for(intt=0;t<4;++t){now[s][t]=-1e20;for(intf=0;f<4;++f){doublep=pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t);if(p>now[s][t]){now[s][t]=p;link[i][s][t]=f;}}}}} "]
725737[label="localVariableDeclaration\n inti=2 "]
825738[label="integralType\n int "]
825739[label="variableDeclarator\n i=2 "]
925740[label="variableDeclaratorId\n i "]
925741[label="literal\n 2 "]
725742[label="relationalExpression\n i<charArray.length "]
825743[label="expressionName\n i "]
825744[label="expressionName\n charArray.length "]
925745[label="ambiguousName\n charArray "]
725746[label="postIncrementExpression\n i++ "]
825747[label="expressionName\n i "]
725748[label="block\n {double[][]_=pre;pre=now;now=_;for(ints=0;s<4;++s){for(intt=0;t<4;++t){now[s][t]=-1e20;for(intf=0;f<4;++f){doublep=pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t);if(p>now[s][t]){now[s][t]=p;link[i][s][t]=f;}}}}} "]
825749[label="blockStatements\n double[][]_=pre;pre=now;now=_;for(ints=0;s<4;++s){for(intt=0;t<4;++t){now[s][t]=-1e20;for(intf=0;f<4;++f){doublep=pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t);if(p>now[s][t]){now[s][t]=p;link[i][s][t]=f;}}}} "]
925750[label="localVariableDeclarationStatement\n double[][]_=pre; "]
1025751[label="localVariableDeclaration\n double[][]_=pre "]
1125752[label="unannArrayType\n double[][] "]
1225753[label="floatingPointType\n double "]
1225754[label="dims\n [][] "]
1125755[label="variableDeclarator\n _=pre "]
1225756[label="variableDeclaratorId\n _ "]
1225757[label="expressionName\n pre "]
925758[label="expressionStatement\n pre=now; "]
1025759[label="assignment\n pre=now "]
1125760[label="expressionName\n pre "]
1125761[label="assignmentOperator\n = "]
1125762[label="expressionName\n now "]
925763[label="expressionStatement\n now=_; "]
1025764[label="assignment\n now=_ "]
1125765[label="expressionName\n now "]
1125766[label="assignmentOperator\n = "]
1125767[label="expressionName\n _ "]
925768[label="basicForStatement\n for(ints=0;s<4;++s){for(intt=0;t<4;++t){now[s][t]=-1e20;for(intf=0;f<4;++f){doublep=pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t);if(p>now[s][t]){now[s][t]=p;link[i][s][t]=f;}}}} "]
1025769[label="localVariableDeclaration\n ints=0 "]
1125770[label="integralType\n int "]
1125771[label="variableDeclarator\n s=0 "]
1225772[label="variableDeclaratorId\n s "]
1225773[label="literal\n 0 "]
1025774[label="relationalExpression\n s<4 "]
1125775[label="expressionName\n s "]
1125776[label="literal\n 4 "]
1025777[label="preIncrementExpression\n ++s "]
1125778[label="expressionName\n s "]
1025779[label="block\n {for(intt=0;t<4;++t){now[s][t]=-1e20;for(intf=0;f<4;++f){doublep=pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t);if(p>now[s][t]){now[s][t]=p;link[i][s][t]=f;}}}} "]
1125780[label="basicForStatement\n for(intt=0;t<4;++t){now[s][t]=-1e20;for(intf=0;f<4;++f){doublep=pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t);if(p>now[s][t]){now[s][t]=p;link[i][s][t]=f;}}} "]
1225781[label="localVariableDeclaration\n intt=0 "]
1325782[label="integralType\n int "]
1325783[label="variableDeclarator\n t=0 "]
1425784[label="variableDeclaratorId\n t "]
1425785[label="literal\n 0 "]
1225786[label="relationalExpression\n t<4 "]
1325787[label="expressionName\n t "]
1325788[label="literal\n 4 "]
1225789[label="preIncrementExpression\n ++t "]
1325790[label="expressionName\n t "]
1225791[label="block\n {now[s][t]=-1e20;for(intf=0;f<4;++f){doublep=pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t);if(p>now[s][t]){now[s][t]=p;link[i][s][t]=f;}}} "]
1325792[label="blockStatements\n now[s][t]=-1e20;for(intf=0;f<4;++f){doublep=pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t);if(p>now[s][t]){now[s][t]=p;link[i][s][t]=f;}} "]
1425793[label="expressionStatement\n now[s][t]=-1e20; "]
1525794[label="assignment\n now[s][t]=-1e20 "]
1625795[label="arrayAccess\n now[s][t] "]
1725796[label="expressionName\n now "]
1725797[label="expressionName\n s "]
1725798[label="primaryNoNewArray_lf_arrayAccess\n  "]
1725799[label="expressionName\n t "]
1625800[label="assignmentOperator\n = "]
1625801[label="unaryExpression\n -1e20 "]
1725802[label="literal\n 1e20 "]
1425803[label="basicForStatement\n for(intf=0;f<4;++f){doublep=pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t);if(p>now[s][t]){now[s][t]=p;link[i][s][t]=f;}} "]
1525804[label="localVariableDeclaration\n intf=0 "]
1625805[label="integralType\n int "]
1625806[label="variableDeclarator\n f=0 "]
1725807[label="variableDeclaratorId\n f "]
1725808[label="literal\n 0 "]
1525809[label="relationalExpression\n f<4 "]
1625810[label="expressionName\n f "]
1625811[label="literal\n 4 "]
1525812[label="preIncrementExpression\n ++f "]
1625813[label="expressionName\n f "]
1525814[label="block\n {doublep=pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t);if(p>now[s][t]){now[s][t]=p;link[i][s][t]=f;}} "]
1625815[label="blockStatements\n doublep=pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t);if(p>now[s][t]){now[s][t]=p;link[i][s][t]=f;} "]
1725816[label="localVariableDeclarationStatement\n doublep=pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t); "]
1825817[label="localVariableDeclaration\n doublep=pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t) "]
1925818[label="floatingPointType\n double "]
1925819[label="variableDeclarator\n p=pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t) "]
2025820[label="variableDeclaratorId\n p "]
2025821[label="additiveExpression\n pre[f][s]+log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t) "]
2125822[label="arrayAccess_lfno_primary\n pre[f][s] "]
2225823[label="expressionName\n pre "]
2225824[label="expressionName\n f "]
2225825[label="primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary\n  "]
2225826[label="expressionName\n s "]
2125827[label="methodInvocation_lfno_primary\n log_prob(charArray[i-2],f,charArray[i-1],s,charArray[i],t) "]
2225828[label="methodName\n log_prob "]
2225829[label="argumentList\n charArray[i-2],f,charArray[i-1],s,charArray[i],t "]
2325830[label="arrayAccess_lfno_primary\n charArray[i-2] "]
2425831[label="expressionName\n charArray "]
2425832[label="additiveExpression\n i-2 "]
2525833[label="expressionName\n i "]
2525834[label="literal\n 2 "]
2325835[label="expressionName\n f "]
2325836[label="arrayAccess_lfno_primary\n charArray[i-1] "]
2425837[label="expressionName\n charArray "]
2425838[label="additiveExpression\n i-1 "]
2525839[label="expressionName\n i "]
2525840[label="literal\n 1 "]
2325841[label="expressionName\n s "]
2325842[label="arrayAccess_lfno_primary\n charArray[i] "]
2425843[label="expressionName\n charArray "]
2425844[label="expressionName\n i "]
2325845[label="expressionName\n t "]
1725846[label="ifThenStatement\n if(p>now[s][t]){now[s][t]=p;link[i][s][t]=f;} "]
1825847[label="relationalExpression\n p>now[s][t] "]
1925848[label="expressionName\n p "]
1925849[label="arrayAccess_lfno_primary\n now[s][t] "]
2025850[label="expressionName\n now "]
2025851[label="expressionName\n s "]
2025852[label="primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary\n  "]
2025853[label="expressionName\n t "]
1825854[label="block\n {now[s][t]=p;link[i][s][t]=f;} "]
1925855[label="blockStatements\n now[s][t]=p;link[i][s][t]=f; "]
2025856[label="expressionStatement\n now[s][t]=p; "]
2125857[label="assignment\n now[s][t]=p "]
2225858[label="arrayAccess\n now[s][t] "]
2325859[label="expressionName\n now "]
2325860[label="expressionName\n s "]
2325861[label="primaryNoNewArray_lf_arrayAccess\n  "]
2325862[label="expressionName\n t "]
2225863[label="assignmentOperator\n = "]
2225864[label="expressionName\n p "]
2025865[label="expressionStatement\n link[i][s][t]=f; "]
2125866[label="assignment\n link[i][s][t]=f "]
2225867[label="arrayAccess\n link[i][s][t] "]
2325868[label="expressionName\n link "]
2325869[label="expressionName\n i "]
2325870[label="primaryNoNewArray_lf_arrayAccess\n  "]
2325871[label="expressionName\n s "]
2325872[label="primaryNoNewArray_lf_arrayAccess\n  "]
2325873[label="expressionName\n t "]
2225874[label="assignmentOperator\n = "]
2225875[label="expressionName\n f "]
625876[label="localVariableDeclarationStatement\n doublescore=charArray.length*inf; "]
725877[label="localVariableDeclaration\n doublescore=charArray.length*inf "]
825878[label="floatingPointType\n double "]
825879[label="variableDeclarator\n score=charArray.length*inf "]
925880[label="variableDeclaratorId\n score "]
925881[label="multiplicativeExpression\n charArray.length*inf "]
1025882[label="expressionName\n charArray.length "]
1125883[label="ambiguousName\n charArray "]
1025884[label="expressionName\n inf "]
625885[label="localVariableDeclarationStatement\n ints=0; "]
725886[label="localVariableDeclaration\n ints=0 "]
825887[label="integralType\n int "]
825888[label="variableDeclarator\n s=0 "]
925889[label="variableDeclaratorId\n s "]
925890[label="literal\n 0 "]
625891[label="localVariableDeclarationStatement\n intt=0; "]
725892[label="localVariableDeclaration\n intt=0 "]
825893[label="integralType\n int "]
825894[label="variableDeclarator\n t=0 "]
925895[label="variableDeclaratorId\n t "]
925896[label="literal\n 0 "]
625897[label="basicForStatement\n for(inti=0;i<probableTail.length;i++){int[]state=probableTail[i];if(now[state[0]][state[1]]>score){score=now[state[0]][state[1]];s=state[0];t=state[1];}} "]
725898[label="localVariableDeclaration\n inti=0 "]
825899[label="integralType\n int "]
825900[label="variableDeclarator\n i=0 "]
925901[label="variableDeclaratorId\n i "]
925902[label="literal\n 0 "]
725903[label="relationalExpression\n i<probableTail.length "]
825904[label="expressionName\n i "]
825905[label="expressionName\n probableTail.length "]
925906[label="ambiguousName\n probableTail "]
725907[label="postIncrementExpression\n i++ "]
825908[label="expressionName\n i "]
725909[label="block\n {int[]state=probableTail[i];if(now[state[0]][state[1]]>score){score=now[state[0]][state[1]];s=state[0];t=state[1];}} "]
825910[label="blockStatements\n int[]state=probableTail[i];if(now[state[0]][state[1]]>score){score=now[state[0]][state[1]];s=state[0];t=state[1];} "]
925911[label="localVariableDeclarationStatement\n int[]state=probableTail[i]; "]
1025912[label="localVariableDeclaration\n int[]state=probableTail[i] "]
1125913[label="unannArrayType\n int[] "]
1225914[label="integralType\n int "]
1225915[label="dims\n [] "]
1125916[label="variableDeclarator\n state=probableTail[i] "]
1225917[label="variableDeclaratorId\n state "]
1225918[label="arrayAccess_lfno_primary\n probableTail[i] "]
1325919[label="expressionName\n probableTail "]
1325920[label="expressionName\n i "]
925921[label="ifThenStatement\n if(now[state[0]][state[1]]>score){score=now[state[0]][state[1]];s=state[0];t=state[1];} "]
1025922[label="relationalExpression\n now[state[0]][state[1]]>score "]
1125923[label="arrayAccess_lfno_primary\n now[state[0]][state[1]] "]
1225924[label="expressionName\n now "]
1225925[label="arrayAccess_lfno_primary\n state[0] "]
1325926[label="expressionName\n state "]
1325927[label="literal\n 0 "]
1225928[label="primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary\n  "]
1225929[label="arrayAccess_lfno_primary\n state[1] "]
1325930[label="expressionName\n state "]
1325931[label="literal\n 1 "]
1125932[label="expressionName\n score "]
1025933[label="block\n {score=now[state[0]][state[1]];s=state[0];t=state[1];} "]
1125934[label="blockStatements\n score=now[state[0]][state[1]];s=state[0];t=state[1]; "]
1225935[label="expressionStatement\n score=now[state[0]][state[1]]; "]
1325936[label="assignment\n score=now[state[0]][state[1]] "]
1425937[label="expressionName\n score "]
1425938[label="assignmentOperator\n = "]
1425939[label="arrayAccess_lfno_primary\n now[state[0]][state[1]] "]
1525940[label="expressionName\n now "]
1525941[label="arrayAccess_lfno_primary\n state[0] "]
1625942[label="expressionName\n state "]
1625943[label="literal\n 0 "]
1525944[label="primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary\n  "]
1525945[label="arrayAccess_lfno_primary\n state[1] "]
1625946[label="expressionName\n state "]
1625947[label="literal\n 1 "]
1225948[label="expressionStatement\n s=state[0]; "]
1325949[label="assignment\n s=state[0] "]
1425950[label="expressionName\n s "]
1425951[label="assignmentOperator\n = "]
1425952[label="arrayAccess_lfno_primary\n state[0] "]
1525953[label="expressionName\n state "]
1525954[label="literal\n 0 "]
1225955[label="expressionStatement\n t=state[1]; "]
1325956[label="assignment\n t=state[1] "]
1425957[label="expressionName\n t "]
1425958[label="assignmentOperator\n = "]
1425959[label="arrayAccess_lfno_primary\n state[1] "]
1525960[label="expressionName\n state "]
1525961[label="literal\n 1 "]
625962[label="basicForStatement\n for(inti=link.length-1;i>=0;--i){tag[i]=id2tag[t];intf=link[i][s][t];t=s;s=f;} "]
725963[label="localVariableDeclaration\n inti=link.length-1 "]
825964[label="integralType\n int "]
825965[label="variableDeclarator\n i=link.length-1 "]
925966[label="variableDeclaratorId\n i "]
925967[label="additiveExpression\n link.length-1 "]
1025968[label="expressionName\n link.length "]
1125969[label="ambiguousName\n link "]
1025970[label="literal\n 1 "]
725971[label="relationalExpression\n i>=0 "]
825972[label="expressionName\n i "]
825973[label="literal\n 0 "]
725974[label="preDecrementExpression\n --i "]
825975[label="expressionName\n i "]
725976[label="block\n {tag[i]=id2tag[t];intf=link[i][s][t];t=s;s=f;} "]
825977[label="blockStatements\n tag[i]=id2tag[t];intf=link[i][s][t];t=s;s=f; "]
925978[label="expressionStatement\n tag[i]=id2tag[t]; "]
1025979[label="assignment\n tag[i]=id2tag[t] "]
1125980[label="arrayAccess\n tag[i] "]
1225981[label="expressionName\n tag "]
1225982[label="expressionName\n i "]
1125983[label="assignmentOperator\n = "]
1125984[label="arrayAccess_lfno_primary\n id2tag[t] "]
1225985[label="expressionName\n id2tag "]
1225986[label="expressionName\n t "]
925987[label="localVariableDeclarationStatement\n intf=link[i][s][t]; "]
1025988[label="localVariableDeclaration\n intf=link[i][s][t] "]
1125989[label="integralType\n int "]
1125990[label="variableDeclarator\n f=link[i][s][t] "]
1225991[label="variableDeclaratorId\n f "]
1225992[label="arrayAccess_lfno_primary\n link[i][s][t] "]
1325993[label="expressionName\n link "]
1325994[label="expressionName\n i "]
1325995[label="primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary\n  "]
1325996[label="expressionName\n s "]
1325997[label="primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary\n  "]
1325998[label="expressionName\n t "]
925999[label="expressionStatement\n t=s; "]
1026000[label="assignment\n t=s "]
1126001[label="expressionName\n t "]
1126002[label="assignmentOperator\n = "]
1126003[label="expressionName\n s "]
926004[label="expressionStatement\n s=f; "]
1026005[label="assignment\n s=f "]
1126006[label="expressionName\n s "]
1126007[label="assignmentOperator\n = "]
1126008[label="expressionName\n f "]
626009[label="returnStatement\n returntag; "]
726010[label="expressionName\n tag "]
326011[label="methodDeclaration\n privatestaticdoublediv(intv1,intv2){if(v2==0)return0.0;returnv1/(double)v2;} "]
426012[label="methodModifier\n private "]
426013[label="methodModifier\n static "]
426014[label="methodHeader\n doublediv(intv1,intv2) "]
526015[label="floatingPointType\n double "]
526016[label="methodDeclarator\n div(intv1,intv2) "]
626017[label="formalParameterList\n intv1,intv2 "]
726018[label="formalParameter\n intv1 "]
826019[label="integralType\n int "]
826020[label="variableDeclaratorId\n v1 "]
726021[label="formalParameter\n intv2 "]
826022[label="integralType\n int "]
826023[label="variableDeclaratorId\n v2 "]
426024[label="block\n {if(v2==0)return0.0;returnv1/(double)v2;} "]
526025[label="blockStatements\n if(v2==0)return0.0;returnv1/(double)v2; "]
626026[label="ifThenStatement\n if(v2==0)return0.0; "]
726027[label="equalityExpression\n v2==0 "]
826028[label="expressionName\n v2 "]
826029[label="literal\n 0 "]
726030[label="returnStatement\n return0.0; "]
826031[label="literal\n 0.0 "]
626032[label="returnStatement\n returnv1/(double)v2; "]
726033[label="multiplicativeExpression\n v1/(double)v2 "]
826034[label="expressionName\n v1 "]
826035[label="castExpression\n (double)v2 "]
926036[label="floatingPointType\n double "]
926037[label="expressionName\n v2 "]
326038[label="methodDeclaration\n privatestaticdoublediv(doublev1,doublev2){if(v2==0)return0.0;returnv1/v2;} "]
426039[label="methodModifier\n private "]
426040[label="methodModifier\n static "]
426041[label="methodHeader\n doublediv(doublev1,doublev2) "]
526042[label="floatingPointType\n double "]
526043[label="methodDeclarator\n div(doublev1,doublev2) "]
626044[label="formalParameterList\n doublev1,doublev2 "]
726045[label="formalParameter\n doublev1 "]
826046[label="floatingPointType\n double "]
826047[label="variableDeclaratorId\n v1 "]
726048[label="formalParameter\n doublev2 "]
826049[label="floatingPointType\n double "]
826050[label="variableDeclaratorId\n v2 "]
426051[label="block\n {if(v2==0)return0.0;returnv1/v2;} "]
526052[label="blockStatements\n if(v2==0)return0.0;returnv1/v2; "]
626053[label="ifThenStatement\n if(v2==0)return0.0; "]
726054[label="equalityExpression\n v2==0 "]
826055[label="expressionName\n v2 "]
826056[label="literal\n 0 "]
726057[label="returnStatement\n return0.0; "]
826058[label="literal\n 0.0 "]
626059[label="returnStatement\n returnv1/v2; "]
726060[label="multiplicativeExpression\n v1/v2 "]
826061[label="expressionName\n v1 "]
826062[label="expressionName\n v2 "]
326063[label="methodDeclaration\n @Overridepublicvoidsave(DataOutputStreamout)throwsException{out.writeDouble(l1);out.writeDouble(l2);out.writeDouble(l3);tf.save(out);} "]
426064[label="markerAnnotation\n @Override "]
526065[label="typeName\n Override "]
426066[label="methodModifier\n public "]
426067[label="methodHeader\n voidsave(DataOutputStreamout)throwsException "]
526068[label="result\n void "]
526069[label="methodDeclarator\n save(DataOutputStreamout) "]
626070[label="formalParameter\n DataOutputStreamout "]
726071[label="unannClassType_lfno_unannClassOrInterfaceType\n DataOutputStream "]
726072[label="variableDeclaratorId\n out "]
526073[label="throws_\n throwsException "]
626074[label="classType\n Exception "]
426075[label="block\n {out.writeDouble(l1);out.writeDouble(l2);out.writeDouble(l3);tf.save(out);} "]
526076[label="blockStatements\n out.writeDouble(l1);out.writeDouble(l2);out.writeDouble(l3);tf.save(out); "]
626077[label="expressionStatement\n out.writeDouble(l1); "]
726078[label="methodInvocation\n out.writeDouble(l1) "]
826079[label="typeName\n out "]
826080[label="expressionName\n l1 "]
626081[label="expressionStatement\n out.writeDouble(l2); "]
726082[label="methodInvocation\n out.writeDouble(l2) "]
826083[label="typeName\n out "]
826084[label="expressionName\n l2 "]
626085[label="expressionStatement\n out.writeDouble(l3); "]
726086[label="methodInvocation\n out.writeDouble(l3) "]
826087[label="typeName\n out "]
826088[label="expressionName\n l3 "]
626089[label="expressionStatement\n tf.save(out); "]
726090[label="methodInvocation\n tf.save(out) "]
826091[label="typeName\n tf "]
826092[label="expressionName\n out "]
326093[label="methodDeclaration\n @Overridepublicbooleanload(ByteArraybyteArray){l1=byteArray.nextDouble();l2=byteArray.nextDouble();l3=byteArray.nextDouble();tf.load(byteArray);returntrue;} "]
426094[label="markerAnnotation\n @Override "]
526095[label="typeName\n Override "]
426096[label="methodModifier\n public "]
426097[label="methodHeader\n booleanload(ByteArraybyteArray) "]
526098[label="unannPrimitiveType\n boolean "]
526099[label="methodDeclarator\n load(ByteArraybyteArray) "]
626100[label="formalParameter\n ByteArraybyteArray "]
726101[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
726102[label="variableDeclaratorId\n byteArray "]
426103[label="block\n {l1=byteArray.nextDouble();l2=byteArray.nextDouble();l3=byteArray.nextDouble();tf.load(byteArray);returntrue;} "]
526104[label="blockStatements\n l1=byteArray.nextDouble();l2=byteArray.nextDouble();l3=byteArray.nextDouble();tf.load(byteArray);returntrue; "]
626105[label="expressionStatement\n l1=byteArray.nextDouble(); "]
726106[label="assignment\n l1=byteArray.nextDouble() "]
826107[label="expressionName\n l1 "]
826108[label="assignmentOperator\n = "]
826109[label="methodInvocation_lfno_primary\n byteArray.nextDouble() "]
926110[label="typeName\n byteArray "]
626111[label="expressionStatement\n l2=byteArray.nextDouble(); "]
726112[label="assignment\n l2=byteArray.nextDouble() "]
826113[label="expressionName\n l2 "]
826114[label="assignmentOperator\n = "]
826115[label="methodInvocation_lfno_primary\n byteArray.nextDouble() "]
926116[label="typeName\n byteArray "]
626117[label="expressionStatement\n l3=byteArray.nextDouble(); "]
726118[label="assignment\n l3=byteArray.nextDouble() "]
826119[label="expressionName\n l3 "]
826120[label="assignmentOperator\n = "]
826121[label="methodInvocation_lfno_primary\n byteArray.nextDouble() "]
926122[label="typeName\n byteArray "]
626123[label="expressionStatement\n tf.load(byteArray); "]
726124[label="methodInvocation\n tf.load(byteArray) "]
826125[label="typeName\n tf "]
826126[label="expressionName\n byteArray "]
626127[label="returnStatement\n returntrue; "]
726128[label="literal\n true "]
026129[label="compilationUnit\n packagecom.hankcs.hanlp.seg;importjava.util.ArrayList;importjava.util.Collections;importjava.util.Iterator;importjava.util.LinkedList;importjava.util.List;importcom.hankcs.hanlp.algorithm.Viterbi;importcom.hankcs.hanlp.corpus.tag.Nature;importcom.hankcs.hanlp.dictionary.CoreDictionary;importcom.hankcs.hanlp.dictionary.CoreDictionaryTransformMatrixDictionary;importcom.hankcs.hanlp.dictionary.CustomDictionary;importcom.hankcs.hanlp.seg.common.Term;importcom.hankcs.hanlp.seg.common.Vertex;publicabstractclassCharacterBasedGenerativeModelSegmentextendsSegment{publicstaticCoreDictionary.AttributeguessAttribute(Termterm){CoreDictionary.Attributeattribute=CoreDictionary.get(term.word);if(attribute==null){attribute=CustomDictionary.get(term.word);}if(attribute==null){if(term.nature!=null){if(Nature.nx==term.nature)attribute=newCoreDictionary.Attribute(Nature.nx);elseif(Nature.m==term.nature)attribute=CoreDictionary.get(CoreDictionary.M_WORD_ID);}elseif(term.word.trim().length()==0)attribute=newCoreDictionary.Attribute(Nature.x);elseattribute=newCoreDictionary.Attribute(Nature.nz);}elseterm.nature=attribute.nature[0];returnattribute;}@OverrideprotectedList<Term>segSentence(char[]sentence){if(sentence.length==0)returnCollections.emptyList();List<Term>termList=roughSegSentence(sentence);if(!(config.ner||config.useCustomDictionary||config.speechTagging))returntermList;List<Vertex>vertexList=toVertexList(termList,true);if(config.speechTagging){Viterbi.compute(vertexList,CoreDictionaryTransformMatrixDictionary.transformMatrixDictionary);inti=0;for(Termterm:termList){if(term.nature!=null)term.nature=vertexList.get(i+1).guessNature();++i;}}if(config.useCustomDictionary){combineByCustomDictionary(vertexList);termList=convert(vertexList,config.offset);}returntermList;}protectedabstractList<Term>roughSegSentence(char[]sentence);protectedList<Vertex>toVertexList(List<Term>wordList,booleanappendStart){ArrayList<Vertex>vertexList=newArrayList<Vertex>(wordList.size()+2);if(appendStart)vertexList.add(Vertex.newB());for(Termword:wordList){CoreDictionary.Attributeattribute=guessAttribute(word);Vertexvertex=newVertex(word.word,attribute);vertexList.add(vertex);}if(appendStart)vertexList.add(Vertex.newE());returnvertexList;}protectedstaticList<Term>convert(List<Vertex>vertexList,booleanoffsetEnabled){assertvertexList!=null;assertvertexList.size()>=2:\"这条路径不应当短于2\"+vertexList.toString();intlength=vertexList.size()-2;List<Term>resultList=newArrayList<Term>(length);Iterator<Vertex>iterator=vertexList.iterator();iterator.next();if(offsetEnabled){intoffset=0;for(inti=0;i<length;++i){Vertexvertex=iterator.next();Termterm=convert(vertex);term.offset=offset;offset+=term.length();resultList.add(term);}}else{for(inti=0;i<length;++i){Vertexvertex=iterator.next();Termterm=convert(vertex);resultList.add(term);}}returnresultList;}privatestaticTermconvert(Vertexvertex){returnnewTerm(vertex.realWord,vertex.guessNature());}}<EOF> "]
126130[label="packageDeclaration\n packagecom.hankcs.hanlp.seg; "]
226131[label="packageName\n com.hankcs.hanlp.seg "]
326132[label="packageName\n com.hankcs.hanlp "]
426133[label="packageName\n com.hankcs "]
526134[label="packageName\n com "]
126135[label="singleTypeImportDeclaration\n importjava.util.ArrayList; "]
226136[label="typeName\n java.util.ArrayList "]
326137[label="packageOrTypeName\n java.util "]
426138[label="packageOrTypeName\n java "]
126139[label="singleTypeImportDeclaration\n importjava.util.Collections; "]
226140[label="typeName\n java.util.Collections "]
326141[label="packageOrTypeName\n java.util "]
426142[label="packageOrTypeName\n java "]
126143[label="singleTypeImportDeclaration\n importjava.util.Iterator; "]
226144[label="typeName\n java.util.Iterator "]
326145[label="packageOrTypeName\n java.util "]
426146[label="packageOrTypeName\n java "]
126147[label="singleTypeImportDeclaration\n importjava.util.LinkedList; "]
226148[label="typeName\n java.util.LinkedList "]
326149[label="packageOrTypeName\n java.util "]
426150[label="packageOrTypeName\n java "]
126151[label="singleTypeImportDeclaration\n importjava.util.List; "]
226152[label="typeName\n java.util.List "]
326153[label="packageOrTypeName\n java.util "]
426154[label="packageOrTypeName\n java "]
126155[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.algorithm.Viterbi; "]
226156[label="typeName\n com.hankcs.hanlp.algorithm.Viterbi "]
326157[label="packageOrTypeName\n com.hankcs.hanlp.algorithm "]
426158[label="packageOrTypeName\n com.hankcs.hanlp "]
526159[label="packageOrTypeName\n com.hankcs "]
626160[label="packageOrTypeName\n com "]
126161[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.tag.Nature; "]
226162[label="typeName\n com.hankcs.hanlp.corpus.tag.Nature "]
326163[label="packageOrTypeName\n com.hankcs.hanlp.corpus.tag "]
426164[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
526165[label="packageOrTypeName\n com.hankcs.hanlp "]
626166[label="packageOrTypeName\n com.hankcs "]
726167[label="packageOrTypeName\n com "]
126168[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dictionary.CoreDictionary; "]
226169[label="typeName\n com.hankcs.hanlp.dictionary.CoreDictionary "]
326170[label="packageOrTypeName\n com.hankcs.hanlp.dictionary "]
426171[label="packageOrTypeName\n com.hankcs.hanlp "]
526172[label="packageOrTypeName\n com.hankcs "]
626173[label="packageOrTypeName\n com "]
126174[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dictionary.CoreDictionaryTransformMatrixDictionary; "]
226175[label="typeName\n com.hankcs.hanlp.dictionary.CoreDictionaryTransformMatrixDictionary "]
326176[label="packageOrTypeName\n com.hankcs.hanlp.dictionary "]
426177[label="packageOrTypeName\n com.hankcs.hanlp "]
526178[label="packageOrTypeName\n com.hankcs "]
626179[label="packageOrTypeName\n com "]
126180[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dictionary.CustomDictionary; "]
226181[label="typeName\n com.hankcs.hanlp.dictionary.CustomDictionary "]
326182[label="packageOrTypeName\n com.hankcs.hanlp.dictionary "]
426183[label="packageOrTypeName\n com.hankcs.hanlp "]
526184[label="packageOrTypeName\n com.hankcs "]
626185[label="packageOrTypeName\n com "]
126186[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.common.Term; "]
226187[label="typeName\n com.hankcs.hanlp.seg.common.Term "]
326188[label="packageOrTypeName\n com.hankcs.hanlp.seg.common "]
426189[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
526190[label="packageOrTypeName\n com.hankcs.hanlp "]
626191[label="packageOrTypeName\n com.hankcs "]
726192[label="packageOrTypeName\n com "]
126193[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.common.Vertex; "]
226194[label="typeName\n com.hankcs.hanlp.seg.common.Vertex "]
326195[label="packageOrTypeName\n com.hankcs.hanlp.seg.common "]
426196[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
526197[label="packageOrTypeName\n com.hankcs.hanlp "]
626198[label="packageOrTypeName\n com.hankcs "]
726199[label="packageOrTypeName\n com "]
126200[label="normalClassDeclaration\n publicabstractclassCharacterBasedGenerativeModelSegmentextendsSegment{publicstaticCoreDictionary.AttributeguessAttribute(Termterm){CoreDictionary.Attributeattribute=CoreDictionary.get(term.word);if(attribute==null){attribute=CustomDictionary.get(term.word);}if(attribute==null){if(term.nature!=null){if(Nature.nx==term.nature)attribute=newCoreDictionary.Attribute(Nature.nx);elseif(Nature.m==term.nature)attribute=CoreDictionary.get(CoreDictionary.M_WORD_ID);}elseif(term.word.trim().length()==0)attribute=newCoreDictionary.Attribute(Nature.x);elseattribute=newCoreDictionary.Attribute(Nature.nz);}elseterm.nature=attribute.nature[0];returnattribute;}@OverrideprotectedList<Term>segSentence(char[]sentence){if(sentence.length==0)returnCollections.emptyList();List<Term>termList=roughSegSentence(sentence);if(!(config.ner||config.useCustomDictionary||config.speechTagging))returntermList;List<Vertex>vertexList=toVertexList(termList,true);if(config.speechTagging){Viterbi.compute(vertexList,CoreDictionaryTransformMatrixDictionary.transformMatrixDictionary);inti=0;for(Termterm:termList){if(term.nature!=null)term.nature=vertexList.get(i+1).guessNature();++i;}}if(config.useCustomDictionary){combineByCustomDictionary(vertexList);termList=convert(vertexList,config.offset);}returntermList;}protectedabstractList<Term>roughSegSentence(char[]sentence);protectedList<Vertex>toVertexList(List<Term>wordList,booleanappendStart){ArrayList<Vertex>vertexList=newArrayList<Vertex>(wordList.size()+2);if(appendStart)vertexList.add(Vertex.newB());for(Termword:wordList){CoreDictionary.Attributeattribute=guessAttribute(word);Vertexvertex=newVertex(word.word,attribute);vertexList.add(vertex);}if(appendStart)vertexList.add(Vertex.newE());returnvertexList;}protectedstaticList<Term>convert(List<Vertex>vertexList,booleanoffsetEnabled){assertvertexList!=null;assertvertexList.size()>=2:\"这条路径不应当短于2\"+vertexList.toString();intlength=vertexList.size()-2;List<Term>resultList=newArrayList<Term>(length);Iterator<Vertex>iterator=vertexList.iterator();iterator.next();if(offsetEnabled){intoffset=0;for(inti=0;i<length;++i){Vertexvertex=iterator.next();Termterm=convert(vertex);term.offset=offset;offset+=term.length();resultList.add(term);}}else{for(inti=0;i<length;++i){Vertexvertex=iterator.next();Termterm=convert(vertex);resultList.add(term);}}returnresultList;}privatestaticTermconvert(Vertexvertex){returnnewTerm(vertex.realWord,vertex.guessNature());}} "]
226201[label="classModifier\n public "]
226202[label="classModifier\n abstract "]
226203[label="superclass\n extendsSegment "]
326204[label="classType\n Segment "]
226205[label="classBody\n {publicstaticCoreDictionary.AttributeguessAttribute(Termterm){CoreDictionary.Attributeattribute=CoreDictionary.get(term.word);if(attribute==null){attribute=CustomDictionary.get(term.word);}if(attribute==null){if(term.nature!=null){if(Nature.nx==term.nature)attribute=newCoreDictionary.Attribute(Nature.nx);elseif(Nature.m==term.nature)attribute=CoreDictionary.get(CoreDictionary.M_WORD_ID);}elseif(term.word.trim().length()==0)attribute=newCoreDictionary.Attribute(Nature.x);elseattribute=newCoreDictionary.Attribute(Nature.nz);}elseterm.nature=attribute.nature[0];returnattribute;}@OverrideprotectedList<Term>segSentence(char[]sentence){if(sentence.length==0)returnCollections.emptyList();List<Term>termList=roughSegSentence(sentence);if(!(config.ner||config.useCustomDictionary||config.speechTagging))returntermList;List<Vertex>vertexList=toVertexList(termList,true);if(config.speechTagging){Viterbi.compute(vertexList,CoreDictionaryTransformMatrixDictionary.transformMatrixDictionary);inti=0;for(Termterm:termList){if(term.nature!=null)term.nature=vertexList.get(i+1).guessNature();++i;}}if(config.useCustomDictionary){combineByCustomDictionary(vertexList);termList=convert(vertexList,config.offset);}returntermList;}protectedabstractList<Term>roughSegSentence(char[]sentence);protectedList<Vertex>toVertexList(List<Term>wordList,booleanappendStart){ArrayList<Vertex>vertexList=newArrayList<Vertex>(wordList.size()+2);if(appendStart)vertexList.add(Vertex.newB());for(Termword:wordList){CoreDictionary.Attributeattribute=guessAttribute(word);Vertexvertex=newVertex(word.word,attribute);vertexList.add(vertex);}if(appendStart)vertexList.add(Vertex.newE());returnvertexList;}protectedstaticList<Term>convert(List<Vertex>vertexList,booleanoffsetEnabled){assertvertexList!=null;assertvertexList.size()>=2:\"这条路径不应当短于2\"+vertexList.toString();intlength=vertexList.size()-2;List<Term>resultList=newArrayList<Term>(length);Iterator<Vertex>iterator=vertexList.iterator();iterator.next();if(offsetEnabled){intoffset=0;for(inti=0;i<length;++i){Vertexvertex=iterator.next();Termterm=convert(vertex);term.offset=offset;offset+=term.length();resultList.add(term);}}else{for(inti=0;i<length;++i){Vertexvertex=iterator.next();Termterm=convert(vertex);resultList.add(term);}}returnresultList;}privatestaticTermconvert(Vertexvertex){returnnewTerm(vertex.realWord,vertex.guessNature());}} "]
326206[label="methodDeclaration\n publicstaticCoreDictionary.AttributeguessAttribute(Termterm){CoreDictionary.Attributeattribute=CoreDictionary.get(term.word);if(attribute==null){attribute=CustomDictionary.get(term.word);}if(attribute==null){if(term.nature!=null){if(Nature.nx==term.nature)attribute=newCoreDictionary.Attribute(Nature.nx);elseif(Nature.m==term.nature)attribute=CoreDictionary.get(CoreDictionary.M_WORD_ID);}elseif(term.word.trim().length()==0)attribute=newCoreDictionary.Attribute(Nature.x);elseattribute=newCoreDictionary.Attribute(Nature.nz);}elseterm.nature=attribute.nature[0];returnattribute;} "]
426207[label="methodModifier\n public "]
426208[label="methodModifier\n static "]
426209[label="methodHeader\n CoreDictionary.AttributeguessAttribute(Termterm) "]
526210[label="unannClassOrInterfaceType\n CoreDictionary.Attribute "]
626211[label="unannClassType_lfno_unannClassOrInterfaceType\n CoreDictionary "]
626212[label="unannClassType_lf_unannClassOrInterfaceType\n .Attribute "]
526213[label="methodDeclarator\n guessAttribute(Termterm) "]
626214[label="formalParameter\n Termterm "]
726215[label="unannClassType_lfno_unannClassOrInterfaceType\n Term "]
726216[label="variableDeclaratorId\n term "]
426217[label="block\n {CoreDictionary.Attributeattribute=CoreDictionary.get(term.word);if(attribute==null){attribute=CustomDictionary.get(term.word);}if(attribute==null){if(term.nature!=null){if(Nature.nx==term.nature)attribute=newCoreDictionary.Attribute(Nature.nx);elseif(Nature.m==term.nature)attribute=CoreDictionary.get(CoreDictionary.M_WORD_ID);}elseif(term.word.trim().length()==0)attribute=newCoreDictionary.Attribute(Nature.x);elseattribute=newCoreDictionary.Attribute(Nature.nz);}elseterm.nature=attribute.nature[0];returnattribute;} "]
526218[label="blockStatements\n CoreDictionary.Attributeattribute=CoreDictionary.get(term.word);if(attribute==null){attribute=CustomDictionary.get(term.word);}if(attribute==null){if(term.nature!=null){if(Nature.nx==term.nature)attribute=newCoreDictionary.Attribute(Nature.nx);elseif(Nature.m==term.nature)attribute=CoreDictionary.get(CoreDictionary.M_WORD_ID);}elseif(term.word.trim().length()==0)attribute=newCoreDictionary.Attribute(Nature.x);elseattribute=newCoreDictionary.Attribute(Nature.nz);}elseterm.nature=attribute.nature[0];returnattribute; "]
626219[label="localVariableDeclarationStatement\n CoreDictionary.Attributeattribute=CoreDictionary.get(term.word); "]
726220[label="localVariableDeclaration\n CoreDictionary.Attributeattribute=CoreDictionary.get(term.word) "]
826221[label="unannClassOrInterfaceType\n CoreDictionary.Attribute "]
926222[label="unannClassType_lfno_unannClassOrInterfaceType\n CoreDictionary "]
926223[label="unannClassType_lf_unannClassOrInterfaceType\n .Attribute "]
826224[label="variableDeclarator\n attribute=CoreDictionary.get(term.word) "]
926225[label="variableDeclaratorId\n attribute "]
926226[label="methodInvocation_lfno_primary\n CoreDictionary.get(term.word) "]
1026227[label="typeName\n CoreDictionary "]
1026228[label="expressionName\n term.word "]
1126229[label="ambiguousName\n term "]
626230[label="ifThenStatement\n if(attribute==null){attribute=CustomDictionary.get(term.word);} "]
726231[label="equalityExpression\n attribute==null "]
826232[label="expressionName\n attribute "]
826233[label="literal\n null "]
726234[label="block\n {attribute=CustomDictionary.get(term.word);} "]
826235[label="expressionStatement\n attribute=CustomDictionary.get(term.word); "]
926236[label="assignment\n attribute=CustomDictionary.get(term.word) "]
1026237[label="expressionName\n attribute "]
1026238[label="assignmentOperator\n = "]
1026239[label="methodInvocation_lfno_primary\n CustomDictionary.get(term.word) "]
1126240[label="typeName\n CustomDictionary "]
1126241[label="expressionName\n term.word "]
1226242[label="ambiguousName\n term "]
626243[label="ifThenElseStatement\n if(attribute==null){if(term.nature!=null){if(Nature.nx==term.nature)attribute=newCoreDictionary.Attribute(Nature.nx);elseif(Nature.m==term.nature)attribute=CoreDictionary.get(CoreDictionary.M_WORD_ID);}elseif(term.word.trim().length()==0)attribute=newCoreDictionary.Attribute(Nature.x);elseattribute=newCoreDictionary.Attribute(Nature.nz);}elseterm.nature=attribute.nature[0]; "]
726244[label="equalityExpression\n attribute==null "]
826245[label="expressionName\n attribute "]
826246[label="literal\n null "]
726247[label="block\n {if(term.nature!=null){if(Nature.nx==term.nature)attribute=newCoreDictionary.Attribute(Nature.nx);elseif(Nature.m==term.nature)attribute=CoreDictionary.get(CoreDictionary.M_WORD_ID);}elseif(term.word.trim().length()==0)attribute=newCoreDictionary.Attribute(Nature.x);elseattribute=newCoreDictionary.Attribute(Nature.nz);} "]
826248[label="ifThenElseStatement\n if(term.nature!=null){if(Nature.nx==term.nature)attribute=newCoreDictionary.Attribute(Nature.nx);elseif(Nature.m==term.nature)attribute=CoreDictionary.get(CoreDictionary.M_WORD_ID);}elseif(term.word.trim().length()==0)attribute=newCoreDictionary.Attribute(Nature.x);elseattribute=newCoreDictionary.Attribute(Nature.nz); "]
926249[label="equalityExpression\n term.nature!=null "]
1026250[label="expressionName\n term.nature "]
1126251[label="ambiguousName\n term "]
1026252[label="literal\n null "]
926253[label="block\n {if(Nature.nx==term.nature)attribute=newCoreDictionary.Attribute(Nature.nx);elseif(Nature.m==term.nature)attribute=CoreDictionary.get(CoreDictionary.M_WORD_ID);} "]
1026254[label="ifThenElseStatement\n if(Nature.nx==term.nature)attribute=newCoreDictionary.Attribute(Nature.nx);elseif(Nature.m==term.nature)attribute=CoreDictionary.get(CoreDictionary.M_WORD_ID); "]
1126255[label="equalityExpression\n Nature.nx==term.nature "]
1226256[label="expressionName\n Nature.nx "]
1326257[label="ambiguousName\n Nature "]
1226258[label="expressionName\n term.nature "]
1326259[label="ambiguousName\n term "]
1126260[label="expressionStatement\n attribute=newCoreDictionary.Attribute(Nature.nx); "]
1226261[label="assignment\n attribute=newCoreDictionary.Attribute(Nature.nx) "]
1326262[label="expressionName\n attribute "]
1326263[label="assignmentOperator\n = "]
1326264[label="classInstanceCreationExpression_lfno_primary\n newCoreDictionary.Attribute(Nature.nx) "]
1426265[label="expressionName\n Nature.nx "]
1526266[label="ambiguousName\n Nature "]
1126267[label="ifThenStatement\n if(Nature.m==term.nature)attribute=CoreDictionary.get(CoreDictionary.M_WORD_ID); "]
1226268[label="equalityExpression\n Nature.m==term.nature "]
1326269[label="expressionName\n Nature.m "]
1426270[label="ambiguousName\n Nature "]
1326271[label="expressionName\n term.nature "]
1426272[label="ambiguousName\n term "]
1226273[label="expressionStatement\n attribute=CoreDictionary.get(CoreDictionary.M_WORD_ID); "]
1326274[label="assignment\n attribute=CoreDictionary.get(CoreDictionary.M_WORD_ID) "]
1426275[label="expressionName\n attribute "]
1426276[label="assignmentOperator\n = "]
1426277[label="methodInvocation_lfno_primary\n CoreDictionary.get(CoreDictionary.M_WORD_ID) "]
1526278[label="typeName\n CoreDictionary "]
1526279[label="expressionName\n CoreDictionary.M_WORD_ID "]
1626280[label="ambiguousName\n CoreDictionary "]
926281[label="ifThenElseStatement\n if(term.word.trim().length()==0)attribute=newCoreDictionary.Attribute(Nature.x);elseattribute=newCoreDictionary.Attribute(Nature.nz); "]
1026282[label="equalityExpression\n term.word.trim().length()==0 "]
1126283[label="primary\n term.word.trim().length() "]
1226284[label="methodInvocation_lfno_primary\n term.word.trim() "]
1326285[label="typeName\n term.word "]
1426286[label="packageOrTypeName\n term "]
1226287[label="methodInvocation_lf_primary\n .length() "]
1126288[label="literal\n 0 "]
1026289[label="expressionStatement\n attribute=newCoreDictionary.Attribute(Nature.x); "]
1126290[label="assignment\n attribute=newCoreDictionary.Attribute(Nature.x) "]
1226291[label="expressionName\n attribute "]
1226292[label="assignmentOperator\n = "]
1226293[label="classInstanceCreationExpression_lfno_primary\n newCoreDictionary.Attribute(Nature.x) "]
1326294[label="expressionName\n Nature.x "]
1426295[label="ambiguousName\n Nature "]
1026296[label="expressionStatement\n attribute=newCoreDictionary.Attribute(Nature.nz); "]
1126297[label="assignment\n attribute=newCoreDictionary.Attribute(Nature.nz) "]
1226298[label="expressionName\n attribute "]
1226299[label="assignmentOperator\n = "]
1226300[label="classInstanceCreationExpression_lfno_primary\n newCoreDictionary.Attribute(Nature.nz) "]
1326301[label="expressionName\n Nature.nz "]
1426302[label="ambiguousName\n Nature "]
726303[label="expressionStatement\n term.nature=attribute.nature[0]; "]
826304[label="assignment\n term.nature=attribute.nature[0] "]
926305[label="expressionName\n term.nature "]
1026306[label="ambiguousName\n term "]
926307[label="assignmentOperator\n = "]
926308[label="arrayAccess_lfno_primary\n attribute.nature[0] "]
1026309[label="expressionName\n attribute.nature "]
1126310[label="ambiguousName\n attribute "]
1026311[label="literal\n 0 "]
626312[label="returnStatement\n returnattribute; "]
726313[label="expressionName\n attribute "]
326314[label="methodDeclaration\n @OverrideprotectedList<Term>segSentence(char[]sentence){if(sentence.length==0)returnCollections.emptyList();List<Term>termList=roughSegSentence(sentence);if(!(config.ner||config.useCustomDictionary||config.speechTagging))returntermList;List<Vertex>vertexList=toVertexList(termList,true);if(config.speechTagging){Viterbi.compute(vertexList,CoreDictionaryTransformMatrixDictionary.transformMatrixDictionary);inti=0;for(Termterm:termList){if(term.nature!=null)term.nature=vertexList.get(i+1).guessNature();++i;}}if(config.useCustomDictionary){combineByCustomDictionary(vertexList);termList=convert(vertexList,config.offset);}returntermList;} "]
426315[label="markerAnnotation\n @Override "]
526316[label="typeName\n Override "]
426317[label="methodModifier\n protected "]
426318[label="methodHeader\n List<Term>segSentence(char[]sentence) "]
526319[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Term> "]
626320[label="typeArguments\n <Term> "]
726321[label="classType_lfno_classOrInterfaceType\n Term "]
526322[label="methodDeclarator\n segSentence(char[]sentence) "]
626323[label="formalParameter\n char[]sentence "]
726324[label="unannArrayType\n char[] "]
826325[label="integralType\n char "]
826326[label="dims\n [] "]
726327[label="variableDeclaratorId\n sentence "]
426328[label="block\n {if(sentence.length==0)returnCollections.emptyList();List<Term>termList=roughSegSentence(sentence);if(!(config.ner||config.useCustomDictionary||config.speechTagging))returntermList;List<Vertex>vertexList=toVertexList(termList,true);if(config.speechTagging){Viterbi.compute(vertexList,CoreDictionaryTransformMatrixDictionary.transformMatrixDictionary);inti=0;for(Termterm:termList){if(term.nature!=null)term.nature=vertexList.get(i+1).guessNature();++i;}}if(config.useCustomDictionary){combineByCustomDictionary(vertexList);termList=convert(vertexList,config.offset);}returntermList;} "]
526329[label="blockStatements\n if(sentence.length==0)returnCollections.emptyList();List<Term>termList=roughSegSentence(sentence);if(!(config.ner||config.useCustomDictionary||config.speechTagging))returntermList;List<Vertex>vertexList=toVertexList(termList,true);if(config.speechTagging){Viterbi.compute(vertexList,CoreDictionaryTransformMatrixDictionary.transformMatrixDictionary);inti=0;for(Termterm:termList){if(term.nature!=null)term.nature=vertexList.get(i+1).guessNature();++i;}}if(config.useCustomDictionary){combineByCustomDictionary(vertexList);termList=convert(vertexList,config.offset);}returntermList; "]
626330[label="ifThenStatement\n if(sentence.length==0)returnCollections.emptyList(); "]
726331[label="equalityExpression\n sentence.length==0 "]
826332[label="expressionName\n sentence.length "]
926333[label="ambiguousName\n sentence "]
826334[label="literal\n 0 "]
726335[label="returnStatement\n returnCollections.emptyList(); "]
826336[label="methodInvocation_lfno_primary\n Collections.emptyList() "]
926337[label="typeName\n Collections "]
626338[label="localVariableDeclarationStatement\n List<Term>termList=roughSegSentence(sentence); "]
726339[label="localVariableDeclaration\n List<Term>termList=roughSegSentence(sentence) "]
826340[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Term> "]
926341[label="typeArguments\n <Term> "]
1026342[label="classType_lfno_classOrInterfaceType\n Term "]
826343[label="variableDeclarator\n termList=roughSegSentence(sentence) "]
926344[label="variableDeclaratorId\n termList "]
926345[label="methodInvocation_lfno_primary\n roughSegSentence(sentence) "]
1026346[label="methodName\n roughSegSentence "]
1026347[label="expressionName\n sentence "]
626348[label="ifThenStatement\n if(!(config.ner||config.useCustomDictionary||config.speechTagging))returntermList; "]
726349[label="unaryExpressionNotPlusMinus\n !(config.ner||config.useCustomDictionary||config.speechTagging) "]
826350[label="primaryNoNewArray_lfno_primary\n (config.ner||config.useCustomDictionary||config.speechTagging) "]
926351[label="conditionalOrExpression\n config.ner||config.useCustomDictionary||config.speechTagging "]
1026352[label="conditionalOrExpression\n config.ner||config.useCustomDictionary "]
1126353[label="expressionName\n config.ner "]
1226354[label="ambiguousName\n config "]
1126355[label="expressionName\n config.useCustomDictionary "]
1226356[label="ambiguousName\n config "]
1026357[label="expressionName\n config.speechTagging "]
1126358[label="ambiguousName\n config "]
726359[label="returnStatement\n returntermList; "]
826360[label="expressionName\n termList "]
626361[label="localVariableDeclarationStatement\n List<Vertex>vertexList=toVertexList(termList,true); "]
726362[label="localVariableDeclaration\n List<Vertex>vertexList=toVertexList(termList,true) "]
826363[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Vertex> "]
926364[label="typeArguments\n <Vertex> "]
1026365[label="classType_lfno_classOrInterfaceType\n Vertex "]
826366[label="variableDeclarator\n vertexList=toVertexList(termList,true) "]
926367[label="variableDeclaratorId\n vertexList "]
926368[label="methodInvocation_lfno_primary\n toVertexList(termList,true) "]
1026369[label="methodName\n toVertexList "]
1026370[label="argumentList\n termList,true "]
1126371[label="expressionName\n termList "]
1126372[label="literal\n true "]
626373[label="ifThenStatement\n if(config.speechTagging){Viterbi.compute(vertexList,CoreDictionaryTransformMatrixDictionary.transformMatrixDictionary);inti=0;for(Termterm:termList){if(term.nature!=null)term.nature=vertexList.get(i+1).guessNature();++i;}} "]
726374[label="expressionName\n config.speechTagging "]
826375[label="ambiguousName\n config "]
726376[label="block\n {Viterbi.compute(vertexList,CoreDictionaryTransformMatrixDictionary.transformMatrixDictionary);inti=0;for(Termterm:termList){if(term.nature!=null)term.nature=vertexList.get(i+1).guessNature();++i;}} "]
826377[label="blockStatements\n Viterbi.compute(vertexList,CoreDictionaryTransformMatrixDictionary.transformMatrixDictionary);inti=0;for(Termterm:termList){if(term.nature!=null)term.nature=vertexList.get(i+1).guessNature();++i;} "]
926378[label="expressionStatement\n Viterbi.compute(vertexList,CoreDictionaryTransformMatrixDictionary.transformMatrixDictionary); "]
1026379[label="methodInvocation\n Viterbi.compute(vertexList,CoreDictionaryTransformMatrixDictionary.transformMatrixDictionary) "]
1126380[label="typeName\n Viterbi "]
1126381[label="argumentList\n vertexList,CoreDictionaryTransformMatrixDictionary.transformMatrixDictionary "]
1226382[label="expressionName\n vertexList "]
1226383[label="expressionName\n CoreDictionaryTransformMatrixDictionary.transformMatrixDictionary "]
1326384[label="ambiguousName\n CoreDictionaryTransformMatrixDictionary "]
926385[label="localVariableDeclarationStatement\n inti=0; "]
1026386[label="localVariableDeclaration\n inti=0 "]
1126387[label="integralType\n int "]
1126388[label="variableDeclarator\n i=0 "]
1226389[label="variableDeclaratorId\n i "]
1226390[label="literal\n 0 "]
926391[label="enhancedForStatement\n for(Termterm:termList){if(term.nature!=null)term.nature=vertexList.get(i+1).guessNature();++i;} "]
1026392[label="unannClassType_lfno_unannClassOrInterfaceType\n Term "]
1026393[label="variableDeclaratorId\n term "]
1026394[label="expressionName\n termList "]
1026395[label="block\n {if(term.nature!=null)term.nature=vertexList.get(i+1).guessNature();++i;} "]
1126396[label="blockStatements\n if(term.nature!=null)term.nature=vertexList.get(i+1).guessNature();++i; "]
1226397[label="ifThenStatement\n if(term.nature!=null)term.nature=vertexList.get(i+1).guessNature(); "]
1326398[label="equalityExpression\n term.nature!=null "]
1426399[label="expressionName\n term.nature "]
1526400[label="ambiguousName\n term "]
1426401[label="literal\n null "]
1326402[label="expressionStatement\n term.nature=vertexList.get(i+1).guessNature(); "]
1426403[label="assignment\n term.nature=vertexList.get(i+1).guessNature() "]
1526404[label="expressionName\n term.nature "]
1626405[label="ambiguousName\n term "]
1526406[label="assignmentOperator\n = "]
1526407[label="primary\n vertexList.get(i+1).guessNature() "]
1626408[label="methodInvocation_lfno_primary\n vertexList.get(i+1) "]
1726409[label="typeName\n vertexList "]
1726410[label="additiveExpression\n i+1 "]
1826411[label="expressionName\n i "]
1826412[label="literal\n 1 "]
1626413[label="methodInvocation_lf_primary\n .guessNature() "]
1226414[label="expressionStatement\n ++i; "]
1326415[label="preIncrementExpression\n ++i "]
1426416[label="expressionName\n i "]
626417[label="ifThenStatement\n if(config.useCustomDictionary){combineByCustomDictionary(vertexList);termList=convert(vertexList,config.offset);} "]
726418[label="expressionName\n config.useCustomDictionary "]
826419[label="ambiguousName\n config "]
726420[label="block\n {combineByCustomDictionary(vertexList);termList=convert(vertexList,config.offset);} "]
826421[label="blockStatements\n combineByCustomDictionary(vertexList);termList=convert(vertexList,config.offset); "]
926422[label="expressionStatement\n combineByCustomDictionary(vertexList); "]
1026423[label="methodInvocation\n combineByCustomDictionary(vertexList) "]
1126424[label="methodName\n combineByCustomDictionary "]
1126425[label="expressionName\n vertexList "]
926426[label="expressionStatement\n termList=convert(vertexList,config.offset); "]
1026427[label="assignment\n termList=convert(vertexList,config.offset) "]
1126428[label="expressionName\n termList "]
1126429[label="assignmentOperator\n = "]
1126430[label="methodInvocation_lfno_primary\n convert(vertexList,config.offset) "]
1226431[label="methodName\n convert "]
1226432[label="argumentList\n vertexList,config.offset "]
1326433[label="expressionName\n vertexList "]
1326434[label="expressionName\n config.offset "]
1426435[label="ambiguousName\n config "]
626436[label="returnStatement\n returntermList; "]
726437[label="expressionName\n termList "]
326438[label="methodDeclaration\n protectedabstractList<Term>roughSegSentence(char[]sentence); "]
426439[label="methodModifier\n protected "]
426440[label="methodModifier\n abstract "]
426441[label="methodHeader\n List<Term>roughSegSentence(char[]sentence) "]
526442[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Term> "]
626443[label="typeArguments\n <Term> "]
726444[label="classType_lfno_classOrInterfaceType\n Term "]
526445[label="methodDeclarator\n roughSegSentence(char[]sentence) "]
626446[label="formalParameter\n char[]sentence "]
726447[label="unannArrayType\n char[] "]
826448[label="integralType\n char "]
826449[label="dims\n [] "]
726450[label="variableDeclaratorId\n sentence "]
426451[label="methodBody\n ; "]
326452[label="methodDeclaration\n protectedList<Vertex>toVertexList(List<Term>wordList,booleanappendStart){ArrayList<Vertex>vertexList=newArrayList<Vertex>(wordList.size()+2);if(appendStart)vertexList.add(Vertex.newB());for(Termword:wordList){CoreDictionary.Attributeattribute=guessAttribute(word);Vertexvertex=newVertex(word.word,attribute);vertexList.add(vertex);}if(appendStart)vertexList.add(Vertex.newE());returnvertexList;} "]
426453[label="methodModifier\n protected "]
426454[label="methodHeader\n List<Vertex>toVertexList(List<Term>wordList,booleanappendStart) "]
526455[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Vertex> "]
626456[label="typeArguments\n <Vertex> "]
726457[label="classType_lfno_classOrInterfaceType\n Vertex "]
526458[label="methodDeclarator\n toVertexList(List<Term>wordList,booleanappendStart) "]
626459[label="formalParameterList\n List<Term>wordList,booleanappendStart "]
726460[label="formalParameter\n List<Term>wordList "]
826461[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Term> "]
926462[label="typeArguments\n <Term> "]
1026463[label="classType_lfno_classOrInterfaceType\n Term "]
826464[label="variableDeclaratorId\n wordList "]
726465[label="formalParameter\n booleanappendStart "]
826466[label="unannPrimitiveType\n boolean "]
826467[label="variableDeclaratorId\n appendStart "]
426468[label="block\n {ArrayList<Vertex>vertexList=newArrayList<Vertex>(wordList.size()+2);if(appendStart)vertexList.add(Vertex.newB());for(Termword:wordList){CoreDictionary.Attributeattribute=guessAttribute(word);Vertexvertex=newVertex(word.word,attribute);vertexList.add(vertex);}if(appendStart)vertexList.add(Vertex.newE());returnvertexList;} "]
526469[label="blockStatements\n ArrayList<Vertex>vertexList=newArrayList<Vertex>(wordList.size()+2);if(appendStart)vertexList.add(Vertex.newB());for(Termword:wordList){CoreDictionary.Attributeattribute=guessAttribute(word);Vertexvertex=newVertex(word.word,attribute);vertexList.add(vertex);}if(appendStart)vertexList.add(Vertex.newE());returnvertexList; "]
626470[label="localVariableDeclarationStatement\n ArrayList<Vertex>vertexList=newArrayList<Vertex>(wordList.size()+2); "]
726471[label="localVariableDeclaration\n ArrayList<Vertex>vertexList=newArrayList<Vertex>(wordList.size()+2) "]
826472[label="unannClassType_lfno_unannClassOrInterfaceType\n ArrayList<Vertex> "]
926473[label="typeArguments\n <Vertex> "]
1026474[label="classType_lfno_classOrInterfaceType\n Vertex "]
826475[label="variableDeclarator\n vertexList=newArrayList<Vertex>(wordList.size()+2) "]
926476[label="variableDeclaratorId\n vertexList "]
926477[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Vertex>(wordList.size()+2) "]
1026478[label="typeArguments\n <Vertex> "]
1126479[label="classType_lfno_classOrInterfaceType\n Vertex "]
1026480[label="additiveExpression\n wordList.size()+2 "]
1126481[label="methodInvocation_lfno_primary\n wordList.size() "]
1226482[label="typeName\n wordList "]
1126483[label="literal\n 2 "]
626484[label="ifThenStatement\n if(appendStart)vertexList.add(Vertex.newB()); "]
726485[label="expressionName\n appendStart "]
726486[label="expressionStatement\n vertexList.add(Vertex.newB()); "]
826487[label="methodInvocation\n vertexList.add(Vertex.newB()) "]
926488[label="typeName\n vertexList "]
926489[label="methodInvocation_lfno_primary\n Vertex.newB() "]
1026490[label="typeName\n Vertex "]
626491[label="enhancedForStatement\n for(Termword:wordList){CoreDictionary.Attributeattribute=guessAttribute(word);Vertexvertex=newVertex(word.word,attribute);vertexList.add(vertex);} "]
726492[label="unannClassType_lfno_unannClassOrInterfaceType\n Term "]
726493[label="variableDeclaratorId\n word "]
726494[label="expressionName\n wordList "]
726495[label="block\n {CoreDictionary.Attributeattribute=guessAttribute(word);Vertexvertex=newVertex(word.word,attribute);vertexList.add(vertex);} "]
826496[label="blockStatements\n CoreDictionary.Attributeattribute=guessAttribute(word);Vertexvertex=newVertex(word.word,attribute);vertexList.add(vertex); "]
926497[label="localVariableDeclarationStatement\n CoreDictionary.Attributeattribute=guessAttribute(word); "]
1026498[label="localVariableDeclaration\n CoreDictionary.Attributeattribute=guessAttribute(word) "]
1126499[label="unannClassOrInterfaceType\n CoreDictionary.Attribute "]
1226500[label="unannClassType_lfno_unannClassOrInterfaceType\n CoreDictionary "]
1226501[label="unannClassType_lf_unannClassOrInterfaceType\n .Attribute "]
1126502[label="variableDeclarator\n attribute=guessAttribute(word) "]
1226503[label="variableDeclaratorId\n attribute "]
1226504[label="methodInvocation_lfno_primary\n guessAttribute(word) "]
1326505[label="methodName\n guessAttribute "]
1326506[label="expressionName\n word "]
926507[label="localVariableDeclarationStatement\n Vertexvertex=newVertex(word.word,attribute); "]
1026508[label="localVariableDeclaration\n Vertexvertex=newVertex(word.word,attribute) "]
1126509[label="unannClassType_lfno_unannClassOrInterfaceType\n Vertex "]
1126510[label="variableDeclarator\n vertex=newVertex(word.word,attribute) "]
1226511[label="variableDeclaratorId\n vertex "]
1226512[label="classInstanceCreationExpression_lfno_primary\n newVertex(word.word,attribute) "]
1326513[label="argumentList\n word.word,attribute "]
1426514[label="expressionName\n word.word "]
1526515[label="ambiguousName\n word "]
1426516[label="expressionName\n attribute "]
926517[label="expressionStatement\n vertexList.add(vertex); "]
1026518[label="methodInvocation\n vertexList.add(vertex) "]
1126519[label="typeName\n vertexList "]
1126520[label="expressionName\n vertex "]
626521[label="ifThenStatement\n if(appendStart)vertexList.add(Vertex.newE()); "]
726522[label="expressionName\n appendStart "]
726523[label="expressionStatement\n vertexList.add(Vertex.newE()); "]
826524[label="methodInvocation\n vertexList.add(Vertex.newE()) "]
926525[label="typeName\n vertexList "]
926526[label="methodInvocation_lfno_primary\n Vertex.newE() "]
1026527[label="typeName\n Vertex "]
626528[label="returnStatement\n returnvertexList; "]
726529[label="expressionName\n vertexList "]
326530[label="methodDeclaration\n protectedstaticList<Term>convert(List<Vertex>vertexList,booleanoffsetEnabled){assertvertexList!=null;assertvertexList.size()>=2:\"这条路径不应当短于2\"+vertexList.toString();intlength=vertexList.size()-2;List<Term>resultList=newArrayList<Term>(length);Iterator<Vertex>iterator=vertexList.iterator();iterator.next();if(offsetEnabled){intoffset=0;for(inti=0;i<length;++i){Vertexvertex=iterator.next();Termterm=convert(vertex);term.offset=offset;offset+=term.length();resultList.add(term);}}else{for(inti=0;i<length;++i){Vertexvertex=iterator.next();Termterm=convert(vertex);resultList.add(term);}}returnresultList;} "]
426531[label="methodModifier\n protected "]
426532[label="methodModifier\n static "]
426533[label="methodHeader\n List<Term>convert(List<Vertex>vertexList,booleanoffsetEnabled) "]
526534[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Term> "]
626535[label="typeArguments\n <Term> "]
726536[label="classType_lfno_classOrInterfaceType\n Term "]
526537[label="methodDeclarator\n convert(List<Vertex>vertexList,booleanoffsetEnabled) "]
626538[label="formalParameterList\n List<Vertex>vertexList,booleanoffsetEnabled "]
726539[label="formalParameter\n List<Vertex>vertexList "]
826540[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Vertex> "]
926541[label="typeArguments\n <Vertex> "]
1026542[label="classType_lfno_classOrInterfaceType\n Vertex "]
826543[label="variableDeclaratorId\n vertexList "]
726544[label="formalParameter\n booleanoffsetEnabled "]
826545[label="unannPrimitiveType\n boolean "]
826546[label="variableDeclaratorId\n offsetEnabled "]
426547[label="block\n {assertvertexList!=null;assertvertexList.size()>=2:\"这条路径不应当短于2\"+vertexList.toString();intlength=vertexList.size()-2;List<Term>resultList=newArrayList<Term>(length);Iterator<Vertex>iterator=vertexList.iterator();iterator.next();if(offsetEnabled){intoffset=0;for(inti=0;i<length;++i){Vertexvertex=iterator.next();Termterm=convert(vertex);term.offset=offset;offset+=term.length();resultList.add(term);}}else{for(inti=0;i<length;++i){Vertexvertex=iterator.next();Termterm=convert(vertex);resultList.add(term);}}returnresultList;} "]
526548[label="blockStatements\n assertvertexList!=null;assertvertexList.size()>=2:\"这条路径不应当短于2\"+vertexList.toString();intlength=vertexList.size()-2;List<Term>resultList=newArrayList<Term>(length);Iterator<Vertex>iterator=vertexList.iterator();iterator.next();if(offsetEnabled){intoffset=0;for(inti=0;i<length;++i){Vertexvertex=iterator.next();Termterm=convert(vertex);term.offset=offset;offset+=term.length();resultList.add(term);}}else{for(inti=0;i<length;++i){Vertexvertex=iterator.next();Termterm=convert(vertex);resultList.add(term);}}returnresultList; "]
626549[label="assertStatement\n assertvertexList!=null; "]
726550[label="equalityExpression\n vertexList!=null "]
826551[label="expressionName\n vertexList "]
826552[label="literal\n null "]
626553[label="assertStatement\n assertvertexList.size()>=2:\"这条路径不应当短于2\"+vertexList.toString(); "]
726554[label="relationalExpression\n vertexList.size()>=2 "]
826555[label="methodInvocation_lfno_primary\n vertexList.size() "]
926556[label="typeName\n vertexList "]
826557[label="literal\n 2 "]
726558[label="additiveExpression\n \"这条路径不应当短于2\"+vertexList.toString() "]
826559[label="literal\n \"这条路径不应当短于2\" "]
826560[label="methodInvocation_lfno_primary\n vertexList.toString() "]
926561[label="typeName\n vertexList "]
626562[label="localVariableDeclarationStatement\n intlength=vertexList.size()-2; "]
726563[label="localVariableDeclaration\n intlength=vertexList.size()-2 "]
826564[label="integralType\n int "]
826565[label="variableDeclarator\n length=vertexList.size()-2 "]
926566[label="variableDeclaratorId\n length "]
926567[label="additiveExpression\n vertexList.size()-2 "]
1026568[label="methodInvocation_lfno_primary\n vertexList.size() "]
1126569[label="typeName\n vertexList "]
1026570[label="literal\n 2 "]
626571[label="localVariableDeclarationStatement\n List<Term>resultList=newArrayList<Term>(length); "]
726572[label="localVariableDeclaration\n List<Term>resultList=newArrayList<Term>(length) "]
826573[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Term> "]
926574[label="typeArguments\n <Term> "]
1026575[label="classType_lfno_classOrInterfaceType\n Term "]
826576[label="variableDeclarator\n resultList=newArrayList<Term>(length) "]
926577[label="variableDeclaratorId\n resultList "]
926578[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Term>(length) "]
1026579[label="typeArguments\n <Term> "]
1126580[label="classType_lfno_classOrInterfaceType\n Term "]
1026581[label="expressionName\n length "]
626582[label="localVariableDeclarationStatement\n Iterator<Vertex>iterator=vertexList.iterator(); "]
726583[label="localVariableDeclaration\n Iterator<Vertex>iterator=vertexList.iterator() "]
826584[label="unannClassType_lfno_unannClassOrInterfaceType\n Iterator<Vertex> "]
926585[label="typeArguments\n <Vertex> "]
1026586[label="classType_lfno_classOrInterfaceType\n Vertex "]
826587[label="variableDeclarator\n iterator=vertexList.iterator() "]
926588[label="variableDeclaratorId\n iterator "]
926589[label="methodInvocation_lfno_primary\n vertexList.iterator() "]
1026590[label="typeName\n vertexList "]
626591[label="expressionStatement\n iterator.next(); "]
726592[label="methodInvocation\n iterator.next() "]
826593[label="typeName\n iterator "]
626594[label="ifThenElseStatement\n if(offsetEnabled){intoffset=0;for(inti=0;i<length;++i){Vertexvertex=iterator.next();Termterm=convert(vertex);term.offset=offset;offset+=term.length();resultList.add(term);}}else{for(inti=0;i<length;++i){Vertexvertex=iterator.next();Termterm=convert(vertex);resultList.add(term);}} "]
726595[label="expressionName\n offsetEnabled "]
726596[label="block\n {intoffset=0;for(inti=0;i<length;++i){Vertexvertex=iterator.next();Termterm=convert(vertex);term.offset=offset;offset+=term.length();resultList.add(term);}} "]
826597[label="blockStatements\n intoffset=0;for(inti=0;i<length;++i){Vertexvertex=iterator.next();Termterm=convert(vertex);term.offset=offset;offset+=term.length();resultList.add(term);} "]
926598[label="localVariableDeclarationStatement\n intoffset=0; "]
1026599[label="localVariableDeclaration\n intoffset=0 "]
1126600[label="integralType\n int "]
1126601[label="variableDeclarator\n offset=0 "]
1226602[label="variableDeclaratorId\n offset "]
1226603[label="literal\n 0 "]
926604[label="basicForStatement\n for(inti=0;i<length;++i){Vertexvertex=iterator.next();Termterm=convert(vertex);term.offset=offset;offset+=term.length();resultList.add(term);} "]
1026605[label="localVariableDeclaration\n inti=0 "]
1126606[label="integralType\n int "]
1126607[label="variableDeclarator\n i=0 "]
1226608[label="variableDeclaratorId\n i "]
1226609[label="literal\n 0 "]
1026610[label="relationalExpression\n i<length "]
1126611[label="expressionName\n i "]
1126612[label="expressionName\n length "]
1026613[label="preIncrementExpression\n ++i "]
1126614[label="expressionName\n i "]
1026615[label="block\n {Vertexvertex=iterator.next();Termterm=convert(vertex);term.offset=offset;offset+=term.length();resultList.add(term);} "]
1126616[label="blockStatements\n Vertexvertex=iterator.next();Termterm=convert(vertex);term.offset=offset;offset+=term.length();resultList.add(term); "]
1226617[label="localVariableDeclarationStatement\n Vertexvertex=iterator.next(); "]
1326618[label="localVariableDeclaration\n Vertexvertex=iterator.next() "]
1426619[label="unannClassType_lfno_unannClassOrInterfaceType\n Vertex "]
1426620[label="variableDeclarator\n vertex=iterator.next() "]
1526621[label="variableDeclaratorId\n vertex "]
1526622[label="methodInvocation_lfno_primary\n iterator.next() "]
1626623[label="typeName\n iterator "]
1226624[label="localVariableDeclarationStatement\n Termterm=convert(vertex); "]
1326625[label="localVariableDeclaration\n Termterm=convert(vertex) "]
1426626[label="unannClassType_lfno_unannClassOrInterfaceType\n Term "]
1426627[label="variableDeclarator\n term=convert(vertex) "]
1526628[label="variableDeclaratorId\n term "]
1526629[label="methodInvocation_lfno_primary\n convert(vertex) "]
1626630[label="methodName\n convert "]
1626631[label="expressionName\n vertex "]
1226632[label="expressionStatement\n term.offset=offset; "]
1326633[label="assignment\n term.offset=offset "]
1426634[label="expressionName\n term.offset "]
1526635[label="ambiguousName\n term "]
1426636[label="assignmentOperator\n = "]
1426637[label="expressionName\n offset "]
1226638[label="expressionStatement\n offset+=term.length(); "]
1326639[label="assignment\n offset+=term.length() "]
1426640[label="expressionName\n offset "]
1426641[label="assignmentOperator\n += "]
1426642[label="methodInvocation_lfno_primary\n term.length() "]
1526643[label="typeName\n term "]
1226644[label="expressionStatement\n resultList.add(term); "]
1326645[label="methodInvocation\n resultList.add(term) "]
1426646[label="typeName\n resultList "]
1426647[label="expressionName\n term "]
726648[label="block\n {for(inti=0;i<length;++i){Vertexvertex=iterator.next();Termterm=convert(vertex);resultList.add(term);}} "]
826649[label="basicForStatement\n for(inti=0;i<length;++i){Vertexvertex=iterator.next();Termterm=convert(vertex);resultList.add(term);} "]
926650[label="localVariableDeclaration\n inti=0 "]
1026651[label="integralType\n int "]
1026652[label="variableDeclarator\n i=0 "]
1126653[label="variableDeclaratorId\n i "]
1126654[label="literal\n 0 "]
926655[label="relationalExpression\n i<length "]
1026656[label="expressionName\n i "]
1026657[label="expressionName\n length "]
926658[label="preIncrementExpression\n ++i "]
1026659[label="expressionName\n i "]
926660[label="block\n {Vertexvertex=iterator.next();Termterm=convert(vertex);resultList.add(term);} "]
1026661[label="blockStatements\n Vertexvertex=iterator.next();Termterm=convert(vertex);resultList.add(term); "]
1126662[label="localVariableDeclarationStatement\n Vertexvertex=iterator.next(); "]
1226663[label="localVariableDeclaration\n Vertexvertex=iterator.next() "]
1326664[label="unannClassType_lfno_unannClassOrInterfaceType\n Vertex "]
1326665[label="variableDeclarator\n vertex=iterator.next() "]
1426666[label="variableDeclaratorId\n vertex "]
1426667[label="methodInvocation_lfno_primary\n iterator.next() "]
1526668[label="typeName\n iterator "]
1126669[label="localVariableDeclarationStatement\n Termterm=convert(vertex); "]
1226670[label="localVariableDeclaration\n Termterm=convert(vertex) "]
1326671[label="unannClassType_lfno_unannClassOrInterfaceType\n Term "]
1326672[label="variableDeclarator\n term=convert(vertex) "]
1426673[label="variableDeclaratorId\n term "]
1426674[label="methodInvocation_lfno_primary\n convert(vertex) "]
1526675[label="methodName\n convert "]
1526676[label="expressionName\n vertex "]
1126677[label="expressionStatement\n resultList.add(term); "]
1226678[label="methodInvocation\n resultList.add(term) "]
1326679[label="typeName\n resultList "]
1326680[label="expressionName\n term "]
626681[label="returnStatement\n returnresultList; "]
726682[label="expressionName\n resultList "]
326683[label="methodDeclaration\n privatestaticTermconvert(Vertexvertex){returnnewTerm(vertex.realWord,vertex.guessNature());} "]
426684[label="methodModifier\n private "]
426685[label="methodModifier\n static "]
426686[label="methodHeader\n Termconvert(Vertexvertex) "]
526687[label="unannClassType_lfno_unannClassOrInterfaceType\n Term "]
526688[label="methodDeclarator\n convert(Vertexvertex) "]
626689[label="formalParameter\n Vertexvertex "]
726690[label="unannClassType_lfno_unannClassOrInterfaceType\n Vertex "]
726691[label="variableDeclaratorId\n vertex "]
426692[label="block\n {returnnewTerm(vertex.realWord,vertex.guessNature());} "]
526693[label="returnStatement\n returnnewTerm(vertex.realWord,vertex.guessNature()); "]
626694[label="classInstanceCreationExpression_lfno_primary\n newTerm(vertex.realWord,vertex.guessNature()) "]
726695[label="argumentList\n vertex.realWord,vertex.guessNature() "]
826696[label="expressionName\n vertex.realWord "]
926697[label="ambiguousName\n vertex "]
826698[label="methodInvocation_lfno_primary\n vertex.guessNature() "]
926699[label="typeName\n vertex "]
026700[label="compilationUnit\n packagecom.hankcs.hanlp.utility;publicclassCharacterHelper{publicstaticbooleanisSpaceLetter(charinput){returninput==8||input==9||input==10||input==13||input==32||input==160;}publicstaticbooleanisEnglishLetter(charinput){return(input>='a'&&input<='z')||(input>='A'&&input<='Z');}publicstaticbooleanisArabicNumber(charinput){returninput>='0'&&input<='9';}publicstaticbooleanisCJKCharacter(charinput){Character.UnicodeBlockub=Character.UnicodeBlock.of(input);if(ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A||ub==Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS||ub==Character.UnicodeBlock.HANGUL_SYLLABLES||ub==Character.UnicodeBlock.HANGUL_JAMO||ub==Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO||ub==Character.UnicodeBlock.HIRAGANA||ub==Character.UnicodeBlock.KATAKANA||ub==Character.UnicodeBlock.KATAKANA_PHONETIC_EXTENSIONS){returntrue;}else{returnfalse;}}publicstaticcharregularize(charinput){if(input==12288){input=(char)32;}elseif(input>65280&&input<65375){input=(char)(input-65248);}elseif(input>='A'&&input<='Z'){input+=32;}returninput;}}<EOF> "]
126701[label="packageDeclaration\n packagecom.hankcs.hanlp.utility; "]
226702[label="packageName\n com.hankcs.hanlp.utility "]
326703[label="packageName\n com.hankcs.hanlp "]
426704[label="packageName\n com.hankcs "]
526705[label="packageName\n com "]
126706[label="normalClassDeclaration\n publicclassCharacterHelper{publicstaticbooleanisSpaceLetter(charinput){returninput==8||input==9||input==10||input==13||input==32||input==160;}publicstaticbooleanisEnglishLetter(charinput){return(input>='a'&&input<='z')||(input>='A'&&input<='Z');}publicstaticbooleanisArabicNumber(charinput){returninput>='0'&&input<='9';}publicstaticbooleanisCJKCharacter(charinput){Character.UnicodeBlockub=Character.UnicodeBlock.of(input);if(ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A||ub==Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS||ub==Character.UnicodeBlock.HANGUL_SYLLABLES||ub==Character.UnicodeBlock.HANGUL_JAMO||ub==Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO||ub==Character.UnicodeBlock.HIRAGANA||ub==Character.UnicodeBlock.KATAKANA||ub==Character.UnicodeBlock.KATAKANA_PHONETIC_EXTENSIONS){returntrue;}else{returnfalse;}}publicstaticcharregularize(charinput){if(input==12288){input=(char)32;}elseif(input>65280&&input<65375){input=(char)(input-65248);}elseif(input>='A'&&input<='Z'){input+=32;}returninput;}} "]
226707[label="classModifier\n public "]
226708[label="classBody\n {publicstaticbooleanisSpaceLetter(charinput){returninput==8||input==9||input==10||input==13||input==32||input==160;}publicstaticbooleanisEnglishLetter(charinput){return(input>='a'&&input<='z')||(input>='A'&&input<='Z');}publicstaticbooleanisArabicNumber(charinput){returninput>='0'&&input<='9';}publicstaticbooleanisCJKCharacter(charinput){Character.UnicodeBlockub=Character.UnicodeBlock.of(input);if(ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A||ub==Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS||ub==Character.UnicodeBlock.HANGUL_SYLLABLES||ub==Character.UnicodeBlock.HANGUL_JAMO||ub==Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO||ub==Character.UnicodeBlock.HIRAGANA||ub==Character.UnicodeBlock.KATAKANA||ub==Character.UnicodeBlock.KATAKANA_PHONETIC_EXTENSIONS){returntrue;}else{returnfalse;}}publicstaticcharregularize(charinput){if(input==12288){input=(char)32;}elseif(input>65280&&input<65375){input=(char)(input-65248);}elseif(input>='A'&&input<='Z'){input+=32;}returninput;}} "]
326709[label="methodDeclaration\n publicstaticbooleanisSpaceLetter(charinput){returninput==8||input==9||input==10||input==13||input==32||input==160;} "]
426710[label="methodModifier\n public "]
426711[label="methodModifier\n static "]
426712[label="methodHeader\n booleanisSpaceLetter(charinput) "]
526713[label="unannPrimitiveType\n boolean "]
526714[label="methodDeclarator\n isSpaceLetter(charinput) "]
626715[label="formalParameter\n charinput "]
726716[label="integralType\n char "]
726717[label="variableDeclaratorId\n input "]
426718[label="block\n {returninput==8||input==9||input==10||input==13||input==32||input==160;} "]
526719[label="returnStatement\n returninput==8||input==9||input==10||input==13||input==32||input==160; "]
626720[label="conditionalOrExpression\n input==8||input==9||input==10||input==13||input==32||input==160 "]
726721[label="conditionalOrExpression\n input==8||input==9||input==10||input==13||input==32 "]
826722[label="conditionalOrExpression\n input==8||input==9||input==10||input==13 "]
926723[label="conditionalOrExpression\n input==8||input==9||input==10 "]
1026724[label="conditionalOrExpression\n input==8||input==9 "]
1126725[label="equalityExpression\n input==8 "]
1226726[label="expressionName\n input "]
1226727[label="literal\n 8 "]
1126728[label="equalityExpression\n input==9 "]
1226729[label="expressionName\n input "]
1226730[label="literal\n 9 "]
1026731[label="equalityExpression\n input==10 "]
1126732[label="expressionName\n input "]
1126733[label="literal\n 10 "]
926734[label="equalityExpression\n input==13 "]
1026735[label="expressionName\n input "]
1026736[label="literal\n 13 "]
826737[label="equalityExpression\n input==32 "]
926738[label="expressionName\n input "]
926739[label="literal\n 32 "]
726740[label="equalityExpression\n input==160 "]
826741[label="expressionName\n input "]
826742[label="literal\n 160 "]
326743[label="methodDeclaration\n publicstaticbooleanisEnglishLetter(charinput){return(input>='a'&&input<='z')||(input>='A'&&input<='Z');} "]
426744[label="methodModifier\n public "]
426745[label="methodModifier\n static "]
426746[label="methodHeader\n booleanisEnglishLetter(charinput) "]
526747[label="unannPrimitiveType\n boolean "]
526748[label="methodDeclarator\n isEnglishLetter(charinput) "]
626749[label="formalParameter\n charinput "]
726750[label="integralType\n char "]
726751[label="variableDeclaratorId\n input "]
426752[label="block\n {return(input>='a'&&input<='z')||(input>='A'&&input<='Z');} "]
526753[label="returnStatement\n return(input>='a'&&input<='z')||(input>='A'&&input<='Z'); "]
626754[label="conditionalOrExpression\n (input>='a'&&input<='z')||(input>='A'&&input<='Z') "]
726755[label="primaryNoNewArray_lfno_primary\n (input>='a'&&input<='z') "]
826756[label="conditionalAndExpression\n input>='a'&&input<='z' "]
926757[label="relationalExpression\n input>='a' "]
1026758[label="expressionName\n input "]
1026759[label="literal\n 'a' "]
926760[label="relationalExpression\n input<='z' "]
1026761[label="expressionName\n input "]
1026762[label="literal\n 'z' "]
726763[label="primaryNoNewArray_lfno_primary\n (input>='A'&&input<='Z') "]
826764[label="conditionalAndExpression\n input>='A'&&input<='Z' "]
926765[label="relationalExpression\n input>='A' "]
1026766[label="expressionName\n input "]
1026767[label="literal\n 'A' "]
926768[label="relationalExpression\n input<='Z' "]
1026769[label="expressionName\n input "]
1026770[label="literal\n 'Z' "]
326771[label="methodDeclaration\n publicstaticbooleanisArabicNumber(charinput){returninput>='0'&&input<='9';} "]
426772[label="methodModifier\n public "]
426773[label="methodModifier\n static "]
426774[label="methodHeader\n booleanisArabicNumber(charinput) "]
526775[label="unannPrimitiveType\n boolean "]
526776[label="methodDeclarator\n isArabicNumber(charinput) "]
626777[label="formalParameter\n charinput "]
726778[label="integralType\n char "]
726779[label="variableDeclaratorId\n input "]
426780[label="block\n {returninput>='0'&&input<='9';} "]
526781[label="returnStatement\n returninput>='0'&&input<='9'; "]
626782[label="conditionalAndExpression\n input>='0'&&input<='9' "]
726783[label="relationalExpression\n input>='0' "]
826784[label="expressionName\n input "]
826785[label="literal\n '0' "]
726786[label="relationalExpression\n input<='9' "]
826787[label="expressionName\n input "]
826788[label="literal\n '9' "]
326789[label="methodDeclaration\n publicstaticbooleanisCJKCharacter(charinput){Character.UnicodeBlockub=Character.UnicodeBlock.of(input);if(ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A||ub==Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS||ub==Character.UnicodeBlock.HANGUL_SYLLABLES||ub==Character.UnicodeBlock.HANGUL_JAMO||ub==Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO||ub==Character.UnicodeBlock.HIRAGANA||ub==Character.UnicodeBlock.KATAKANA||ub==Character.UnicodeBlock.KATAKANA_PHONETIC_EXTENSIONS){returntrue;}else{returnfalse;}} "]
426790[label="methodModifier\n public "]
426791[label="methodModifier\n static "]
426792[label="methodHeader\n booleanisCJKCharacter(charinput) "]
526793[label="unannPrimitiveType\n boolean "]
526794[label="methodDeclarator\n isCJKCharacter(charinput) "]
626795[label="formalParameter\n charinput "]
726796[label="integralType\n char "]
726797[label="variableDeclaratorId\n input "]
426798[label="block\n {Character.UnicodeBlockub=Character.UnicodeBlock.of(input);if(ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A||ub==Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS||ub==Character.UnicodeBlock.HANGUL_SYLLABLES||ub==Character.UnicodeBlock.HANGUL_JAMO||ub==Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO||ub==Character.UnicodeBlock.HIRAGANA||ub==Character.UnicodeBlock.KATAKANA||ub==Character.UnicodeBlock.KATAKANA_PHONETIC_EXTENSIONS){returntrue;}else{returnfalse;}} "]
526799[label="blockStatements\n Character.UnicodeBlockub=Character.UnicodeBlock.of(input);if(ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A||ub==Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS||ub==Character.UnicodeBlock.HANGUL_SYLLABLES||ub==Character.UnicodeBlock.HANGUL_JAMO||ub==Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO||ub==Character.UnicodeBlock.HIRAGANA||ub==Character.UnicodeBlock.KATAKANA||ub==Character.UnicodeBlock.KATAKANA_PHONETIC_EXTENSIONS){returntrue;}else{returnfalse;} "]
626800[label="localVariableDeclarationStatement\n Character.UnicodeBlockub=Character.UnicodeBlock.of(input); "]
726801[label="localVariableDeclaration\n Character.UnicodeBlockub=Character.UnicodeBlock.of(input) "]
826802[label="unannClassOrInterfaceType\n Character.UnicodeBlock "]
926803[label="unannClassType_lfno_unannClassOrInterfaceType\n Character "]
926804[label="unannClassType_lf_unannClassOrInterfaceType\n .UnicodeBlock "]
826805[label="variableDeclarator\n ub=Character.UnicodeBlock.of(input) "]
926806[label="variableDeclaratorId\n ub "]
926807[label="methodInvocation_lfno_primary\n Character.UnicodeBlock.of(input) "]
1026808[label="typeName\n Character.UnicodeBlock "]
1126809[label="packageOrTypeName\n Character "]
1026810[label="expressionName\n input "]
626811[label="ifThenElseStatement\n if(ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A||ub==Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS||ub==Character.UnicodeBlock.HANGUL_SYLLABLES||ub==Character.UnicodeBlock.HANGUL_JAMO||ub==Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO||ub==Character.UnicodeBlock.HIRAGANA||ub==Character.UnicodeBlock.KATAKANA||ub==Character.UnicodeBlock.KATAKANA_PHONETIC_EXTENSIONS){returntrue;}else{returnfalse;} "]
726812[label="conditionalOrExpression\n ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A||ub==Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS||ub==Character.UnicodeBlock.HANGUL_SYLLABLES||ub==Character.UnicodeBlock.HANGUL_JAMO||ub==Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO||ub==Character.UnicodeBlock.HIRAGANA||ub==Character.UnicodeBlock.KATAKANA||ub==Character.UnicodeBlock.KATAKANA_PHONETIC_EXTENSIONS "]
826813[label="conditionalOrExpression\n ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A||ub==Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS||ub==Character.UnicodeBlock.HANGUL_SYLLABLES||ub==Character.UnicodeBlock.HANGUL_JAMO||ub==Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO||ub==Character.UnicodeBlock.HIRAGANA||ub==Character.UnicodeBlock.KATAKANA "]
926814[label="conditionalOrExpression\n ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A||ub==Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS||ub==Character.UnicodeBlock.HANGUL_SYLLABLES||ub==Character.UnicodeBlock.HANGUL_JAMO||ub==Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO||ub==Character.UnicodeBlock.HIRAGANA "]
1026815[label="conditionalOrExpression\n ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A||ub==Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS||ub==Character.UnicodeBlock.HANGUL_SYLLABLES||ub==Character.UnicodeBlock.HANGUL_JAMO||ub==Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO "]
1126816[label="conditionalOrExpression\n ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A||ub==Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS||ub==Character.UnicodeBlock.HANGUL_SYLLABLES||ub==Character.UnicodeBlock.HANGUL_JAMO "]
1226817[label="conditionalOrExpression\n ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A||ub==Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS||ub==Character.UnicodeBlock.HANGUL_SYLLABLES "]
1326818[label="conditionalOrExpression\n ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A||ub==Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS "]
1426819[label="conditionalOrExpression\n ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A "]
1526820[label="conditionalOrExpression\n ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS||ub==Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS "]
1626821[label="equalityExpression\n ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS "]
1726822[label="expressionName\n ub "]
1726823[label="expressionName\n Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS "]
1826824[label="ambiguousName\n Character.UnicodeBlock "]
1926825[label="ambiguousName\n Character "]
1626826[label="equalityExpression\n ub==Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS "]
1726827[label="expressionName\n ub "]
1726828[label="expressionName\n Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS "]
1826829[label="ambiguousName\n Character.UnicodeBlock "]
1926830[label="ambiguousName\n Character "]
1526831[label="equalityExpression\n ub==Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A "]
1626832[label="expressionName\n ub "]
1626833[label="expressionName\n Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A "]
1726834[label="ambiguousName\n Character.UnicodeBlock "]
1826835[label="ambiguousName\n Character "]
1426836[label="equalityExpression\n ub==Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS "]
1526837[label="expressionName\n ub "]
1526838[label="expressionName\n Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS "]
1626839[label="ambiguousName\n Character.UnicodeBlock "]
1726840[label="ambiguousName\n Character "]
1326841[label="equalityExpression\n ub==Character.UnicodeBlock.HANGUL_SYLLABLES "]
1426842[label="expressionName\n ub "]
1426843[label="expressionName\n Character.UnicodeBlock.HANGUL_SYLLABLES "]
1526844[label="ambiguousName\n Character.UnicodeBlock "]
1626845[label="ambiguousName\n Character "]
1226846[label="equalityExpression\n ub==Character.UnicodeBlock.HANGUL_JAMO "]
1326847[label="expressionName\n ub "]
1326848[label="expressionName\n Character.UnicodeBlock.HANGUL_JAMO "]
1426849[label="ambiguousName\n Character.UnicodeBlock "]
1526850[label="ambiguousName\n Character "]
1126851[label="equalityExpression\n ub==Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO "]
1226852[label="expressionName\n ub "]
1226853[label="expressionName\n Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO "]
1326854[label="ambiguousName\n Character.UnicodeBlock "]
1426855[label="ambiguousName\n Character "]
1026856[label="equalityExpression\n ub==Character.UnicodeBlock.HIRAGANA "]
1126857[label="expressionName\n ub "]
1126858[label="expressionName\n Character.UnicodeBlock.HIRAGANA "]
1226859[label="ambiguousName\n Character.UnicodeBlock "]
1326860[label="ambiguousName\n Character "]
926861[label="equalityExpression\n ub==Character.UnicodeBlock.KATAKANA "]
1026862[label="expressionName\n ub "]
1026863[label="expressionName\n Character.UnicodeBlock.KATAKANA "]
1126864[label="ambiguousName\n Character.UnicodeBlock "]
1226865[label="ambiguousName\n Character "]
826866[label="equalityExpression\n ub==Character.UnicodeBlock.KATAKANA_PHONETIC_EXTENSIONS "]
926867[label="expressionName\n ub "]
926868[label="expressionName\n Character.UnicodeBlock.KATAKANA_PHONETIC_EXTENSIONS "]
1026869[label="ambiguousName\n Character.UnicodeBlock "]
1126870[label="ambiguousName\n Character "]
726871[label="block\n {returntrue;} "]
826872[label="returnStatement\n returntrue; "]
926873[label="literal\n true "]
726874[label="block\n {returnfalse;} "]
826875[label="returnStatement\n returnfalse; "]
926876[label="literal\n false "]
326877[label="methodDeclaration\n publicstaticcharregularize(charinput){if(input==12288){input=(char)32;}elseif(input>65280&&input<65375){input=(char)(input-65248);}elseif(input>='A'&&input<='Z'){input+=32;}returninput;} "]
426878[label="methodModifier\n public "]
426879[label="methodModifier\n static "]
426880[label="methodHeader\n charregularize(charinput) "]
526881[label="integralType\n char "]
526882[label="methodDeclarator\n regularize(charinput) "]
626883[label="formalParameter\n charinput "]
726884[label="integralType\n char "]
726885[label="variableDeclaratorId\n input "]
426886[label="block\n {if(input==12288){input=(char)32;}elseif(input>65280&&input<65375){input=(char)(input-65248);}elseif(input>='A'&&input<='Z'){input+=32;}returninput;} "]
526887[label="blockStatements\n if(input==12288){input=(char)32;}elseif(input>65280&&input<65375){input=(char)(input-65248);}elseif(input>='A'&&input<='Z'){input+=32;}returninput; "]
626888[label="ifThenElseStatement\n if(input==12288){input=(char)32;}elseif(input>65280&&input<65375){input=(char)(input-65248);}elseif(input>='A'&&input<='Z'){input+=32;} "]
726889[label="equalityExpression\n input==12288 "]
826890[label="expressionName\n input "]
826891[label="literal\n 12288 "]
726892[label="block\n {input=(char)32;} "]
826893[label="expressionStatement\n input=(char)32; "]
926894[label="assignment\n input=(char)32 "]
1026895[label="expressionName\n input "]
1026896[label="assignmentOperator\n = "]
1026897[label="castExpression\n (char)32 "]
1126898[label="integralType\n char "]
1126899[label="literal\n 32 "]
726900[label="ifThenElseStatement\n if(input>65280&&input<65375){input=(char)(input-65248);}elseif(input>='A'&&input<='Z'){input+=32;} "]
826901[label="conditionalAndExpression\n input>65280&&input<65375 "]
926902[label="relationalExpression\n input>65280 "]
1026903[label="expressionName\n input "]
1026904[label="literal\n 65280 "]
926905[label="relationalExpression\n input<65375 "]
1026906[label="expressionName\n input "]
1026907[label="literal\n 65375 "]
826908[label="block\n {input=(char)(input-65248);} "]
926909[label="expressionStatement\n input=(char)(input-65248); "]
1026910[label="assignment\n input=(char)(input-65248) "]
1126911[label="expressionName\n input "]
1126912[label="assignmentOperator\n = "]
1126913[label="castExpression\n (char)(input-65248) "]
1226914[label="integralType\n char "]
1226915[label="primaryNoNewArray_lfno_primary\n (input-65248) "]
1326916[label="additiveExpression\n input-65248 "]
1426917[label="expressionName\n input "]
1426918[label="literal\n 65248 "]
826919[label="ifThenStatement\n if(input>='A'&&input<='Z'){input+=32;} "]
926920[label="conditionalAndExpression\n input>='A'&&input<='Z' "]
1026921[label="relationalExpression\n input>='A' "]
1126922[label="expressionName\n input "]
1126923[label="literal\n 'A' "]
1026924[label="relationalExpression\n input<='Z' "]
1126925[label="expressionName\n input "]
1126926[label="literal\n 'Z' "]
926927[label="block\n {input+=32;} "]
1026928[label="expressionStatement\n input+=32; "]
1126929[label="assignment\n input+=32 "]
1226930[label="expressionName\n input "]
1226931[label="assignmentOperator\n += "]
1226932[label="literal\n 32 "]
626933[label="returnStatement\n returninput; "]
726934[label="expressionName\n input "]
026935[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.datrie;publicinterfaceCharacterMapping{intgetInitSize();intgetCharsetSize();intzeroId();int[]toIdList(Stringkey);int[]toIdList(intcodePoint);StringtoString(int[]ids);}<EOF> "]
126936[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.datrie; "]
226937[label="packageName\n com.hankcs.hanlp.collection.trie.datrie "]
326938[label="packageName\n com.hankcs.hanlp.collection.trie "]
426939[label="packageName\n com.hankcs.hanlp.collection "]
526940[label="packageName\n com.hankcs.hanlp "]
626941[label="packageName\n com.hankcs "]
726942[label="packageName\n com "]
126943[label="normalInterfaceDeclaration\n publicinterfaceCharacterMapping{intgetInitSize();intgetCharsetSize();intzeroId();int[]toIdList(Stringkey);int[]toIdList(intcodePoint);StringtoString(int[]ids);} "]
226944[label="interfaceModifier\n public "]
226945[label="interfaceBody\n {intgetInitSize();intgetCharsetSize();intzeroId();int[]toIdList(Stringkey);int[]toIdList(intcodePoint);StringtoString(int[]ids);} "]
326946[label="interfaceMethodDeclaration\n intgetInitSize(); "]
426947[label="methodHeader\n intgetInitSize() "]
526948[label="integralType\n int "]
526949[label="methodDeclarator\n getInitSize() "]
426950[label="methodBody\n ; "]
326951[label="interfaceMethodDeclaration\n intgetCharsetSize(); "]
426952[label="methodHeader\n intgetCharsetSize() "]
526953[label="integralType\n int "]
526954[label="methodDeclarator\n getCharsetSize() "]
426955[label="methodBody\n ; "]
326956[label="interfaceMethodDeclaration\n intzeroId(); "]
426957[label="methodHeader\n intzeroId() "]
526958[label="integralType\n int "]
526959[label="methodDeclarator\n zeroId() "]
426960[label="methodBody\n ; "]
326961[label="interfaceMethodDeclaration\n int[]toIdList(Stringkey); "]
426962[label="methodHeader\n int[]toIdList(Stringkey) "]
526963[label="unannArrayType\n int[] "]
626964[label="integralType\n int "]
626965[label="dims\n [] "]
526966[label="methodDeclarator\n toIdList(Stringkey) "]
626967[label="formalParameter\n Stringkey "]
726968[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
726969[label="variableDeclaratorId\n key "]
426970[label="methodBody\n ; "]
326971[label="interfaceMethodDeclaration\n int[]toIdList(intcodePoint); "]
426972[label="methodHeader\n int[]toIdList(intcodePoint) "]
526973[label="unannArrayType\n int[] "]
626974[label="integralType\n int "]
626975[label="dims\n [] "]
526976[label="methodDeclarator\n toIdList(intcodePoint) "]
626977[label="formalParameter\n intcodePoint "]
726978[label="integralType\n int "]
726979[label="variableDeclaratorId\n codePoint "]
426980[label="methodBody\n ; "]
326981[label="interfaceMethodDeclaration\n StringtoString(int[]ids); "]
426982[label="methodHeader\n StringtoString(int[]ids) "]
526983[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
526984[label="methodDeclarator\n toString(int[]ids) "]
626985[label="formalParameter\n int[]ids "]
726986[label="unannArrayType\n int[] "]
826987[label="integralType\n int "]
826988[label="dims\n [] "]
726989[label="variableDeclaratorId\n ids "]
426990[label="methodBody\n ; "]
026991[label="compilationUnit\n packagecom.hankcs.hanlp.suggest.scorer.editdistance;importcom.hankcs.hanlp.algorithm.EditDistance;importcom.hankcs.hanlp.suggest.scorer.ISentenceKey;publicclassCharArrayimplementsComparable<CharArray>,ISentenceKey<CharArray>{char[]value;publicCharArray(char[]value){this.value=value;}@OverridepublicintcompareTo(CharArrayother){intlen1=value.length;intlen2=other.value.length;intlim=Math.min(len1,len2);charv1[]=value;charv2[]=other.value;intk=0;while(k<lim){charc1=v1[k];charc2=v2[k];if(c1!=c2){returnc1-c2;}k++;}returnlen1-len2;}@OverridepublicDoublesimilarity(CharArrayother){intdistance=EditDistance.compute(this.value,other.value)+1;return1.0/distance;}}<EOF> "]
126992[label="packageDeclaration\n packagecom.hankcs.hanlp.suggest.scorer.editdistance; "]
226993[label="packageName\n com.hankcs.hanlp.suggest.scorer.editdistance "]
326994[label="packageName\n com.hankcs.hanlp.suggest.scorer "]
426995[label="packageName\n com.hankcs.hanlp.suggest "]
526996[label="packageName\n com.hankcs.hanlp "]
626997[label="packageName\n com.hankcs "]
726998[label="packageName\n com "]
126999[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.algorithm.EditDistance; "]
227000[label="typeName\n com.hankcs.hanlp.algorithm.EditDistance "]
327001[label="packageOrTypeName\n com.hankcs.hanlp.algorithm "]
427002[label="packageOrTypeName\n com.hankcs.hanlp "]
527003[label="packageOrTypeName\n com.hankcs "]
627004[label="packageOrTypeName\n com "]
127005[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.suggest.scorer.ISentenceKey; "]
227006[label="typeName\n com.hankcs.hanlp.suggest.scorer.ISentenceKey "]
327007[label="packageOrTypeName\n com.hankcs.hanlp.suggest.scorer "]
427008[label="packageOrTypeName\n com.hankcs.hanlp.suggest "]
527009[label="packageOrTypeName\n com.hankcs.hanlp "]
627010[label="packageOrTypeName\n com.hankcs "]
727011[label="packageOrTypeName\n com "]
127012[label="normalClassDeclaration\n publicclassCharArrayimplementsComparable<CharArray>,ISentenceKey<CharArray>{char[]value;publicCharArray(char[]value){this.value=value;}@OverridepublicintcompareTo(CharArrayother){intlen1=value.length;intlen2=other.value.length;intlim=Math.min(len1,len2);charv1[]=value;charv2[]=other.value;intk=0;while(k<lim){charc1=v1[k];charc2=v2[k];if(c1!=c2){returnc1-c2;}k++;}returnlen1-len2;}@OverridepublicDoublesimilarity(CharArrayother){intdistance=EditDistance.compute(this.value,other.value)+1;return1.0/distance;}} "]
227013[label="classModifier\n public "]
227014[label="superinterfaces\n implementsComparable<CharArray>,ISentenceKey<CharArray> "]
327015[label="interfaceTypeList\n Comparable<CharArray>,ISentenceKey<CharArray> "]
427016[label="classType\n Comparable<CharArray> "]
527017[label="typeArguments\n <CharArray> "]
627018[label="classType_lfno_classOrInterfaceType\n CharArray "]
427019[label="classType\n ISentenceKey<CharArray> "]
527020[label="typeArguments\n <CharArray> "]
627021[label="classType_lfno_classOrInterfaceType\n CharArray "]
227022[label="classBody\n {char[]value;publicCharArray(char[]value){this.value=value;}@OverridepublicintcompareTo(CharArrayother){intlen1=value.length;intlen2=other.value.length;intlim=Math.min(len1,len2);charv1[]=value;charv2[]=other.value;intk=0;while(k<lim){charc1=v1[k];charc2=v2[k];if(c1!=c2){returnc1-c2;}k++;}returnlen1-len2;}@OverridepublicDoublesimilarity(CharArrayother){intdistance=EditDistance.compute(this.value,other.value)+1;return1.0/distance;}} "]
327023[label="fieldDeclaration\n char[]value; "]
427024[label="unannArrayType\n char[] "]
527025[label="integralType\n char "]
527026[label="dims\n [] "]
427027[label="variableDeclaratorId\n value "]
327028[label="constructorDeclaration\n publicCharArray(char[]value){this.value=value;} "]
427029[label="constructorModifier\n public "]
427030[label="constructorDeclarator\n CharArray(char[]value) "]
527031[label="simpleTypeName\n CharArray "]
527032[label="formalParameter\n char[]value "]
627033[label="unannArrayType\n char[] "]
727034[label="integralType\n char "]
727035[label="dims\n [] "]
627036[label="variableDeclaratorId\n value "]
427037[label="constructorBody\n {this.value=value;} "]
527038[label="expressionStatement\n this.value=value; "]
627039[label="assignment\n this.value=value "]
727040[label="fieldAccess\n this.value "]
827041[label="primaryNoNewArray_lfno_primary\n this "]
727042[label="assignmentOperator\n = "]
727043[label="expressionName\n value "]
327044[label="methodDeclaration\n @OverridepublicintcompareTo(CharArrayother){intlen1=value.length;intlen2=other.value.length;intlim=Math.min(len1,len2);charv1[]=value;charv2[]=other.value;intk=0;while(k<lim){charc1=v1[k];charc2=v2[k];if(c1!=c2){returnc1-c2;}k++;}returnlen1-len2;} "]
427045[label="markerAnnotation\n @Override "]
527046[label="typeName\n Override "]
427047[label="methodModifier\n public "]
427048[label="methodHeader\n intcompareTo(CharArrayother) "]
527049[label="integralType\n int "]
527050[label="methodDeclarator\n compareTo(CharArrayother) "]
627051[label="formalParameter\n CharArrayother "]
727052[label="unannClassType_lfno_unannClassOrInterfaceType\n CharArray "]
727053[label="variableDeclaratorId\n other "]
427054[label="block\n {intlen1=value.length;intlen2=other.value.length;intlim=Math.min(len1,len2);charv1[]=value;charv2[]=other.value;intk=0;while(k<lim){charc1=v1[k];charc2=v2[k];if(c1!=c2){returnc1-c2;}k++;}returnlen1-len2;} "]
527055[label="blockStatements\n intlen1=value.length;intlen2=other.value.length;intlim=Math.min(len1,len2);charv1[]=value;charv2[]=other.value;intk=0;while(k<lim){charc1=v1[k];charc2=v2[k];if(c1!=c2){returnc1-c2;}k++;}returnlen1-len2; "]
627056[label="localVariableDeclarationStatement\n intlen1=value.length; "]
727057[label="localVariableDeclaration\n intlen1=value.length "]
827058[label="integralType\n int "]
827059[label="variableDeclarator\n len1=value.length "]
927060[label="variableDeclaratorId\n len1 "]
927061[label="expressionName\n value.length "]
1027062[label="ambiguousName\n value "]
627063[label="localVariableDeclarationStatement\n intlen2=other.value.length; "]
727064[label="localVariableDeclaration\n intlen2=other.value.length "]
827065[label="integralType\n int "]
827066[label="variableDeclarator\n len2=other.value.length "]
927067[label="variableDeclaratorId\n len2 "]
927068[label="expressionName\n other.value.length "]
1027069[label="ambiguousName\n other.value "]
1127070[label="ambiguousName\n other "]
627071[label="localVariableDeclarationStatement\n intlim=Math.min(len1,len2); "]
727072[label="localVariableDeclaration\n intlim=Math.min(len1,len2) "]
827073[label="integralType\n int "]
827074[label="variableDeclarator\n lim=Math.min(len1,len2) "]
927075[label="variableDeclaratorId\n lim "]
927076[label="methodInvocation_lfno_primary\n Math.min(len1,len2) "]
1027077[label="typeName\n Math "]
1027078[label="argumentList\n len1,len2 "]
1127079[label="expressionName\n len1 "]
1127080[label="expressionName\n len2 "]
627081[label="localVariableDeclarationStatement\n charv1[]=value; "]
727082[label="localVariableDeclaration\n charv1[]=value "]
827083[label="integralType\n char "]
827084[label="variableDeclarator\n v1[]=value "]
927085[label="variableDeclaratorId\n v1[] "]
1027086[label="dims\n [] "]
927087[label="expressionName\n value "]
627088[label="localVariableDeclarationStatement\n charv2[]=other.value; "]
727089[label="localVariableDeclaration\n charv2[]=other.value "]
827090[label="integralType\n char "]
827091[label="variableDeclarator\n v2[]=other.value "]
927092[label="variableDeclaratorId\n v2[] "]
1027093[label="dims\n [] "]
927094[label="expressionName\n other.value "]
1027095[label="ambiguousName\n other "]
627096[label="localVariableDeclarationStatement\n intk=0; "]
727097[label="localVariableDeclaration\n intk=0 "]
827098[label="integralType\n int "]
827099[label="variableDeclarator\n k=0 "]
927100[label="variableDeclaratorId\n k "]
927101[label="literal\n 0 "]
627102[label="whileStatement\n while(k<lim){charc1=v1[k];charc2=v2[k];if(c1!=c2){returnc1-c2;}k++;} "]
727103[label="relationalExpression\n k<lim "]
827104[label="expressionName\n k "]
827105[label="expressionName\n lim "]
727106[label="block\n {charc1=v1[k];charc2=v2[k];if(c1!=c2){returnc1-c2;}k++;} "]
827107[label="blockStatements\n charc1=v1[k];charc2=v2[k];if(c1!=c2){returnc1-c2;}k++; "]
927108[label="localVariableDeclarationStatement\n charc1=v1[k]; "]
1027109[label="localVariableDeclaration\n charc1=v1[k] "]
1127110[label="integralType\n char "]
1127111[label="variableDeclarator\n c1=v1[k] "]
1227112[label="variableDeclaratorId\n c1 "]
1227113[label="arrayAccess_lfno_primary\n v1[k] "]
1327114[label="expressionName\n v1 "]
1327115[label="expressionName\n k "]
927116[label="localVariableDeclarationStatement\n charc2=v2[k]; "]
1027117[label="localVariableDeclaration\n charc2=v2[k] "]
1127118[label="integralType\n char "]
1127119[label="variableDeclarator\n c2=v2[k] "]
1227120[label="variableDeclaratorId\n c2 "]
1227121[label="arrayAccess_lfno_primary\n v2[k] "]
1327122[label="expressionName\n v2 "]
1327123[label="expressionName\n k "]
927124[label="ifThenStatement\n if(c1!=c2){returnc1-c2;} "]
1027125[label="equalityExpression\n c1!=c2 "]
1127126[label="expressionName\n c1 "]
1127127[label="expressionName\n c2 "]
1027128[label="block\n {returnc1-c2;} "]
1127129[label="returnStatement\n returnc1-c2; "]
1227130[label="additiveExpression\n c1-c2 "]
1327131[label="expressionName\n c1 "]
1327132[label="expressionName\n c2 "]
927133[label="expressionStatement\n k++; "]
1027134[label="postIncrementExpression\n k++ "]
1127135[label="expressionName\n k "]
627136[label="returnStatement\n returnlen1-len2; "]
727137[label="additiveExpression\n len1-len2 "]
827138[label="expressionName\n len1 "]
827139[label="expressionName\n len2 "]
327140[label="methodDeclaration\n @OverridepublicDoublesimilarity(CharArrayother){intdistance=EditDistance.compute(this.value,other.value)+1;return1.0/distance;} "]
427141[label="markerAnnotation\n @Override "]
527142[label="typeName\n Override "]
427143[label="methodModifier\n public "]
427144[label="methodHeader\n Doublesimilarity(CharArrayother) "]
527145[label="unannClassType_lfno_unannClassOrInterfaceType\n Double "]
527146[label="methodDeclarator\n similarity(CharArrayother) "]
627147[label="formalParameter\n CharArrayother "]
727148[label="unannClassType_lfno_unannClassOrInterfaceType\n CharArray "]
727149[label="variableDeclaratorId\n other "]
427150[label="block\n {intdistance=EditDistance.compute(this.value,other.value)+1;return1.0/distance;} "]
527151[label="blockStatements\n intdistance=EditDistance.compute(this.value,other.value)+1;return1.0/distance; "]
627152[label="localVariableDeclarationStatement\n intdistance=EditDistance.compute(this.value,other.value)+1; "]
727153[label="localVariableDeclaration\n intdistance=EditDistance.compute(this.value,other.value)+1 "]
827154[label="integralType\n int "]
827155[label="variableDeclarator\n distance=EditDistance.compute(this.value,other.value)+1 "]
927156[label="variableDeclaratorId\n distance "]
927157[label="additiveExpression\n EditDistance.compute(this.value,other.value)+1 "]
1027158[label="methodInvocation_lfno_primary\n EditDistance.compute(this.value,other.value) "]
1127159[label="typeName\n EditDistance "]
1127160[label="argumentList\n this.value,other.value "]
1227161[label="primary\n this.value "]
1327162[label="primaryNoNewArray_lfno_primary\n this "]
1327163[label="fieldAccess_lf_primary\n .value "]
1227164[label="expressionName\n other.value "]
1327165[label="ambiguousName\n other "]
1027166[label="literal\n 1 "]
627167[label="returnStatement\n return1.0/distance; "]
727168[label="multiplicativeExpression\n 1.0/distance "]
827169[label="literal\n 1.0 "]
827170[label="expressionName\n distance "]
027171[label="compilationUnit\n packagecom.hankcs.hanlp.dictionary.other;importcom.hankcs.hanlp.HanLP;importcom.hankcs.hanlp.corpus.io.IOUtil;importcom.hankcs.hanlp.utility.Predefine;importjava.io.FileInputStream;importjava.io.ObjectInputStream;importstaticcom.hankcs.hanlp.utility.Predefine.logger;publicclassCharTable{publicstaticchar[]CONVERT;static{longstart=System.currentTimeMillis();if(!load(HanLP.Config.CharTablePath)){thrownewIllegalArgumentException(\"字符正规化表加载失败\");}logger.info(\"字符正规化表加载成功：\"+(System.currentTimeMillis()-start)+\" ms\");}privatestaticbooleanload(Stringpath){StringbinPath=path+Predefine.BIN_EXT;if(loadBin(binPath))returntrue;CONVERT=newchar[Character.MAX_VALUE+1];for(inti=0;i<CONVERT.length;i++){CONVERT[i]=(char)i;}IOUtil.LineIteratoriterator=newIOUtil.LineIterator(path);while(iterator.hasNext()){Stringline=iterator.next();if(line==null)returnfalse;if(line.length()!=3)continue;CONVERT[line.charAt(0)]=CONVERT[line.charAt(2)];}logger.info(\"正在缓存字符正规化表到\"+binPath);IOUtil.saveObjectTo(CONVERT,binPath);returntrue;}privatestaticbooleanloadBin(Stringpath){try{ObjectInputStreamin=newObjectInputStream(IOUtil.newInputStream(path));CONVERT=(char[])in.readObject();in.close();}catch(Exceptione){logger.warning(\"字符正规化表缓存加载失败，原因如下：\"+e);returnfalse;}returntrue;}publicstaticcharconvert(charc){returnCONVERT[c];}publicstaticchar[]convert(char[]charArray){char[]result=newchar[charArray.length];for(inti=0;i<charArray.length;i++){result[i]=CONVERT[charArray[i]];}returnresult;}publicstaticStringconvert(StringcharArray){assertcharArray!=null;char[]result=newchar[charArray.length()];for(inti=0;i<charArray.length();i++){result[i]=CONVERT[charArray.charAt(i)];}returnnewString(result);}publicstaticvoidnormalization(char[]charArray){assertcharArray!=null;for(inti=0;i<charArray.length;i++){charArray[i]=CONVERT[charArray[i]];}}}<EOF> "]
127172[label="packageDeclaration\n packagecom.hankcs.hanlp.dictionary.other; "]
227173[label="packageName\n com.hankcs.hanlp.dictionary.other "]
327174[label="packageName\n com.hankcs.hanlp.dictionary "]
427175[label="packageName\n com.hankcs.hanlp "]
527176[label="packageName\n com.hankcs "]
627177[label="packageName\n com "]
127178[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.HanLP; "]
227179[label="typeName\n com.hankcs.hanlp.HanLP "]
327180[label="packageOrTypeName\n com.hankcs.hanlp "]
427181[label="packageOrTypeName\n com.hankcs "]
527182[label="packageOrTypeName\n com "]
127183[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
227184[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
327185[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
427186[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
527187[label="packageOrTypeName\n com.hankcs.hanlp "]
627188[label="packageOrTypeName\n com.hankcs "]
727189[label="packageOrTypeName\n com "]
127190[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.Predefine; "]
227191[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
327192[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
427193[label="packageOrTypeName\n com.hankcs.hanlp "]
527194[label="packageOrTypeName\n com.hankcs "]
627195[label="packageOrTypeName\n com "]
127196[label="singleTypeImportDeclaration\n importjava.io.FileInputStream; "]
227197[label="typeName\n java.io.FileInputStream "]
327198[label="packageOrTypeName\n java.io "]
427199[label="packageOrTypeName\n java "]
127200[label="singleTypeImportDeclaration\n importjava.io.ObjectInputStream; "]
227201[label="typeName\n java.io.ObjectInputStream "]
327202[label="packageOrTypeName\n java.io "]
427203[label="packageOrTypeName\n java "]
127204[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.utility.Predefine.logger; "]
227205[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
327206[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
427207[label="packageOrTypeName\n com.hankcs.hanlp "]
527208[label="packageOrTypeName\n com.hankcs "]
627209[label="packageOrTypeName\n com "]
127210[label="normalClassDeclaration\n publicclassCharTable{publicstaticchar[]CONVERT;static{longstart=System.currentTimeMillis();if(!load(HanLP.Config.CharTablePath)){thrownewIllegalArgumentException(\"字符正规化表加载失败\");}logger.info(\"字符正规化表加载成功：\"+(System.currentTimeMillis()-start)+\" ms\");}privatestaticbooleanload(Stringpath){StringbinPath=path+Predefine.BIN_EXT;if(loadBin(binPath))returntrue;CONVERT=newchar[Character.MAX_VALUE+1];for(inti=0;i<CONVERT.length;i++){CONVERT[i]=(char)i;}IOUtil.LineIteratoriterator=newIOUtil.LineIterator(path);while(iterator.hasNext()){Stringline=iterator.next();if(line==null)returnfalse;if(line.length()!=3)continue;CONVERT[line.charAt(0)]=CONVERT[line.charAt(2)];}logger.info(\"正在缓存字符正规化表到\"+binPath);IOUtil.saveObjectTo(CONVERT,binPath);returntrue;}privatestaticbooleanloadBin(Stringpath){try{ObjectInputStreamin=newObjectInputStream(IOUtil.newInputStream(path));CONVERT=(char[])in.readObject();in.close();}catch(Exceptione){logger.warning(\"字符正规化表缓存加载失败，原因如下：\"+e);returnfalse;}returntrue;}publicstaticcharconvert(charc){returnCONVERT[c];}publicstaticchar[]convert(char[]charArray){char[]result=newchar[charArray.length];for(inti=0;i<charArray.length;i++){result[i]=CONVERT[charArray[i]];}returnresult;}publicstaticStringconvert(StringcharArray){assertcharArray!=null;char[]result=newchar[charArray.length()];for(inti=0;i<charArray.length();i++){result[i]=CONVERT[charArray.charAt(i)];}returnnewString(result);}publicstaticvoidnormalization(char[]charArray){assertcharArray!=null;for(inti=0;i<charArray.length;i++){charArray[i]=CONVERT[charArray[i]];}}} "]
227211[label="classModifier\n public "]
227212[label="classBody\n {publicstaticchar[]CONVERT;static{longstart=System.currentTimeMillis();if(!load(HanLP.Config.CharTablePath)){thrownewIllegalArgumentException(\"字符正规化表加载失败\");}logger.info(\"字符正规化表加载成功：\"+(System.currentTimeMillis()-start)+\" ms\");}privatestaticbooleanload(Stringpath){StringbinPath=path+Predefine.BIN_EXT;if(loadBin(binPath))returntrue;CONVERT=newchar[Character.MAX_VALUE+1];for(inti=0;i<CONVERT.length;i++){CONVERT[i]=(char)i;}IOUtil.LineIteratoriterator=newIOUtil.LineIterator(path);while(iterator.hasNext()){Stringline=iterator.next();if(line==null)returnfalse;if(line.length()!=3)continue;CONVERT[line.charAt(0)]=CONVERT[line.charAt(2)];}logger.info(\"正在缓存字符正规化表到\"+binPath);IOUtil.saveObjectTo(CONVERT,binPath);returntrue;}privatestaticbooleanloadBin(Stringpath){try{ObjectInputStreamin=newObjectInputStream(IOUtil.newInputStream(path));CONVERT=(char[])in.readObject();in.close();}catch(Exceptione){logger.warning(\"字符正规化表缓存加载失败，原因如下：\"+e);returnfalse;}returntrue;}publicstaticcharconvert(charc){returnCONVERT[c];}publicstaticchar[]convert(char[]charArray){char[]result=newchar[charArray.length];for(inti=0;i<charArray.length;i++){result[i]=CONVERT[charArray[i]];}returnresult;}publicstaticStringconvert(StringcharArray){assertcharArray!=null;char[]result=newchar[charArray.length()];for(inti=0;i<charArray.length();i++){result[i]=CONVERT[charArray.charAt(i)];}returnnewString(result);}publicstaticvoidnormalization(char[]charArray){assertcharArray!=null;for(inti=0;i<charArray.length;i++){charArray[i]=CONVERT[charArray[i]];}}} "]
327213[label="fieldDeclaration\n publicstaticchar[]CONVERT; "]
427214[label="fieldModifier\n public "]
427215[label="fieldModifier\n static "]
427216[label="unannArrayType\n char[] "]
527217[label="integralType\n char "]
527218[label="dims\n [] "]
427219[label="variableDeclaratorId\n CONVERT "]
327220[label="staticInitializer\n static{longstart=System.currentTimeMillis();if(!load(HanLP.Config.CharTablePath)){thrownewIllegalArgumentException(\"字符正规化表加载失败\");}logger.info(\"字符正规化表加载成功：\"+(System.currentTimeMillis()-start)+\" ms\");} "]
427221[label="block\n {longstart=System.currentTimeMillis();if(!load(HanLP.Config.CharTablePath)){thrownewIllegalArgumentException(\"字符正规化表加载失败\");}logger.info(\"字符正规化表加载成功：\"+(System.currentTimeMillis()-start)+\" ms\");} "]
527222[label="blockStatements\n longstart=System.currentTimeMillis();if(!load(HanLP.Config.CharTablePath)){thrownewIllegalArgumentException(\"字符正规化表加载失败\");}logger.info(\"字符正规化表加载成功：\"+(System.currentTimeMillis()-start)+\" ms\"); "]
627223[label="localVariableDeclarationStatement\n longstart=System.currentTimeMillis(); "]
727224[label="localVariableDeclaration\n longstart=System.currentTimeMillis() "]
827225[label="integralType\n long "]
827226[label="variableDeclarator\n start=System.currentTimeMillis() "]
927227[label="variableDeclaratorId\n start "]
927228[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
1027229[label="typeName\n System "]
627230[label="ifThenStatement\n if(!load(HanLP.Config.CharTablePath)){thrownewIllegalArgumentException(\"字符正规化表加载失败\");} "]
727231[label="unaryExpressionNotPlusMinus\n !load(HanLP.Config.CharTablePath) "]
827232[label="methodInvocation_lfno_primary\n load(HanLP.Config.CharTablePath) "]
927233[label="methodName\n load "]
927234[label="expressionName\n HanLP.Config.CharTablePath "]
1027235[label="ambiguousName\n HanLP.Config "]
1127236[label="ambiguousName\n HanLP "]
727237[label="block\n {thrownewIllegalArgumentException(\"字符正规化表加载失败\");} "]
827238[label="throwStatement\n thrownewIllegalArgumentException(\"字符正规化表加载失败\"); "]
927239[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"字符正规化表加载失败\") "]
1027240[label="literal\n \"字符正规化表加载失败\" "]
627241[label="expressionStatement\n logger.info(\"字符正规化表加载成功：\"+(System.currentTimeMillis()-start)+\" ms\"); "]
727242[label="methodInvocation\n logger.info(\"字符正规化表加载成功：\"+(System.currentTimeMillis()-start)+\" ms\") "]
827243[label="typeName\n logger "]
827244[label="additiveExpression\n \"字符正规化表加载成功：\"+(System.currentTimeMillis()-start)+\" ms\" "]
927245[label="additiveExpression\n \"字符正规化表加载成功：\"+(System.currentTimeMillis()-start) "]
1027246[label="literal\n \"字符正规化表加载成功：\" "]
1027247[label="primaryNoNewArray_lfno_primary\n (System.currentTimeMillis()-start) "]
1127248[label="additiveExpression\n System.currentTimeMillis()-start "]
1227249[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
1327250[label="typeName\n System "]
1227251[label="expressionName\n start "]
927252[label="literal\n \" ms\" "]
327253[label="methodDeclaration\n privatestaticbooleanload(Stringpath){StringbinPath=path+Predefine.BIN_EXT;if(loadBin(binPath))returntrue;CONVERT=newchar[Character.MAX_VALUE+1];for(inti=0;i<CONVERT.length;i++){CONVERT[i]=(char)i;}IOUtil.LineIteratoriterator=newIOUtil.LineIterator(path);while(iterator.hasNext()){Stringline=iterator.next();if(line==null)returnfalse;if(line.length()!=3)continue;CONVERT[line.charAt(0)]=CONVERT[line.charAt(2)];}logger.info(\"正在缓存字符正规化表到\"+binPath);IOUtil.saveObjectTo(CONVERT,binPath);returntrue;} "]
427254[label="methodModifier\n private "]
427255[label="methodModifier\n static "]
427256[label="methodHeader\n booleanload(Stringpath) "]
527257[label="unannPrimitiveType\n boolean "]
527258[label="methodDeclarator\n load(Stringpath) "]
627259[label="formalParameter\n Stringpath "]
727260[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
727261[label="variableDeclaratorId\n path "]
427262[label="block\n {StringbinPath=path+Predefine.BIN_EXT;if(loadBin(binPath))returntrue;CONVERT=newchar[Character.MAX_VALUE+1];for(inti=0;i<CONVERT.length;i++){CONVERT[i]=(char)i;}IOUtil.LineIteratoriterator=newIOUtil.LineIterator(path);while(iterator.hasNext()){Stringline=iterator.next();if(line==null)returnfalse;if(line.length()!=3)continue;CONVERT[line.charAt(0)]=CONVERT[line.charAt(2)];}logger.info(\"正在缓存字符正规化表到\"+binPath);IOUtil.saveObjectTo(CONVERT,binPath);returntrue;} "]
527263[label="blockStatements\n StringbinPath=path+Predefine.BIN_EXT;if(loadBin(binPath))returntrue;CONVERT=newchar[Character.MAX_VALUE+1];for(inti=0;i<CONVERT.length;i++){CONVERT[i]=(char)i;}IOUtil.LineIteratoriterator=newIOUtil.LineIterator(path);while(iterator.hasNext()){Stringline=iterator.next();if(line==null)returnfalse;if(line.length()!=3)continue;CONVERT[line.charAt(0)]=CONVERT[line.charAt(2)];}logger.info(\"正在缓存字符正规化表到\"+binPath);IOUtil.saveObjectTo(CONVERT,binPath);returntrue; "]
627264[label="localVariableDeclarationStatement\n StringbinPath=path+Predefine.BIN_EXT; "]
727265[label="localVariableDeclaration\n StringbinPath=path+Predefine.BIN_EXT "]
827266[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
827267[label="variableDeclarator\n binPath=path+Predefine.BIN_EXT "]
927268[label="variableDeclaratorId\n binPath "]
927269[label="additiveExpression\n path+Predefine.BIN_EXT "]
1027270[label="expressionName\n path "]
1027271[label="expressionName\n Predefine.BIN_EXT "]
1127272[label="ambiguousName\n Predefine "]
627273[label="ifThenStatement\n if(loadBin(binPath))returntrue; "]
727274[label="methodInvocation_lfno_primary\n loadBin(binPath) "]
827275[label="methodName\n loadBin "]
827276[label="expressionName\n binPath "]
727277[label="returnStatement\n returntrue; "]
827278[label="literal\n true "]
627279[label="expressionStatement\n CONVERT=newchar[Character.MAX_VALUE+1]; "]
727280[label="assignment\n CONVERT=newchar[Character.MAX_VALUE+1] "]
827281[label="expressionName\n CONVERT "]
827282[label="assignmentOperator\n = "]
827283[label="arrayCreationExpression\n newchar[Character.MAX_VALUE+1] "]
927284[label="integralType\n char "]
927285[label="dimExpr\n [Character.MAX_VALUE+1] "]
1027286[label="additiveExpression\n Character.MAX_VALUE+1 "]
1127287[label="expressionName\n Character.MAX_VALUE "]
1227288[label="ambiguousName\n Character "]
1127289[label="literal\n 1 "]
627290[label="basicForStatement\n for(inti=0;i<CONVERT.length;i++){CONVERT[i]=(char)i;} "]
727291[label="localVariableDeclaration\n inti=0 "]
827292[label="integralType\n int "]
827293[label="variableDeclarator\n i=0 "]
927294[label="variableDeclaratorId\n i "]
927295[label="literal\n 0 "]
727296[label="relationalExpression\n i<CONVERT.length "]
827297[label="expressionName\n i "]
827298[label="expressionName\n CONVERT.length "]
927299[label="ambiguousName\n CONVERT "]
727300[label="postIncrementExpression\n i++ "]
827301[label="expressionName\n i "]
727302[label="block\n {CONVERT[i]=(char)i;} "]
827303[label="expressionStatement\n CONVERT[i]=(char)i; "]
927304[label="assignment\n CONVERT[i]=(char)i "]
1027305[label="arrayAccess\n CONVERT[i] "]
1127306[label="expressionName\n CONVERT "]
1127307[label="expressionName\n i "]
1027308[label="assignmentOperator\n = "]
1027309[label="castExpression\n (char)i "]
1127310[label="integralType\n char "]
1127311[label="expressionName\n i "]
627312[label="localVariableDeclarationStatement\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(path); "]
727313[label="localVariableDeclaration\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(path) "]
827314[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
927315[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
927316[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
827317[label="variableDeclarator\n iterator=newIOUtil.LineIterator(path) "]
927318[label="variableDeclaratorId\n iterator "]
927319[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(path) "]
1027320[label="expressionName\n path "]
627321[label="whileStatement\n while(iterator.hasNext()){Stringline=iterator.next();if(line==null)returnfalse;if(line.length()!=3)continue;CONVERT[line.charAt(0)]=CONVERT[line.charAt(2)];} "]
727322[label="methodInvocation_lfno_primary\n iterator.hasNext() "]
827323[label="typeName\n iterator "]
727324[label="block\n {Stringline=iterator.next();if(line==null)returnfalse;if(line.length()!=3)continue;CONVERT[line.charAt(0)]=CONVERT[line.charAt(2)];} "]
827325[label="blockStatements\n Stringline=iterator.next();if(line==null)returnfalse;if(line.length()!=3)continue;CONVERT[line.charAt(0)]=CONVERT[line.charAt(2)]; "]
927326[label="localVariableDeclarationStatement\n Stringline=iterator.next(); "]
1027327[label="localVariableDeclaration\n Stringline=iterator.next() "]
1127328[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1127329[label="variableDeclarator\n line=iterator.next() "]
1227330[label="variableDeclaratorId\n line "]
1227331[label="methodInvocation_lfno_primary\n iterator.next() "]
1327332[label="typeName\n iterator "]
927333[label="ifThenStatement\n if(line==null)returnfalse; "]
1027334[label="equalityExpression\n line==null "]
1127335[label="expressionName\n line "]
1127336[label="literal\n null "]
1027337[label="returnStatement\n returnfalse; "]
1127338[label="literal\n false "]
927339[label="ifThenStatement\n if(line.length()!=3)continue; "]
1027340[label="equalityExpression\n line.length()!=3 "]
1127341[label="methodInvocation_lfno_primary\n line.length() "]
1227342[label="typeName\n line "]
1127343[label="literal\n 3 "]
1027344[label="continueStatement\n continue; "]
927345[label="expressionStatement\n CONVERT[line.charAt(0)]=CONVERT[line.charAt(2)]; "]
1027346[label="assignment\n CONVERT[line.charAt(0)]=CONVERT[line.charAt(2)] "]
1127347[label="arrayAccess\n CONVERT[line.charAt(0)] "]
1227348[label="expressionName\n CONVERT "]
1227349[label="methodInvocation_lfno_primary\n line.charAt(0) "]
1327350[label="typeName\n line "]
1327351[label="literal\n 0 "]
1127352[label="assignmentOperator\n = "]
1127353[label="arrayAccess_lfno_primary\n CONVERT[line.charAt(2)] "]
1227354[label="expressionName\n CONVERT "]
1227355[label="methodInvocation_lfno_primary\n line.charAt(2) "]
1327356[label="typeName\n line "]
1327357[label="literal\n 2 "]
627358[label="expressionStatement\n logger.info(\"正在缓存字符正规化表到\"+binPath); "]
727359[label="methodInvocation\n logger.info(\"正在缓存字符正规化表到\"+binPath) "]
827360[label="typeName\n logger "]
827361[label="additiveExpression\n \"正在缓存字符正规化表到\"+binPath "]
927362[label="literal\n \"正在缓存字符正规化表到\" "]
927363[label="expressionName\n binPath "]
627364[label="expressionStatement\n IOUtil.saveObjectTo(CONVERT,binPath); "]
727365[label="methodInvocation\n IOUtil.saveObjectTo(CONVERT,binPath) "]
827366[label="typeName\n IOUtil "]
827367[label="argumentList\n CONVERT,binPath "]
927368[label="expressionName\n CONVERT "]
927369[label="expressionName\n binPath "]
627370[label="returnStatement\n returntrue; "]
727371[label="literal\n true "]
327372[label="methodDeclaration\n privatestaticbooleanloadBin(Stringpath){try{ObjectInputStreamin=newObjectInputStream(IOUtil.newInputStream(path));CONVERT=(char[])in.readObject();in.close();}catch(Exceptione){logger.warning(\"字符正规化表缓存加载失败，原因如下：\"+e);returnfalse;}returntrue;} "]
427373[label="methodModifier\n private "]
427374[label="methodModifier\n static "]
427375[label="methodHeader\n booleanloadBin(Stringpath) "]
527376[label="unannPrimitiveType\n boolean "]
527377[label="methodDeclarator\n loadBin(Stringpath) "]
627378[label="formalParameter\n Stringpath "]
727379[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
727380[label="variableDeclaratorId\n path "]
427381[label="block\n {try{ObjectInputStreamin=newObjectInputStream(IOUtil.newInputStream(path));CONVERT=(char[])in.readObject();in.close();}catch(Exceptione){logger.warning(\"字符正规化表缓存加载失败，原因如下：\"+e);returnfalse;}returntrue;} "]
527382[label="blockStatements\n try{ObjectInputStreamin=newObjectInputStream(IOUtil.newInputStream(path));CONVERT=(char[])in.readObject();in.close();}catch(Exceptione){logger.warning(\"字符正规化表缓存加载失败，原因如下：\"+e);returnfalse;}returntrue; "]
627383[label="tryStatement\n try{ObjectInputStreamin=newObjectInputStream(IOUtil.newInputStream(path));CONVERT=(char[])in.readObject();in.close();}catch(Exceptione){logger.warning(\"字符正规化表缓存加载失败，原因如下：\"+e);returnfalse;} "]
727384[label="block\n {ObjectInputStreamin=newObjectInputStream(IOUtil.newInputStream(path));CONVERT=(char[])in.readObject();in.close();} "]
827385[label="blockStatements\n ObjectInputStreamin=newObjectInputStream(IOUtil.newInputStream(path));CONVERT=(char[])in.readObject();in.close(); "]
927386[label="localVariableDeclarationStatement\n ObjectInputStreamin=newObjectInputStream(IOUtil.newInputStream(path)); "]
1027387[label="localVariableDeclaration\n ObjectInputStreamin=newObjectInputStream(IOUtil.newInputStream(path)) "]
1127388[label="unannClassType_lfno_unannClassOrInterfaceType\n ObjectInputStream "]
1127389[label="variableDeclarator\n in=newObjectInputStream(IOUtil.newInputStream(path)) "]
1227390[label="variableDeclaratorId\n in "]
1227391[label="classInstanceCreationExpression_lfno_primary\n newObjectInputStream(IOUtil.newInputStream(path)) "]
1327392[label="methodInvocation_lfno_primary\n IOUtil.newInputStream(path) "]
1427393[label="typeName\n IOUtil "]
1427394[label="expressionName\n path "]
927395[label="expressionStatement\n CONVERT=(char[])in.readObject(); "]
1027396[label="assignment\n CONVERT=(char[])in.readObject() "]
1127397[label="expressionName\n CONVERT "]
1127398[label="assignmentOperator\n = "]
1127399[label="castExpression\n (char[])in.readObject() "]
1227400[label="arrayType\n char[] "]
1327401[label="integralType\n char "]
1327402[label="dims\n [] "]
1227403[label="methodInvocation_lfno_primary\n in.readObject() "]
1327404[label="typeName\n in "]
927405[label="expressionStatement\n in.close(); "]
1027406[label="methodInvocation\n in.close() "]
1127407[label="typeName\n in "]
727408[label="catchClause\n catch(Exceptione){logger.warning(\"字符正规化表缓存加载失败，原因如下：\"+e);returnfalse;} "]
827409[label="catchFormalParameter\n Exceptione "]
927410[label="unannClassType\n Exception "]
927411[label="variableDeclaratorId\n e "]
827412[label="block\n {logger.warning(\"字符正规化表缓存加载失败，原因如下：\"+e);returnfalse;} "]
927413[label="blockStatements\n logger.warning(\"字符正规化表缓存加载失败，原因如下：\"+e);returnfalse; "]
1027414[label="expressionStatement\n logger.warning(\"字符正规化表缓存加载失败，原因如下：\"+e); "]
1127415[label="methodInvocation\n logger.warning(\"字符正规化表缓存加载失败，原因如下：\"+e) "]
1227416[label="typeName\n logger "]
1227417[label="additiveExpression\n \"字符正规化表缓存加载失败，原因如下：\"+e "]
1327418[label="literal\n \"字符正规化表缓存加载失败，原因如下：\" "]
1327419[label="expressionName\n e "]
1027420[label="returnStatement\n returnfalse; "]
1127421[label="literal\n false "]
627422[label="returnStatement\n returntrue; "]
727423[label="literal\n true "]
327424[label="methodDeclaration\n publicstaticcharconvert(charc){returnCONVERT[c];} "]
427425[label="methodModifier\n public "]
427426[label="methodModifier\n static "]
427427[label="methodHeader\n charconvert(charc) "]
527428[label="integralType\n char "]
527429[label="methodDeclarator\n convert(charc) "]
627430[label="formalParameter\n charc "]
727431[label="integralType\n char "]
727432[label="variableDeclaratorId\n c "]
427433[label="block\n {returnCONVERT[c];} "]
527434[label="returnStatement\n returnCONVERT[c]; "]
627435[label="arrayAccess_lfno_primary\n CONVERT[c] "]
727436[label="expressionName\n CONVERT "]
727437[label="expressionName\n c "]
327438[label="methodDeclaration\n publicstaticchar[]convert(char[]charArray){char[]result=newchar[charArray.length];for(inti=0;i<charArray.length;i++){result[i]=CONVERT[charArray[i]];}returnresult;} "]
427439[label="methodModifier\n public "]
427440[label="methodModifier\n static "]
427441[label="methodHeader\n char[]convert(char[]charArray) "]
527442[label="unannArrayType\n char[] "]
627443[label="integralType\n char "]
627444[label="dims\n [] "]
527445[label="methodDeclarator\n convert(char[]charArray) "]
627446[label="formalParameter\n char[]charArray "]
727447[label="unannArrayType\n char[] "]
827448[label="integralType\n char "]
827449[label="dims\n [] "]
727450[label="variableDeclaratorId\n charArray "]
427451[label="block\n {char[]result=newchar[charArray.length];for(inti=0;i<charArray.length;i++){result[i]=CONVERT[charArray[i]];}returnresult;} "]
527452[label="blockStatements\n char[]result=newchar[charArray.length];for(inti=0;i<charArray.length;i++){result[i]=CONVERT[charArray[i]];}returnresult; "]
627453[label="localVariableDeclarationStatement\n char[]result=newchar[charArray.length]; "]
727454[label="localVariableDeclaration\n char[]result=newchar[charArray.length] "]
827455[label="unannArrayType\n char[] "]
927456[label="integralType\n char "]
927457[label="dims\n [] "]
827458[label="variableDeclarator\n result=newchar[charArray.length] "]
927459[label="variableDeclaratorId\n result "]
927460[label="arrayCreationExpression\n newchar[charArray.length] "]
1027461[label="integralType\n char "]
1027462[label="dimExpr\n [charArray.length] "]
1127463[label="expressionName\n charArray.length "]
1227464[label="ambiguousName\n charArray "]
627465[label="basicForStatement\n for(inti=0;i<charArray.length;i++){result[i]=CONVERT[charArray[i]];} "]
727466[label="localVariableDeclaration\n inti=0 "]
827467[label="integralType\n int "]
827468[label="variableDeclarator\n i=0 "]
927469[label="variableDeclaratorId\n i "]
927470[label="literal\n 0 "]
727471[label="relationalExpression\n i<charArray.length "]
827472[label="expressionName\n i "]
827473[label="expressionName\n charArray.length "]
927474[label="ambiguousName\n charArray "]
727475[label="postIncrementExpression\n i++ "]
827476[label="expressionName\n i "]
727477[label="block\n {result[i]=CONVERT[charArray[i]];} "]
827478[label="expressionStatement\n result[i]=CONVERT[charArray[i]]; "]
927479[label="assignment\n result[i]=CONVERT[charArray[i]] "]
1027480[label="arrayAccess\n result[i] "]
1127481[label="expressionName\n result "]
1127482[label="expressionName\n i "]
1027483[label="assignmentOperator\n = "]
1027484[label="arrayAccess_lfno_primary\n CONVERT[charArray[i]] "]
1127485[label="expressionName\n CONVERT "]
1127486[label="arrayAccess_lfno_primary\n charArray[i] "]
1227487[label="expressionName\n charArray "]
1227488[label="expressionName\n i "]
627489[label="returnStatement\n returnresult; "]
727490[label="expressionName\n result "]
327491[label="methodDeclaration\n publicstaticStringconvert(StringcharArray){assertcharArray!=null;char[]result=newchar[charArray.length()];for(inti=0;i<charArray.length();i++){result[i]=CONVERT[charArray.charAt(i)];}returnnewString(result);} "]
427492[label="methodModifier\n public "]
427493[label="methodModifier\n static "]
427494[label="methodHeader\n Stringconvert(StringcharArray) "]
527495[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
527496[label="methodDeclarator\n convert(StringcharArray) "]
627497[label="formalParameter\n StringcharArray "]
727498[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
727499[label="variableDeclaratorId\n charArray "]
427500[label="block\n {assertcharArray!=null;char[]result=newchar[charArray.length()];for(inti=0;i<charArray.length();i++){result[i]=CONVERT[charArray.charAt(i)];}returnnewString(result);} "]
527501[label="blockStatements\n assertcharArray!=null;char[]result=newchar[charArray.length()];for(inti=0;i<charArray.length();i++){result[i]=CONVERT[charArray.charAt(i)];}returnnewString(result); "]
627502[label="assertStatement\n assertcharArray!=null; "]
727503[label="equalityExpression\n charArray!=null "]
827504[label="expressionName\n charArray "]
827505[label="literal\n null "]
627506[label="localVariableDeclarationStatement\n char[]result=newchar[charArray.length()]; "]
727507[label="localVariableDeclaration\n char[]result=newchar[charArray.length()] "]
827508[label="unannArrayType\n char[] "]
927509[label="integralType\n char "]
927510[label="dims\n [] "]
827511[label="variableDeclarator\n result=newchar[charArray.length()] "]
927512[label="variableDeclaratorId\n result "]
927513[label="arrayCreationExpression\n newchar[charArray.length()] "]
1027514[label="integralType\n char "]
1027515[label="dimExpr\n [charArray.length()] "]
1127516[label="methodInvocation_lfno_primary\n charArray.length() "]
1227517[label="typeName\n charArray "]
627518[label="basicForStatement\n for(inti=0;i<charArray.length();i++){result[i]=CONVERT[charArray.charAt(i)];} "]
727519[label="localVariableDeclaration\n inti=0 "]
827520[label="integralType\n int "]
827521[label="variableDeclarator\n i=0 "]
927522[label="variableDeclaratorId\n i "]
927523[label="literal\n 0 "]
727524[label="relationalExpression\n i<charArray.length() "]
827525[label="expressionName\n i "]
827526[label="methodInvocation_lfno_primary\n charArray.length() "]
927527[label="typeName\n charArray "]
727528[label="postIncrementExpression\n i++ "]
827529[label="expressionName\n i "]
727530[label="block\n {result[i]=CONVERT[charArray.charAt(i)];} "]
827531[label="expressionStatement\n result[i]=CONVERT[charArray.charAt(i)]; "]
927532[label="assignment\n result[i]=CONVERT[charArray.charAt(i)] "]
1027533[label="arrayAccess\n result[i] "]
1127534[label="expressionName\n result "]
1127535[label="expressionName\n i "]
1027536[label="assignmentOperator\n = "]
1027537[label="arrayAccess_lfno_primary\n CONVERT[charArray.charAt(i)] "]
1127538[label="expressionName\n CONVERT "]
1127539[label="methodInvocation_lfno_primary\n charArray.charAt(i) "]
1227540[label="typeName\n charArray "]
1227541[label="expressionName\n i "]
627542[label="returnStatement\n returnnewString(result); "]
727543[label="classInstanceCreationExpression_lfno_primary\n newString(result) "]
827544[label="expressionName\n result "]
327545[label="methodDeclaration\n publicstaticvoidnormalization(char[]charArray){assertcharArray!=null;for(inti=0;i<charArray.length;i++){charArray[i]=CONVERT[charArray[i]];}} "]
427546[label="methodModifier\n public "]
427547[label="methodModifier\n static "]
427548[label="methodHeader\n voidnormalization(char[]charArray) "]
527549[label="result\n void "]
527550[label="methodDeclarator\n normalization(char[]charArray) "]
627551[label="formalParameter\n char[]charArray "]
727552[label="unannArrayType\n char[] "]
827553[label="integralType\n char "]
827554[label="dims\n [] "]
727555[label="variableDeclaratorId\n charArray "]
427556[label="block\n {assertcharArray!=null;for(inti=0;i<charArray.length;i++){charArray[i]=CONVERT[charArray[i]];}} "]
527557[label="blockStatements\n assertcharArray!=null;for(inti=0;i<charArray.length;i++){charArray[i]=CONVERT[charArray[i]];} "]
627558[label="assertStatement\n assertcharArray!=null; "]
727559[label="equalityExpression\n charArray!=null "]
827560[label="expressionName\n charArray "]
827561[label="literal\n null "]
627562[label="basicForStatement\n for(inti=0;i<charArray.length;i++){charArray[i]=CONVERT[charArray[i]];} "]
727563[label="localVariableDeclaration\n inti=0 "]
827564[label="integralType\n int "]
827565[label="variableDeclarator\n i=0 "]
927566[label="variableDeclaratorId\n i "]
927567[label="literal\n 0 "]
727568[label="relationalExpression\n i<charArray.length "]
827569[label="expressionName\n i "]
827570[label="expressionName\n charArray.length "]
927571[label="ambiguousName\n charArray "]
727572[label="postIncrementExpression\n i++ "]
827573[label="expressionName\n i "]
727574[label="block\n {charArray[i]=CONVERT[charArray[i]];} "]
827575[label="expressionStatement\n charArray[i]=CONVERT[charArray[i]]; "]
927576[label="assignment\n charArray[i]=CONVERT[charArray[i]] "]
1027577[label="arrayAccess\n charArray[i] "]
1127578[label="expressionName\n charArray "]
1127579[label="expressionName\n i "]
1027580[label="assignmentOperator\n = "]
1027581[label="arrayAccess_lfno_primary\n CONVERT[charArray[i]] "]
1127582[label="expressionName\n CONVERT "]
1127583[label="arrayAccess_lfno_primary\n charArray[i] "]
1227584[label="expressionName\n charArray "]
1227585[label="expressionName\n i "]
027586[label="compilationUnit\n packagecom.hankcs.hanlp.dictionary.other;importcom.hankcs.hanlp.HanLP;importcom.hankcs.hanlp.corpus.io.ByteArray;importcom.hankcs.hanlp.utility.TextUtility;importjava.io.DataOutputStream;importjava.io.FileOutputStream;importjava.io.IOException;importjava.util.LinkedList;importjava.util.List;importstaticcom.hankcs.hanlp.utility.Predefine.logger;publicclassCharType{publicstaticfinalbyteCT_SINGLE=5;publicstaticfinalbyteCT_DELIMITER=CT_SINGLE+1;publicstaticfinalbyteCT_CHINESE=CT_SINGLE+2;publicstaticfinalbyteCT_LETTER=CT_SINGLE+3;publicstaticfinalbyteCT_NUM=CT_SINGLE+4;publicstaticfinalbyteCT_INDEX=CT_SINGLE+5;publicstaticfinalbyteCT_CNUM=CT_SINGLE+6;publicstaticfinalbyteCT_OTHER=CT_SINGLE+12;publicstaticbyte[]type;static{type=newbyte[65536];logger.info(\"字符类型对应表开始加载 \"+HanLP.Config.CharTypePath);longstart=System.currentTimeMillis();ByteArraybyteArray=ByteArray.createByteArray(HanLP.Config.CharTypePath);if(byteArray==null){try{byteArray=generate();}catch(IOExceptione){thrownewIllegalArgumentException(\"字符类型对应表 \"+HanLP.Config.CharTypePath+\" 加载失败： \"+TextUtility.exceptionToString(e));}}while(byteArray.hasMore()){intb=byteArray.nextChar();inte=byteArray.nextChar();bytet=byteArray.nextByte();for(inti=b;i<=e;++i){type[i]=t;}}logger.info(\"字符类型对应表加载成功，耗时\"+(System.currentTimeMillis()-start)+\" ms\");}privatestaticByteArraygenerate()throwsIOException{intpreType=5;intpreChar=0;List<int[]>typeList=newLinkedList<int[]>();for(inti=0;i<=Character.MAX_VALUE;++i){inttype=TextUtility.charType((char)i);if(type!=preType){int[]array=newint[3];array[0]=preChar;array[1]=i-1;array[2]=preType;typeList.add(array);preChar=i;}preType=type;}{int[]array=newint[3];array[0]=preChar;array[1]=(int)Character.MAX_VALUE;array[2]=preType;typeList.add(array);}DataOutputStreamout=newDataOutputStream(newFileOutputStream(HanLP.Config.CharTypePath));for(int[]array:typeList){out.writeChar(array[0]);out.writeChar(array[1]);out.writeByte(array[2]);}out.close();ByteArraybyteArray=ByteArray.createByteArray(HanLP.Config.CharTypePath);returnbyteArray;}publicstaticbyteget(charc){returntype[(int)c];}}<EOF> "]
127587[label="packageDeclaration\n packagecom.hankcs.hanlp.dictionary.other; "]
227588[label="packageName\n com.hankcs.hanlp.dictionary.other "]
327589[label="packageName\n com.hankcs.hanlp.dictionary "]
427590[label="packageName\n com.hankcs.hanlp "]
527591[label="packageName\n com.hankcs "]
627592[label="packageName\n com "]
127593[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.HanLP; "]
227594[label="typeName\n com.hankcs.hanlp.HanLP "]
327595[label="packageOrTypeName\n com.hankcs.hanlp "]
427596[label="packageOrTypeName\n com.hankcs "]
527597[label="packageOrTypeName\n com "]
127598[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.ByteArray; "]
227599[label="typeName\n com.hankcs.hanlp.corpus.io.ByteArray "]
327600[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
427601[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
527602[label="packageOrTypeName\n com.hankcs.hanlp "]
627603[label="packageOrTypeName\n com.hankcs "]
727604[label="packageOrTypeName\n com "]
127605[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.TextUtility; "]
227606[label="typeName\n com.hankcs.hanlp.utility.TextUtility "]
327607[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
427608[label="packageOrTypeName\n com.hankcs.hanlp "]
527609[label="packageOrTypeName\n com.hankcs "]
627610[label="packageOrTypeName\n com "]
127611[label="singleTypeImportDeclaration\n importjava.io.DataOutputStream; "]
227612[label="typeName\n java.io.DataOutputStream "]
327613[label="packageOrTypeName\n java.io "]
427614[label="packageOrTypeName\n java "]
127615[label="singleTypeImportDeclaration\n importjava.io.FileOutputStream; "]
227616[label="typeName\n java.io.FileOutputStream "]
327617[label="packageOrTypeName\n java.io "]
427618[label="packageOrTypeName\n java "]
127619[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
227620[label="typeName\n java.io.IOException "]
327621[label="packageOrTypeName\n java.io "]
427622[label="packageOrTypeName\n java "]
127623[label="singleTypeImportDeclaration\n importjava.util.LinkedList; "]
227624[label="typeName\n java.util.LinkedList "]
327625[label="packageOrTypeName\n java.util "]
427626[label="packageOrTypeName\n java "]
127627[label="singleTypeImportDeclaration\n importjava.util.List; "]
227628[label="typeName\n java.util.List "]
327629[label="packageOrTypeName\n java.util "]
427630[label="packageOrTypeName\n java "]
127631[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.utility.Predefine.logger; "]
227632[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
327633[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
427634[label="packageOrTypeName\n com.hankcs.hanlp "]
527635[label="packageOrTypeName\n com.hankcs "]
627636[label="packageOrTypeName\n com "]
127637[label="normalClassDeclaration\n publicclassCharType{publicstaticfinalbyteCT_SINGLE=5;publicstaticfinalbyteCT_DELIMITER=CT_SINGLE+1;publicstaticfinalbyteCT_CHINESE=CT_SINGLE+2;publicstaticfinalbyteCT_LETTER=CT_SINGLE+3;publicstaticfinalbyteCT_NUM=CT_SINGLE+4;publicstaticfinalbyteCT_INDEX=CT_SINGLE+5;publicstaticfinalbyteCT_CNUM=CT_SINGLE+6;publicstaticfinalbyteCT_OTHER=CT_SINGLE+12;publicstaticbyte[]type;static{type=newbyte[65536];logger.info(\"字符类型对应表开始加载 \"+HanLP.Config.CharTypePath);longstart=System.currentTimeMillis();ByteArraybyteArray=ByteArray.createByteArray(HanLP.Config.CharTypePath);if(byteArray==null){try{byteArray=generate();}catch(IOExceptione){thrownewIllegalArgumentException(\"字符类型对应表 \"+HanLP.Config.CharTypePath+\" 加载失败： \"+TextUtility.exceptionToString(e));}}while(byteArray.hasMore()){intb=byteArray.nextChar();inte=byteArray.nextChar();bytet=byteArray.nextByte();for(inti=b;i<=e;++i){type[i]=t;}}logger.info(\"字符类型对应表加载成功，耗时\"+(System.currentTimeMillis()-start)+\" ms\");}privatestaticByteArraygenerate()throwsIOException{intpreType=5;intpreChar=0;List<int[]>typeList=newLinkedList<int[]>();for(inti=0;i<=Character.MAX_VALUE;++i){inttype=TextUtility.charType((char)i);if(type!=preType){int[]array=newint[3];array[0]=preChar;array[1]=i-1;array[2]=preType;typeList.add(array);preChar=i;}preType=type;}{int[]array=newint[3];array[0]=preChar;array[1]=(int)Character.MAX_VALUE;array[2]=preType;typeList.add(array);}DataOutputStreamout=newDataOutputStream(newFileOutputStream(HanLP.Config.CharTypePath));for(int[]array:typeList){out.writeChar(array[0]);out.writeChar(array[1]);out.writeByte(array[2]);}out.close();ByteArraybyteArray=ByteArray.createByteArray(HanLP.Config.CharTypePath);returnbyteArray;}publicstaticbyteget(charc){returntype[(int)c];}} "]
227638[label="classModifier\n public "]
227639[label="classBody\n {publicstaticfinalbyteCT_SINGLE=5;publicstaticfinalbyteCT_DELIMITER=CT_SINGLE+1;publicstaticfinalbyteCT_CHINESE=CT_SINGLE+2;publicstaticfinalbyteCT_LETTER=CT_SINGLE+3;publicstaticfinalbyteCT_NUM=CT_SINGLE+4;publicstaticfinalbyteCT_INDEX=CT_SINGLE+5;publicstaticfinalbyteCT_CNUM=CT_SINGLE+6;publicstaticfinalbyteCT_OTHER=CT_SINGLE+12;publicstaticbyte[]type;static{type=newbyte[65536];logger.info(\"字符类型对应表开始加载 \"+HanLP.Config.CharTypePath);longstart=System.currentTimeMillis();ByteArraybyteArray=ByteArray.createByteArray(HanLP.Config.CharTypePath);if(byteArray==null){try{byteArray=generate();}catch(IOExceptione){thrownewIllegalArgumentException(\"字符类型对应表 \"+HanLP.Config.CharTypePath+\" 加载失败： \"+TextUtility.exceptionToString(e));}}while(byteArray.hasMore()){intb=byteArray.nextChar();inte=byteArray.nextChar();bytet=byteArray.nextByte();for(inti=b;i<=e;++i){type[i]=t;}}logger.info(\"字符类型对应表加载成功，耗时\"+(System.currentTimeMillis()-start)+\" ms\");}privatestaticByteArraygenerate()throwsIOException{intpreType=5;intpreChar=0;List<int[]>typeList=newLinkedList<int[]>();for(inti=0;i<=Character.MAX_VALUE;++i){inttype=TextUtility.charType((char)i);if(type!=preType){int[]array=newint[3];array[0]=preChar;array[1]=i-1;array[2]=preType;typeList.add(array);preChar=i;}preType=type;}{int[]array=newint[3];array[0]=preChar;array[1]=(int)Character.MAX_VALUE;array[2]=preType;typeList.add(array);}DataOutputStreamout=newDataOutputStream(newFileOutputStream(HanLP.Config.CharTypePath));for(int[]array:typeList){out.writeChar(array[0]);out.writeChar(array[1]);out.writeByte(array[2]);}out.close();ByteArraybyteArray=ByteArray.createByteArray(HanLP.Config.CharTypePath);returnbyteArray;}publicstaticbyteget(charc){returntype[(int)c];}} "]
327640[label="fieldDeclaration\n publicstaticfinalbyteCT_SINGLE=5; "]
427641[label="fieldModifier\n public "]
427642[label="fieldModifier\n static "]
427643[label="fieldModifier\n final "]
427644[label="integralType\n byte "]
427645[label="variableDeclarator\n CT_SINGLE=5 "]
527646[label="variableDeclaratorId\n CT_SINGLE "]
527647[label="literal\n 5 "]
327648[label="fieldDeclaration\n publicstaticfinalbyteCT_DELIMITER=CT_SINGLE+1; "]
427649[label="fieldModifier\n public "]
427650[label="fieldModifier\n static "]
427651[label="fieldModifier\n final "]
427652[label="integralType\n byte "]
427653[label="variableDeclarator\n CT_DELIMITER=CT_SINGLE+1 "]
527654[label="variableDeclaratorId\n CT_DELIMITER "]
527655[label="additiveExpression\n CT_SINGLE+1 "]
627656[label="expressionName\n CT_SINGLE "]
627657[label="literal\n 1 "]
327658[label="fieldDeclaration\n publicstaticfinalbyteCT_CHINESE=CT_SINGLE+2; "]
427659[label="fieldModifier\n public "]
427660[label="fieldModifier\n static "]
427661[label="fieldModifier\n final "]
427662[label="integralType\n byte "]
427663[label="variableDeclarator\n CT_CHINESE=CT_SINGLE+2 "]
527664[label="variableDeclaratorId\n CT_CHINESE "]
527665[label="additiveExpression\n CT_SINGLE+2 "]
627666[label="expressionName\n CT_SINGLE "]
627667[label="literal\n 2 "]
327668[label="fieldDeclaration\n publicstaticfinalbyteCT_LETTER=CT_SINGLE+3; "]
427669[label="fieldModifier\n public "]
427670[label="fieldModifier\n static "]
427671[label="fieldModifier\n final "]
427672[label="integralType\n byte "]
427673[label="variableDeclarator\n CT_LETTER=CT_SINGLE+3 "]
527674[label="variableDeclaratorId\n CT_LETTER "]
527675[label="additiveExpression\n CT_SINGLE+3 "]
627676[label="expressionName\n CT_SINGLE "]
627677[label="literal\n 3 "]
327678[label="fieldDeclaration\n publicstaticfinalbyteCT_NUM=CT_SINGLE+4; "]
427679[label="fieldModifier\n public "]
427680[label="fieldModifier\n static "]
427681[label="fieldModifier\n final "]
427682[label="integralType\n byte "]
427683[label="variableDeclarator\n CT_NUM=CT_SINGLE+4 "]
527684[label="variableDeclaratorId\n CT_NUM "]
527685[label="additiveExpression\n CT_SINGLE+4 "]
627686[label="expressionName\n CT_SINGLE "]
627687[label="literal\n 4 "]
327688[label="fieldDeclaration\n publicstaticfinalbyteCT_INDEX=CT_SINGLE+5; "]
427689[label="fieldModifier\n public "]
427690[label="fieldModifier\n static "]
427691[label="fieldModifier\n final "]
427692[label="integralType\n byte "]
427693[label="variableDeclarator\n CT_INDEX=CT_SINGLE+5 "]
527694[label="variableDeclaratorId\n CT_INDEX "]
527695[label="additiveExpression\n CT_SINGLE+5 "]
627696[label="expressionName\n CT_SINGLE "]
627697[label="literal\n 5 "]
327698[label="fieldDeclaration\n publicstaticfinalbyteCT_CNUM=CT_SINGLE+6; "]
427699[label="fieldModifier\n public "]
427700[label="fieldModifier\n static "]
427701[label="fieldModifier\n final "]
427702[label="integralType\n byte "]
427703[label="variableDeclarator\n CT_CNUM=CT_SINGLE+6 "]
527704[label="variableDeclaratorId\n CT_CNUM "]
527705[label="additiveExpression\n CT_SINGLE+6 "]
627706[label="expressionName\n CT_SINGLE "]
627707[label="literal\n 6 "]
327708[label="fieldDeclaration\n publicstaticfinalbyteCT_OTHER=CT_SINGLE+12; "]
427709[label="fieldModifier\n public "]
427710[label="fieldModifier\n static "]
427711[label="fieldModifier\n final "]
427712[label="integralType\n byte "]
427713[label="variableDeclarator\n CT_OTHER=CT_SINGLE+12 "]
527714[label="variableDeclaratorId\n CT_OTHER "]
527715[label="additiveExpression\n CT_SINGLE+12 "]
627716[label="expressionName\n CT_SINGLE "]
627717[label="literal\n 12 "]
327718[label="fieldDeclaration\n publicstaticbyte[]type; "]
427719[label="fieldModifier\n public "]
427720[label="fieldModifier\n static "]
427721[label="unannArrayType\n byte[] "]
527722[label="integralType\n byte "]
527723[label="dims\n [] "]
427724[label="variableDeclaratorId\n type "]
327725[label="staticInitializer\n static{type=newbyte[65536];logger.info(\"字符类型对应表开始加载 \"+HanLP.Config.CharTypePath);longstart=System.currentTimeMillis();ByteArraybyteArray=ByteArray.createByteArray(HanLP.Config.CharTypePath);if(byteArray==null){try{byteArray=generate();}catch(IOExceptione){thrownewIllegalArgumentException(\"字符类型对应表 \"+HanLP.Config.CharTypePath+\" 加载失败： \"+TextUtility.exceptionToString(e));}}while(byteArray.hasMore()){intb=byteArray.nextChar();inte=byteArray.nextChar();bytet=byteArray.nextByte();for(inti=b;i<=e;++i){type[i]=t;}}logger.info(\"字符类型对应表加载成功，耗时\"+(System.currentTimeMillis()-start)+\" ms\");} "]
427726[label="block\n {type=newbyte[65536];logger.info(\"字符类型对应表开始加载 \"+HanLP.Config.CharTypePath);longstart=System.currentTimeMillis();ByteArraybyteArray=ByteArray.createByteArray(HanLP.Config.CharTypePath);if(byteArray==null){try{byteArray=generate();}catch(IOExceptione){thrownewIllegalArgumentException(\"字符类型对应表 \"+HanLP.Config.CharTypePath+\" 加载失败： \"+TextUtility.exceptionToString(e));}}while(byteArray.hasMore()){intb=byteArray.nextChar();inte=byteArray.nextChar();bytet=byteArray.nextByte();for(inti=b;i<=e;++i){type[i]=t;}}logger.info(\"字符类型对应表加载成功，耗时\"+(System.currentTimeMillis()-start)+\" ms\");} "]
527727[label="blockStatements\n type=newbyte[65536];logger.info(\"字符类型对应表开始加载 \"+HanLP.Config.CharTypePath);longstart=System.currentTimeMillis();ByteArraybyteArray=ByteArray.createByteArray(HanLP.Config.CharTypePath);if(byteArray==null){try{byteArray=generate();}catch(IOExceptione){thrownewIllegalArgumentException(\"字符类型对应表 \"+HanLP.Config.CharTypePath+\" 加载失败： \"+TextUtility.exceptionToString(e));}}while(byteArray.hasMore()){intb=byteArray.nextChar();inte=byteArray.nextChar();bytet=byteArray.nextByte();for(inti=b;i<=e;++i){type[i]=t;}}logger.info(\"字符类型对应表加载成功，耗时\"+(System.currentTimeMillis()-start)+\" ms\"); "]
627728[label="expressionStatement\n type=newbyte[65536]; "]
727729[label="assignment\n type=newbyte[65536] "]
827730[label="expressionName\n type "]
827731[label="assignmentOperator\n = "]
827732[label="arrayCreationExpression\n newbyte[65536] "]
927733[label="integralType\n byte "]
927734[label="dimExpr\n [65536] "]
1027735[label="literal\n 65536 "]
627736[label="expressionStatement\n logger.info(\"字符类型对应表开始加载 \"+HanLP.Config.CharTypePath); "]
727737[label="methodInvocation\n logger.info(\"字符类型对应表开始加载 \"+HanLP.Config.CharTypePath) "]
827738[label="typeName\n logger "]
827739[label="additiveExpression\n \"字符类型对应表开始加载 \"+HanLP.Config.CharTypePath "]
927740[label="literal\n \"字符类型对应表开始加载 \" "]
927741[label="expressionName\n HanLP.Config.CharTypePath "]
1027742[label="ambiguousName\n HanLP.Config "]
1127743[label="ambiguousName\n HanLP "]
627744[label="localVariableDeclarationStatement\n longstart=System.currentTimeMillis(); "]
727745[label="localVariableDeclaration\n longstart=System.currentTimeMillis() "]
827746[label="integralType\n long "]
827747[label="variableDeclarator\n start=System.currentTimeMillis() "]
927748[label="variableDeclaratorId\n start "]
927749[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
1027750[label="typeName\n System "]
627751[label="localVariableDeclarationStatement\n ByteArraybyteArray=ByteArray.createByteArray(HanLP.Config.CharTypePath); "]
727752[label="localVariableDeclaration\n ByteArraybyteArray=ByteArray.createByteArray(HanLP.Config.CharTypePath) "]
827753[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
827754[label="variableDeclarator\n byteArray=ByteArray.createByteArray(HanLP.Config.CharTypePath) "]
927755[label="variableDeclaratorId\n byteArray "]
927756[label="methodInvocation_lfno_primary\n ByteArray.createByteArray(HanLP.Config.CharTypePath) "]
1027757[label="typeName\n ByteArray "]
1027758[label="expressionName\n HanLP.Config.CharTypePath "]
1127759[label="ambiguousName\n HanLP.Config "]
1227760[label="ambiguousName\n HanLP "]
627761[label="ifThenStatement\n if(byteArray==null){try{byteArray=generate();}catch(IOExceptione){thrownewIllegalArgumentException(\"字符类型对应表 \"+HanLP.Config.CharTypePath+\" 加载失败： \"+TextUtility.exceptionToString(e));}} "]
727762[label="equalityExpression\n byteArray==null "]
827763[label="expressionName\n byteArray "]
827764[label="literal\n null "]
727765[label="block\n {try{byteArray=generate();}catch(IOExceptione){thrownewIllegalArgumentException(\"字符类型对应表 \"+HanLP.Config.CharTypePath+\" 加载失败： \"+TextUtility.exceptionToString(e));}} "]
827766[label="tryStatement\n try{byteArray=generate();}catch(IOExceptione){thrownewIllegalArgumentException(\"字符类型对应表 \"+HanLP.Config.CharTypePath+\" 加载失败： \"+TextUtility.exceptionToString(e));} "]
927767[label="block\n {byteArray=generate();} "]
1027768[label="expressionStatement\n byteArray=generate(); "]
1127769[label="assignment\n byteArray=generate() "]
1227770[label="expressionName\n byteArray "]
1227771[label="assignmentOperator\n = "]
1227772[label="methodInvocation_lfno_primary\n generate() "]
1327773[label="methodName\n generate "]
927774[label="catchClause\n catch(IOExceptione){thrownewIllegalArgumentException(\"字符类型对应表 \"+HanLP.Config.CharTypePath+\" 加载失败： \"+TextUtility.exceptionToString(e));} "]
1027775[label="catchFormalParameter\n IOExceptione "]
1127776[label="unannClassType\n IOException "]
1127777[label="variableDeclaratorId\n e "]
1027778[label="block\n {thrownewIllegalArgumentException(\"字符类型对应表 \"+HanLP.Config.CharTypePath+\" 加载失败： \"+TextUtility.exceptionToString(e));} "]
1127779[label="throwStatement\n thrownewIllegalArgumentException(\"字符类型对应表 \"+HanLP.Config.CharTypePath+\" 加载失败： \"+TextUtility.exceptionToString(e)); "]
1227780[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"字符类型对应表 \"+HanLP.Config.CharTypePath+\" 加载失败： \"+TextUtility.exceptionToString(e)) "]
1327781[label="additiveExpression\n \"字符类型对应表 \"+HanLP.Config.CharTypePath+\" 加载失败： \"+TextUtility.exceptionToString(e) "]
1427782[label="additiveExpression\n \"字符类型对应表 \"+HanLP.Config.CharTypePath+\" 加载失败： \" "]
1527783[label="additiveExpression\n \"字符类型对应表 \"+HanLP.Config.CharTypePath "]
1627784[label="literal\n \"字符类型对应表 \" "]
1627785[label="expressionName\n HanLP.Config.CharTypePath "]
1727786[label="ambiguousName\n HanLP.Config "]
1827787[label="ambiguousName\n HanLP "]
1527788[label="literal\n \" 加载失败： \" "]
1427789[label="methodInvocation_lfno_primary\n TextUtility.exceptionToString(e) "]
1527790[label="typeName\n TextUtility "]
1527791[label="expressionName\n e "]
627792[label="whileStatement\n while(byteArray.hasMore()){intb=byteArray.nextChar();inte=byteArray.nextChar();bytet=byteArray.nextByte();for(inti=b;i<=e;++i){type[i]=t;}} "]
727793[label="methodInvocation_lfno_primary\n byteArray.hasMore() "]
827794[label="typeName\n byteArray "]
727795[label="block\n {intb=byteArray.nextChar();inte=byteArray.nextChar();bytet=byteArray.nextByte();for(inti=b;i<=e;++i){type[i]=t;}} "]
827796[label="blockStatements\n intb=byteArray.nextChar();inte=byteArray.nextChar();bytet=byteArray.nextByte();for(inti=b;i<=e;++i){type[i]=t;} "]
927797[label="localVariableDeclarationStatement\n intb=byteArray.nextChar(); "]
1027798[label="localVariableDeclaration\n intb=byteArray.nextChar() "]
1127799[label="integralType\n int "]
1127800[label="variableDeclarator\n b=byteArray.nextChar() "]
1227801[label="variableDeclaratorId\n b "]
1227802[label="methodInvocation_lfno_primary\n byteArray.nextChar() "]
1327803[label="typeName\n byteArray "]
927804[label="localVariableDeclarationStatement\n inte=byteArray.nextChar(); "]
1027805[label="localVariableDeclaration\n inte=byteArray.nextChar() "]
1127806[label="integralType\n int "]
1127807[label="variableDeclarator\n e=byteArray.nextChar() "]
1227808[label="variableDeclaratorId\n e "]
1227809[label="methodInvocation_lfno_primary\n byteArray.nextChar() "]
1327810[label="typeName\n byteArray "]
927811[label="localVariableDeclarationStatement\n bytet=byteArray.nextByte(); "]
1027812[label="localVariableDeclaration\n bytet=byteArray.nextByte() "]
1127813[label="integralType\n byte "]
1127814[label="variableDeclarator\n t=byteArray.nextByte() "]
1227815[label="variableDeclaratorId\n t "]
1227816[label="methodInvocation_lfno_primary\n byteArray.nextByte() "]
1327817[label="typeName\n byteArray "]
927818[label="basicForStatement\n for(inti=b;i<=e;++i){type[i]=t;} "]
1027819[label="localVariableDeclaration\n inti=b "]
1127820[label="integralType\n int "]
1127821[label="variableDeclarator\n i=b "]
1227822[label="variableDeclaratorId\n i "]
1227823[label="expressionName\n b "]
1027824[label="relationalExpression\n i<=e "]
1127825[label="expressionName\n i "]
1127826[label="expressionName\n e "]
1027827[label="preIncrementExpression\n ++i "]
1127828[label="expressionName\n i "]
1027829[label="block\n {type[i]=t;} "]
1127830[label="expressionStatement\n type[i]=t; "]
1227831[label="assignment\n type[i]=t "]
1327832[label="arrayAccess\n type[i] "]
1427833[label="expressionName\n type "]
1427834[label="expressionName\n i "]
1327835[label="assignmentOperator\n = "]
1327836[label="expressionName\n t "]
627837[label="expressionStatement\n logger.info(\"字符类型对应表加载成功，耗时\"+(System.currentTimeMillis()-start)+\" ms\"); "]
727838[label="methodInvocation\n logger.info(\"字符类型对应表加载成功，耗时\"+(System.currentTimeMillis()-start)+\" ms\") "]
827839[label="typeName\n logger "]
827840[label="additiveExpression\n \"字符类型对应表加载成功，耗时\"+(System.currentTimeMillis()-start)+\" ms\" "]
927841[label="additiveExpression\n \"字符类型对应表加载成功，耗时\"+(System.currentTimeMillis()-start) "]
1027842[label="literal\n \"字符类型对应表加载成功，耗时\" "]
1027843[label="primaryNoNewArray_lfno_primary\n (System.currentTimeMillis()-start) "]
1127844[label="additiveExpression\n System.currentTimeMillis()-start "]
1227845[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
1327846[label="typeName\n System "]
1227847[label="expressionName\n start "]
927848[label="literal\n \" ms\" "]
327849[label="methodDeclaration\n privatestaticByteArraygenerate()throwsIOException{intpreType=5;intpreChar=0;List<int[]>typeList=newLinkedList<int[]>();for(inti=0;i<=Character.MAX_VALUE;++i){inttype=TextUtility.charType((char)i);if(type!=preType){int[]array=newint[3];array[0]=preChar;array[1]=i-1;array[2]=preType;typeList.add(array);preChar=i;}preType=type;}{int[]array=newint[3];array[0]=preChar;array[1]=(int)Character.MAX_VALUE;array[2]=preType;typeList.add(array);}DataOutputStreamout=newDataOutputStream(newFileOutputStream(HanLP.Config.CharTypePath));for(int[]array:typeList){out.writeChar(array[0]);out.writeChar(array[1]);out.writeByte(array[2]);}out.close();ByteArraybyteArray=ByteArray.createByteArray(HanLP.Config.CharTypePath);returnbyteArray;} "]
427850[label="methodModifier\n private "]
427851[label="methodModifier\n static "]
427852[label="methodHeader\n ByteArraygenerate()throwsIOException "]
527853[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
527854[label="methodDeclarator\n generate() "]
527855[label="throws_\n throwsIOException "]
627856[label="classType\n IOException "]
427857[label="block\n {intpreType=5;intpreChar=0;List<int[]>typeList=newLinkedList<int[]>();for(inti=0;i<=Character.MAX_VALUE;++i){inttype=TextUtility.charType((char)i);if(type!=preType){int[]array=newint[3];array[0]=preChar;array[1]=i-1;array[2]=preType;typeList.add(array);preChar=i;}preType=type;}{int[]array=newint[3];array[0]=preChar;array[1]=(int)Character.MAX_VALUE;array[2]=preType;typeList.add(array);}DataOutputStreamout=newDataOutputStream(newFileOutputStream(HanLP.Config.CharTypePath));for(int[]array:typeList){out.writeChar(array[0]);out.writeChar(array[1]);out.writeByte(array[2]);}out.close();ByteArraybyteArray=ByteArray.createByteArray(HanLP.Config.CharTypePath);returnbyteArray;} "]
527858[label="blockStatements\n intpreType=5;intpreChar=0;List<int[]>typeList=newLinkedList<int[]>();for(inti=0;i<=Character.MAX_VALUE;++i){inttype=TextUtility.charType((char)i);if(type!=preType){int[]array=newint[3];array[0]=preChar;array[1]=i-1;array[2]=preType;typeList.add(array);preChar=i;}preType=type;}{int[]array=newint[3];array[0]=preChar;array[1]=(int)Character.MAX_VALUE;array[2]=preType;typeList.add(array);}DataOutputStreamout=newDataOutputStream(newFileOutputStream(HanLP.Config.CharTypePath));for(int[]array:typeList){out.writeChar(array[0]);out.writeChar(array[1]);out.writeByte(array[2]);}out.close();ByteArraybyteArray=ByteArray.createByteArray(HanLP.Config.CharTypePath);returnbyteArray; "]
627859[label="localVariableDeclarationStatement\n intpreType=5; "]
727860[label="localVariableDeclaration\n intpreType=5 "]
827861[label="integralType\n int "]
827862[label="variableDeclarator\n preType=5 "]
927863[label="variableDeclaratorId\n preType "]
927864[label="literal\n 5 "]
627865[label="localVariableDeclarationStatement\n intpreChar=0; "]
727866[label="localVariableDeclaration\n intpreChar=0 "]
827867[label="integralType\n int "]
827868[label="variableDeclarator\n preChar=0 "]
927869[label="variableDeclaratorId\n preChar "]
927870[label="literal\n 0 "]
627871[label="localVariableDeclarationStatement\n List<int[]>typeList=newLinkedList<int[]>(); "]
727872[label="localVariableDeclaration\n List<int[]>typeList=newLinkedList<int[]>() "]
827873[label="unannClassType_lfno_unannClassOrInterfaceType\n List<int[]> "]
927874[label="typeArguments\n <int[]> "]
1027875[label="arrayType\n int[] "]
1127876[label="integralType\n int "]
1127877[label="dims\n [] "]
827878[label="variableDeclarator\n typeList=newLinkedList<int[]>() "]
927879[label="variableDeclaratorId\n typeList "]
927880[label="classInstanceCreationExpression_lfno_primary\n newLinkedList<int[]>() "]
1027881[label="typeArguments\n <int[]> "]
1127882[label="arrayType\n int[] "]
1227883[label="integralType\n int "]
1227884[label="dims\n [] "]
627885[label="basicForStatement\n for(inti=0;i<=Character.MAX_VALUE;++i){inttype=TextUtility.charType((char)i);if(type!=preType){int[]array=newint[3];array[0]=preChar;array[1]=i-1;array[2]=preType;typeList.add(array);preChar=i;}preType=type;} "]
727886[label="localVariableDeclaration\n inti=0 "]
827887[label="integralType\n int "]
827888[label="variableDeclarator\n i=0 "]
927889[label="variableDeclaratorId\n i "]
927890[label="literal\n 0 "]
727891[label="relationalExpression\n i<=Character.MAX_VALUE "]
827892[label="expressionName\n i "]
827893[label="expressionName\n Character.MAX_VALUE "]
927894[label="ambiguousName\n Character "]
727895[label="preIncrementExpression\n ++i "]
827896[label="expressionName\n i "]
727897[label="block\n {inttype=TextUtility.charType((char)i);if(type!=preType){int[]array=newint[3];array[0]=preChar;array[1]=i-1;array[2]=preType;typeList.add(array);preChar=i;}preType=type;} "]
827898[label="blockStatements\n inttype=TextUtility.charType((char)i);if(type!=preType){int[]array=newint[3];array[0]=preChar;array[1]=i-1;array[2]=preType;typeList.add(array);preChar=i;}preType=type; "]
927899[label="localVariableDeclarationStatement\n inttype=TextUtility.charType((char)i); "]
1027900[label="localVariableDeclaration\n inttype=TextUtility.charType((char)i) "]
1127901[label="integralType\n int "]
1127902[label="variableDeclarator\n type=TextUtility.charType((char)i) "]
1227903[label="variableDeclaratorId\n type "]
1227904[label="methodInvocation_lfno_primary\n TextUtility.charType((char)i) "]
1327905[label="typeName\n TextUtility "]
1327906[label="castExpression\n (char)i "]
1427907[label="integralType\n char "]
1427908[label="expressionName\n i "]
927909[label="ifThenStatement\n if(type!=preType){int[]array=newint[3];array[0]=preChar;array[1]=i-1;array[2]=preType;typeList.add(array);preChar=i;} "]
1027910[label="equalityExpression\n type!=preType "]
1127911[label="expressionName\n type "]
1127912[label="expressionName\n preType "]
1027913[label="block\n {int[]array=newint[3];array[0]=preChar;array[1]=i-1;array[2]=preType;typeList.add(array);preChar=i;} "]
1127914[label="blockStatements\n int[]array=newint[3];array[0]=preChar;array[1]=i-1;array[2]=preType;typeList.add(array);preChar=i; "]
1227915[label="localVariableDeclarationStatement\n int[]array=newint[3]; "]
1327916[label="localVariableDeclaration\n int[]array=newint[3] "]
1427917[label="unannArrayType\n int[] "]
1527918[label="integralType\n int "]
1527919[label="dims\n [] "]
1427920[label="variableDeclarator\n array=newint[3] "]
1527921[label="variableDeclaratorId\n array "]
1527922[label="arrayCreationExpression\n newint[3] "]
1627923[label="integralType\n int "]
1627924[label="dimExpr\n [3] "]
1727925[label="literal\n 3 "]
1227926[label="expressionStatement\n array[0]=preChar; "]
1327927[label="assignment\n array[0]=preChar "]
1427928[label="arrayAccess\n array[0] "]
1527929[label="expressionName\n array "]
1527930[label="literal\n 0 "]
1427931[label="assignmentOperator\n = "]
1427932[label="expressionName\n preChar "]
1227933[label="expressionStatement\n array[1]=i-1; "]
1327934[label="assignment\n array[1]=i-1 "]
1427935[label="arrayAccess\n array[1] "]
1527936[label="expressionName\n array "]
1527937[label="literal\n 1 "]
1427938[label="assignmentOperator\n = "]
1427939[label="additiveExpression\n i-1 "]
1527940[label="expressionName\n i "]
1527941[label="literal\n 1 "]
1227942[label="expressionStatement\n array[2]=preType; "]
1327943[label="assignment\n array[2]=preType "]
1427944[label="arrayAccess\n array[2] "]
1527945[label="expressionName\n array "]
1527946[label="literal\n 2 "]
1427947[label="assignmentOperator\n = "]
1427948[label="expressionName\n preType "]
1227949[label="expressionStatement\n typeList.add(array); "]
1327950[label="methodInvocation\n typeList.add(array) "]
1427951[label="typeName\n typeList "]
1427952[label="expressionName\n array "]
1227953[label="expressionStatement\n preChar=i; "]
1327954[label="assignment\n preChar=i "]
1427955[label="expressionName\n preChar "]
1427956[label="assignmentOperator\n = "]
1427957[label="expressionName\n i "]
927958[label="expressionStatement\n preType=type; "]
1027959[label="assignment\n preType=type "]
1127960[label="expressionName\n preType "]
1127961[label="assignmentOperator\n = "]
1127962[label="expressionName\n type "]
627963[label="block\n {int[]array=newint[3];array[0]=preChar;array[1]=(int)Character.MAX_VALUE;array[2]=preType;typeList.add(array);} "]
727964[label="blockStatements\n int[]array=newint[3];array[0]=preChar;array[1]=(int)Character.MAX_VALUE;array[2]=preType;typeList.add(array); "]
827965[label="localVariableDeclarationStatement\n int[]array=newint[3]; "]
927966[label="localVariableDeclaration\n int[]array=newint[3] "]
1027967[label="unannArrayType\n int[] "]
1127968[label="integralType\n int "]
1127969[label="dims\n [] "]
1027970[label="variableDeclarator\n array=newint[3] "]
1127971[label="variableDeclaratorId\n array "]
1127972[label="arrayCreationExpression\n newint[3] "]
1227973[label="integralType\n int "]
1227974[label="dimExpr\n [3] "]
1327975[label="literal\n 3 "]
827976[label="expressionStatement\n array[0]=preChar; "]
927977[label="assignment\n array[0]=preChar "]
1027978[label="arrayAccess\n array[0] "]
1127979[label="expressionName\n array "]
1127980[label="literal\n 0 "]
1027981[label="assignmentOperator\n = "]
1027982[label="expressionName\n preChar "]
827983[label="expressionStatement\n array[1]=(int)Character.MAX_VALUE; "]
927984[label="assignment\n array[1]=(int)Character.MAX_VALUE "]
1027985[label="arrayAccess\n array[1] "]
1127986[label="expressionName\n array "]
1127987[label="literal\n 1 "]
1027988[label="assignmentOperator\n = "]
1027989[label="castExpression\n (int)Character.MAX_VALUE "]
1127990[label="integralType\n int "]
1127991[label="expressionName\n Character.MAX_VALUE "]
1227992[label="ambiguousName\n Character "]
827993[label="expressionStatement\n array[2]=preType; "]
927994[label="assignment\n array[2]=preType "]
1027995[label="arrayAccess\n array[2] "]
1127996[label="expressionName\n array "]
1127997[label="literal\n 2 "]
1027998[label="assignmentOperator\n = "]
1027999[label="expressionName\n preType "]
828000[label="expressionStatement\n typeList.add(array); "]
928001[label="methodInvocation\n typeList.add(array) "]
1028002[label="typeName\n typeList "]
1028003[label="expressionName\n array "]
628004[label="localVariableDeclarationStatement\n DataOutputStreamout=newDataOutputStream(newFileOutputStream(HanLP.Config.CharTypePath)); "]
728005[label="localVariableDeclaration\n DataOutputStreamout=newDataOutputStream(newFileOutputStream(HanLP.Config.CharTypePath)) "]
828006[label="unannClassType_lfno_unannClassOrInterfaceType\n DataOutputStream "]
828007[label="variableDeclarator\n out=newDataOutputStream(newFileOutputStream(HanLP.Config.CharTypePath)) "]
928008[label="variableDeclaratorId\n out "]
928009[label="classInstanceCreationExpression_lfno_primary\n newDataOutputStream(newFileOutputStream(HanLP.Config.CharTypePath)) "]
1028010[label="classInstanceCreationExpression_lfno_primary\n newFileOutputStream(HanLP.Config.CharTypePath) "]
1128011[label="expressionName\n HanLP.Config.CharTypePath "]
1228012[label="ambiguousName\n HanLP.Config "]
1328013[label="ambiguousName\n HanLP "]
628014[label="enhancedForStatement\n for(int[]array:typeList){out.writeChar(array[0]);out.writeChar(array[1]);out.writeByte(array[2]);} "]
728015[label="unannArrayType\n int[] "]
828016[label="integralType\n int "]
828017[label="dims\n [] "]
728018[label="variableDeclaratorId\n array "]
728019[label="expressionName\n typeList "]
728020[label="block\n {out.writeChar(array[0]);out.writeChar(array[1]);out.writeByte(array[2]);} "]
828021[label="blockStatements\n out.writeChar(array[0]);out.writeChar(array[1]);out.writeByte(array[2]); "]
928022[label="expressionStatement\n out.writeChar(array[0]); "]
1028023[label="methodInvocation\n out.writeChar(array[0]) "]
1128024[label="typeName\n out "]
1128025[label="arrayAccess_lfno_primary\n array[0] "]
1228026[label="expressionName\n array "]
1228027[label="literal\n 0 "]
928028[label="expressionStatement\n out.writeChar(array[1]); "]
1028029[label="methodInvocation\n out.writeChar(array[1]) "]
1128030[label="typeName\n out "]
1128031[label="arrayAccess_lfno_primary\n array[1] "]
1228032[label="expressionName\n array "]
1228033[label="literal\n 1 "]
928034[label="expressionStatement\n out.writeByte(array[2]); "]
1028035[label="methodInvocation\n out.writeByte(array[2]) "]
1128036[label="typeName\n out "]
1128037[label="arrayAccess_lfno_primary\n array[2] "]
1228038[label="expressionName\n array "]
1228039[label="literal\n 2 "]
628040[label="expressionStatement\n out.close(); "]
728041[label="methodInvocation\n out.close() "]
828042[label="typeName\n out "]
628043[label="localVariableDeclarationStatement\n ByteArraybyteArray=ByteArray.createByteArray(HanLP.Config.CharTypePath); "]
728044[label="localVariableDeclaration\n ByteArraybyteArray=ByteArray.createByteArray(HanLP.Config.CharTypePath) "]
828045[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
828046[label="variableDeclarator\n byteArray=ByteArray.createByteArray(HanLP.Config.CharTypePath) "]
928047[label="variableDeclaratorId\n byteArray "]
928048[label="methodInvocation_lfno_primary\n ByteArray.createByteArray(HanLP.Config.CharTypePath) "]
1028049[label="typeName\n ByteArray "]
1028050[label="expressionName\n HanLP.Config.CharTypePath "]
1128051[label="ambiguousName\n HanLP.Config "]
1228052[label="ambiguousName\n HanLP "]
628053[label="returnStatement\n returnbyteArray; "]
728054[label="expressionName\n byteArray "]
328055[label="methodDeclaration\n publicstaticbyteget(charc){returntype[(int)c];} "]
428056[label="methodModifier\n public "]
428057[label="methodModifier\n static "]
428058[label="methodHeader\n byteget(charc) "]
528059[label="integralType\n byte "]
528060[label="methodDeclarator\n get(charc) "]
628061[label="formalParameter\n charc "]
728062[label="integralType\n char "]
728063[label="variableDeclaratorId\n c "]
428064[label="block\n {returntype[(int)c];} "]
528065[label="returnStatement\n returntype[(int)c]; "]
628066[label="arrayAccess_lfno_primary\n type[(int)c] "]
728067[label="expressionName\n type "]
728068[label="castExpression\n (int)c "]
828069[label="integralType\n int "]
828070[label="expressionName\n c "]
028071[label="compilationUnit\n packagecom.hankcs.hanlp.classification.features;importcom.hankcs.hanlp.algorithm.MaxHeap;importcom.hankcs.hanlp.classification.corpus.IDataSet;importcom.hankcs.hanlp.classification.statistics.ContinuousDistributions;importjava.util.Comparator;importjava.util.HashMap;importjava.util.Map;publicclassChiSquareFeatureExtractor{protecteddoublechisquareCriticalValue=10.83;protectedintmaxSize=1000000;publicstaticBaseFeatureDataextractBasicFeatureData(IDataSetdataSet){BaseFeatureDatastats=newBaseFeatureData(dataSet);returnstats;}publicMap<Integer,Double>chi_square(BaseFeatureDatastats){Map<Integer,Double>selectedFeatures=newHashMap<Integer,Double>();intN1dot,N0dot,N00,N01,N10,N11;doublechisquareScore;DoublepreviousScore;for(intfeature=0;feature<stats.featureCategoryJointCount.length;feature++){int[]categoryList=stats.featureCategoryJointCount[feature];N1dot=0;for(intcount:categoryList){N1dot+=count;}N0dot=stats.n-N1dot;for(intcategory=0;category<categoryList.length;category++){N11=categoryList[category];N01=stats.categoryCounts[category]-N11;N00=N0dot-N01;N10=N1dot-N11;chisquareScore=stats.n*Math.pow(N11*N00-N10*N01,2)/((N11+N01)*(N11+N10)*(N10+N00)*(N01+N00));if(chisquareScore>=chisquareCriticalValue){previousScore=selectedFeatures.get(feature);if(previousScore==null||chisquareScore>previousScore){selectedFeatures.put(feature,chisquareScore);}}}}if(selectedFeatures.size()>maxSize){MaxHeap<Map.Entry<Integer,Double>>maxHeap=newMaxHeap<Map.Entry<Integer,Double>>(maxSize,newComparator<Map.Entry<Integer,Double>>(){@Overridepublicintcompare(Map.Entry<Integer,Double>o1,Map.Entry<Integer,Double>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<Integer,Double>entry:selectedFeatures.entrySet()){maxHeap.add(entry);}selectedFeatures.clear();for(Map.Entry<Integer,Double>entry:maxHeap.toList()){selectedFeatures.put(entry.getKey(),entry.getValue());}}returnselectedFeatures;}publicdoublegetChisquareCriticalValue(){returnchisquareCriticalValue;}publicvoidsetChisquareCriticalValue(doublechisquareCriticalValue){this.chisquareCriticalValue=chisquareCriticalValue;}publicChiSquareFeatureExtractorsetALevel(doubleaLevel){chisquareCriticalValue=ContinuousDistributions.ChisquareInverseCdf(aLevel,1);returnthis;}publicdoublegetALevel(){returnContinuousDistributions.ChisquareCdf(chisquareCriticalValue,1);}}<EOF> "]
128072[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.features; "]
228073[label="packageName\n com.hankcs.hanlp.classification.features "]
328074[label="packageName\n com.hankcs.hanlp.classification "]
428075[label="packageName\n com.hankcs.hanlp "]
528076[label="packageName\n com.hankcs "]
628077[label="packageName\n com "]
128078[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.algorithm.MaxHeap; "]
228079[label="typeName\n com.hankcs.hanlp.algorithm.MaxHeap "]
328080[label="packageOrTypeName\n com.hankcs.hanlp.algorithm "]
428081[label="packageOrTypeName\n com.hankcs.hanlp "]
528082[label="packageOrTypeName\n com.hankcs "]
628083[label="packageOrTypeName\n com "]
128084[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.IDataSet; "]
228085[label="typeName\n com.hankcs.hanlp.classification.corpus.IDataSet "]
328086[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
428087[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
528088[label="packageOrTypeName\n com.hankcs.hanlp "]
628089[label="packageOrTypeName\n com.hankcs "]
728090[label="packageOrTypeName\n com "]
128091[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.statistics.ContinuousDistributions; "]
228092[label="typeName\n com.hankcs.hanlp.classification.statistics.ContinuousDistributions "]
328093[label="packageOrTypeName\n com.hankcs.hanlp.classification.statistics "]
428094[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
528095[label="packageOrTypeName\n com.hankcs.hanlp "]
628096[label="packageOrTypeName\n com.hankcs "]
728097[label="packageOrTypeName\n com "]
128098[label="singleTypeImportDeclaration\n importjava.util.Comparator; "]
228099[label="typeName\n java.util.Comparator "]
328100[label="packageOrTypeName\n java.util "]
428101[label="packageOrTypeName\n java "]
128102[label="singleTypeImportDeclaration\n importjava.util.HashMap; "]
228103[label="typeName\n java.util.HashMap "]
328104[label="packageOrTypeName\n java.util "]
428105[label="packageOrTypeName\n java "]
128106[label="singleTypeImportDeclaration\n importjava.util.Map; "]
228107[label="typeName\n java.util.Map "]
328108[label="packageOrTypeName\n java.util "]
428109[label="packageOrTypeName\n java "]
128110[label="normalClassDeclaration\n publicclassChiSquareFeatureExtractor{protecteddoublechisquareCriticalValue=10.83;protectedintmaxSize=1000000;publicstaticBaseFeatureDataextractBasicFeatureData(IDataSetdataSet){BaseFeatureDatastats=newBaseFeatureData(dataSet);returnstats;}publicMap<Integer,Double>chi_square(BaseFeatureDatastats){Map<Integer,Double>selectedFeatures=newHashMap<Integer,Double>();intN1dot,N0dot,N00,N01,N10,N11;doublechisquareScore;DoublepreviousScore;for(intfeature=0;feature<stats.featureCategoryJointCount.length;feature++){int[]categoryList=stats.featureCategoryJointCount[feature];N1dot=0;for(intcount:categoryList){N1dot+=count;}N0dot=stats.n-N1dot;for(intcategory=0;category<categoryList.length;category++){N11=categoryList[category];N01=stats.categoryCounts[category]-N11;N00=N0dot-N01;N10=N1dot-N11;chisquareScore=stats.n*Math.pow(N11*N00-N10*N01,2)/((N11+N01)*(N11+N10)*(N10+N00)*(N01+N00));if(chisquareScore>=chisquareCriticalValue){previousScore=selectedFeatures.get(feature);if(previousScore==null||chisquareScore>previousScore){selectedFeatures.put(feature,chisquareScore);}}}}if(selectedFeatures.size()>maxSize){MaxHeap<Map.Entry<Integer,Double>>maxHeap=newMaxHeap<Map.Entry<Integer,Double>>(maxSize,newComparator<Map.Entry<Integer,Double>>(){@Overridepublicintcompare(Map.Entry<Integer,Double>o1,Map.Entry<Integer,Double>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<Integer,Double>entry:selectedFeatures.entrySet()){maxHeap.add(entry);}selectedFeatures.clear();for(Map.Entry<Integer,Double>entry:maxHeap.toList()){selectedFeatures.put(entry.getKey(),entry.getValue());}}returnselectedFeatures;}publicdoublegetChisquareCriticalValue(){returnchisquareCriticalValue;}publicvoidsetChisquareCriticalValue(doublechisquareCriticalValue){this.chisquareCriticalValue=chisquareCriticalValue;}publicChiSquareFeatureExtractorsetALevel(doubleaLevel){chisquareCriticalValue=ContinuousDistributions.ChisquareInverseCdf(aLevel,1);returnthis;}publicdoublegetALevel(){returnContinuousDistributions.ChisquareCdf(chisquareCriticalValue,1);}} "]
228111[label="classModifier\n public "]
228112[label="classBody\n {protecteddoublechisquareCriticalValue=10.83;protectedintmaxSize=1000000;publicstaticBaseFeatureDataextractBasicFeatureData(IDataSetdataSet){BaseFeatureDatastats=newBaseFeatureData(dataSet);returnstats;}publicMap<Integer,Double>chi_square(BaseFeatureDatastats){Map<Integer,Double>selectedFeatures=newHashMap<Integer,Double>();intN1dot,N0dot,N00,N01,N10,N11;doublechisquareScore;DoublepreviousScore;for(intfeature=0;feature<stats.featureCategoryJointCount.length;feature++){int[]categoryList=stats.featureCategoryJointCount[feature];N1dot=0;for(intcount:categoryList){N1dot+=count;}N0dot=stats.n-N1dot;for(intcategory=0;category<categoryList.length;category++){N11=categoryList[category];N01=stats.categoryCounts[category]-N11;N00=N0dot-N01;N10=N1dot-N11;chisquareScore=stats.n*Math.pow(N11*N00-N10*N01,2)/((N11+N01)*(N11+N10)*(N10+N00)*(N01+N00));if(chisquareScore>=chisquareCriticalValue){previousScore=selectedFeatures.get(feature);if(previousScore==null||chisquareScore>previousScore){selectedFeatures.put(feature,chisquareScore);}}}}if(selectedFeatures.size()>maxSize){MaxHeap<Map.Entry<Integer,Double>>maxHeap=newMaxHeap<Map.Entry<Integer,Double>>(maxSize,newComparator<Map.Entry<Integer,Double>>(){@Overridepublicintcompare(Map.Entry<Integer,Double>o1,Map.Entry<Integer,Double>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<Integer,Double>entry:selectedFeatures.entrySet()){maxHeap.add(entry);}selectedFeatures.clear();for(Map.Entry<Integer,Double>entry:maxHeap.toList()){selectedFeatures.put(entry.getKey(),entry.getValue());}}returnselectedFeatures;}publicdoublegetChisquareCriticalValue(){returnchisquareCriticalValue;}publicvoidsetChisquareCriticalValue(doublechisquareCriticalValue){this.chisquareCriticalValue=chisquareCriticalValue;}publicChiSquareFeatureExtractorsetALevel(doubleaLevel){chisquareCriticalValue=ContinuousDistributions.ChisquareInverseCdf(aLevel,1);returnthis;}publicdoublegetALevel(){returnContinuousDistributions.ChisquareCdf(chisquareCriticalValue,1);}} "]
328113[label="fieldDeclaration\n protecteddoublechisquareCriticalValue=10.83; "]
428114[label="fieldModifier\n protected "]
428115[label="floatingPointType\n double "]
428116[label="variableDeclarator\n chisquareCriticalValue=10.83 "]
528117[label="variableDeclaratorId\n chisquareCriticalValue "]
528118[label="literal\n 10.83 "]
328119[label="fieldDeclaration\n protectedintmaxSize=1000000; "]
428120[label="fieldModifier\n protected "]
428121[label="integralType\n int "]
428122[label="variableDeclarator\n maxSize=1000000 "]
528123[label="variableDeclaratorId\n maxSize "]
528124[label="literal\n 1000000 "]
328125[label="methodDeclaration\n publicstaticBaseFeatureDataextractBasicFeatureData(IDataSetdataSet){BaseFeatureDatastats=newBaseFeatureData(dataSet);returnstats;} "]
428126[label="methodModifier\n public "]
428127[label="methodModifier\n static "]
428128[label="methodHeader\n BaseFeatureDataextractBasicFeatureData(IDataSetdataSet) "]
528129[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseFeatureData "]
528130[label="methodDeclarator\n extractBasicFeatureData(IDataSetdataSet) "]
628131[label="formalParameter\n IDataSetdataSet "]
728132[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
728133[label="variableDeclaratorId\n dataSet "]
428134[label="block\n {BaseFeatureDatastats=newBaseFeatureData(dataSet);returnstats;} "]
528135[label="blockStatements\n BaseFeatureDatastats=newBaseFeatureData(dataSet);returnstats; "]
628136[label="localVariableDeclarationStatement\n BaseFeatureDatastats=newBaseFeatureData(dataSet); "]
728137[label="localVariableDeclaration\n BaseFeatureDatastats=newBaseFeatureData(dataSet) "]
828138[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseFeatureData "]
828139[label="variableDeclarator\n stats=newBaseFeatureData(dataSet) "]
928140[label="variableDeclaratorId\n stats "]
928141[label="classInstanceCreationExpression_lfno_primary\n newBaseFeatureData(dataSet) "]
1028142[label="expressionName\n dataSet "]
628143[label="returnStatement\n returnstats; "]
728144[label="expressionName\n stats "]
328145[label="methodDeclaration\n publicMap<Integer,Double>chi_square(BaseFeatureDatastats){Map<Integer,Double>selectedFeatures=newHashMap<Integer,Double>();intN1dot,N0dot,N00,N01,N10,N11;doublechisquareScore;DoublepreviousScore;for(intfeature=0;feature<stats.featureCategoryJointCount.length;feature++){int[]categoryList=stats.featureCategoryJointCount[feature];N1dot=0;for(intcount:categoryList){N1dot+=count;}N0dot=stats.n-N1dot;for(intcategory=0;category<categoryList.length;category++){N11=categoryList[category];N01=stats.categoryCounts[category]-N11;N00=N0dot-N01;N10=N1dot-N11;chisquareScore=stats.n*Math.pow(N11*N00-N10*N01,2)/((N11+N01)*(N11+N10)*(N10+N00)*(N01+N00));if(chisquareScore>=chisquareCriticalValue){previousScore=selectedFeatures.get(feature);if(previousScore==null||chisquareScore>previousScore){selectedFeatures.put(feature,chisquareScore);}}}}if(selectedFeatures.size()>maxSize){MaxHeap<Map.Entry<Integer,Double>>maxHeap=newMaxHeap<Map.Entry<Integer,Double>>(maxSize,newComparator<Map.Entry<Integer,Double>>(){@Overridepublicintcompare(Map.Entry<Integer,Double>o1,Map.Entry<Integer,Double>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<Integer,Double>entry:selectedFeatures.entrySet()){maxHeap.add(entry);}selectedFeatures.clear();for(Map.Entry<Integer,Double>entry:maxHeap.toList()){selectedFeatures.put(entry.getKey(),entry.getValue());}}returnselectedFeatures;} "]
428146[label="methodModifier\n public "]
428147[label="methodHeader\n Map<Integer,Double>chi_square(BaseFeatureDatastats) "]
528148[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<Integer,Double> "]
628149[label="typeArguments\n <Integer,Double> "]
728150[label="typeArgumentList\n Integer,Double "]
828151[label="classType_lfno_classOrInterfaceType\n Integer "]
828152[label="classType_lfno_classOrInterfaceType\n Double "]
528153[label="methodDeclarator\n chi_square(BaseFeatureDatastats) "]
628154[label="formalParameter\n BaseFeatureDatastats "]
728155[label="unannClassType_lfno_unannClassOrInterfaceType\n BaseFeatureData "]
728156[label="variableDeclaratorId\n stats "]
428157[label="block\n {Map<Integer,Double>selectedFeatures=newHashMap<Integer,Double>();intN1dot,N0dot,N00,N01,N10,N11;doublechisquareScore;DoublepreviousScore;for(intfeature=0;feature<stats.featureCategoryJointCount.length;feature++){int[]categoryList=stats.featureCategoryJointCount[feature];N1dot=0;for(intcount:categoryList){N1dot+=count;}N0dot=stats.n-N1dot;for(intcategory=0;category<categoryList.length;category++){N11=categoryList[category];N01=stats.categoryCounts[category]-N11;N00=N0dot-N01;N10=N1dot-N11;chisquareScore=stats.n*Math.pow(N11*N00-N10*N01,2)/((N11+N01)*(N11+N10)*(N10+N00)*(N01+N00));if(chisquareScore>=chisquareCriticalValue){previousScore=selectedFeatures.get(feature);if(previousScore==null||chisquareScore>previousScore){selectedFeatures.put(feature,chisquareScore);}}}}if(selectedFeatures.size()>maxSize){MaxHeap<Map.Entry<Integer,Double>>maxHeap=newMaxHeap<Map.Entry<Integer,Double>>(maxSize,newComparator<Map.Entry<Integer,Double>>(){@Overridepublicintcompare(Map.Entry<Integer,Double>o1,Map.Entry<Integer,Double>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<Integer,Double>entry:selectedFeatures.entrySet()){maxHeap.add(entry);}selectedFeatures.clear();for(Map.Entry<Integer,Double>entry:maxHeap.toList()){selectedFeatures.put(entry.getKey(),entry.getValue());}}returnselectedFeatures;} "]
528158[label="blockStatements\n Map<Integer,Double>selectedFeatures=newHashMap<Integer,Double>();intN1dot,N0dot,N00,N01,N10,N11;doublechisquareScore;DoublepreviousScore;for(intfeature=0;feature<stats.featureCategoryJointCount.length;feature++){int[]categoryList=stats.featureCategoryJointCount[feature];N1dot=0;for(intcount:categoryList){N1dot+=count;}N0dot=stats.n-N1dot;for(intcategory=0;category<categoryList.length;category++){N11=categoryList[category];N01=stats.categoryCounts[category]-N11;N00=N0dot-N01;N10=N1dot-N11;chisquareScore=stats.n*Math.pow(N11*N00-N10*N01,2)/((N11+N01)*(N11+N10)*(N10+N00)*(N01+N00));if(chisquareScore>=chisquareCriticalValue){previousScore=selectedFeatures.get(feature);if(previousScore==null||chisquareScore>previousScore){selectedFeatures.put(feature,chisquareScore);}}}}if(selectedFeatures.size()>maxSize){MaxHeap<Map.Entry<Integer,Double>>maxHeap=newMaxHeap<Map.Entry<Integer,Double>>(maxSize,newComparator<Map.Entry<Integer,Double>>(){@Overridepublicintcompare(Map.Entry<Integer,Double>o1,Map.Entry<Integer,Double>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<Integer,Double>entry:selectedFeatures.entrySet()){maxHeap.add(entry);}selectedFeatures.clear();for(Map.Entry<Integer,Double>entry:maxHeap.toList()){selectedFeatures.put(entry.getKey(),entry.getValue());}}returnselectedFeatures; "]
628159[label="localVariableDeclarationStatement\n Map<Integer,Double>selectedFeatures=newHashMap<Integer,Double>(); "]
728160[label="localVariableDeclaration\n Map<Integer,Double>selectedFeatures=newHashMap<Integer,Double>() "]
828161[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<Integer,Double> "]
928162[label="typeArguments\n <Integer,Double> "]
1028163[label="typeArgumentList\n Integer,Double "]
1128164[label="classType_lfno_classOrInterfaceType\n Integer "]
1128165[label="classType_lfno_classOrInterfaceType\n Double "]
828166[label="variableDeclarator\n selectedFeatures=newHashMap<Integer,Double>() "]
928167[label="variableDeclaratorId\n selectedFeatures "]
928168[label="classInstanceCreationExpression_lfno_primary\n newHashMap<Integer,Double>() "]
1028169[label="typeArguments\n <Integer,Double> "]
1128170[label="typeArgumentList\n Integer,Double "]
1228171[label="classType_lfno_classOrInterfaceType\n Integer "]
1228172[label="classType_lfno_classOrInterfaceType\n Double "]
628173[label="localVariableDeclarationStatement\n intN1dot,N0dot,N00,N01,N10,N11; "]
728174[label="localVariableDeclaration\n intN1dot,N0dot,N00,N01,N10,N11 "]
828175[label="integralType\n int "]
828176[label="variableDeclaratorList\n N1dot,N0dot,N00,N01,N10,N11 "]
928177[label="variableDeclaratorId\n N1dot "]
928178[label="variableDeclaratorId\n N0dot "]
928179[label="variableDeclaratorId\n N00 "]
928180[label="variableDeclaratorId\n N01 "]
928181[label="variableDeclaratorId\n N10 "]
928182[label="variableDeclaratorId\n N11 "]
628183[label="localVariableDeclarationStatement\n doublechisquareScore; "]
728184[label="localVariableDeclaration\n doublechisquareScore "]
828185[label="floatingPointType\n double "]
828186[label="variableDeclaratorId\n chisquareScore "]
628187[label="localVariableDeclarationStatement\n DoublepreviousScore; "]
728188[label="localVariableDeclaration\n DoublepreviousScore "]
828189[label="unannClassType_lfno_unannClassOrInterfaceType\n Double "]
828190[label="variableDeclaratorId\n previousScore "]
628191[label="basicForStatement\n for(intfeature=0;feature<stats.featureCategoryJointCount.length;feature++){int[]categoryList=stats.featureCategoryJointCount[feature];N1dot=0;for(intcount:categoryList){N1dot+=count;}N0dot=stats.n-N1dot;for(intcategory=0;category<categoryList.length;category++){N11=categoryList[category];N01=stats.categoryCounts[category]-N11;N00=N0dot-N01;N10=N1dot-N11;chisquareScore=stats.n*Math.pow(N11*N00-N10*N01,2)/((N11+N01)*(N11+N10)*(N10+N00)*(N01+N00));if(chisquareScore>=chisquareCriticalValue){previousScore=selectedFeatures.get(feature);if(previousScore==null||chisquareScore>previousScore){selectedFeatures.put(feature,chisquareScore);}}}} "]
728192[label="localVariableDeclaration\n intfeature=0 "]
828193[label="integralType\n int "]
828194[label="variableDeclarator\n feature=0 "]
928195[label="variableDeclaratorId\n feature "]
928196[label="literal\n 0 "]
728197[label="relationalExpression\n feature<stats.featureCategoryJointCount.length "]
828198[label="expressionName\n feature "]
828199[label="expressionName\n stats.featureCategoryJointCount.length "]
928200[label="ambiguousName\n stats.featureCategoryJointCount "]
1028201[label="ambiguousName\n stats "]
728202[label="postIncrementExpression\n feature++ "]
828203[label="expressionName\n feature "]
728204[label="block\n {int[]categoryList=stats.featureCategoryJointCount[feature];N1dot=0;for(intcount:categoryList){N1dot+=count;}N0dot=stats.n-N1dot;for(intcategory=0;category<categoryList.length;category++){N11=categoryList[category];N01=stats.categoryCounts[category]-N11;N00=N0dot-N01;N10=N1dot-N11;chisquareScore=stats.n*Math.pow(N11*N00-N10*N01,2)/((N11+N01)*(N11+N10)*(N10+N00)*(N01+N00));if(chisquareScore>=chisquareCriticalValue){previousScore=selectedFeatures.get(feature);if(previousScore==null||chisquareScore>previousScore){selectedFeatures.put(feature,chisquareScore);}}}} "]
828205[label="blockStatements\n int[]categoryList=stats.featureCategoryJointCount[feature];N1dot=0;for(intcount:categoryList){N1dot+=count;}N0dot=stats.n-N1dot;for(intcategory=0;category<categoryList.length;category++){N11=categoryList[category];N01=stats.categoryCounts[category]-N11;N00=N0dot-N01;N10=N1dot-N11;chisquareScore=stats.n*Math.pow(N11*N00-N10*N01,2)/((N11+N01)*(N11+N10)*(N10+N00)*(N01+N00));if(chisquareScore>=chisquareCriticalValue){previousScore=selectedFeatures.get(feature);if(previousScore==null||chisquareScore>previousScore){selectedFeatures.put(feature,chisquareScore);}}} "]
928206[label="localVariableDeclarationStatement\n int[]categoryList=stats.featureCategoryJointCount[feature]; "]
1028207[label="localVariableDeclaration\n int[]categoryList=stats.featureCategoryJointCount[feature] "]
1128208[label="unannArrayType\n int[] "]
1228209[label="integralType\n int "]
1228210[label="dims\n [] "]
1128211[label="variableDeclarator\n categoryList=stats.featureCategoryJointCount[feature] "]
1228212[label="variableDeclaratorId\n categoryList "]
1228213[label="arrayAccess_lfno_primary\n stats.featureCategoryJointCount[feature] "]
1328214[label="expressionName\n stats.featureCategoryJointCount "]
1428215[label="ambiguousName\n stats "]
1328216[label="expressionName\n feature "]
928217[label="expressionStatement\n N1dot=0; "]
1028218[label="assignment\n N1dot=0 "]
1128219[label="expressionName\n N1dot "]
1128220[label="assignmentOperator\n = "]
1128221[label="literal\n 0 "]
928222[label="enhancedForStatement\n for(intcount:categoryList){N1dot+=count;} "]
1028223[label="integralType\n int "]
1028224[label="variableDeclaratorId\n count "]
1028225[label="expressionName\n categoryList "]
1028226[label="block\n {N1dot+=count;} "]
1128227[label="expressionStatement\n N1dot+=count; "]
1228228[label="assignment\n N1dot+=count "]
1328229[label="expressionName\n N1dot "]
1328230[label="assignmentOperator\n += "]
1328231[label="expressionName\n count "]
928232[label="expressionStatement\n N0dot=stats.n-N1dot; "]
1028233[label="assignment\n N0dot=stats.n-N1dot "]
1128234[label="expressionName\n N0dot "]
1128235[label="assignmentOperator\n = "]
1128236[label="additiveExpression\n stats.n-N1dot "]
1228237[label="expressionName\n stats.n "]
1328238[label="ambiguousName\n stats "]
1228239[label="expressionName\n N1dot "]
928240[label="basicForStatement\n for(intcategory=0;category<categoryList.length;category++){N11=categoryList[category];N01=stats.categoryCounts[category]-N11;N00=N0dot-N01;N10=N1dot-N11;chisquareScore=stats.n*Math.pow(N11*N00-N10*N01,2)/((N11+N01)*(N11+N10)*(N10+N00)*(N01+N00));if(chisquareScore>=chisquareCriticalValue){previousScore=selectedFeatures.get(feature);if(previousScore==null||chisquareScore>previousScore){selectedFeatures.put(feature,chisquareScore);}}} "]
1028241[label="localVariableDeclaration\n intcategory=0 "]
1128242[label="integralType\n int "]
1128243[label="variableDeclarator\n category=0 "]
1228244[label="variableDeclaratorId\n category "]
1228245[label="literal\n 0 "]
1028246[label="relationalExpression\n category<categoryList.length "]
1128247[label="expressionName\n category "]
1128248[label="expressionName\n categoryList.length "]
1228249[label="ambiguousName\n categoryList "]
1028250[label="postIncrementExpression\n category++ "]
1128251[label="expressionName\n category "]
1028252[label="block\n {N11=categoryList[category];N01=stats.categoryCounts[category]-N11;N00=N0dot-N01;N10=N1dot-N11;chisquareScore=stats.n*Math.pow(N11*N00-N10*N01,2)/((N11+N01)*(N11+N10)*(N10+N00)*(N01+N00));if(chisquareScore>=chisquareCriticalValue){previousScore=selectedFeatures.get(feature);if(previousScore==null||chisquareScore>previousScore){selectedFeatures.put(feature,chisquareScore);}}} "]
1128253[label="blockStatements\n N11=categoryList[category];N01=stats.categoryCounts[category]-N11;N00=N0dot-N01;N10=N1dot-N11;chisquareScore=stats.n*Math.pow(N11*N00-N10*N01,2)/((N11+N01)*(N11+N10)*(N10+N00)*(N01+N00));if(chisquareScore>=chisquareCriticalValue){previousScore=selectedFeatures.get(feature);if(previousScore==null||chisquareScore>previousScore){selectedFeatures.put(feature,chisquareScore);}} "]
1228254[label="expressionStatement\n N11=categoryList[category]; "]
1328255[label="assignment\n N11=categoryList[category] "]
1428256[label="expressionName\n N11 "]
1428257[label="assignmentOperator\n = "]
1428258[label="arrayAccess_lfno_primary\n categoryList[category] "]
1528259[label="expressionName\n categoryList "]
1528260[label="expressionName\n category "]
1228261[label="expressionStatement\n N01=stats.categoryCounts[category]-N11; "]
1328262[label="assignment\n N01=stats.categoryCounts[category]-N11 "]
1428263[label="expressionName\n N01 "]
1428264[label="assignmentOperator\n = "]
1428265[label="additiveExpression\n stats.categoryCounts[category]-N11 "]
1528266[label="arrayAccess_lfno_primary\n stats.categoryCounts[category] "]
1628267[label="expressionName\n stats.categoryCounts "]
1728268[label="ambiguousName\n stats "]
1628269[label="expressionName\n category "]
1528270[label="expressionName\n N11 "]
1228271[label="expressionStatement\n N00=N0dot-N01; "]
1328272[label="assignment\n N00=N0dot-N01 "]
1428273[label="expressionName\n N00 "]
1428274[label="assignmentOperator\n = "]
1428275[label="additiveExpression\n N0dot-N01 "]
1528276[label="expressionName\n N0dot "]
1528277[label="expressionName\n N01 "]
1228278[label="expressionStatement\n N10=N1dot-N11; "]
1328279[label="assignment\n N10=N1dot-N11 "]
1428280[label="expressionName\n N10 "]
1428281[label="assignmentOperator\n = "]
1428282[label="additiveExpression\n N1dot-N11 "]
1528283[label="expressionName\n N1dot "]
1528284[label="expressionName\n N11 "]
1228285[label="expressionStatement\n chisquareScore=stats.n*Math.pow(N11*N00-N10*N01,2)/((N11+N01)*(N11+N10)*(N10+N00)*(N01+N00)); "]
1328286[label="assignment\n chisquareScore=stats.n*Math.pow(N11*N00-N10*N01,2)/((N11+N01)*(N11+N10)*(N10+N00)*(N01+N00)) "]
1428287[label="expressionName\n chisquareScore "]
1428288[label="assignmentOperator\n = "]
1428289[label="multiplicativeExpression\n stats.n*Math.pow(N11*N00-N10*N01,2)/((N11+N01)*(N11+N10)*(N10+N00)*(N01+N00)) "]
1528290[label="multiplicativeExpression\n stats.n*Math.pow(N11*N00-N10*N01,2) "]
1628291[label="expressionName\n stats.n "]
1728292[label="ambiguousName\n stats "]
1628293[label="methodInvocation_lfno_primary\n Math.pow(N11*N00-N10*N01,2) "]
1728294[label="typeName\n Math "]
1728295[label="argumentList\n N11*N00-N10*N01,2 "]
1828296[label="additiveExpression\n N11*N00-N10*N01 "]
1928297[label="multiplicativeExpression\n N11*N00 "]
2028298[label="expressionName\n N11 "]
2028299[label="expressionName\n N00 "]
1928300[label="multiplicativeExpression\n N10*N01 "]
2028301[label="expressionName\n N10 "]
2028302[label="expressionName\n N01 "]
1828303[label="literal\n 2 "]
1528304[label="primaryNoNewArray_lfno_primary\n ((N11+N01)*(N11+N10)*(N10+N00)*(N01+N00)) "]
1628305[label="multiplicativeExpression\n (N11+N01)*(N11+N10)*(N10+N00)*(N01+N00) "]
1728306[label="multiplicativeExpression\n (N11+N01)*(N11+N10)*(N10+N00) "]
1828307[label="multiplicativeExpression\n (N11+N01)*(N11+N10) "]
1928308[label="primaryNoNewArray_lfno_primary\n (N11+N01) "]
2028309[label="additiveExpression\n N11+N01 "]
2128310[label="expressionName\n N11 "]
2128311[label="expressionName\n N01 "]
1928312[label="primaryNoNewArray_lfno_primary\n (N11+N10) "]
2028313[label="additiveExpression\n N11+N10 "]
2128314[label="expressionName\n N11 "]
2128315[label="expressionName\n N10 "]
1828316[label="primaryNoNewArray_lfno_primary\n (N10+N00) "]
1928317[label="additiveExpression\n N10+N00 "]
2028318[label="expressionName\n N10 "]
2028319[label="expressionName\n N00 "]
1728320[label="primaryNoNewArray_lfno_primary\n (N01+N00) "]
1828321[label="additiveExpression\n N01+N00 "]
1928322[label="expressionName\n N01 "]
1928323[label="expressionName\n N00 "]
1228324[label="ifThenStatement\n if(chisquareScore>=chisquareCriticalValue){previousScore=selectedFeatures.get(feature);if(previousScore==null||chisquareScore>previousScore){selectedFeatures.put(feature,chisquareScore);}} "]
1328325[label="relationalExpression\n chisquareScore>=chisquareCriticalValue "]
1428326[label="expressionName\n chisquareScore "]
1428327[label="expressionName\n chisquareCriticalValue "]
1328328[label="block\n {previousScore=selectedFeatures.get(feature);if(previousScore==null||chisquareScore>previousScore){selectedFeatures.put(feature,chisquareScore);}} "]
1428329[label="blockStatements\n previousScore=selectedFeatures.get(feature);if(previousScore==null||chisquareScore>previousScore){selectedFeatures.put(feature,chisquareScore);} "]
1528330[label="expressionStatement\n previousScore=selectedFeatures.get(feature); "]
1628331[label="assignment\n previousScore=selectedFeatures.get(feature) "]
1728332[label="expressionName\n previousScore "]
1728333[label="assignmentOperator\n = "]
1728334[label="methodInvocation_lfno_primary\n selectedFeatures.get(feature) "]
1828335[label="typeName\n selectedFeatures "]
1828336[label="expressionName\n feature "]
1528337[label="ifThenStatement\n if(previousScore==null||chisquareScore>previousScore){selectedFeatures.put(feature,chisquareScore);} "]
1628338[label="conditionalOrExpression\n previousScore==null||chisquareScore>previousScore "]
1728339[label="equalityExpression\n previousScore==null "]
1828340[label="expressionName\n previousScore "]
1828341[label="literal\n null "]
1728342[label="relationalExpression\n chisquareScore>previousScore "]
1828343[label="expressionName\n chisquareScore "]
1828344[label="expressionName\n previousScore "]
1628345[label="block\n {selectedFeatures.put(feature,chisquareScore);} "]
1728346[label="expressionStatement\n selectedFeatures.put(feature,chisquareScore); "]
1828347[label="methodInvocation\n selectedFeatures.put(feature,chisquareScore) "]
1928348[label="typeName\n selectedFeatures "]
1928349[label="argumentList\n feature,chisquareScore "]
2028350[label="expressionName\n feature "]
2028351[label="expressionName\n chisquareScore "]
628352[label="ifThenStatement\n if(selectedFeatures.size()>maxSize){MaxHeap<Map.Entry<Integer,Double>>maxHeap=newMaxHeap<Map.Entry<Integer,Double>>(maxSize,newComparator<Map.Entry<Integer,Double>>(){@Overridepublicintcompare(Map.Entry<Integer,Double>o1,Map.Entry<Integer,Double>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<Integer,Double>entry:selectedFeatures.entrySet()){maxHeap.add(entry);}selectedFeatures.clear();for(Map.Entry<Integer,Double>entry:maxHeap.toList()){selectedFeatures.put(entry.getKey(),entry.getValue());}} "]
728353[label="relationalExpression\n selectedFeatures.size()>maxSize "]
828354[label="methodInvocation_lfno_primary\n selectedFeatures.size() "]
928355[label="typeName\n selectedFeatures "]
828356[label="expressionName\n maxSize "]
728357[label="block\n {MaxHeap<Map.Entry<Integer,Double>>maxHeap=newMaxHeap<Map.Entry<Integer,Double>>(maxSize,newComparator<Map.Entry<Integer,Double>>(){@Overridepublicintcompare(Map.Entry<Integer,Double>o1,Map.Entry<Integer,Double>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<Integer,Double>entry:selectedFeatures.entrySet()){maxHeap.add(entry);}selectedFeatures.clear();for(Map.Entry<Integer,Double>entry:maxHeap.toList()){selectedFeatures.put(entry.getKey(),entry.getValue());}} "]
828358[label="blockStatements\n MaxHeap<Map.Entry<Integer,Double>>maxHeap=newMaxHeap<Map.Entry<Integer,Double>>(maxSize,newComparator<Map.Entry<Integer,Double>>(){@Overridepublicintcompare(Map.Entry<Integer,Double>o1,Map.Entry<Integer,Double>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<Integer,Double>entry:selectedFeatures.entrySet()){maxHeap.add(entry);}selectedFeatures.clear();for(Map.Entry<Integer,Double>entry:maxHeap.toList()){selectedFeatures.put(entry.getKey(),entry.getValue());} "]
928359[label="localVariableDeclarationStatement\n MaxHeap<Map.Entry<Integer,Double>>maxHeap=newMaxHeap<Map.Entry<Integer,Double>>(maxSize,newComparator<Map.Entry<Integer,Double>>(){@Overridepublicintcompare(Map.Entry<Integer,Double>o1,Map.Entry<Integer,Double>o2){returno1.getValue().compareTo(o2.getValue());}}); "]
1028360[label="localVariableDeclaration\n MaxHeap<Map.Entry<Integer,Double>>maxHeap=newMaxHeap<Map.Entry<Integer,Double>>(maxSize,newComparator<Map.Entry<Integer,Double>>(){@Overridepublicintcompare(Map.Entry<Integer,Double>o1,Map.Entry<Integer,Double>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
1128361[label="unannClassType_lfno_unannClassOrInterfaceType\n MaxHeap<Map.Entry<Integer,Double>> "]
1228362[label="typeArguments\n <Map.Entry<Integer,Double>> "]
1328363[label="classOrInterfaceType\n Map.Entry<Integer,Double> "]
1428364[label="classType_lfno_classOrInterfaceType\n Map "]
1428365[label="classType_lf_classOrInterfaceType\n .Entry<Integer,Double> "]
1528366[label="typeArguments\n <Integer,Double> "]
1628367[label="typeArgumentList\n Integer,Double "]
1728368[label="classType_lfno_classOrInterfaceType\n Integer "]
1728369[label="classType_lfno_classOrInterfaceType\n Double "]
1128370[label="variableDeclarator\n maxHeap=newMaxHeap<Map.Entry<Integer,Double>>(maxSize,newComparator<Map.Entry<Integer,Double>>(){@Overridepublicintcompare(Map.Entry<Integer,Double>o1,Map.Entry<Integer,Double>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
1228371[label="variableDeclaratorId\n maxHeap "]
1228372[label="classInstanceCreationExpression_lfno_primary\n newMaxHeap<Map.Entry<Integer,Double>>(maxSize,newComparator<Map.Entry<Integer,Double>>(){@Overridepublicintcompare(Map.Entry<Integer,Double>o1,Map.Entry<Integer,Double>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
1328373[label="typeArguments\n <Map.Entry<Integer,Double>> "]
1428374[label="classOrInterfaceType\n Map.Entry<Integer,Double> "]
1528375[label="classType_lfno_classOrInterfaceType\n Map "]
1528376[label="classType_lf_classOrInterfaceType\n .Entry<Integer,Double> "]
1628377[label="typeArguments\n <Integer,Double> "]
1728378[label="typeArgumentList\n Integer,Double "]
1828379[label="classType_lfno_classOrInterfaceType\n Integer "]
1828380[label="classType_lfno_classOrInterfaceType\n Double "]
1328381[label="argumentList\n maxSize,newComparator<Map.Entry<Integer,Double>>(){@Overridepublicintcompare(Map.Entry<Integer,Double>o1,Map.Entry<Integer,Double>o2){returno1.getValue().compareTo(o2.getValue());}} "]
1428382[label="expressionName\n maxSize "]
1428383[label="classInstanceCreationExpression_lfno_primary\n newComparator<Map.Entry<Integer,Double>>(){@Overridepublicintcompare(Map.Entry<Integer,Double>o1,Map.Entry<Integer,Double>o2){returno1.getValue().compareTo(o2.getValue());}} "]
1528384[label="typeArguments\n <Map.Entry<Integer,Double>> "]
1628385[label="classOrInterfaceType\n Map.Entry<Integer,Double> "]
1728386[label="classType_lfno_classOrInterfaceType\n Map "]
1728387[label="classType_lf_classOrInterfaceType\n .Entry<Integer,Double> "]
1828388[label="typeArguments\n <Integer,Double> "]
1928389[label="typeArgumentList\n Integer,Double "]
2028390[label="classType_lfno_classOrInterfaceType\n Integer "]
2028391[label="classType_lfno_classOrInterfaceType\n Double "]
1528392[label="classBody\n {@Overridepublicintcompare(Map.Entry<Integer,Double>o1,Map.Entry<Integer,Double>o2){returno1.getValue().compareTo(o2.getValue());}} "]
1628393[label="methodDeclaration\n @Overridepublicintcompare(Map.Entry<Integer,Double>o1,Map.Entry<Integer,Double>o2){returno1.getValue().compareTo(o2.getValue());} "]
1728394[label="markerAnnotation\n @Override "]
1828395[label="typeName\n Override "]
1728396[label="methodModifier\n public "]
1728397[label="methodHeader\n intcompare(Map.Entry<Integer,Double>o1,Map.Entry<Integer,Double>o2) "]
1828398[label="integralType\n int "]
1828399[label="methodDeclarator\n compare(Map.Entry<Integer,Double>o1,Map.Entry<Integer,Double>o2) "]
1928400[label="formalParameterList\n Map.Entry<Integer,Double>o1,Map.Entry<Integer,Double>o2 "]
2028401[label="formalParameter\n Map.Entry<Integer,Double>o1 "]
2128402[label="unannClassOrInterfaceType\n Map.Entry<Integer,Double> "]
2228403[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
2228404[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<Integer,Double> "]
2328405[label="typeArguments\n <Integer,Double> "]
2428406[label="typeArgumentList\n Integer,Double "]
2528407[label="classType_lfno_classOrInterfaceType\n Integer "]
2528408[label="classType_lfno_classOrInterfaceType\n Double "]
2128409[label="variableDeclaratorId\n o1 "]
2028410[label="formalParameter\n Map.Entry<Integer,Double>o2 "]
2128411[label="unannClassOrInterfaceType\n Map.Entry<Integer,Double> "]
2228412[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
2228413[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<Integer,Double> "]
2328414[label="typeArguments\n <Integer,Double> "]
2428415[label="typeArgumentList\n Integer,Double "]
2528416[label="classType_lfno_classOrInterfaceType\n Integer "]
2528417[label="classType_lfno_classOrInterfaceType\n Double "]
2128418[label="variableDeclaratorId\n o2 "]
1728419[label="block\n {returno1.getValue().compareTo(o2.getValue());} "]
1828420[label="returnStatement\n returno1.getValue().compareTo(o2.getValue()); "]
1928421[label="primary\n o1.getValue().compareTo(o2.getValue()) "]
2028422[label="methodInvocation_lfno_primary\n o1.getValue() "]
2128423[label="typeName\n o1 "]
2028424[label="methodInvocation_lf_primary\n .compareTo(o2.getValue()) "]
2128425[label="methodInvocation_lfno_primary\n o2.getValue() "]
2228426[label="typeName\n o2 "]
928427[label="enhancedForStatement\n for(Map.Entry<Integer,Double>entry:selectedFeatures.entrySet()){maxHeap.add(entry);} "]
1028428[label="unannClassOrInterfaceType\n Map.Entry<Integer,Double> "]
1128429[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
1128430[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<Integer,Double> "]
1228431[label="typeArguments\n <Integer,Double> "]
1328432[label="typeArgumentList\n Integer,Double "]
1428433[label="classType_lfno_classOrInterfaceType\n Integer "]
1428434[label="classType_lfno_classOrInterfaceType\n Double "]
1028435[label="variableDeclaratorId\n entry "]
1028436[label="methodInvocation_lfno_primary\n selectedFeatures.entrySet() "]
1128437[label="typeName\n selectedFeatures "]
1028438[label="block\n {maxHeap.add(entry);} "]
1128439[label="expressionStatement\n maxHeap.add(entry); "]
1228440[label="methodInvocation\n maxHeap.add(entry) "]
1328441[label="typeName\n maxHeap "]
1328442[label="expressionName\n entry "]
928443[label="expressionStatement\n selectedFeatures.clear(); "]
1028444[label="methodInvocation\n selectedFeatures.clear() "]
1128445[label="typeName\n selectedFeatures "]
928446[label="enhancedForStatement\n for(Map.Entry<Integer,Double>entry:maxHeap.toList()){selectedFeatures.put(entry.getKey(),entry.getValue());} "]
1028447[label="unannClassOrInterfaceType\n Map.Entry<Integer,Double> "]
1128448[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
1128449[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<Integer,Double> "]
1228450[label="typeArguments\n <Integer,Double> "]
1328451[label="typeArgumentList\n Integer,Double "]
1428452[label="classType_lfno_classOrInterfaceType\n Integer "]
1428453[label="classType_lfno_classOrInterfaceType\n Double "]
1028454[label="variableDeclaratorId\n entry "]
1028455[label="methodInvocation_lfno_primary\n maxHeap.toList() "]
1128456[label="typeName\n maxHeap "]
1028457[label="block\n {selectedFeatures.put(entry.getKey(),entry.getValue());} "]
1128458[label="expressionStatement\n selectedFeatures.put(entry.getKey(),entry.getValue()); "]
1228459[label="methodInvocation\n selectedFeatures.put(entry.getKey(),entry.getValue()) "]
1328460[label="typeName\n selectedFeatures "]
1328461[label="argumentList\n entry.getKey(),entry.getValue() "]
1428462[label="methodInvocation_lfno_primary\n entry.getKey() "]
1528463[label="typeName\n entry "]
1428464[label="methodInvocation_lfno_primary\n entry.getValue() "]
1528465[label="typeName\n entry "]
628466[label="returnStatement\n returnselectedFeatures; "]
728467[label="expressionName\n selectedFeatures "]
328468[label="methodDeclaration\n publicdoublegetChisquareCriticalValue(){returnchisquareCriticalValue;} "]
428469[label="methodModifier\n public "]
428470[label="methodHeader\n doublegetChisquareCriticalValue() "]
528471[label="floatingPointType\n double "]
528472[label="methodDeclarator\n getChisquareCriticalValue() "]
428473[label="block\n {returnchisquareCriticalValue;} "]
528474[label="returnStatement\n returnchisquareCriticalValue; "]
628475[label="expressionName\n chisquareCriticalValue "]
328476[label="methodDeclaration\n publicvoidsetChisquareCriticalValue(doublechisquareCriticalValue){this.chisquareCriticalValue=chisquareCriticalValue;} "]
428477[label="methodModifier\n public "]
428478[label="methodHeader\n voidsetChisquareCriticalValue(doublechisquareCriticalValue) "]
528479[label="result\n void "]
528480[label="methodDeclarator\n setChisquareCriticalValue(doublechisquareCriticalValue) "]
628481[label="formalParameter\n doublechisquareCriticalValue "]
728482[label="floatingPointType\n double "]
728483[label="variableDeclaratorId\n chisquareCriticalValue "]
428484[label="block\n {this.chisquareCriticalValue=chisquareCriticalValue;} "]
528485[label="expressionStatement\n this.chisquareCriticalValue=chisquareCriticalValue; "]
628486[label="assignment\n this.chisquareCriticalValue=chisquareCriticalValue "]
728487[label="fieldAccess\n this.chisquareCriticalValue "]
828488[label="primaryNoNewArray_lfno_primary\n this "]
728489[label="assignmentOperator\n = "]
728490[label="expressionName\n chisquareCriticalValue "]
328491[label="methodDeclaration\n publicChiSquareFeatureExtractorsetALevel(doubleaLevel){chisquareCriticalValue=ContinuousDistributions.ChisquareInverseCdf(aLevel,1);returnthis;} "]
428492[label="methodModifier\n public "]
428493[label="methodHeader\n ChiSquareFeatureExtractorsetALevel(doubleaLevel) "]
528494[label="unannClassType_lfno_unannClassOrInterfaceType\n ChiSquareFeatureExtractor "]
528495[label="methodDeclarator\n setALevel(doubleaLevel) "]
628496[label="formalParameter\n doubleaLevel "]
728497[label="floatingPointType\n double "]
728498[label="variableDeclaratorId\n aLevel "]
428499[label="block\n {chisquareCriticalValue=ContinuousDistributions.ChisquareInverseCdf(aLevel,1);returnthis;} "]
528500[label="blockStatements\n chisquareCriticalValue=ContinuousDistributions.ChisquareInverseCdf(aLevel,1);returnthis; "]
628501[label="expressionStatement\n chisquareCriticalValue=ContinuousDistributions.ChisquareInverseCdf(aLevel,1); "]
728502[label="assignment\n chisquareCriticalValue=ContinuousDistributions.ChisquareInverseCdf(aLevel,1) "]
828503[label="expressionName\n chisquareCriticalValue "]
828504[label="assignmentOperator\n = "]
828505[label="methodInvocation_lfno_primary\n ContinuousDistributions.ChisquareInverseCdf(aLevel,1) "]
928506[label="typeName\n ContinuousDistributions "]
928507[label="argumentList\n aLevel,1 "]
1028508[label="expressionName\n aLevel "]
1028509[label="literal\n 1 "]
628510[label="returnStatement\n returnthis; "]
728511[label="primaryNoNewArray_lfno_primary\n this "]
328512[label="methodDeclaration\n publicdoublegetALevel(){returnContinuousDistributions.ChisquareCdf(chisquareCriticalValue,1);} "]
428513[label="methodModifier\n public "]
428514[label="methodHeader\n doublegetALevel() "]
528515[label="floatingPointType\n double "]
528516[label="methodDeclarator\n getALevel() "]
428517[label="block\n {returnContinuousDistributions.ChisquareCdf(chisquareCriticalValue,1);} "]
528518[label="returnStatement\n returnContinuousDistributions.ChisquareCdf(chisquareCriticalValue,1); "]
628519[label="methodInvocation_lfno_primary\n ContinuousDistributions.ChisquareCdf(chisquareCriticalValue,1) "]
728520[label="typeName\n ContinuousDistributions "]
728521[label="argumentList\n chisquareCriticalValue,1 "]
828522[label="expressionName\n chisquareCriticalValue "]
828523[label="literal\n 1 "]
028524[label="compilationUnit\n packagecom.hankcs.hanlp.classification.utilities;importjava.util.*;publicclassCollectionUtility{publicstatic<K,VextendsComparable<V>>Map<K,V>sortMapByValue(Map<K,V>input,finalbooleandesc){LinkedHashMap<K,V>output=newLinkedHashMap<K,V>(input.size());ArrayList<Map.Entry<K,V>>entryList=newArrayList<Map.Entry<K,V>>(input.size());Collections.sort(entryList,newComparator<Map.Entry<K,V>>(){publicintcompare(Map.Entry<K,V>o1,Map.Entry<K,V>o2){if(desc)returno2.getValue().compareTo(o1.getValue());returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,V>entry:entryList){output.put(entry.getKey(),entry.getValue());}returnoutput;}publicstatic<K,VextendsComparable<V>>Map<K,V>sortMapByValue(Map<K,V>input){returnsortMapByValue(input,true);}publicstaticStringmax(Map<String,Double>scoreMap){doublemax=Double.NEGATIVE_INFINITY;Stringbest=null;for(Map.Entry<String,Double>entry:scoreMap.entrySet()){Doublescore=entry.getValue();if(score>max){max=score;best=entry.getKey();}}returnbest;}publicstaticString[][]spiltArray(String[]src,doublerate){assert0<=rate&&rate<=1;String[][]output=newString[2][];output[0]=newString[(int)(src.length*rate)];output[1]=newString[src.length-output[0].length];System.arraycopy(src,0,output[0],0,output[0].length);System.arraycopy(src,output[0].length,output[1],0,output[1].length);returnoutput;}publicstaticMap<String,String[]>splitMap(Map<String,String[]>src,doublerate){assert0<=rate&&rate<=1;Map<String,String[]>output=newTreeMap<String,String[]>();for(Map.Entry<String,String[]>entry:src.entrySet()){String[][]array=spiltArray(entry.getValue(),rate);output.put(entry.getKey(),array[0]);entry.setValue(array[1]);}returnoutput;}}<EOF> "]
128525[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.utilities; "]
228526[label="packageName\n com.hankcs.hanlp.classification.utilities "]
328527[label="packageName\n com.hankcs.hanlp.classification "]
428528[label="packageName\n com.hankcs.hanlp "]
528529[label="packageName\n com.hankcs "]
628530[label="packageName\n com "]
128531[label="typeImportOnDemandDeclaration\n importjava.util.*; "]
228532[label="packageOrTypeName\n java.util "]
328533[label="packageOrTypeName\n java "]
128534[label="normalClassDeclaration\n publicclassCollectionUtility{publicstatic<K,VextendsComparable<V>>Map<K,V>sortMapByValue(Map<K,V>input,finalbooleandesc){LinkedHashMap<K,V>output=newLinkedHashMap<K,V>(input.size());ArrayList<Map.Entry<K,V>>entryList=newArrayList<Map.Entry<K,V>>(input.size());Collections.sort(entryList,newComparator<Map.Entry<K,V>>(){publicintcompare(Map.Entry<K,V>o1,Map.Entry<K,V>o2){if(desc)returno2.getValue().compareTo(o1.getValue());returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,V>entry:entryList){output.put(entry.getKey(),entry.getValue());}returnoutput;}publicstatic<K,VextendsComparable<V>>Map<K,V>sortMapByValue(Map<K,V>input){returnsortMapByValue(input,true);}publicstaticStringmax(Map<String,Double>scoreMap){doublemax=Double.NEGATIVE_INFINITY;Stringbest=null;for(Map.Entry<String,Double>entry:scoreMap.entrySet()){Doublescore=entry.getValue();if(score>max){max=score;best=entry.getKey();}}returnbest;}publicstaticString[][]spiltArray(String[]src,doublerate){assert0<=rate&&rate<=1;String[][]output=newString[2][];output[0]=newString[(int)(src.length*rate)];output[1]=newString[src.length-output[0].length];System.arraycopy(src,0,output[0],0,output[0].length);System.arraycopy(src,output[0].length,output[1],0,output[1].length);returnoutput;}publicstaticMap<String,String[]>splitMap(Map<String,String[]>src,doublerate){assert0<=rate&&rate<=1;Map<String,String[]>output=newTreeMap<String,String[]>();for(Map.Entry<String,String[]>entry:src.entrySet()){String[][]array=spiltArray(entry.getValue(),rate);output.put(entry.getKey(),array[0]);entry.setValue(array[1]);}returnoutput;}} "]
228535[label="classModifier\n public "]
228536[label="classBody\n {publicstatic<K,VextendsComparable<V>>Map<K,V>sortMapByValue(Map<K,V>input,finalbooleandesc){LinkedHashMap<K,V>output=newLinkedHashMap<K,V>(input.size());ArrayList<Map.Entry<K,V>>entryList=newArrayList<Map.Entry<K,V>>(input.size());Collections.sort(entryList,newComparator<Map.Entry<K,V>>(){publicintcompare(Map.Entry<K,V>o1,Map.Entry<K,V>o2){if(desc)returno2.getValue().compareTo(o1.getValue());returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,V>entry:entryList){output.put(entry.getKey(),entry.getValue());}returnoutput;}publicstatic<K,VextendsComparable<V>>Map<K,V>sortMapByValue(Map<K,V>input){returnsortMapByValue(input,true);}publicstaticStringmax(Map<String,Double>scoreMap){doublemax=Double.NEGATIVE_INFINITY;Stringbest=null;for(Map.Entry<String,Double>entry:scoreMap.entrySet()){Doublescore=entry.getValue();if(score>max){max=score;best=entry.getKey();}}returnbest;}publicstaticString[][]spiltArray(String[]src,doublerate){assert0<=rate&&rate<=1;String[][]output=newString[2][];output[0]=newString[(int)(src.length*rate)];output[1]=newString[src.length-output[0].length];System.arraycopy(src,0,output[0],0,output[0].length);System.arraycopy(src,output[0].length,output[1],0,output[1].length);returnoutput;}publicstaticMap<String,String[]>splitMap(Map<String,String[]>src,doublerate){assert0<=rate&&rate<=1;Map<String,String[]>output=newTreeMap<String,String[]>();for(Map.Entry<String,String[]>entry:src.entrySet()){String[][]array=spiltArray(entry.getValue(),rate);output.put(entry.getKey(),array[0]);entry.setValue(array[1]);}returnoutput;}} "]
328537[label="methodDeclaration\n publicstatic<K,VextendsComparable<V>>Map<K,V>sortMapByValue(Map<K,V>input,finalbooleandesc){LinkedHashMap<K,V>output=newLinkedHashMap<K,V>(input.size());ArrayList<Map.Entry<K,V>>entryList=newArrayList<Map.Entry<K,V>>(input.size());Collections.sort(entryList,newComparator<Map.Entry<K,V>>(){publicintcompare(Map.Entry<K,V>o1,Map.Entry<K,V>o2){if(desc)returno2.getValue().compareTo(o1.getValue());returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,V>entry:entryList){output.put(entry.getKey(),entry.getValue());}returnoutput;} "]
428538[label="methodModifier\n public "]
428539[label="methodModifier\n static "]
428540[label="methodHeader\n <K,VextendsComparable<V>>Map<K,V>sortMapByValue(Map<K,V>input,finalbooleandesc) "]
528541[label="typeParameters\n <K,VextendsComparable<V>> "]
628542[label="typeParameterList\n K,VextendsComparable<V> "]
728543[label="typeParameter\n K "]
728544[label="typeParameter\n VextendsComparable<V> "]
828545[label="typeBound\n extendsComparable<V> "]
928546[label="classType_lfno_classOrInterfaceType\n Comparable<V> "]
1028547[label="typeArguments\n <V> "]
1128548[label="classType_lfno_classOrInterfaceType\n V "]
528549[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<K,V> "]
628550[label="typeArguments\n <K,V> "]
728551[label="typeArgumentList\n K,V "]
828552[label="classType_lfno_classOrInterfaceType\n K "]
828553[label="classType_lfno_classOrInterfaceType\n V "]
528554[label="methodDeclarator\n sortMapByValue(Map<K,V>input,finalbooleandesc) "]
628555[label="formalParameterList\n Map<K,V>input,finalbooleandesc "]
728556[label="formalParameter\n Map<K,V>input "]
828557[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<K,V> "]
928558[label="typeArguments\n <K,V> "]
1028559[label="typeArgumentList\n K,V "]
1128560[label="classType_lfno_classOrInterfaceType\n K "]
1128561[label="classType_lfno_classOrInterfaceType\n V "]
828562[label="variableDeclaratorId\n input "]
728563[label="formalParameter\n finalbooleandesc "]
828564[label="variableModifier\n final "]
828565[label="unannPrimitiveType\n boolean "]
828566[label="variableDeclaratorId\n desc "]
428567[label="block\n {LinkedHashMap<K,V>output=newLinkedHashMap<K,V>(input.size());ArrayList<Map.Entry<K,V>>entryList=newArrayList<Map.Entry<K,V>>(input.size());Collections.sort(entryList,newComparator<Map.Entry<K,V>>(){publicintcompare(Map.Entry<K,V>o1,Map.Entry<K,V>o2){if(desc)returno2.getValue().compareTo(o1.getValue());returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,V>entry:entryList){output.put(entry.getKey(),entry.getValue());}returnoutput;} "]
528568[label="blockStatements\n LinkedHashMap<K,V>output=newLinkedHashMap<K,V>(input.size());ArrayList<Map.Entry<K,V>>entryList=newArrayList<Map.Entry<K,V>>(input.size());Collections.sort(entryList,newComparator<Map.Entry<K,V>>(){publicintcompare(Map.Entry<K,V>o1,Map.Entry<K,V>o2){if(desc)returno2.getValue().compareTo(o1.getValue());returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,V>entry:entryList){output.put(entry.getKey(),entry.getValue());}returnoutput; "]
628569[label="localVariableDeclarationStatement\n LinkedHashMap<K,V>output=newLinkedHashMap<K,V>(input.size()); "]
728570[label="localVariableDeclaration\n LinkedHashMap<K,V>output=newLinkedHashMap<K,V>(input.size()) "]
828571[label="unannClassType_lfno_unannClassOrInterfaceType\n LinkedHashMap<K,V> "]
928572[label="typeArguments\n <K,V> "]
1028573[label="typeArgumentList\n K,V "]
1128574[label="classType_lfno_classOrInterfaceType\n K "]
1128575[label="classType_lfno_classOrInterfaceType\n V "]
828576[label="variableDeclarator\n output=newLinkedHashMap<K,V>(input.size()) "]
928577[label="variableDeclaratorId\n output "]
928578[label="classInstanceCreationExpression_lfno_primary\n newLinkedHashMap<K,V>(input.size()) "]
1028579[label="typeArguments\n <K,V> "]
1128580[label="typeArgumentList\n K,V "]
1228581[label="classType_lfno_classOrInterfaceType\n K "]
1228582[label="classType_lfno_classOrInterfaceType\n V "]
1028583[label="methodInvocation_lfno_primary\n input.size() "]
1128584[label="typeName\n input "]
628585[label="localVariableDeclarationStatement\n ArrayList<Map.Entry<K,V>>entryList=newArrayList<Map.Entry<K,V>>(input.size()); "]
728586[label="localVariableDeclaration\n ArrayList<Map.Entry<K,V>>entryList=newArrayList<Map.Entry<K,V>>(input.size()) "]
828587[label="unannClassType_lfno_unannClassOrInterfaceType\n ArrayList<Map.Entry<K,V>> "]
928588[label="typeArguments\n <Map.Entry<K,V>> "]
1028589[label="classOrInterfaceType\n Map.Entry<K,V> "]
1128590[label="classType_lfno_classOrInterfaceType\n Map "]
1128591[label="classType_lf_classOrInterfaceType\n .Entry<K,V> "]
1228592[label="typeArguments\n <K,V> "]
1328593[label="typeArgumentList\n K,V "]
1428594[label="classType_lfno_classOrInterfaceType\n K "]
1428595[label="classType_lfno_classOrInterfaceType\n V "]
828596[label="variableDeclarator\n entryList=newArrayList<Map.Entry<K,V>>(input.size()) "]
928597[label="variableDeclaratorId\n entryList "]
928598[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Map.Entry<K,V>>(input.size()) "]
1028599[label="typeArguments\n <Map.Entry<K,V>> "]
1128600[label="classOrInterfaceType\n Map.Entry<K,V> "]
1228601[label="classType_lfno_classOrInterfaceType\n Map "]
1228602[label="classType_lf_classOrInterfaceType\n .Entry<K,V> "]
1328603[label="typeArguments\n <K,V> "]
1428604[label="typeArgumentList\n K,V "]
1528605[label="classType_lfno_classOrInterfaceType\n K "]
1528606[label="classType_lfno_classOrInterfaceType\n V "]
1028607[label="methodInvocation_lfno_primary\n input.size() "]
1128608[label="typeName\n input "]
628609[label="expressionStatement\n Collections.sort(entryList,newComparator<Map.Entry<K,V>>(){publicintcompare(Map.Entry<K,V>o1,Map.Entry<K,V>o2){if(desc)returno2.getValue().compareTo(o1.getValue());returno1.getValue().compareTo(o2.getValue());}}); "]
728610[label="methodInvocation\n Collections.sort(entryList,newComparator<Map.Entry<K,V>>(){publicintcompare(Map.Entry<K,V>o1,Map.Entry<K,V>o2){if(desc)returno2.getValue().compareTo(o1.getValue());returno1.getValue().compareTo(o2.getValue());}}) "]
828611[label="typeName\n Collections "]
828612[label="argumentList\n entryList,newComparator<Map.Entry<K,V>>(){publicintcompare(Map.Entry<K,V>o1,Map.Entry<K,V>o2){if(desc)returno2.getValue().compareTo(o1.getValue());returno1.getValue().compareTo(o2.getValue());}} "]
928613[label="expressionName\n entryList "]
928614[label="classInstanceCreationExpression_lfno_primary\n newComparator<Map.Entry<K,V>>(){publicintcompare(Map.Entry<K,V>o1,Map.Entry<K,V>o2){if(desc)returno2.getValue().compareTo(o1.getValue());returno1.getValue().compareTo(o2.getValue());}} "]
1028615[label="typeArguments\n <Map.Entry<K,V>> "]
1128616[label="classOrInterfaceType\n Map.Entry<K,V> "]
1228617[label="classType_lfno_classOrInterfaceType\n Map "]
1228618[label="classType_lf_classOrInterfaceType\n .Entry<K,V> "]
1328619[label="typeArguments\n <K,V> "]
1428620[label="typeArgumentList\n K,V "]
1528621[label="classType_lfno_classOrInterfaceType\n K "]
1528622[label="classType_lfno_classOrInterfaceType\n V "]
1028623[label="classBody\n {publicintcompare(Map.Entry<K,V>o1,Map.Entry<K,V>o2){if(desc)returno2.getValue().compareTo(o1.getValue());returno1.getValue().compareTo(o2.getValue());}} "]
1128624[label="methodDeclaration\n publicintcompare(Map.Entry<K,V>o1,Map.Entry<K,V>o2){if(desc)returno2.getValue().compareTo(o1.getValue());returno1.getValue().compareTo(o2.getValue());} "]
1228625[label="methodModifier\n public "]
1228626[label="methodHeader\n intcompare(Map.Entry<K,V>o1,Map.Entry<K,V>o2) "]
1328627[label="integralType\n int "]
1328628[label="methodDeclarator\n compare(Map.Entry<K,V>o1,Map.Entry<K,V>o2) "]
1428629[label="formalParameterList\n Map.Entry<K,V>o1,Map.Entry<K,V>o2 "]
1528630[label="formalParameter\n Map.Entry<K,V>o1 "]
1628631[label="unannClassOrInterfaceType\n Map.Entry<K,V> "]
1728632[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
1728633[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,V> "]
1828634[label="typeArguments\n <K,V> "]
1928635[label="typeArgumentList\n K,V "]
2028636[label="classType_lfno_classOrInterfaceType\n K "]
2028637[label="classType_lfno_classOrInterfaceType\n V "]
1628638[label="variableDeclaratorId\n o1 "]
1528639[label="formalParameter\n Map.Entry<K,V>o2 "]
1628640[label="unannClassOrInterfaceType\n Map.Entry<K,V> "]
1728641[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
1728642[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,V> "]
1828643[label="typeArguments\n <K,V> "]
1928644[label="typeArgumentList\n K,V "]
2028645[label="classType_lfno_classOrInterfaceType\n K "]
2028646[label="classType_lfno_classOrInterfaceType\n V "]
1628647[label="variableDeclaratorId\n o2 "]
1228648[label="block\n {if(desc)returno2.getValue().compareTo(o1.getValue());returno1.getValue().compareTo(o2.getValue());} "]
1328649[label="blockStatements\n if(desc)returno2.getValue().compareTo(o1.getValue());returno1.getValue().compareTo(o2.getValue()); "]
1428650[label="ifThenStatement\n if(desc)returno2.getValue().compareTo(o1.getValue()); "]
1528651[label="expressionName\n desc "]
1528652[label="returnStatement\n returno2.getValue().compareTo(o1.getValue()); "]
1628653[label="primary\n o2.getValue().compareTo(o1.getValue()) "]
1728654[label="methodInvocation_lfno_primary\n o2.getValue() "]
1828655[label="typeName\n o2 "]
1728656[label="methodInvocation_lf_primary\n .compareTo(o1.getValue()) "]
1828657[label="methodInvocation_lfno_primary\n o1.getValue() "]
1928658[label="typeName\n o1 "]
1428659[label="returnStatement\n returno1.getValue().compareTo(o2.getValue()); "]
1528660[label="primary\n o1.getValue().compareTo(o2.getValue()) "]
1628661[label="methodInvocation_lfno_primary\n o1.getValue() "]
1728662[label="typeName\n o1 "]
1628663[label="methodInvocation_lf_primary\n .compareTo(o2.getValue()) "]
1728664[label="methodInvocation_lfno_primary\n o2.getValue() "]
1828665[label="typeName\n o2 "]
628666[label="enhancedForStatement\n for(Map.Entry<K,V>entry:entryList){output.put(entry.getKey(),entry.getValue());} "]
728667[label="unannClassOrInterfaceType\n Map.Entry<K,V> "]
828668[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
828669[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,V> "]
928670[label="typeArguments\n <K,V> "]
1028671[label="typeArgumentList\n K,V "]
1128672[label="classType_lfno_classOrInterfaceType\n K "]
1128673[label="classType_lfno_classOrInterfaceType\n V "]
728674[label="variableDeclaratorId\n entry "]
728675[label="expressionName\n entryList "]
728676[label="block\n {output.put(entry.getKey(),entry.getValue());} "]
828677[label="expressionStatement\n output.put(entry.getKey(),entry.getValue()); "]
928678[label="methodInvocation\n output.put(entry.getKey(),entry.getValue()) "]
1028679[label="typeName\n output "]
1028680[label="argumentList\n entry.getKey(),entry.getValue() "]
1128681[label="methodInvocation_lfno_primary\n entry.getKey() "]
1228682[label="typeName\n entry "]
1128683[label="methodInvocation_lfno_primary\n entry.getValue() "]
1228684[label="typeName\n entry "]
628685[label="returnStatement\n returnoutput; "]
728686[label="expressionName\n output "]
328687[label="methodDeclaration\n publicstatic<K,VextendsComparable<V>>Map<K,V>sortMapByValue(Map<K,V>input){returnsortMapByValue(input,true);} "]
428688[label="methodModifier\n public "]
428689[label="methodModifier\n static "]
428690[label="methodHeader\n <K,VextendsComparable<V>>Map<K,V>sortMapByValue(Map<K,V>input) "]
528691[label="typeParameters\n <K,VextendsComparable<V>> "]
628692[label="typeParameterList\n K,VextendsComparable<V> "]
728693[label="typeParameter\n K "]
728694[label="typeParameter\n VextendsComparable<V> "]
828695[label="typeBound\n extendsComparable<V> "]
928696[label="classType_lfno_classOrInterfaceType\n Comparable<V> "]
1028697[label="typeArguments\n <V> "]
1128698[label="classType_lfno_classOrInterfaceType\n V "]
528699[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<K,V> "]
628700[label="typeArguments\n <K,V> "]
728701[label="typeArgumentList\n K,V "]
828702[label="classType_lfno_classOrInterfaceType\n K "]
828703[label="classType_lfno_classOrInterfaceType\n V "]
528704[label="methodDeclarator\n sortMapByValue(Map<K,V>input) "]
628705[label="formalParameter\n Map<K,V>input "]
728706[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<K,V> "]
828707[label="typeArguments\n <K,V> "]
928708[label="typeArgumentList\n K,V "]
1028709[label="classType_lfno_classOrInterfaceType\n K "]
1028710[label="classType_lfno_classOrInterfaceType\n V "]
728711[label="variableDeclaratorId\n input "]
428712[label="block\n {returnsortMapByValue(input,true);} "]
528713[label="returnStatement\n returnsortMapByValue(input,true); "]
628714[label="methodInvocation_lfno_primary\n sortMapByValue(input,true) "]
728715[label="methodName\n sortMapByValue "]
728716[label="argumentList\n input,true "]
828717[label="expressionName\n input "]
828718[label="literal\n true "]
328719[label="methodDeclaration\n publicstaticStringmax(Map<String,Double>scoreMap){doublemax=Double.NEGATIVE_INFINITY;Stringbest=null;for(Map.Entry<String,Double>entry:scoreMap.entrySet()){Doublescore=entry.getValue();if(score>max){max=score;best=entry.getKey();}}returnbest;} "]
428720[label="methodModifier\n public "]
428721[label="methodModifier\n static "]
428722[label="methodHeader\n Stringmax(Map<String,Double>scoreMap) "]
528723[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
528724[label="methodDeclarator\n max(Map<String,Double>scoreMap) "]
628725[label="formalParameter\n Map<String,Double>scoreMap "]
728726[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
828727[label="typeArguments\n <String,Double> "]
928728[label="typeArgumentList\n String,Double "]
1028729[label="classType_lfno_classOrInterfaceType\n String "]
1028730[label="classType_lfno_classOrInterfaceType\n Double "]
728731[label="variableDeclaratorId\n scoreMap "]
428732[label="block\n {doublemax=Double.NEGATIVE_INFINITY;Stringbest=null;for(Map.Entry<String,Double>entry:scoreMap.entrySet()){Doublescore=entry.getValue();if(score>max){max=score;best=entry.getKey();}}returnbest;} "]
528733[label="blockStatements\n doublemax=Double.NEGATIVE_INFINITY;Stringbest=null;for(Map.Entry<String,Double>entry:scoreMap.entrySet()){Doublescore=entry.getValue();if(score>max){max=score;best=entry.getKey();}}returnbest; "]
628734[label="localVariableDeclarationStatement\n doublemax=Double.NEGATIVE_INFINITY; "]
728735[label="localVariableDeclaration\n doublemax=Double.NEGATIVE_INFINITY "]
828736[label="floatingPointType\n double "]
828737[label="variableDeclarator\n max=Double.NEGATIVE_INFINITY "]
928738[label="variableDeclaratorId\n max "]
928739[label="expressionName\n Double.NEGATIVE_INFINITY "]
1028740[label="ambiguousName\n Double "]
628741[label="localVariableDeclarationStatement\n Stringbest=null; "]
728742[label="localVariableDeclaration\n Stringbest=null "]
828743[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
828744[label="variableDeclarator\n best=null "]
928745[label="variableDeclaratorId\n best "]
928746[label="literal\n null "]
628747[label="enhancedForStatement\n for(Map.Entry<String,Double>entry:scoreMap.entrySet()){Doublescore=entry.getValue();if(score>max){max=score;best=entry.getKey();}} "]
728748[label="unannClassOrInterfaceType\n Map.Entry<String,Double> "]
828749[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
828750[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,Double> "]
928751[label="typeArguments\n <String,Double> "]
1028752[label="typeArgumentList\n String,Double "]
1128753[label="classType_lfno_classOrInterfaceType\n String "]
1128754[label="classType_lfno_classOrInterfaceType\n Double "]
728755[label="variableDeclaratorId\n entry "]
728756[label="methodInvocation_lfno_primary\n scoreMap.entrySet() "]
828757[label="typeName\n scoreMap "]
728758[label="block\n {Doublescore=entry.getValue();if(score>max){max=score;best=entry.getKey();}} "]
828759[label="blockStatements\n Doublescore=entry.getValue();if(score>max){max=score;best=entry.getKey();} "]
928760[label="localVariableDeclarationStatement\n Doublescore=entry.getValue(); "]
1028761[label="localVariableDeclaration\n Doublescore=entry.getValue() "]
1128762[label="unannClassType_lfno_unannClassOrInterfaceType\n Double "]
1128763[label="variableDeclarator\n score=entry.getValue() "]
1228764[label="variableDeclaratorId\n score "]
1228765[label="methodInvocation_lfno_primary\n entry.getValue() "]
1328766[label="typeName\n entry "]
928767[label="ifThenStatement\n if(score>max){max=score;best=entry.getKey();} "]
1028768[label="relationalExpression\n score>max "]
1128769[label="expressionName\n score "]
1128770[label="expressionName\n max "]
1028771[label="block\n {max=score;best=entry.getKey();} "]
1128772[label="blockStatements\n max=score;best=entry.getKey(); "]
1228773[label="expressionStatement\n max=score; "]
1328774[label="assignment\n max=score "]
1428775[label="expressionName\n max "]
1428776[label="assignmentOperator\n = "]
1428777[label="expressionName\n score "]
1228778[label="expressionStatement\n best=entry.getKey(); "]
1328779[label="assignment\n best=entry.getKey() "]
1428780[label="expressionName\n best "]
1428781[label="assignmentOperator\n = "]
1428782[label="methodInvocation_lfno_primary\n entry.getKey() "]
1528783[label="typeName\n entry "]
628784[label="returnStatement\n returnbest; "]
728785[label="expressionName\n best "]
328786[label="methodDeclaration\n publicstaticString[][]spiltArray(String[]src,doublerate){assert0<=rate&&rate<=1;String[][]output=newString[2][];output[0]=newString[(int)(src.length*rate)];output[1]=newString[src.length-output[0].length];System.arraycopy(src,0,output[0],0,output[0].length);System.arraycopy(src,output[0].length,output[1],0,output[1].length);returnoutput;} "]
428787[label="methodModifier\n public "]
428788[label="methodModifier\n static "]
428789[label="methodHeader\n String[][]spiltArray(String[]src,doublerate) "]
528790[label="unannArrayType\n String[][] "]
628791[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
628792[label="dims\n [][] "]
528793[label="methodDeclarator\n spiltArray(String[]src,doublerate) "]
628794[label="formalParameterList\n String[]src,doublerate "]
728795[label="formalParameter\n String[]src "]
828796[label="unannArrayType\n String[] "]
928797[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
928798[label="dims\n [] "]
828799[label="variableDeclaratorId\n src "]
728800[label="formalParameter\n doublerate "]
828801[label="floatingPointType\n double "]
828802[label="variableDeclaratorId\n rate "]
428803[label="block\n {assert0<=rate&&rate<=1;String[][]output=newString[2][];output[0]=newString[(int)(src.length*rate)];output[1]=newString[src.length-output[0].length];System.arraycopy(src,0,output[0],0,output[0].length);System.arraycopy(src,output[0].length,output[1],0,output[1].length);returnoutput;} "]
528804[label="blockStatements\n assert0<=rate&&rate<=1;String[][]output=newString[2][];output[0]=newString[(int)(src.length*rate)];output[1]=newString[src.length-output[0].length];System.arraycopy(src,0,output[0],0,output[0].length);System.arraycopy(src,output[0].length,output[1],0,output[1].length);returnoutput; "]
628805[label="assertStatement\n assert0<=rate&&rate<=1; "]
728806[label="conditionalAndExpression\n 0<=rate&&rate<=1 "]
828807[label="relationalExpression\n 0<=rate "]
928808[label="literal\n 0 "]
928809[label="expressionName\n rate "]
828810[label="relationalExpression\n rate<=1 "]
928811[label="expressionName\n rate "]
928812[label="literal\n 1 "]
628813[label="localVariableDeclarationStatement\n String[][]output=newString[2][]; "]
728814[label="localVariableDeclaration\n String[][]output=newString[2][] "]
828815[label="unannArrayType\n String[][] "]
928816[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
928817[label="dims\n [][] "]
828818[label="variableDeclarator\n output=newString[2][] "]
928819[label="variableDeclaratorId\n output "]
928820[label="arrayCreationExpression\n newString[2][] "]
1028821[label="classType_lfno_classOrInterfaceType\n String "]
1028822[label="dimExpr\n [2] "]
1128823[label="literal\n 2 "]
1028824[label="dims\n [] "]
628825[label="expressionStatement\n output[0]=newString[(int)(src.length*rate)]; "]
728826[label="assignment\n output[0]=newString[(int)(src.length*rate)] "]
828827[label="arrayAccess\n output[0] "]
928828[label="expressionName\n output "]
928829[label="literal\n 0 "]
828830[label="assignmentOperator\n = "]
828831[label="arrayCreationExpression\n newString[(int)(src.length*rate)] "]
928832[label="classType_lfno_classOrInterfaceType\n String "]
928833[label="dimExpr\n [(int)(src.length*rate)] "]
1028834[label="castExpression\n (int)(src.length*rate) "]
1128835[label="integralType\n int "]
1128836[label="primaryNoNewArray_lfno_primary\n (src.length*rate) "]
1228837[label="multiplicativeExpression\n src.length*rate "]
1328838[label="expressionName\n src.length "]
1428839[label="ambiguousName\n src "]
1328840[label="expressionName\n rate "]
628841[label="expressionStatement\n output[1]=newString[src.length-output[0].length]; "]
728842[label="assignment\n output[1]=newString[src.length-output[0].length] "]
828843[label="arrayAccess\n output[1] "]
928844[label="expressionName\n output "]
928845[label="literal\n 1 "]
828846[label="assignmentOperator\n = "]
828847[label="arrayCreationExpression\n newString[src.length-output[0].length] "]
928848[label="classType_lfno_classOrInterfaceType\n String "]
928849[label="dimExpr\n [src.length-output[0].length] "]
1028850[label="additiveExpression\n src.length-output[0].length "]
1128851[label="expressionName\n src.length "]
1228852[label="ambiguousName\n src "]
1128853[label="primary\n output[0].length "]
1228854[label="arrayAccess_lfno_primary\n output[0] "]
1328855[label="expressionName\n output "]
1328856[label="literal\n 0 "]
1228857[label="fieldAccess_lf_primary\n .length "]
628858[label="expressionStatement\n System.arraycopy(src,0,output[0],0,output[0].length); "]
728859[label="methodInvocation\n System.arraycopy(src,0,output[0],0,output[0].length) "]
828860[label="typeName\n System "]
828861[label="argumentList\n src,0,output[0],0,output[0].length "]
928862[label="expressionName\n src "]
928863[label="literal\n 0 "]
928864[label="arrayAccess_lfno_primary\n output[0] "]
1028865[label="expressionName\n output "]
1028866[label="literal\n 0 "]
928867[label="literal\n 0 "]
928868[label="primary\n output[0].length "]
1028869[label="arrayAccess_lfno_primary\n output[0] "]
1128870[label="expressionName\n output "]
1128871[label="literal\n 0 "]
1028872[label="fieldAccess_lf_primary\n .length "]
628873[label="expressionStatement\n System.arraycopy(src,output[0].length,output[1],0,output[1].length); "]
728874[label="methodInvocation\n System.arraycopy(src,output[0].length,output[1],0,output[1].length) "]
828875[label="typeName\n System "]
828876[label="argumentList\n src,output[0].length,output[1],0,output[1].length "]
928877[label="expressionName\n src "]
928878[label="primary\n output[0].length "]
1028879[label="arrayAccess_lfno_primary\n output[0] "]
1128880[label="expressionName\n output "]
1128881[label="literal\n 0 "]
1028882[label="fieldAccess_lf_primary\n .length "]
928883[label="arrayAccess_lfno_primary\n output[1] "]
1028884[label="expressionName\n output "]
1028885[label="literal\n 1 "]
928886[label="literal\n 0 "]
928887[label="primary\n output[1].length "]
1028888[label="arrayAccess_lfno_primary\n output[1] "]
1128889[label="expressionName\n output "]
1128890[label="literal\n 1 "]
1028891[label="fieldAccess_lf_primary\n .length "]
628892[label="returnStatement\n returnoutput; "]
728893[label="expressionName\n output "]
328894[label="methodDeclaration\n publicstaticMap<String,String[]>splitMap(Map<String,String[]>src,doublerate){assert0<=rate&&rate<=1;Map<String,String[]>output=newTreeMap<String,String[]>();for(Map.Entry<String,String[]>entry:src.entrySet()){String[][]array=spiltArray(entry.getValue(),rate);output.put(entry.getKey(),array[0]);entry.setValue(array[1]);}returnoutput;} "]
428895[label="methodModifier\n public "]
428896[label="methodModifier\n static "]
428897[label="methodHeader\n Map<String,String[]>splitMap(Map<String,String[]>src,doublerate) "]
528898[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String[]> "]
628899[label="typeArguments\n <String,String[]> "]
728900[label="typeArgumentList\n String,String[] "]
828901[label="classType_lfno_classOrInterfaceType\n String "]
828902[label="arrayType\n String[] "]
928903[label="classType_lfno_classOrInterfaceType\n String "]
928904[label="dims\n [] "]
528905[label="methodDeclarator\n splitMap(Map<String,String[]>src,doublerate) "]
628906[label="formalParameterList\n Map<String,String[]>src,doublerate "]
728907[label="formalParameter\n Map<String,String[]>src "]
828908[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String[]> "]
928909[label="typeArguments\n <String,String[]> "]
1028910[label="typeArgumentList\n String,String[] "]
1128911[label="classType_lfno_classOrInterfaceType\n String "]
1128912[label="arrayType\n String[] "]
1228913[label="classType_lfno_classOrInterfaceType\n String "]
1228914[label="dims\n [] "]
828915[label="variableDeclaratorId\n src "]
728916[label="formalParameter\n doublerate "]
828917[label="floatingPointType\n double "]
828918[label="variableDeclaratorId\n rate "]
428919[label="block\n {assert0<=rate&&rate<=1;Map<String,String[]>output=newTreeMap<String,String[]>();for(Map.Entry<String,String[]>entry:src.entrySet()){String[][]array=spiltArray(entry.getValue(),rate);output.put(entry.getKey(),array[0]);entry.setValue(array[1]);}returnoutput;} "]
528920[label="blockStatements\n assert0<=rate&&rate<=1;Map<String,String[]>output=newTreeMap<String,String[]>();for(Map.Entry<String,String[]>entry:src.entrySet()){String[][]array=spiltArray(entry.getValue(),rate);output.put(entry.getKey(),array[0]);entry.setValue(array[1]);}returnoutput; "]
628921[label="assertStatement\n assert0<=rate&&rate<=1; "]
728922[label="conditionalAndExpression\n 0<=rate&&rate<=1 "]
828923[label="relationalExpression\n 0<=rate "]
928924[label="literal\n 0 "]
928925[label="expressionName\n rate "]
828926[label="relationalExpression\n rate<=1 "]
928927[label="expressionName\n rate "]
928928[label="literal\n 1 "]
628929[label="localVariableDeclarationStatement\n Map<String,String[]>output=newTreeMap<String,String[]>(); "]
728930[label="localVariableDeclaration\n Map<String,String[]>output=newTreeMap<String,String[]>() "]
828931[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String[]> "]
928932[label="typeArguments\n <String,String[]> "]
1028933[label="typeArgumentList\n String,String[] "]
1128934[label="classType_lfno_classOrInterfaceType\n String "]
1128935[label="arrayType\n String[] "]
1228936[label="classType_lfno_classOrInterfaceType\n String "]
1228937[label="dims\n [] "]
828938[label="variableDeclarator\n output=newTreeMap<String,String[]>() "]
928939[label="variableDeclaratorId\n output "]
928940[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String[]>() "]
1028941[label="typeArguments\n <String,String[]> "]
1128942[label="typeArgumentList\n String,String[] "]
1228943[label="classType_lfno_classOrInterfaceType\n String "]
1228944[label="arrayType\n String[] "]
1328945[label="classType_lfno_classOrInterfaceType\n String "]
1328946[label="dims\n [] "]
628947[label="enhancedForStatement\n for(Map.Entry<String,String[]>entry:src.entrySet()){String[][]array=spiltArray(entry.getValue(),rate);output.put(entry.getKey(),array[0]);entry.setValue(array[1]);} "]
728948[label="unannClassOrInterfaceType\n Map.Entry<String,String[]> "]
828949[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
828950[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String[]> "]
928951[label="typeArguments\n <String,String[]> "]
1028952[label="typeArgumentList\n String,String[] "]
1128953[label="classType_lfno_classOrInterfaceType\n String "]
1128954[label="arrayType\n String[] "]
1228955[label="classType_lfno_classOrInterfaceType\n String "]
1228956[label="dims\n [] "]
728957[label="variableDeclaratorId\n entry "]
728958[label="methodInvocation_lfno_primary\n src.entrySet() "]
828959[label="typeName\n src "]
728960[label="block\n {String[][]array=spiltArray(entry.getValue(),rate);output.put(entry.getKey(),array[0]);entry.setValue(array[1]);} "]
828961[label="blockStatements\n String[][]array=spiltArray(entry.getValue(),rate);output.put(entry.getKey(),array[0]);entry.setValue(array[1]); "]
928962[label="localVariableDeclarationStatement\n String[][]array=spiltArray(entry.getValue(),rate); "]
1028963[label="localVariableDeclaration\n String[][]array=spiltArray(entry.getValue(),rate) "]
1128964[label="unannArrayType\n String[][] "]
1228965[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1228966[label="dims\n [][] "]
1128967[label="variableDeclarator\n array=spiltArray(entry.getValue(),rate) "]
1228968[label="variableDeclaratorId\n array "]
1228969[label="methodInvocation_lfno_primary\n spiltArray(entry.getValue(),rate) "]
1328970[label="methodName\n spiltArray "]
1328971[label="argumentList\n entry.getValue(),rate "]
1428972[label="methodInvocation_lfno_primary\n entry.getValue() "]
1528973[label="typeName\n entry "]
1428974[label="expressionName\n rate "]
928975[label="expressionStatement\n output.put(entry.getKey(),array[0]); "]
1028976[label="methodInvocation\n output.put(entry.getKey(),array[0]) "]
1128977[label="typeName\n output "]
1128978[label="argumentList\n entry.getKey(),array[0] "]
1228979[label="methodInvocation_lfno_primary\n entry.getKey() "]
1328980[label="typeName\n entry "]
1228981[label="arrayAccess_lfno_primary\n array[0] "]
1328982[label="expressionName\n array "]
1328983[label="literal\n 0 "]
928984[label="expressionStatement\n entry.setValue(array[1]); "]
1028985[label="methodInvocation\n entry.setValue(array[1]) "]
1128986[label="typeName\n entry "]
1128987[label="arrayAccess_lfno_primary\n array[1] "]
1228988[label="expressionName\n array "]
1228989[label="literal\n 1 "]
628990[label="returnStatement\n returnoutput; "]
728991[label="expressionName\n output "]
028992[label="compilationUnit\n packagecom.hankcs.hanlp.seg.Other;importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie;importcom.hankcs.hanlp.seg.common.ResultTerm;importjava.util.LinkedList;importjava.util.TreeMap;publicclassCommonAhoCorasickDoubleArrayTrieSegment<V>{AhoCorasickDoubleArrayTrie<V>trie;publicCommonAhoCorasickDoubleArrayTrieSegment(AhoCorasickDoubleArrayTrie<V>trie){this.trie=trie;}publicCommonAhoCorasickDoubleArrayTrieSegment(TreeMap<String,V>dictionary){trie=newAhoCorasickDoubleArrayTrie<V>(dictionary);}publicLinkedList<ResultTerm<V>>segment(Stringtext){returnCommonAhoCorasickSegmentUtil.segment(text,trie);}publicLinkedList<ResultTerm<V>>segment(char[]text){returnCommonAhoCorasickSegmentUtil.segment(text,trie);}}<EOF> "]
128993[label="packageDeclaration\n packagecom.hankcs.hanlp.seg.Other; "]
228994[label="packageName\n com.hankcs.hanlp.seg.Other "]
328995[label="packageName\n com.hankcs.hanlp.seg "]
428996[label="packageName\n com.hankcs.hanlp "]
528997[label="packageName\n com.hankcs "]
628998[label="packageName\n com "]
128999[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie; "]
229000[label="typeName\n com.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie "]
329001[label="packageOrTypeName\n com.hankcs.hanlp.collection.AhoCorasick "]
429002[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
529003[label="packageOrTypeName\n com.hankcs.hanlp "]
629004[label="packageOrTypeName\n com.hankcs "]
729005[label="packageOrTypeName\n com "]
129006[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.common.ResultTerm; "]
229007[label="typeName\n com.hankcs.hanlp.seg.common.ResultTerm "]
329008[label="packageOrTypeName\n com.hankcs.hanlp.seg.common "]
429009[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
529010[label="packageOrTypeName\n com.hankcs.hanlp "]
629011[label="packageOrTypeName\n com.hankcs "]
729012[label="packageOrTypeName\n com "]
129013[label="singleTypeImportDeclaration\n importjava.util.LinkedList; "]
229014[label="typeName\n java.util.LinkedList "]
329015[label="packageOrTypeName\n java.util "]
429016[label="packageOrTypeName\n java "]
129017[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
229018[label="typeName\n java.util.TreeMap "]
329019[label="packageOrTypeName\n java.util "]
429020[label="packageOrTypeName\n java "]
129021[label="normalClassDeclaration\n publicclassCommonAhoCorasickDoubleArrayTrieSegment<V>{AhoCorasickDoubleArrayTrie<V>trie;publicCommonAhoCorasickDoubleArrayTrieSegment(AhoCorasickDoubleArrayTrie<V>trie){this.trie=trie;}publicCommonAhoCorasickDoubleArrayTrieSegment(TreeMap<String,V>dictionary){trie=newAhoCorasickDoubleArrayTrie<V>(dictionary);}publicLinkedList<ResultTerm<V>>segment(Stringtext){returnCommonAhoCorasickSegmentUtil.segment(text,trie);}publicLinkedList<ResultTerm<V>>segment(char[]text){returnCommonAhoCorasickSegmentUtil.segment(text,trie);}} "]
229022[label="classModifier\n public "]
229023[label="typeParameters\n <V> "]
329024[label="typeParameter\n V "]
229025[label="classBody\n {AhoCorasickDoubleArrayTrie<V>trie;publicCommonAhoCorasickDoubleArrayTrieSegment(AhoCorasickDoubleArrayTrie<V>trie){this.trie=trie;}publicCommonAhoCorasickDoubleArrayTrieSegment(TreeMap<String,V>dictionary){trie=newAhoCorasickDoubleArrayTrie<V>(dictionary);}publicLinkedList<ResultTerm<V>>segment(Stringtext){returnCommonAhoCorasickSegmentUtil.segment(text,trie);}publicLinkedList<ResultTerm<V>>segment(char[]text){returnCommonAhoCorasickSegmentUtil.segment(text,trie);}} "]
329026[label="fieldDeclaration\n AhoCorasickDoubleArrayTrie<V>trie; "]
429027[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<V> "]
529028[label="typeArguments\n <V> "]
629029[label="classType_lfno_classOrInterfaceType\n V "]
429030[label="variableDeclaratorId\n trie "]
329031[label="constructorDeclaration\n publicCommonAhoCorasickDoubleArrayTrieSegment(AhoCorasickDoubleArrayTrie<V>trie){this.trie=trie;} "]
429032[label="constructorModifier\n public "]
429033[label="constructorDeclarator\n CommonAhoCorasickDoubleArrayTrieSegment(AhoCorasickDoubleArrayTrie<V>trie) "]
529034[label="simpleTypeName\n CommonAhoCorasickDoubleArrayTrieSegment "]
529035[label="formalParameter\n AhoCorasickDoubleArrayTrie<V>trie "]
629036[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<V> "]
729037[label="typeArguments\n <V> "]
829038[label="classType_lfno_classOrInterfaceType\n V "]
629039[label="variableDeclaratorId\n trie "]
429040[label="constructorBody\n {this.trie=trie;} "]
529041[label="expressionStatement\n this.trie=trie; "]
629042[label="assignment\n this.trie=trie "]
729043[label="fieldAccess\n this.trie "]
829044[label="primaryNoNewArray_lfno_primary\n this "]
729045[label="assignmentOperator\n = "]
729046[label="expressionName\n trie "]
329047[label="constructorDeclaration\n publicCommonAhoCorasickDoubleArrayTrieSegment(TreeMap<String,V>dictionary){trie=newAhoCorasickDoubleArrayTrie<V>(dictionary);} "]
429048[label="constructorModifier\n public "]
429049[label="constructorDeclarator\n CommonAhoCorasickDoubleArrayTrieSegment(TreeMap<String,V>dictionary) "]
529050[label="simpleTypeName\n CommonAhoCorasickDoubleArrayTrieSegment "]
529051[label="formalParameter\n TreeMap<String,V>dictionary "]
629052[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,V> "]
729053[label="typeArguments\n <String,V> "]
829054[label="typeArgumentList\n String,V "]
929055[label="classType_lfno_classOrInterfaceType\n String "]
929056[label="classType_lfno_classOrInterfaceType\n V "]
629057[label="variableDeclaratorId\n dictionary "]
429058[label="constructorBody\n {trie=newAhoCorasickDoubleArrayTrie<V>(dictionary);} "]
529059[label="expressionStatement\n trie=newAhoCorasickDoubleArrayTrie<V>(dictionary); "]
629060[label="assignment\n trie=newAhoCorasickDoubleArrayTrie<V>(dictionary) "]
729061[label="expressionName\n trie "]
729062[label="assignmentOperator\n = "]
729063[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie<V>(dictionary) "]
829064[label="typeArguments\n <V> "]
929065[label="classType_lfno_classOrInterfaceType\n V "]
829066[label="expressionName\n dictionary "]
329067[label="methodDeclaration\n publicLinkedList<ResultTerm<V>>segment(Stringtext){returnCommonAhoCorasickSegmentUtil.segment(text,trie);} "]
429068[label="methodModifier\n public "]
429069[label="methodHeader\n LinkedList<ResultTerm<V>>segment(Stringtext) "]
529070[label="unannClassType_lfno_unannClassOrInterfaceType\n LinkedList<ResultTerm<V>> "]
629071[label="typeArguments\n <ResultTerm<V>> "]
729072[label="classType_lfno_classOrInterfaceType\n ResultTerm<V> "]
829073[label="typeArguments\n <V> "]
929074[label="classType_lfno_classOrInterfaceType\n V "]
529075[label="methodDeclarator\n segment(Stringtext) "]
629076[label="formalParameter\n Stringtext "]
729077[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
729078[label="variableDeclaratorId\n text "]
429079[label="block\n {returnCommonAhoCorasickSegmentUtil.segment(text,trie);} "]
529080[label="returnStatement\n returnCommonAhoCorasickSegmentUtil.segment(text,trie); "]
629081[label="methodInvocation_lfno_primary\n CommonAhoCorasickSegmentUtil.segment(text,trie) "]
729082[label="typeName\n CommonAhoCorasickSegmentUtil "]
729083[label="argumentList\n text,trie "]
829084[label="expressionName\n text "]
829085[label="expressionName\n trie "]
329086[label="methodDeclaration\n publicLinkedList<ResultTerm<V>>segment(char[]text){returnCommonAhoCorasickSegmentUtil.segment(text,trie);} "]
429087[label="methodModifier\n public "]
429088[label="methodHeader\n LinkedList<ResultTerm<V>>segment(char[]text) "]
529089[label="unannClassType_lfno_unannClassOrInterfaceType\n LinkedList<ResultTerm<V>> "]
629090[label="typeArguments\n <ResultTerm<V>> "]
729091[label="classType_lfno_classOrInterfaceType\n ResultTerm<V> "]
829092[label="typeArguments\n <V> "]
929093[label="classType_lfno_classOrInterfaceType\n V "]
529094[label="methodDeclarator\n segment(char[]text) "]
629095[label="formalParameter\n char[]text "]
729096[label="unannArrayType\n char[] "]
829097[label="integralType\n char "]
829098[label="dims\n [] "]
729099[label="variableDeclaratorId\n text "]
429100[label="block\n {returnCommonAhoCorasickSegmentUtil.segment(text,trie);} "]
529101[label="returnStatement\n returnCommonAhoCorasickSegmentUtil.segment(text,trie); "]
629102[label="methodInvocation_lfno_primary\n CommonAhoCorasickSegmentUtil.segment(text,trie) "]
729103[label="typeName\n CommonAhoCorasickSegmentUtil "]
729104[label="argumentList\n text,trie "]
829105[label="expressionName\n text "]
829106[label="expressionName\n trie "]
029107[label="compilationUnit\n packagecom.hankcs.hanlp.seg.Other;importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie;importcom.hankcs.hanlp.dictionary.other.CharType;importcom.hankcs.hanlp.seg.common.ResultTerm;importjava.util.LinkedList;publicclassCommonAhoCorasickSegmentUtil{publicstatic<V>LinkedList<ResultTerm<V>>segment(Stringtext,AhoCorasickDoubleArrayTrie<V>trie){returnsegment(text.toCharArray(),trie);}publicstatic<V>LinkedList<ResultTerm<V>>segment(finalchar[]charArray,AhoCorasickDoubleArrayTrie<V>trie){LinkedList<ResultTerm<V>>termList=newLinkedList<ResultTerm<V>>();finalResultTerm<V>[]wordNet=newResultTerm[charArray.length];trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<V>(){@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[begin]==null||wordNet[begin].word.length()<end-begin){wordNet[begin]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}});for(inti=0;i<charArray.length;){if(wordNet[i]==null){StringBuildersbTerm=newStringBuilder();intoffset=i;while(i<charArray.length&&wordNet[i]==null){sbTerm.append(charArray[i]);++i;}termList.add(newResultTerm<V>(sbTerm.toString(),null,offset));}else{termList.add(wordNet[i]);i+=wordNet[i].word.length();}}returntermList;}publicstatic<V>LinkedList<ResultTerm<V>>segmentReverseOrder(Stringtext,AhoCorasickDoubleArrayTrie<V>trie){returnsegmentReverseOrder(text.toCharArray(),trie);}publicstatic<V>LinkedList<ResultTerm<V>>segmentReverseOrder(finalchar[]charArray,AhoCorasickDoubleArrayTrie<V>trie){LinkedList<ResultTerm<V>>termList=newLinkedList<ResultTerm<V>>();finalResultTerm<V>[]wordNet=newResultTerm[charArray.length+1];trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<V>(){@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[end]==null||wordNet[end].word.length()<end-begin){wordNet[end]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}});for(inti=charArray.length;i>0;){if(wordNet[i]==null){StringBuildersbTerm=newStringBuilder();intoffset=i-1;bytepreCharType=CharType.get(charArray[offset]);while(i>0&&wordNet[i]==null&&CharType.get(charArray[i-1])==preCharType){sbTerm.append(charArray[i-1]);preCharType=CharType.get(charArray[i-1]);--i;}termList.addFirst(newResultTerm<V>(sbTerm.reverse().toString(),null,offset));}else{termList.addFirst(wordNet[i]);i-=wordNet[i].word.length();}}returntermList;}}<EOF> "]
129108[label="packageDeclaration\n packagecom.hankcs.hanlp.seg.Other; "]
229109[label="packageName\n com.hankcs.hanlp.seg.Other "]
329110[label="packageName\n com.hankcs.hanlp.seg "]
429111[label="packageName\n com.hankcs.hanlp "]
529112[label="packageName\n com.hankcs "]
629113[label="packageName\n com "]
129114[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie; "]
229115[label="typeName\n com.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie "]
329116[label="packageOrTypeName\n com.hankcs.hanlp.collection.AhoCorasick "]
429117[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
529118[label="packageOrTypeName\n com.hankcs.hanlp "]
629119[label="packageOrTypeName\n com.hankcs "]
729120[label="packageOrTypeName\n com "]
129121[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dictionary.other.CharType; "]
229122[label="typeName\n com.hankcs.hanlp.dictionary.other.CharType "]
329123[label="packageOrTypeName\n com.hankcs.hanlp.dictionary.other "]
429124[label="packageOrTypeName\n com.hankcs.hanlp.dictionary "]
529125[label="packageOrTypeName\n com.hankcs.hanlp "]
629126[label="packageOrTypeName\n com.hankcs "]
729127[label="packageOrTypeName\n com "]
129128[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.common.ResultTerm; "]
229129[label="typeName\n com.hankcs.hanlp.seg.common.ResultTerm "]
329130[label="packageOrTypeName\n com.hankcs.hanlp.seg.common "]
429131[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
529132[label="packageOrTypeName\n com.hankcs.hanlp "]
629133[label="packageOrTypeName\n com.hankcs "]
729134[label="packageOrTypeName\n com "]
129135[label="singleTypeImportDeclaration\n importjava.util.LinkedList; "]
229136[label="typeName\n java.util.LinkedList "]
329137[label="packageOrTypeName\n java.util "]
429138[label="packageOrTypeName\n java "]
129139[label="normalClassDeclaration\n publicclassCommonAhoCorasickSegmentUtil{publicstatic<V>LinkedList<ResultTerm<V>>segment(Stringtext,AhoCorasickDoubleArrayTrie<V>trie){returnsegment(text.toCharArray(),trie);}publicstatic<V>LinkedList<ResultTerm<V>>segment(finalchar[]charArray,AhoCorasickDoubleArrayTrie<V>trie){LinkedList<ResultTerm<V>>termList=newLinkedList<ResultTerm<V>>();finalResultTerm<V>[]wordNet=newResultTerm[charArray.length];trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<V>(){@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[begin]==null||wordNet[begin].word.length()<end-begin){wordNet[begin]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}});for(inti=0;i<charArray.length;){if(wordNet[i]==null){StringBuildersbTerm=newStringBuilder();intoffset=i;while(i<charArray.length&&wordNet[i]==null){sbTerm.append(charArray[i]);++i;}termList.add(newResultTerm<V>(sbTerm.toString(),null,offset));}else{termList.add(wordNet[i]);i+=wordNet[i].word.length();}}returntermList;}publicstatic<V>LinkedList<ResultTerm<V>>segmentReverseOrder(Stringtext,AhoCorasickDoubleArrayTrie<V>trie){returnsegmentReverseOrder(text.toCharArray(),trie);}publicstatic<V>LinkedList<ResultTerm<V>>segmentReverseOrder(finalchar[]charArray,AhoCorasickDoubleArrayTrie<V>trie){LinkedList<ResultTerm<V>>termList=newLinkedList<ResultTerm<V>>();finalResultTerm<V>[]wordNet=newResultTerm[charArray.length+1];trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<V>(){@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[end]==null||wordNet[end].word.length()<end-begin){wordNet[end]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}});for(inti=charArray.length;i>0;){if(wordNet[i]==null){StringBuildersbTerm=newStringBuilder();intoffset=i-1;bytepreCharType=CharType.get(charArray[offset]);while(i>0&&wordNet[i]==null&&CharType.get(charArray[i-1])==preCharType){sbTerm.append(charArray[i-1]);preCharType=CharType.get(charArray[i-1]);--i;}termList.addFirst(newResultTerm<V>(sbTerm.reverse().toString(),null,offset));}else{termList.addFirst(wordNet[i]);i-=wordNet[i].word.length();}}returntermList;}} "]
229140[label="classModifier\n public "]
229141[label="classBody\n {publicstatic<V>LinkedList<ResultTerm<V>>segment(Stringtext,AhoCorasickDoubleArrayTrie<V>trie){returnsegment(text.toCharArray(),trie);}publicstatic<V>LinkedList<ResultTerm<V>>segment(finalchar[]charArray,AhoCorasickDoubleArrayTrie<V>trie){LinkedList<ResultTerm<V>>termList=newLinkedList<ResultTerm<V>>();finalResultTerm<V>[]wordNet=newResultTerm[charArray.length];trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<V>(){@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[begin]==null||wordNet[begin].word.length()<end-begin){wordNet[begin]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}});for(inti=0;i<charArray.length;){if(wordNet[i]==null){StringBuildersbTerm=newStringBuilder();intoffset=i;while(i<charArray.length&&wordNet[i]==null){sbTerm.append(charArray[i]);++i;}termList.add(newResultTerm<V>(sbTerm.toString(),null,offset));}else{termList.add(wordNet[i]);i+=wordNet[i].word.length();}}returntermList;}publicstatic<V>LinkedList<ResultTerm<V>>segmentReverseOrder(Stringtext,AhoCorasickDoubleArrayTrie<V>trie){returnsegmentReverseOrder(text.toCharArray(),trie);}publicstatic<V>LinkedList<ResultTerm<V>>segmentReverseOrder(finalchar[]charArray,AhoCorasickDoubleArrayTrie<V>trie){LinkedList<ResultTerm<V>>termList=newLinkedList<ResultTerm<V>>();finalResultTerm<V>[]wordNet=newResultTerm[charArray.length+1];trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<V>(){@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[end]==null||wordNet[end].word.length()<end-begin){wordNet[end]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}});for(inti=charArray.length;i>0;){if(wordNet[i]==null){StringBuildersbTerm=newStringBuilder();intoffset=i-1;bytepreCharType=CharType.get(charArray[offset]);while(i>0&&wordNet[i]==null&&CharType.get(charArray[i-1])==preCharType){sbTerm.append(charArray[i-1]);preCharType=CharType.get(charArray[i-1]);--i;}termList.addFirst(newResultTerm<V>(sbTerm.reverse().toString(),null,offset));}else{termList.addFirst(wordNet[i]);i-=wordNet[i].word.length();}}returntermList;}} "]
329142[label="methodDeclaration\n publicstatic<V>LinkedList<ResultTerm<V>>segment(Stringtext,AhoCorasickDoubleArrayTrie<V>trie){returnsegment(text.toCharArray(),trie);} "]
429143[label="methodModifier\n public "]
429144[label="methodModifier\n static "]
429145[label="methodHeader\n <V>LinkedList<ResultTerm<V>>segment(Stringtext,AhoCorasickDoubleArrayTrie<V>trie) "]
529146[label="typeParameters\n <V> "]
629147[label="typeParameter\n V "]
529148[label="unannClassType_lfno_unannClassOrInterfaceType\n LinkedList<ResultTerm<V>> "]
629149[label="typeArguments\n <ResultTerm<V>> "]
729150[label="classType_lfno_classOrInterfaceType\n ResultTerm<V> "]
829151[label="typeArguments\n <V> "]
929152[label="classType_lfno_classOrInterfaceType\n V "]
529153[label="methodDeclarator\n segment(Stringtext,AhoCorasickDoubleArrayTrie<V>trie) "]
629154[label="formalParameterList\n Stringtext,AhoCorasickDoubleArrayTrie<V>trie "]
729155[label="formalParameter\n Stringtext "]
829156[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
829157[label="variableDeclaratorId\n text "]
729158[label="formalParameter\n AhoCorasickDoubleArrayTrie<V>trie "]
829159[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<V> "]
929160[label="typeArguments\n <V> "]
1029161[label="classType_lfno_classOrInterfaceType\n V "]
829162[label="variableDeclaratorId\n trie "]
429163[label="block\n {returnsegment(text.toCharArray(),trie);} "]
529164[label="returnStatement\n returnsegment(text.toCharArray(),trie); "]
629165[label="methodInvocation_lfno_primary\n segment(text.toCharArray(),trie) "]
729166[label="methodName\n segment "]
729167[label="argumentList\n text.toCharArray(),trie "]
829168[label="methodInvocation_lfno_primary\n text.toCharArray() "]
929169[label="typeName\n text "]
829170[label="expressionName\n trie "]
329171[label="methodDeclaration\n publicstatic<V>LinkedList<ResultTerm<V>>segment(finalchar[]charArray,AhoCorasickDoubleArrayTrie<V>trie){LinkedList<ResultTerm<V>>termList=newLinkedList<ResultTerm<V>>();finalResultTerm<V>[]wordNet=newResultTerm[charArray.length];trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<V>(){@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[begin]==null||wordNet[begin].word.length()<end-begin){wordNet[begin]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}});for(inti=0;i<charArray.length;){if(wordNet[i]==null){StringBuildersbTerm=newStringBuilder();intoffset=i;while(i<charArray.length&&wordNet[i]==null){sbTerm.append(charArray[i]);++i;}termList.add(newResultTerm<V>(sbTerm.toString(),null,offset));}else{termList.add(wordNet[i]);i+=wordNet[i].word.length();}}returntermList;} "]
429172[label="methodModifier\n public "]
429173[label="methodModifier\n static "]
429174[label="methodHeader\n <V>LinkedList<ResultTerm<V>>segment(finalchar[]charArray,AhoCorasickDoubleArrayTrie<V>trie) "]
529175[label="typeParameters\n <V> "]
629176[label="typeParameter\n V "]
529177[label="unannClassType_lfno_unannClassOrInterfaceType\n LinkedList<ResultTerm<V>> "]
629178[label="typeArguments\n <ResultTerm<V>> "]
729179[label="classType_lfno_classOrInterfaceType\n ResultTerm<V> "]
829180[label="typeArguments\n <V> "]
929181[label="classType_lfno_classOrInterfaceType\n V "]
529182[label="methodDeclarator\n segment(finalchar[]charArray,AhoCorasickDoubleArrayTrie<V>trie) "]
629183[label="formalParameterList\n finalchar[]charArray,AhoCorasickDoubleArrayTrie<V>trie "]
729184[label="formalParameter\n finalchar[]charArray "]
829185[label="variableModifier\n final "]
829186[label="unannArrayType\n char[] "]
929187[label="integralType\n char "]
929188[label="dims\n [] "]
829189[label="variableDeclaratorId\n charArray "]
729190[label="formalParameter\n AhoCorasickDoubleArrayTrie<V>trie "]
829191[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<V> "]
929192[label="typeArguments\n <V> "]
1029193[label="classType_lfno_classOrInterfaceType\n V "]
829194[label="variableDeclaratorId\n trie "]
429195[label="block\n {LinkedList<ResultTerm<V>>termList=newLinkedList<ResultTerm<V>>();finalResultTerm<V>[]wordNet=newResultTerm[charArray.length];trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<V>(){@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[begin]==null||wordNet[begin].word.length()<end-begin){wordNet[begin]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}});for(inti=0;i<charArray.length;){if(wordNet[i]==null){StringBuildersbTerm=newStringBuilder();intoffset=i;while(i<charArray.length&&wordNet[i]==null){sbTerm.append(charArray[i]);++i;}termList.add(newResultTerm<V>(sbTerm.toString(),null,offset));}else{termList.add(wordNet[i]);i+=wordNet[i].word.length();}}returntermList;} "]
529196[label="blockStatements\n LinkedList<ResultTerm<V>>termList=newLinkedList<ResultTerm<V>>();finalResultTerm<V>[]wordNet=newResultTerm[charArray.length];trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<V>(){@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[begin]==null||wordNet[begin].word.length()<end-begin){wordNet[begin]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}});for(inti=0;i<charArray.length;){if(wordNet[i]==null){StringBuildersbTerm=newStringBuilder();intoffset=i;while(i<charArray.length&&wordNet[i]==null){sbTerm.append(charArray[i]);++i;}termList.add(newResultTerm<V>(sbTerm.toString(),null,offset));}else{termList.add(wordNet[i]);i+=wordNet[i].word.length();}}returntermList; "]
629197[label="localVariableDeclarationStatement\n LinkedList<ResultTerm<V>>termList=newLinkedList<ResultTerm<V>>(); "]
729198[label="localVariableDeclaration\n LinkedList<ResultTerm<V>>termList=newLinkedList<ResultTerm<V>>() "]
829199[label="unannClassType_lfno_unannClassOrInterfaceType\n LinkedList<ResultTerm<V>> "]
929200[label="typeArguments\n <ResultTerm<V>> "]
1029201[label="classType_lfno_classOrInterfaceType\n ResultTerm<V> "]
1129202[label="typeArguments\n <V> "]
1229203[label="classType_lfno_classOrInterfaceType\n V "]
829204[label="variableDeclarator\n termList=newLinkedList<ResultTerm<V>>() "]
929205[label="variableDeclaratorId\n termList "]
929206[label="classInstanceCreationExpression_lfno_primary\n newLinkedList<ResultTerm<V>>() "]
1029207[label="typeArguments\n <ResultTerm<V>> "]
1129208[label="classType_lfno_classOrInterfaceType\n ResultTerm<V> "]
1229209[label="typeArguments\n <V> "]
1329210[label="classType_lfno_classOrInterfaceType\n V "]
629211[label="localVariableDeclarationStatement\n finalResultTerm<V>[]wordNet=newResultTerm[charArray.length]; "]
729212[label="localVariableDeclaration\n finalResultTerm<V>[]wordNet=newResultTerm[charArray.length] "]
829213[label="variableModifier\n final "]
829214[label="unannArrayType\n ResultTerm<V>[] "]
929215[label="unannClassType_lfno_unannClassOrInterfaceType\n ResultTerm<V> "]
1029216[label="typeArguments\n <V> "]
1129217[label="classType_lfno_classOrInterfaceType\n V "]
929218[label="dims\n [] "]
829219[label="variableDeclarator\n wordNet=newResultTerm[charArray.length] "]
929220[label="variableDeclaratorId\n wordNet "]
929221[label="arrayCreationExpression\n newResultTerm[charArray.length] "]
1029222[label="classType_lfno_classOrInterfaceType\n ResultTerm "]
1029223[label="dimExpr\n [charArray.length] "]
1129224[label="expressionName\n charArray.length "]
1229225[label="ambiguousName\n charArray "]
629226[label="expressionStatement\n trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<V>(){@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[begin]==null||wordNet[begin].word.length()<end-begin){wordNet[begin]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}}); "]
729227[label="methodInvocation\n trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<V>(){@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[begin]==null||wordNet[begin].word.length()<end-begin){wordNet[begin]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}}) "]
829228[label="typeName\n trie "]
829229[label="argumentList\n charArray,newAhoCorasickDoubleArrayTrie.IHit<V>(){@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[begin]==null||wordNet[begin].word.length()<end-begin){wordNet[begin]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}} "]
929230[label="expressionName\n charArray "]
929231[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie.IHit<V>(){@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[begin]==null||wordNet[begin].word.length()<end-begin){wordNet[begin]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}} "]
1029232[label="typeArguments\n <V> "]
1129233[label="classType_lfno_classOrInterfaceType\n V "]
1029234[label="classBody\n {@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[begin]==null||wordNet[begin].word.length()<end-begin){wordNet[begin]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}} "]
1129235[label="methodDeclaration\n @Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[begin]==null||wordNet[begin].word.length()<end-begin){wordNet[begin]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}} "]
1229236[label="markerAnnotation\n @Override "]
1329237[label="typeName\n Override "]
1229238[label="methodModifier\n public "]
1229239[label="methodHeader\n voidhit(intbegin,intend,Vvalue) "]
1329240[label="result\n void "]
1329241[label="methodDeclarator\n hit(intbegin,intend,Vvalue) "]
1429242[label="formalParameterList\n intbegin,intend,Vvalue "]
1529243[label="formalParameters\n intbegin,intend "]
1629244[label="formalParameter\n intbegin "]
1729245[label="integralType\n int "]
1729246[label="variableDeclaratorId\n begin "]
1629247[label="formalParameter\n intend "]
1729248[label="integralType\n int "]
1729249[label="variableDeclaratorId\n end "]
1529250[label="formalParameter\n Vvalue "]
1629251[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
1629252[label="variableDeclaratorId\n value "]
1229253[label="block\n {if(wordNet[begin]==null||wordNet[begin].word.length()<end-begin){wordNet[begin]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}} "]
1329254[label="ifThenStatement\n if(wordNet[begin]==null||wordNet[begin].word.length()<end-begin){wordNet[begin]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);} "]
1429255[label="conditionalOrExpression\n wordNet[begin]==null||wordNet[begin].word.length()<end-begin "]
1529256[label="equalityExpression\n wordNet[begin]==null "]
1629257[label="arrayAccess_lfno_primary\n wordNet[begin] "]
1729258[label="expressionName\n wordNet "]
1729259[label="expressionName\n begin "]
1629260[label="literal\n null "]
1529261[label="relationalExpression\n wordNet[begin].word.length()<end-begin "]
1629262[label="primary\n wordNet[begin].word.length() "]
1729263[label="arrayAccess_lfno_primary\n wordNet[begin] "]
1829264[label="expressionName\n wordNet "]
1829265[label="expressionName\n begin "]
1729266[label="fieldAccess_lf_primary\n .word "]
1729267[label="methodInvocation_lf_primary\n .length() "]
1629268[label="additiveExpression\n end-begin "]
1729269[label="expressionName\n end "]
1729270[label="expressionName\n begin "]
1429271[label="block\n {wordNet[begin]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);} "]
1529272[label="expressionStatement\n wordNet[begin]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin); "]
1629273[label="assignment\n wordNet[begin]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin) "]
1729274[label="arrayAccess\n wordNet[begin] "]
1829275[label="expressionName\n wordNet "]
1829276[label="expressionName\n begin "]
1729277[label="assignmentOperator\n = "]
1729278[label="classInstanceCreationExpression_lfno_primary\n newResultTerm<V>(newString(charArray,begin,end-begin),value,begin) "]
1829279[label="typeArguments\n <V> "]
1929280[label="classType_lfno_classOrInterfaceType\n V "]
1829281[label="argumentList\n newString(charArray,begin,end-begin),value,begin "]
1929282[label="classInstanceCreationExpression_lfno_primary\n newString(charArray,begin,end-begin) "]
2029283[label="argumentList\n charArray,begin,end-begin "]
2129284[label="expressionName\n charArray "]
2129285[label="expressionName\n begin "]
2129286[label="additiveExpression\n end-begin "]
2229287[label="expressionName\n end "]
2229288[label="expressionName\n begin "]
1929289[label="expressionName\n value "]
1929290[label="expressionName\n begin "]
629291[label="basicForStatement\n for(inti=0;i<charArray.length;){if(wordNet[i]==null){StringBuildersbTerm=newStringBuilder();intoffset=i;while(i<charArray.length&&wordNet[i]==null){sbTerm.append(charArray[i]);++i;}termList.add(newResultTerm<V>(sbTerm.toString(),null,offset));}else{termList.add(wordNet[i]);i+=wordNet[i].word.length();}} "]
729292[label="localVariableDeclaration\n inti=0 "]
829293[label="integralType\n int "]
829294[label="variableDeclarator\n i=0 "]
929295[label="variableDeclaratorId\n i "]
929296[label="literal\n 0 "]
729297[label="relationalExpression\n i<charArray.length "]
829298[label="expressionName\n i "]
829299[label="expressionName\n charArray.length "]
929300[label="ambiguousName\n charArray "]
729301[label="block\n {if(wordNet[i]==null){StringBuildersbTerm=newStringBuilder();intoffset=i;while(i<charArray.length&&wordNet[i]==null){sbTerm.append(charArray[i]);++i;}termList.add(newResultTerm<V>(sbTerm.toString(),null,offset));}else{termList.add(wordNet[i]);i+=wordNet[i].word.length();}} "]
829302[label="ifThenElseStatement\n if(wordNet[i]==null){StringBuildersbTerm=newStringBuilder();intoffset=i;while(i<charArray.length&&wordNet[i]==null){sbTerm.append(charArray[i]);++i;}termList.add(newResultTerm<V>(sbTerm.toString(),null,offset));}else{termList.add(wordNet[i]);i+=wordNet[i].word.length();} "]
929303[label="equalityExpression\n wordNet[i]==null "]
1029304[label="arrayAccess_lfno_primary\n wordNet[i] "]
1129305[label="expressionName\n wordNet "]
1129306[label="expressionName\n i "]
1029307[label="literal\n null "]
929308[label="block\n {StringBuildersbTerm=newStringBuilder();intoffset=i;while(i<charArray.length&&wordNet[i]==null){sbTerm.append(charArray[i]);++i;}termList.add(newResultTerm<V>(sbTerm.toString(),null,offset));} "]
1029309[label="blockStatements\n StringBuildersbTerm=newStringBuilder();intoffset=i;while(i<charArray.length&&wordNet[i]==null){sbTerm.append(charArray[i]);++i;}termList.add(newResultTerm<V>(sbTerm.toString(),null,offset)); "]
1129310[label="localVariableDeclarationStatement\n StringBuildersbTerm=newStringBuilder(); "]
1229311[label="localVariableDeclaration\n StringBuildersbTerm=newStringBuilder() "]
1329312[label="unannClassType_lfno_unannClassOrInterfaceType\n StringBuilder "]
1329313[label="variableDeclarator\n sbTerm=newStringBuilder() "]
1429314[label="variableDeclaratorId\n sbTerm "]
1429315[label="classInstanceCreationExpression_lfno_primary\n newStringBuilder() "]
1129316[label="localVariableDeclarationStatement\n intoffset=i; "]
1229317[label="localVariableDeclaration\n intoffset=i "]
1329318[label="integralType\n int "]
1329319[label="variableDeclarator\n offset=i "]
1429320[label="variableDeclaratorId\n offset "]
1429321[label="expressionName\n i "]
1129322[label="whileStatement\n while(i<charArray.length&&wordNet[i]==null){sbTerm.append(charArray[i]);++i;} "]
1229323[label="conditionalAndExpression\n i<charArray.length&&wordNet[i]==null "]
1329324[label="relationalExpression\n i<charArray.length "]
1429325[label="expressionName\n i "]
1429326[label="expressionName\n charArray.length "]
1529327[label="ambiguousName\n charArray "]
1329328[label="equalityExpression\n wordNet[i]==null "]
1429329[label="arrayAccess_lfno_primary\n wordNet[i] "]
1529330[label="expressionName\n wordNet "]
1529331[label="expressionName\n i "]
1429332[label="literal\n null "]
1229333[label="block\n {sbTerm.append(charArray[i]);++i;} "]
1329334[label="blockStatements\n sbTerm.append(charArray[i]);++i; "]
1429335[label="expressionStatement\n sbTerm.append(charArray[i]); "]
1529336[label="methodInvocation\n sbTerm.append(charArray[i]) "]
1629337[label="typeName\n sbTerm "]
1629338[label="arrayAccess_lfno_primary\n charArray[i] "]
1729339[label="expressionName\n charArray "]
1729340[label="expressionName\n i "]
1429341[label="expressionStatement\n ++i; "]
1529342[label="preIncrementExpression\n ++i "]
1629343[label="expressionName\n i "]
1129344[label="expressionStatement\n termList.add(newResultTerm<V>(sbTerm.toString(),null,offset)); "]
1229345[label="methodInvocation\n termList.add(newResultTerm<V>(sbTerm.toString(),null,offset)) "]
1329346[label="typeName\n termList "]
1329347[label="classInstanceCreationExpression_lfno_primary\n newResultTerm<V>(sbTerm.toString(),null,offset) "]
1429348[label="typeArguments\n <V> "]
1529349[label="classType_lfno_classOrInterfaceType\n V "]
1429350[label="argumentList\n sbTerm.toString(),null,offset "]
1529351[label="methodInvocation_lfno_primary\n sbTerm.toString() "]
1629352[label="typeName\n sbTerm "]
1529353[label="literal\n null "]
1529354[label="expressionName\n offset "]
929355[label="block\n {termList.add(wordNet[i]);i+=wordNet[i].word.length();} "]
1029356[label="blockStatements\n termList.add(wordNet[i]);i+=wordNet[i].word.length(); "]
1129357[label="expressionStatement\n termList.add(wordNet[i]); "]
1229358[label="methodInvocation\n termList.add(wordNet[i]) "]
1329359[label="typeName\n termList "]
1329360[label="arrayAccess_lfno_primary\n wordNet[i] "]
1429361[label="expressionName\n wordNet "]
1429362[label="expressionName\n i "]
1129363[label="expressionStatement\n i+=wordNet[i].word.length(); "]
1229364[label="assignment\n i+=wordNet[i].word.length() "]
1329365[label="expressionName\n i "]
1329366[label="assignmentOperator\n += "]
1329367[label="primary\n wordNet[i].word.length() "]
1429368[label="arrayAccess_lfno_primary\n wordNet[i] "]
1529369[label="expressionName\n wordNet "]
1529370[label="expressionName\n i "]
1429371[label="fieldAccess_lf_primary\n .word "]
1429372[label="methodInvocation_lf_primary\n .length() "]
629373[label="returnStatement\n returntermList; "]
729374[label="expressionName\n termList "]
329375[label="methodDeclaration\n publicstatic<V>LinkedList<ResultTerm<V>>segmentReverseOrder(Stringtext,AhoCorasickDoubleArrayTrie<V>trie){returnsegmentReverseOrder(text.toCharArray(),trie);} "]
429376[label="methodModifier\n public "]
429377[label="methodModifier\n static "]
429378[label="methodHeader\n <V>LinkedList<ResultTerm<V>>segmentReverseOrder(Stringtext,AhoCorasickDoubleArrayTrie<V>trie) "]
529379[label="typeParameters\n <V> "]
629380[label="typeParameter\n V "]
529381[label="unannClassType_lfno_unannClassOrInterfaceType\n LinkedList<ResultTerm<V>> "]
629382[label="typeArguments\n <ResultTerm<V>> "]
729383[label="classType_lfno_classOrInterfaceType\n ResultTerm<V> "]
829384[label="typeArguments\n <V> "]
929385[label="classType_lfno_classOrInterfaceType\n V "]
529386[label="methodDeclarator\n segmentReverseOrder(Stringtext,AhoCorasickDoubleArrayTrie<V>trie) "]
629387[label="formalParameterList\n Stringtext,AhoCorasickDoubleArrayTrie<V>trie "]
729388[label="formalParameter\n Stringtext "]
829389[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
829390[label="variableDeclaratorId\n text "]
729391[label="formalParameter\n AhoCorasickDoubleArrayTrie<V>trie "]
829392[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<V> "]
929393[label="typeArguments\n <V> "]
1029394[label="classType_lfno_classOrInterfaceType\n V "]
829395[label="variableDeclaratorId\n trie "]
429396[label="block\n {returnsegmentReverseOrder(text.toCharArray(),trie);} "]
529397[label="returnStatement\n returnsegmentReverseOrder(text.toCharArray(),trie); "]
629398[label="methodInvocation_lfno_primary\n segmentReverseOrder(text.toCharArray(),trie) "]
729399[label="methodName\n segmentReverseOrder "]
729400[label="argumentList\n text.toCharArray(),trie "]
829401[label="methodInvocation_lfno_primary\n text.toCharArray() "]
929402[label="typeName\n text "]
829403[label="expressionName\n trie "]
329404[label="methodDeclaration\n publicstatic<V>LinkedList<ResultTerm<V>>segmentReverseOrder(finalchar[]charArray,AhoCorasickDoubleArrayTrie<V>trie){LinkedList<ResultTerm<V>>termList=newLinkedList<ResultTerm<V>>();finalResultTerm<V>[]wordNet=newResultTerm[charArray.length+1];trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<V>(){@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[end]==null||wordNet[end].word.length()<end-begin){wordNet[end]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}});for(inti=charArray.length;i>0;){if(wordNet[i]==null){StringBuildersbTerm=newStringBuilder();intoffset=i-1;bytepreCharType=CharType.get(charArray[offset]);while(i>0&&wordNet[i]==null&&CharType.get(charArray[i-1])==preCharType){sbTerm.append(charArray[i-1]);preCharType=CharType.get(charArray[i-1]);--i;}termList.addFirst(newResultTerm<V>(sbTerm.reverse().toString(),null,offset));}else{termList.addFirst(wordNet[i]);i-=wordNet[i].word.length();}}returntermList;} "]
429405[label="methodModifier\n public "]
429406[label="methodModifier\n static "]
429407[label="methodHeader\n <V>LinkedList<ResultTerm<V>>segmentReverseOrder(finalchar[]charArray,AhoCorasickDoubleArrayTrie<V>trie) "]
529408[label="typeParameters\n <V> "]
629409[label="typeParameter\n V "]
529410[label="unannClassType_lfno_unannClassOrInterfaceType\n LinkedList<ResultTerm<V>> "]
629411[label="typeArguments\n <ResultTerm<V>> "]
729412[label="classType_lfno_classOrInterfaceType\n ResultTerm<V> "]
829413[label="typeArguments\n <V> "]
929414[label="classType_lfno_classOrInterfaceType\n V "]
529415[label="methodDeclarator\n segmentReverseOrder(finalchar[]charArray,AhoCorasickDoubleArrayTrie<V>trie) "]
629416[label="formalParameterList\n finalchar[]charArray,AhoCorasickDoubleArrayTrie<V>trie "]
729417[label="formalParameter\n finalchar[]charArray "]
829418[label="variableModifier\n final "]
829419[label="unannArrayType\n char[] "]
929420[label="integralType\n char "]
929421[label="dims\n [] "]
829422[label="variableDeclaratorId\n charArray "]
729423[label="formalParameter\n AhoCorasickDoubleArrayTrie<V>trie "]
829424[label="unannClassType_lfno_unannClassOrInterfaceType\n AhoCorasickDoubleArrayTrie<V> "]
929425[label="typeArguments\n <V> "]
1029426[label="classType_lfno_classOrInterfaceType\n V "]
829427[label="variableDeclaratorId\n trie "]
429428[label="block\n {LinkedList<ResultTerm<V>>termList=newLinkedList<ResultTerm<V>>();finalResultTerm<V>[]wordNet=newResultTerm[charArray.length+1];trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<V>(){@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[end]==null||wordNet[end].word.length()<end-begin){wordNet[end]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}});for(inti=charArray.length;i>0;){if(wordNet[i]==null){StringBuildersbTerm=newStringBuilder();intoffset=i-1;bytepreCharType=CharType.get(charArray[offset]);while(i>0&&wordNet[i]==null&&CharType.get(charArray[i-1])==preCharType){sbTerm.append(charArray[i-1]);preCharType=CharType.get(charArray[i-1]);--i;}termList.addFirst(newResultTerm<V>(sbTerm.reverse().toString(),null,offset));}else{termList.addFirst(wordNet[i]);i-=wordNet[i].word.length();}}returntermList;} "]
529429[label="blockStatements\n LinkedList<ResultTerm<V>>termList=newLinkedList<ResultTerm<V>>();finalResultTerm<V>[]wordNet=newResultTerm[charArray.length+1];trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<V>(){@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[end]==null||wordNet[end].word.length()<end-begin){wordNet[end]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}});for(inti=charArray.length;i>0;){if(wordNet[i]==null){StringBuildersbTerm=newStringBuilder();intoffset=i-1;bytepreCharType=CharType.get(charArray[offset]);while(i>0&&wordNet[i]==null&&CharType.get(charArray[i-1])==preCharType){sbTerm.append(charArray[i-1]);preCharType=CharType.get(charArray[i-1]);--i;}termList.addFirst(newResultTerm<V>(sbTerm.reverse().toString(),null,offset));}else{termList.addFirst(wordNet[i]);i-=wordNet[i].word.length();}}returntermList; "]
629430[label="localVariableDeclarationStatement\n LinkedList<ResultTerm<V>>termList=newLinkedList<ResultTerm<V>>(); "]
729431[label="localVariableDeclaration\n LinkedList<ResultTerm<V>>termList=newLinkedList<ResultTerm<V>>() "]
829432[label="unannClassType_lfno_unannClassOrInterfaceType\n LinkedList<ResultTerm<V>> "]
929433[label="typeArguments\n <ResultTerm<V>> "]
1029434[label="classType_lfno_classOrInterfaceType\n ResultTerm<V> "]
1129435[label="typeArguments\n <V> "]
1229436[label="classType_lfno_classOrInterfaceType\n V "]
829437[label="variableDeclarator\n termList=newLinkedList<ResultTerm<V>>() "]
929438[label="variableDeclaratorId\n termList "]
929439[label="classInstanceCreationExpression_lfno_primary\n newLinkedList<ResultTerm<V>>() "]
1029440[label="typeArguments\n <ResultTerm<V>> "]
1129441[label="classType_lfno_classOrInterfaceType\n ResultTerm<V> "]
1229442[label="typeArguments\n <V> "]
1329443[label="classType_lfno_classOrInterfaceType\n V "]
629444[label="localVariableDeclarationStatement\n finalResultTerm<V>[]wordNet=newResultTerm[charArray.length+1]; "]
729445[label="localVariableDeclaration\n finalResultTerm<V>[]wordNet=newResultTerm[charArray.length+1] "]
829446[label="variableModifier\n final "]
829447[label="unannArrayType\n ResultTerm<V>[] "]
929448[label="unannClassType_lfno_unannClassOrInterfaceType\n ResultTerm<V> "]
1029449[label="typeArguments\n <V> "]
1129450[label="classType_lfno_classOrInterfaceType\n V "]
929451[label="dims\n [] "]
829452[label="variableDeclarator\n wordNet=newResultTerm[charArray.length+1] "]
929453[label="variableDeclaratorId\n wordNet "]
929454[label="arrayCreationExpression\n newResultTerm[charArray.length+1] "]
1029455[label="classType_lfno_classOrInterfaceType\n ResultTerm "]
1029456[label="dimExpr\n [charArray.length+1] "]
1129457[label="additiveExpression\n charArray.length+1 "]
1229458[label="expressionName\n charArray.length "]
1329459[label="ambiguousName\n charArray "]
1229460[label="literal\n 1 "]
629461[label="expressionStatement\n trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<V>(){@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[end]==null||wordNet[end].word.length()<end-begin){wordNet[end]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}}); "]
729462[label="methodInvocation\n trie.parseText(charArray,newAhoCorasickDoubleArrayTrie.IHit<V>(){@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[end]==null||wordNet[end].word.length()<end-begin){wordNet[end]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}}) "]
829463[label="typeName\n trie "]
829464[label="argumentList\n charArray,newAhoCorasickDoubleArrayTrie.IHit<V>(){@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[end]==null||wordNet[end].word.length()<end-begin){wordNet[end]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}} "]
929465[label="expressionName\n charArray "]
929466[label="classInstanceCreationExpression_lfno_primary\n newAhoCorasickDoubleArrayTrie.IHit<V>(){@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[end]==null||wordNet[end].word.length()<end-begin){wordNet[end]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}} "]
1029467[label="typeArguments\n <V> "]
1129468[label="classType_lfno_classOrInterfaceType\n V "]
1029469[label="classBody\n {@Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[end]==null||wordNet[end].word.length()<end-begin){wordNet[end]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}}} "]
1129470[label="methodDeclaration\n @Overridepublicvoidhit(intbegin,intend,Vvalue){if(wordNet[end]==null||wordNet[end].word.length()<end-begin){wordNet[end]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}} "]
1229471[label="markerAnnotation\n @Override "]
1329472[label="typeName\n Override "]
1229473[label="methodModifier\n public "]
1229474[label="methodHeader\n voidhit(intbegin,intend,Vvalue) "]
1329475[label="result\n void "]
1329476[label="methodDeclarator\n hit(intbegin,intend,Vvalue) "]
1429477[label="formalParameterList\n intbegin,intend,Vvalue "]
1529478[label="formalParameters\n intbegin,intend "]
1629479[label="formalParameter\n intbegin "]
1729480[label="integralType\n int "]
1729481[label="variableDeclaratorId\n begin "]
1629482[label="formalParameter\n intend "]
1729483[label="integralType\n int "]
1729484[label="variableDeclaratorId\n end "]
1529485[label="formalParameter\n Vvalue "]
1629486[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
1629487[label="variableDeclaratorId\n value "]
1229488[label="block\n {if(wordNet[end]==null||wordNet[end].word.length()<end-begin){wordNet[end]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);}} "]
1329489[label="ifThenStatement\n if(wordNet[end]==null||wordNet[end].word.length()<end-begin){wordNet[end]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);} "]
1429490[label="conditionalOrExpression\n wordNet[end]==null||wordNet[end].word.length()<end-begin "]
1529491[label="equalityExpression\n wordNet[end]==null "]
1629492[label="arrayAccess_lfno_primary\n wordNet[end] "]
1729493[label="expressionName\n wordNet "]
1729494[label="expressionName\n end "]
1629495[label="literal\n null "]
1529496[label="relationalExpression\n wordNet[end].word.length()<end-begin "]
1629497[label="primary\n wordNet[end].word.length() "]
1729498[label="arrayAccess_lfno_primary\n wordNet[end] "]
1829499[label="expressionName\n wordNet "]
1829500[label="expressionName\n end "]
1729501[label="fieldAccess_lf_primary\n .word "]
1729502[label="methodInvocation_lf_primary\n .length() "]
1629503[label="additiveExpression\n end-begin "]
1729504[label="expressionName\n end "]
1729505[label="expressionName\n begin "]
1429506[label="block\n {wordNet[end]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin);} "]
1529507[label="expressionStatement\n wordNet[end]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin); "]
1629508[label="assignment\n wordNet[end]=newResultTerm<V>(newString(charArray,begin,end-begin),value,begin) "]
1729509[label="arrayAccess\n wordNet[end] "]
1829510[label="expressionName\n wordNet "]
1829511[label="expressionName\n end "]
1729512[label="assignmentOperator\n = "]
1729513[label="classInstanceCreationExpression_lfno_primary\n newResultTerm<V>(newString(charArray,begin,end-begin),value,begin) "]
1829514[label="typeArguments\n <V> "]
1929515[label="classType_lfno_classOrInterfaceType\n V "]
1829516[label="argumentList\n newString(charArray,begin,end-begin),value,begin "]
1929517[label="classInstanceCreationExpression_lfno_primary\n newString(charArray,begin,end-begin) "]
2029518[label="argumentList\n charArray,begin,end-begin "]
2129519[label="expressionName\n charArray "]
2129520[label="expressionName\n begin "]
2129521[label="additiveExpression\n end-begin "]
2229522[label="expressionName\n end "]
2229523[label="expressionName\n begin "]
1929524[label="expressionName\n value "]
1929525[label="expressionName\n begin "]
629526[label="basicForStatement\n for(inti=charArray.length;i>0;){if(wordNet[i]==null){StringBuildersbTerm=newStringBuilder();intoffset=i-1;bytepreCharType=CharType.get(charArray[offset]);while(i>0&&wordNet[i]==null&&CharType.get(charArray[i-1])==preCharType){sbTerm.append(charArray[i-1]);preCharType=CharType.get(charArray[i-1]);--i;}termList.addFirst(newResultTerm<V>(sbTerm.reverse().toString(),null,offset));}else{termList.addFirst(wordNet[i]);i-=wordNet[i].word.length();}} "]
729527[label="localVariableDeclaration\n inti=charArray.length "]
829528[label="integralType\n int "]
829529[label="variableDeclarator\n i=charArray.length "]
929530[label="variableDeclaratorId\n i "]
929531[label="expressionName\n charArray.length "]
1029532[label="ambiguousName\n charArray "]
729533[label="relationalExpression\n i>0 "]
829534[label="expressionName\n i "]
829535[label="literal\n 0 "]
729536[label="block\n {if(wordNet[i]==null){StringBuildersbTerm=newStringBuilder();intoffset=i-1;bytepreCharType=CharType.get(charArray[offset]);while(i>0&&wordNet[i]==null&&CharType.get(charArray[i-1])==preCharType){sbTerm.append(charArray[i-1]);preCharType=CharType.get(charArray[i-1]);--i;}termList.addFirst(newResultTerm<V>(sbTerm.reverse().toString(),null,offset));}else{termList.addFirst(wordNet[i]);i-=wordNet[i].word.length();}} "]
829537[label="ifThenElseStatement\n if(wordNet[i]==null){StringBuildersbTerm=newStringBuilder();intoffset=i-1;bytepreCharType=CharType.get(charArray[offset]);while(i>0&&wordNet[i]==null&&CharType.get(charArray[i-1])==preCharType){sbTerm.append(charArray[i-1]);preCharType=CharType.get(charArray[i-1]);--i;}termList.addFirst(newResultTerm<V>(sbTerm.reverse().toString(),null,offset));}else{termList.addFirst(wordNet[i]);i-=wordNet[i].word.length();} "]
929538[label="equalityExpression\n wordNet[i]==null "]
1029539[label="arrayAccess_lfno_primary\n wordNet[i] "]
1129540[label="expressionName\n wordNet "]
1129541[label="expressionName\n i "]
1029542[label="literal\n null "]
929543[label="block\n {StringBuildersbTerm=newStringBuilder();intoffset=i-1;bytepreCharType=CharType.get(charArray[offset]);while(i>0&&wordNet[i]==null&&CharType.get(charArray[i-1])==preCharType){sbTerm.append(charArray[i-1]);preCharType=CharType.get(charArray[i-1]);--i;}termList.addFirst(newResultTerm<V>(sbTerm.reverse().toString(),null,offset));} "]
1029544[label="blockStatements\n StringBuildersbTerm=newStringBuilder();intoffset=i-1;bytepreCharType=CharType.get(charArray[offset]);while(i>0&&wordNet[i]==null&&CharType.get(charArray[i-1])==preCharType){sbTerm.append(charArray[i-1]);preCharType=CharType.get(charArray[i-1]);--i;}termList.addFirst(newResultTerm<V>(sbTerm.reverse().toString(),null,offset)); "]
1129545[label="localVariableDeclarationStatement\n StringBuildersbTerm=newStringBuilder(); "]
1229546[label="localVariableDeclaration\n StringBuildersbTerm=newStringBuilder() "]
1329547[label="unannClassType_lfno_unannClassOrInterfaceType\n StringBuilder "]
1329548[label="variableDeclarator\n sbTerm=newStringBuilder() "]
1429549[label="variableDeclaratorId\n sbTerm "]
1429550[label="classInstanceCreationExpression_lfno_primary\n newStringBuilder() "]
1129551[label="localVariableDeclarationStatement\n intoffset=i-1; "]
1229552[label="localVariableDeclaration\n intoffset=i-1 "]
1329553[label="integralType\n int "]
1329554[label="variableDeclarator\n offset=i-1 "]
1429555[label="variableDeclaratorId\n offset "]
1429556[label="additiveExpression\n i-1 "]
1529557[label="expressionName\n i "]
1529558[label="literal\n 1 "]
1129559[label="localVariableDeclarationStatement\n bytepreCharType=CharType.get(charArray[offset]); "]
1229560[label="localVariableDeclaration\n bytepreCharType=CharType.get(charArray[offset]) "]
1329561[label="integralType\n byte "]
1329562[label="variableDeclarator\n preCharType=CharType.get(charArray[offset]) "]
1429563[label="variableDeclaratorId\n preCharType "]
1429564[label="methodInvocation_lfno_primary\n CharType.get(charArray[offset]) "]
1529565[label="typeName\n CharType "]
1529566[label="arrayAccess_lfno_primary\n charArray[offset] "]
1629567[label="expressionName\n charArray "]
1629568[label="expressionName\n offset "]
1129569[label="whileStatement\n while(i>0&&wordNet[i]==null&&CharType.get(charArray[i-1])==preCharType){sbTerm.append(charArray[i-1]);preCharType=CharType.get(charArray[i-1]);--i;} "]
1229570[label="conditionalAndExpression\n i>0&&wordNet[i]==null&&CharType.get(charArray[i-1])==preCharType "]
1329571[label="conditionalAndExpression\n i>0&&wordNet[i]==null "]
1429572[label="relationalExpression\n i>0 "]
1529573[label="expressionName\n i "]
1529574[label="literal\n 0 "]
1429575[label="equalityExpression\n wordNet[i]==null "]
1529576[label="arrayAccess_lfno_primary\n wordNet[i] "]
1629577[label="expressionName\n wordNet "]
1629578[label="expressionName\n i "]
1529579[label="literal\n null "]
1329580[label="equalityExpression\n CharType.get(charArray[i-1])==preCharType "]
1429581[label="methodInvocation_lfno_primary\n CharType.get(charArray[i-1]) "]
1529582[label="typeName\n CharType "]
1529583[label="arrayAccess_lfno_primary\n charArray[i-1] "]
1629584[label="expressionName\n charArray "]
1629585[label="additiveExpression\n i-1 "]
1729586[label="expressionName\n i "]
1729587[label="literal\n 1 "]
1429588[label="expressionName\n preCharType "]
1229589[label="block\n {sbTerm.append(charArray[i-1]);preCharType=CharType.get(charArray[i-1]);--i;} "]
1329590[label="blockStatements\n sbTerm.append(charArray[i-1]);preCharType=CharType.get(charArray[i-1]);--i; "]
1429591[label="expressionStatement\n sbTerm.append(charArray[i-1]); "]
1529592[label="methodInvocation\n sbTerm.append(charArray[i-1]) "]
1629593[label="typeName\n sbTerm "]
1629594[label="arrayAccess_lfno_primary\n charArray[i-1] "]
1729595[label="expressionName\n charArray "]
1729596[label="additiveExpression\n i-1 "]
1829597[label="expressionName\n i "]
1829598[label="literal\n 1 "]
1429599[label="expressionStatement\n preCharType=CharType.get(charArray[i-1]); "]
1529600[label="assignment\n preCharType=CharType.get(charArray[i-1]) "]
1629601[label="expressionName\n preCharType "]
1629602[label="assignmentOperator\n = "]
1629603[label="methodInvocation_lfno_primary\n CharType.get(charArray[i-1]) "]
1729604[label="typeName\n CharType "]
1729605[label="arrayAccess_lfno_primary\n charArray[i-1] "]
1829606[label="expressionName\n charArray "]
1829607[label="additiveExpression\n i-1 "]
1929608[label="expressionName\n i "]
1929609[label="literal\n 1 "]
1429610[label="expressionStatement\n --i; "]
1529611[label="preDecrementExpression\n --i "]
1629612[label="expressionName\n i "]
1129613[label="expressionStatement\n termList.addFirst(newResultTerm<V>(sbTerm.reverse().toString(),null,offset)); "]
1229614[label="methodInvocation\n termList.addFirst(newResultTerm<V>(sbTerm.reverse().toString(),null,offset)) "]
1329615[label="typeName\n termList "]
1329616[label="classInstanceCreationExpression_lfno_primary\n newResultTerm<V>(sbTerm.reverse().toString(),null,offset) "]
1429617[label="typeArguments\n <V> "]
1529618[label="classType_lfno_classOrInterfaceType\n V "]
1429619[label="argumentList\n sbTerm.reverse().toString(),null,offset "]
1529620[label="primary\n sbTerm.reverse().toString() "]
1629621[label="methodInvocation_lfno_primary\n sbTerm.reverse() "]
1729622[label="typeName\n sbTerm "]
1629623[label="methodInvocation_lf_primary\n .toString() "]
1529624[label="literal\n null "]
1529625[label="expressionName\n offset "]
929626[label="block\n {termList.addFirst(wordNet[i]);i-=wordNet[i].word.length();} "]
1029627[label="blockStatements\n termList.addFirst(wordNet[i]);i-=wordNet[i].word.length(); "]
1129628[label="expressionStatement\n termList.addFirst(wordNet[i]); "]
1229629[label="methodInvocation\n termList.addFirst(wordNet[i]) "]
1329630[label="typeName\n termList "]
1329631[label="arrayAccess_lfno_primary\n wordNet[i] "]
1429632[label="expressionName\n wordNet "]
1429633[label="expressionName\n i "]
1129634[label="expressionStatement\n i-=wordNet[i].word.length(); "]
1229635[label="assignment\n i-=wordNet[i].word.length() "]
1329636[label="expressionName\n i "]
1329637[label="assignmentOperator\n -= "]
1329638[label="primary\n wordNet[i].word.length() "]
1429639[label="arrayAccess_lfno_primary\n wordNet[i] "]
1529640[label="expressionName\n wordNet "]
1529641[label="expressionName\n i "]
1429642[label="fieldAccess_lf_primary\n .word "]
1429643[label="methodInvocation_lf_primary\n .length() "]
629644[label="returnStatement\n returntermList; "]
729645[label="expressionName\n termList "]
029646[label="compilationUnit\n packagecom.hankcs.hanlp.dictionary.common;importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie;importcom.hankcs.hanlp.corpus.io.ByteArray;importcom.hankcs.hanlp.corpus.io.IOUtil;importcom.hankcs.hanlp.utility.TextUtility;importjava.io.BufferedReader;importjava.io.DataOutputStream;importjava.io.IOException;importjava.io.InputStreamReader;importjava.util.*;importstaticcom.hankcs.hanlp.utility.Predefine.BIN_EXT;importstaticcom.hankcs.hanlp.utility.Predefine.logger;publicabstractclassCommonDictionary<V>{DoubleArrayTrie<V>trie;protectedabstractV[]loadValueArray(ByteArraybyteArray);publicbooleanload(Stringpath){trie=newDoubleArrayTrie<V>();longstart=System.currentTimeMillis();if(loadDat(ByteArray.createByteArray(path+BIN_EXT))){returntrue;}TreeMap<String,V>map=newTreeMap<String,V>();try{BufferedReaderbr=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]paramArray=line.split(\"\\s\");map.put(paramArray[0],createValue(paramArray));}br.close();}catch(Exceptione){logger.warning(\"读取\"+path+\"失败\"+e);}onLoaded(map);Set<Map.Entry<String,V>>entrySet=map.entrySet();List<String>keyList=newArrayList<String>(entrySet.size());List<V>valueList=newArrayList<V>(entrySet.size());for(Map.Entry<String,V>entry:entrySet){keyList.add(entry.getKey());valueList.add(entry.getValue());}intresultCode=trie.build(keyList,valueList);if(resultCode!=0){logger.warning(\"trie建立失败\");returnfalse;}logger.info(path+\"加载成功，耗时\"+(System.currentTimeMillis()-start)+\"ms\");saveDat(path+BIN_EXT,valueList);returntrue;}protectedbooleanloadDat(ByteArraybyteArray){V[]valueArray=loadValueArray(byteArray);if(valueArray==null){returnfalse;}returntrie.load(byteArray.getBytes(),byteArray.getOffset(),valueArray);}protectedbooleansaveDat(Stringpath,List<V>valueArray){try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path));out.writeInt(valueArray.size());for(Vitem:valueArray){saveValue(item,out);}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"保存失败\"+TextUtility.exceptionToString(e));returnfalse;}returntrue;}protectedabstractvoidsaveValue(Vvalue,DataOutputStreamout)throwsIOException;publicVget(Stringkey){returntrie.get(key);}publicbooleancontains(Stringkey){returnget(key)!=null;}publicintsize(){returntrie.size();}protectedabstractVcreateValue(String[]params);protectedvoidonLoaded(TreeMap<String,V>map){}}<EOF> "]
129647[label="packageDeclaration\n packagecom.hankcs.hanlp.dictionary.common; "]
229648[label="packageName\n com.hankcs.hanlp.dictionary.common "]
329649[label="packageName\n com.hankcs.hanlp.dictionary "]
429650[label="packageName\n com.hankcs.hanlp "]
529651[label="packageName\n com.hankcs "]
629652[label="packageName\n com "]
129653[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie; "]
229654[label="typeName\n com.hankcs.hanlp.collection.trie.DoubleArrayTrie "]
329655[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
429656[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
529657[label="packageOrTypeName\n com.hankcs.hanlp "]
629658[label="packageOrTypeName\n com.hankcs "]
729659[label="packageOrTypeName\n com "]
129660[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.ByteArray; "]
229661[label="typeName\n com.hankcs.hanlp.corpus.io.ByteArray "]
329662[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
429663[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
529664[label="packageOrTypeName\n com.hankcs.hanlp "]
629665[label="packageOrTypeName\n com.hankcs "]
729666[label="packageOrTypeName\n com "]
129667[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
229668[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
329669[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
429670[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
529671[label="packageOrTypeName\n com.hankcs.hanlp "]
629672[label="packageOrTypeName\n com.hankcs "]
729673[label="packageOrTypeName\n com "]
129674[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.TextUtility; "]
229675[label="typeName\n com.hankcs.hanlp.utility.TextUtility "]
329676[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
429677[label="packageOrTypeName\n com.hankcs.hanlp "]
529678[label="packageOrTypeName\n com.hankcs "]
629679[label="packageOrTypeName\n com "]
129680[label="singleTypeImportDeclaration\n importjava.io.BufferedReader; "]
229681[label="typeName\n java.io.BufferedReader "]
329682[label="packageOrTypeName\n java.io "]
429683[label="packageOrTypeName\n java "]
129684[label="singleTypeImportDeclaration\n importjava.io.DataOutputStream; "]
229685[label="typeName\n java.io.DataOutputStream "]
329686[label="packageOrTypeName\n java.io "]
429687[label="packageOrTypeName\n java "]
129688[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
229689[label="typeName\n java.io.IOException "]
329690[label="packageOrTypeName\n java.io "]
429691[label="packageOrTypeName\n java "]
129692[label="singleTypeImportDeclaration\n importjava.io.InputStreamReader; "]
229693[label="typeName\n java.io.InputStreamReader "]
329694[label="packageOrTypeName\n java.io "]
429695[label="packageOrTypeName\n java "]
129696[label="typeImportOnDemandDeclaration\n importjava.util.*; "]
229697[label="packageOrTypeName\n java.util "]
329698[label="packageOrTypeName\n java "]
129699[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.utility.Predefine.BIN_EXT; "]
229700[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
329701[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
429702[label="packageOrTypeName\n com.hankcs.hanlp "]
529703[label="packageOrTypeName\n com.hankcs "]
629704[label="packageOrTypeName\n com "]
129705[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.utility.Predefine.logger; "]
229706[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
329707[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
429708[label="packageOrTypeName\n com.hankcs.hanlp "]
529709[label="packageOrTypeName\n com.hankcs "]
629710[label="packageOrTypeName\n com "]
129711[label="normalClassDeclaration\n publicabstractclassCommonDictionary<V>{DoubleArrayTrie<V>trie;protectedabstractV[]loadValueArray(ByteArraybyteArray);publicbooleanload(Stringpath){trie=newDoubleArrayTrie<V>();longstart=System.currentTimeMillis();if(loadDat(ByteArray.createByteArray(path+BIN_EXT))){returntrue;}TreeMap<String,V>map=newTreeMap<String,V>();try{BufferedReaderbr=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]paramArray=line.split(\"\\s\");map.put(paramArray[0],createValue(paramArray));}br.close();}catch(Exceptione){logger.warning(\"读取\"+path+\"失败\"+e);}onLoaded(map);Set<Map.Entry<String,V>>entrySet=map.entrySet();List<String>keyList=newArrayList<String>(entrySet.size());List<V>valueList=newArrayList<V>(entrySet.size());for(Map.Entry<String,V>entry:entrySet){keyList.add(entry.getKey());valueList.add(entry.getValue());}intresultCode=trie.build(keyList,valueList);if(resultCode!=0){logger.warning(\"trie建立失败\");returnfalse;}logger.info(path+\"加载成功，耗时\"+(System.currentTimeMillis()-start)+\"ms\");saveDat(path+BIN_EXT,valueList);returntrue;}protectedbooleanloadDat(ByteArraybyteArray){V[]valueArray=loadValueArray(byteArray);if(valueArray==null){returnfalse;}returntrie.load(byteArray.getBytes(),byteArray.getOffset(),valueArray);}protectedbooleansaveDat(Stringpath,List<V>valueArray){try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path));out.writeInt(valueArray.size());for(Vitem:valueArray){saveValue(item,out);}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"保存失败\"+TextUtility.exceptionToString(e));returnfalse;}returntrue;}protectedabstractvoidsaveValue(Vvalue,DataOutputStreamout)throwsIOException;publicVget(Stringkey){returntrie.get(key);}publicbooleancontains(Stringkey){returnget(key)!=null;}publicintsize(){returntrie.size();}protectedabstractVcreateValue(String[]params);protectedvoidonLoaded(TreeMap<String,V>map){}} "]
229712[label="classModifier\n public "]
229713[label="classModifier\n abstract "]
229714[label="typeParameters\n <V> "]
329715[label="typeParameter\n V "]
229716[label="classBody\n {DoubleArrayTrie<V>trie;protectedabstractV[]loadValueArray(ByteArraybyteArray);publicbooleanload(Stringpath){trie=newDoubleArrayTrie<V>();longstart=System.currentTimeMillis();if(loadDat(ByteArray.createByteArray(path+BIN_EXT))){returntrue;}TreeMap<String,V>map=newTreeMap<String,V>();try{BufferedReaderbr=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]paramArray=line.split(\"\\s\");map.put(paramArray[0],createValue(paramArray));}br.close();}catch(Exceptione){logger.warning(\"读取\"+path+\"失败\"+e);}onLoaded(map);Set<Map.Entry<String,V>>entrySet=map.entrySet();List<String>keyList=newArrayList<String>(entrySet.size());List<V>valueList=newArrayList<V>(entrySet.size());for(Map.Entry<String,V>entry:entrySet){keyList.add(entry.getKey());valueList.add(entry.getValue());}intresultCode=trie.build(keyList,valueList);if(resultCode!=0){logger.warning(\"trie建立失败\");returnfalse;}logger.info(path+\"加载成功，耗时\"+(System.currentTimeMillis()-start)+\"ms\");saveDat(path+BIN_EXT,valueList);returntrue;}protectedbooleanloadDat(ByteArraybyteArray){V[]valueArray=loadValueArray(byteArray);if(valueArray==null){returnfalse;}returntrie.load(byteArray.getBytes(),byteArray.getOffset(),valueArray);}protectedbooleansaveDat(Stringpath,List<V>valueArray){try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path));out.writeInt(valueArray.size());for(Vitem:valueArray){saveValue(item,out);}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"保存失败\"+TextUtility.exceptionToString(e));returnfalse;}returntrue;}protectedabstractvoidsaveValue(Vvalue,DataOutputStreamout)throwsIOException;publicVget(Stringkey){returntrie.get(key);}publicbooleancontains(Stringkey){returnget(key)!=null;}publicintsize(){returntrie.size();}protectedabstractVcreateValue(String[]params);protectedvoidonLoaded(TreeMap<String,V>map){}} "]
329717[label="fieldDeclaration\n DoubleArrayTrie<V>trie; "]
429718[label="unannClassType_lfno_unannClassOrInterfaceType\n DoubleArrayTrie<V> "]
529719[label="typeArguments\n <V> "]
629720[label="classType_lfno_classOrInterfaceType\n V "]
429721[label="variableDeclaratorId\n trie "]
329722[label="methodDeclaration\n protectedabstractV[]loadValueArray(ByteArraybyteArray); "]
429723[label="methodModifier\n protected "]
429724[label="methodModifier\n abstract "]
429725[label="methodHeader\n V[]loadValueArray(ByteArraybyteArray) "]
529726[label="unannArrayType\n V[] "]
629727[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
629728[label="dims\n [] "]
529729[label="methodDeclarator\n loadValueArray(ByteArraybyteArray) "]
629730[label="formalParameter\n ByteArraybyteArray "]
729731[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
729732[label="variableDeclaratorId\n byteArray "]
429733[label="methodBody\n ; "]
329734[label="methodDeclaration\n publicbooleanload(Stringpath){trie=newDoubleArrayTrie<V>();longstart=System.currentTimeMillis();if(loadDat(ByteArray.createByteArray(path+BIN_EXT))){returntrue;}TreeMap<String,V>map=newTreeMap<String,V>();try{BufferedReaderbr=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]paramArray=line.split(\"\\s\");map.put(paramArray[0],createValue(paramArray));}br.close();}catch(Exceptione){logger.warning(\"读取\"+path+\"失败\"+e);}onLoaded(map);Set<Map.Entry<String,V>>entrySet=map.entrySet();List<String>keyList=newArrayList<String>(entrySet.size());List<V>valueList=newArrayList<V>(entrySet.size());for(Map.Entry<String,V>entry:entrySet){keyList.add(entry.getKey());valueList.add(entry.getValue());}intresultCode=trie.build(keyList,valueList);if(resultCode!=0){logger.warning(\"trie建立失败\");returnfalse;}logger.info(path+\"加载成功，耗时\"+(System.currentTimeMillis()-start)+\"ms\");saveDat(path+BIN_EXT,valueList);returntrue;} "]
429735[label="methodModifier\n public "]
429736[label="methodHeader\n booleanload(Stringpath) "]
529737[label="unannPrimitiveType\n boolean "]
529738[label="methodDeclarator\n load(Stringpath) "]
629739[label="formalParameter\n Stringpath "]
729740[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
729741[label="variableDeclaratorId\n path "]
429742[label="block\n {trie=newDoubleArrayTrie<V>();longstart=System.currentTimeMillis();if(loadDat(ByteArray.createByteArray(path+BIN_EXT))){returntrue;}TreeMap<String,V>map=newTreeMap<String,V>();try{BufferedReaderbr=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]paramArray=line.split(\"\\s\");map.put(paramArray[0],createValue(paramArray));}br.close();}catch(Exceptione){logger.warning(\"读取\"+path+\"失败\"+e);}onLoaded(map);Set<Map.Entry<String,V>>entrySet=map.entrySet();List<String>keyList=newArrayList<String>(entrySet.size());List<V>valueList=newArrayList<V>(entrySet.size());for(Map.Entry<String,V>entry:entrySet){keyList.add(entry.getKey());valueList.add(entry.getValue());}intresultCode=trie.build(keyList,valueList);if(resultCode!=0){logger.warning(\"trie建立失败\");returnfalse;}logger.info(path+\"加载成功，耗时\"+(System.currentTimeMillis()-start)+\"ms\");saveDat(path+BIN_EXT,valueList);returntrue;} "]
529743[label="blockStatements\n trie=newDoubleArrayTrie<V>();longstart=System.currentTimeMillis();if(loadDat(ByteArray.createByteArray(path+BIN_EXT))){returntrue;}TreeMap<String,V>map=newTreeMap<String,V>();try{BufferedReaderbr=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]paramArray=line.split(\"\\s\");map.put(paramArray[0],createValue(paramArray));}br.close();}catch(Exceptione){logger.warning(\"读取\"+path+\"失败\"+e);}onLoaded(map);Set<Map.Entry<String,V>>entrySet=map.entrySet();List<String>keyList=newArrayList<String>(entrySet.size());List<V>valueList=newArrayList<V>(entrySet.size());for(Map.Entry<String,V>entry:entrySet){keyList.add(entry.getKey());valueList.add(entry.getValue());}intresultCode=trie.build(keyList,valueList);if(resultCode!=0){logger.warning(\"trie建立失败\");returnfalse;}logger.info(path+\"加载成功，耗时\"+(System.currentTimeMillis()-start)+\"ms\");saveDat(path+BIN_EXT,valueList);returntrue; "]
629744[label="expressionStatement\n trie=newDoubleArrayTrie<V>(); "]
729745[label="assignment\n trie=newDoubleArrayTrie<V>() "]
829746[label="expressionName\n trie "]
829747[label="assignmentOperator\n = "]
829748[label="classInstanceCreationExpression_lfno_primary\n newDoubleArrayTrie<V>() "]
929749[label="typeArguments\n <V> "]
1029750[label="classType_lfno_classOrInterfaceType\n V "]
629751[label="localVariableDeclarationStatement\n longstart=System.currentTimeMillis(); "]
729752[label="localVariableDeclaration\n longstart=System.currentTimeMillis() "]
829753[label="integralType\n long "]
829754[label="variableDeclarator\n start=System.currentTimeMillis() "]
929755[label="variableDeclaratorId\n start "]
929756[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
1029757[label="typeName\n System "]
629758[label="ifThenStatement\n if(loadDat(ByteArray.createByteArray(path+BIN_EXT))){returntrue;} "]
729759[label="methodInvocation_lfno_primary\n loadDat(ByteArray.createByteArray(path+BIN_EXT)) "]
829760[label="methodName\n loadDat "]
829761[label="methodInvocation_lfno_primary\n ByteArray.createByteArray(path+BIN_EXT) "]
929762[label="typeName\n ByteArray "]
929763[label="additiveExpression\n path+BIN_EXT "]
1029764[label="expressionName\n path "]
1029765[label="expressionName\n BIN_EXT "]
729766[label="block\n {returntrue;} "]
829767[label="returnStatement\n returntrue; "]
929768[label="literal\n true "]
629769[label="localVariableDeclarationStatement\n TreeMap<String,V>map=newTreeMap<String,V>(); "]
729770[label="localVariableDeclaration\n TreeMap<String,V>map=newTreeMap<String,V>() "]
829771[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,V> "]
929772[label="typeArguments\n <String,V> "]
1029773[label="typeArgumentList\n String,V "]
1129774[label="classType_lfno_classOrInterfaceType\n String "]
1129775[label="classType_lfno_classOrInterfaceType\n V "]
829776[label="variableDeclarator\n map=newTreeMap<String,V>() "]
929777[label="variableDeclaratorId\n map "]
929778[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,V>() "]
1029779[label="typeArguments\n <String,V> "]
1129780[label="typeArgumentList\n String,V "]
1229781[label="classType_lfno_classOrInterfaceType\n String "]
1229782[label="classType_lfno_classOrInterfaceType\n V "]
629783[label="tryStatement\n try{BufferedReaderbr=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]paramArray=line.split(\"\\s\");map.put(paramArray[0],createValue(paramArray));}br.close();}catch(Exceptione){logger.warning(\"读取\"+path+\"失败\"+e);} "]
729784[label="block\n {BufferedReaderbr=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]paramArray=line.split(\"\\s\");map.put(paramArray[0],createValue(paramArray));}br.close();} "]
829785[label="blockStatements\n BufferedReaderbr=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\"));Stringline;while((line=br.readLine())!=null){String[]paramArray=line.split(\"\\s\");map.put(paramArray[0],createValue(paramArray));}br.close(); "]
929786[label="localVariableDeclarationStatement\n BufferedReaderbr=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\")); "]
1029787[label="localVariableDeclaration\n BufferedReaderbr=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\")) "]
1129788[label="unannClassType_lfno_unannClassOrInterfaceType\n BufferedReader "]
1129789[label="variableDeclarator\n br=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\")) "]
1229790[label="variableDeclaratorId\n br "]
1229791[label="classInstanceCreationExpression_lfno_primary\n newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\")) "]
1329792[label="classInstanceCreationExpression_lfno_primary\n newInputStreamReader(IOUtil.newInputStream(path),\"UTF-8\") "]
1429793[label="argumentList\n IOUtil.newInputStream(path),\"UTF-8\" "]
1529794[label="methodInvocation_lfno_primary\n IOUtil.newInputStream(path) "]
1629795[label="typeName\n IOUtil "]
1629796[label="expressionName\n path "]
1529797[label="literal\n \"UTF-8\" "]
929798[label="localVariableDeclarationStatement\n Stringline; "]
1029799[label="localVariableDeclaration\n Stringline "]
1129800[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1129801[label="variableDeclaratorId\n line "]
929802[label="whileStatement\n while((line=br.readLine())!=null){String[]paramArray=line.split(\"\\s\");map.put(paramArray[0],createValue(paramArray));} "]
1029803[label="equalityExpression\n (line=br.readLine())!=null "]
1129804[label="primaryNoNewArray_lfno_primary\n (line=br.readLine()) "]
1229805[label="assignment\n line=br.readLine() "]
1329806[label="expressionName\n line "]
1329807[label="assignmentOperator\n = "]
1329808[label="methodInvocation_lfno_primary\n br.readLine() "]
1429809[label="typeName\n br "]
1129810[label="literal\n null "]
1029811[label="block\n {String[]paramArray=line.split(\"\\s\");map.put(paramArray[0],createValue(paramArray));} "]
1129812[label="blockStatements\n String[]paramArray=line.split(\"\\s\");map.put(paramArray[0],createValue(paramArray)); "]
1229813[label="localVariableDeclarationStatement\n String[]paramArray=line.split(\"\\s\"); "]
1329814[label="localVariableDeclaration\n String[]paramArray=line.split(\"\\s\") "]
1429815[label="unannArrayType\n String[] "]
1529816[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1529817[label="dims\n [] "]
1429818[label="variableDeclarator\n paramArray=line.split(\"\\s\") "]
1529819[label="variableDeclaratorId\n paramArray "]
1529820[label="methodInvocation_lfno_primary\n line.split(\"\\s\") "]
1629821[label="typeName\n line "]
1629822[label="literal\n \"\\s\" "]
1229823[label="expressionStatement\n map.put(paramArray[0],createValue(paramArray)); "]
1329824[label="methodInvocation\n map.put(paramArray[0],createValue(paramArray)) "]
1429825[label="typeName\n map "]
1429826[label="argumentList\n paramArray[0],createValue(paramArray) "]
1529827[label="arrayAccess_lfno_primary\n paramArray[0] "]
1629828[label="expressionName\n paramArray "]
1629829[label="literal\n 0 "]
1529830[label="methodInvocation_lfno_primary\n createValue(paramArray) "]
1629831[label="methodName\n createValue "]
1629832[label="expressionName\n paramArray "]
929833[label="expressionStatement\n br.close(); "]
1029834[label="methodInvocation\n br.close() "]
1129835[label="typeName\n br "]
729836[label="catchClause\n catch(Exceptione){logger.warning(\"读取\"+path+\"失败\"+e);} "]
829837[label="catchFormalParameter\n Exceptione "]
929838[label="unannClassType\n Exception "]
929839[label="variableDeclaratorId\n e "]
829840[label="block\n {logger.warning(\"读取\"+path+\"失败\"+e);} "]
929841[label="expressionStatement\n logger.warning(\"读取\"+path+\"失败\"+e); "]
1029842[label="methodInvocation\n logger.warning(\"读取\"+path+\"失败\"+e) "]
1129843[label="typeName\n logger "]
1129844[label="additiveExpression\n \"读取\"+path+\"失败\"+e "]
1229845[label="additiveExpression\n \"读取\"+path+\"失败\" "]
1329846[label="additiveExpression\n \"读取\"+path "]
1429847[label="literal\n \"读取\" "]
1429848[label="expressionName\n path "]
1329849[label="literal\n \"失败\" "]
1229850[label="expressionName\n e "]
629851[label="expressionStatement\n onLoaded(map); "]
729852[label="methodInvocation\n onLoaded(map) "]
829853[label="methodName\n onLoaded "]
829854[label="expressionName\n map "]
629855[label="localVariableDeclarationStatement\n Set<Map.Entry<String,V>>entrySet=map.entrySet(); "]
729856[label="localVariableDeclaration\n Set<Map.Entry<String,V>>entrySet=map.entrySet() "]
829857[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<Map.Entry<String,V>> "]
929858[label="typeArguments\n <Map.Entry<String,V>> "]
1029859[label="classOrInterfaceType\n Map.Entry<String,V> "]
1129860[label="classType_lfno_classOrInterfaceType\n Map "]
1129861[label="classType_lf_classOrInterfaceType\n .Entry<String,V> "]
1229862[label="typeArguments\n <String,V> "]
1329863[label="typeArgumentList\n String,V "]
1429864[label="classType_lfno_classOrInterfaceType\n String "]
1429865[label="classType_lfno_classOrInterfaceType\n V "]
829866[label="variableDeclarator\n entrySet=map.entrySet() "]
929867[label="variableDeclaratorId\n entrySet "]
929868[label="methodInvocation_lfno_primary\n map.entrySet() "]
1029869[label="typeName\n map "]
629870[label="localVariableDeclarationStatement\n List<String>keyList=newArrayList<String>(entrySet.size()); "]
729871[label="localVariableDeclaration\n List<String>keyList=newArrayList<String>(entrySet.size()) "]
829872[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
929873[label="typeArguments\n <String> "]
1029874[label="classType_lfno_classOrInterfaceType\n String "]
829875[label="variableDeclarator\n keyList=newArrayList<String>(entrySet.size()) "]
929876[label="variableDeclaratorId\n keyList "]
929877[label="classInstanceCreationExpression_lfno_primary\n newArrayList<String>(entrySet.size()) "]
1029878[label="typeArguments\n <String> "]
1129879[label="classType_lfno_classOrInterfaceType\n String "]
1029880[label="methodInvocation_lfno_primary\n entrySet.size() "]
1129881[label="typeName\n entrySet "]
629882[label="localVariableDeclarationStatement\n List<V>valueList=newArrayList<V>(entrySet.size()); "]
729883[label="localVariableDeclaration\n List<V>valueList=newArrayList<V>(entrySet.size()) "]
829884[label="unannClassType_lfno_unannClassOrInterfaceType\n List<V> "]
929885[label="typeArguments\n <V> "]
1029886[label="classType_lfno_classOrInterfaceType\n V "]
829887[label="variableDeclarator\n valueList=newArrayList<V>(entrySet.size()) "]
929888[label="variableDeclaratorId\n valueList "]
929889[label="classInstanceCreationExpression_lfno_primary\n newArrayList<V>(entrySet.size()) "]
1029890[label="typeArguments\n <V> "]
1129891[label="classType_lfno_classOrInterfaceType\n V "]
1029892[label="methodInvocation_lfno_primary\n entrySet.size() "]
1129893[label="typeName\n entrySet "]
629894[label="enhancedForStatement\n for(Map.Entry<String,V>entry:entrySet){keyList.add(entry.getKey());valueList.add(entry.getValue());} "]
729895[label="unannClassOrInterfaceType\n Map.Entry<String,V> "]
829896[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
829897[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,V> "]
929898[label="typeArguments\n <String,V> "]
1029899[label="typeArgumentList\n String,V "]
1129900[label="classType_lfno_classOrInterfaceType\n String "]
1129901[label="classType_lfno_classOrInterfaceType\n V "]
729902[label="variableDeclaratorId\n entry "]
729903[label="expressionName\n entrySet "]
729904[label="block\n {keyList.add(entry.getKey());valueList.add(entry.getValue());} "]
829905[label="blockStatements\n keyList.add(entry.getKey());valueList.add(entry.getValue()); "]
929906[label="expressionStatement\n keyList.add(entry.getKey()); "]
1029907[label="methodInvocation\n keyList.add(entry.getKey()) "]
1129908[label="typeName\n keyList "]
1129909[label="methodInvocation_lfno_primary\n entry.getKey() "]
1229910[label="typeName\n entry "]
929911[label="expressionStatement\n valueList.add(entry.getValue()); "]
1029912[label="methodInvocation\n valueList.add(entry.getValue()) "]
1129913[label="typeName\n valueList "]
1129914[label="methodInvocation_lfno_primary\n entry.getValue() "]
1229915[label="typeName\n entry "]
629916[label="localVariableDeclarationStatement\n intresultCode=trie.build(keyList,valueList); "]
729917[label="localVariableDeclaration\n intresultCode=trie.build(keyList,valueList) "]
829918[label="integralType\n int "]
829919[label="variableDeclarator\n resultCode=trie.build(keyList,valueList) "]
929920[label="variableDeclaratorId\n resultCode "]
929921[label="methodInvocation_lfno_primary\n trie.build(keyList,valueList) "]
1029922[label="typeName\n trie "]
1029923[label="argumentList\n keyList,valueList "]
1129924[label="expressionName\n keyList "]
1129925[label="expressionName\n valueList "]
629926[label="ifThenStatement\n if(resultCode!=0){logger.warning(\"trie建立失败\");returnfalse;} "]
729927[label="equalityExpression\n resultCode!=0 "]
829928[label="expressionName\n resultCode "]
829929[label="literal\n 0 "]
729930[label="block\n {logger.warning(\"trie建立失败\");returnfalse;} "]
829931[label="blockStatements\n logger.warning(\"trie建立失败\");returnfalse; "]
929932[label="expressionStatement\n logger.warning(\"trie建立失败\"); "]
1029933[label="methodInvocation\n logger.warning(\"trie建立失败\") "]
1129934[label="typeName\n logger "]
1129935[label="literal\n \"trie建立失败\" "]
929936[label="returnStatement\n returnfalse; "]
1029937[label="literal\n false "]
629938[label="expressionStatement\n logger.info(path+\"加载成功，耗时\"+(System.currentTimeMillis()-start)+\"ms\"); "]
729939[label="methodInvocation\n logger.info(path+\"加载成功，耗时\"+(System.currentTimeMillis()-start)+\"ms\") "]
829940[label="typeName\n logger "]
829941[label="additiveExpression\n path+\"加载成功，耗时\"+(System.currentTimeMillis()-start)+\"ms\" "]
929942[label="additiveExpression\n path+\"加载成功，耗时\"+(System.currentTimeMillis()-start) "]
1029943[label="additiveExpression\n path+\"加载成功，耗时\" "]
1129944[label="expressionName\n path "]
1129945[label="literal\n \"加载成功，耗时\" "]
1029946[label="primaryNoNewArray_lfno_primary\n (System.currentTimeMillis()-start) "]
1129947[label="additiveExpression\n System.currentTimeMillis()-start "]
1229948[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
1329949[label="typeName\n System "]
1229950[label="expressionName\n start "]
929951[label="literal\n \"ms\" "]
629952[label="expressionStatement\n saveDat(path+BIN_EXT,valueList); "]
729953[label="methodInvocation\n saveDat(path+BIN_EXT,valueList) "]
829954[label="methodName\n saveDat "]
829955[label="argumentList\n path+BIN_EXT,valueList "]
929956[label="additiveExpression\n path+BIN_EXT "]
1029957[label="expressionName\n path "]
1029958[label="expressionName\n BIN_EXT "]
929959[label="expressionName\n valueList "]
629960[label="returnStatement\n returntrue; "]
729961[label="literal\n true "]
329962[label="methodDeclaration\n protectedbooleanloadDat(ByteArraybyteArray){V[]valueArray=loadValueArray(byteArray);if(valueArray==null){returnfalse;}returntrie.load(byteArray.getBytes(),byteArray.getOffset(),valueArray);} "]
429963[label="methodModifier\n protected "]
429964[label="methodHeader\n booleanloadDat(ByteArraybyteArray) "]
529965[label="unannPrimitiveType\n boolean "]
529966[label="methodDeclarator\n loadDat(ByteArraybyteArray) "]
629967[label="formalParameter\n ByteArraybyteArray "]
729968[label="unannClassType_lfno_unannClassOrInterfaceType\n ByteArray "]
729969[label="variableDeclaratorId\n byteArray "]
429970[label="block\n {V[]valueArray=loadValueArray(byteArray);if(valueArray==null){returnfalse;}returntrie.load(byteArray.getBytes(),byteArray.getOffset(),valueArray);} "]
529971[label="blockStatements\n V[]valueArray=loadValueArray(byteArray);if(valueArray==null){returnfalse;}returntrie.load(byteArray.getBytes(),byteArray.getOffset(),valueArray); "]
629972[label="localVariableDeclarationStatement\n V[]valueArray=loadValueArray(byteArray); "]
729973[label="localVariableDeclaration\n V[]valueArray=loadValueArray(byteArray) "]
829974[label="unannArrayType\n V[] "]
929975[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
929976[label="dims\n [] "]
829977[label="variableDeclarator\n valueArray=loadValueArray(byteArray) "]
929978[label="variableDeclaratorId\n valueArray "]
929979[label="methodInvocation_lfno_primary\n loadValueArray(byteArray) "]
1029980[label="methodName\n loadValueArray "]
1029981[label="expressionName\n byteArray "]
629982[label="ifThenStatement\n if(valueArray==null){returnfalse;} "]
729983[label="equalityExpression\n valueArray==null "]
829984[label="expressionName\n valueArray "]
829985[label="literal\n null "]
729986[label="block\n {returnfalse;} "]
829987[label="returnStatement\n returnfalse; "]
929988[label="literal\n false "]
629989[label="returnStatement\n returntrie.load(byteArray.getBytes(),byteArray.getOffset(),valueArray); "]
729990[label="methodInvocation_lfno_primary\n trie.load(byteArray.getBytes(),byteArray.getOffset(),valueArray) "]
829991[label="typeName\n trie "]
829992[label="argumentList\n byteArray.getBytes(),byteArray.getOffset(),valueArray "]
929993[label="methodInvocation_lfno_primary\n byteArray.getBytes() "]
1029994[label="typeName\n byteArray "]
929995[label="methodInvocation_lfno_primary\n byteArray.getOffset() "]
1029996[label="typeName\n byteArray "]
929997[label="expressionName\n valueArray "]
329998[label="methodDeclaration\n protectedbooleansaveDat(Stringpath,List<V>valueArray){try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path));out.writeInt(valueArray.size());for(Vitem:valueArray){saveValue(item,out);}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"保存失败\"+TextUtility.exceptionToString(e));returnfalse;}returntrue;} "]
429999[label="methodModifier\n protected "]
430000[label="methodHeader\n booleansaveDat(Stringpath,List<V>valueArray) "]
530001[label="unannPrimitiveType\n boolean "]
530002[label="methodDeclarator\n saveDat(Stringpath,List<V>valueArray) "]
630003[label="formalParameterList\n Stringpath,List<V>valueArray "]
730004[label="formalParameter\n Stringpath "]
830005[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
830006[label="variableDeclaratorId\n path "]
730007[label="formalParameter\n List<V>valueArray "]
830008[label="unannClassType_lfno_unannClassOrInterfaceType\n List<V> "]
930009[label="typeArguments\n <V> "]
1030010[label="classType_lfno_classOrInterfaceType\n V "]
830011[label="variableDeclaratorId\n valueArray "]
430012[label="block\n {try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path));out.writeInt(valueArray.size());for(Vitem:valueArray){saveValue(item,out);}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"保存失败\"+TextUtility.exceptionToString(e));returnfalse;}returntrue;} "]
530013[label="blockStatements\n try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path));out.writeInt(valueArray.size());for(Vitem:valueArray){saveValue(item,out);}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"保存失败\"+TextUtility.exceptionToString(e));returnfalse;}returntrue; "]
630014[label="tryStatement\n try{DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path));out.writeInt(valueArray.size());for(Vitem:valueArray){saveValue(item,out);}trie.save(out);out.close();}catch(Exceptione){logger.warning(\"保存失败\"+TextUtility.exceptionToString(e));returnfalse;} "]
730015[label="block\n {DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path));out.writeInt(valueArray.size());for(Vitem:valueArray){saveValue(item,out);}trie.save(out);out.close();} "]
830016[label="blockStatements\n DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path));out.writeInt(valueArray.size());for(Vitem:valueArray){saveValue(item,out);}trie.save(out);out.close(); "]
930017[label="localVariableDeclarationStatement\n DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path)); "]
1030018[label="localVariableDeclaration\n DataOutputStreamout=newDataOutputStream(IOUtil.newOutputStream(path)) "]
1130019[label="unannClassType_lfno_unannClassOrInterfaceType\n DataOutputStream "]
1130020[label="variableDeclarator\n out=newDataOutputStream(IOUtil.newOutputStream(path)) "]
1230021[label="variableDeclaratorId\n out "]
1230022[label="classInstanceCreationExpression_lfno_primary\n newDataOutputStream(IOUtil.newOutputStream(path)) "]
1330023[label="methodInvocation_lfno_primary\n IOUtil.newOutputStream(path) "]
1430024[label="typeName\n IOUtil "]
1430025[label="expressionName\n path "]
930026[label="expressionStatement\n out.writeInt(valueArray.size()); "]
1030027[label="methodInvocation\n out.writeInt(valueArray.size()) "]
1130028[label="typeName\n out "]
1130029[label="methodInvocation_lfno_primary\n valueArray.size() "]
1230030[label="typeName\n valueArray "]
930031[label="enhancedForStatement\n for(Vitem:valueArray){saveValue(item,out);} "]
1030032[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
1030033[label="variableDeclaratorId\n item "]
1030034[label="expressionName\n valueArray "]
1030035[label="block\n {saveValue(item,out);} "]
1130036[label="expressionStatement\n saveValue(item,out); "]
1230037[label="methodInvocation\n saveValue(item,out) "]
1330038[label="methodName\n saveValue "]
1330039[label="argumentList\n item,out "]
1430040[label="expressionName\n item "]
1430041[label="expressionName\n out "]
930042[label="expressionStatement\n trie.save(out); "]
1030043[label="methodInvocation\n trie.save(out) "]
1130044[label="typeName\n trie "]
1130045[label="expressionName\n out "]
930046[label="expressionStatement\n out.close(); "]
1030047[label="methodInvocation\n out.close() "]
1130048[label="typeName\n out "]
730049[label="catchClause\n catch(Exceptione){logger.warning(\"保存失败\"+TextUtility.exceptionToString(e));returnfalse;} "]
830050[label="catchFormalParameter\n Exceptione "]
930051[label="unannClassType\n Exception "]
930052[label="variableDeclaratorId\n e "]
830053[label="block\n {logger.warning(\"保存失败\"+TextUtility.exceptionToString(e));returnfalse;} "]
930054[label="blockStatements\n logger.warning(\"保存失败\"+TextUtility.exceptionToString(e));returnfalse; "]
1030055[label="expressionStatement\n logger.warning(\"保存失败\"+TextUtility.exceptionToString(e)); "]
1130056[label="methodInvocation\n logger.warning(\"保存失败\"+TextUtility.exceptionToString(e)) "]
1230057[label="typeName\n logger "]
1230058[label="additiveExpression\n \"保存失败\"+TextUtility.exceptionToString(e) "]
1330059[label="literal\n \"保存失败\" "]
1330060[label="methodInvocation_lfno_primary\n TextUtility.exceptionToString(e) "]
1430061[label="typeName\n TextUtility "]
1430062[label="expressionName\n e "]
1030063[label="returnStatement\n returnfalse; "]
1130064[label="literal\n false "]
630065[label="returnStatement\n returntrue; "]
730066[label="literal\n true "]
330067[label="methodDeclaration\n protectedabstractvoidsaveValue(Vvalue,DataOutputStreamout)throwsIOException; "]
430068[label="methodModifier\n protected "]
430069[label="methodModifier\n abstract "]
430070[label="methodHeader\n voidsaveValue(Vvalue,DataOutputStreamout)throwsIOException "]
530071[label="result\n void "]
530072[label="methodDeclarator\n saveValue(Vvalue,DataOutputStreamout) "]
630073[label="formalParameterList\n Vvalue,DataOutputStreamout "]
730074[label="formalParameter\n Vvalue "]
830075[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
830076[label="variableDeclaratorId\n value "]
730077[label="formalParameter\n DataOutputStreamout "]
830078[label="unannClassType_lfno_unannClassOrInterfaceType\n DataOutputStream "]
830079[label="variableDeclaratorId\n out "]
530080[label="throws_\n throwsIOException "]
630081[label="classType\n IOException "]
430082[label="methodBody\n ; "]
330083[label="methodDeclaration\n publicVget(Stringkey){returntrie.get(key);} "]
430084[label="methodModifier\n public "]
430085[label="methodHeader\n Vget(Stringkey) "]
530086[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
530087[label="methodDeclarator\n get(Stringkey) "]
630088[label="formalParameter\n Stringkey "]
730089[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
730090[label="variableDeclaratorId\n key "]
430091[label="block\n {returntrie.get(key);} "]
530092[label="returnStatement\n returntrie.get(key); "]
630093[label="methodInvocation_lfno_primary\n trie.get(key) "]
730094[label="typeName\n trie "]
730095[label="expressionName\n key "]
330096[label="methodDeclaration\n publicbooleancontains(Stringkey){returnget(key)!=null;} "]
430097[label="methodModifier\n public "]
430098[label="methodHeader\n booleancontains(Stringkey) "]
530099[label="unannPrimitiveType\n boolean "]
530100[label="methodDeclarator\n contains(Stringkey) "]
630101[label="formalParameter\n Stringkey "]
730102[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
730103[label="variableDeclaratorId\n key "]
430104[label="block\n {returnget(key)!=null;} "]
530105[label="returnStatement\n returnget(key)!=null; "]
630106[label="equalityExpression\n get(key)!=null "]
730107[label="methodInvocation_lfno_primary\n get(key) "]
830108[label="methodName\n get "]
830109[label="expressionName\n key "]
730110[label="literal\n null "]
330111[label="methodDeclaration\n publicintsize(){returntrie.size();} "]
430112[label="methodModifier\n public "]
430113[label="methodHeader\n intsize() "]
530114[label="integralType\n int "]
530115[label="methodDeclarator\n size() "]
430116[label="block\n {returntrie.size();} "]
530117[label="returnStatement\n returntrie.size(); "]
630118[label="methodInvocation_lfno_primary\n trie.size() "]
730119[label="typeName\n trie "]
330120[label="methodDeclaration\n protectedabstractVcreateValue(String[]params); "]
430121[label="methodModifier\n protected "]
430122[label="methodModifier\n abstract "]
430123[label="methodHeader\n VcreateValue(String[]params) "]
530124[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
530125[label="methodDeclarator\n createValue(String[]params) "]
630126[label="formalParameter\n String[]params "]
730127[label="unannArrayType\n String[] "]
830128[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
830129[label="dims\n [] "]
730130[label="variableDeclaratorId\n params "]
430131[label="methodBody\n ; "]
330132[label="methodDeclaration\n protectedvoidonLoaded(TreeMap<String,V>map){} "]
430133[label="methodModifier\n protected "]
430134[label="methodHeader\n voidonLoaded(TreeMap<String,V>map) "]
530135[label="result\n void "]
530136[label="methodDeclarator\n onLoaded(TreeMap<String,V>map) "]
630137[label="formalParameter\n TreeMap<String,V>map "]
730138[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,V> "]
830139[label="typeArguments\n <String,V> "]
930140[label="typeArgumentList\n String,V "]
1030141[label="classType_lfno_classOrInterfaceType\n String "]
1030142[label="classType_lfno_classOrInterfaceType\n V "]
730143[label="variableDeclaratorId\n map "]
430144[label="block\n {} "]
030145[label="compilationUnit\n packagecom.hankcs.hanlp.corpus.dictionary;importcom.hankcs.hanlp.corpus.document.sentence.word.IWord;importcom.hankcs.hanlp.corpus.document.sentence.word.Word;importjava.util.List;importstaticcom.hankcs.hanlp.utility.Predefine.logger;publicabstractclassCommonDictionaryMakerimplementsISaveAble{staticbooleanverbose=false;EasyDictionarydictionary;DictionaryMakerdictionaryMaker;NGramDictionaryMakernGramDictionaryMaker;publicCommonDictionaryMaker(EasyDictionarydictionary){nGramDictionaryMaker=newNGramDictionaryMaker();dictionaryMaker=newDictionaryMaker();this.dictionary=dictionary;}@OverridepublicbooleansaveTxtTo(Stringpath){if(dictionaryMaker.saveTxtTo(path+\".txt\")){if(nGramDictionaryMaker.saveTxtTo(path)){returntrue;}}returnfalse;}publicvoidcompute(List<List<IWord>>sentenceList){roleTag(sentenceList);addToDictionary(sentenceList);}abstractprotectedvoidaddToDictionary(List<List<IWord>>sentenceList);abstractprotectedvoidroleTag(List<List<IWord>>sentenceList);}<EOF> "]
130146[label="packageDeclaration\n packagecom.hankcs.hanlp.corpus.dictionary; "]
230147[label="packageName\n com.hankcs.hanlp.corpus.dictionary "]
330148[label="packageName\n com.hankcs.hanlp.corpus "]
430149[label="packageName\n com.hankcs.hanlp "]
530150[label="packageName\n com.hankcs "]
630151[label="packageName\n com "]
130152[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.document.sentence.word.IWord; "]
230153[label="typeName\n com.hankcs.hanlp.corpus.document.sentence.word.IWord "]
330154[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document.sentence.word "]
430155[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document.sentence "]
530156[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document "]
630157[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
730158[label="packageOrTypeName\n com.hankcs.hanlp "]
830159[label="packageOrTypeName\n com.hankcs "]
930160[label="packageOrTypeName\n com "]
130161[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.document.sentence.word.Word; "]
230162[label="typeName\n com.hankcs.hanlp.corpus.document.sentence.word.Word "]
330163[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document.sentence.word "]
430164[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document.sentence "]
530165[label="packageOrTypeName\n com.hankcs.hanlp.corpus.document "]
630166[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
730167[label="packageOrTypeName\n com.hankcs.hanlp "]
830168[label="packageOrTypeName\n com.hankcs "]
930169[label="packageOrTypeName\n com "]
130170[label="singleTypeImportDeclaration\n importjava.util.List; "]
230171[label="typeName\n java.util.List "]
330172[label="packageOrTypeName\n java.util "]
430173[label="packageOrTypeName\n java "]
130174[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.utility.Predefine.logger; "]
230175[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
330176[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
430177[label="packageOrTypeName\n com.hankcs.hanlp "]
530178[label="packageOrTypeName\n com.hankcs "]
630179[label="packageOrTypeName\n com "]
130180[label="normalClassDeclaration\n publicabstractclassCommonDictionaryMakerimplementsISaveAble{staticbooleanverbose=false;EasyDictionarydictionary;DictionaryMakerdictionaryMaker;NGramDictionaryMakernGramDictionaryMaker;publicCommonDictionaryMaker(EasyDictionarydictionary){nGramDictionaryMaker=newNGramDictionaryMaker();dictionaryMaker=newDictionaryMaker();this.dictionary=dictionary;}@OverridepublicbooleansaveTxtTo(Stringpath){if(dictionaryMaker.saveTxtTo(path+\".txt\")){if(nGramDictionaryMaker.saveTxtTo(path)){returntrue;}}returnfalse;}publicvoidcompute(List<List<IWord>>sentenceList){roleTag(sentenceList);addToDictionary(sentenceList);}abstractprotectedvoidaddToDictionary(List<List<IWord>>sentenceList);abstractprotectedvoidroleTag(List<List<IWord>>sentenceList);} "]
230181[label="classModifier\n public "]
230182[label="classModifier\n abstract "]
230183[label="superinterfaces\n implementsISaveAble "]
330184[label="classType\n ISaveAble "]
230185[label="classBody\n {staticbooleanverbose=false;EasyDictionarydictionary;DictionaryMakerdictionaryMaker;NGramDictionaryMakernGramDictionaryMaker;publicCommonDictionaryMaker(EasyDictionarydictionary){nGramDictionaryMaker=newNGramDictionaryMaker();dictionaryMaker=newDictionaryMaker();this.dictionary=dictionary;}@OverridepublicbooleansaveTxtTo(Stringpath){if(dictionaryMaker.saveTxtTo(path+\".txt\")){if(nGramDictionaryMaker.saveTxtTo(path)){returntrue;}}returnfalse;}publicvoidcompute(List<List<IWord>>sentenceList){roleTag(sentenceList);addToDictionary(sentenceList);}abstractprotectedvoidaddToDictionary(List<List<IWord>>sentenceList);abstractprotectedvoidroleTag(List<List<IWord>>sentenceList);} "]
330186[label="fieldDeclaration\n staticbooleanverbose=false; "]
430187[label="fieldModifier\n static "]
430188[label="unannPrimitiveType\n boolean "]
430189[label="variableDeclarator\n verbose=false "]
530190[label="variableDeclaratorId\n verbose "]
530191[label="literal\n false "]
330192[label="fieldDeclaration\n EasyDictionarydictionary; "]
430193[label="unannClassType_lfno_unannClassOrInterfaceType\n EasyDictionary "]
430194[label="variableDeclaratorId\n dictionary "]
330195[label="fieldDeclaration\n DictionaryMakerdictionaryMaker; "]
430196[label="unannClassType_lfno_unannClassOrInterfaceType\n DictionaryMaker "]
430197[label="variableDeclaratorId\n dictionaryMaker "]
330198[label="fieldDeclaration\n NGramDictionaryMakernGramDictionaryMaker; "]
430199[label="unannClassType_lfno_unannClassOrInterfaceType\n NGramDictionaryMaker "]
430200[label="variableDeclaratorId\n nGramDictionaryMaker "]
330201[label="constructorDeclaration\n publicCommonDictionaryMaker(EasyDictionarydictionary){nGramDictionaryMaker=newNGramDictionaryMaker();dictionaryMaker=newDictionaryMaker();this.dictionary=dictionary;} "]
430202[label="constructorModifier\n public "]
430203[label="constructorDeclarator\n CommonDictionaryMaker(EasyDictionarydictionary) "]
530204[label="simpleTypeName\n CommonDictionaryMaker "]
530205[label="formalParameter\n EasyDictionarydictionary "]
630206[label="unannClassType_lfno_unannClassOrInterfaceType\n EasyDictionary "]
630207[label="variableDeclaratorId\n dictionary "]
430208[label="constructorBody\n {nGramDictionaryMaker=newNGramDictionaryMaker();dictionaryMaker=newDictionaryMaker();this.dictionary=dictionary;} "]
530209[label="blockStatements\n nGramDictionaryMaker=newNGramDictionaryMaker();dictionaryMaker=newDictionaryMaker();this.dictionary=dictionary; "]
630210[label="expressionStatement\n nGramDictionaryMaker=newNGramDictionaryMaker(); "]
730211[label="assignment\n nGramDictionaryMaker=newNGramDictionaryMaker() "]
830212[label="expressionName\n nGramDictionaryMaker "]
830213[label="assignmentOperator\n = "]
830214[label="classInstanceCreationExpression_lfno_primary\n newNGramDictionaryMaker() "]
630215[label="expressionStatement\n dictionaryMaker=newDictionaryMaker(); "]
730216[label="assignment\n dictionaryMaker=newDictionaryMaker() "]
830217[label="expressionName\n dictionaryMaker "]
830218[label="assignmentOperator\n = "]
830219[label="classInstanceCreationExpression_lfno_primary\n newDictionaryMaker() "]
630220[label="expressionStatement\n this.dictionary=dictionary; "]
730221[label="assignment\n this.dictionary=dictionary "]
830222[label="fieldAccess\n this.dictionary "]
930223[label="primaryNoNewArray_lfno_primary\n this "]
830224[label="assignmentOperator\n = "]
830225[label="expressionName\n dictionary "]
330226[label="methodDeclaration\n @OverridepublicbooleansaveTxtTo(Stringpath){if(dictionaryMaker.saveTxtTo(path+\".txt\")){if(nGramDictionaryMaker.saveTxtTo(path)){returntrue;}}returnfalse;} "]
430227[label="markerAnnotation\n @Override "]
530228[label="typeName\n Override "]
430229[label="methodModifier\n public "]
430230[label="methodHeader\n booleansaveTxtTo(Stringpath) "]
530231[label="unannPrimitiveType\n boolean "]
530232[label="methodDeclarator\n saveTxtTo(Stringpath) "]
630233[label="formalParameter\n Stringpath "]
730234[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
730235[label="variableDeclaratorId\n path "]
430236[label="block\n {if(dictionaryMaker.saveTxtTo(path+\".txt\")){if(nGramDictionaryMaker.saveTxtTo(path)){returntrue;}}returnfalse;} "]
530237[label="blockStatements\n if(dictionaryMaker.saveTxtTo(path+\".txt\")){if(nGramDictionaryMaker.saveTxtTo(path)){returntrue;}}returnfalse; "]
630238[label="ifThenStatement\n if(dictionaryMaker.saveTxtTo(path+\".txt\")){if(nGramDictionaryMaker.saveTxtTo(path)){returntrue;}} "]
730239[label="methodInvocation_lfno_primary\n dictionaryMaker.saveTxtTo(path+\".txt\") "]
830240[label="typeName\n dictionaryMaker "]
830241[label="additiveExpression\n path+\".txt\" "]
930242[label="expressionName\n path "]
930243[label="literal\n \".txt\" "]
730244[label="block\n {if(nGramDictionaryMaker.saveTxtTo(path)){returntrue;}} "]
830245[label="ifThenStatement\n if(nGramDictionaryMaker.saveTxtTo(path)){returntrue;} "]
930246[label="methodInvocation_lfno_primary\n nGramDictionaryMaker.saveTxtTo(path) "]
1030247[label="typeName\n nGramDictionaryMaker "]
1030248[label="expressionName\n path "]
930249[label="block\n {returntrue;} "]
1030250[label="returnStatement\n returntrue; "]
1130251[label="literal\n true "]
630252[label="returnStatement\n returnfalse; "]
730253[label="literal\n false "]
330254[label="methodDeclaration\n publicvoidcompute(List<List<IWord>>sentenceList){roleTag(sentenceList);addToDictionary(sentenceList);} "]
430255[label="methodModifier\n public "]
430256[label="methodHeader\n voidcompute(List<List<IWord>>sentenceList) "]
530257[label="result\n void "]
530258[label="methodDeclarator\n compute(List<List<IWord>>sentenceList) "]
630259[label="formalParameter\n List<List<IWord>>sentenceList "]
730260[label="unannClassType_lfno_unannClassOrInterfaceType\n List<List<IWord>> "]
830261[label="typeArguments\n <List<IWord>> "]
930262[label="classType_lfno_classOrInterfaceType\n List<IWord> "]
1030263[label="typeArguments\n <IWord> "]
1130264[label="classType_lfno_classOrInterfaceType\n IWord "]
730265[label="variableDeclaratorId\n sentenceList "]
430266[label="block\n {roleTag(sentenceList);addToDictionary(sentenceList);} "]
530267[label="blockStatements\n roleTag(sentenceList);addToDictionary(sentenceList); "]
630268[label="expressionStatement\n roleTag(sentenceList); "]
730269[label="methodInvocation\n roleTag(sentenceList) "]
830270[label="methodName\n roleTag "]
830271[label="expressionName\n sentenceList "]
630272[label="expressionStatement\n addToDictionary(sentenceList); "]
730273[label="methodInvocation\n addToDictionary(sentenceList) "]
830274[label="methodName\n addToDictionary "]
830275[label="expressionName\n sentenceList "]
330276[label="methodDeclaration\n abstractprotectedvoidaddToDictionary(List<List<IWord>>sentenceList); "]
430277[label="methodModifier\n abstract "]
430278[label="methodModifier\n protected "]
430279[label="methodHeader\n voidaddToDictionary(List<List<IWord>>sentenceList) "]
530280[label="result\n void "]
530281[label="methodDeclarator\n addToDictionary(List<List<IWord>>sentenceList) "]
630282[label="formalParameter\n List<List<IWord>>sentenceList "]
730283[label="unannClassType_lfno_unannClassOrInterfaceType\n List<List<IWord>> "]
830284[label="typeArguments\n <List<IWord>> "]
930285[label="classType_lfno_classOrInterfaceType\n List<IWord> "]
1030286[label="typeArguments\n <IWord> "]
1130287[label="classType_lfno_classOrInterfaceType\n IWord "]
730288[label="variableDeclaratorId\n sentenceList "]
430289[label="methodBody\n ; "]
330290[label="methodDeclaration\n abstractprotectedvoidroleTag(List<List<IWord>>sentenceList); "]
430291[label="methodModifier\n abstract "]
430292[label="methodModifier\n protected "]
430293[label="methodHeader\n voidroleTag(List<List<IWord>>sentenceList) "]
530294[label="result\n void "]
530295[label="methodDeclarator\n roleTag(List<List<IWord>>sentenceList) "]
630296[label="formalParameter\n List<List<IWord>>sentenceList "]
730297[label="unannClassType_lfno_unannClassOrInterfaceType\n List<List<IWord>> "]
830298[label="typeArguments\n <List<IWord>> "]
930299[label="classType_lfno_classOrInterfaceType\n List<IWord> "]
1030300[label="typeArguments\n <IWord> "]
1130301[label="classType_lfno_classOrInterfaceType\n IWord "]
730302[label="variableDeclaratorId\n sentenceList "]
430303[label="methodBody\n ; "]
030304[label="compilationUnit\n packagecom.hankcs.hanlp.dictionary.common;importcom.hankcs.hanlp.collection.trie.bintrie.BinTrie;importcom.hankcs.hanlp.corpus.io.IOUtil;importcom.hankcs.hanlp.utility.Predefine;importjava.io.BufferedReader;importjava.io.FileInputStream;importjava.io.InputStreamReader;importjava.util.LinkedHashSet;importjava.util.Map;importjava.util.Set;importstaticcom.hankcs.hanlp.utility.Predefine.logger;publicclassCommonStringDictionary{BinTrie<Byte>trie;publicbooleanload(Stringpath){trie=newBinTrie<Byte>();if(loadDat(path+Predefine.TRIE_EXT))returntrue;Stringline=null;try{BufferedReaderbw=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path)));while((line=bw.readLine())!=null){trie.put(line,null);}bw.close();}catch(Exceptione){logger.warning(\"加载\"+path+\"失败，\"+e);}if(!trie.save(path+Predefine.TRIE_EXT))logger.warning(\"缓存\"+path+Predefine.TRIE_EXT+\"失败\");returntrue;}booleanloadDat(Stringpath){returntrie.load(path);}publicSet<String>keySet(){Set<String>keySet=newLinkedHashSet<String>();for(Map.Entry<String,Byte>entry:trie.entrySet()){keySet.add(entry.getKey());}returnkeySet;}}<EOF> "]
130305[label="packageDeclaration\n packagecom.hankcs.hanlp.dictionary.common; "]
230306[label="packageName\n com.hankcs.hanlp.dictionary.common "]
330307[label="packageName\n com.hankcs.hanlp.dictionary "]
430308[label="packageName\n com.hankcs.hanlp "]
530309[label="packageName\n com.hankcs "]
630310[label="packageName\n com "]
130311[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.bintrie.BinTrie; "]
230312[label="typeName\n com.hankcs.hanlp.collection.trie.bintrie.BinTrie "]
330313[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie.bintrie "]
430314[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
530315[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
630316[label="packageOrTypeName\n com.hankcs.hanlp "]
730317[label="packageOrTypeName\n com.hankcs "]
830318[label="packageOrTypeName\n com "]
130319[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
230320[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
330321[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
430322[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
530323[label="packageOrTypeName\n com.hankcs.hanlp "]
630324[label="packageOrTypeName\n com.hankcs "]
730325[label="packageOrTypeName\n com "]
130326[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.Predefine; "]
230327[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
330328[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
430329[label="packageOrTypeName\n com.hankcs.hanlp "]
530330[label="packageOrTypeName\n com.hankcs "]
630331[label="packageOrTypeName\n com "]
130332[label="singleTypeImportDeclaration\n importjava.io.BufferedReader; "]
230333[label="typeName\n java.io.BufferedReader "]
330334[label="packageOrTypeName\n java.io "]
430335[label="packageOrTypeName\n java "]
130336[label="singleTypeImportDeclaration\n importjava.io.FileInputStream; "]
230337[label="typeName\n java.io.FileInputStream "]
330338[label="packageOrTypeName\n java.io "]
430339[label="packageOrTypeName\n java "]
130340[label="singleTypeImportDeclaration\n importjava.io.InputStreamReader; "]
230341[label="typeName\n java.io.InputStreamReader "]
330342[label="packageOrTypeName\n java.io "]
430343[label="packageOrTypeName\n java "]
130344[label="singleTypeImportDeclaration\n importjava.util.LinkedHashSet; "]
230345[label="typeName\n java.util.LinkedHashSet "]
330346[label="packageOrTypeName\n java.util "]
430347[label="packageOrTypeName\n java "]
130348[label="singleTypeImportDeclaration\n importjava.util.Map; "]
230349[label="typeName\n java.util.Map "]
330350[label="packageOrTypeName\n java.util "]
430351[label="packageOrTypeName\n java "]
130352[label="singleTypeImportDeclaration\n importjava.util.Set; "]
230353[label="typeName\n java.util.Set "]
330354[label="packageOrTypeName\n java.util "]
430355[label="packageOrTypeName\n java "]
130356[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.utility.Predefine.logger; "]
230357[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
330358[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
430359[label="packageOrTypeName\n com.hankcs.hanlp "]
530360[label="packageOrTypeName\n com.hankcs "]
630361[label="packageOrTypeName\n com "]
130362[label="normalClassDeclaration\n publicclassCommonStringDictionary{BinTrie<Byte>trie;publicbooleanload(Stringpath){trie=newBinTrie<Byte>();if(loadDat(path+Predefine.TRIE_EXT))returntrue;Stringline=null;try{BufferedReaderbw=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path)));while((line=bw.readLine())!=null){trie.put(line,null);}bw.close();}catch(Exceptione){logger.warning(\"加载\"+path+\"失败，\"+e);}if(!trie.save(path+Predefine.TRIE_EXT))logger.warning(\"缓存\"+path+Predefine.TRIE_EXT+\"失败\");returntrue;}booleanloadDat(Stringpath){returntrie.load(path);}publicSet<String>keySet(){Set<String>keySet=newLinkedHashSet<String>();for(Map.Entry<String,Byte>entry:trie.entrySet()){keySet.add(entry.getKey());}returnkeySet;}} "]
230363[label="classModifier\n public "]
230364[label="classBody\n {BinTrie<Byte>trie;publicbooleanload(Stringpath){trie=newBinTrie<Byte>();if(loadDat(path+Predefine.TRIE_EXT))returntrue;Stringline=null;try{BufferedReaderbw=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path)));while((line=bw.readLine())!=null){trie.put(line,null);}bw.close();}catch(Exceptione){logger.warning(\"加载\"+path+\"失败，\"+e);}if(!trie.save(path+Predefine.TRIE_EXT))logger.warning(\"缓存\"+path+Predefine.TRIE_EXT+\"失败\");returntrue;}booleanloadDat(Stringpath){returntrie.load(path);}publicSet<String>keySet(){Set<String>keySet=newLinkedHashSet<String>();for(Map.Entry<String,Byte>entry:trie.entrySet()){keySet.add(entry.getKey());}returnkeySet;}} "]
330365[label="fieldDeclaration\n BinTrie<Byte>trie; "]
430366[label="unannClassType_lfno_unannClassOrInterfaceType\n BinTrie<Byte> "]
530367[label="typeArguments\n <Byte> "]
630368[label="classType_lfno_classOrInterfaceType\n Byte "]
430369[label="variableDeclaratorId\n trie "]
330370[label="methodDeclaration\n publicbooleanload(Stringpath){trie=newBinTrie<Byte>();if(loadDat(path+Predefine.TRIE_EXT))returntrue;Stringline=null;try{BufferedReaderbw=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path)));while((line=bw.readLine())!=null){trie.put(line,null);}bw.close();}catch(Exceptione){logger.warning(\"加载\"+path+\"失败，\"+e);}if(!trie.save(path+Predefine.TRIE_EXT))logger.warning(\"缓存\"+path+Predefine.TRIE_EXT+\"失败\");returntrue;} "]
430371[label="methodModifier\n public "]
430372[label="methodHeader\n booleanload(Stringpath) "]
530373[label="unannPrimitiveType\n boolean "]
530374[label="methodDeclarator\n load(Stringpath) "]
630375[label="formalParameter\n Stringpath "]
730376[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
730377[label="variableDeclaratorId\n path "]
430378[label="block\n {trie=newBinTrie<Byte>();if(loadDat(path+Predefine.TRIE_EXT))returntrue;Stringline=null;try{BufferedReaderbw=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path)));while((line=bw.readLine())!=null){trie.put(line,null);}bw.close();}catch(Exceptione){logger.warning(\"加载\"+path+\"失败，\"+e);}if(!trie.save(path+Predefine.TRIE_EXT))logger.warning(\"缓存\"+path+Predefine.TRIE_EXT+\"失败\");returntrue;} "]
530379[label="blockStatements\n trie=newBinTrie<Byte>();if(loadDat(path+Predefine.TRIE_EXT))returntrue;Stringline=null;try{BufferedReaderbw=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path)));while((line=bw.readLine())!=null){trie.put(line,null);}bw.close();}catch(Exceptione){logger.warning(\"加载\"+path+\"失败，\"+e);}if(!trie.save(path+Predefine.TRIE_EXT))logger.warning(\"缓存\"+path+Predefine.TRIE_EXT+\"失败\");returntrue; "]
630380[label="expressionStatement\n trie=newBinTrie<Byte>(); "]
730381[label="assignment\n trie=newBinTrie<Byte>() "]
830382[label="expressionName\n trie "]
830383[label="assignmentOperator\n = "]
830384[label="classInstanceCreationExpression_lfno_primary\n newBinTrie<Byte>() "]
930385[label="typeArguments\n <Byte> "]
1030386[label="classType_lfno_classOrInterfaceType\n Byte "]
630387[label="ifThenStatement\n if(loadDat(path+Predefine.TRIE_EXT))returntrue; "]
730388[label="methodInvocation_lfno_primary\n loadDat(path+Predefine.TRIE_EXT) "]
830389[label="methodName\n loadDat "]
830390[label="additiveExpression\n path+Predefine.TRIE_EXT "]
930391[label="expressionName\n path "]
930392[label="expressionName\n Predefine.TRIE_EXT "]
1030393[label="ambiguousName\n Predefine "]
730394[label="returnStatement\n returntrue; "]
830395[label="literal\n true "]
630396[label="localVariableDeclarationStatement\n Stringline=null; "]
730397[label="localVariableDeclaration\n Stringline=null "]
830398[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
830399[label="variableDeclarator\n line=null "]
930400[label="variableDeclaratorId\n line "]
930401[label="literal\n null "]
630402[label="tryStatement\n try{BufferedReaderbw=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path)));while((line=bw.readLine())!=null){trie.put(line,null);}bw.close();}catch(Exceptione){logger.warning(\"加载\"+path+\"失败，\"+e);} "]
730403[label="block\n {BufferedReaderbw=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path)));while((line=bw.readLine())!=null){trie.put(line,null);}bw.close();} "]
830404[label="blockStatements\n BufferedReaderbw=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path)));while((line=bw.readLine())!=null){trie.put(line,null);}bw.close(); "]
930405[label="localVariableDeclarationStatement\n BufferedReaderbw=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path))); "]
1030406[label="localVariableDeclaration\n BufferedReaderbw=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path))) "]
1130407[label="unannClassType_lfno_unannClassOrInterfaceType\n BufferedReader "]
1130408[label="variableDeclarator\n bw=newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path))) "]
1230409[label="variableDeclaratorId\n bw "]
1230410[label="classInstanceCreationExpression_lfno_primary\n newBufferedReader(newInputStreamReader(IOUtil.newInputStream(path))) "]
1330411[label="classInstanceCreationExpression_lfno_primary\n newInputStreamReader(IOUtil.newInputStream(path)) "]
1430412[label="methodInvocation_lfno_primary\n IOUtil.newInputStream(path) "]
1530413[label="typeName\n IOUtil "]
1530414[label="expressionName\n path "]
930415[label="whileStatement\n while((line=bw.readLine())!=null){trie.put(line,null);} "]
1030416[label="equalityExpression\n (line=bw.readLine())!=null "]
1130417[label="primaryNoNewArray_lfno_primary\n (line=bw.readLine()) "]
1230418[label="assignment\n line=bw.readLine() "]
1330419[label="expressionName\n line "]
1330420[label="assignmentOperator\n = "]
1330421[label="methodInvocation_lfno_primary\n bw.readLine() "]
1430422[label="typeName\n bw "]
1130423[label="literal\n null "]
1030424[label="block\n {trie.put(line,null);} "]
1130425[label="expressionStatement\n trie.put(line,null); "]
1230426[label="methodInvocation\n trie.put(line,null) "]
1330427[label="typeName\n trie "]
1330428[label="argumentList\n line,null "]
1430429[label="expressionName\n line "]
1430430[label="literal\n null "]
930431[label="expressionStatement\n bw.close(); "]
1030432[label="methodInvocation\n bw.close() "]
1130433[label="typeName\n bw "]
730434[label="catchClause\n catch(Exceptione){logger.warning(\"加载\"+path+\"失败，\"+e);} "]
830435[label="catchFormalParameter\n Exceptione "]
930436[label="unannClassType\n Exception "]
930437[label="variableDeclaratorId\n e "]
830438[label="block\n {logger.warning(\"加载\"+path+\"失败，\"+e);} "]
930439[label="expressionStatement\n logger.warning(\"加载\"+path+\"失败，\"+e); "]
1030440[label="methodInvocation\n logger.warning(\"加载\"+path+\"失败，\"+e) "]
1130441[label="typeName\n logger "]
1130442[label="additiveExpression\n \"加载\"+path+\"失败，\"+e "]
1230443[label="additiveExpression\n \"加载\"+path+\"失败，\" "]
1330444[label="additiveExpression\n \"加载\"+path "]
1430445[label="literal\n \"加载\" "]
1430446[label="expressionName\n path "]
1330447[label="literal\n \"失败，\" "]
1230448[label="expressionName\n e "]
630449[label="ifThenStatement\n if(!trie.save(path+Predefine.TRIE_EXT))logger.warning(\"缓存\"+path+Predefine.TRIE_EXT+\"失败\"); "]
730450[label="unaryExpressionNotPlusMinus\n !trie.save(path+Predefine.TRIE_EXT) "]
830451[label="methodInvocation_lfno_primary\n trie.save(path+Predefine.TRIE_EXT) "]
930452[label="typeName\n trie "]
930453[label="additiveExpression\n path+Predefine.TRIE_EXT "]
1030454[label="expressionName\n path "]
1030455[label="expressionName\n Predefine.TRIE_EXT "]
1130456[label="ambiguousName\n Predefine "]
730457[label="expressionStatement\n logger.warning(\"缓存\"+path+Predefine.TRIE_EXT+\"失败\"); "]
830458[label="methodInvocation\n logger.warning(\"缓存\"+path+Predefine.TRIE_EXT+\"失败\") "]
930459[label="typeName\n logger "]
930460[label="additiveExpression\n \"缓存\"+path+Predefine.TRIE_EXT+\"失败\" "]
1030461[label="additiveExpression\n \"缓存\"+path+Predefine.TRIE_EXT "]
1130462[label="additiveExpression\n \"缓存\"+path "]
1230463[label="literal\n \"缓存\" "]
1230464[label="expressionName\n path "]
1130465[label="expressionName\n Predefine.TRIE_EXT "]
1230466[label="ambiguousName\n Predefine "]
1030467[label="literal\n \"失败\" "]
630468[label="returnStatement\n returntrue; "]
730469[label="literal\n true "]
330470[label="methodDeclaration\n booleanloadDat(Stringpath){returntrie.load(path);} "]
430471[label="methodHeader\n booleanloadDat(Stringpath) "]
530472[label="unannPrimitiveType\n boolean "]
530473[label="methodDeclarator\n loadDat(Stringpath) "]
630474[label="formalParameter\n Stringpath "]
730475[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
730476[label="variableDeclaratorId\n path "]
430477[label="block\n {returntrie.load(path);} "]
530478[label="returnStatement\n returntrie.load(path); "]
630479[label="methodInvocation_lfno_primary\n trie.load(path) "]
730480[label="typeName\n trie "]
730481[label="expressionName\n path "]
330482[label="methodDeclaration\n publicSet<String>keySet(){Set<String>keySet=newLinkedHashSet<String>();for(Map.Entry<String,Byte>entry:trie.entrySet()){keySet.add(entry.getKey());}returnkeySet;} "]
430483[label="methodModifier\n public "]
430484[label="methodHeader\n Set<String>keySet() "]
530485[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
630486[label="typeArguments\n <String> "]
730487[label="classType_lfno_classOrInterfaceType\n String "]
530488[label="methodDeclarator\n keySet() "]
430489[label="block\n {Set<String>keySet=newLinkedHashSet<String>();for(Map.Entry<String,Byte>entry:trie.entrySet()){keySet.add(entry.getKey());}returnkeySet;} "]
530490[label="blockStatements\n Set<String>keySet=newLinkedHashSet<String>();for(Map.Entry<String,Byte>entry:trie.entrySet()){keySet.add(entry.getKey());}returnkeySet; "]
630491[label="localVariableDeclarationStatement\n Set<String>keySet=newLinkedHashSet<String>(); "]
730492[label="localVariableDeclaration\n Set<String>keySet=newLinkedHashSet<String>() "]
830493[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<String> "]
930494[label="typeArguments\n <String> "]
1030495[label="classType_lfno_classOrInterfaceType\n String "]
830496[label="variableDeclarator\n keySet=newLinkedHashSet<String>() "]
930497[label="variableDeclaratorId\n keySet "]
930498[label="classInstanceCreationExpression_lfno_primary\n newLinkedHashSet<String>() "]
1030499[label="typeArguments\n <String> "]
1130500[label="classType_lfno_classOrInterfaceType\n String "]
630501[label="enhancedForStatement\n for(Map.Entry<String,Byte>entry:trie.entrySet()){keySet.add(entry.getKey());} "]
730502[label="unannClassOrInterfaceType\n Map.Entry<String,Byte> "]
830503[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
830504[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,Byte> "]
930505[label="typeArguments\n <String,Byte> "]
1030506[label="typeArgumentList\n String,Byte "]
1130507[label="classType_lfno_classOrInterfaceType\n String "]
1130508[label="classType_lfno_classOrInterfaceType\n Byte "]
730509[label="variableDeclaratorId\n entry "]
730510[label="methodInvocation_lfno_primary\n trie.entrySet() "]
830511[label="typeName\n trie "]
730512[label="block\n {keySet.add(entry.getKey());} "]
830513[label="expressionStatement\n keySet.add(entry.getKey()); "]
930514[label="methodInvocation\n keySet.add(entry.getKey()) "]
1030515[label="typeName\n keySet "]
1030516[label="methodInvocation_lfno_primary\n entry.getKey() "]
1130517[label="typeName\n entry "]
630518[label="returnStatement\n returnkeySet; "]
730519[label="expressionName\n keySet "]
030520[label="compilationUnit\n packagecom.hankcs.hanlp.corpus.dictionary;importcom.hankcs.hanlp.collection.trie.bintrie.BinTrie;importcom.hankcs.hanlp.corpus.occurrence.TermFrequency;importcom.hankcs.hanlp.seg.common.Term;importcom.hankcs.hanlp.tokenizer.StandardTokenizer;importjava.util.ArrayList;importjava.util.Collections;importjava.util.List;importjava.util.TreeSet;publicclassCommonSuffixExtractor{TFDictionarytfDictionary;publicCommonSuffixExtractor(){tfDictionary=newTFDictionary();}publicvoidadd(Stringkey){tfDictionary.add(key);}publicList<String>extractSuffixExtended(intlength,intsize){returnextractSuffix(length,size,true);}publicList<String>extractSuffix(intlength,intsize,booleanextend){TFDictionarysuffixTreeSet=newTFDictionary();for(Stringkey:tfDictionary.keySet()){if(key.length()>length){suffixTreeSet.add(key.substring(key.length()-length,key.length()));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(key.substring(key.length()-l,key.length()));}}}}if(extend){size*=length;}returnextract(suffixTreeSet,size);}privatestaticList<String>extract(TFDictionarysuffixTreeSet,intsize){List<String>suffixList=newArrayList<String>(size);for(TermFrequencytermFrequency:suffixTreeSet.values()){if(suffixList.size()>=size)break;suffixList.add(termFrequency.getKey());}returnsuffixList;}publicList<String>extractSuffixByWords(intlength,intsize,booleanextend){TFDictionarysuffixTreeSet=newTFDictionary();for(Stringkey:tfDictionary.keySet()){List<Term>termList=StandardTokenizer.segment(key);if(termList.size()>length){suffixTreeSet.add(combine(termList.subList(termList.size()-length,termList.size())));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(combine(termList.subList(termList.size()-l,termList.size())));}}}}returnextract(suffixTreeSet,size);}privatestaticStringcombine(List<Term>termList){StringBuildersbResult=newStringBuilder();for(Termterm:termList){sbResult.append(term.word);}returnsbResult.toString();}}<EOF> "]
130521[label="packageDeclaration\n packagecom.hankcs.hanlp.corpus.dictionary; "]
230522[label="packageName\n com.hankcs.hanlp.corpus.dictionary "]
330523[label="packageName\n com.hankcs.hanlp.corpus "]
430524[label="packageName\n com.hankcs.hanlp "]
530525[label="packageName\n com.hankcs "]
630526[label="packageName\n com "]
130527[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.bintrie.BinTrie; "]
230528[label="typeName\n com.hankcs.hanlp.collection.trie.bintrie.BinTrie "]
330529[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie.bintrie "]
430530[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
530531[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
630532[label="packageOrTypeName\n com.hankcs.hanlp "]
730533[label="packageOrTypeName\n com.hankcs "]
830534[label="packageOrTypeName\n com "]
130535[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.occurrence.TermFrequency; "]
230536[label="typeName\n com.hankcs.hanlp.corpus.occurrence.TermFrequency "]
330537[label="packageOrTypeName\n com.hankcs.hanlp.corpus.occurrence "]
430538[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
530539[label="packageOrTypeName\n com.hankcs.hanlp "]
630540[label="packageOrTypeName\n com.hankcs "]
730541[label="packageOrTypeName\n com "]
130542[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.common.Term; "]
230543[label="typeName\n com.hankcs.hanlp.seg.common.Term "]
330544[label="packageOrTypeName\n com.hankcs.hanlp.seg.common "]
430545[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
530546[label="packageOrTypeName\n com.hankcs.hanlp "]
630547[label="packageOrTypeName\n com.hankcs "]
730548[label="packageOrTypeName\n com "]
130549[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.tokenizer.StandardTokenizer; "]
230550[label="typeName\n com.hankcs.hanlp.tokenizer.StandardTokenizer "]
330551[label="packageOrTypeName\n com.hankcs.hanlp.tokenizer "]
430552[label="packageOrTypeName\n com.hankcs.hanlp "]
530553[label="packageOrTypeName\n com.hankcs "]
630554[label="packageOrTypeName\n com "]
130555[label="singleTypeImportDeclaration\n importjava.util.ArrayList; "]
230556[label="typeName\n java.util.ArrayList "]
330557[label="packageOrTypeName\n java.util "]
430558[label="packageOrTypeName\n java "]
130559[label="singleTypeImportDeclaration\n importjava.util.Collections; "]
230560[label="typeName\n java.util.Collections "]
330561[label="packageOrTypeName\n java.util "]
430562[label="packageOrTypeName\n java "]
130563[label="singleTypeImportDeclaration\n importjava.util.List; "]
230564[label="typeName\n java.util.List "]
330565[label="packageOrTypeName\n java.util "]
430566[label="packageOrTypeName\n java "]
130567[label="singleTypeImportDeclaration\n importjava.util.TreeSet; "]
230568[label="typeName\n java.util.TreeSet "]
330569[label="packageOrTypeName\n java.util "]
430570[label="packageOrTypeName\n java "]
130571[label="normalClassDeclaration\n publicclassCommonSuffixExtractor{TFDictionarytfDictionary;publicCommonSuffixExtractor(){tfDictionary=newTFDictionary();}publicvoidadd(Stringkey){tfDictionary.add(key);}publicList<String>extractSuffixExtended(intlength,intsize){returnextractSuffix(length,size,true);}publicList<String>extractSuffix(intlength,intsize,booleanextend){TFDictionarysuffixTreeSet=newTFDictionary();for(Stringkey:tfDictionary.keySet()){if(key.length()>length){suffixTreeSet.add(key.substring(key.length()-length,key.length()));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(key.substring(key.length()-l,key.length()));}}}}if(extend){size*=length;}returnextract(suffixTreeSet,size);}privatestaticList<String>extract(TFDictionarysuffixTreeSet,intsize){List<String>suffixList=newArrayList<String>(size);for(TermFrequencytermFrequency:suffixTreeSet.values()){if(suffixList.size()>=size)break;suffixList.add(termFrequency.getKey());}returnsuffixList;}publicList<String>extractSuffixByWords(intlength,intsize,booleanextend){TFDictionarysuffixTreeSet=newTFDictionary();for(Stringkey:tfDictionary.keySet()){List<Term>termList=StandardTokenizer.segment(key);if(termList.size()>length){suffixTreeSet.add(combine(termList.subList(termList.size()-length,termList.size())));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(combine(termList.subList(termList.size()-l,termList.size())));}}}}returnextract(suffixTreeSet,size);}privatestaticStringcombine(List<Term>termList){StringBuildersbResult=newStringBuilder();for(Termterm:termList){sbResult.append(term.word);}returnsbResult.toString();}} "]
230572[label="classModifier\n public "]
230573[label="classBody\n {TFDictionarytfDictionary;publicCommonSuffixExtractor(){tfDictionary=newTFDictionary();}publicvoidadd(Stringkey){tfDictionary.add(key);}publicList<String>extractSuffixExtended(intlength,intsize){returnextractSuffix(length,size,true);}publicList<String>extractSuffix(intlength,intsize,booleanextend){TFDictionarysuffixTreeSet=newTFDictionary();for(Stringkey:tfDictionary.keySet()){if(key.length()>length){suffixTreeSet.add(key.substring(key.length()-length,key.length()));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(key.substring(key.length()-l,key.length()));}}}}if(extend){size*=length;}returnextract(suffixTreeSet,size);}privatestaticList<String>extract(TFDictionarysuffixTreeSet,intsize){List<String>suffixList=newArrayList<String>(size);for(TermFrequencytermFrequency:suffixTreeSet.values()){if(suffixList.size()>=size)break;suffixList.add(termFrequency.getKey());}returnsuffixList;}publicList<String>extractSuffixByWords(intlength,intsize,booleanextend){TFDictionarysuffixTreeSet=newTFDictionary();for(Stringkey:tfDictionary.keySet()){List<Term>termList=StandardTokenizer.segment(key);if(termList.size()>length){suffixTreeSet.add(combine(termList.subList(termList.size()-length,termList.size())));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(combine(termList.subList(termList.size()-l,termList.size())));}}}}returnextract(suffixTreeSet,size);}privatestaticStringcombine(List<Term>termList){StringBuildersbResult=newStringBuilder();for(Termterm:termList){sbResult.append(term.word);}returnsbResult.toString();}} "]
330574[label="fieldDeclaration\n TFDictionarytfDictionary; "]
430575[label="unannClassType_lfno_unannClassOrInterfaceType\n TFDictionary "]
430576[label="variableDeclaratorId\n tfDictionary "]
330577[label="constructorDeclaration\n publicCommonSuffixExtractor(){tfDictionary=newTFDictionary();} "]
430578[label="constructorModifier\n public "]
430579[label="constructorDeclarator\n CommonSuffixExtractor() "]
530580[label="simpleTypeName\n CommonSuffixExtractor "]
430581[label="constructorBody\n {tfDictionary=newTFDictionary();} "]
530582[label="expressionStatement\n tfDictionary=newTFDictionary(); "]
630583[label="assignment\n tfDictionary=newTFDictionary() "]
730584[label="expressionName\n tfDictionary "]
730585[label="assignmentOperator\n = "]
730586[label="classInstanceCreationExpression_lfno_primary\n newTFDictionary() "]
330587[label="methodDeclaration\n publicvoidadd(Stringkey){tfDictionary.add(key);} "]
430588[label="methodModifier\n public "]
430589[label="methodHeader\n voidadd(Stringkey) "]
530590[label="result\n void "]
530591[label="methodDeclarator\n add(Stringkey) "]
630592[label="formalParameter\n Stringkey "]
730593[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
730594[label="variableDeclaratorId\n key "]
430595[label="block\n {tfDictionary.add(key);} "]
530596[label="expressionStatement\n tfDictionary.add(key); "]
630597[label="methodInvocation\n tfDictionary.add(key) "]
730598[label="typeName\n tfDictionary "]
730599[label="expressionName\n key "]
330600[label="methodDeclaration\n publicList<String>extractSuffixExtended(intlength,intsize){returnextractSuffix(length,size,true);} "]
430601[label="methodModifier\n public "]
430602[label="methodHeader\n List<String>extractSuffixExtended(intlength,intsize) "]
530603[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
630604[label="typeArguments\n <String> "]
730605[label="classType_lfno_classOrInterfaceType\n String "]
530606[label="methodDeclarator\n extractSuffixExtended(intlength,intsize) "]
630607[label="formalParameterList\n intlength,intsize "]
730608[label="formalParameter\n intlength "]
830609[label="integralType\n int "]
830610[label="variableDeclaratorId\n length "]
730611[label="formalParameter\n intsize "]
830612[label="integralType\n int "]
830613[label="variableDeclaratorId\n size "]
430614[label="block\n {returnextractSuffix(length,size,true);} "]
530615[label="returnStatement\n returnextractSuffix(length,size,true); "]
630616[label="methodInvocation_lfno_primary\n extractSuffix(length,size,true) "]
730617[label="methodName\n extractSuffix "]
730618[label="argumentList\n length,size,true "]
830619[label="expressionName\n length "]
830620[label="expressionName\n size "]
830621[label="literal\n true "]
330622[label="methodDeclaration\n publicList<String>extractSuffix(intlength,intsize,booleanextend){TFDictionarysuffixTreeSet=newTFDictionary();for(Stringkey:tfDictionary.keySet()){if(key.length()>length){suffixTreeSet.add(key.substring(key.length()-length,key.length()));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(key.substring(key.length()-l,key.length()));}}}}if(extend){size*=length;}returnextract(suffixTreeSet,size);} "]
430623[label="methodModifier\n public "]
430624[label="methodHeader\n List<String>extractSuffix(intlength,intsize,booleanextend) "]
530625[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
630626[label="typeArguments\n <String> "]
730627[label="classType_lfno_classOrInterfaceType\n String "]
530628[label="methodDeclarator\n extractSuffix(intlength,intsize,booleanextend) "]
630629[label="formalParameterList\n intlength,intsize,booleanextend "]
730630[label="formalParameters\n intlength,intsize "]
830631[label="formalParameter\n intlength "]
930632[label="integralType\n int "]
930633[label="variableDeclaratorId\n length "]
830634[label="formalParameter\n intsize "]
930635[label="integralType\n int "]
930636[label="variableDeclaratorId\n size "]
730637[label="formalParameter\n booleanextend "]
830638[label="unannPrimitiveType\n boolean "]
830639[label="variableDeclaratorId\n extend "]
430640[label="block\n {TFDictionarysuffixTreeSet=newTFDictionary();for(Stringkey:tfDictionary.keySet()){if(key.length()>length){suffixTreeSet.add(key.substring(key.length()-length,key.length()));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(key.substring(key.length()-l,key.length()));}}}}if(extend){size*=length;}returnextract(suffixTreeSet,size);} "]
530641[label="blockStatements\n TFDictionarysuffixTreeSet=newTFDictionary();for(Stringkey:tfDictionary.keySet()){if(key.length()>length){suffixTreeSet.add(key.substring(key.length()-length,key.length()));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(key.substring(key.length()-l,key.length()));}}}}if(extend){size*=length;}returnextract(suffixTreeSet,size); "]
630642[label="localVariableDeclarationStatement\n TFDictionarysuffixTreeSet=newTFDictionary(); "]
730643[label="localVariableDeclaration\n TFDictionarysuffixTreeSet=newTFDictionary() "]
830644[label="unannClassType_lfno_unannClassOrInterfaceType\n TFDictionary "]
830645[label="variableDeclarator\n suffixTreeSet=newTFDictionary() "]
930646[label="variableDeclaratorId\n suffixTreeSet "]
930647[label="classInstanceCreationExpression_lfno_primary\n newTFDictionary() "]
630648[label="enhancedForStatement\n for(Stringkey:tfDictionary.keySet()){if(key.length()>length){suffixTreeSet.add(key.substring(key.length()-length,key.length()));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(key.substring(key.length()-l,key.length()));}}}} "]
730649[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
730650[label="variableDeclaratorId\n key "]
730651[label="methodInvocation_lfno_primary\n tfDictionary.keySet() "]
830652[label="typeName\n tfDictionary "]
730653[label="block\n {if(key.length()>length){suffixTreeSet.add(key.substring(key.length()-length,key.length()));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(key.substring(key.length()-l,key.length()));}}}} "]
830654[label="ifThenStatement\n if(key.length()>length){suffixTreeSet.add(key.substring(key.length()-length,key.length()));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(key.substring(key.length()-l,key.length()));}}} "]
930655[label="relationalExpression\n key.length()>length "]
1030656[label="methodInvocation_lfno_primary\n key.length() "]
1130657[label="typeName\n key "]
1030658[label="expressionName\n length "]
930659[label="block\n {suffixTreeSet.add(key.substring(key.length()-length,key.length()));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(key.substring(key.length()-l,key.length()));}}} "]
1030660[label="blockStatements\n suffixTreeSet.add(key.substring(key.length()-length,key.length()));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(key.substring(key.length()-l,key.length()));}} "]
1130661[label="expressionStatement\n suffixTreeSet.add(key.substring(key.length()-length,key.length())); "]
1230662[label="methodInvocation\n suffixTreeSet.add(key.substring(key.length()-length,key.length())) "]
1330663[label="typeName\n suffixTreeSet "]
1330664[label="methodInvocation_lfno_primary\n key.substring(key.length()-length,key.length()) "]
1430665[label="typeName\n key "]
1430666[label="argumentList\n key.length()-length,key.length() "]
1530667[label="additiveExpression\n key.length()-length "]
1630668[label="methodInvocation_lfno_primary\n key.length() "]
1730669[label="typeName\n key "]
1630670[label="expressionName\n length "]
1530671[label="methodInvocation_lfno_primary\n key.length() "]
1630672[label="typeName\n key "]
1130673[label="ifThenStatement\n if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(key.substring(key.length()-l,key.length()));}} "]
1230674[label="expressionName\n extend "]
1230675[label="block\n {for(intl=1;l<length;++l){suffixTreeSet.add(key.substring(key.length()-l,key.length()));}} "]
1330676[label="basicForStatement\n for(intl=1;l<length;++l){suffixTreeSet.add(key.substring(key.length()-l,key.length()));} "]
1430677[label="localVariableDeclaration\n intl=1 "]
1530678[label="integralType\n int "]
1530679[label="variableDeclarator\n l=1 "]
1630680[label="variableDeclaratorId\n l "]
1630681[label="literal\n 1 "]
1430682[label="relationalExpression\n l<length "]
1530683[label="expressionName\n l "]
1530684[label="expressionName\n length "]
1430685[label="preIncrementExpression\n ++l "]
1530686[label="expressionName\n l "]
1430687[label="block\n {suffixTreeSet.add(key.substring(key.length()-l,key.length()));} "]
1530688[label="expressionStatement\n suffixTreeSet.add(key.substring(key.length()-l,key.length())); "]
1630689[label="methodInvocation\n suffixTreeSet.add(key.substring(key.length()-l,key.length())) "]
1730690[label="typeName\n suffixTreeSet "]
1730691[label="methodInvocation_lfno_primary\n key.substring(key.length()-l,key.length()) "]
1830692[label="typeName\n key "]
1830693[label="argumentList\n key.length()-l,key.length() "]
1930694[label="additiveExpression\n key.length()-l "]
2030695[label="methodInvocation_lfno_primary\n key.length() "]
2130696[label="typeName\n key "]
2030697[label="expressionName\n l "]
1930698[label="methodInvocation_lfno_primary\n key.length() "]
2030699[label="typeName\n key "]
630700[label="ifThenStatement\n if(extend){size*=length;} "]
730701[label="expressionName\n extend "]
730702[label="block\n {size*=length;} "]
830703[label="expressionStatement\n size*=length; "]
930704[label="assignment\n size*=length "]
1030705[label="expressionName\n size "]
1030706[label="assignmentOperator\n *= "]
1030707[label="expressionName\n length "]
630708[label="returnStatement\n returnextract(suffixTreeSet,size); "]
730709[label="methodInvocation_lfno_primary\n extract(suffixTreeSet,size) "]
830710[label="methodName\n extract "]
830711[label="argumentList\n suffixTreeSet,size "]
930712[label="expressionName\n suffixTreeSet "]
930713[label="expressionName\n size "]
330714[label="methodDeclaration\n privatestaticList<String>extract(TFDictionarysuffixTreeSet,intsize){List<String>suffixList=newArrayList<String>(size);for(TermFrequencytermFrequency:suffixTreeSet.values()){if(suffixList.size()>=size)break;suffixList.add(termFrequency.getKey());}returnsuffixList;} "]
430715[label="methodModifier\n private "]
430716[label="methodModifier\n static "]
430717[label="methodHeader\n List<String>extract(TFDictionarysuffixTreeSet,intsize) "]
530718[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
630719[label="typeArguments\n <String> "]
730720[label="classType_lfno_classOrInterfaceType\n String "]
530721[label="methodDeclarator\n extract(TFDictionarysuffixTreeSet,intsize) "]
630722[label="formalParameterList\n TFDictionarysuffixTreeSet,intsize "]
730723[label="formalParameter\n TFDictionarysuffixTreeSet "]
830724[label="unannClassType_lfno_unannClassOrInterfaceType\n TFDictionary "]
830725[label="variableDeclaratorId\n suffixTreeSet "]
730726[label="formalParameter\n intsize "]
830727[label="integralType\n int "]
830728[label="variableDeclaratorId\n size "]
430729[label="block\n {List<String>suffixList=newArrayList<String>(size);for(TermFrequencytermFrequency:suffixTreeSet.values()){if(suffixList.size()>=size)break;suffixList.add(termFrequency.getKey());}returnsuffixList;} "]
530730[label="blockStatements\n List<String>suffixList=newArrayList<String>(size);for(TermFrequencytermFrequency:suffixTreeSet.values()){if(suffixList.size()>=size)break;suffixList.add(termFrequency.getKey());}returnsuffixList; "]
630731[label="localVariableDeclarationStatement\n List<String>suffixList=newArrayList<String>(size); "]
730732[label="localVariableDeclaration\n List<String>suffixList=newArrayList<String>(size) "]
830733[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
930734[label="typeArguments\n <String> "]
1030735[label="classType_lfno_classOrInterfaceType\n String "]
830736[label="variableDeclarator\n suffixList=newArrayList<String>(size) "]
930737[label="variableDeclaratorId\n suffixList "]
930738[label="classInstanceCreationExpression_lfno_primary\n newArrayList<String>(size) "]
1030739[label="typeArguments\n <String> "]
1130740[label="classType_lfno_classOrInterfaceType\n String "]
1030741[label="expressionName\n size "]
630742[label="enhancedForStatement\n for(TermFrequencytermFrequency:suffixTreeSet.values()){if(suffixList.size()>=size)break;suffixList.add(termFrequency.getKey());} "]
730743[label="unannClassType_lfno_unannClassOrInterfaceType\n TermFrequency "]
730744[label="variableDeclaratorId\n termFrequency "]
730745[label="methodInvocation_lfno_primary\n suffixTreeSet.values() "]
830746[label="typeName\n suffixTreeSet "]
730747[label="block\n {if(suffixList.size()>=size)break;suffixList.add(termFrequency.getKey());} "]
830748[label="blockStatements\n if(suffixList.size()>=size)break;suffixList.add(termFrequency.getKey()); "]
930749[label="ifThenStatement\n if(suffixList.size()>=size)break; "]
1030750[label="relationalExpression\n suffixList.size()>=size "]
1130751[label="methodInvocation_lfno_primary\n suffixList.size() "]
1230752[label="typeName\n suffixList "]
1130753[label="expressionName\n size "]
1030754[label="breakStatement\n break; "]
930755[label="expressionStatement\n suffixList.add(termFrequency.getKey()); "]
1030756[label="methodInvocation\n suffixList.add(termFrequency.getKey()) "]
1130757[label="typeName\n suffixList "]
1130758[label="methodInvocation_lfno_primary\n termFrequency.getKey() "]
1230759[label="typeName\n termFrequency "]
630760[label="returnStatement\n returnsuffixList; "]
730761[label="expressionName\n suffixList "]
330762[label="methodDeclaration\n publicList<String>extractSuffixByWords(intlength,intsize,booleanextend){TFDictionarysuffixTreeSet=newTFDictionary();for(Stringkey:tfDictionary.keySet()){List<Term>termList=StandardTokenizer.segment(key);if(termList.size()>length){suffixTreeSet.add(combine(termList.subList(termList.size()-length,termList.size())));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(combine(termList.subList(termList.size()-l,termList.size())));}}}}returnextract(suffixTreeSet,size);} "]
430763[label="methodModifier\n public "]
430764[label="methodHeader\n List<String>extractSuffixByWords(intlength,intsize,booleanextend) "]
530765[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
630766[label="typeArguments\n <String> "]
730767[label="classType_lfno_classOrInterfaceType\n String "]
530768[label="methodDeclarator\n extractSuffixByWords(intlength,intsize,booleanextend) "]
630769[label="formalParameterList\n intlength,intsize,booleanextend "]
730770[label="formalParameters\n intlength,intsize "]
830771[label="formalParameter\n intlength "]
930772[label="integralType\n int "]
930773[label="variableDeclaratorId\n length "]
830774[label="formalParameter\n intsize "]
930775[label="integralType\n int "]
930776[label="variableDeclaratorId\n size "]
730777[label="formalParameter\n booleanextend "]
830778[label="unannPrimitiveType\n boolean "]
830779[label="variableDeclaratorId\n extend "]
430780[label="block\n {TFDictionarysuffixTreeSet=newTFDictionary();for(Stringkey:tfDictionary.keySet()){List<Term>termList=StandardTokenizer.segment(key);if(termList.size()>length){suffixTreeSet.add(combine(termList.subList(termList.size()-length,termList.size())));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(combine(termList.subList(termList.size()-l,termList.size())));}}}}returnextract(suffixTreeSet,size);} "]
530781[label="blockStatements\n TFDictionarysuffixTreeSet=newTFDictionary();for(Stringkey:tfDictionary.keySet()){List<Term>termList=StandardTokenizer.segment(key);if(termList.size()>length){suffixTreeSet.add(combine(termList.subList(termList.size()-length,termList.size())));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(combine(termList.subList(termList.size()-l,termList.size())));}}}}returnextract(suffixTreeSet,size); "]
630782[label="localVariableDeclarationStatement\n TFDictionarysuffixTreeSet=newTFDictionary(); "]
730783[label="localVariableDeclaration\n TFDictionarysuffixTreeSet=newTFDictionary() "]
830784[label="unannClassType_lfno_unannClassOrInterfaceType\n TFDictionary "]
830785[label="variableDeclarator\n suffixTreeSet=newTFDictionary() "]
930786[label="variableDeclaratorId\n suffixTreeSet "]
930787[label="classInstanceCreationExpression_lfno_primary\n newTFDictionary() "]
630788[label="enhancedForStatement\n for(Stringkey:tfDictionary.keySet()){List<Term>termList=StandardTokenizer.segment(key);if(termList.size()>length){suffixTreeSet.add(combine(termList.subList(termList.size()-length,termList.size())));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(combine(termList.subList(termList.size()-l,termList.size())));}}}} "]
730789[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
730790[label="variableDeclaratorId\n key "]
730791[label="methodInvocation_lfno_primary\n tfDictionary.keySet() "]
830792[label="typeName\n tfDictionary "]
730793[label="block\n {List<Term>termList=StandardTokenizer.segment(key);if(termList.size()>length){suffixTreeSet.add(combine(termList.subList(termList.size()-length,termList.size())));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(combine(termList.subList(termList.size()-l,termList.size())));}}}} "]
830794[label="blockStatements\n List<Term>termList=StandardTokenizer.segment(key);if(termList.size()>length){suffixTreeSet.add(combine(termList.subList(termList.size()-length,termList.size())));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(combine(termList.subList(termList.size()-l,termList.size())));}}} "]
930795[label="localVariableDeclarationStatement\n List<Term>termList=StandardTokenizer.segment(key); "]
1030796[label="localVariableDeclaration\n List<Term>termList=StandardTokenizer.segment(key) "]
1130797[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Term> "]
1230798[label="typeArguments\n <Term> "]
1330799[label="classType_lfno_classOrInterfaceType\n Term "]
1130800[label="variableDeclarator\n termList=StandardTokenizer.segment(key) "]
1230801[label="variableDeclaratorId\n termList "]
1230802[label="methodInvocation_lfno_primary\n StandardTokenizer.segment(key) "]
1330803[label="typeName\n StandardTokenizer "]
1330804[label="expressionName\n key "]
930805[label="ifThenStatement\n if(termList.size()>length){suffixTreeSet.add(combine(termList.subList(termList.size()-length,termList.size())));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(combine(termList.subList(termList.size()-l,termList.size())));}}} "]
1030806[label="relationalExpression\n termList.size()>length "]
1130807[label="methodInvocation_lfno_primary\n termList.size() "]
1230808[label="typeName\n termList "]
1130809[label="expressionName\n length "]
1030810[label="block\n {suffixTreeSet.add(combine(termList.subList(termList.size()-length,termList.size())));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(combine(termList.subList(termList.size()-l,termList.size())));}}} "]
1130811[label="blockStatements\n suffixTreeSet.add(combine(termList.subList(termList.size()-length,termList.size())));if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(combine(termList.subList(termList.size()-l,termList.size())));}} "]
1230812[label="expressionStatement\n suffixTreeSet.add(combine(termList.subList(termList.size()-length,termList.size()))); "]
1330813[label="methodInvocation\n suffixTreeSet.add(combine(termList.subList(termList.size()-length,termList.size()))) "]
1430814[label="typeName\n suffixTreeSet "]
1430815[label="methodInvocation_lfno_primary\n combine(termList.subList(termList.size()-length,termList.size())) "]
1530816[label="methodName\n combine "]
1530817[label="methodInvocation_lfno_primary\n termList.subList(termList.size()-length,termList.size()) "]
1630818[label="typeName\n termList "]
1630819[label="argumentList\n termList.size()-length,termList.size() "]
1730820[label="additiveExpression\n termList.size()-length "]
1830821[label="methodInvocation_lfno_primary\n termList.size() "]
1930822[label="typeName\n termList "]
1830823[label="expressionName\n length "]
1730824[label="methodInvocation_lfno_primary\n termList.size() "]
1830825[label="typeName\n termList "]
1230826[label="ifThenStatement\n if(extend){for(intl=1;l<length;++l){suffixTreeSet.add(combine(termList.subList(termList.size()-l,termList.size())));}} "]
1330827[label="expressionName\n extend "]
1330828[label="block\n {for(intl=1;l<length;++l){suffixTreeSet.add(combine(termList.subList(termList.size()-l,termList.size())));}} "]
1430829[label="basicForStatement\n for(intl=1;l<length;++l){suffixTreeSet.add(combine(termList.subList(termList.size()-l,termList.size())));} "]
1530830[label="localVariableDeclaration\n intl=1 "]
1630831[label="integralType\n int "]
1630832[label="variableDeclarator\n l=1 "]
1730833[label="variableDeclaratorId\n l "]
1730834[label="literal\n 1 "]
1530835[label="relationalExpression\n l<length "]
1630836[label="expressionName\n l "]
1630837[label="expressionName\n length "]
1530838[label="preIncrementExpression\n ++l "]
1630839[label="expressionName\n l "]
1530840[label="block\n {suffixTreeSet.add(combine(termList.subList(termList.size()-l,termList.size())));} "]
1630841[label="expressionStatement\n suffixTreeSet.add(combine(termList.subList(termList.size()-l,termList.size()))); "]
1730842[label="methodInvocation\n suffixTreeSet.add(combine(termList.subList(termList.size()-l,termList.size()))) "]
1830843[label="typeName\n suffixTreeSet "]
1830844[label="methodInvocation_lfno_primary\n combine(termList.subList(termList.size()-l,termList.size())) "]
1930845[label="methodName\n combine "]
1930846[label="methodInvocation_lfno_primary\n termList.subList(termList.size()-l,termList.size()) "]
2030847[label="typeName\n termList "]
2030848[label="argumentList\n termList.size()-l,termList.size() "]
2130849[label="additiveExpression\n termList.size()-l "]
2230850[label="methodInvocation_lfno_primary\n termList.size() "]
2330851[label="typeName\n termList "]
2230852[label="expressionName\n l "]
2130853[label="methodInvocation_lfno_primary\n termList.size() "]
2230854[label="typeName\n termList "]
630855[label="returnStatement\n returnextract(suffixTreeSet,size); "]
730856[label="methodInvocation_lfno_primary\n extract(suffixTreeSet,size) "]
830857[label="methodName\n extract "]
830858[label="argumentList\n suffixTreeSet,size "]
930859[label="expressionName\n suffixTreeSet "]
930860[label="expressionName\n size "]
330861[label="methodDeclaration\n privatestaticStringcombine(List<Term>termList){StringBuildersbResult=newStringBuilder();for(Termterm:termList){sbResult.append(term.word);}returnsbResult.toString();} "]
430862[label="methodModifier\n private "]
430863[label="methodModifier\n static "]
430864[label="methodHeader\n Stringcombine(List<Term>termList) "]
530865[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
530866[label="methodDeclarator\n combine(List<Term>termList) "]
630867[label="formalParameter\n List<Term>termList "]
730868[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Term> "]
830869[label="typeArguments\n <Term> "]
930870[label="classType_lfno_classOrInterfaceType\n Term "]
730871[label="variableDeclaratorId\n termList "]
430872[label="block\n {StringBuildersbResult=newStringBuilder();for(Termterm:termList){sbResult.append(term.word);}returnsbResult.toString();} "]
530873[label="blockStatements\n StringBuildersbResult=newStringBuilder();for(Termterm:termList){sbResult.append(term.word);}returnsbResult.toString(); "]
630874[label="localVariableDeclarationStatement\n StringBuildersbResult=newStringBuilder(); "]
730875[label="localVariableDeclaration\n StringBuildersbResult=newStringBuilder() "]
830876[label="unannClassType_lfno_unannClassOrInterfaceType\n StringBuilder "]
830877[label="variableDeclarator\n sbResult=newStringBuilder() "]
930878[label="variableDeclaratorId\n sbResult "]
930879[label="classInstanceCreationExpression_lfno_primary\n newStringBuilder() "]
630880[label="enhancedForStatement\n for(Termterm:termList){sbResult.append(term.word);} "]
730881[label="unannClassType_lfno_unannClassOrInterfaceType\n Term "]
730882[label="variableDeclaratorId\n term "]
730883[label="expressionName\n termList "]
730884[label="block\n {sbResult.append(term.word);} "]
830885[label="expressionStatement\n sbResult.append(term.word); "]
930886[label="methodInvocation\n sbResult.append(term.word) "]
1030887[label="typeName\n sbResult "]
1030888[label="expressionName\n term.word "]
1130889[label="ambiguousName\n term "]
630890[label="returnStatement\n returnsbResult.toString(); "]
730891[label="methodInvocation_lfno_primary\n sbResult.toString() "]
830892[label="typeName\n sbResult "]
030893[label="compilationUnit\n packagecom.hankcs.hanlp.dictionary.common;importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie;importcom.hankcs.hanlp.corpus.dependency.CoNll.PosTagCompiler;importcom.hankcs.hanlp.corpus.synonym.Synonym;importcom.hankcs.hanlp.corpus.synonym.SynonymHelper;importjava.io.BufferedReader;importjava.io.InputStream;importjava.io.InputStreamReader;importjava.util.ArrayList;importjava.util.List;importjava.util.ListIterator;importjava.util.TreeMap;importcom.hankcs.hanlp.corpus.synonym.Synonym.Type;importcom.hankcs.hanlp.corpus.util.Precompiler;importcom.hankcs.hanlp.dictionary.CoreBiGramTableDictionary;importcom.hankcs.hanlp.seg.common.Term;importcom.hankcs.hanlp.tokenizer.StandardTokenizer;importcom.hankcs.hanlp.utility.Predefine;importstaticcom.hankcs.hanlp.utility.Predefine.logger;publicclassCommonSynonymDictionary{DoubleArrayTrie<SynonymItem>trie;privatelongmaxSynonymItemIdDistance;privateCommonSynonymDictionary(){}publicstaticCommonSynonymDictionarycreate(InputStreaminputStream){CommonSynonymDictionarydictionary=newCommonSynonymDictionary();if(dictionary.load(inputStream)){returndictionary;}returnnull;}publicbooleanload(InputStreaminputStream){trie=newDoubleArrayTrie<SynonymItem>();TreeMap<String,SynonymItem>treeMap=newTreeMap<String,SynonymItem>();Stringline=null;try{BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\"));ArrayList<Synonym>synonymList=null;while((line=bw.readLine())!=null){String[]args=line.split(\" \");synonymList=Synonym.create(args);chartype=args[0].charAt(args[0].length()-1);for(Synonymsynonym:synonymList){treeMap.put(synonym.realWord,newSynonymItem(synonym,synonymList,type));}}bw.close();if(synonymList!=null&&synonymList.size()>0){maxSynonymItemIdDistance=synonymList.get(synonymList.size()-1).id-SynonymHelper.convertString2IdWithIndex(\"Aa01A01\",0)+1;}intresultCode=trie.build(treeMap);if(resultCode!=0){logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;}}catch(Exceptione){logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\");returnfalse;}returntrue;}publicSynonymItemget(Stringkey){returntrie.get(key);}publiclonggetMaxSynonymItemIdDistance(){returnmaxSynonymItemIdDistance;}publiclongdistance(Stringa,Stringb){SynonymItemitemA=get(a);if(itemA==null)returnLong.MAX_VALUE/3;SynonymItemitemB=get(b);if(itemB==null)returnLong.MAX_VALUE/3;returnitemA.distance(itemB);}publicStringrewriteQuickly(Stringtext){asserttext!=null;StringBuildersbOut=newStringBuilder((int)(text.length()*1.2));StringpreWord=Predefine.TAG_BIGIN;for(inti=0;i<text.length();++i){intstate=1;state=trie.transition(text.charAt(i),state);if(state>0){intstart=i;intto=i+1;intend=-1;SynonymItemvalue=null;for(;to<text.length();++to){state=trie.transition(text.charAt(to),state);if(state<0)break;SynonymItemoutput=trie.output(state);if(output!=null){value=output;end=to+1;}}if(value!=null){Synonymsynonym=value.randomSynonym(Type.EQUAL,preWord);if(synonym!=null){sbOut.append(synonym.realWord);preWord=synonym.realWord;}else{preWord=text.substring(start,end);sbOut.append(preWord);}i=end-1;}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));}}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));}}returnsbOut.toString();}publicStringrewrite(Stringtext){List<Term>termList=StandardTokenizer.segment(text.toCharArray());StringBuildersbOut=newStringBuilder((int)(text.length()*1.2));StringpreWord=Predefine.TAG_BIGIN;for(Termterm:termList){SynonymItemsynonymItem=get(term.word);Synonymsynonym;if(synonymItem!=null&&(synonym=synonymItem.randomSynonym(Type.EQUAL,preWord))!=null){sbOut.append(synonym.realWord);}elsesbOut.append(term.word);preWord=PosTagCompiler.compile(term.nature.toString(),term.word);}returnsbOut.toString();}publicstaticclassSynonymItem{publicSynonymentry;publicList<Synonym>synonymList;publicTypetype;publicSynonymItem(Synonymentry,List<Synonym>synonymList,Typetype){this.entry=entry;this.synonymList=synonymList;this.type=type;}publicSynonymItem(Synonymentry,List<Synonym>synonymList,chartype){this.entry=entry;this.synonymList=synonymList;switch(type){case'=':this.type=Type.EQUAL;break;case'#':this.type=Type.LIKE;break;default:this.type=Type.SINGLE;break;}}publicSynonymrandomSynonym(Typetype,StringpreWord){ArrayList<Synonym>synonymArrayList=newArrayList<Synonym>(synonymList);ListIterator<Synonym>listIterator=synonymArrayList.listIterator();if(type!=null)while(listIterator.hasNext()){Synonymsynonym=listIterator.next();if(synonym.type!=type||(preWord!=null&&CoreBiGramTableDictionary.getBiFrequency(preWord,synonym.realWord)==0))listIterator.remove();}if(synonymArrayList.size()==0)returnnull;returnsynonymArrayList.get((int)(System.currentTimeMillis()%(long)synonymArrayList.size()));}publicSynonymrandomSynonym(){returnrandomSynonym(null,null);}@OverridepublicStringtoString(){finalStringBuildersb=newStringBuilder();sb.append(entry);sb.append(' ');sb.append(type);sb.append(' ');sb.append(synonymList);returnsb.toString();}publiclongdistance(SynonymItemother){returnentry.distance(other.entry);}publicstaticSynonymItemcreateUndefined(Stringword){SynonymItemitem=newSynonymItem(newSynonym(word,word.hashCode()*1000000+Long.MAX_VALUE/3),null,Type.UNDEFINED);returnitem;}}}<EOF> "]
130894[label="packageDeclaration\n packagecom.hankcs.hanlp.dictionary.common; "]
230895[label="packageName\n com.hankcs.hanlp.dictionary.common "]
330896[label="packageName\n com.hankcs.hanlp.dictionary "]
430897[label="packageName\n com.hankcs.hanlp "]
530898[label="packageName\n com.hankcs "]
630899[label="packageName\n com "]
130900[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie; "]
230901[label="typeName\n com.hankcs.hanlp.collection.trie.DoubleArrayTrie "]
330902[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
430903[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
530904[label="packageOrTypeName\n com.hankcs.hanlp "]
630905[label="packageOrTypeName\n com.hankcs "]
730906[label="packageOrTypeName\n com "]
130907[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dependency.CoNll.PosTagCompiler; "]
230908[label="typeName\n com.hankcs.hanlp.corpus.dependency.CoNll.PosTagCompiler "]
330909[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency.CoNll "]
430910[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency "]
530911[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
630912[label="packageOrTypeName\n com.hankcs.hanlp "]
730913[label="packageOrTypeName\n com.hankcs "]
830914[label="packageOrTypeName\n com "]
130915[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.synonym.Synonym; "]
230916[label="typeName\n com.hankcs.hanlp.corpus.synonym.Synonym "]
330917[label="packageOrTypeName\n com.hankcs.hanlp.corpus.synonym "]
430918[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
530919[label="packageOrTypeName\n com.hankcs.hanlp "]
630920[label="packageOrTypeName\n com.hankcs "]
730921[label="packageOrTypeName\n com "]
130922[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.synonym.SynonymHelper; "]
230923[label="typeName\n com.hankcs.hanlp.corpus.synonym.SynonymHelper "]
330924[label="packageOrTypeName\n com.hankcs.hanlp.corpus.synonym "]
430925[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
530926[label="packageOrTypeName\n com.hankcs.hanlp "]
630927[label="packageOrTypeName\n com.hankcs "]
730928[label="packageOrTypeName\n com "]
130929[label="singleTypeImportDeclaration\n importjava.io.BufferedReader; "]
230930[label="typeName\n java.io.BufferedReader "]
330931[label="packageOrTypeName\n java.io "]
430932[label="packageOrTypeName\n java "]
130933[label="singleTypeImportDeclaration\n importjava.io.InputStream; "]
230934[label="typeName\n java.io.InputStream "]
330935[label="packageOrTypeName\n java.io "]
430936[label="packageOrTypeName\n java "]
130937[label="singleTypeImportDeclaration\n importjava.io.InputStreamReader; "]
230938[label="typeName\n java.io.InputStreamReader "]
330939[label="packageOrTypeName\n java.io "]
430940[label="packageOrTypeName\n java "]
130941[label="singleTypeImportDeclaration\n importjava.util.ArrayList; "]
230942[label="typeName\n java.util.ArrayList "]
330943[label="packageOrTypeName\n java.util "]
430944[label="packageOrTypeName\n java "]
130945[label="singleTypeImportDeclaration\n importjava.util.List; "]
230946[label="typeName\n java.util.List "]
330947[label="packageOrTypeName\n java.util "]
430948[label="packageOrTypeName\n java "]
130949[label="singleTypeImportDeclaration\n importjava.util.ListIterator; "]
230950[label="typeName\n java.util.ListIterator "]
330951[label="packageOrTypeName\n java.util "]
430952[label="packageOrTypeName\n java "]
130953[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
230954[label="typeName\n java.util.TreeMap "]
330955[label="packageOrTypeName\n java.util "]
430956[label="packageOrTypeName\n java "]
130957[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.synonym.Synonym.Type; "]
230958[label="typeName\n com.hankcs.hanlp.corpus.synonym.Synonym.Type "]
330959[label="packageOrTypeName\n com.hankcs.hanlp.corpus.synonym.Synonym "]
430960[label="packageOrTypeName\n com.hankcs.hanlp.corpus.synonym "]
530961[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
630962[label="packageOrTypeName\n com.hankcs.hanlp "]
730963[label="packageOrTypeName\n com.hankcs "]
830964[label="packageOrTypeName\n com "]
130965[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.util.Precompiler; "]
230966[label="typeName\n com.hankcs.hanlp.corpus.util.Precompiler "]
330967[label="packageOrTypeName\n com.hankcs.hanlp.corpus.util "]
430968[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
530969[label="packageOrTypeName\n com.hankcs.hanlp "]
630970[label="packageOrTypeName\n com.hankcs "]
730971[label="packageOrTypeName\n com "]
130972[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dictionary.CoreBiGramTableDictionary; "]
230973[label="typeName\n com.hankcs.hanlp.dictionary.CoreBiGramTableDictionary "]
330974[label="packageOrTypeName\n com.hankcs.hanlp.dictionary "]
430975[label="packageOrTypeName\n com.hankcs.hanlp "]
530976[label="packageOrTypeName\n com.hankcs "]
630977[label="packageOrTypeName\n com "]
130978[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.common.Term; "]
230979[label="typeName\n com.hankcs.hanlp.seg.common.Term "]
330980[label="packageOrTypeName\n com.hankcs.hanlp.seg.common "]
430981[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
530982[label="packageOrTypeName\n com.hankcs.hanlp "]
630983[label="packageOrTypeName\n com.hankcs "]
730984[label="packageOrTypeName\n com "]
130985[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.tokenizer.StandardTokenizer; "]
230986[label="typeName\n com.hankcs.hanlp.tokenizer.StandardTokenizer "]
330987[label="packageOrTypeName\n com.hankcs.hanlp.tokenizer "]
430988[label="packageOrTypeName\n com.hankcs.hanlp "]
530989[label="packageOrTypeName\n com.hankcs "]
630990[label="packageOrTypeName\n com "]
130991[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.Predefine; "]
230992[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
330993[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
430994[label="packageOrTypeName\n com.hankcs.hanlp "]
530995[label="packageOrTypeName\n com.hankcs "]
630996[label="packageOrTypeName\n com "]
130997[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.utility.Predefine.logger; "]
230998[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
330999[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
431000[label="packageOrTypeName\n com.hankcs.hanlp "]
531001[label="packageOrTypeName\n com.hankcs "]
631002[label="packageOrTypeName\n com "]
131003[label="normalClassDeclaration\n publicclassCommonSynonymDictionary{DoubleArrayTrie<SynonymItem>trie;privatelongmaxSynonymItemIdDistance;privateCommonSynonymDictionary(){}publicstaticCommonSynonymDictionarycreate(InputStreaminputStream){CommonSynonymDictionarydictionary=newCommonSynonymDictionary();if(dictionary.load(inputStream)){returndictionary;}returnnull;}publicbooleanload(InputStreaminputStream){trie=newDoubleArrayTrie<SynonymItem>();TreeMap<String,SynonymItem>treeMap=newTreeMap<String,SynonymItem>();Stringline=null;try{BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\"));ArrayList<Synonym>synonymList=null;while((line=bw.readLine())!=null){String[]args=line.split(\" \");synonymList=Synonym.create(args);chartype=args[0].charAt(args[0].length()-1);for(Synonymsynonym:synonymList){treeMap.put(synonym.realWord,newSynonymItem(synonym,synonymList,type));}}bw.close();if(synonymList!=null&&synonymList.size()>0){maxSynonymItemIdDistance=synonymList.get(synonymList.size()-1).id-SynonymHelper.convertString2IdWithIndex(\"Aa01A01\",0)+1;}intresultCode=trie.build(treeMap);if(resultCode!=0){logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;}}catch(Exceptione){logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\");returnfalse;}returntrue;}publicSynonymItemget(Stringkey){returntrie.get(key);}publiclonggetMaxSynonymItemIdDistance(){returnmaxSynonymItemIdDistance;}publiclongdistance(Stringa,Stringb){SynonymItemitemA=get(a);if(itemA==null)returnLong.MAX_VALUE/3;SynonymItemitemB=get(b);if(itemB==null)returnLong.MAX_VALUE/3;returnitemA.distance(itemB);}publicStringrewriteQuickly(Stringtext){asserttext!=null;StringBuildersbOut=newStringBuilder((int)(text.length()*1.2));StringpreWord=Predefine.TAG_BIGIN;for(inti=0;i<text.length();++i){intstate=1;state=trie.transition(text.charAt(i),state);if(state>0){intstart=i;intto=i+1;intend=-1;SynonymItemvalue=null;for(;to<text.length();++to){state=trie.transition(text.charAt(to),state);if(state<0)break;SynonymItemoutput=trie.output(state);if(output!=null){value=output;end=to+1;}}if(value!=null){Synonymsynonym=value.randomSynonym(Type.EQUAL,preWord);if(synonym!=null){sbOut.append(synonym.realWord);preWord=synonym.realWord;}else{preWord=text.substring(start,end);sbOut.append(preWord);}i=end-1;}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));}}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));}}returnsbOut.toString();}publicStringrewrite(Stringtext){List<Term>termList=StandardTokenizer.segment(text.toCharArray());StringBuildersbOut=newStringBuilder((int)(text.length()*1.2));StringpreWord=Predefine.TAG_BIGIN;for(Termterm:termList){SynonymItemsynonymItem=get(term.word);Synonymsynonym;if(synonymItem!=null&&(synonym=synonymItem.randomSynonym(Type.EQUAL,preWord))!=null){sbOut.append(synonym.realWord);}elsesbOut.append(term.word);preWord=PosTagCompiler.compile(term.nature.toString(),term.word);}returnsbOut.toString();}publicstaticclassSynonymItem{publicSynonymentry;publicList<Synonym>synonymList;publicTypetype;publicSynonymItem(Synonymentry,List<Synonym>synonymList,Typetype){this.entry=entry;this.synonymList=synonymList;this.type=type;}publicSynonymItem(Synonymentry,List<Synonym>synonymList,chartype){this.entry=entry;this.synonymList=synonymList;switch(type){case'=':this.type=Type.EQUAL;break;case'#':this.type=Type.LIKE;break;default:this.type=Type.SINGLE;break;}}publicSynonymrandomSynonym(Typetype,StringpreWord){ArrayList<Synonym>synonymArrayList=newArrayList<Synonym>(synonymList);ListIterator<Synonym>listIterator=synonymArrayList.listIterator();if(type!=null)while(listIterator.hasNext()){Synonymsynonym=listIterator.next();if(synonym.type!=type||(preWord!=null&&CoreBiGramTableDictionary.getBiFrequency(preWord,synonym.realWord)==0))listIterator.remove();}if(synonymArrayList.size()==0)returnnull;returnsynonymArrayList.get((int)(System.currentTimeMillis()%(long)synonymArrayList.size()));}publicSynonymrandomSynonym(){returnrandomSynonym(null,null);}@OverridepublicStringtoString(){finalStringBuildersb=newStringBuilder();sb.append(entry);sb.append(' ');sb.append(type);sb.append(' ');sb.append(synonymList);returnsb.toString();}publiclongdistance(SynonymItemother){returnentry.distance(other.entry);}publicstaticSynonymItemcreateUndefined(Stringword){SynonymItemitem=newSynonymItem(newSynonym(word,word.hashCode()*1000000+Long.MAX_VALUE/3),null,Type.UNDEFINED);returnitem;}}} "]
231004[label="classModifier\n public "]
231005[label="classBody\n {DoubleArrayTrie<SynonymItem>trie;privatelongmaxSynonymItemIdDistance;privateCommonSynonymDictionary(){}publicstaticCommonSynonymDictionarycreate(InputStreaminputStream){CommonSynonymDictionarydictionary=newCommonSynonymDictionary();if(dictionary.load(inputStream)){returndictionary;}returnnull;}publicbooleanload(InputStreaminputStream){trie=newDoubleArrayTrie<SynonymItem>();TreeMap<String,SynonymItem>treeMap=newTreeMap<String,SynonymItem>();Stringline=null;try{BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\"));ArrayList<Synonym>synonymList=null;while((line=bw.readLine())!=null){String[]args=line.split(\" \");synonymList=Synonym.create(args);chartype=args[0].charAt(args[0].length()-1);for(Synonymsynonym:synonymList){treeMap.put(synonym.realWord,newSynonymItem(synonym,synonymList,type));}}bw.close();if(synonymList!=null&&synonymList.size()>0){maxSynonymItemIdDistance=synonymList.get(synonymList.size()-1).id-SynonymHelper.convertString2IdWithIndex(\"Aa01A01\",0)+1;}intresultCode=trie.build(treeMap);if(resultCode!=0){logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;}}catch(Exceptione){logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\");returnfalse;}returntrue;}publicSynonymItemget(Stringkey){returntrie.get(key);}publiclonggetMaxSynonymItemIdDistance(){returnmaxSynonymItemIdDistance;}publiclongdistance(Stringa,Stringb){SynonymItemitemA=get(a);if(itemA==null)returnLong.MAX_VALUE/3;SynonymItemitemB=get(b);if(itemB==null)returnLong.MAX_VALUE/3;returnitemA.distance(itemB);}publicStringrewriteQuickly(Stringtext){asserttext!=null;StringBuildersbOut=newStringBuilder((int)(text.length()*1.2));StringpreWord=Predefine.TAG_BIGIN;for(inti=0;i<text.length();++i){intstate=1;state=trie.transition(text.charAt(i),state);if(state>0){intstart=i;intto=i+1;intend=-1;SynonymItemvalue=null;for(;to<text.length();++to){state=trie.transition(text.charAt(to),state);if(state<0)break;SynonymItemoutput=trie.output(state);if(output!=null){value=output;end=to+1;}}if(value!=null){Synonymsynonym=value.randomSynonym(Type.EQUAL,preWord);if(synonym!=null){sbOut.append(synonym.realWord);preWord=synonym.realWord;}else{preWord=text.substring(start,end);sbOut.append(preWord);}i=end-1;}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));}}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));}}returnsbOut.toString();}publicStringrewrite(Stringtext){List<Term>termList=StandardTokenizer.segment(text.toCharArray());StringBuildersbOut=newStringBuilder((int)(text.length()*1.2));StringpreWord=Predefine.TAG_BIGIN;for(Termterm:termList){SynonymItemsynonymItem=get(term.word);Synonymsynonym;if(synonymItem!=null&&(synonym=synonymItem.randomSynonym(Type.EQUAL,preWord))!=null){sbOut.append(synonym.realWord);}elsesbOut.append(term.word);preWord=PosTagCompiler.compile(term.nature.toString(),term.word);}returnsbOut.toString();}publicstaticclassSynonymItem{publicSynonymentry;publicList<Synonym>synonymList;publicTypetype;publicSynonymItem(Synonymentry,List<Synonym>synonymList,Typetype){this.entry=entry;this.synonymList=synonymList;this.type=type;}publicSynonymItem(Synonymentry,List<Synonym>synonymList,chartype){this.entry=entry;this.synonymList=synonymList;switch(type){case'=':this.type=Type.EQUAL;break;case'#':this.type=Type.LIKE;break;default:this.type=Type.SINGLE;break;}}publicSynonymrandomSynonym(Typetype,StringpreWord){ArrayList<Synonym>synonymArrayList=newArrayList<Synonym>(synonymList);ListIterator<Synonym>listIterator=synonymArrayList.listIterator();if(type!=null)while(listIterator.hasNext()){Synonymsynonym=listIterator.next();if(synonym.type!=type||(preWord!=null&&CoreBiGramTableDictionary.getBiFrequency(preWord,synonym.realWord)==0))listIterator.remove();}if(synonymArrayList.size()==0)returnnull;returnsynonymArrayList.get((int)(System.currentTimeMillis()%(long)synonymArrayList.size()));}publicSynonymrandomSynonym(){returnrandomSynonym(null,null);}@OverridepublicStringtoString(){finalStringBuildersb=newStringBuilder();sb.append(entry);sb.append(' ');sb.append(type);sb.append(' ');sb.append(synonymList);returnsb.toString();}publiclongdistance(SynonymItemother){returnentry.distance(other.entry);}publicstaticSynonymItemcreateUndefined(Stringword){SynonymItemitem=newSynonymItem(newSynonym(word,word.hashCode()*1000000+Long.MAX_VALUE/3),null,Type.UNDEFINED);returnitem;}}} "]
331006[label="fieldDeclaration\n DoubleArrayTrie<SynonymItem>trie; "]
431007[label="unannClassType_lfno_unannClassOrInterfaceType\n DoubleArrayTrie<SynonymItem> "]
531008[label="typeArguments\n <SynonymItem> "]
631009[label="classType_lfno_classOrInterfaceType\n SynonymItem "]
431010[label="variableDeclaratorId\n trie "]
331011[label="fieldDeclaration\n privatelongmaxSynonymItemIdDistance; "]
431012[label="fieldModifier\n private "]
431013[label="integralType\n long "]
431014[label="variableDeclaratorId\n maxSynonymItemIdDistance "]
331015[label="constructorDeclaration\n privateCommonSynonymDictionary(){} "]
431016[label="constructorModifier\n private "]
431017[label="constructorDeclarator\n CommonSynonymDictionary() "]
531018[label="simpleTypeName\n CommonSynonymDictionary "]
431019[label="constructorBody\n {} "]
331020[label="methodDeclaration\n publicstaticCommonSynonymDictionarycreate(InputStreaminputStream){CommonSynonymDictionarydictionary=newCommonSynonymDictionary();if(dictionary.load(inputStream)){returndictionary;}returnnull;} "]
431021[label="methodModifier\n public "]
431022[label="methodModifier\n static "]
431023[label="methodHeader\n CommonSynonymDictionarycreate(InputStreaminputStream) "]
531024[label="unannClassType_lfno_unannClassOrInterfaceType\n CommonSynonymDictionary "]
531025[label="methodDeclarator\n create(InputStreaminputStream) "]
631026[label="formalParameter\n InputStreaminputStream "]
731027[label="unannClassType_lfno_unannClassOrInterfaceType\n InputStream "]
731028[label="variableDeclaratorId\n inputStream "]
431029[label="block\n {CommonSynonymDictionarydictionary=newCommonSynonymDictionary();if(dictionary.load(inputStream)){returndictionary;}returnnull;} "]
531030[label="blockStatements\n CommonSynonymDictionarydictionary=newCommonSynonymDictionary();if(dictionary.load(inputStream)){returndictionary;}returnnull; "]
631031[label="localVariableDeclarationStatement\n CommonSynonymDictionarydictionary=newCommonSynonymDictionary(); "]
731032[label="localVariableDeclaration\n CommonSynonymDictionarydictionary=newCommonSynonymDictionary() "]
831033[label="unannClassType_lfno_unannClassOrInterfaceType\n CommonSynonymDictionary "]
831034[label="variableDeclarator\n dictionary=newCommonSynonymDictionary() "]
931035[label="variableDeclaratorId\n dictionary "]
931036[label="classInstanceCreationExpression_lfno_primary\n newCommonSynonymDictionary() "]
631037[label="ifThenStatement\n if(dictionary.load(inputStream)){returndictionary;} "]
731038[label="methodInvocation_lfno_primary\n dictionary.load(inputStream) "]
831039[label="typeName\n dictionary "]
831040[label="expressionName\n inputStream "]
731041[label="block\n {returndictionary;} "]
831042[label="returnStatement\n returndictionary; "]
931043[label="expressionName\n dictionary "]
631044[label="returnStatement\n returnnull; "]
731045[label="literal\n null "]
331046[label="methodDeclaration\n publicbooleanload(InputStreaminputStream){trie=newDoubleArrayTrie<SynonymItem>();TreeMap<String,SynonymItem>treeMap=newTreeMap<String,SynonymItem>();Stringline=null;try{BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\"));ArrayList<Synonym>synonymList=null;while((line=bw.readLine())!=null){String[]args=line.split(\" \");synonymList=Synonym.create(args);chartype=args[0].charAt(args[0].length()-1);for(Synonymsynonym:synonymList){treeMap.put(synonym.realWord,newSynonymItem(synonym,synonymList,type));}}bw.close();if(synonymList!=null&&synonymList.size()>0){maxSynonymItemIdDistance=synonymList.get(synonymList.size()-1).id-SynonymHelper.convertString2IdWithIndex(\"Aa01A01\",0)+1;}intresultCode=trie.build(treeMap);if(resultCode!=0){logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;}}catch(Exceptione){logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\");returnfalse;}returntrue;} "]
431047[label="methodModifier\n public "]
431048[label="methodHeader\n booleanload(InputStreaminputStream) "]
531049[label="unannPrimitiveType\n boolean "]
531050[label="methodDeclarator\n load(InputStreaminputStream) "]
631051[label="formalParameter\n InputStreaminputStream "]
731052[label="unannClassType_lfno_unannClassOrInterfaceType\n InputStream "]
731053[label="variableDeclaratorId\n inputStream "]
431054[label="block\n {trie=newDoubleArrayTrie<SynonymItem>();TreeMap<String,SynonymItem>treeMap=newTreeMap<String,SynonymItem>();Stringline=null;try{BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\"));ArrayList<Synonym>synonymList=null;while((line=bw.readLine())!=null){String[]args=line.split(\" \");synonymList=Synonym.create(args);chartype=args[0].charAt(args[0].length()-1);for(Synonymsynonym:synonymList){treeMap.put(synonym.realWord,newSynonymItem(synonym,synonymList,type));}}bw.close();if(synonymList!=null&&synonymList.size()>0){maxSynonymItemIdDistance=synonymList.get(synonymList.size()-1).id-SynonymHelper.convertString2IdWithIndex(\"Aa01A01\",0)+1;}intresultCode=trie.build(treeMap);if(resultCode!=0){logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;}}catch(Exceptione){logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\");returnfalse;}returntrue;} "]
531055[label="blockStatements\n trie=newDoubleArrayTrie<SynonymItem>();TreeMap<String,SynonymItem>treeMap=newTreeMap<String,SynonymItem>();Stringline=null;try{BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\"));ArrayList<Synonym>synonymList=null;while((line=bw.readLine())!=null){String[]args=line.split(\" \");synonymList=Synonym.create(args);chartype=args[0].charAt(args[0].length()-1);for(Synonymsynonym:synonymList){treeMap.put(synonym.realWord,newSynonymItem(synonym,synonymList,type));}}bw.close();if(synonymList!=null&&synonymList.size()>0){maxSynonymItemIdDistance=synonymList.get(synonymList.size()-1).id-SynonymHelper.convertString2IdWithIndex(\"Aa01A01\",0)+1;}intresultCode=trie.build(treeMap);if(resultCode!=0){logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;}}catch(Exceptione){logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\");returnfalse;}returntrue; "]
631056[label="expressionStatement\n trie=newDoubleArrayTrie<SynonymItem>(); "]
731057[label="assignment\n trie=newDoubleArrayTrie<SynonymItem>() "]
831058[label="expressionName\n trie "]
831059[label="assignmentOperator\n = "]
831060[label="classInstanceCreationExpression_lfno_primary\n newDoubleArrayTrie<SynonymItem>() "]
931061[label="typeArguments\n <SynonymItem> "]
1031062[label="classType_lfno_classOrInterfaceType\n SynonymItem "]
631063[label="localVariableDeclarationStatement\n TreeMap<String,SynonymItem>treeMap=newTreeMap<String,SynonymItem>(); "]
731064[label="localVariableDeclaration\n TreeMap<String,SynonymItem>treeMap=newTreeMap<String,SynonymItem>() "]
831065[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,SynonymItem> "]
931066[label="typeArguments\n <String,SynonymItem> "]
1031067[label="typeArgumentList\n String,SynonymItem "]
1131068[label="classType_lfno_classOrInterfaceType\n String "]
1131069[label="classType_lfno_classOrInterfaceType\n SynonymItem "]
831070[label="variableDeclarator\n treeMap=newTreeMap<String,SynonymItem>() "]
931071[label="variableDeclaratorId\n treeMap "]
931072[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,SynonymItem>() "]
1031073[label="typeArguments\n <String,SynonymItem> "]
1131074[label="typeArgumentList\n String,SynonymItem "]
1231075[label="classType_lfno_classOrInterfaceType\n String "]
1231076[label="classType_lfno_classOrInterfaceType\n SynonymItem "]
631077[label="localVariableDeclarationStatement\n Stringline=null; "]
731078[label="localVariableDeclaration\n Stringline=null "]
831079[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
831080[label="variableDeclarator\n line=null "]
931081[label="variableDeclaratorId\n line "]
931082[label="literal\n null "]
631083[label="tryStatement\n try{BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\"));ArrayList<Synonym>synonymList=null;while((line=bw.readLine())!=null){String[]args=line.split(\" \");synonymList=Synonym.create(args);chartype=args[0].charAt(args[0].length()-1);for(Synonymsynonym:synonymList){treeMap.put(synonym.realWord,newSynonymItem(synonym,synonymList,type));}}bw.close();if(synonymList!=null&&synonymList.size()>0){maxSynonymItemIdDistance=synonymList.get(synonymList.size()-1).id-SynonymHelper.convertString2IdWithIndex(\"Aa01A01\",0)+1;}intresultCode=trie.build(treeMap);if(resultCode!=0){logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;}}catch(Exceptione){logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\");returnfalse;} "]
731084[label="block\n {BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\"));ArrayList<Synonym>synonymList=null;while((line=bw.readLine())!=null){String[]args=line.split(\" \");synonymList=Synonym.create(args);chartype=args[0].charAt(args[0].length()-1);for(Synonymsynonym:synonymList){treeMap.put(synonym.realWord,newSynonymItem(synonym,synonymList,type));}}bw.close();if(synonymList!=null&&synonymList.size()>0){maxSynonymItemIdDistance=synonymList.get(synonymList.size()-1).id-SynonymHelper.convertString2IdWithIndex(\"Aa01A01\",0)+1;}intresultCode=trie.build(treeMap);if(resultCode!=0){logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;}} "]
831085[label="blockStatements\n BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\"));ArrayList<Synonym>synonymList=null;while((line=bw.readLine())!=null){String[]args=line.split(\" \");synonymList=Synonym.create(args);chartype=args[0].charAt(args[0].length()-1);for(Synonymsynonym:synonymList){treeMap.put(synonym.realWord,newSynonymItem(synonym,synonymList,type));}}bw.close();if(synonymList!=null&&synonymList.size()>0){maxSynonymItemIdDistance=synonymList.get(synonymList.size()-1).id-SynonymHelper.convertString2IdWithIndex(\"Aa01A01\",0)+1;}intresultCode=trie.build(treeMap);if(resultCode!=0){logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;} "]
931086[label="localVariableDeclarationStatement\n BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\")); "]
1031087[label="localVariableDeclaration\n BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\")) "]
1131088[label="unannClassType_lfno_unannClassOrInterfaceType\n BufferedReader "]
1131089[label="variableDeclarator\n bw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\")) "]
1231090[label="variableDeclaratorId\n bw "]
1231091[label="classInstanceCreationExpression_lfno_primary\n newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\")) "]
1331092[label="classInstanceCreationExpression_lfno_primary\n newInputStreamReader(inputStream,\"UTF-8\") "]
1431093[label="argumentList\n inputStream,\"UTF-8\" "]
1531094[label="expressionName\n inputStream "]
1531095[label="literal\n \"UTF-8\" "]
931096[label="localVariableDeclarationStatement\n ArrayList<Synonym>synonymList=null; "]
1031097[label="localVariableDeclaration\n ArrayList<Synonym>synonymList=null "]
1131098[label="unannClassType_lfno_unannClassOrInterfaceType\n ArrayList<Synonym> "]
1231099[label="typeArguments\n <Synonym> "]
1331100[label="classType_lfno_classOrInterfaceType\n Synonym "]
1131101[label="variableDeclarator\n synonymList=null "]
1231102[label="variableDeclaratorId\n synonymList "]
1231103[label="literal\n null "]
931104[label="whileStatement\n while((line=bw.readLine())!=null){String[]args=line.split(\" \");synonymList=Synonym.create(args);chartype=args[0].charAt(args[0].length()-1);for(Synonymsynonym:synonymList){treeMap.put(synonym.realWord,newSynonymItem(synonym,synonymList,type));}} "]
1031105[label="equalityExpression\n (line=bw.readLine())!=null "]
1131106[label="primaryNoNewArray_lfno_primary\n (line=bw.readLine()) "]
1231107[label="assignment\n line=bw.readLine() "]
1331108[label="expressionName\n line "]
1331109[label="assignmentOperator\n = "]
1331110[label="methodInvocation_lfno_primary\n bw.readLine() "]
1431111[label="typeName\n bw "]
1131112[label="literal\n null "]
1031113[label="block\n {String[]args=line.split(\" \");synonymList=Synonym.create(args);chartype=args[0].charAt(args[0].length()-1);for(Synonymsynonym:synonymList){treeMap.put(synonym.realWord,newSynonymItem(synonym,synonymList,type));}} "]
1131114[label="blockStatements\n String[]args=line.split(\" \");synonymList=Synonym.create(args);chartype=args[0].charAt(args[0].length()-1);for(Synonymsynonym:synonymList){treeMap.put(synonym.realWord,newSynonymItem(synonym,synonymList,type));} "]
1231115[label="localVariableDeclarationStatement\n String[]args=line.split(\" \"); "]
1331116[label="localVariableDeclaration\n String[]args=line.split(\" \") "]
1431117[label="unannArrayType\n String[] "]
1531118[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1531119[label="dims\n [] "]
1431120[label="variableDeclarator\n args=line.split(\" \") "]
1531121[label="variableDeclaratorId\n args "]
1531122[label="methodInvocation_lfno_primary\n line.split(\" \") "]
1631123[label="typeName\n line "]
1631124[label="literal\n \" \" "]
1231125[label="expressionStatement\n synonymList=Synonym.create(args); "]
1331126[label="assignment\n synonymList=Synonym.create(args) "]
1431127[label="expressionName\n synonymList "]
1431128[label="assignmentOperator\n = "]
1431129[label="methodInvocation_lfno_primary\n Synonym.create(args) "]
1531130[label="typeName\n Synonym "]
1531131[label="expressionName\n args "]
1231132[label="localVariableDeclarationStatement\n chartype=args[0].charAt(args[0].length()-1); "]
1331133[label="localVariableDeclaration\n chartype=args[0].charAt(args[0].length()-1) "]
1431134[label="integralType\n char "]
1431135[label="variableDeclarator\n type=args[0].charAt(args[0].length()-1) "]
1531136[label="variableDeclaratorId\n type "]
1531137[label="primary\n args[0].charAt(args[0].length()-1) "]
1631138[label="arrayAccess_lfno_primary\n args[0] "]
1731139[label="expressionName\n args "]
1731140[label="literal\n 0 "]
1631141[label="methodInvocation_lf_primary\n .charAt(args[0].length()-1) "]
1731142[label="additiveExpression\n args[0].length()-1 "]
1831143[label="primary\n args[0].length() "]
1931144[label="arrayAccess_lfno_primary\n args[0] "]
2031145[label="expressionName\n args "]
2031146[label="literal\n 0 "]
1931147[label="methodInvocation_lf_primary\n .length() "]
1831148[label="literal\n 1 "]
1231149[label="enhancedForStatement\n for(Synonymsynonym:synonymList){treeMap.put(synonym.realWord,newSynonymItem(synonym,synonymList,type));} "]
1331150[label="unannClassType_lfno_unannClassOrInterfaceType\n Synonym "]
1331151[label="variableDeclaratorId\n synonym "]
1331152[label="expressionName\n synonymList "]
1331153[label="block\n {treeMap.put(synonym.realWord,newSynonymItem(synonym,synonymList,type));} "]
1431154[label="expressionStatement\n treeMap.put(synonym.realWord,newSynonymItem(synonym,synonymList,type)); "]
1531155[label="methodInvocation\n treeMap.put(synonym.realWord,newSynonymItem(synonym,synonymList,type)) "]
1631156[label="typeName\n treeMap "]
1631157[label="argumentList\n synonym.realWord,newSynonymItem(synonym,synonymList,type) "]
1731158[label="expressionName\n synonym.realWord "]
1831159[label="ambiguousName\n synonym "]
1731160[label="classInstanceCreationExpression_lfno_primary\n newSynonymItem(synonym,synonymList,type) "]
1831161[label="argumentList\n synonym,synonymList,type "]
1931162[label="expressionName\n synonym "]
1931163[label="expressionName\n synonymList "]
1931164[label="expressionName\n type "]
931165[label="expressionStatement\n bw.close(); "]
1031166[label="methodInvocation\n bw.close() "]
1131167[label="typeName\n bw "]
931168[label="ifThenStatement\n if(synonymList!=null&&synonymList.size()>0){maxSynonymItemIdDistance=synonymList.get(synonymList.size()-1).id-SynonymHelper.convertString2IdWithIndex(\"Aa01A01\",0)+1;} "]
1031169[label="conditionalAndExpression\n synonymList!=null&&synonymList.size()>0 "]
1131170[label="equalityExpression\n synonymList!=null "]
1231171[label="expressionName\n synonymList "]
1231172[label="literal\n null "]
1131173[label="relationalExpression\n synonymList.size()>0 "]
1231174[label="methodInvocation_lfno_primary\n synonymList.size() "]
1331175[label="typeName\n synonymList "]
1231176[label="literal\n 0 "]
1031177[label="block\n {maxSynonymItemIdDistance=synonymList.get(synonymList.size()-1).id-SynonymHelper.convertString2IdWithIndex(\"Aa01A01\",0)+1;} "]
1131178[label="expressionStatement\n maxSynonymItemIdDistance=synonymList.get(synonymList.size()-1).id-SynonymHelper.convertString2IdWithIndex(\"Aa01A01\",0)+1; "]
1231179[label="assignment\n maxSynonymItemIdDistance=synonymList.get(synonymList.size()-1).id-SynonymHelper.convertString2IdWithIndex(\"Aa01A01\",0)+1 "]
1331180[label="expressionName\n maxSynonymItemIdDistance "]
1331181[label="assignmentOperator\n = "]
1331182[label="additiveExpression\n synonymList.get(synonymList.size()-1).id-SynonymHelper.convertString2IdWithIndex(\"Aa01A01\",0)+1 "]
1431183[label="additiveExpression\n synonymList.get(synonymList.size()-1).id-SynonymHelper.convertString2IdWithIndex(\"Aa01A01\",0) "]
1531184[label="primary\n synonymList.get(synonymList.size()-1).id "]
1631185[label="methodInvocation_lfno_primary\n synonymList.get(synonymList.size()-1) "]
1731186[label="typeName\n synonymList "]
1731187[label="additiveExpression\n synonymList.size()-1 "]
1831188[label="methodInvocation_lfno_primary\n synonymList.size() "]
1931189[label="typeName\n synonymList "]
1831190[label="literal\n 1 "]
1631191[label="fieldAccess_lf_primary\n .id "]
1531192[label="methodInvocation_lfno_primary\n SynonymHelper.convertString2IdWithIndex(\"Aa01A01\",0) "]
1631193[label="typeName\n SynonymHelper "]
1631194[label="argumentList\n \"Aa01A01\",0 "]
1731195[label="literal\n \"Aa01A01\" "]
1731196[label="literal\n 0 "]
1431197[label="literal\n 1 "]
931198[label="localVariableDeclarationStatement\n intresultCode=trie.build(treeMap); "]
1031199[label="localVariableDeclaration\n intresultCode=trie.build(treeMap) "]
1131200[label="integralType\n int "]
1131201[label="variableDeclarator\n resultCode=trie.build(treeMap) "]
1231202[label="variableDeclaratorId\n resultCode "]
1231203[label="methodInvocation_lfno_primary\n trie.build(treeMap) "]
1331204[label="typeName\n trie "]
1331205[label="expressionName\n treeMap "]
931206[label="ifThenStatement\n if(resultCode!=0){logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;} "]
1031207[label="equalityExpression\n resultCode!=0 "]
1131208[label="expressionName\n resultCode "]
1131209[label="literal\n 0 "]
1031210[label="block\n {logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;} "]
1131211[label="blockStatements\n logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse; "]
1231212[label="expressionStatement\n logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode); "]
1331213[label="methodInvocation\n logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode) "]
1431214[label="typeName\n logger "]
1431215[label="additiveExpression\n \"构建\"+inputStream+\"失败，错误码\"+resultCode "]
1531216[label="additiveExpression\n \"构建\"+inputStream+\"失败，错误码\" "]
1631217[label="additiveExpression\n \"构建\"+inputStream "]
1731218[label="literal\n \"构建\" "]
1731219[label="expressionName\n inputStream "]
1631220[label="literal\n \"失败，错误码\" "]
1531221[label="expressionName\n resultCode "]
1231222[label="returnStatement\n returnfalse; "]
1331223[label="literal\n false "]
731224[label="catchClause\n catch(Exceptione){logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\");returnfalse;} "]
831225[label="catchFormalParameter\n Exceptione "]
931226[label="unannClassType\n Exception "]
931227[label="variableDeclaratorId\n e "]
831228[label="block\n {logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\");returnfalse;} "]
931229[label="blockStatements\n logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\");returnfalse; "]
1031230[label="expressionStatement\n logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\"); "]
1131231[label="methodInvocation\n logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\") "]
1231232[label="typeName\n logger "]
1231233[label="additiveExpression\n \"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\" "]
1331234[label="additiveExpression\n \"读取\"+inputStream+\"失败，可能由行\"+line "]
1431235[label="additiveExpression\n \"读取\"+inputStream+\"失败，可能由行\" "]
1531236[label="additiveExpression\n \"读取\"+inputStream "]
1631237[label="literal\n \"读取\" "]
1631238[label="expressionName\n inputStream "]
1531239[label="literal\n \"失败，可能由行\" "]
1431240[label="expressionName\n line "]
1331241[label="literal\n \"造成\" "]
1031242[label="returnStatement\n returnfalse; "]
1131243[label="literal\n false "]
631244[label="returnStatement\n returntrue; "]
731245[label="literal\n true "]
331246[label="methodDeclaration\n publicSynonymItemget(Stringkey){returntrie.get(key);} "]
431247[label="methodModifier\n public "]
431248[label="methodHeader\n SynonymItemget(Stringkey) "]
531249[label="unannClassType_lfno_unannClassOrInterfaceType\n SynonymItem "]
531250[label="methodDeclarator\n get(Stringkey) "]
631251[label="formalParameter\n Stringkey "]
731252[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
731253[label="variableDeclaratorId\n key "]
431254[label="block\n {returntrie.get(key);} "]
531255[label="returnStatement\n returntrie.get(key); "]
631256[label="methodInvocation_lfno_primary\n trie.get(key) "]
731257[label="typeName\n trie "]
731258[label="expressionName\n key "]
331259[label="methodDeclaration\n publiclonggetMaxSynonymItemIdDistance(){returnmaxSynonymItemIdDistance;} "]
431260[label="methodModifier\n public "]
431261[label="methodHeader\n longgetMaxSynonymItemIdDistance() "]
531262[label="integralType\n long "]
531263[label="methodDeclarator\n getMaxSynonymItemIdDistance() "]
431264[label="block\n {returnmaxSynonymItemIdDistance;} "]
531265[label="returnStatement\n returnmaxSynonymItemIdDistance; "]
631266[label="expressionName\n maxSynonymItemIdDistance "]
331267[label="methodDeclaration\n publiclongdistance(Stringa,Stringb){SynonymItemitemA=get(a);if(itemA==null)returnLong.MAX_VALUE/3;SynonymItemitemB=get(b);if(itemB==null)returnLong.MAX_VALUE/3;returnitemA.distance(itemB);} "]
431268[label="methodModifier\n public "]
431269[label="methodHeader\n longdistance(Stringa,Stringb) "]
531270[label="integralType\n long "]
531271[label="methodDeclarator\n distance(Stringa,Stringb) "]
631272[label="formalParameterList\n Stringa,Stringb "]
731273[label="formalParameter\n Stringa "]
831274[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
831275[label="variableDeclaratorId\n a "]
731276[label="formalParameter\n Stringb "]
831277[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
831278[label="variableDeclaratorId\n b "]
431279[label="block\n {SynonymItemitemA=get(a);if(itemA==null)returnLong.MAX_VALUE/3;SynonymItemitemB=get(b);if(itemB==null)returnLong.MAX_VALUE/3;returnitemA.distance(itemB);} "]
531280[label="blockStatements\n SynonymItemitemA=get(a);if(itemA==null)returnLong.MAX_VALUE/3;SynonymItemitemB=get(b);if(itemB==null)returnLong.MAX_VALUE/3;returnitemA.distance(itemB); "]
631281[label="localVariableDeclarationStatement\n SynonymItemitemA=get(a); "]
731282[label="localVariableDeclaration\n SynonymItemitemA=get(a) "]
831283[label="unannClassType_lfno_unannClassOrInterfaceType\n SynonymItem "]
831284[label="variableDeclarator\n itemA=get(a) "]
931285[label="variableDeclaratorId\n itemA "]
931286[label="methodInvocation_lfno_primary\n get(a) "]
1031287[label="methodName\n get "]
1031288[label="expressionName\n a "]
631289[label="ifThenStatement\n if(itemA==null)returnLong.MAX_VALUE/3; "]
731290[label="equalityExpression\n itemA==null "]
831291[label="expressionName\n itemA "]
831292[label="literal\n null "]
731293[label="returnStatement\n returnLong.MAX_VALUE/3; "]
831294[label="multiplicativeExpression\n Long.MAX_VALUE/3 "]
931295[label="expressionName\n Long.MAX_VALUE "]
1031296[label="ambiguousName\n Long "]
931297[label="literal\n 3 "]
631298[label="localVariableDeclarationStatement\n SynonymItemitemB=get(b); "]
731299[label="localVariableDeclaration\n SynonymItemitemB=get(b) "]
831300[label="unannClassType_lfno_unannClassOrInterfaceType\n SynonymItem "]
831301[label="variableDeclarator\n itemB=get(b) "]
931302[label="variableDeclaratorId\n itemB "]
931303[label="methodInvocation_lfno_primary\n get(b) "]
1031304[label="methodName\n get "]
1031305[label="expressionName\n b "]
631306[label="ifThenStatement\n if(itemB==null)returnLong.MAX_VALUE/3; "]
731307[label="equalityExpression\n itemB==null "]
831308[label="expressionName\n itemB "]
831309[label="literal\n null "]
731310[label="returnStatement\n returnLong.MAX_VALUE/3; "]
831311[label="multiplicativeExpression\n Long.MAX_VALUE/3 "]
931312[label="expressionName\n Long.MAX_VALUE "]
1031313[label="ambiguousName\n Long "]
931314[label="literal\n 3 "]
631315[label="returnStatement\n returnitemA.distance(itemB); "]
731316[label="methodInvocation_lfno_primary\n itemA.distance(itemB) "]
831317[label="typeName\n itemA "]
831318[label="expressionName\n itemB "]
331319[label="methodDeclaration\n publicStringrewriteQuickly(Stringtext){asserttext!=null;StringBuildersbOut=newStringBuilder((int)(text.length()*1.2));StringpreWord=Predefine.TAG_BIGIN;for(inti=0;i<text.length();++i){intstate=1;state=trie.transition(text.charAt(i),state);if(state>0){intstart=i;intto=i+1;intend=-1;SynonymItemvalue=null;for(;to<text.length();++to){state=trie.transition(text.charAt(to),state);if(state<0)break;SynonymItemoutput=trie.output(state);if(output!=null){value=output;end=to+1;}}if(value!=null){Synonymsynonym=value.randomSynonym(Type.EQUAL,preWord);if(synonym!=null){sbOut.append(synonym.realWord);preWord=synonym.realWord;}else{preWord=text.substring(start,end);sbOut.append(preWord);}i=end-1;}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));}}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));}}returnsbOut.toString();} "]
431320[label="methodModifier\n public "]
431321[label="methodHeader\n StringrewriteQuickly(Stringtext) "]
531322[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
531323[label="methodDeclarator\n rewriteQuickly(Stringtext) "]
631324[label="formalParameter\n Stringtext "]
731325[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
731326[label="variableDeclaratorId\n text "]
431327[label="block\n {asserttext!=null;StringBuildersbOut=newStringBuilder((int)(text.length()*1.2));StringpreWord=Predefine.TAG_BIGIN;for(inti=0;i<text.length();++i){intstate=1;state=trie.transition(text.charAt(i),state);if(state>0){intstart=i;intto=i+1;intend=-1;SynonymItemvalue=null;for(;to<text.length();++to){state=trie.transition(text.charAt(to),state);if(state<0)break;SynonymItemoutput=trie.output(state);if(output!=null){value=output;end=to+1;}}if(value!=null){Synonymsynonym=value.randomSynonym(Type.EQUAL,preWord);if(synonym!=null){sbOut.append(synonym.realWord);preWord=synonym.realWord;}else{preWord=text.substring(start,end);sbOut.append(preWord);}i=end-1;}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));}}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));}}returnsbOut.toString();} "]
531328[label="blockStatements\n asserttext!=null;StringBuildersbOut=newStringBuilder((int)(text.length()*1.2));StringpreWord=Predefine.TAG_BIGIN;for(inti=0;i<text.length();++i){intstate=1;state=trie.transition(text.charAt(i),state);if(state>0){intstart=i;intto=i+1;intend=-1;SynonymItemvalue=null;for(;to<text.length();++to){state=trie.transition(text.charAt(to),state);if(state<0)break;SynonymItemoutput=trie.output(state);if(output!=null){value=output;end=to+1;}}if(value!=null){Synonymsynonym=value.randomSynonym(Type.EQUAL,preWord);if(synonym!=null){sbOut.append(synonym.realWord);preWord=synonym.realWord;}else{preWord=text.substring(start,end);sbOut.append(preWord);}i=end-1;}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));}}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));}}returnsbOut.toString(); "]
631329[label="assertStatement\n asserttext!=null; "]
731330[label="equalityExpression\n text!=null "]
831331[label="expressionName\n text "]
831332[label="literal\n null "]
631333[label="localVariableDeclarationStatement\n StringBuildersbOut=newStringBuilder((int)(text.length()*1.2)); "]
731334[label="localVariableDeclaration\n StringBuildersbOut=newStringBuilder((int)(text.length()*1.2)) "]
831335[label="unannClassType_lfno_unannClassOrInterfaceType\n StringBuilder "]
831336[label="variableDeclarator\n sbOut=newStringBuilder((int)(text.length()*1.2)) "]
931337[label="variableDeclaratorId\n sbOut "]
931338[label="classInstanceCreationExpression_lfno_primary\n newStringBuilder((int)(text.length()*1.2)) "]
1031339[label="castExpression\n (int)(text.length()*1.2) "]
1131340[label="integralType\n int "]
1131341[label="primaryNoNewArray_lfno_primary\n (text.length()*1.2) "]
1231342[label="multiplicativeExpression\n text.length()*1.2 "]
1331343[label="methodInvocation_lfno_primary\n text.length() "]
1431344[label="typeName\n text "]
1331345[label="literal\n 1.2 "]
631346[label="localVariableDeclarationStatement\n StringpreWord=Predefine.TAG_BIGIN; "]
731347[label="localVariableDeclaration\n StringpreWord=Predefine.TAG_BIGIN "]
831348[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
831349[label="variableDeclarator\n preWord=Predefine.TAG_BIGIN "]
931350[label="variableDeclaratorId\n preWord "]
931351[label="expressionName\n Predefine.TAG_BIGIN "]
1031352[label="ambiguousName\n Predefine "]
631353[label="basicForStatement\n for(inti=0;i<text.length();++i){intstate=1;state=trie.transition(text.charAt(i),state);if(state>0){intstart=i;intto=i+1;intend=-1;SynonymItemvalue=null;for(;to<text.length();++to){state=trie.transition(text.charAt(to),state);if(state<0)break;SynonymItemoutput=trie.output(state);if(output!=null){value=output;end=to+1;}}if(value!=null){Synonymsynonym=value.randomSynonym(Type.EQUAL,preWord);if(synonym!=null){sbOut.append(synonym.realWord);preWord=synonym.realWord;}else{preWord=text.substring(start,end);sbOut.append(preWord);}i=end-1;}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));}}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));}} "]
731354[label="localVariableDeclaration\n inti=0 "]
831355[label="integralType\n int "]
831356[label="variableDeclarator\n i=0 "]
931357[label="variableDeclaratorId\n i "]
931358[label="literal\n 0 "]
731359[label="relationalExpression\n i<text.length() "]
831360[label="expressionName\n i "]
831361[label="methodInvocation_lfno_primary\n text.length() "]
931362[label="typeName\n text "]
731363[label="preIncrementExpression\n ++i "]
831364[label="expressionName\n i "]
731365[label="block\n {intstate=1;state=trie.transition(text.charAt(i),state);if(state>0){intstart=i;intto=i+1;intend=-1;SynonymItemvalue=null;for(;to<text.length();++to){state=trie.transition(text.charAt(to),state);if(state<0)break;SynonymItemoutput=trie.output(state);if(output!=null){value=output;end=to+1;}}if(value!=null){Synonymsynonym=value.randomSynonym(Type.EQUAL,preWord);if(synonym!=null){sbOut.append(synonym.realWord);preWord=synonym.realWord;}else{preWord=text.substring(start,end);sbOut.append(preWord);}i=end-1;}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));}}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));}} "]
831366[label="blockStatements\n intstate=1;state=trie.transition(text.charAt(i),state);if(state>0){intstart=i;intto=i+1;intend=-1;SynonymItemvalue=null;for(;to<text.length();++to){state=trie.transition(text.charAt(to),state);if(state<0)break;SynonymItemoutput=trie.output(state);if(output!=null){value=output;end=to+1;}}if(value!=null){Synonymsynonym=value.randomSynonym(Type.EQUAL,preWord);if(synonym!=null){sbOut.append(synonym.realWord);preWord=synonym.realWord;}else{preWord=text.substring(start,end);sbOut.append(preWord);}i=end-1;}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));}}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));} "]
931367[label="localVariableDeclarationStatement\n intstate=1; "]
1031368[label="localVariableDeclaration\n intstate=1 "]
1131369[label="integralType\n int "]
1131370[label="variableDeclarator\n state=1 "]
1231371[label="variableDeclaratorId\n state "]
1231372[label="literal\n 1 "]
931373[label="expressionStatement\n state=trie.transition(text.charAt(i),state); "]
1031374[label="assignment\n state=trie.transition(text.charAt(i),state) "]
1131375[label="expressionName\n state "]
1131376[label="assignmentOperator\n = "]
1131377[label="methodInvocation_lfno_primary\n trie.transition(text.charAt(i),state) "]
1231378[label="typeName\n trie "]
1231379[label="argumentList\n text.charAt(i),state "]
1331380[label="methodInvocation_lfno_primary\n text.charAt(i) "]
1431381[label="typeName\n text "]
1431382[label="expressionName\n i "]
1331383[label="expressionName\n state "]
931384[label="ifThenElseStatement\n if(state>0){intstart=i;intto=i+1;intend=-1;SynonymItemvalue=null;for(;to<text.length();++to){state=trie.transition(text.charAt(to),state);if(state<0)break;SynonymItemoutput=trie.output(state);if(output!=null){value=output;end=to+1;}}if(value!=null){Synonymsynonym=value.randomSynonym(Type.EQUAL,preWord);if(synonym!=null){sbOut.append(synonym.realWord);preWord=synonym.realWord;}else{preWord=text.substring(start,end);sbOut.append(preWord);}i=end-1;}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));}}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));} "]
1031385[label="relationalExpression\n state>0 "]
1131386[label="expressionName\n state "]
1131387[label="literal\n 0 "]
1031388[label="block\n {intstart=i;intto=i+1;intend=-1;SynonymItemvalue=null;for(;to<text.length();++to){state=trie.transition(text.charAt(to),state);if(state<0)break;SynonymItemoutput=trie.output(state);if(output!=null){value=output;end=to+1;}}if(value!=null){Synonymsynonym=value.randomSynonym(Type.EQUAL,preWord);if(synonym!=null){sbOut.append(synonym.realWord);preWord=synonym.realWord;}else{preWord=text.substring(start,end);sbOut.append(preWord);}i=end-1;}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));}} "]
1131389[label="blockStatements\n intstart=i;intto=i+1;intend=-1;SynonymItemvalue=null;for(;to<text.length();++to){state=trie.transition(text.charAt(to),state);if(state<0)break;SynonymItemoutput=trie.output(state);if(output!=null){value=output;end=to+1;}}if(value!=null){Synonymsynonym=value.randomSynonym(Type.EQUAL,preWord);if(synonym!=null){sbOut.append(synonym.realWord);preWord=synonym.realWord;}else{preWord=text.substring(start,end);sbOut.append(preWord);}i=end-1;}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));} "]
1231390[label="localVariableDeclarationStatement\n intstart=i; "]
1331391[label="localVariableDeclaration\n intstart=i "]
1431392[label="integralType\n int "]
1431393[label="variableDeclarator\n start=i "]
1531394[label="variableDeclaratorId\n start "]
1531395[label="expressionName\n i "]
1231396[label="localVariableDeclarationStatement\n intto=i+1; "]
1331397[label="localVariableDeclaration\n intto=i+1 "]
1431398[label="integralType\n int "]
1431399[label="variableDeclarator\n to=i+1 "]
1531400[label="variableDeclaratorId\n to "]
1531401[label="additiveExpression\n i+1 "]
1631402[label="expressionName\n i "]
1631403[label="literal\n 1 "]
1231404[label="localVariableDeclarationStatement\n intend=-1; "]
1331405[label="localVariableDeclaration\n intend=-1 "]
1431406[label="integralType\n int "]
1431407[label="variableDeclarator\n end=-1 "]
1531408[label="variableDeclaratorId\n end "]
1531409[label="unaryExpression\n -1 "]
1631410[label="literal\n 1 "]
1231411[label="localVariableDeclarationStatement\n SynonymItemvalue=null; "]
1331412[label="localVariableDeclaration\n SynonymItemvalue=null "]
1431413[label="unannClassType_lfno_unannClassOrInterfaceType\n SynonymItem "]
1431414[label="variableDeclarator\n value=null "]
1531415[label="variableDeclaratorId\n value "]
1531416[label="literal\n null "]
1231417[label="basicForStatement\n for(;to<text.length();++to){state=trie.transition(text.charAt(to),state);if(state<0)break;SynonymItemoutput=trie.output(state);if(output!=null){value=output;end=to+1;}} "]
1331418[label="relationalExpression\n to<text.length() "]
1431419[label="expressionName\n to "]
1431420[label="methodInvocation_lfno_primary\n text.length() "]
1531421[label="typeName\n text "]
1331422[label="preIncrementExpression\n ++to "]
1431423[label="expressionName\n to "]
1331424[label="block\n {state=trie.transition(text.charAt(to),state);if(state<0)break;SynonymItemoutput=trie.output(state);if(output!=null){value=output;end=to+1;}} "]
1431425[label="blockStatements\n state=trie.transition(text.charAt(to),state);if(state<0)break;SynonymItemoutput=trie.output(state);if(output!=null){value=output;end=to+1;} "]
1531426[label="expressionStatement\n state=trie.transition(text.charAt(to),state); "]
1631427[label="assignment\n state=trie.transition(text.charAt(to),state) "]
1731428[label="expressionName\n state "]
1731429[label="assignmentOperator\n = "]
1731430[label="methodInvocation_lfno_primary\n trie.transition(text.charAt(to),state) "]
1831431[label="typeName\n trie "]
1831432[label="argumentList\n text.charAt(to),state "]
1931433[label="methodInvocation_lfno_primary\n text.charAt(to) "]
2031434[label="typeName\n text "]
2031435[label="expressionName\n to "]
1931436[label="expressionName\n state "]
1531437[label="ifThenStatement\n if(state<0)break; "]
1631438[label="relationalExpression\n state<0 "]
1731439[label="expressionName\n state "]
1731440[label="literal\n 0 "]
1631441[label="breakStatement\n break; "]
1531442[label="localVariableDeclarationStatement\n SynonymItemoutput=trie.output(state); "]
1631443[label="localVariableDeclaration\n SynonymItemoutput=trie.output(state) "]
1731444[label="unannClassType_lfno_unannClassOrInterfaceType\n SynonymItem "]
1731445[label="variableDeclarator\n output=trie.output(state) "]
1831446[label="variableDeclaratorId\n output "]
1831447[label="methodInvocation_lfno_primary\n trie.output(state) "]
1931448[label="typeName\n trie "]
1931449[label="expressionName\n state "]
1531450[label="ifThenStatement\n if(output!=null){value=output;end=to+1;} "]
1631451[label="equalityExpression\n output!=null "]
1731452[label="expressionName\n output "]
1731453[label="literal\n null "]
1631454[label="block\n {value=output;end=to+1;} "]
1731455[label="blockStatements\n value=output;end=to+1; "]
1831456[label="expressionStatement\n value=output; "]
1931457[label="assignment\n value=output "]
2031458[label="expressionName\n value "]
2031459[label="assignmentOperator\n = "]
2031460[label="expressionName\n output "]
1831461[label="expressionStatement\n end=to+1; "]
1931462[label="assignment\n end=to+1 "]
2031463[label="expressionName\n end "]
2031464[label="assignmentOperator\n = "]
2031465[label="additiveExpression\n to+1 "]
2131466[label="expressionName\n to "]
2131467[label="literal\n 1 "]
1231468[label="ifThenElseStatement\n if(value!=null){Synonymsynonym=value.randomSynonym(Type.EQUAL,preWord);if(synonym!=null){sbOut.append(synonym.realWord);preWord=synonym.realWord;}else{preWord=text.substring(start,end);sbOut.append(preWord);}i=end-1;}else{preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));} "]
1331469[label="equalityExpression\n value!=null "]
1431470[label="expressionName\n value "]
1431471[label="literal\n null "]
1331472[label="block\n {Synonymsynonym=value.randomSynonym(Type.EQUAL,preWord);if(synonym!=null){sbOut.append(synonym.realWord);preWord=synonym.realWord;}else{preWord=text.substring(start,end);sbOut.append(preWord);}i=end-1;} "]
1431473[label="blockStatements\n Synonymsynonym=value.randomSynonym(Type.EQUAL,preWord);if(synonym!=null){sbOut.append(synonym.realWord);preWord=synonym.realWord;}else{preWord=text.substring(start,end);sbOut.append(preWord);}i=end-1; "]
1531474[label="localVariableDeclarationStatement\n Synonymsynonym=value.randomSynonym(Type.EQUAL,preWord); "]
1631475[label="localVariableDeclaration\n Synonymsynonym=value.randomSynonym(Type.EQUAL,preWord) "]
1731476[label="unannClassType_lfno_unannClassOrInterfaceType\n Synonym "]
1731477[label="variableDeclarator\n synonym=value.randomSynonym(Type.EQUAL,preWord) "]
1831478[label="variableDeclaratorId\n synonym "]
1831479[label="methodInvocation_lfno_primary\n value.randomSynonym(Type.EQUAL,preWord) "]
1931480[label="typeName\n value "]
1931481[label="argumentList\n Type.EQUAL,preWord "]
2031482[label="expressionName\n Type.EQUAL "]
2131483[label="ambiguousName\n Type "]
2031484[label="expressionName\n preWord "]
1531485[label="ifThenElseStatement\n if(synonym!=null){sbOut.append(synonym.realWord);preWord=synonym.realWord;}else{preWord=text.substring(start,end);sbOut.append(preWord);} "]
1631486[label="equalityExpression\n synonym!=null "]
1731487[label="expressionName\n synonym "]
1731488[label="literal\n null "]
1631489[label="block\n {sbOut.append(synonym.realWord);preWord=synonym.realWord;} "]
1731490[label="blockStatements\n sbOut.append(synonym.realWord);preWord=synonym.realWord; "]
1831491[label="expressionStatement\n sbOut.append(synonym.realWord); "]
1931492[label="methodInvocation\n sbOut.append(synonym.realWord) "]
2031493[label="typeName\n sbOut "]
2031494[label="expressionName\n synonym.realWord "]
2131495[label="ambiguousName\n synonym "]
1831496[label="expressionStatement\n preWord=synonym.realWord; "]
1931497[label="assignment\n preWord=synonym.realWord "]
2031498[label="expressionName\n preWord "]
2031499[label="assignmentOperator\n = "]
2031500[label="expressionName\n synonym.realWord "]
2131501[label="ambiguousName\n synonym "]
1631502[label="block\n {preWord=text.substring(start,end);sbOut.append(preWord);} "]
1731503[label="blockStatements\n preWord=text.substring(start,end);sbOut.append(preWord); "]
1831504[label="expressionStatement\n preWord=text.substring(start,end); "]
1931505[label="assignment\n preWord=text.substring(start,end) "]
2031506[label="expressionName\n preWord "]
2031507[label="assignmentOperator\n = "]
2031508[label="methodInvocation_lfno_primary\n text.substring(start,end) "]
2131509[label="typeName\n text "]
2131510[label="argumentList\n start,end "]
2231511[label="expressionName\n start "]
2231512[label="expressionName\n end "]
1831513[label="expressionStatement\n sbOut.append(preWord); "]
1931514[label="methodInvocation\n sbOut.append(preWord) "]
2031515[label="typeName\n sbOut "]
2031516[label="expressionName\n preWord "]
1531517[label="expressionStatement\n i=end-1; "]
1631518[label="assignment\n i=end-1 "]
1731519[label="expressionName\n i "]
1731520[label="assignmentOperator\n = "]
1731521[label="additiveExpression\n end-1 "]
1831522[label="expressionName\n end "]
1831523[label="literal\n 1 "]
1331524[label="block\n {preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));} "]
1431525[label="blockStatements\n preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i)); "]
1531526[label="expressionStatement\n preWord=String.valueOf(text.charAt(i)); "]
1631527[label="assignment\n preWord=String.valueOf(text.charAt(i)) "]
1731528[label="expressionName\n preWord "]
1731529[label="assignmentOperator\n = "]
1731530[label="methodInvocation_lfno_primary\n String.valueOf(text.charAt(i)) "]
1831531[label="typeName\n String "]
1831532[label="methodInvocation_lfno_primary\n text.charAt(i) "]
1931533[label="typeName\n text "]
1931534[label="expressionName\n i "]
1531535[label="expressionStatement\n sbOut.append(text.charAt(i)); "]
1631536[label="methodInvocation\n sbOut.append(text.charAt(i)) "]
1731537[label="typeName\n sbOut "]
1731538[label="methodInvocation_lfno_primary\n text.charAt(i) "]
1831539[label="typeName\n text "]
1831540[label="expressionName\n i "]
1031541[label="block\n {preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i));} "]
1131542[label="blockStatements\n preWord=String.valueOf(text.charAt(i));sbOut.append(text.charAt(i)); "]
1231543[label="expressionStatement\n preWord=String.valueOf(text.charAt(i)); "]
1331544[label="assignment\n preWord=String.valueOf(text.charAt(i)) "]
1431545[label="expressionName\n preWord "]
1431546[label="assignmentOperator\n = "]
1431547[label="methodInvocation_lfno_primary\n String.valueOf(text.charAt(i)) "]
1531548[label="typeName\n String "]
1531549[label="methodInvocation_lfno_primary\n text.charAt(i) "]
1631550[label="typeName\n text "]
1631551[label="expressionName\n i "]
1231552[label="expressionStatement\n sbOut.append(text.charAt(i)); "]
1331553[label="methodInvocation\n sbOut.append(text.charAt(i)) "]
1431554[label="typeName\n sbOut "]
1431555[label="methodInvocation_lfno_primary\n text.charAt(i) "]
1531556[label="typeName\n text "]
1531557[label="expressionName\n i "]
631558[label="returnStatement\n returnsbOut.toString(); "]
731559[label="methodInvocation_lfno_primary\n sbOut.toString() "]
831560[label="typeName\n sbOut "]
331561[label="methodDeclaration\n publicStringrewrite(Stringtext){List<Term>termList=StandardTokenizer.segment(text.toCharArray());StringBuildersbOut=newStringBuilder((int)(text.length()*1.2));StringpreWord=Predefine.TAG_BIGIN;for(Termterm:termList){SynonymItemsynonymItem=get(term.word);Synonymsynonym;if(synonymItem!=null&&(synonym=synonymItem.randomSynonym(Type.EQUAL,preWord))!=null){sbOut.append(synonym.realWord);}elsesbOut.append(term.word);preWord=PosTagCompiler.compile(term.nature.toString(),term.word);}returnsbOut.toString();} "]
431562[label="methodModifier\n public "]
431563[label="methodHeader\n Stringrewrite(Stringtext) "]
531564[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
531565[label="methodDeclarator\n rewrite(Stringtext) "]
631566[label="formalParameter\n Stringtext "]
731567[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
731568[label="variableDeclaratorId\n text "]
431569[label="block\n {List<Term>termList=StandardTokenizer.segment(text.toCharArray());StringBuildersbOut=newStringBuilder((int)(text.length()*1.2));StringpreWord=Predefine.TAG_BIGIN;for(Termterm:termList){SynonymItemsynonymItem=get(term.word);Synonymsynonym;if(synonymItem!=null&&(synonym=synonymItem.randomSynonym(Type.EQUAL,preWord))!=null){sbOut.append(synonym.realWord);}elsesbOut.append(term.word);preWord=PosTagCompiler.compile(term.nature.toString(),term.word);}returnsbOut.toString();} "]
531570[label="blockStatements\n List<Term>termList=StandardTokenizer.segment(text.toCharArray());StringBuildersbOut=newStringBuilder((int)(text.length()*1.2));StringpreWord=Predefine.TAG_BIGIN;for(Termterm:termList){SynonymItemsynonymItem=get(term.word);Synonymsynonym;if(synonymItem!=null&&(synonym=synonymItem.randomSynonym(Type.EQUAL,preWord))!=null){sbOut.append(synonym.realWord);}elsesbOut.append(term.word);preWord=PosTagCompiler.compile(term.nature.toString(),term.word);}returnsbOut.toString(); "]
631571[label="localVariableDeclarationStatement\n List<Term>termList=StandardTokenizer.segment(text.toCharArray()); "]
731572[label="localVariableDeclaration\n List<Term>termList=StandardTokenizer.segment(text.toCharArray()) "]
831573[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Term> "]
931574[label="typeArguments\n <Term> "]
1031575[label="classType_lfno_classOrInterfaceType\n Term "]
831576[label="variableDeclarator\n termList=StandardTokenizer.segment(text.toCharArray()) "]
931577[label="variableDeclaratorId\n termList "]
931578[label="methodInvocation_lfno_primary\n StandardTokenizer.segment(text.toCharArray()) "]
1031579[label="typeName\n StandardTokenizer "]
1031580[label="methodInvocation_lfno_primary\n text.toCharArray() "]
1131581[label="typeName\n text "]
631582[label="localVariableDeclarationStatement\n StringBuildersbOut=newStringBuilder((int)(text.length()*1.2)); "]
731583[label="localVariableDeclaration\n StringBuildersbOut=newStringBuilder((int)(text.length()*1.2)) "]
831584[label="unannClassType_lfno_unannClassOrInterfaceType\n StringBuilder "]
831585[label="variableDeclarator\n sbOut=newStringBuilder((int)(text.length()*1.2)) "]
931586[label="variableDeclaratorId\n sbOut "]
931587[label="classInstanceCreationExpression_lfno_primary\n newStringBuilder((int)(text.length()*1.2)) "]
1031588[label="castExpression\n (int)(text.length()*1.2) "]
1131589[label="integralType\n int "]
1131590[label="primaryNoNewArray_lfno_primary\n (text.length()*1.2) "]
1231591[label="multiplicativeExpression\n text.length()*1.2 "]
1331592[label="methodInvocation_lfno_primary\n text.length() "]
1431593[label="typeName\n text "]
1331594[label="literal\n 1.2 "]
631595[label="localVariableDeclarationStatement\n StringpreWord=Predefine.TAG_BIGIN; "]
731596[label="localVariableDeclaration\n StringpreWord=Predefine.TAG_BIGIN "]
831597[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
831598[label="variableDeclarator\n preWord=Predefine.TAG_BIGIN "]
931599[label="variableDeclaratorId\n preWord "]
931600[label="expressionName\n Predefine.TAG_BIGIN "]
1031601[label="ambiguousName\n Predefine "]
631602[label="enhancedForStatement\n for(Termterm:termList){SynonymItemsynonymItem=get(term.word);Synonymsynonym;if(synonymItem!=null&&(synonym=synonymItem.randomSynonym(Type.EQUAL,preWord))!=null){sbOut.append(synonym.realWord);}elsesbOut.append(term.word);preWord=PosTagCompiler.compile(term.nature.toString(),term.word);} "]
731603[label="unannClassType_lfno_unannClassOrInterfaceType\n Term "]
731604[label="variableDeclaratorId\n term "]
731605[label="expressionName\n termList "]
731606[label="block\n {SynonymItemsynonymItem=get(term.word);Synonymsynonym;if(synonymItem!=null&&(synonym=synonymItem.randomSynonym(Type.EQUAL,preWord))!=null){sbOut.append(synonym.realWord);}elsesbOut.append(term.word);preWord=PosTagCompiler.compile(term.nature.toString(),term.word);} "]
831607[label="blockStatements\n SynonymItemsynonymItem=get(term.word);Synonymsynonym;if(synonymItem!=null&&(synonym=synonymItem.randomSynonym(Type.EQUAL,preWord))!=null){sbOut.append(synonym.realWord);}elsesbOut.append(term.word);preWord=PosTagCompiler.compile(term.nature.toString(),term.word); "]
931608[label="localVariableDeclarationStatement\n SynonymItemsynonymItem=get(term.word); "]
1031609[label="localVariableDeclaration\n SynonymItemsynonymItem=get(term.word) "]
1131610[label="unannClassType_lfno_unannClassOrInterfaceType\n SynonymItem "]
1131611[label="variableDeclarator\n synonymItem=get(term.word) "]
1231612[label="variableDeclaratorId\n synonymItem "]
1231613[label="methodInvocation_lfno_primary\n get(term.word) "]
1331614[label="methodName\n get "]
1331615[label="expressionName\n term.word "]
1431616[label="ambiguousName\n term "]
931617[label="localVariableDeclarationStatement\n Synonymsynonym; "]
1031618[label="localVariableDeclaration\n Synonymsynonym "]
1131619[label="unannClassType_lfno_unannClassOrInterfaceType\n Synonym "]
1131620[label="variableDeclaratorId\n synonym "]
931621[label="ifThenElseStatement\n if(synonymItem!=null&&(synonym=synonymItem.randomSynonym(Type.EQUAL,preWord))!=null){sbOut.append(synonym.realWord);}elsesbOut.append(term.word); "]
1031622[label="conditionalAndExpression\n synonymItem!=null&&(synonym=synonymItem.randomSynonym(Type.EQUAL,preWord))!=null "]
1131623[label="equalityExpression\n synonymItem!=null "]
1231624[label="expressionName\n synonymItem "]
1231625[label="literal\n null "]
1131626[label="equalityExpression\n (synonym=synonymItem.randomSynonym(Type.EQUAL,preWord))!=null "]
1231627[label="primaryNoNewArray_lfno_primary\n (synonym=synonymItem.randomSynonym(Type.EQUAL,preWord)) "]
1331628[label="assignment\n synonym=synonymItem.randomSynonym(Type.EQUAL,preWord) "]
1431629[label="expressionName\n synonym "]
1431630[label="assignmentOperator\n = "]
1431631[label="methodInvocation_lfno_primary\n synonymItem.randomSynonym(Type.EQUAL,preWord) "]
1531632[label="typeName\n synonymItem "]
1531633[label="argumentList\n Type.EQUAL,preWord "]
1631634[label="expressionName\n Type.EQUAL "]
1731635[label="ambiguousName\n Type "]
1631636[label="expressionName\n preWord "]
1231637[label="literal\n null "]
1031638[label="block\n {sbOut.append(synonym.realWord);} "]
1131639[label="expressionStatement\n sbOut.append(synonym.realWord); "]
1231640[label="methodInvocation\n sbOut.append(synonym.realWord) "]
1331641[label="typeName\n sbOut "]
1331642[label="expressionName\n synonym.realWord "]
1431643[label="ambiguousName\n synonym "]
1031644[label="expressionStatement\n sbOut.append(term.word); "]
1131645[label="methodInvocation\n sbOut.append(term.word) "]
1231646[label="typeName\n sbOut "]
1231647[label="expressionName\n term.word "]
1331648[label="ambiguousName\n term "]
931649[label="expressionStatement\n preWord=PosTagCompiler.compile(term.nature.toString(),term.word); "]
1031650[label="assignment\n preWord=PosTagCompiler.compile(term.nature.toString(),term.word) "]
1131651[label="expressionName\n preWord "]
1131652[label="assignmentOperator\n = "]
1131653[label="methodInvocation_lfno_primary\n PosTagCompiler.compile(term.nature.toString(),term.word) "]
1231654[label="typeName\n PosTagCompiler "]
1231655[label="argumentList\n term.nature.toString(),term.word "]
1331656[label="methodInvocation_lfno_primary\n term.nature.toString() "]
1431657[label="typeName\n term.nature "]
1531658[label="packageOrTypeName\n term "]
1331659[label="expressionName\n term.word "]
1431660[label="ambiguousName\n term "]
631661[label="returnStatement\n returnsbOut.toString(); "]
731662[label="methodInvocation_lfno_primary\n sbOut.toString() "]
831663[label="typeName\n sbOut "]
331664[label="normalClassDeclaration\n publicstaticclassSynonymItem{publicSynonymentry;publicList<Synonym>synonymList;publicTypetype;publicSynonymItem(Synonymentry,List<Synonym>synonymList,Typetype){this.entry=entry;this.synonymList=synonymList;this.type=type;}publicSynonymItem(Synonymentry,List<Synonym>synonymList,chartype){this.entry=entry;this.synonymList=synonymList;switch(type){case'=':this.type=Type.EQUAL;break;case'#':this.type=Type.LIKE;break;default:this.type=Type.SINGLE;break;}}publicSynonymrandomSynonym(Typetype,StringpreWord){ArrayList<Synonym>synonymArrayList=newArrayList<Synonym>(synonymList);ListIterator<Synonym>listIterator=synonymArrayList.listIterator();if(type!=null)while(listIterator.hasNext()){Synonymsynonym=listIterator.next();if(synonym.type!=type||(preWord!=null&&CoreBiGramTableDictionary.getBiFrequency(preWord,synonym.realWord)==0))listIterator.remove();}if(synonymArrayList.size()==0)returnnull;returnsynonymArrayList.get((int)(System.currentTimeMillis()%(long)synonymArrayList.size()));}publicSynonymrandomSynonym(){returnrandomSynonym(null,null);}@OverridepublicStringtoString(){finalStringBuildersb=newStringBuilder();sb.append(entry);sb.append(' ');sb.append(type);sb.append(' ');sb.append(synonymList);returnsb.toString();}publiclongdistance(SynonymItemother){returnentry.distance(other.entry);}publicstaticSynonymItemcreateUndefined(Stringword){SynonymItemitem=newSynonymItem(newSynonym(word,word.hashCode()*1000000+Long.MAX_VALUE/3),null,Type.UNDEFINED);returnitem;}} "]
431665[label="classModifier\n public "]
431666[label="classModifier\n static "]
431667[label="classBody\n {publicSynonymentry;publicList<Synonym>synonymList;publicTypetype;publicSynonymItem(Synonymentry,List<Synonym>synonymList,Typetype){this.entry=entry;this.synonymList=synonymList;this.type=type;}publicSynonymItem(Synonymentry,List<Synonym>synonymList,chartype){this.entry=entry;this.synonymList=synonymList;switch(type){case'=':this.type=Type.EQUAL;break;case'#':this.type=Type.LIKE;break;default:this.type=Type.SINGLE;break;}}publicSynonymrandomSynonym(Typetype,StringpreWord){ArrayList<Synonym>synonymArrayList=newArrayList<Synonym>(synonymList);ListIterator<Synonym>listIterator=synonymArrayList.listIterator();if(type!=null)while(listIterator.hasNext()){Synonymsynonym=listIterator.next();if(synonym.type!=type||(preWord!=null&&CoreBiGramTableDictionary.getBiFrequency(preWord,synonym.realWord)==0))listIterator.remove();}if(synonymArrayList.size()==0)returnnull;returnsynonymArrayList.get((int)(System.currentTimeMillis()%(long)synonymArrayList.size()));}publicSynonymrandomSynonym(){returnrandomSynonym(null,null);}@OverridepublicStringtoString(){finalStringBuildersb=newStringBuilder();sb.append(entry);sb.append(' ');sb.append(type);sb.append(' ');sb.append(synonymList);returnsb.toString();}publiclongdistance(SynonymItemother){returnentry.distance(other.entry);}publicstaticSynonymItemcreateUndefined(Stringword){SynonymItemitem=newSynonymItem(newSynonym(word,word.hashCode()*1000000+Long.MAX_VALUE/3),null,Type.UNDEFINED);returnitem;}} "]
531668[label="fieldDeclaration\n publicSynonymentry; "]
631669[label="fieldModifier\n public "]
631670[label="unannClassType_lfno_unannClassOrInterfaceType\n Synonym "]
631671[label="variableDeclaratorId\n entry "]
531672[label="fieldDeclaration\n publicList<Synonym>synonymList; "]
631673[label="fieldModifier\n public "]
631674[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Synonym> "]
731675[label="typeArguments\n <Synonym> "]
831676[label="classType_lfno_classOrInterfaceType\n Synonym "]
631677[label="variableDeclaratorId\n synonymList "]
531678[label="fieldDeclaration\n publicTypetype; "]
631679[label="fieldModifier\n public "]
631680[label="unannClassType_lfno_unannClassOrInterfaceType\n Type "]
631681[label="variableDeclaratorId\n type "]
531682[label="constructorDeclaration\n publicSynonymItem(Synonymentry,List<Synonym>synonymList,Typetype){this.entry=entry;this.synonymList=synonymList;this.type=type;} "]
631683[label="constructorModifier\n public "]
631684[label="constructorDeclarator\n SynonymItem(Synonymentry,List<Synonym>synonymList,Typetype) "]
731685[label="simpleTypeName\n SynonymItem "]
731686[label="formalParameterList\n Synonymentry,List<Synonym>synonymList,Typetype "]
831687[label="formalParameters\n Synonymentry,List<Synonym>synonymList "]
931688[label="formalParameter\n Synonymentry "]
1031689[label="unannClassType_lfno_unannClassOrInterfaceType\n Synonym "]
1031690[label="variableDeclaratorId\n entry "]
931691[label="formalParameter\n List<Synonym>synonymList "]
1031692[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Synonym> "]
1131693[label="typeArguments\n <Synonym> "]
1231694[label="classType_lfno_classOrInterfaceType\n Synonym "]
1031695[label="variableDeclaratorId\n synonymList "]
831696[label="formalParameter\n Typetype "]
931697[label="unannClassType_lfno_unannClassOrInterfaceType\n Type "]
931698[label="variableDeclaratorId\n type "]
631699[label="constructorBody\n {this.entry=entry;this.synonymList=synonymList;this.type=type;} "]
731700[label="blockStatements\n this.entry=entry;this.synonymList=synonymList;this.type=type; "]
831701[label="expressionStatement\n this.entry=entry; "]
931702[label="assignment\n this.entry=entry "]
1031703[label="fieldAccess\n this.entry "]
1131704[label="primaryNoNewArray_lfno_primary\n this "]
1031705[label="assignmentOperator\n = "]
1031706[label="expressionName\n entry "]
831707[label="expressionStatement\n this.synonymList=synonymList; "]
931708[label="assignment\n this.synonymList=synonymList "]
1031709[label="fieldAccess\n this.synonymList "]
1131710[label="primaryNoNewArray_lfno_primary\n this "]
1031711[label="assignmentOperator\n = "]
1031712[label="expressionName\n synonymList "]
831713[label="expressionStatement\n this.type=type; "]
931714[label="assignment\n this.type=type "]
1031715[label="fieldAccess\n this.type "]
1131716[label="primaryNoNewArray_lfno_primary\n this "]
1031717[label="assignmentOperator\n = "]
1031718[label="expressionName\n type "]
531719[label="constructorDeclaration\n publicSynonymItem(Synonymentry,List<Synonym>synonymList,chartype){this.entry=entry;this.synonymList=synonymList;switch(type){case'=':this.type=Type.EQUAL;break;case'#':this.type=Type.LIKE;break;default:this.type=Type.SINGLE;break;}} "]
631720[label="constructorModifier\n public "]
631721[label="constructorDeclarator\n SynonymItem(Synonymentry,List<Synonym>synonymList,chartype) "]
731722[label="simpleTypeName\n SynonymItem "]
731723[label="formalParameterList\n Synonymentry,List<Synonym>synonymList,chartype "]
831724[label="formalParameters\n Synonymentry,List<Synonym>synonymList "]
931725[label="formalParameter\n Synonymentry "]
1031726[label="unannClassType_lfno_unannClassOrInterfaceType\n Synonym "]
1031727[label="variableDeclaratorId\n entry "]
931728[label="formalParameter\n List<Synonym>synonymList "]
1031729[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Synonym> "]
1131730[label="typeArguments\n <Synonym> "]
1231731[label="classType_lfno_classOrInterfaceType\n Synonym "]
1031732[label="variableDeclaratorId\n synonymList "]
831733[label="formalParameter\n chartype "]
931734[label="integralType\n char "]
931735[label="variableDeclaratorId\n type "]
631736[label="constructorBody\n {this.entry=entry;this.synonymList=synonymList;switch(type){case'=':this.type=Type.EQUAL;break;case'#':this.type=Type.LIKE;break;default:this.type=Type.SINGLE;break;}} "]
731737[label="blockStatements\n this.entry=entry;this.synonymList=synonymList;switch(type){case'=':this.type=Type.EQUAL;break;case'#':this.type=Type.LIKE;break;default:this.type=Type.SINGLE;break;} "]
831738[label="expressionStatement\n this.entry=entry; "]
931739[label="assignment\n this.entry=entry "]
1031740[label="fieldAccess\n this.entry "]
1131741[label="primaryNoNewArray_lfno_primary\n this "]
1031742[label="assignmentOperator\n = "]
1031743[label="expressionName\n entry "]
831744[label="expressionStatement\n this.synonymList=synonymList; "]
931745[label="assignment\n this.synonymList=synonymList "]
1031746[label="fieldAccess\n this.synonymList "]
1131747[label="primaryNoNewArray_lfno_primary\n this "]
1031748[label="assignmentOperator\n = "]
1031749[label="expressionName\n synonymList "]
831750[label="switchStatement\n switch(type){case'=':this.type=Type.EQUAL;break;case'#':this.type=Type.LIKE;break;default:this.type=Type.SINGLE;break;} "]
931751[label="expressionName\n type "]
931752[label="switchBlock\n {case'=':this.type=Type.EQUAL;break;case'#':this.type=Type.LIKE;break;default:this.type=Type.SINGLE;break;} "]
1031753[label="switchBlockStatementGroup\n case'=':this.type=Type.EQUAL;break; "]
1131754[label="switchLabel\n case'=': "]
1231755[label="literal\n '=' "]
1131756[label="blockStatements\n this.type=Type.EQUAL;break; "]
1231757[label="expressionStatement\n this.type=Type.EQUAL; "]
1331758[label="assignment\n this.type=Type.EQUAL "]
1431759[label="fieldAccess\n this.type "]
1531760[label="primaryNoNewArray_lfno_primary\n this "]
1431761[label="assignmentOperator\n = "]
1431762[label="expressionName\n Type.EQUAL "]
1531763[label="ambiguousName\n Type "]
1231764[label="breakStatement\n break; "]
1031765[label="switchBlockStatementGroup\n case'#':this.type=Type.LIKE;break; "]
1131766[label="switchLabel\n case'#': "]
1231767[label="literal\n '#' "]
1131768[label="blockStatements\n this.type=Type.LIKE;break; "]
1231769[label="expressionStatement\n this.type=Type.LIKE; "]
1331770[label="assignment\n this.type=Type.LIKE "]
1431771[label="fieldAccess\n this.type "]
1531772[label="primaryNoNewArray_lfno_primary\n this "]
1431773[label="assignmentOperator\n = "]
1431774[label="expressionName\n Type.LIKE "]
1531775[label="ambiguousName\n Type "]
1231776[label="breakStatement\n break; "]
1031777[label="switchBlockStatementGroup\n default:this.type=Type.SINGLE;break; "]
1131778[label="switchLabel\n default: "]
1131779[label="blockStatements\n this.type=Type.SINGLE;break; "]
1231780[label="expressionStatement\n this.type=Type.SINGLE; "]
1331781[label="assignment\n this.type=Type.SINGLE "]
1431782[label="fieldAccess\n this.type "]
1531783[label="primaryNoNewArray_lfno_primary\n this "]
1431784[label="assignmentOperator\n = "]
1431785[label="expressionName\n Type.SINGLE "]
1531786[label="ambiguousName\n Type "]
1231787[label="breakStatement\n break; "]
531788[label="methodDeclaration\n publicSynonymrandomSynonym(Typetype,StringpreWord){ArrayList<Synonym>synonymArrayList=newArrayList<Synonym>(synonymList);ListIterator<Synonym>listIterator=synonymArrayList.listIterator();if(type!=null)while(listIterator.hasNext()){Synonymsynonym=listIterator.next();if(synonym.type!=type||(preWord!=null&&CoreBiGramTableDictionary.getBiFrequency(preWord,synonym.realWord)==0))listIterator.remove();}if(synonymArrayList.size()==0)returnnull;returnsynonymArrayList.get((int)(System.currentTimeMillis()%(long)synonymArrayList.size()));} "]
631789[label="methodModifier\n public "]
631790[label="methodHeader\n SynonymrandomSynonym(Typetype,StringpreWord) "]
731791[label="unannClassType_lfno_unannClassOrInterfaceType\n Synonym "]
731792[label="methodDeclarator\n randomSynonym(Typetype,StringpreWord) "]
831793[label="formalParameterList\n Typetype,StringpreWord "]
931794[label="formalParameter\n Typetype "]
1031795[label="unannClassType_lfno_unannClassOrInterfaceType\n Type "]
1031796[label="variableDeclaratorId\n type "]
931797[label="formalParameter\n StringpreWord "]
1031798[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1031799[label="variableDeclaratorId\n preWord "]
631800[label="block\n {ArrayList<Synonym>synonymArrayList=newArrayList<Synonym>(synonymList);ListIterator<Synonym>listIterator=synonymArrayList.listIterator();if(type!=null)while(listIterator.hasNext()){Synonymsynonym=listIterator.next();if(synonym.type!=type||(preWord!=null&&CoreBiGramTableDictionary.getBiFrequency(preWord,synonym.realWord)==0))listIterator.remove();}if(synonymArrayList.size()==0)returnnull;returnsynonymArrayList.get((int)(System.currentTimeMillis()%(long)synonymArrayList.size()));} "]
731801[label="blockStatements\n ArrayList<Synonym>synonymArrayList=newArrayList<Synonym>(synonymList);ListIterator<Synonym>listIterator=synonymArrayList.listIterator();if(type!=null)while(listIterator.hasNext()){Synonymsynonym=listIterator.next();if(synonym.type!=type||(preWord!=null&&CoreBiGramTableDictionary.getBiFrequency(preWord,synonym.realWord)==0))listIterator.remove();}if(synonymArrayList.size()==0)returnnull;returnsynonymArrayList.get((int)(System.currentTimeMillis()%(long)synonymArrayList.size())); "]
831802[label="localVariableDeclarationStatement\n ArrayList<Synonym>synonymArrayList=newArrayList<Synonym>(synonymList); "]
931803[label="localVariableDeclaration\n ArrayList<Synonym>synonymArrayList=newArrayList<Synonym>(synonymList) "]
1031804[label="unannClassType_lfno_unannClassOrInterfaceType\n ArrayList<Synonym> "]
1131805[label="typeArguments\n <Synonym> "]
1231806[label="classType_lfno_classOrInterfaceType\n Synonym "]
1031807[label="variableDeclarator\n synonymArrayList=newArrayList<Synonym>(synonymList) "]
1131808[label="variableDeclaratorId\n synonymArrayList "]
1131809[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Synonym>(synonymList) "]
1231810[label="typeArguments\n <Synonym> "]
1331811[label="classType_lfno_classOrInterfaceType\n Synonym "]
1231812[label="expressionName\n synonymList "]
831813[label="localVariableDeclarationStatement\n ListIterator<Synonym>listIterator=synonymArrayList.listIterator(); "]
931814[label="localVariableDeclaration\n ListIterator<Synonym>listIterator=synonymArrayList.listIterator() "]
1031815[label="unannClassType_lfno_unannClassOrInterfaceType\n ListIterator<Synonym> "]
1131816[label="typeArguments\n <Synonym> "]
1231817[label="classType_lfno_classOrInterfaceType\n Synonym "]
1031818[label="variableDeclarator\n listIterator=synonymArrayList.listIterator() "]
1131819[label="variableDeclaratorId\n listIterator "]
1131820[label="methodInvocation_lfno_primary\n synonymArrayList.listIterator() "]
1231821[label="typeName\n synonymArrayList "]
831822[label="ifThenStatement\n if(type!=null)while(listIterator.hasNext()){Synonymsynonym=listIterator.next();if(synonym.type!=type||(preWord!=null&&CoreBiGramTableDictionary.getBiFrequency(preWord,synonym.realWord)==0))listIterator.remove();} "]
931823[label="equalityExpression\n type!=null "]
1031824[label="expressionName\n type "]
1031825[label="literal\n null "]
931826[label="whileStatement\n while(listIterator.hasNext()){Synonymsynonym=listIterator.next();if(synonym.type!=type||(preWord!=null&&CoreBiGramTableDictionary.getBiFrequency(preWord,synonym.realWord)==0))listIterator.remove();} "]
1031827[label="methodInvocation_lfno_primary\n listIterator.hasNext() "]
1131828[label="typeName\n listIterator "]
1031829[label="block\n {Synonymsynonym=listIterator.next();if(synonym.type!=type||(preWord!=null&&CoreBiGramTableDictionary.getBiFrequency(preWord,synonym.realWord)==0))listIterator.remove();} "]
1131830[label="blockStatements\n Synonymsynonym=listIterator.next();if(synonym.type!=type||(preWord!=null&&CoreBiGramTableDictionary.getBiFrequency(preWord,synonym.realWord)==0))listIterator.remove(); "]
1231831[label="localVariableDeclarationStatement\n Synonymsynonym=listIterator.next(); "]
1331832[label="localVariableDeclaration\n Synonymsynonym=listIterator.next() "]
1431833[label="unannClassType_lfno_unannClassOrInterfaceType\n Synonym "]
1431834[label="variableDeclarator\n synonym=listIterator.next() "]
1531835[label="variableDeclaratorId\n synonym "]
1531836[label="methodInvocation_lfno_primary\n listIterator.next() "]
1631837[label="typeName\n listIterator "]
1231838[label="ifThenStatement\n if(synonym.type!=type||(preWord!=null&&CoreBiGramTableDictionary.getBiFrequency(preWord,synonym.realWord)==0))listIterator.remove(); "]
1331839[label="conditionalOrExpression\n synonym.type!=type||(preWord!=null&&CoreBiGramTableDictionary.getBiFrequency(preWord,synonym.realWord)==0) "]
1431840[label="equalityExpression\n synonym.type!=type "]
1531841[label="expressionName\n synonym.type "]
1631842[label="ambiguousName\n synonym "]
1531843[label="expressionName\n type "]
1431844[label="primaryNoNewArray_lfno_primary\n (preWord!=null&&CoreBiGramTableDictionary.getBiFrequency(preWord,synonym.realWord)==0) "]
1531845[label="conditionalAndExpression\n preWord!=null&&CoreBiGramTableDictionary.getBiFrequency(preWord,synonym.realWord)==0 "]
1631846[label="equalityExpression\n preWord!=null "]
1731847[label="expressionName\n preWord "]
1731848[label="literal\n null "]
1631849[label="equalityExpression\n CoreBiGramTableDictionary.getBiFrequency(preWord,synonym.realWord)==0 "]
1731850[label="methodInvocation_lfno_primary\n CoreBiGramTableDictionary.getBiFrequency(preWord,synonym.realWord) "]
1831851[label="typeName\n CoreBiGramTableDictionary "]
1831852[label="argumentList\n preWord,synonym.realWord "]
1931853[label="expressionName\n preWord "]
1931854[label="expressionName\n synonym.realWord "]
2031855[label="ambiguousName\n synonym "]
1731856[label="literal\n 0 "]
1331857[label="expressionStatement\n listIterator.remove(); "]
1431858[label="methodInvocation\n listIterator.remove() "]
1531859[label="typeName\n listIterator "]
831860[label="ifThenStatement\n if(synonymArrayList.size()==0)returnnull; "]
931861[label="equalityExpression\n synonymArrayList.size()==0 "]
1031862[label="methodInvocation_lfno_primary\n synonymArrayList.size() "]
1131863[label="typeName\n synonymArrayList "]
1031864[label="literal\n 0 "]
931865[label="returnStatement\n returnnull; "]
1031866[label="literal\n null "]
831867[label="returnStatement\n returnsynonymArrayList.get((int)(System.currentTimeMillis()%(long)synonymArrayList.size())); "]
931868[label="methodInvocation_lfno_primary\n synonymArrayList.get((int)(System.currentTimeMillis()%(long)synonymArrayList.size())) "]
1031869[label="typeName\n synonymArrayList "]
1031870[label="castExpression\n (int)(System.currentTimeMillis()%(long)synonymArrayList.size()) "]
1131871[label="integralType\n int "]
1131872[label="primaryNoNewArray_lfno_primary\n (System.currentTimeMillis()%(long)synonymArrayList.size()) "]
1231873[label="multiplicativeExpression\n System.currentTimeMillis()%(long)synonymArrayList.size() "]
1331874[label="methodInvocation_lfno_primary\n System.currentTimeMillis() "]
1431875[label="typeName\n System "]
1331876[label="castExpression\n (long)synonymArrayList.size() "]
1431877[label="integralType\n long "]
1431878[label="methodInvocation_lfno_primary\n synonymArrayList.size() "]
1531879[label="typeName\n synonymArrayList "]
531880[label="methodDeclaration\n publicSynonymrandomSynonym(){returnrandomSynonym(null,null);} "]
631881[label="methodModifier\n public "]
631882[label="methodHeader\n SynonymrandomSynonym() "]
731883[label="unannClassType_lfno_unannClassOrInterfaceType\n Synonym "]
731884[label="methodDeclarator\n randomSynonym() "]
631885[label="block\n {returnrandomSynonym(null,null);} "]
731886[label="returnStatement\n returnrandomSynonym(null,null); "]
831887[label="methodInvocation_lfno_primary\n randomSynonym(null,null) "]
931888[label="methodName\n randomSynonym "]
931889[label="argumentList\n null,null "]
1031890[label="literal\n null "]
1031891[label="literal\n null "]
531892[label="methodDeclaration\n @OverridepublicStringtoString(){finalStringBuildersb=newStringBuilder();sb.append(entry);sb.append(' ');sb.append(type);sb.append(' ');sb.append(synonymList);returnsb.toString();} "]
631893[label="markerAnnotation\n @Override "]
731894[label="typeName\n Override "]
631895[label="methodModifier\n public "]
631896[label="methodHeader\n StringtoString() "]
731897[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
731898[label="methodDeclarator\n toString() "]
631899[label="block\n {finalStringBuildersb=newStringBuilder();sb.append(entry);sb.append(' ');sb.append(type);sb.append(' ');sb.append(synonymList);returnsb.toString();} "]
731900[label="blockStatements\n finalStringBuildersb=newStringBuilder();sb.append(entry);sb.append(' ');sb.append(type);sb.append(' ');sb.append(synonymList);returnsb.toString(); "]
831901[label="localVariableDeclarationStatement\n finalStringBuildersb=newStringBuilder(); "]
931902[label="localVariableDeclaration\n finalStringBuildersb=newStringBuilder() "]
1031903[label="variableModifier\n final "]
1031904[label="unannClassType_lfno_unannClassOrInterfaceType\n StringBuilder "]
1031905[label="variableDeclarator\n sb=newStringBuilder() "]
1131906[label="variableDeclaratorId\n sb "]
1131907[label="classInstanceCreationExpression_lfno_primary\n newStringBuilder() "]
831908[label="expressionStatement\n sb.append(entry); "]
931909[label="methodInvocation\n sb.append(entry) "]
1031910[label="typeName\n sb "]
1031911[label="expressionName\n entry "]
831912[label="expressionStatement\n sb.append(' '); "]
931913[label="methodInvocation\n sb.append(' ') "]
1031914[label="typeName\n sb "]
1031915[label="literal\n ' ' "]
831916[label="expressionStatement\n sb.append(type); "]
931917[label="methodInvocation\n sb.append(type) "]
1031918[label="typeName\n sb "]
1031919[label="expressionName\n type "]
831920[label="expressionStatement\n sb.append(' '); "]
931921[label="methodInvocation\n sb.append(' ') "]
1031922[label="typeName\n sb "]
1031923[label="literal\n ' ' "]
831924[label="expressionStatement\n sb.append(synonymList); "]
931925[label="methodInvocation\n sb.append(synonymList) "]
1031926[label="typeName\n sb "]
1031927[label="expressionName\n synonymList "]
831928[label="returnStatement\n returnsb.toString(); "]
931929[label="methodInvocation_lfno_primary\n sb.toString() "]
1031930[label="typeName\n sb "]
531931[label="methodDeclaration\n publiclongdistance(SynonymItemother){returnentry.distance(other.entry);} "]
631932[label="methodModifier\n public "]
631933[label="methodHeader\n longdistance(SynonymItemother) "]
731934[label="integralType\n long "]
731935[label="methodDeclarator\n distance(SynonymItemother) "]
831936[label="formalParameter\n SynonymItemother "]
931937[label="unannClassType_lfno_unannClassOrInterfaceType\n SynonymItem "]
931938[label="variableDeclaratorId\n other "]
631939[label="block\n {returnentry.distance(other.entry);} "]
731940[label="returnStatement\n returnentry.distance(other.entry); "]
831941[label="methodInvocation_lfno_primary\n entry.distance(other.entry) "]
931942[label="typeName\n entry "]
931943[label="expressionName\n other.entry "]
1031944[label="ambiguousName\n other "]
531945[label="methodDeclaration\n publicstaticSynonymItemcreateUndefined(Stringword){SynonymItemitem=newSynonymItem(newSynonym(word,word.hashCode()*1000000+Long.MAX_VALUE/3),null,Type.UNDEFINED);returnitem;} "]
631946[label="methodModifier\n public "]
631947[label="methodModifier\n static "]
631948[label="methodHeader\n SynonymItemcreateUndefined(Stringword) "]
731949[label="unannClassType_lfno_unannClassOrInterfaceType\n SynonymItem "]
731950[label="methodDeclarator\n createUndefined(Stringword) "]
831951[label="formalParameter\n Stringword "]
931952[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
931953[label="variableDeclaratorId\n word "]
631954[label="block\n {SynonymItemitem=newSynonymItem(newSynonym(word,word.hashCode()*1000000+Long.MAX_VALUE/3),null,Type.UNDEFINED);returnitem;} "]
731955[label="blockStatements\n SynonymItemitem=newSynonymItem(newSynonym(word,word.hashCode()*1000000+Long.MAX_VALUE/3),null,Type.UNDEFINED);returnitem; "]
831956[label="localVariableDeclarationStatement\n SynonymItemitem=newSynonymItem(newSynonym(word,word.hashCode()*1000000+Long.MAX_VALUE/3),null,Type.UNDEFINED); "]
931957[label="localVariableDeclaration\n SynonymItemitem=newSynonymItem(newSynonym(word,word.hashCode()*1000000+Long.MAX_VALUE/3),null,Type.UNDEFINED) "]
1031958[label="unannClassType_lfno_unannClassOrInterfaceType\n SynonymItem "]
1031959[label="variableDeclarator\n item=newSynonymItem(newSynonym(word,word.hashCode()*1000000+Long.MAX_VALUE/3),null,Type.UNDEFINED) "]
1131960[label="variableDeclaratorId\n item "]
1131961[label="classInstanceCreationExpression_lfno_primary\n newSynonymItem(newSynonym(word,word.hashCode()*1000000+Long.MAX_VALUE/3),null,Type.UNDEFINED) "]
1231962[label="argumentList\n newSynonym(word,word.hashCode()*1000000+Long.MAX_VALUE/3),null,Type.UNDEFINED "]
1331963[label="classInstanceCreationExpression_lfno_primary\n newSynonym(word,word.hashCode()*1000000+Long.MAX_VALUE/3) "]
1431964[label="argumentList\n word,word.hashCode()*1000000+Long.MAX_VALUE/3 "]
1531965[label="expressionName\n word "]
1531966[label="additiveExpression\n word.hashCode()*1000000+Long.MAX_VALUE/3 "]
1631967[label="multiplicativeExpression\n word.hashCode()*1000000 "]
1731968[label="methodInvocation_lfno_primary\n word.hashCode() "]
1831969[label="typeName\n word "]
1731970[label="literal\n 1000000 "]
1631971[label="multiplicativeExpression\n Long.MAX_VALUE/3 "]
1731972[label="expressionName\n Long.MAX_VALUE "]
1831973[label="ambiguousName\n Long "]
1731974[label="literal\n 3 "]
1331975[label="literal\n null "]
1331976[label="expressionName\n Type.UNDEFINED "]
1431977[label="ambiguousName\n Type "]
831978[label="returnStatement\n returnitem; "]
931979[label="expressionName\n item "]
031980[label="compilationUnit\n packagecom.hankcs.hanlp.dictionary.common;importcom.hankcs.hanlp.algorithm.ArrayDistance;importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie;importcom.hankcs.hanlp.corpus.synonym.Synonym;importjava.io.BufferedReader;importjava.io.InputStream;importjava.io.InputStreamReader;importjava.util.*;importstaticcom.hankcs.hanlp.utility.Predefine.logger;publicclassCommonSynonymDictionaryEx{DoubleArrayTrie<Long[]>trie;privateCommonSynonymDictionaryEx(){}publicstaticCommonSynonymDictionaryExcreate(InputStreaminputStream){CommonSynonymDictionaryExdictionary=newCommonSynonymDictionaryEx();if(dictionary.load(inputStream)){returndictionary;}returnnull;}publicbooleanload(InputStreaminputStream){trie=newDoubleArrayTrie<Long[]>();TreeMap<String,Set<Long>>treeMap=newTreeMap<String,Set<Long>>();Stringline=null;try{BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\"));while((line=bw.readLine())!=null){String[]args=line.split(\" \");List<Synonym>synonymList=Synonym.create(args);for(Synonymsynonym:synonymList){Set<Long>idSet=treeMap.get(synonym.realWord);if(idSet==null){idSet=newTreeSet<Long>();treeMap.put(synonym.realWord,idSet);}idSet.add(synonym.id);}}bw.close();List<String>keyList=newArrayList<String>(treeMap.size());for(Stringkey:treeMap.keySet()){keyList.add(key);}List<Long[]>valueList=newArrayList<Long[]>(treeMap.size());for(Set<Long>idSet:treeMap.values()){valueList.add(idSet.toArray(newLong[0]));}intresultCode=trie.build(keyList,valueList);if(resultCode!=0){logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;}}catch(Exceptione){logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\"+e);returnfalse;}returntrue;}publicLong[]get(Stringkey){returntrie.get(key);}publiclongdistance(Stringa,Stringb){Long[]itemA=get(a);if(itemA==null)returnLong.MAX_VALUE/3;Long[]itemB=get(b);if(itemB==null)returnLong.MAX_VALUE/3;returnArrayDistance.computeAverageDistance(itemA,itemB);}publicstaticclassSynonymItemextendsSynonym{publicMap<String,Synonym>synonymMap;publicSynonymItem(Synonymentry,Map<String,Synonym>synonymMap){super(entry.realWord,entry.id,entry.type);this.synonymMap=synonymMap;}@OverridepublicStringtoString(){finalStringBuildersb=newStringBuilder();sb.append(super.toString());sb.append(' ');sb.append(synonymMap);returnsb.toString();}}}<EOF> "]
131981[label="packageDeclaration\n packagecom.hankcs.hanlp.dictionary.common; "]
231982[label="packageName\n com.hankcs.hanlp.dictionary.common "]
331983[label="packageName\n com.hankcs.hanlp.dictionary "]
431984[label="packageName\n com.hankcs.hanlp "]
531985[label="packageName\n com.hankcs "]
631986[label="packageName\n com "]
131987[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.algorithm.ArrayDistance; "]
231988[label="typeName\n com.hankcs.hanlp.algorithm.ArrayDistance "]
331989[label="packageOrTypeName\n com.hankcs.hanlp.algorithm "]
431990[label="packageOrTypeName\n com.hankcs.hanlp "]
531991[label="packageOrTypeName\n com.hankcs "]
631992[label="packageOrTypeName\n com "]
131993[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.DoubleArrayTrie; "]
231994[label="typeName\n com.hankcs.hanlp.collection.trie.DoubleArrayTrie "]
331995[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
431996[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
531997[label="packageOrTypeName\n com.hankcs.hanlp "]
631998[label="packageOrTypeName\n com.hankcs "]
731999[label="packageOrTypeName\n com "]
132000[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.synonym.Synonym; "]
232001[label="typeName\n com.hankcs.hanlp.corpus.synonym.Synonym "]
332002[label="packageOrTypeName\n com.hankcs.hanlp.corpus.synonym "]
432003[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
532004[label="packageOrTypeName\n com.hankcs.hanlp "]
632005[label="packageOrTypeName\n com.hankcs "]
732006[label="packageOrTypeName\n com "]
132007[label="singleTypeImportDeclaration\n importjava.io.BufferedReader; "]
232008[label="typeName\n java.io.BufferedReader "]
332009[label="packageOrTypeName\n java.io "]
432010[label="packageOrTypeName\n java "]
132011[label="singleTypeImportDeclaration\n importjava.io.InputStream; "]
232012[label="typeName\n java.io.InputStream "]
332013[label="packageOrTypeName\n java.io "]
432014[label="packageOrTypeName\n java "]
132015[label="singleTypeImportDeclaration\n importjava.io.InputStreamReader; "]
232016[label="typeName\n java.io.InputStreamReader "]
332017[label="packageOrTypeName\n java.io "]
432018[label="packageOrTypeName\n java "]
132019[label="typeImportOnDemandDeclaration\n importjava.util.*; "]
232020[label="packageOrTypeName\n java.util "]
332021[label="packageOrTypeName\n java "]
132022[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.utility.Predefine.logger; "]
232023[label="typeName\n com.hankcs.hanlp.utility.Predefine "]
332024[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
432025[label="packageOrTypeName\n com.hankcs.hanlp "]
532026[label="packageOrTypeName\n com.hankcs "]
632027[label="packageOrTypeName\n com "]
132028[label="normalClassDeclaration\n publicclassCommonSynonymDictionaryEx{DoubleArrayTrie<Long[]>trie;privateCommonSynonymDictionaryEx(){}publicstaticCommonSynonymDictionaryExcreate(InputStreaminputStream){CommonSynonymDictionaryExdictionary=newCommonSynonymDictionaryEx();if(dictionary.load(inputStream)){returndictionary;}returnnull;}publicbooleanload(InputStreaminputStream){trie=newDoubleArrayTrie<Long[]>();TreeMap<String,Set<Long>>treeMap=newTreeMap<String,Set<Long>>();Stringline=null;try{BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\"));while((line=bw.readLine())!=null){String[]args=line.split(\" \");List<Synonym>synonymList=Synonym.create(args);for(Synonymsynonym:synonymList){Set<Long>idSet=treeMap.get(synonym.realWord);if(idSet==null){idSet=newTreeSet<Long>();treeMap.put(synonym.realWord,idSet);}idSet.add(synonym.id);}}bw.close();List<String>keyList=newArrayList<String>(treeMap.size());for(Stringkey:treeMap.keySet()){keyList.add(key);}List<Long[]>valueList=newArrayList<Long[]>(treeMap.size());for(Set<Long>idSet:treeMap.values()){valueList.add(idSet.toArray(newLong[0]));}intresultCode=trie.build(keyList,valueList);if(resultCode!=0){logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;}}catch(Exceptione){logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\"+e);returnfalse;}returntrue;}publicLong[]get(Stringkey){returntrie.get(key);}publiclongdistance(Stringa,Stringb){Long[]itemA=get(a);if(itemA==null)returnLong.MAX_VALUE/3;Long[]itemB=get(b);if(itemB==null)returnLong.MAX_VALUE/3;returnArrayDistance.computeAverageDistance(itemA,itemB);}publicstaticclassSynonymItemextendsSynonym{publicMap<String,Synonym>synonymMap;publicSynonymItem(Synonymentry,Map<String,Synonym>synonymMap){super(entry.realWord,entry.id,entry.type);this.synonymMap=synonymMap;}@OverridepublicStringtoString(){finalStringBuildersb=newStringBuilder();sb.append(super.toString());sb.append(' ');sb.append(synonymMap);returnsb.toString();}}} "]
232029[label="classModifier\n public "]
232030[label="classBody\n {DoubleArrayTrie<Long[]>trie;privateCommonSynonymDictionaryEx(){}publicstaticCommonSynonymDictionaryExcreate(InputStreaminputStream){CommonSynonymDictionaryExdictionary=newCommonSynonymDictionaryEx();if(dictionary.load(inputStream)){returndictionary;}returnnull;}publicbooleanload(InputStreaminputStream){trie=newDoubleArrayTrie<Long[]>();TreeMap<String,Set<Long>>treeMap=newTreeMap<String,Set<Long>>();Stringline=null;try{BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\"));while((line=bw.readLine())!=null){String[]args=line.split(\" \");List<Synonym>synonymList=Synonym.create(args);for(Synonymsynonym:synonymList){Set<Long>idSet=treeMap.get(synonym.realWord);if(idSet==null){idSet=newTreeSet<Long>();treeMap.put(synonym.realWord,idSet);}idSet.add(synonym.id);}}bw.close();List<String>keyList=newArrayList<String>(treeMap.size());for(Stringkey:treeMap.keySet()){keyList.add(key);}List<Long[]>valueList=newArrayList<Long[]>(treeMap.size());for(Set<Long>idSet:treeMap.values()){valueList.add(idSet.toArray(newLong[0]));}intresultCode=trie.build(keyList,valueList);if(resultCode!=0){logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;}}catch(Exceptione){logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\"+e);returnfalse;}returntrue;}publicLong[]get(Stringkey){returntrie.get(key);}publiclongdistance(Stringa,Stringb){Long[]itemA=get(a);if(itemA==null)returnLong.MAX_VALUE/3;Long[]itemB=get(b);if(itemB==null)returnLong.MAX_VALUE/3;returnArrayDistance.computeAverageDistance(itemA,itemB);}publicstaticclassSynonymItemextendsSynonym{publicMap<String,Synonym>synonymMap;publicSynonymItem(Synonymentry,Map<String,Synonym>synonymMap){super(entry.realWord,entry.id,entry.type);this.synonymMap=synonymMap;}@OverridepublicStringtoString(){finalStringBuildersb=newStringBuilder();sb.append(super.toString());sb.append(' ');sb.append(synonymMap);returnsb.toString();}}} "]
332031[label="fieldDeclaration\n DoubleArrayTrie<Long[]>trie; "]
432032[label="unannClassType_lfno_unannClassOrInterfaceType\n DoubleArrayTrie<Long[]> "]
532033[label="typeArguments\n <Long[]> "]
632034[label="arrayType\n Long[] "]
732035[label="classType_lfno_classOrInterfaceType\n Long "]
732036[label="dims\n [] "]
432037[label="variableDeclaratorId\n trie "]
332038[label="constructorDeclaration\n privateCommonSynonymDictionaryEx(){} "]
432039[label="constructorModifier\n private "]
432040[label="constructorDeclarator\n CommonSynonymDictionaryEx() "]
532041[label="simpleTypeName\n CommonSynonymDictionaryEx "]
432042[label="constructorBody\n {} "]
332043[label="methodDeclaration\n publicstaticCommonSynonymDictionaryExcreate(InputStreaminputStream){CommonSynonymDictionaryExdictionary=newCommonSynonymDictionaryEx();if(dictionary.load(inputStream)){returndictionary;}returnnull;} "]
432044[label="methodModifier\n public "]
432045[label="methodModifier\n static "]
432046[label="methodHeader\n CommonSynonymDictionaryExcreate(InputStreaminputStream) "]
532047[label="unannClassType_lfno_unannClassOrInterfaceType\n CommonSynonymDictionaryEx "]
532048[label="methodDeclarator\n create(InputStreaminputStream) "]
632049[label="formalParameter\n InputStreaminputStream "]
732050[label="unannClassType_lfno_unannClassOrInterfaceType\n InputStream "]
732051[label="variableDeclaratorId\n inputStream "]
432052[label="block\n {CommonSynonymDictionaryExdictionary=newCommonSynonymDictionaryEx();if(dictionary.load(inputStream)){returndictionary;}returnnull;} "]
532053[label="blockStatements\n CommonSynonymDictionaryExdictionary=newCommonSynonymDictionaryEx();if(dictionary.load(inputStream)){returndictionary;}returnnull; "]
632054[label="localVariableDeclarationStatement\n CommonSynonymDictionaryExdictionary=newCommonSynonymDictionaryEx(); "]
732055[label="localVariableDeclaration\n CommonSynonymDictionaryExdictionary=newCommonSynonymDictionaryEx() "]
832056[label="unannClassType_lfno_unannClassOrInterfaceType\n CommonSynonymDictionaryEx "]
832057[label="variableDeclarator\n dictionary=newCommonSynonymDictionaryEx() "]
932058[label="variableDeclaratorId\n dictionary "]
932059[label="classInstanceCreationExpression_lfno_primary\n newCommonSynonymDictionaryEx() "]
632060[label="ifThenStatement\n if(dictionary.load(inputStream)){returndictionary;} "]
732061[label="methodInvocation_lfno_primary\n dictionary.load(inputStream) "]
832062[label="typeName\n dictionary "]
832063[label="expressionName\n inputStream "]
732064[label="block\n {returndictionary;} "]
832065[label="returnStatement\n returndictionary; "]
932066[label="expressionName\n dictionary "]
632067[label="returnStatement\n returnnull; "]
732068[label="literal\n null "]
332069[label="methodDeclaration\n publicbooleanload(InputStreaminputStream){trie=newDoubleArrayTrie<Long[]>();TreeMap<String,Set<Long>>treeMap=newTreeMap<String,Set<Long>>();Stringline=null;try{BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\"));while((line=bw.readLine())!=null){String[]args=line.split(\" \");List<Synonym>synonymList=Synonym.create(args);for(Synonymsynonym:synonymList){Set<Long>idSet=treeMap.get(synonym.realWord);if(idSet==null){idSet=newTreeSet<Long>();treeMap.put(synonym.realWord,idSet);}idSet.add(synonym.id);}}bw.close();List<String>keyList=newArrayList<String>(treeMap.size());for(Stringkey:treeMap.keySet()){keyList.add(key);}List<Long[]>valueList=newArrayList<Long[]>(treeMap.size());for(Set<Long>idSet:treeMap.values()){valueList.add(idSet.toArray(newLong[0]));}intresultCode=trie.build(keyList,valueList);if(resultCode!=0){logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;}}catch(Exceptione){logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\"+e);returnfalse;}returntrue;} "]
432070[label="methodModifier\n public "]
432071[label="methodHeader\n booleanload(InputStreaminputStream) "]
532072[label="unannPrimitiveType\n boolean "]
532073[label="methodDeclarator\n load(InputStreaminputStream) "]
632074[label="formalParameter\n InputStreaminputStream "]
732075[label="unannClassType_lfno_unannClassOrInterfaceType\n InputStream "]
732076[label="variableDeclaratorId\n inputStream "]
432077[label="block\n {trie=newDoubleArrayTrie<Long[]>();TreeMap<String,Set<Long>>treeMap=newTreeMap<String,Set<Long>>();Stringline=null;try{BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\"));while((line=bw.readLine())!=null){String[]args=line.split(\" \");List<Synonym>synonymList=Synonym.create(args);for(Synonymsynonym:synonymList){Set<Long>idSet=treeMap.get(synonym.realWord);if(idSet==null){idSet=newTreeSet<Long>();treeMap.put(synonym.realWord,idSet);}idSet.add(synonym.id);}}bw.close();List<String>keyList=newArrayList<String>(treeMap.size());for(Stringkey:treeMap.keySet()){keyList.add(key);}List<Long[]>valueList=newArrayList<Long[]>(treeMap.size());for(Set<Long>idSet:treeMap.values()){valueList.add(idSet.toArray(newLong[0]));}intresultCode=trie.build(keyList,valueList);if(resultCode!=0){logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;}}catch(Exceptione){logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\"+e);returnfalse;}returntrue;} "]
532078[label="blockStatements\n trie=newDoubleArrayTrie<Long[]>();TreeMap<String,Set<Long>>treeMap=newTreeMap<String,Set<Long>>();Stringline=null;try{BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\"));while((line=bw.readLine())!=null){String[]args=line.split(\" \");List<Synonym>synonymList=Synonym.create(args);for(Synonymsynonym:synonymList){Set<Long>idSet=treeMap.get(synonym.realWord);if(idSet==null){idSet=newTreeSet<Long>();treeMap.put(synonym.realWord,idSet);}idSet.add(synonym.id);}}bw.close();List<String>keyList=newArrayList<String>(treeMap.size());for(Stringkey:treeMap.keySet()){keyList.add(key);}List<Long[]>valueList=newArrayList<Long[]>(treeMap.size());for(Set<Long>idSet:treeMap.values()){valueList.add(idSet.toArray(newLong[0]));}intresultCode=trie.build(keyList,valueList);if(resultCode!=0){logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;}}catch(Exceptione){logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\"+e);returnfalse;}returntrue; "]
632079[label="expressionStatement\n trie=newDoubleArrayTrie<Long[]>(); "]
732080[label="assignment\n trie=newDoubleArrayTrie<Long[]>() "]
832081[label="expressionName\n trie "]
832082[label="assignmentOperator\n = "]
832083[label="classInstanceCreationExpression_lfno_primary\n newDoubleArrayTrie<Long[]>() "]
932084[label="typeArguments\n <Long[]> "]
1032085[label="arrayType\n Long[] "]
1132086[label="classType_lfno_classOrInterfaceType\n Long "]
1132087[label="dims\n [] "]
632088[label="localVariableDeclarationStatement\n TreeMap<String,Set<Long>>treeMap=newTreeMap<String,Set<Long>>(); "]
732089[label="localVariableDeclaration\n TreeMap<String,Set<Long>>treeMap=newTreeMap<String,Set<Long>>() "]
832090[label="unannClassType_lfno_unannClassOrInterfaceType\n TreeMap<String,Set<Long>> "]
932091[label="typeArguments\n <String,Set<Long>> "]
1032092[label="typeArgumentList\n String,Set<Long> "]
1132093[label="classType_lfno_classOrInterfaceType\n String "]
1132094[label="classType_lfno_classOrInterfaceType\n Set<Long> "]
1232095[label="typeArguments\n <Long> "]
1332096[label="classType_lfno_classOrInterfaceType\n Long "]
832097[label="variableDeclarator\n treeMap=newTreeMap<String,Set<Long>>() "]
932098[label="variableDeclaratorId\n treeMap "]
932099[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,Set<Long>>() "]
1032100[label="typeArguments\n <String,Set<Long>> "]
1132101[label="typeArgumentList\n String,Set<Long> "]
1232102[label="classType_lfno_classOrInterfaceType\n String "]
1232103[label="classType_lfno_classOrInterfaceType\n Set<Long> "]
1332104[label="typeArguments\n <Long> "]
1432105[label="classType_lfno_classOrInterfaceType\n Long "]
632106[label="localVariableDeclarationStatement\n Stringline=null; "]
732107[label="localVariableDeclaration\n Stringline=null "]
832108[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
832109[label="variableDeclarator\n line=null "]
932110[label="variableDeclaratorId\n line "]
932111[label="literal\n null "]
632112[label="tryStatement\n try{BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\"));while((line=bw.readLine())!=null){String[]args=line.split(\" \");List<Synonym>synonymList=Synonym.create(args);for(Synonymsynonym:synonymList){Set<Long>idSet=treeMap.get(synonym.realWord);if(idSet==null){idSet=newTreeSet<Long>();treeMap.put(synonym.realWord,idSet);}idSet.add(synonym.id);}}bw.close();List<String>keyList=newArrayList<String>(treeMap.size());for(Stringkey:treeMap.keySet()){keyList.add(key);}List<Long[]>valueList=newArrayList<Long[]>(treeMap.size());for(Set<Long>idSet:treeMap.values()){valueList.add(idSet.toArray(newLong[0]));}intresultCode=trie.build(keyList,valueList);if(resultCode!=0){logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;}}catch(Exceptione){logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\"+e);returnfalse;} "]
732113[label="block\n {BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\"));while((line=bw.readLine())!=null){String[]args=line.split(\" \");List<Synonym>synonymList=Synonym.create(args);for(Synonymsynonym:synonymList){Set<Long>idSet=treeMap.get(synonym.realWord);if(idSet==null){idSet=newTreeSet<Long>();treeMap.put(synonym.realWord,idSet);}idSet.add(synonym.id);}}bw.close();List<String>keyList=newArrayList<String>(treeMap.size());for(Stringkey:treeMap.keySet()){keyList.add(key);}List<Long[]>valueList=newArrayList<Long[]>(treeMap.size());for(Set<Long>idSet:treeMap.values()){valueList.add(idSet.toArray(newLong[0]));}intresultCode=trie.build(keyList,valueList);if(resultCode!=0){logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;}} "]
832114[label="blockStatements\n BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\"));while((line=bw.readLine())!=null){String[]args=line.split(\" \");List<Synonym>synonymList=Synonym.create(args);for(Synonymsynonym:synonymList){Set<Long>idSet=treeMap.get(synonym.realWord);if(idSet==null){idSet=newTreeSet<Long>();treeMap.put(synonym.realWord,idSet);}idSet.add(synonym.id);}}bw.close();List<String>keyList=newArrayList<String>(treeMap.size());for(Stringkey:treeMap.keySet()){keyList.add(key);}List<Long[]>valueList=newArrayList<Long[]>(treeMap.size());for(Set<Long>idSet:treeMap.values()){valueList.add(idSet.toArray(newLong[0]));}intresultCode=trie.build(keyList,valueList);if(resultCode!=0){logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;} "]
932115[label="localVariableDeclarationStatement\n BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\")); "]
1032116[label="localVariableDeclaration\n BufferedReaderbw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\")) "]
1132117[label="unannClassType_lfno_unannClassOrInterfaceType\n BufferedReader "]
1132118[label="variableDeclarator\n bw=newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\")) "]
1232119[label="variableDeclaratorId\n bw "]
1232120[label="classInstanceCreationExpression_lfno_primary\n newBufferedReader(newInputStreamReader(inputStream,\"UTF-8\")) "]
1332121[label="classInstanceCreationExpression_lfno_primary\n newInputStreamReader(inputStream,\"UTF-8\") "]
1432122[label="argumentList\n inputStream,\"UTF-8\" "]
1532123[label="expressionName\n inputStream "]
1532124[label="literal\n \"UTF-8\" "]
932125[label="whileStatement\n while((line=bw.readLine())!=null){String[]args=line.split(\" \");List<Synonym>synonymList=Synonym.create(args);for(Synonymsynonym:synonymList){Set<Long>idSet=treeMap.get(synonym.realWord);if(idSet==null){idSet=newTreeSet<Long>();treeMap.put(synonym.realWord,idSet);}idSet.add(synonym.id);}} "]
1032126[label="equalityExpression\n (line=bw.readLine())!=null "]
1132127[label="primaryNoNewArray_lfno_primary\n (line=bw.readLine()) "]
1232128[label="assignment\n line=bw.readLine() "]
1332129[label="expressionName\n line "]
1332130[label="assignmentOperator\n = "]
1332131[label="methodInvocation_lfno_primary\n bw.readLine() "]
1432132[label="typeName\n bw "]
1132133[label="literal\n null "]
1032134[label="block\n {String[]args=line.split(\" \");List<Synonym>synonymList=Synonym.create(args);for(Synonymsynonym:synonymList){Set<Long>idSet=treeMap.get(synonym.realWord);if(idSet==null){idSet=newTreeSet<Long>();treeMap.put(synonym.realWord,idSet);}idSet.add(synonym.id);}} "]
1132135[label="blockStatements\n String[]args=line.split(\" \");List<Synonym>synonymList=Synonym.create(args);for(Synonymsynonym:synonymList){Set<Long>idSet=treeMap.get(synonym.realWord);if(idSet==null){idSet=newTreeSet<Long>();treeMap.put(synonym.realWord,idSet);}idSet.add(synonym.id);} "]
1232136[label="localVariableDeclarationStatement\n String[]args=line.split(\" \"); "]
1332137[label="localVariableDeclaration\n String[]args=line.split(\" \") "]
1432138[label="unannArrayType\n String[] "]
1532139[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1532140[label="dims\n [] "]
1432141[label="variableDeclarator\n args=line.split(\" \") "]
1532142[label="variableDeclaratorId\n args "]
1532143[label="methodInvocation_lfno_primary\n line.split(\" \") "]
1632144[label="typeName\n line "]
1632145[label="literal\n \" \" "]
1232146[label="localVariableDeclarationStatement\n List<Synonym>synonymList=Synonym.create(args); "]
1332147[label="localVariableDeclaration\n List<Synonym>synonymList=Synonym.create(args) "]
1432148[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Synonym> "]
1532149[label="typeArguments\n <Synonym> "]
1632150[label="classType_lfno_classOrInterfaceType\n Synonym "]
1432151[label="variableDeclarator\n synonymList=Synonym.create(args) "]
1532152[label="variableDeclaratorId\n synonymList "]
1532153[label="methodInvocation_lfno_primary\n Synonym.create(args) "]
1632154[label="typeName\n Synonym "]
1632155[label="expressionName\n args "]
1232156[label="enhancedForStatement\n for(Synonymsynonym:synonymList){Set<Long>idSet=treeMap.get(synonym.realWord);if(idSet==null){idSet=newTreeSet<Long>();treeMap.put(synonym.realWord,idSet);}idSet.add(synonym.id);} "]
1332157[label="unannClassType_lfno_unannClassOrInterfaceType\n Synonym "]
1332158[label="variableDeclaratorId\n synonym "]
1332159[label="expressionName\n synonymList "]
1332160[label="block\n {Set<Long>idSet=treeMap.get(synonym.realWord);if(idSet==null){idSet=newTreeSet<Long>();treeMap.put(synonym.realWord,idSet);}idSet.add(synonym.id);} "]
1432161[label="blockStatements\n Set<Long>idSet=treeMap.get(synonym.realWord);if(idSet==null){idSet=newTreeSet<Long>();treeMap.put(synonym.realWord,idSet);}idSet.add(synonym.id); "]
1532162[label="localVariableDeclarationStatement\n Set<Long>idSet=treeMap.get(synonym.realWord); "]
1632163[label="localVariableDeclaration\n Set<Long>idSet=treeMap.get(synonym.realWord) "]
1732164[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<Long> "]
1832165[label="typeArguments\n <Long> "]
1932166[label="classType_lfno_classOrInterfaceType\n Long "]
1732167[label="variableDeclarator\n idSet=treeMap.get(synonym.realWord) "]
1832168[label="variableDeclaratorId\n idSet "]
1832169[label="methodInvocation_lfno_primary\n treeMap.get(synonym.realWord) "]
1932170[label="typeName\n treeMap "]
1932171[label="expressionName\n synonym.realWord "]
2032172[label="ambiguousName\n synonym "]
1532173[label="ifThenStatement\n if(idSet==null){idSet=newTreeSet<Long>();treeMap.put(synonym.realWord,idSet);} "]
1632174[label="equalityExpression\n idSet==null "]
1732175[label="expressionName\n idSet "]
1732176[label="literal\n null "]
1632177[label="block\n {idSet=newTreeSet<Long>();treeMap.put(synonym.realWord,idSet);} "]
1732178[label="blockStatements\n idSet=newTreeSet<Long>();treeMap.put(synonym.realWord,idSet); "]
1832179[label="expressionStatement\n idSet=newTreeSet<Long>(); "]
1932180[label="assignment\n idSet=newTreeSet<Long>() "]
2032181[label="expressionName\n idSet "]
2032182[label="assignmentOperator\n = "]
2032183[label="classInstanceCreationExpression_lfno_primary\n newTreeSet<Long>() "]
2132184[label="typeArguments\n <Long> "]
2232185[label="classType_lfno_classOrInterfaceType\n Long "]
1832186[label="expressionStatement\n treeMap.put(synonym.realWord,idSet); "]
1932187[label="methodInvocation\n treeMap.put(synonym.realWord,idSet) "]
2032188[label="typeName\n treeMap "]
2032189[label="argumentList\n synonym.realWord,idSet "]
2132190[label="expressionName\n synonym.realWord "]
2232191[label="ambiguousName\n synonym "]
2132192[label="expressionName\n idSet "]
1532193[label="expressionStatement\n idSet.add(synonym.id); "]
1632194[label="methodInvocation\n idSet.add(synonym.id) "]
1732195[label="typeName\n idSet "]
1732196[label="expressionName\n synonym.id "]
1832197[label="ambiguousName\n synonym "]
932198[label="expressionStatement\n bw.close(); "]
1032199[label="methodInvocation\n bw.close() "]
1132200[label="typeName\n bw "]
932201[label="localVariableDeclarationStatement\n List<String>keyList=newArrayList<String>(treeMap.size()); "]
1032202[label="localVariableDeclaration\n List<String>keyList=newArrayList<String>(treeMap.size()) "]
1132203[label="unannClassType_lfno_unannClassOrInterfaceType\n List<String> "]
1232204[label="typeArguments\n <String> "]
1332205[label="classType_lfno_classOrInterfaceType\n String "]
1132206[label="variableDeclarator\n keyList=newArrayList<String>(treeMap.size()) "]
1232207[label="variableDeclaratorId\n keyList "]
1232208[label="classInstanceCreationExpression_lfno_primary\n newArrayList<String>(treeMap.size()) "]
1332209[label="typeArguments\n <String> "]
1432210[label="classType_lfno_classOrInterfaceType\n String "]
1332211[label="methodInvocation_lfno_primary\n treeMap.size() "]
1432212[label="typeName\n treeMap "]
932213[label="enhancedForStatement\n for(Stringkey:treeMap.keySet()){keyList.add(key);} "]
1032214[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
1032215[label="variableDeclaratorId\n key "]
1032216[label="methodInvocation_lfno_primary\n treeMap.keySet() "]
1132217[label="typeName\n treeMap "]
1032218[label="block\n {keyList.add(key);} "]
1132219[label="expressionStatement\n keyList.add(key); "]
1232220[label="methodInvocation\n keyList.add(key) "]
1332221[label="typeName\n keyList "]
1332222[label="expressionName\n key "]
932223[label="localVariableDeclarationStatement\n List<Long[]>valueList=newArrayList<Long[]>(treeMap.size()); "]
1032224[label="localVariableDeclaration\n List<Long[]>valueList=newArrayList<Long[]>(treeMap.size()) "]
1132225[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Long[]> "]
1232226[label="typeArguments\n <Long[]> "]
1332227[label="arrayType\n Long[] "]
1432228[label="classType_lfno_classOrInterfaceType\n Long "]
1432229[label="dims\n [] "]
1132230[label="variableDeclarator\n valueList=newArrayList<Long[]>(treeMap.size()) "]
1232231[label="variableDeclaratorId\n valueList "]
1232232[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Long[]>(treeMap.size()) "]
1332233[label="typeArguments\n <Long[]> "]
1432234[label="arrayType\n Long[] "]
1532235[label="classType_lfno_classOrInterfaceType\n Long "]
1532236[label="dims\n [] "]
1332237[label="methodInvocation_lfno_primary\n treeMap.size() "]
1432238[label="typeName\n treeMap "]
932239[label="enhancedForStatement\n for(Set<Long>idSet:treeMap.values()){valueList.add(idSet.toArray(newLong[0]));} "]
1032240[label="unannClassType_lfno_unannClassOrInterfaceType\n Set<Long> "]
1132241[label="typeArguments\n <Long> "]
1232242[label="classType_lfno_classOrInterfaceType\n Long "]
1032243[label="variableDeclaratorId\n idSet "]
1032244[label="methodInvocation_lfno_primary\n treeMap.values() "]
1132245[label="typeName\n treeMap "]
1032246[label="block\n {valueList.add(idSet.toArray(newLong[0]));} "]
1132247[label="expressionStatement\n valueList.add(idSet.toArray(newLong[0])); "]
1232248[label="methodInvocation\n valueList.add(idSet.toArray(newLong[0])) "]
1332249[label="typeName\n valueList "]
1332250[label="methodInvocation_lfno_primary\n idSet.toArray(newLong[0]) "]
1432251[label="typeName\n idSet "]
1432252[label="arrayCreationExpression\n newLong[0] "]
1532253[label="classType_lfno_classOrInterfaceType\n Long "]
1532254[label="dimExpr\n [0] "]
1632255[label="literal\n 0 "]
932256[label="localVariableDeclarationStatement\n intresultCode=trie.build(keyList,valueList); "]
1032257[label="localVariableDeclaration\n intresultCode=trie.build(keyList,valueList) "]
1132258[label="integralType\n int "]
1132259[label="variableDeclarator\n resultCode=trie.build(keyList,valueList) "]
1232260[label="variableDeclaratorId\n resultCode "]
1232261[label="methodInvocation_lfno_primary\n trie.build(keyList,valueList) "]
1332262[label="typeName\n trie "]
1332263[label="argumentList\n keyList,valueList "]
1432264[label="expressionName\n keyList "]
1432265[label="expressionName\n valueList "]
932266[label="ifThenStatement\n if(resultCode!=0){logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;} "]
1032267[label="equalityExpression\n resultCode!=0 "]
1132268[label="expressionName\n resultCode "]
1132269[label="literal\n 0 "]
1032270[label="block\n {logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse;} "]
1132271[label="blockStatements\n logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode);returnfalse; "]
1232272[label="expressionStatement\n logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode); "]
1332273[label="methodInvocation\n logger.warning(\"构建\"+inputStream+\"失败，错误码\"+resultCode) "]
1432274[label="typeName\n logger "]
1432275[label="additiveExpression\n \"构建\"+inputStream+\"失败，错误码\"+resultCode "]
1532276[label="additiveExpression\n \"构建\"+inputStream+\"失败，错误码\" "]
1632277[label="additiveExpression\n \"构建\"+inputStream "]
1732278[label="literal\n \"构建\" "]
1732279[label="expressionName\n inputStream "]
1632280[label="literal\n \"失败，错误码\" "]
1532281[label="expressionName\n resultCode "]
1232282[label="returnStatement\n returnfalse; "]
1332283[label="literal\n false "]
732284[label="catchClause\n catch(Exceptione){logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\"+e);returnfalse;} "]
832285[label="catchFormalParameter\n Exceptione "]
932286[label="unannClassType\n Exception "]
932287[label="variableDeclaratorId\n e "]
832288[label="block\n {logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\"+e);returnfalse;} "]
932289[label="blockStatements\n logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\"+e);returnfalse; "]
1032290[label="expressionStatement\n logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\"+e); "]
1132291[label="methodInvocation\n logger.warning(\"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\"+e) "]
1232292[label="typeName\n logger "]
1232293[label="additiveExpression\n \"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\"+e "]
1332294[label="additiveExpression\n \"读取\"+inputStream+\"失败，可能由行\"+line+\"造成\" "]
1432295[label="additiveExpression\n \"读取\"+inputStream+\"失败，可能由行\"+line "]
1532296[label="additiveExpression\n \"读取\"+inputStream+\"失败，可能由行\" "]
1632297[label="additiveExpression\n \"读取\"+inputStream "]
1732298[label="literal\n \"读取\" "]
1732299[label="expressionName\n inputStream "]
1632300[label="literal\n \"失败，可能由行\" "]
1532301[label="expressionName\n line "]
1432302[label="literal\n \"造成\" "]
1332303[label="expressionName\n e "]
1032304[label="returnStatement\n returnfalse; "]
1132305[label="literal\n false "]
632306[label="returnStatement\n returntrue; "]
732307[label="literal\n true "]
332308[label="methodDeclaration\n publicLong[]get(Stringkey){returntrie.get(key);} "]
432309[label="methodModifier\n public "]
432310[label="methodHeader\n Long[]get(Stringkey) "]
532311[label="unannArrayType\n Long[] "]
632312[label="unannClassType_lfno_unannClassOrInterfaceType\n Long "]
632313[label="dims\n [] "]
532314[label="methodDeclarator\n get(Stringkey) "]
632315[label="formalParameter\n Stringkey "]
732316[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
732317[label="variableDeclaratorId\n key "]
432318[label="block\n {returntrie.get(key);} "]
532319[label="returnStatement\n returntrie.get(key); "]
632320[label="methodInvocation_lfno_primary\n trie.get(key) "]
732321[label="typeName\n trie "]
732322[label="expressionName\n key "]
332323[label="methodDeclaration\n publiclongdistance(Stringa,Stringb){Long[]itemA=get(a);if(itemA==null)returnLong.MAX_VALUE/3;Long[]itemB=get(b);if(itemB==null)returnLong.MAX_VALUE/3;returnArrayDistance.computeAverageDistance(itemA,itemB);} "]
432324[label="methodModifier\n public "]
432325[label="methodHeader\n longdistance(Stringa,Stringb) "]
532326[label="integralType\n long "]
532327[label="methodDeclarator\n distance(Stringa,Stringb) "]
632328[label="formalParameterList\n Stringa,Stringb "]
732329[label="formalParameter\n Stringa "]
832330[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
832331[label="variableDeclaratorId\n a "]
732332[label="formalParameter\n Stringb "]
832333[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
832334[label="variableDeclaratorId\n b "]
432335[label="block\n {Long[]itemA=get(a);if(itemA==null)returnLong.MAX_VALUE/3;Long[]itemB=get(b);if(itemB==null)returnLong.MAX_VALUE/3;returnArrayDistance.computeAverageDistance(itemA,itemB);} "]
532336[label="blockStatements\n Long[]itemA=get(a);if(itemA==null)returnLong.MAX_VALUE/3;Long[]itemB=get(b);if(itemB==null)returnLong.MAX_VALUE/3;returnArrayDistance.computeAverageDistance(itemA,itemB); "]
632337[label="localVariableDeclarationStatement\n Long[]itemA=get(a); "]
732338[label="localVariableDeclaration\n Long[]itemA=get(a) "]
832339[label="unannArrayType\n Long[] "]
932340[label="unannClassType_lfno_unannClassOrInterfaceType\n Long "]
932341[label="dims\n [] "]
832342[label="variableDeclarator\n itemA=get(a) "]
932343[label="variableDeclaratorId\n itemA "]
932344[label="methodInvocation_lfno_primary\n get(a) "]
1032345[label="methodName\n get "]
1032346[label="expressionName\n a "]
632347[label="ifThenStatement\n if(itemA==null)returnLong.MAX_VALUE/3; "]
732348[label="equalityExpression\n itemA==null "]
832349[label="expressionName\n itemA "]
832350[label="literal\n null "]
732351[label="returnStatement\n returnLong.MAX_VALUE/3; "]
832352[label="multiplicativeExpression\n Long.MAX_VALUE/3 "]
932353[label="expressionName\n Long.MAX_VALUE "]
1032354[label="ambiguousName\n Long "]
932355[label="literal\n 3 "]
632356[label="localVariableDeclarationStatement\n Long[]itemB=get(b); "]
732357[label="localVariableDeclaration\n Long[]itemB=get(b) "]
832358[label="unannArrayType\n Long[] "]
932359[label="unannClassType_lfno_unannClassOrInterfaceType\n Long "]
932360[label="dims\n [] "]
832361[label="variableDeclarator\n itemB=get(b) "]
932362[label="variableDeclaratorId\n itemB "]
932363[label="methodInvocation_lfno_primary\n get(b) "]
1032364[label="methodName\n get "]
1032365[label="expressionName\n b "]
632366[label="ifThenStatement\n if(itemB==null)returnLong.MAX_VALUE/3; "]
732367[label="equalityExpression\n itemB==null "]
832368[label="expressionName\n itemB "]
832369[label="literal\n null "]
732370[label="returnStatement\n returnLong.MAX_VALUE/3; "]
832371[label="multiplicativeExpression\n Long.MAX_VALUE/3 "]
932372[label="expressionName\n Long.MAX_VALUE "]
1032373[label="ambiguousName\n Long "]
932374[label="literal\n 3 "]
632375[label="returnStatement\n returnArrayDistance.computeAverageDistance(itemA,itemB); "]
732376[label="methodInvocation_lfno_primary\n ArrayDistance.computeAverageDistance(itemA,itemB) "]
832377[label="typeName\n ArrayDistance "]
832378[label="argumentList\n itemA,itemB "]
932379[label="expressionName\n itemA "]
932380[label="expressionName\n itemB "]
332381[label="normalClassDeclaration\n publicstaticclassSynonymItemextendsSynonym{publicMap<String,Synonym>synonymMap;publicSynonymItem(Synonymentry,Map<String,Synonym>synonymMap){super(entry.realWord,entry.id,entry.type);this.synonymMap=synonymMap;}@OverridepublicStringtoString(){finalStringBuildersb=newStringBuilder();sb.append(super.toString());sb.append(' ');sb.append(synonymMap);returnsb.toString();}} "]
432382[label="classModifier\n public "]
432383[label="classModifier\n static "]
432384[label="superclass\n extendsSynonym "]
532385[label="classType\n Synonym "]
432386[label="classBody\n {publicMap<String,Synonym>synonymMap;publicSynonymItem(Synonymentry,Map<String,Synonym>synonymMap){super(entry.realWord,entry.id,entry.type);this.synonymMap=synonymMap;}@OverridepublicStringtoString(){finalStringBuildersb=newStringBuilder();sb.append(super.toString());sb.append(' ');sb.append(synonymMap);returnsb.toString();}} "]
532387[label="fieldDeclaration\n publicMap<String,Synonym>synonymMap; "]
632388[label="fieldModifier\n public "]
632389[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Synonym> "]
732390[label="typeArguments\n <String,Synonym> "]
832391[label="typeArgumentList\n String,Synonym "]
932392[label="classType_lfno_classOrInterfaceType\n String "]
932393[label="classType_lfno_classOrInterfaceType\n Synonym "]
632394[label="variableDeclaratorId\n synonymMap "]
532395[label="constructorDeclaration\n publicSynonymItem(Synonymentry,Map<String,Synonym>synonymMap){super(entry.realWord,entry.id,entry.type);this.synonymMap=synonymMap;} "]
632396[label="constructorModifier\n public "]
632397[label="constructorDeclarator\n SynonymItem(Synonymentry,Map<String,Synonym>synonymMap) "]
732398[label="simpleTypeName\n SynonymItem "]
732399[label="formalParameterList\n Synonymentry,Map<String,Synonym>synonymMap "]
832400[label="formalParameter\n Synonymentry "]
932401[label="unannClassType_lfno_unannClassOrInterfaceType\n Synonym "]
932402[label="variableDeclaratorId\n entry "]
832403[label="formalParameter\n Map<String,Synonym>synonymMap "]
932404[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Synonym> "]
1032405[label="typeArguments\n <String,Synonym> "]
1132406[label="typeArgumentList\n String,Synonym "]
1232407[label="classType_lfno_classOrInterfaceType\n String "]
1232408[label="classType_lfno_classOrInterfaceType\n Synonym "]
932409[label="variableDeclaratorId\n synonymMap "]
632410[label="constructorBody\n {super(entry.realWord,entry.id,entry.type);this.synonymMap=synonymMap;} "]
732411[label="explicitConstructorInvocation\n super(entry.realWord,entry.id,entry.type); "]
832412[label="argumentList\n entry.realWord,entry.id,entry.type "]
932413[label="expressionName\n entry.realWord "]
1032414[label="ambiguousName\n entry "]
932415[label="expressionName\n entry.id "]
1032416[label="ambiguousName\n entry "]
932417[label="expressionName\n entry.type "]
1032418[label="ambiguousName\n entry "]
732419[label="expressionStatement\n this.synonymMap=synonymMap; "]
832420[label="assignment\n this.synonymMap=synonymMap "]
932421[label="fieldAccess\n this.synonymMap "]
1032422[label="primaryNoNewArray_lfno_primary\n this "]
932423[label="assignmentOperator\n = "]
932424[label="expressionName\n synonymMap "]
532425[label="methodDeclaration\n @OverridepublicStringtoString(){finalStringBuildersb=newStringBuilder();sb.append(super.toString());sb.append(' ');sb.append(synonymMap);returnsb.toString();} "]
632426[label="markerAnnotation\n @Override "]
732427[label="typeName\n Override "]
632428[label="methodModifier\n public "]
632429[label="methodHeader\n StringtoString() "]
732430[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
732431[label="methodDeclarator\n toString() "]
632432[label="block\n {finalStringBuildersb=newStringBuilder();sb.append(super.toString());sb.append(' ');sb.append(synonymMap);returnsb.toString();} "]
732433[label="blockStatements\n finalStringBuildersb=newStringBuilder();sb.append(super.toString());sb.append(' ');sb.append(synonymMap);returnsb.toString(); "]
832434[label="localVariableDeclarationStatement\n finalStringBuildersb=newStringBuilder(); "]
932435[label="localVariableDeclaration\n finalStringBuildersb=newStringBuilder() "]
1032436[label="variableModifier\n final "]
1032437[label="unannClassType_lfno_unannClassOrInterfaceType\n StringBuilder "]
1032438[label="variableDeclarator\n sb=newStringBuilder() "]
1132439[label="variableDeclaratorId\n sb "]
1132440[label="classInstanceCreationExpression_lfno_primary\n newStringBuilder() "]
832441[label="expressionStatement\n sb.append(super.toString()); "]
932442[label="methodInvocation\n sb.append(super.toString()) "]
1032443[label="typeName\n sb "]
1032444[label="methodInvocation_lfno_primary\n super.toString() "]
832445[label="expressionStatement\n sb.append(' '); "]
932446[label="methodInvocation\n sb.append(' ') "]
1032447[label="typeName\n sb "]
1032448[label="literal\n ' ' "]
832449[label="expressionStatement\n sb.append(synonymMap); "]
932450[label="methodInvocation\n sb.append(synonymMap) "]
1032451[label="typeName\n sb "]
1032452[label="expressionName\n synonymMap "]
832453[label="returnStatement\n returnsb.toString(); "]
932454[label="methodInvocation_lfno_primary\n sb.toString() "]
1032455[label="typeName\n sb "]
-10->01
01->12
12->23
23->34
34->45
45->56
56->67
67->78
01->19
19->210
19->211
211->312
19->213
213->314
314->415
415->516
19->217
217->318
318->419
318->420
420->521
318->422
217->323
323->424
424->525
323->426
323->427
427->528
427->529
323->430
430->531
531->632
-10->033
033->134
134->235
235->336
336->437
437->538
538->639
639->740
033->141
141->242
141->243
243->344
141->245
245->346
346->447
447->548
447->549
346->450
245->351
351->452
351->453
245->354
354->455
354->456
456->557
456->558
558->659
659->760
659->761
558->662
354->463
463->564
564->665
665->766
766->867
665->768
665->769
245->370
370->471
370->472
472->573
472->574
370->475
475->576
576->677
677->778
677->779
779->880
779->881
245->382
382->483
382->484
484->585
382->486
245->387
387->488
387->489
489->590
489->591
591->692
692->793
793->894
793->895
692->796
387->497
497->598
598->699
699->7100
7100->8101
8101->9102
7100->8103
7100->8104
598->6105
6105->7106
-10->0107
0107->1108
1108->2109
2109->3110
3110->4111
4111->5112
5112->6113
0107->1114
1114->2115
2115->3116
3116->4117
4117->5118
5118->6119
6119->7120
0107->1121
1121->2122
2122->3123
3123->4124
4124->5125
5125->6126
6126->7127
0107->1128
1128->2129
2129->3130
3130->4131
4131->5132
5132->6133
6133->7134
0107->1135
1135->2136
2136->3137
3137->4138
4138->5139
5139->6140
6140->7141
0107->1142
1142->2143
2143->3144
3144->4145
4145->5146
5146->6147
6147->7148
0107->1149
1149->2150
2150->3151
3151->4152
4152->5153
5153->6154
6154->7155
0107->1156
1156->2157
2157->3158
3158->4159
0107->1160
1160->2161
2161->3162
3162->4163
0107->1164
1164->2165
2165->3166
3166->4167
0107->1168
1168->2169
2169->3170
3170->4171
4171->5172
5172->6173
6173->7174
0107->1175
1175->2176
1175->2177
1175->2178
2178->3179
1175->2180
2180->3181
3181->4182
4182->5183
3181->4184
3181->4185
4185->5186
4185->5187
5187->6188
6188->7189
6188->7190
3181->4191
4191->5192
5192->6193
2180->3194
3194->4195
3194->4196
4196->5197
4196->5198
2180->3199
3199->4200
4200->5201
3199->4202
3199->4203
4203->5204
4203->5205
5205->6206
6206->7207
6206->7208
4203->5209
5209->6210
6210->7211
6210->7212
3199->4213
4213->5214
5214->6215
6215->7216
7216->8217
8217->9218
9218->10219
10219->11220
10219->11221
7216->8222
8222->9223
8222->9224
9224->10225
9224->10226
5214->6227
6227->7228
7228->8229
7228->8230
2180->3231
3231->4232
4232->5233
3231->4234
3231->4235
4235->5236
4235->5237
5237->6238
6238->7239
6238->7240
4235->5241
5241->6242
6242->7243
6242->7244
3231->4245
4245->5246
5246->6247
6247->7248
7248->8249
8249->9250
9250->10251
10251->11252
10251->11253
7248->8254
8254->9255
8254->9256
9256->10257
9256->10258
5246->6259
6259->7260
7260->8261
7260->8262
2180->3263
3263->4264
4264->5265
3263->4266
3263->4267
4267->5268
4267->5269
5269->6270
6270->7271
7271->8272
7271->8273
6270->7274
7274->8275
7274->8276
4267->5277
5277->6278
3263->4279
4279->5280
5280->6281
6281->7282
7282->8283
7282->8284
8284->9285
8284->9286
5280->6287
6287->7288
7288->8289
7288->8290
8290->9291
8290->9292
5280->6293
6293->7294
7294->8295
7294->8296
2180->3297
3297->4298
4298->5299
3297->4300
3297->4301
4301->5302
4301->5303
5303->6304
6304->7305
7305->8306
8306->9307
9307->10308
9307->10309
10309->11310
10309->11311
6304->7312
4301->5313
5313->6314
3297->4315
4315->5316
5316->6317
6317->7318
7318->8319
7318->8320
8320->9321
8320->9322
5316->6323
6323->7324
7324->8325
7324->8326
5316->6327
6327->7328
7328->8329
7328->8330
8330->9331
8330->9332
9332->10333
5316->6334
6334->7335
7335->8336
7335->8337
8337->9338
8337->9339
5316->6340
6340->7341
7341->8342
7341->8343
8343->9344
9344->10345
10345->11346
10345->11347
11347->12348
11347->12349
6340->7350
6340->7351
7351->8352
6340->7353
7353->8354
8354->9355
9355->10356
10356->11357
10356->11358
11358->12359
11358->12360
12360->13361
8354->9362
9362->10363
10363->11364
10363->11365
11365->12366
11365->12367
8354->9368
9368->10369
9368->10370
9368->10371
10371->11372
9368->10373
10373->11374
11374->12375
12375->13376
12375->13377
13377->14378
13377->14379
8354->9380
9380->10381
10381->11382
8354->9383
9383->10384
10384->11385
10384->11386
11386->12387
11386->12388
12388->13389
12388->13390
13390->14391
13390->14392
5316->6393
6393->7394
7394->8395
7394->8396
5316->6397
6397->7398
7398->8399
7398->8400
2180->3401
3401->4402
4402->5403
3401->4404
3401->4405
4405->5406
4405->5407
5407->6408
6408->7409
6408->7410
4405->5411
5411->6412
3401->4413
4413->5414
5414->6415
6415->7416
6415->7417
7417->8418
7417->8419
2180->3420
3420->4421
4421->5422
3420->4423
3420->4424
4424->5425
5425->6426
6426->7427
7427->8428
7427->8429
4424->5430
5430->6431
6431->7432
6431->7433
3420->4434
4434->5435
5435->6436
6436->7437
7437->8438
7437->8439
8439->9440
8439->9441
9441->10442
5435->6443
6443->7444
7444->8445
7444->8446
6443->7447
7447->8448
8448->9449
9449->10450
5435->6451
6451->7452
7452->8453
7452->8454
6451->7455
7455->8456
8456->9457
9457->10458
5435->6459
6459->7460
7460->8461
8461->9462
8461->9463
7460->8464
8464->9465
8464->9466
9466->10467
9466->10468
5435->6469
6469->7470
7470->8471
8471->9472
9472->10473
10473->11474
10473->11475
7470->8476
8476->9477
8476->9478
9478->10479
10479->11480
11480->12481
11480->12482
5435->6483
6483->7484
7484->8485
7484->8486
8486->9487
8486->9488
6483->7489
7489->8490
7489->8491
8491->9492
6483->7493
7493->8494
6483->7495
7495->8496
8496->9497
9497->10498
9497->10499
10499->11500
11500->12501
12501->13502
11500->12503
10499->11504
11504->12505
11504->12506
5435->6507
6507->7508
2180->3509
3509->4510
4510->5511
3509->4512
3509->4513
4513->5514
4513->5515
5515->6516
6516->7517
6516->7518
4513->5519
5519->6520
6520->7521
6520->7522
3509->4523
4523->5524
5524->6525
6525->7526
7526->8527
7526->8528
8528->9529
8528->9530
9530->10531
5524->6532
6532->7533
7533->8534
7533->8535
6532->7536
7536->8537
8537->9538
9538->10539
5524->6540
6540->7541
7541->8542
7541->8543
6540->7544
7544->8545
8545->9546
9546->10547
5524->6548
6548->7549
7549->8550
8550->9551
8550->9552
7549->8553
8553->9554
8553->9555
9555->10556
9555->10557
5524->6558
6558->7559
7559->8560
7559->8561
8561->9562
8561->9563
9563->10564
5524->6565
6565->7566
7566->8567
7566->8568
8568->9569
8568->9570
9570->10571
5524->6572
6572->7573
7573->8574
7573->8575
8575->9576
8575->9577
6572->7578
7578->8579
7578->8580
8580->9581
6572->7582
7582->8583
6572->7584
7584->8585
8585->9586
9586->10587
10587->11588
10587->11589
9586->10590
8585->9591
9591->10592
10592->11593
11593->12594
12594->13595
12594->13596
12594->13597
13597->14598
13597->14599
10592->11600
11600->12601
12601->13602
12601->13603
12601->13604
5524->6605
6605->7606
-10->0607
0607->1608
1608->2609
2609->3610
3610->4611
4611->5612
5612->6613
0607->1614
1614->2615
2615->3616
3616->4617
0607->1618
1618->2619
2619->3620
3620->4621
0607->1622
1622->2623
1622->2624
1622->2625
2625->3626
3626->4627
3626->4628
3626->4629
3626->4630
4630->5631
4630->5632
2625->3633
3633->4634
3633->4635
3633->4636
2625->3637
3637->4638
3637->4639
3637->4640
3637->4641
2625->3642
3642->4643
3642->4644
4644->5645
4644->5646
5646->6647
5646->6648
3642->4649
4649->5650
5650->6651
6651->7652
6651->7653
6651->7654
7654->8655
2625->3656
3656->4657
3656->4658
4658->5659
5659->6660
5659->6661
4658->5662
5662->6663
6663->7664
7664->8665
7664->8666
6663->7667
7667->8668
7667->8669
3656->4670
4670->5671
5671->6672
6672->7673
7673->8674
8674->9675
7673->8676
8676->9677
8676->9678
5671->6679
6679->7680
7680->8681
8681->9682
8681->9683
7680->8684
8684->9685
8684->9686
9686->10687
9686->10688
10688->11689
5671->6690
6690->7691
7691->8692
7691->8693
8693->9694
8693->9695
6690->7696
7696->8697
7696->8698
6690->7699
7699->8700
6690->7701
7701->8702
8702->9703
9703->10704
10704->11705
10704->11706
11706->12707
11706->12708
12708->13709
8702->9710
9710->10711
10711->11712
10711->11713
9710->10714
10714->11715
8702->9716
9716->10717
10717->11718
11718->12719
11718->12720
10717->11721
10717->11722
5671->6723
6723->7724
2625->3725
3725->4726
3725->4727
4727->5728
4727->5729
3725->4730
4730->5731
5731->6732
6732->7733
7733->8734
7733->8735
8735->9736
8735->9737
9737->10738
5731->6739
6739->7740
7740->8741
8741->9742
9742->10743
10743->11744
10743->11745
9742->10746
10746->11747
11747->12748
10746->11749
8741->9750
9750->10751
9750->10752
7740->8753
7740->8754
2625->3755
3755->4756
3755->4757
3755->4758
4758->5759
4758->5760
3755->4761
2625->3762
3762->4763
3762->4764
3762->4765
4765->5766
4765->5767
4765->5768
5768->6769
3762->4770
4770->5771
5771->6772
6772->7773
7773->8774
5771->6775
6775->7776
7776->8777
7776->8778
7776->8779
8779->9780
8779->9781
9781->10782
5771->6783
6783->7784
7784->8785
7784->8786
7784->8787
8787->9788
8787->9789
9789->10790
5771->6791
6791->7792
7792->8793
8793->9794
9794->10795
10795->11796
10795->11797
10795->11798
11798->12799
12799->13800
8793->9801
9801->10802
10802->11803
10802->11804
11804->12805
11804->12806
8793->9807
9807->10808
10808->11809
11809->12810
12810->13811
12810->13812
12810->13813
13813->14814
10808->11815
9807->10816
10816->11817
11817->12818
12818->13819
13819->14820
14820->15821
14820->15822
13819->14823
14823->15824
14823->15825
15825->16826
15825->16827
16827->17828
11817->12829
12829->13830
13830->14831
14831->15832
14831->15833
13830->14834
14834->15835
14834->15836
15836->16837
15836->16838
16838->17839
11817->12840
12840->13841
13841->14842
14842->15843
14842->15844
15844->16845
15844->16846
13841->14847
14847->15848
14847->15849
13841->14850
14850->15851
13841->14852
14852->15853
15853->16854
16854->17855
16854->17856
16854->17857
17857->18858
16854->17859
17859->18860
18860->19861
19861->20862
19861->20863
18860->19864
15853->16865
16865->17866
17866->18867
17866->18868
18868->19869
18868->19870
15853->16871
16871->17872
17872->18873
17872->18874
18874->19875
18874->19876
16871->17877
17877->18878
17877->18879
16871->17880
17880->18881
16871->17882
17882->18883
18883->19884
19884->20885
19884->20886
19884->20887
20887->21888
21888->22889
22889->23890
21888->22891
20887->21892
21892->22893
21892->22894
22894->23895
22894->23896
15853->16897
16897->17898
17898->18899
17898->18900
18900->19901
18900->19902
16897->17903
17903->18904
17903->18905
16897->17906
17906->18907
16897->17908
17908->18909
18909->19910
19910->20911
19910->20912
20912->21913
20912->21914
18909->19915
19915->20916
20916->21917
21917->22918
22918->23919
22918->23920
23920->24921
23920->24922
24922->25923
24922->25924
21917->22925
22925->23926
22925->23927
21917->22928
22928->23929
21917->22930
22930->23931
23931->24932
24932->25933
25933->26934
26934->27935
26934->27936
25933->26937
25933->26938
26938->27939
26938->27940
27940->28941
27940->28942
23931->24943
24943->25944
25944->26945
26945->27946
26945->27947
25944->26948
25944->26949
26949->27950
26949->27951
27951->28952
27951->28953
20916->21954
21954->22955
22955->23956
23956->24957
23956->24958
22955->23959
22955->23960
20916->21961
21961->22962
22962->23963
23963->24964
23963->24965
22962->23966
22962->23967
23967->24968
23967->24969
20916->21970
11817->12971
12971->13972
13972->14973
14973->15974
13972->14975
11817->12976
12976->13977
13977->14978
13977->14979
14979->15980
14979->15981
12976->13982
13982->14983
13982->14984
12976->13985
13985->14986
12976->13987
13987->14988
14988->15989
15989->16990
14988->15991
15991->16992
15991->16993
16993->17994
16993->17995
15991->16996
16996->17997
16996->17998
6791->7999
7999->81000
81000->91001
91001->101002
101002->111003
2625->31004
31004->41005
31004->41006
31004->41007
41007->51008
51008->61009
61009->71010
61009->71011
51008->61012
41007->51013
51013->61014
61014->71015
61014->71016
51013->61017
41007->51018
51018->61019
51018->61020
61020->71021
61020->71022
71022->81023
81023->91024
91024->101025
91024->101026
81023->91027
71022->81028
81028->91029
91029->101030
91029->101031
81028->91032
51018->61033
61033->71034
71034->81035
81035->91036
91036->101037
101037->111038
91036->101039
91036->101040
71034->81041
81041->91042
91042->101043
101043->111044
91042->101045
91042->101046
-10->01047
01047->11048
11048->21049
21049->31050
31050->41051
41051->51052
51052->61053
01047->11054
11054->21055
21055->31056
31056->41057
41057->51058
51058->61059
61059->71060
01047->11061
11061->21062
21062->31063
31063->41064
41064->51065
51065->61066
61066->71067
01047->11068
11068->21069
21069->31070
31070->41071
41071->51072
51072->61073
61073->71074
01047->11075
11075->21076
21076->31077
31077->41078
41078->51079
51079->61080
61080->71081
01047->11082
11082->21083
21083->31084
31084->41085
41085->51086
51086->61087
61087->71088
01047->11089
11089->21090
21090->31091
31091->41092
41092->51093
51093->61094
61094->71095
01047->11096
11096->21097
21097->31098
31098->41099
01047->11100
11100->21101
21101->31102
31102->41103
01047->11104
11104->21105
21105->31106
31106->41107
01047->11108
11108->21109
21109->31110
31110->41111
41111->51112
51112->61113
61113->71114
01047->11115
11115->21116
11115->21117
11115->21118
21118->31119
11115->21120
21120->31121
31121->41122
31121->41123
31121->41124
21120->31125
31125->41126
31125->41127
31125->41128
21120->31129
31129->41130
31129->41131
31129->41132
21120->31133
31133->41134
31133->41135
31133->41136
21120->31137
31137->41138
31137->41139
41139->51140
41139->51141
51141->61142
51141->61143
31137->41144
41144->51145
51145->61146
61146->71147
71147->81148
71147->81149
71147->81150
81150->91151
91151->101152
51145->61153
61153->71154
71154->81155
71154->81156
71154->81157
81157->91158
51145->61159
61159->71160
71160->81161
71160->81162
71160->81163
81163->91164
91164->101165
51145->61166
61166->71167
71167->81168
71167->81169
71167->81170
21120->31171
31171->41172
31171->41173
41173->51174
31171->41175
41175->51176
51176->61177
61177->71178
71178->81179
71178->81180
71178->81181
51176->61182
61182->71183
71183->81184
71183->81185
71183->81186
51176->61187
61187->71188
71188->81189
71188->81190
71188->81191
21120->31192
31192->41193
31192->41194
41194->51195
41194->51196
51196->61197
61197->71198
61197->71199
31192->41200
41200->51201
51201->61202
61202->71203
71203->81204
81204->91205
71203->81206
71203->81207
51201->61208
61208->71209
21120->31210
31210->41211
31210->41212
41212->51213
41212->51214
51214->61215
61215->71216
71216->81217
71216->81218
61215->71219
71219->81220
71219->81221
31210->41222
41222->51223
51223->61224
61224->71225
71225->81226
81226->91227
81226->91228
71225->81229
81229->91230
81229->91231
91231->101232
91231->101233
51223->61234
61234->71235
71235->81236
71235->81237
81237->91238
91238->101239
101239->111240
91238->101241
101241->111242
91238->101243
91238->101244
71235->81245
81245->91246
91246->101247
91246->101248
91246->101249
91246->101250
21120->31251
31251->41252
31251->41253
41253->51254
41253->51255
31251->41256
41256->51257
51257->61258
21120->31259
31259->41260
31259->41261
41261->51262
41261->51263
31259->41264
41264->51265
51265->61266
21120->31267
31267->41268
31267->41269
41269->51270
41269->51271
31267->41272
41272->51273
51273->61274
21120->31275
31275->41276
41276->51277
31275->41278
31275->41279
41279->51280
41279->51281
51281->61282
61282->71283
71283->81284
71283->81285
61282->71286
71286->81287
71286->81288
41279->51289
51289->61290
61290->71291
61290->71292
31275->41293
41293->51294
51294->61295
61295->71296
61295->71297
71297->81298
71297->81299
71297->81300
21120->31301
31301->41302
41302->51303
31301->41304
31301->41305
41305->51306
41305->51307
51307->61308
61308->71309
61308->71310
41305->51311
51311->61312
61312->71313
61312->71314
31301->41315
41315->51316
51316->61317
61317->71318
61317->71319
71319->81320
71319->81321
21120->31322
31322->41323
41323->51324
31322->41325
31322->41326
41326->51327
41326->51328
31322->41329
41329->51330
51330->61331
21120->31332
31332->41333
41333->51334
31332->41335
31332->41336
41336->51337
41336->51338
51338->61339
61339->71340
71340->81341
81341->91342
81341->91343
71340->81344
81344->91345
81344->91346
61339->71347
71347->81348
71347->81349
41336->51350
51350->61351
61351->71352
61351->71353
31332->41354
41354->51355
51355->61356
61356->71357
71357->81358
71357->81359
61356->71360
71360->81361
81361->91362
51355->61363
61363->71364
71364->81365
71364->81366
81366->91367
81366->91368
91368->101369
51355->61370
61370->71371
71371->81372
81372->91373
61370->71374
71374->81375
81375->91376
91376->101377
91376->101378
101378->111379
101378->111380
111380->121381
51355->61382
61382->71383
71383->81384
81384->91385
61382->71386
71386->81387
81387->91388
91388->101389
91388->101390
101390->111391
101390->111392
111392->121393
51355->61394
61394->71395
71395->81396
81396->91397
81396->91398
71395->81399
81399->91400
81399->91401
91401->101402
61394->71403
71403->81404
81404->91405
51355->61406
61406->71407
71407->81408
81408->91409
81408->91410
71407->81411
81411->91412
81411->91413
91413->101414
51355->61415
61415->71416
71416->81417
71416->81418
61415->71419
71419->81420
51355->61421
61421->71422
71422->81423
71422->81424
81424->91425
81424->91426
91426->101427
91426->101428
91426->101429
81424->91430
81424->91431
51355->61432
61432->71433
61432->71434
61432->71435
61432->71436
71436->81437
81437->91438
91438->101439
101439->111440
91438->101441
81437->91442
91442->101443
101443->111444
111444->121445
111444->121446
101443->111447
111447->121448
111447->121449
121449->131450
81437->91451
91451->101452
101452->111453
101452->111454
91451->101455
81437->91456
91456->101457
101457->111458
101457->111459
111459->121460
111459->121461
121461->131462
81437->91463
91463->101464
101464->111465
101464->111466
111466->121467
111466->121468
81437->91469
91469->101470
101470->111471
101470->111472
111472->121473
111472->121474
81437->91475
91475->101476
101476->111477
101476->111478
91475->101479
101479->111480
111480->121481
121481->131482
131482->141483
131482->141484
131482->141485
111480->121486
121486->131487
131487->141488
131487->141489
131487->141490
141490->151491
141490->151492
151492->161493
161493->171494
171494->181495
161493->171496
91475->101497
101497->111498
111498->121499
121499->131500
131500->141501
131500->141502
131500->141503
141503->151504
141503->151505
151505->161506
161506->171507
171507->181508
161506->171509
171509->181510
181510->191511
181510->191512
111498->121513
121513->131514
131514->141515
131514->141516
131514->141517
141517->151518
81437->91519
91519->101520
101520->111521
101520->111522
111522->121523
111522->121524
121524->131525
121524->131526
131526->141527
131526->141528
141528->151529
151529->161530
161530->171531
161530->171532
141528->151533
81437->91534
91534->101535
101535->111536
101535->111537
111537->121538
111537->121539
91534->101540
101540->111541
101540->111542
91534->101543
101543->111544
91534->101545
101545->111546
111546->121547
121547->131548
131548->141549
131548->141550
141550->151551
151551->161552
141550->151553
151553->161554
151553->161555
161555->171556
171556->181557
171556->181558
161555->171559
111546->121560
121560->131561
131561->141562
141562->151563
141562->151564
131561->141565
121560->131566
131566->141567
141567->151568
151568->161569
151568->161570
161570->171571
161570->171572
161570->171573
161570->171574
171574->181575
171574->181576
181576->191577
191577->201578
201578->211579
201578->211580
191577->201581
181576->191582
191582->201583
191582->201584
81437->91585
91585->101586
101586->111587
101586->111588
111588->121589
111588->121590
121590->131591
121590->131592
51355->61593
61593->71594
71594->81595
71594->81596
81596->91597
81596->91598
91598->101599
101599->111600
91598->101601
81596->91602
91602->101603
51355->61604
61604->71605
21120->31606
31606->41607
41607->51608
31606->41609
31606->41610
41610->51611
41610->51612
51612->61613
61613->71614
71614->81615
71614->81616
61613->71617
71617->81618
71617->81619
41610->51620
51620->61621
61621->71622
61621->71623
31606->41624
41624->51625
51625->61626
21120->31627
31627->41628
41628->51629
31627->41630
31627->41631
41631->51632
41631->51633
51633->61634
61634->71635
71635->81636
81636->91637
91637->101638
91637->101639
101639->111640
101639->111641
61634->71642
31627->41643
41643->51644
51644->61645
61645->71646
71646->81647
71646->81648
81648->91649
91649->101650
101650->111651
101650->111652
111652->121653
111652->121654
61645->71655
61645->71656
71656->81657
61645->71658
71658->81659
81659->91660
81659->91661
81659->91662
91662->101663
81659->91664
91664->101665
101665->111666
111666->121667
111666->121668
121668->131669
131669->141670
121668->131671
51644->61672
61672->71673
-10->01674
01674->11675
11675->21676
21676->31677
31677->41678
41678->51679
01674->11680
11680->21681
21681->31682
31682->41683
41683->51684
01674->11685
11685->21686
21686->31687
31687->41688
41688->51689
51689->61690
61690->71691
71691->81692
01674->11693
11693->21694
21694->31695
31695->41696
41696->51697
51697->61698
61698->71699
71699->81700
01674->11701
11701->21702
21702->31703
31703->41704
41704->51705
51705->61706
61706->71707
01674->11708
11708->21709
21709->31710
31710->41711
41711->51712
51712->61713
01674->11714
11714->21715
21715->31716
31716->41717
41717->51718
51718->61719
01674->11720
11720->21721
21721->31722
31722->41723
41723->51724
51724->61725
01674->11726
11726->21727
21727->31728
31728->41729
01674->11730
11730->21731
21731->31732
31732->41733
01674->11734
11734->21735
11734->21736
11734->21737
21737->31738
11734->21739
21739->31740
31740->41741
31740->41742
31740->41743
41743->51744
41743->51745
51745->61746
61746->71747
51745->61748
61748->71749
21739->31750
31750->41751
31750->41752
41752->51753
51753->61754
61754->71755
61754->71756
31750->41757
21739->31758
31758->41759
31758->41760
31758->41761
21739->31762
31762->41763
41763->51764
31762->41765
31762->41766
41766->51767
41766->51768
51768->61769
61769->71770
61769->71771
31762->41772
41772->51773
51773->61774
61774->71775
71775->81776
71775->81777
51773->61778
61778->71779
71779->81780
71779->81781
81781->91782
81781->91783
91783->101784
91783->101785
101785->111786
101785->111787
111787->121788
51773->61789
61789->71790
71790->81791
71790->81792
81792->91793
81792->91794
61789->71795
71795->81796
81796->91797
81796->91798
81796->91799
81796->91800
91800->101801
101801->111802
111802->121803
121803->131804
121803->131805
131805->141806
131805->141807
141807->151808
141807->151809
151809->161810
101801->111811
111811->121812
121812->131813
131813->141814
121812->131815
121812->131816
51773->61817
61817->71818
21739->31819
31819->41820
41820->51821
31819->41822
31819->41823
41823->51824
41823->51825
31819->41826
41826->51827
51827->61828
21739->31829
31829->41830
41830->51831
31829->41832
31829->41833
41833->51834
41833->51835
51835->61836
61836->71837
61836->71838
31829->41839
41839->51840
51840->61841
61841->71842
71842->81843
81843->91844
71842->81845
71842->81846
51840->61847
61847->71848
21739->31849
31849->41850
41850->51851
31849->41852
31849->41853
41853->51854
51854->61855
61855->71856
71856->81857
71856->81858
41853->51859
31849->41860
41860->51861
51861->61862
21739->31863
31863->41864
41864->51865
31863->41866
31863->41867
41867->51868
41867->51869
51869->61870
61870->71871
71871->81872
81872->91873
91873->101874
91873->101875
61870->71876
31863->41877
41877->51878
51878->61879
61879->71880
71880->81881
81881->91882
71880->81883
71880->81884
51878->61885
61885->71886
21739->31887
31887->41888
31887->41889
41889->51890
41889->51891
51891->61892
61892->71893
61892->71894
31887->41895
41895->51896
51896->61897
61897->71898
71898->81899
71898->81900
71898->81901
81901->91902
81901->91903
51896->61904
61904->71905
71905->81906
71905->81907
61904->71908
71908->81909
51896->61910
61910->71911
71911->81912
81912->91913
81912->91914
71911->81915
81915->91916
81915->91917
91917->101918
51896->61919
61919->71920
71920->81921
71920->81922
71920->81923
81923->91924
91924->101925
101925->111926
101925->111927
51896->61928
61928->71929
71929->81930
61928->71931
71931->81932
81932->91933
91933->101934
101934->111935
111935->121936
111935->121937
101934->111938
111938->121939
111938->121940
121940->131941
131941->141942
121940->131943
131943->141944
81932->91945
91945->101946
101946->111947
101946->111948
111948->121949
121949->131950
121949->131951
111948->121952
121952->131953
121952->131954
51896->61955
61955->71956
71956->81957
81957->91958
71956->81959
61955->71960
71960->81961
81961->91962
91962->101963
91962->101964
91962->101965
51896->61966
61966->71967
71967->81968
71967->81969
81969->91970
81969->91971
51896->61972
61972->71973
21739->31974
31974->41975
41975->51976
31974->41977
31974->41978
41978->51979
41978->51980
51980->61981
61981->71982
61981->71983
31974->41984
41984->51985
51985->61986
61986->71987
71987->81988
71987->81989
71987->81990
51985->61991
61991->71992
-10->01993
01993->11994
11994->21995
21995->31996
31996->41997
41997->51998
51998->61999
61999->72000
01993->12001
12001->22002
12001->22003
22003->32004
32004->42005
42005->52006
12001->22007
22007->32008
32008->42009
32008->42010
22007->32011
32011->42012
32011->42013
42013->52014
32011->42015
22007->32016
32016->42017
42017->52018
42017->52019
52019->62020
62020->72021
62020->72022
52019->62023
62023->72024
62023->72025
32016->42026
42026->52027
52027->62028
62028->72029
62028->72030
62028->72031
72031->82032
82032->92033
82032->92034
72031->82035
22007->32036
32036->42037
32036->42038
42038->52039
42038->52040
52040->62041
62041->72042
62041->72043
32036->42044
42044->52045
52045->62046
62046->72047
72047->82048
62046->72049
72049->82050
82050->92051
22007->32052
32052->42053
42053->52054
32052->42055
32052->42056
42056->52057
42056->52058
52058->62059
62059->72060
62059->72061
32052->42062
42062->52063
52063->62064
62064->72065
72065->82066
82066->92067
92067->102068
92067->102069
62064->72070
72070->82071
52063->62072
62072->72073
72073->82074
72073->82075
82075->92076
82075->92077
92077->102078
92077->102079
52063->62080
62080->72081
72081->82082
72081->82083
82083->92084
22007->32085
32085->42086
32085->42087
42087->52088
42087->52089
32085->42090
42090->52091
52091->62092
62092->72093
72093->82094
72093->82095
22007->32096
32096->42097
32096->42098
42098->52099
42098->52100
32096->42101
42101->52102
52102->62103
62103->72104
72104->82105
72104->82106
-10->02107
02107->12108
12108->22109
22109->32110
32110->42111
42111->52112
52112->62113
02107->12114
12114->22115
22115->32116
32116->42117
42117->52118
52118->62119
62119->72120
72120->82121
02107->12122
12122->22123
22123->32124
32124->42125
42125->52126
52126->62127
62127->72128
02107->12129
12129->22130
22130->32131
02107->12132
12132->22133
12132->22134
22134->32135
12132->22136
22136->32137
32137->42138
32137->42139
42139->52140
42139->52141
32137->42142
22136->32143
32143->42144
32143->42145
32143->42146
22136->32147
32147->42148
32147->42149
42149->52150
52150->62151
32147->42152
-10->02153
02153->12154
12154->22155
22155->32156
32156->42157
42157->52158
52158->62159
02153->12160
12160->22161
12160->22162
12160->22163
22163->32164
32164->42165
32164->42166
32164->42167
42167->52168
42167->52169
32164->42170
22163->32171
32171->42172
32171->42173
42173->52174
42173->52175
52175->62176
62176->72177
72177->82178
72177->82179
62176->72180
72180->82181
72180->82182
32171->42183
42183->52184
52184->62185
62185->72186
72186->82187
62185->72188
72188->82189
72188->82190
72188->82191
22163->32192
32192->42193
32192->42194
42194->52195
42194->52196
32192->42197
42197->52198
52198->62199
62199->72200
72200->82201
82201->92202
72200->82203
52198->62204
62204->72205
72205->82206
82206->92207
72205->82208
52198->62209
62209->72210
72210->82211
82211->92212
72210->82213
52198->62214
62214->72215
72215->82216
72215->82217
82217->92218
82217->92219
52198->62220
62220->72221
72221->82222
72221->82223
82223->92224
82223->92225
52198->62226
62226->72227
72227->82228
72227->82229
82229->92230
82229->92231
52198->62232
62232->72233
72233->82234
72233->82235
82235->92236
82235->92237
92237->102238
92237->102239
52198->62240
62240->72241
72241->82242
72241->82243
82243->92244
82243->92245
52198->62246
62246->72247
72247->82248
72247->82249
82249->92250
82249->92251
52198->62252
62252->72253
72253->82254
72253->82255
82255->92256
82255->92257
52198->62258
62258->72259
72259->82260
72259->82261
82261->92262
82261->92263
52198->62264
62264->72265
72265->82266
72265->82267
82267->92268
82267->92269
52198->62270
62270->72271
72271->82272
72271->82273
82273->92274
82273->92275
52198->62276
62276->72277
72277->82278
72277->82279
82279->92280
82279->92281
52198->62282
62282->72283
72283->82284
52198->62285
62285->72286
72286->82287
72286->82288
22163->32289
32289->42290
32289->42291
42291->52292
42291->52293
52293->62294
62294->72295
72295->82296
72295->82297
62294->72298
72298->82299
82299->92300
82299->92301
72298->82302
32289->42303
42303->52304
52304->62305
62305->72306
62305->72307
72307->82308
72307->82309
72307->82310
22163->32311
32311->42312
32311->42313
42313->52314
42313->52315
52315->62316
62316->72317
72317->82318
82318->92319
82318->92320
72317->82321
82321->92322
92322->102323
92322->102324
82321->92325
62316->72326
72326->82327
72326->82328
32311->42329
42329->52330
52330->62331
62331->72332
72332->82333
72332->82334
82334->92335
82334->92336
62331->72337
72337->82338
72337->82339
82339->92340
62331->72341
72341->82342
62331->72343
72343->82344
82344->92345
92345->102346
92345->102347
102347->112348
102347->112349
82344->92350
92350->102351
102351->112352
112352->122353
122353->132354
122353->132355
132355->142356
142356->152357
142356->152358
152358->162359
162359->172360
152358->162361
112352->122362
122362->132363
132363->142364
142364->152365
142364->152366
152366->162367
152366->162368
102351->112369
112369->122370
52330->62371
62371->72372
72372->82373
22163->32374
32374->42375
32374->42376
42376->52377
42376->52378
52378->62379
62379->72380
72380->82381
82381->92382
82381->92383
72380->82384
62379->72385
72385->82386
72385->82387
32374->42388
42388->52389
52389->62390
62390->72391
72391->82392
72391->82393
52389->62394
62394->72395
72395->82396
82396->92397
92397->102398
92397->102399
92397->102400
102400->112401
102400->112402
112402->122403
112402->122404
72395->82405
62394->72406
72406->82407
82407->92408
82407->92409
92409->102410
92409->102411
102411->112412
102411->112413
112413->122414
112413->122415
52389->62416
62416->72417
72417->82418
82418->92419
92419->102420
92419->102421
92419->102422
102422->112423
102422->112424
112424->122425
112424->122426
72417->82427
62416->72428
72428->82429
82429->92430
82429->92431
92431->102432
92431->102433
102433->112434
102433->112435
52389->62436
62436->72437
72437->82438
82438->92439
92439->102440
92439->102441
92439->102442
102442->112443
102442->112444
112444->122445
112444->122446
72437->82447
62436->72448
72448->82449
82449->92450
82449->92451
92451->102452
102452->112453
102452->112454
112454->122455
112454->122456
122456->132457
122456->132458
92451->102459
52389->62460
62460->72461
72461->82462
62460->72463
72463->82464
82464->92465
82464->92466
52389->62467
62467->72468
72468->82469
82469->92470
92470->102471
92470->102472
92470->102473
102473->112474
102473->112475
112475->122476
112475->122477
72468->82478
62467->72479
72479->82480
82480->92481
82480->92482
92482->102483
92482->102484
102484->112485
102484->112486
112486->122487
112486->122488
52389->62489
62489->72490
72490->82491
82491->92492
92492->102493
92492->102494
92492->102495
102495->112496
102495->112497
112497->122498
112497->122499
72490->82500
62489->72501
72501->82502
82502->92503
82502->92504
92504->102505
92504->102506
102506->112507
102506->112508
112508->122509
112508->122510
52389->62511
62511->72512
72512->82513
82513->92514
92514->102515
92514->102516
92514->102517
102517->112518
102517->112519
112519->122520
112519->122521
72512->82522
62511->72523
72523->82524
82524->92525
82524->92526
92526->102527
92526->102528
102528->112529
102528->112530
112530->122531
112530->122532
52389->62533
62533->72534
72534->82535
82535->92536
92536->102537
92536->102538
92536->102539
102539->112540
102539->112541
112541->122542
112541->122543
72534->82544
62533->72545
72545->82546
82546->92547
82546->92548
92548->102549
102549->112550
102549->112551
112551->122552
112551->122553
122553->132554
122553->132555
92548->102556
52389->62557
62557->72558
72558->82559
82559->92560
92560->102561
92560->102562
92560->102563
102563->112564
102563->112565
112565->122566
112565->122567
72558->82568
62557->72569
72569->82570
82570->92571
82570->92572
92572->102573
92572->102574
102574->112575
102574->112576
112576->122577
112576->122578
52389->62579
62579->72580
72580->82581
82581->92582
92582->102583
92582->102584
92582->102585
102585->112586
102585->112587
112587->122588
112587->122589
72580->82590
62579->72591
72591->82592
82592->92593
82592->92594
92594->102595
92594->102596
102596->112597
102596->112598
112598->122599
112598->122600
52389->62601
62601->72602
72602->82603
82603->92604
92604->102605
92604->102606
92604->102607
102607->112608
102607->112609
112609->122610
112609->122611
72602->82612
62601->72613
72613->82614
82614->92615
82614->92616
92616->102617
92616->102618
102618->112619
102618->112620
112620->122621
112620->122622
52389->62623
62623->72624
72624->82625
82625->92626
92626->102627
92626->102628
92626->102629
102629->112630
102629->112631
112631->122632
112631->122633
72624->82634
62623->72635
72635->82636
82636->92637
82636->92638
92638->102639
92638->102640
102640->112641
102640->112642
112642->122643
112642->122644
-10->02645
02645->12646
12646->22647
22647->32648
32648->42649
42649->52650
52650->62651
02645->12652
12652->22653
22653->32654
32654->42655
42655->52656
52656->62657
02645->12658
12658->22659
22659->32660
02645->12661
12661->22662
12661->22663
12661->22664
22664->32665
12661->22666
22666->32667
32667->42668
42668->52669
52669->62670
62670->72671
62670->72672
32667->42673
22666->32674
32674->42675
32674->42676
42676->52677
42676->52678
52678->62679
62679->72680
72680->82681
82681->92682
82681->92683
52678->62684
32674->42685
42685->52686
52686->62687
62687->72688
72688->82689
62687->72690
62687->72691
22666->32692
32692->42693
32692->42694
42694->52695
32692->42696
42696->52697
52697->62698
62698->72699
62698->72700
62698->72701
72701->82702
82702->92703
92703->102704
92703->102705
22666->32706
32706->42707
32706->42708
32706->42709
42709->52710
42709->52711
52711->62712
62712->72713
62712->72714
32706->42715
42715->52716
52716->62717
62717->72718
72718->82719
72718->82720
82720->92721
82720->92722
92722->102723
92722->102724
52716->62725
62725->72726
72726->82727
72726->82728
62725->72729
72729->82730
52716->62731
62731->72732
22666->32733
32733->42734
32733->42735
42735->52736
42735->52737
52737->62738
62738->72739
72739->82740
72739->82741
62738->72742
72742->82743
72742->82744
32733->42745
42745->52746
52746->62747
62747->72748
72748->82749
72748->82750
82750->92751
82750->92752
92752->102753
92752->102754
52746->62755
62755->72756
72756->82757
72756->82758
62755->72759
72759->82760
82760->92761
92761->102762
52746->62763
62763->72764
72764->82765
72764->82766
82766->92767
82766->92768
92768->102769
92768->102770
52746->62771
62771->72772
72772->82773
72772->82774
62771->72775
72775->82776
82776->92777
92777->102778
52746->62779
62779->72780
72780->82781
72780->82782
22666->32783
32783->42784
32783->42785
42785->52786
52786->62787
62787->72788
72788->82789
72788->82790
82790->92791
92791->102792
102792->112793
102792->112794
42785->52795
52795->62796
62796->72797
72797->82798
72797->82799
62796->72800
72800->82801
72800->82802
32783->42803
42803->52804
52804->62805
62805->72806
72806->82807
72806->82808
82808->92809
82808->92810
92810->102811
92810->102812
52804->62813
62813->72814
72814->82815
72814->82816
62813->72817
72817->82818
82818->92819
92819->102820
52804->62821
62821->72822
72822->82823
72822->82824
82824->92825
82824->92826
82824->92827
22666->32828
32828->42829
32828->42830
42830->52831
52831->62832
62832->72833
72833->82834
72833->82835
82835->92836
92836->102837
102837->112838
102837->112839
42830->52840
52840->62841
62841->72842
72842->82843
82843->92844
82843->92845
72842->82846
82846->92847
82846->92848
62841->72849
72849->82850
72849->82851
32828->42852
42852->52853
52853->62854
62854->72855
72855->82856
82856->92857
92857->102858
102858->112859
102858->112860
112860->122861
122861->132862
132862->142863
132862->142864
72855->82865
82865->92866
82865->92867
92867->102868
102868->112869
112869->122870
112869->122871
122871->132872
132872->142873
142873->152874
142873->152875
92867->102876
102876->112877
102876->112878
112878->122879
122879->132880
132880->142881
132880->142882
142882->152883
152883->162884
162884->172885
162884->172886
112878->122887
122887->132888
132888->142889
142889->152890
132888->142891
132888->142892
142892->152893
142892->152894
152894->162895
162895->172896
172896->182897
182897->192898
182897->192899
192899->202900
202900->212901
212901->222902
212901->222903
172896->182904
162895->172905
172905->182906
182906->192907
182906->192908
192908->202909
202909->212910
212910->222911
212910->222912
172905->182913
132888->142914
142914->152915
152915->162916
162916->172917
172917->182918
162916->172919
172919->182920
182920->192921
52853->62922
62922->72923
72923->82924
72923->82925
82925->92926
92926->102927
102927->112928
102927->112929
62922->72930
62922->72931
72931->82932
62922->72933
72933->82934
82934->92935
92935->102936
102936->112937
112937->122938
102936->112939
112939->122940
92935->102941
102941->112942
82934->92943
92943->102944
102944->112945
102944->112946
112946->122947
122947->132948
132948->142949
132948->142950
112946->122951
122951->132952
132952->142953
122951->132954
132954->142955
142955->152956
132954->142957
142957->152958
52853->62959
62959->72960
72960->82961
22666->32962
32962->42963
32962->42964
42964->52965
52965->62966
62966->72967
72967->82968
72967->82969
82969->92970
92970->102971
102971->112972
102971->112973
42964->52974
52974->62975
62975->72976
72976->82977
72976->82978
62975->72979
72979->82980
72979->82981
32962->42982
42982->52983
52983->62984
62984->72985
72985->82986
82986->92987
92987->102988
102988->112989
102988->112990
112990->122991
122991->132992
132992->142993
132992->142994
72985->82995
82995->92996
82995->92997
92997->102998
102998->112999
112999->123000
112999->123001
123001->133002
133002->143003
143003->153004
143003->153005
92997->103006
103006->113007
103006->113008
113008->123009
123009->133010
133010->143011
133010->143012
143012->153013
153013->163014
163014->173015
163014->173016
113008->123017
123017->133018
133018->143019
143019->153020
133018->143021
133018->143022
143022->153023
143022->153024
153024->163025
163025->173026
173026->183027
183027->193028
183027->193029
193029->203030
203030->213031
213031->223032
213031->223033
173026->183034
163025->173035
173035->183036
183036->193037
183036->193038
193038->203039
203039->213040
213040->223041
213040->223042
173035->183043
133018->143044
143044->153045
153045->163046
163046->173047
173047->183048
163046->173049
173049->183050
183050->193051
52983->63052
63052->73053
73053->83054
73053->83055
83055->93056
93056->103057
103057->113058
103057->113059
63052->73060
63052->73061
73061->83062
63052->73063
73063->83064
83064->93065
93065->103066
93065->103067
103067->113068
113068->123069
123069->133070
123069->133071
103067->113072
113072->123073
123073->133074
113072->123075
123075->133076
133076->143077
123075->133078
133078->143079
52983->63080
63080->73081
73081->83082
22666->33083
33083->43084
33083->43085
43085->53086
53086->63087
63087->73088
73088->83089
73088->83090
83090->93091
93091->103092
103092->113093
103092->113094
43085->53095
53095->63096
63096->73097
63096->73098
33083->43099
43099->53100
53100->63101
63101->73102
63101->73103
73103->83104
73103->83105
22666->33106
33106->43107
33106->43108
43108->53109
53109->63110
63110->73111
73111->83112
73111->83113
83113->93114
93114->103115
103115->113116
103115->113117
43108->53118
53118->63119
63119->73120
63119->73121
33106->43122
43122->53123
53123->63124
63124->73125
63124->73126
73126->83127
73126->83128
22666->33129
33129->43130
33129->43131
43131->53132
53132->63133
63133->73134
73134->83135
73134->83136
83136->93137
93137->103138
103138->113139
103138->113140
43131->53141
53141->63142
63142->73143
73143->83144
73143->83145
63142->73146
73146->83147
73146->83148
33129->43149
43149->53150
53150->63151
63151->73152
73152->83153
83153->93154
83153->93155
73152->83156
83156->93157
93157->103158
83156->93159
63151->73160
73160->83161
83161->93162
93162->103163
53150->63164
63164->73165
73165->83166
83166->93167
93167->103168
93167->103169
103169->113170
113170->123171
113170->123172
103169->113173
63164->73174
73174->83175
83175->93176
83175->93177
73174->83178
83178->93179
93179->103180
103180->113181
22666->33182
33182->43183
33182->43184
33182->43185
43185->53186
43185->53187
53187->63188
63188->73189
63188->73190
33182->43191
22666->33192
33192->43193
33192->43194
43194->53195
43194->53196
33192->43197
43197->53198
53198->63199
63199->73200
22666->33201
33201->43202
33201->43203
43203->53204
43203->53205
33201->43206
43206->53207
53207->63208
63208->73209
73209->83210
83210->93211
83210->93212
73209->83213
83213->93214
63208->73215
73215->83216
83216->93217
53207->63218
63218->73219
73219->83220
83220->93221
73219->83222
73219->83223
73219->83224
22666->33225
33225->43226
33225->43227
43227->53228
43227->53229
53229->63230
63230->73231
63230->73232
33225->43233
43233->53234
53234->63235
63235->73236
63235->73237
-10->03238
03238->13239
13239->23240
23240->33241
33241->43242
43242->53243
53243->63244
63244->73245
03238->13246
13246->23247
13246->23248
23248->33249
13246->23250
23250->33251
13246->23252
23252->33253
33253->43254
33253->43255
43255->53256
33253->43257
23252->33258
33258->43259
33258->43260
43260->53261
43260->53262
53262->63263
63263->73264
63263->73265
53262->63266
63266->73267
63266->73268
33258->43269
43269->53270
53270->63271
63271->73272
63271->73273
-10->03274
03274->13275
13275->23276
23276->33277
33277->43278
43278->53279
53279->63280
63280->73281
03274->13282
13282->23283
13282->23284
23284->33285
13282->23286
23286->33287
33287->43288
33287->43289
33287->43290
43290->53291
43290->53292
33287->43293
43293->53294
53294->63295
63295->73296
73296->83297
73296->83298
23286->33299
33299->43300
33299->43301
33299->43302
43302->53303
43302->53304
53304->63305
63305->73306
63305->73307
63305->73308
33299->43309
43309->53310
53310->63311
63311->73312
73312->83313
73312->83314
23286->33315
33315->43316
33315->43317
33315->43318
43318->53319
43318->53320
53320->63321
63321->73322
63321->73323
63321->73324
33315->43325
43325->53326
53326->63327
63327->73328
73328->83329
73328->83330
-10->03331
03331->13332
13332->23333
23333->33334
33334->43335
43335->53336
53336->63337
63337->73338
03331->13339
13339->23340
13339->23341
23341->33342
33342->43343
33342->43344
43344->53345
43344->53346
23341->33347
33347->43348
33347->43349
43349->53350
43349->53351
23341->33352
33352->43353
33352->43354
43354->53355
43354->53356
23341->33357
33357->43358
33357->43359
43359->53360
43359->53361
-10->03362
03362->13363
13363->23364
23364->33365
33365->43366
43366->53367
53367->63368
63368->73369
03362->13370
13370->23371
23371->33372
33372->43373
43373->53374
53374->63375
63375->73376
03362->13377
13377->23378
23378->33379
33379->43380
03362->13381
13381->23382
23382->33383
33383->43384
03362->13385
13385->23386
13385->23387
23387->33388
13385->23389
23389->33390
33390->43391
33390->43392
33390->43393
43393->53394
43393->53395
53395->63396
63396->73397
63396->73398
63396->73399
33390->43400
43400->53401
53401->63402
63402->73403
73403->83404
83404->93405
73403->83406
23389->33407
33407->43408
33407->43409
33407->43410
43410->53411
43410->53412
53412->63413
63413->73414
73414->83415
73414->83416
73414->83417
63413->73418
73418->83419
83419->93420
83419->93421
73418->83422
33407->43423
43423->53424
53424->63425
63425->73426
73426->83427
83427->93428
73426->83429
63425->73430
73430->83431
83431->93432
93432->103433
103433->113434
113434->123435
113434->123436
103433->113437
103433->113438
113438->123439
83431->93440
93440->103441
53424->63442
63442->73443
73443->83444
83444->93445
83444->93446
73443->83447
73443->83448
53424->63449
63449->73450
23389->33451
33451->43452
33451->43453
33451->43454
43454->53455
43454->53456
53456->63457
63457->73458
73458->83459
73458->83460
73458->83461
63457->73462
73462->83463
83463->93464
83463->93465
73462->83466
33451->43467
43467->53468
53468->63469
63469->73470
73470->83471
83471->93472
73470->83473
63469->73474
73474->83475
83475->93476
93476->103477
103477->113478
113478->123479
113478->123480
103477->113481
103477->113482
113482->123483
83475->93484
93484->103485
53468->63486
63486->73487
73487->83488
83488->93489
83488->93490
73487->83491
73487->83492
53468->63493
63493->73494
23389->33495
33495->43496
43496->53497
43496->53498
53498->63499
63499->73500
73500->83501
83501->93502
93502->103503
103503->113504
83501->93505
73500->83506
83506->93507
93507->103508
103508->113509
83506->93510
63499->73511
73511->83512
83512->93513
93513->103514
73511->83515
33495->43516
43516->53517
53517->63518
63518->73519
73519->83520
73519->83521
83521->93522
83521->93523
93523->103524
53517->63525
63525->73526
73526->83527
73526->83528
83528->93529
83528->93530
93530->103531
53517->63532
63532->73533
73533->83534
83534->93535
93535->103536
103536->113537
113537->123538
73533->83539
83539->93540
83539->93541
93541->103542
103542->113543
113543->123544
123544->133545
93541->103546
53517->63547
63547->73548
73548->83549
53517->63550
63550->73551
73551->83552
73551->83553
83553->93554
83553->93555
63550->73556
73556->83557
73556->83558
63550->73559
73559->83560
63550->73561
73561->83562
83562->93563
93563->103564
103564->113565
103564->113566
113566->123567
113566->123568
123568->133569
123568->133570
83562->93571
93571->103572
103572->113573
103572->113574
113574->123575
93571->103576
103576->113577
113577->123578
123578->133579
133579->143580
133579->143581
143581->153582
123578->133583
133583->143584
143584->153585
153585->163586
143584->153587
113577->123588
123588->133589
133589->143590
133589->143591
133589->143592
93571->103593
103593->113594
113594->123595
123595->133596
133596->143597
133596->143598
123595->133599
53517->63600
63600->73601
73601->83602
73601->83603
83603->93604
83603->93605
83603->93606
83603->93607
83603->93608
23389->33609
33609->43610
43610->53611
43610->53612
53612->63613
63613->73614
73614->83615
83615->93616
83615->93617
73614->83618
83618->93619
93619->103620
103620->113621
83618->93622
73614->83623
83623->93624
93624->103625
103625->113626
83623->93627
73614->83628
83628->93629
93629->103630
103630->113631
113631->123632
123632->133633
83628->93634
63613->73635
73635->83636
83636->93637
93637->103638
73635->83639
33609->43640
43640->53641
53641->63642
63642->73643
73643->83644
83644->93645
93645->103646
73643->83647
83647->93648
83647->93649
93649->103650
93649->103651
53641->63652
63652->73653
73653->83654
73653->83655
53641->63656
63656->73657
73657->83658
73657->83659
73657->83660
63656->73661
73661->83662
83662->93663
83662->93664
93664->103665
73661->83666
83666->93667
93667->103668
93667->103669
83666->93670
63656->73671
73671->83672
63656->73673
73673->83674
83674->93675
93675->103676
93675->103677
103677->113678
113678->123679
113678->123680
103677->113681
103677->113682
103677->113683
103677->113684
53641->63685
63685->73686
73686->83687
73686->83688
83688->93689
53641->63690
63690->73691
73691->83692
73691->83693
83693->93694
83693->93695
63690->73696
73696->83697
73696->83698
83698->93699
63690->73700
73700->83701
63690->73702
73702->83703
83703->93704
93704->103705
103705->113706
103705->113707
113707->123708
113707->123709
123709->133710
123709->133711
83703->93712
93712->103713
103713->113714
103713->113715
113715->123716
113715->123717
113715->123718
113715->123719
113715->123720
83703->93721
93721->103722
103722->113723
103722->113724
113724->123725
113724->123726
123726->133727
123726->133728
53641->63729
63729->73730
73730->83731
73730->83732
83732->93733
83732->93734
93734->103735
93734->103736
63729->73737
73737->83738
73737->83739
63729->73740
73740->83741
63729->73742
73742->83743
83743->93744
93744->103745
103745->113746
103745->113747
113747->123748
113747->123749
123749->133750
123749->133751
83743->93752
93752->103753
103753->113754
103753->113755
113755->123756
113755->123757
123757->133758
123757->133759
23389->33760
33760->43761
43761->53762
43761->53763
53763->63764
63764->73765
73765->83766
73765->83767
63764->73768
73768->83769
83769->93770
93770->103771
73768->83772
33760->43773
43773->53774
53774->63775
63775->73776
63775->73777
73777->83778
83778->93779
73777->83780
83780->93781
73777->83782
23389->33783
33783->43784
43784->53785
43784->53786
53786->63787
63787->73788
73788->83789
83789->93790
93790->103791
103791->113792
83789->93793
73788->83794
83794->93795
93795->103796
103796->113797
83794->93798
63787->73799
73799->83800
83800->93801
93801->103802
73799->83803
33783->43804
43804->53805
53805->63806
63806->73807
73807->83808
53805->63809
63809->73810
73810->83811
73810->83812
83812->93813
83812->93814
93814->103815
53805->63816
63816->73817
73817->83818
83818->93819
93819->103820
73817->83821
83821->93822
83821->93823
93823->103824
103824->113825
53805->63826
63826->73827
73827->83828
73827->83829
83829->93830
83829->93831
53805->63832
63832->73833
73833->83834
83834->93835
93835->103836
73833->83837
83837->93838
83837->93839
93839->103840
103840->113841
93839->103842
53805->63843
63843->73844
73844->83845
73844->83846
83846->93847
83846->93848
63843->73849
73849->83850
73849->83851
63843->73852
73852->83853
63843->73854
73854->83855
83855->93856
93856->103857
93856->103858
103858->113859
53805->63860
63860->73861
73861->83862
73861->83863
83863->93864
83863->93865
53805->63866
63866->73867
73867->83868
83868->93869
93869->103870
103870->113871
113871->123872
103870->113873
93869->103874
103874->113875
103874->113876
63866->73877
73877->83878
83878->93879
93879->103880
103880->113881
113881->123882
113881->123883
103880->113884
113884->123885
113884->123886
123886->133887
123886->133888
123886->133889
133889->143890
83878->93891
93891->103892
103892->113893
103892->113894
113894->123895
113894->123896
113894->123897
113894->123898
113894->123899
113894->123900
83878->93901
93901->103902
103902->113903
103902->113904
103902->113905
113905->123906
113905->123907
23389->33908
33908->43909
43909->53910
43909->53911
53911->63912
63912->73913
73913->83914
83914->93915
93915->103916
103916->113917
83914->93918
73913->83919
83919->93920
93920->103921
103921->113922
83919->93923
73913->83924
83924->93925
93925->103926
103926->113927
83924->93928
73913->83929
83929->93930
93930->103931
93930->103932
83929->93933
73913->83934
83934->93935
93935->103936
103936->113937
83934->93938
63912->73939
73939->83940
83940->93941
93941->103942
73939->83943
33908->43944
43944->53945
53945->63946
63946->73947
73947->83948
73947->83949
83949->93950
83949->93951
93951->103952
103952->113953
113953->123954
123954->133955
113953->123956
103952->113957
113957->123958
113957->123959
123959->133960
133960->143961
123959->133962
103952->113963
113963->123964
53945->63965
63965->73966
73966->83967
73966->83968
83968->93969
83968->93970
93970->103971
103971->113972
113972->123973
123973->133974
113972->123975
103971->113976
113976->123977
113976->123978
123978->133979
133979->143980
123978->133981
103971->113982
113982->123983
53945->63984
63984->73985
73985->83986
73985->83987
83987->93988
83987->93989
53945->63990
63990->73991
73991->83992
73991->83993
63990->73994
73994->83995
83995->93996
93996->103997
93996->103998
103998->113999
103998->114000
83995->94001
94001->104002
94001->104003
104003->114004
83995->94005
94005->104006
83995->94007
94007->104008
104008->114009
114009->124010
124010->134011
134011->144012
134011->144013
124010->134014
114009->124015
124015->134016
134016->144017
134016->144018
124015->134019
104008->114020
114020->124021
124021->134022
134022->144023
144023->154024
144023->154025
144023->154026
124021->134027
53945->64028
64028->74029
74029->84030
84030->94031
84030->94032
74029->84033
84033->94034
94034->104035
94034->104036
84033->94037
64028->74038
74038->84039
84039->94040
94040->104041
104041->114042
104041->114043
114043->124044
114043->124045
124045->134046
124045->134047
84039->94048
94048->104049
104049->114050
104049->114051
114051->124052
114051->124053
84039->94054
94054->104055
104055->114056
104055->114057
114057->124058
124058->134059
114057->124060
84039->94061
94061->104062
104062->114063
104062->114064
114064->124065
124065->134066
134066->144067
124065->134068
114064->124069
64028->74070
74070->84071
84071->94072
94072->104073
104073->114074
104073->114075
94072->104076
104076->114077
114077->124078
114077->124079
104076->114080
84071->94081
74070->84082
84082->94083
94083->104084
104084->114085
114085->124086
114085->124087
124087->134088
124087->134089
134089->144090
134089->144091
94083->104092
104092->114093
114093->124094
114093->124095
124095->134096
124095->134097
94083->104098
104098->114099
114099->124100
114099->124101
124101->134102
134102->144103
124101->134104
74070->84105
84105->94106
94106->104107
104107->114108
104107->114109
94106->104110
104110->114111
84105->94112
94112->104113
104113->114114
114114->124115
124115->134116
124115->134117
134117->144118
104113->114119
114119->124120
124120->134121
124120->134122
134122->144123
134122->144124
104113->114125
114125->124126
124126->134127
134127->144128
134127->144129
-10->04130
04130->14131
14131->24132
24132->34133
34133->44134
44134->54135
54135->64136
64136->74137
04130->14138
14138->24139
14138->24140
24140->34141
34141->44142
34141->44143
24140->34144
34144->44145
34144->44146
24140->34147
34147->44148
34147->44149
24140->34150
34150->44151
34150->44152
-10->04153
04153->14154
14154->24155
24155->34156
34156->44157
44157->54158
04153->14159
14159->24160
24160->34161
34161->44162
44162->54163
04153->14164
14164->24165
24165->34166
34166->44167
44167->54168
54168->64169
64169->74170
04153->14171
14171->24172
24172->34173
34173->44174
44174->54175
54175->64176
64176->74177
04153->14178
14178->24179
24179->34180
34180->44181
44181->54182
54182->64183
64183->74184
04153->14185
14185->24186
24186->34187
34187->44188
44188->54189
54189->64190
64190->74191
74191->84192
04153->14193
14193->24194
24194->34195
34195->44196
44196->54197
54197->64198
64198->74199
04153->14200
14200->24201
24201->34202
34202->44203
44203->54204
54204->64205
64205->74206
04153->14207
14207->24208
24208->34209
34209->44210
44210->54211
54211->64212
64212->74213
74213->84214
84214->94215
04153->14216
14216->24217
24217->34218
34218->44219
44219->54220
54220->64221
64221->74222
74222->84223
84223->94224
04153->14225
14225->24226
24226->34227
34227->44228
44228->54229
54229->64230
64230->74231
04153->14232
14232->24233
24233->34234
34234->44235
44235->54236
54236->64237
64237->74238
04153->14239
14239->24240
24240->34241
34241->44242
44242->54243
54243->64244
64244->74245
04153->14246
14246->24247
24247->34248
34248->44249
44249->54250
54250->64251
04153->14252
14252->24253
24253->34254
34254->44255
44255->54256
54256->64257
04153->14258
14258->24259
24259->34260
34260->44261
44261->54262
54262->64263
04153->14264
14264->24265
24265->34266
34266->44267
04153->14268
14268->24269
24269->34270
04153->14271
14271->24272
24272->34273
34273->44274
04153->14275
14275->24276
24276->34277
34277->44278
04153->14279
14279->24280
24280->34281
34281->44282
04153->14283
14283->24284
24284->34285
34285->44286
04153->14287
14287->24288
14287->24289
24289->34290
14287->24291
24291->34292
34292->44293
34292->44294
44294->54295
44294->54296
44294->54297
54297->64298
34292->44299
44299->54300
54300->64301
64301->74302
74302->84303
84303->94304
94304->104305
74302->84306
84306->94307
84306->94308
94308->104309
94308->104310
54300->64311
64311->74312
64311->74313
64311->74314
64311->74315
74315->84316
84316->94317
94317->104318
94317->104319
24291->34320
34320->44321
34320->44322
34320->44323
44323->54324
44323->54325
54325->64326
64326->74327
64326->74328
34320->44329
44329->54330
54330->64331
64331->74332
74332->84333
84333->94334
94334->104335
94334->104336
104336->114337
104336->114338
114338->124339
114338->124340
124340->134341
74332->84342
84342->94343
94343->104344
94343->104345
104345->114346
104345->114347
114347->124348
74332->84349
84349->94350
94350->104351
94350->104352
94350->104353
104353->114354
104353->114355
114355->124356
114355->124357
74332->84358
84358->94359
94359->104360
94359->104361
94359->104362
104362->114363
104362->114364
114364->124365
114364->124366
74332->84367
84367->94368
94368->104369
94368->104370
94368->104371
104371->114372
104371->114373
114373->124374
114373->124375
74332->84376
84376->94377
94377->104378
94377->104379
94377->104380
104380->114381
104380->114382
114382->124383
114382->124384
74332->84385
84385->94386
94386->104387
94386->104388
94386->104389
104389->114390
104389->114391
114391->124392
114391->124393
74332->84394
84394->94395
94395->104396
94395->104397
94395->104398
104398->114399
104398->114400
114400->124401
114400->124402
74332->84403
84403->94404
94404->104405
94404->104406
94404->104407
104407->114408
104407->114409
114409->124410
114409->124411
74332->84412
84412->94413
94413->104414
94413->104415
94413->104416
104416->114417
104416->114418
114418->124419
114418->124420
74332->84421
84421->94422
94422->104423
94422->104424
94422->104425
104425->114426
104425->114427
114427->124428
114427->124429
74332->84430
84430->94431
94431->104432
94431->104433
94431->104434
104434->114435
104434->114436
114436->124437
114436->124438
74332->84439
84439->94440
94440->104441
94440->104442
94440->104443
104443->114444
104443->114445
114445->124446
114445->124447
74332->84448
84448->94449
94449->104450
94449->104451
94449->104452
104452->114453
104452->114454
114454->124455
114454->124456
74332->84457
84457->94458
94458->104459
94458->104460
94458->104461
104461->114462
104461->114463
114463->124464
114463->124465
74332->84466
84466->94467
94467->104468
94467->104469
94467->104470
104470->114471
104470->114472
114472->124473
114472->124474
74332->84475
84475->94476
94476->104477
94476->104478
94476->104479
104479->114480
104479->114481
114481->124482
114481->124483
74332->84484
84484->94485
94485->104486
94485->104487
94485->104488
104488->114489
104488->114490
114490->124491
114490->124492
74332->84493
84493->94494
94494->104495
94494->104496
94494->104497
104497->114498
104497->114499
114499->124500
114499->124501
74332->84502
84502->94503
94503->104504
94503->104505
94503->104506
104506->114507
104506->114508
114508->124509
114508->124510
74332->84511
84511->94512
94512->104513
94512->104514
94512->104515
104515->114516
104515->114517
114517->124518
114517->124519
74332->84520
84520->94521
94521->104522
104522->114523
94521->104524
84520->94525
94525->104526
104526->114527
114527->124528
124528->134529
124528->134530
134530->144531
134530->144532
144532->154533
154533->164534
164534->174535
104526->114536
114536->124537
124537->134538
124537->134539
104526->114540
114540->124541
124541->134542
104526->114543
114543->124544
124544->134545
134545->144546
124544->134547
134547->144548
134547->144549
54330->64550
64550->74551
74551->84552
74551->84553
64550->74554
74554->84555
84555->94556
94556->104557
24291->34558
34558->44559
34558->44560
34558->44561
44561->54562
44561->54563
54563->64564
64564->74565
74565->84566
74565->84567
64564->74568
74568->84569
74568->84570
34558->44571
44571->54572
54572->64573
64573->74574
74574->84575
74574->84576
74574->84577
84577->94578
84577->94579
94579->104580
104580->114581
114581->124582
114581->124583
104580->114584
94579->104585
54572->64586
64586->74587
74587->84588
74587->84589
84589->94590
94590->104591
94590->104592
84589->94593
94593->104594
94593->104595
24291->34596
34596->44597
34596->44598
44598->54599
44598->54600
44598->54601
54601->64602
34596->44603
44603->54604
54604->64605
64605->74606
74606->84607
74606->84608
74606->84609
84609->94610
84609->94611
54604->64612
64612->74613
74613->84614
74613->84615
84615->94616
84615->94617
94617->104618
104618->114619
114619->124620
124620->134621
114619->124622
114619->124623
124623->134624
124623->134625
134625->144626
144626->154627
144626->154628
114619->124629
124629->134630
134630->144631
144631->154632
154632->164633
134630->144634
134630->144635
144635->154636
134630->144637
144637->154638
154638->164639
154638->164640
154638->164641
154638->164642
164642->174643
174643->184644
184644->194645
194645->204646
194645->204647
184644->194648
194648->204649
204649->214650
194648->204651
204651->214652
174643->184653
184653->194654
194654->204655
204655->214656
204655->214657
214657->224658
54604->64659
64659->74660
74660->84661
74660->84662
24291->34663
34663->44664
34663->44665
44665->54666
44665->54667
44665->54668
54668->64669
34663->44670
44670->54671
54671->64672
64672->74673
74673->84674
84674->94675
84674->94676
74673->84677
84677->94678
84677->94679
94679->104680
104680->114681
114681->124682
54671->64683
64683->74684
74684->84685
74684->84686
84686->94687
84686->94688
94688->104689
104689->114690
114690->124691
124691->134692
134692->144693
144693->154694
154694->164695
134692->144696
114690->124697
54671->64698
64698->74699
74699->84700
64698->74701
74701->84702
84702->94703
94703->104704
104704->114705
104704->114706
114706->124707
114706->124708
124708->134709
84702->94710
94710->104711
104711->114712
114712->124713
114712->124714
104711->114715
114715->124716
114715->124717
124717->134718
124717->134719
84702->94720
94720->104721
104721->114722
104721->114723
114723->124724
114723->124725
124725->134726
134726->144727
134726->144728
124725->134729
134729->144730
144730->154731
154731->164732
154731->164733
134729->144734
84702->94735
94735->104736
104736->114737
104736->114738
114738->124739
114738->124740
124740->134741
134741->144742
134741->144743
124740->134744
134744->144745
144745->154746
154746->164747
154746->164748
134744->144749
84702->94750
94750->104751
104751->114752
104751->114753
114753->124754
114753->124755
124755->134756
124755->134757
134757->144758
134757->144759
84702->94760
94760->104761
104761->114762
114762->124763
114762->124764
104761->114765
114765->124766
114765->124767
124767->134768
124767->134769
134769->144770
134769->144771
84702->94772
94772->104773
104773->114774
114774->124775
114774->124776
104773->114777
114777->124778
124778->134779
134779->144780
144780->154781
134779->144782
124778->134783
134783->144784
144784->154785
134783->144786
94772->104787
104787->114788
114788->124789
124789->134790
134790->144791
144791->154792
134790->144793
114788->124794
84702->94795
94795->104796
104796->114797
104796->114798
84702->94799
94799->104800
104800->114801
54671->64802
64802->74803
74803->84804
24291->34805
34805->44806
34805->44807
44807->54808
44807->54809
44807->54810
54810->64811
34805->44812
44812->54813
54813->64814
64814->74815
74815->84816
84816->94817
94817->104818
74815->84819
84819->94820
84819->94821
94821->104822
104822->114823
54813->64824
64824->74825
74825->84826
84826->94827
84826->94828
74825->84829
84829->94830
84829->94831
94831->104832
104832->114833
114833->124834
54813->64835
64835->74836
74836->84837
64835->74838
74838->84839
84839->94840
94840->104841
104841->114842
104841->114843
114843->124844
114843->124845
124845->134846
84839->94847
94847->104848
104848->114849
114849->124850
114849->124851
104848->114852
114852->124853
114852->124854
124854->134855
134855->144856
144856->154857
144856->154858
134855->144859
124854->134860
134860->144861
84839->94862
94862->104863
104863->114864
114864->124865
114864->124866
104863->114867
114867->124868
124868->134869
94862->104870
104870->114871
114871->124872
124872->134873
124872->134874
134874->144875
134874->144876
54813->64877
64877->74878
74878->84879
74878->84880
84880->94881
84880->94882
94882->104883
94882->104884
104884->114885
114885->124886
54813->64887
64887->74888
74888->84889
74888->84890
84890->94891
94891->104892
104892->114893
104892->114894
64887->74895
64887->74896
74896->84897
64887->74898
74898->84899
84899->94900
94900->104901
104901->114902
104901->114903
114903->124904
114903->124905
124905->134906
84899->94907
94907->104908
104908->114909
104908->114910
114910->124911
114910->124912
124912->134913
134913->144914
124912->134915
134915->144916
84899->94917
94917->104918
104918->114919
114919->124920
124920->134921
134921->144922
124920->134923
114919->124924
124924->134925
124924->134926
104918->114927
114927->124928
114927->124929
94917->104930
104930->114931
114931->124932
124932->134933
134933->144934
144934->154935
144934->154936
134933->144937
144937->154938
144937->154939
154939->164940
154939->164941
114931->124942
124942->134943
134943->144944
144944->154945
144944->154946
134943->144947
144947->154948
154948->164949
164949->174950
174950->184951
174950->184952
164949->174953
174953->184954
174953->184955
154948->164956
164956->174957
174957->184958
164956->174959
124942->134960
134960->144961
144961->154962
154962->164963
164963->174964
174964->184965
164963->174966
144961->154967
154967->164968
164968->174969
174969->184970
164968->174971
54813->64972
64972->74973
74973->84974
74973->84975
84975->94976
94976->104977
-10->04978
04978->14979
14979->24980
24980->34981
34981->44982
44982->54983
54983->64984
04978->14985
14985->24986
24986->34987
34987->44988
44988->54989
54989->64990
64990->74991
04978->14992
14992->24993
24993->34994
34994->44995
04978->14996
14996->24997
24997->34998
34998->44999
04978->15000
15000->25001
25001->35002
35002->45003
04978->15004
15004->25005
25005->35006
35006->45007
04978->15008
15008->25009
25009->35010
04978->15011
15011->25012
25012->35013
35013->45014
45014->55015
04978->15016
15016->25017
15016->25018
25018->35019
15016->25020
25020->35021
35021->45022
35021->45023
35021->45024
45024->55025
25020->35026
35026->45027
35026->45028
35026->45029
45029->55030
25020->35031
35031->45032
35031->45033
45033->55034
25020->35035
35035->45036
45036->55037
45036->55038
35035->45039
25020->35040
35040->45041
35040->45042
45042->55043
45042->55044
35040->45045
25020->35046
35046->45047
35046->45048
45048->55049
45048->55050
35046->45051
25020->35052
35052->45053
35052->45054
35052->45055
25020->35056
35056->45057
35056->45058
45058->55059
35056->45060
25020->35061
35061->45062
35061->45063
45063->55064
45063->55065
55065->65066
65066->75067
75067->85068
85068->95069
85068->95070
55065->65071
35061->45072
45072->55073
55073->65074
65074->75075
65074->75076
25020->35077
35077->45078
35077->45079
45079->55080
55080->65081
65081->75082
75082->85083
85083->95084
45079->55085
55085->65086
65086->75087
65086->75088
35077->45089
45089->55090
55090->65091
65091->75092
75092->85093
75092->85094
85094->95095
85094->95096
55090->65097
65097->75098
75098->85099
75098->85100
85100->95101
85100->95102
55090->65103
65103->75104
75104->85105
85105->95106
95106->105107
105107->115108
115108->125109
75104->85110
85110->95111
85110->95112
95112->105113
105113->115114
115114->125115
125115->135116
55090->65117
65117->75118
75118->85119
75118->85120
85120->95121
85120->95122
65117->75123
75123->85124
75123->85125
85125->95126
65117->75127
75127->85128
65117->75129
75129->85130
85130->95131
95131->105132
105132->115133
105132->115134
105132->115135
115135->125136
115135->125137
125137->135138
125137->135139
135139->145140
135139->145141
85130->95142
95142->105143
105143->115144
105143->115145
115145->125146
115145->125147
115145->125148
85130->95149
95149->105150
105150->115151
55090->65152
65152->75153
25020->35154
35154->45155
35154->45156
45156->55157
45156->55158
55158->65159
65159->75160
75160->85161
75160->85162
65159->75163
75163->85164
85164->95165
95165->105166
75163->85167
35154->45168
45168->55169
55169->65170
65170->75171
75171->85172
75171->85173
85173->95174
85173->95175
55169->65176
65176->75177
75177->85178
75177->85179
85179->95180
85179->95181
55169->65182
65182->75183
75183->85184
75183->85185
85185->95186
85185->95187
65182->75188
75188->85189
75188->85190
85190->95191
65182->75192
75192->85193
65182->75194
75194->85195
85195->95196
95196->105197
105197->115198
105197->115199
105197->115200
115200->125201
115200->125202
125202->135203
125202->135204
135204->145205
135204->145206
85195->95207
95207->105208
105208->115209
115209->125210
115209->125211
105208->115212
115212->125213
115212->125214
125214->135215
125214->135216
85195->95217
95217->105218
105218->115219
105218->115220
95217->105221
105221->115222
115222->125223
115222->125224
115222->125225
115222->125226
125226->135227
135227->145228
145228->155229
145228->155230
155230->165231
165231->175232
165231->175233
175233->185234
175233->185235
155230->165236
155230->165237
165237->175238
165237->175239
85195->95240
95240->105241
105241->115242
25020->35243
35243->45244
35243->45245
45245->55246
45245->55247
55247->65248
65248->75249
75249->85250
85250->95251
85250->95252
75249->85253
65248->75254
75254->85255
85255->95256
95256->105257
75254->85258
35243->45259
45259->55260
55260->65261
65261->75262
75262->85263
75262->85264
85264->95265
85264->95266
55260->65267
65267->75268
75268->85269
75268->85270
85270->95271
85270->95272
55260->65273
65273->75274
65273->75275
65273->75276
65273->75277
75277->85278
85278->95279
95279->105280
105280->115281
105280->115282
105280->115283
115283->125284
115283->125285
125285->135286
125285->135287
85278->95288
95288->105289
105289->115290
115290->125291
115290->125292
105289->115293
115293->125294
115293->125295
125295->135296
125295->135297
85278->95298
95298->105299
105299->115300
105299->115301
95298->105302
105302->115303
115303->125304
115303->125305
115303->125306
115303->125307
125307->135308
135308->145309
145309->155310
145309->155311
155311->165312
165312->175313
165312->175314
175314->185315
175314->185316
155311->165317
155311->165318
165318->175319
165318->175320
85278->95321
95321->105322
105322->115323
25020->35324
35324->45325
35324->45326
45326->55327
45326->55328
55328->65329
65329->75330
75330->85331
85331->95332
85331->95333
75330->85334
65329->75335
75335->85336
85336->95337
95337->105338
75335->85339
35324->45340
45340->55341
55341->65342
65342->75343
75343->85344
75343->85345
85345->95346
85345->95347
55341->65348
65348->75349
75349->85350
75349->85351
85351->95352
85351->95353
55341->65354
65354->75355
65354->75356
65354->75357
65354->75358
75358->85359
85359->95360
95360->105361
105361->115362
105361->115363
105361->115364
115364->125365
115364->125366
125366->135367
125366->135368
85359->95369
95369->105370
105370->115371
115371->125372
115371->125373
105370->115374
115374->125375
115374->125376
125376->135377
125376->135378
85359->95379
95379->105380
105380->115381
105380->115382
95379->105383
105383->115384
115384->125385
115384->125386
115384->125387
115384->125388
125388->135389
135389->145390
145390->155391
145390->155392
155392->165393
165393->175394
165393->175395
175395->185396
175395->185397
155392->165398
155392->165399
165399->175400
165399->175401
155392->165402
85359->95403
95403->105404
105404->115405
25020->35406
35406->45407
35406->45408
45408->55409
45408->55410
55410->65411
65411->75412
65411->75413
45408->55414
55414->65415
35406->45416
45416->55417
55417->65418
65418->75419
75419->85420
75419->85421
55417->65422
65422->75423
75423->85424
75423->85425
85425->95426
85425->95427
65422->75428
75428->85429
75428->85430
65422->75431
75431->85432
65422->75433
75433->85434
85434->95435
95435->105436
105436->115437
105436->115438
115438->125439
115438->125440
85434->95441
95441->105442
105442->115443
105442->115444
115444->125445
115444->125446
85434->95447
95447->105448
105448->115449
105448->115450
115450->125451
115450->125452
85434->95453
95453->105454
105454->115455
105454->115456
115456->125457
125457->135458
115456->125459
125459->135460
125459->135461
135461->145462
135461->145463
85434->95464
95464->105465
105465->115466
105465->115467
95464->105468
105468->115469
115469->125470
125470->135471
125470->135472
95464->105473
105473->115474
115474->125475
125475->135476
135476->145477
135476->145478
145478->155479
115474->125480
125480->135481
125480->135482
125480->135483
125480->135484
135484->145485
145485->155486
155486->165487
155486->165488
55417->65489
65489->75490
75490->85491
75490->85492
85492->95493
55417->65494
65494->75495
65494->75496
65494->75497
65494->75498
75498->85499
85499->95500
95500->105501
95500->105502
25020->35503
35503->45504
35503->45505
45505->55506
45505->55507
55507->65508
65508->75509
65508->75510
45505->55511
55511->65512
35503->45513
45513->55514
55514->65515
65515->75516
75516->85517
75516->85518
55514->65519
65519->75520
75520->85521
75520->85522
55514->65523
65523->75524
75524->85525
75524->85526
55514->65527
65527->75528
75528->85529
75528->85530
55514->65531
65531->75532
75532->85533
75532->85534
25020->35535
35535->45536
35535->45537
45537->55538
45537->55539
55539->65540
65540->75541
75541->85542
75541->85543
65540->75544
75544->85545
85545->95546
85545->95547
75544->85548
45537->55549
55549->65550
65550->75551
65550->75552
35535->45553
45553->55554
55554->65555
65555->75556
75556->85557
75556->85558
75556->85559
85559->95560
95560->105561
95560->105562
85559->95563
95563->105564
55554->65565
65565->75566
75566->85567
75566->85568
75566->85569
85569->95570
95570->105571
95570->105572
85569->95573
95573->105574
55554->65575
65575->75576
75576->85577
75576->85578
75576->85579
85579->95580
95580->105581
95580->105582
85579->95583
95583->105584
55554->65585
65585->75586
75586->85587
75586->85588
75586->85589
85589->95590
95590->105591
95590->105592
85589->95593
95593->105594
55554->65595
65595->75596
75596->85597
75596->85598
75596->85599
85599->95600
95600->105601
95600->105602
85599->95603
95603->105604
55554->65605
65605->75606
75606->85607
75606->85608
75606->85609
25020->35610
35610->45611
35610->45612
45612->55613
45612->55614
55614->65615
65615->75616
75616->85617
75616->85618
65615->75619
75619->85620
85620->95621
85620->95622
75619->85623
35610->45624
45624->55625
55625->65626
65626->75627
75627->85628
75627->85629
65626->75630
75630->85631
55625->65632
65632->75633
75633->85634
75633->85635
75633->85636
85636->95637
55625->65638
65638->75639
75639->85640
75639->85641
75639->85642
85642->95643
85642->95644
95644->105645
105645->115646
105645->115647
55625->65648
65648->75649
75649->85650
75649->85651
75649->85652
85652->95653
85652->95654
95654->105655
105655->115656
105655->115657
55625->65658
65658->75659
75659->85660
75659->85661
75659->85662
85662->95663
85662->95664
95664->105665
105665->115666
105665->115667
55625->65668
65668->75669
75669->85670
75669->85671
75669->85672
85672->95673
85672->95674
95674->105675
105675->115676
105675->115677
85672->95678
55625->65679
65679->75680
75680->85681
75680->85682
55625->65683
65683->75684
75684->85685
75684->85686
85686->95687
85686->95688
65683->75689
75689->85690
75689->85691
65683->75692
75692->85693
65683->75694
75694->85695
85695->95696
95696->105697
105697->115698
115698->125699
115698->125700
105697->115701
105697->115702
115702->125703
85695->95704
95704->105705
105705->115706
115706->125707
115706->125708
105705->115709
105705->115710
115710->125711
85695->95712
95712->105713
105713->115714
115714->125715
115714->125716
105713->115717
105713->115718
115718->125719
85695->95720
95720->105721
105721->115722
105721->115723
105721->115724
115724->125725
85695->95726
95726->105727
105727->115728
105727->115729
95726->105730
85695->95731
95731->105732
105732->115733
115733->125734
115733->125735
105732->115736
105732->115737
115737->125738
115737->125739
125739->135740
85695->95741
95741->105742
105742->115743
105742->115744
115744->125745
115744->125746
95741->105747
105747->115748
105747->115749
115749->125750
125750->135751
125750->135752
115749->125753
95741->105754
105754->115755
95741->105756
105756->115757
115757->125758
125758->135759
135759->145760
135759->145761
135759->145762
135759->145763
125758->135764
125758->135765
135765->145766
55625->65767
65767->75768
75768->85769
75768->85770
75768->85771
85771->95772
55625->65773
65773->75774
75774->85775
75774->85776
75774->85777
85777->95778
85777->95779
95779->105780
55625->65781
65781->75782
75782->85783
75782->85784
85784->95785
85784->95786
65781->75787
75787->85788
75787->85789
85789->95790
65781->75791
75791->85792
65781->75793
75793->85794
85794->95795
95795->105796
105796->115797
105796->115798
95795->105799
95795->105800
105800->115801
55625->65802
65802->75803
75803->85804
75803->85805
75803->85806
55625->65807
65807->75808
25020->35809
35809->45810
35809->45811
45811->55812
45811->55813
55813->65814
65814->75815
65814->75816
35809->45817
45817->55818
55818->65819
65819->75820
75820->85821
75820->85822
85822->95823
85822->95824
95824->105825
95824->105826
55818->65827
65827->75828
75828->85829
75828->85830
65827->75831
75831->85832
85832->95833
95833->105834
95833->105835
55818->65836
65836->75837
25020->35838
35838->45839
35838->45840
45840->55841
45840->55842
55842->65843
65843->75844
75844->85845
75844->85846
65843->75847
75847->85848
75847->85849
35838->45850
45850->55851
55851->65852
65852->75853
75853->85854
75853->85855
85855->95856
85855->95857
95857->105858
95857->105859
55851->65860
65860->75861
75861->85862
75861->85863
65860->75864
75864->85865
85865->95866
95866->105867
105867->115868
115868->125869
115868->125870
105867->115871
105867->115872
85865->95873
95873->105874
55851->65875
65875->75876
25020->35877
35877->45878
35877->45879
45879->55880
45879->55881
55881->65882
65882->75883
65882->75884
35877->45885
45885->55886
55886->65887
65887->75888
65887->75889
25020->35890
35890->45891
35890->45892
45892->55893
35890->45894
45894->55895
55895->65896
65896->75897
65896->75898
75898->85899
85899->95900
95900->105901
105901->115902
105901->115903
95900->105904
105904->115905
105904->115906
85899->95907
95907->105908
95907->105909
55895->65910
25020->35911
35911->45912
35911->45913
45913->55914
35911->45915
45915->55916
55916->65917
65917->75918
65917->75919
75919->85920
85920->95921
95921->105922
105922->115923
105922->115924
95921->105925
105925->115926
105925->115927
95921->105928
105928->115929
105928->115930
85920->95931
95931->105932
95931->105933
55916->65934
25020->35935
35935->45936
35935->45937
45937->55938
35935->45939
45939->55940
55940->65941
55940->65942
55940->65943
55940->65944
45939->55945
55945->65946
55945->65947
55945->65948
55945->65949
45939->55950
55950->65951
55950->65952
55950->65953
55950->65954
45939->55955
55955->65956
55955->65957
65957->75958
65957->75959
75959->85960
85960->95961
95961->105962
95961->105963
85960->95964
95964->105965
95964->105966
75959->85967
85967->95968
85967->95969
55955->65970
65970->75971
75971->85972
85972->95973
95973->105974
105974->115975
95973->105976
95973->105977
75971->85978
85978->95979
95979->105980
105980->115981
95979->105982
95979->105983
75971->85984
85984->95985
95985->105986
105986->115987
95985->105988
95985->105989
45939->55990
55990->65991
65991->75992
55990->65993
55990->65994
65994->75995
65994->75996
55990->65997
65997->75998
75998->85999
85999->96000
85999->96001
96001->106002
96001->106003
96001->106004
96001->106005
25020->36006
36006->46007
36006->46008
46008->56009
46008->56010
56010->66011
66011->76012
76012->86013
76012->86014
66011->76015
76015->86016
76015->86017
36006->46018
46018->56019
56019->66020
66020->76021
76021->86022
76021->86023
86023->96024
86023->96025
96025->106026
96025->106027
106027->116028
106027->116029
56019->66030
66030->76031
76031->86032
76031->86033
86033->96034
66030->76035
76035->86036
86036->96037
96037->106038
106038->116039
106038->116040
106038->116041
116041->126042
116041->126043
86036->96044
96044->106045
106045->116046
106045->116047
106045->116048
116048->126049
116048->126050
126050->136051
126050->136052
56019->66053
66053->76054
25020->36055
36055->46056
36055->46057
46057->56058
46057->56059
56059->66060
66060->76061
76061->86062
86062->96063
86062->96064
76061->86065
86065->96066
86065->96067
66060->76068
76068->86069
86069->96070
96070->106071
106071->116072
116072->126073
76068->86074
36055->46075
46075->56076
56076->66077
66077->76078
76078->86079
86079->96080
86079->96081
76078->86082
86082->96083
86082->96084
96084->106085
96084->106086
56076->66087
66087->76088
76088->86089
76088->86090
66087->76091
76091->86092
86092->96093
86092->96094
86092->96095
86092->96096
96096->106097
106097->116098
116098->126099
116098->126100
126100->136101
136101->146102
126100->136103
136103->146104
146104->156105
146104->156106
156106->166107
156106->166108
136103->146109
136103->146110
146110->156111
146110->156112
25020->36113
36113->46114
36113->46115
46115->56116
46115->56117
56117->66118
66118->76119
76119->86120
76119->86121
66118->76122
76122->86123
76122->86124
36113->46125
46125->56126
56126->66127
66127->76128
76128->86129
76128->86130
86130->96131
86130->96132
56126->66133
66133->76134
76134->86135
76134->86136
56126->66137
66137->76138
76138->86139
76138->86140
76138->86141
86141->96142
96142->106143
96142->106144
86141->96145
56126->66146
66146->76147
76147->86148
76147->86149
86149->96150
86149->96151
66146->76152
76152->86153
86153->96154
86153->96155
86153->96156
96156->106157
96156->106158
66146->76159
76159->86160
86160->96161
56126->66162
66162->76163
76163->86164
76163->86165
76163->86166
56126->66167
66167->76168
25020->36169
36169->46170
36169->46171
46171->56172
46171->56173
56173->66174
66174->76175
76175->86176
76175->86177
66174->76178
76178->86179
76178->86180
36169->46181
46181->56182
56182->66183
66183->76184
76184->86185
76184->86186
86186->96187
86186->96188
96188->106189
96188->106190
56182->66191
66191->76192
76192->86193
76192->86194
56182->66195
66195->76196
76196->86197
76196->86198
76196->86199
86199->96200
96200->106201
96200->106202
86199->96203
56182->66204
66204->76205
76205->86206
76205->86207
86207->96208
86207->96209
66204->76210
76210->86211
86211->96212
96212->106213
106213->116214
106213->116215
96212->106216
106216->116217
86211->96218
96218->106219
106219->116220
56182->66221
66221->76222
25020->36223
36223->46224
36223->46225
46225->56226
46225->56227
56227->66228
66228->76229
76229->86230
86230->96231
96231->106232
96231->106233
66228->76234
36223->46235
46235->56236
56236->66237
66237->76238
66237->76239
25020->36240
36240->46241
36240->46242
46242->56243
46242->56244
56244->66245
66245->76246
76246->86247
76246->86248
66245->76249
76249->86250
86250->96251
96251->106252
106252->116253
106252->116254
116254->126255
126255->136256
136256->146257
136256->146258
76249->86259
36240->46260
46260->56261
56261->66262
66262->76263
76263->86264
66262->76265
76265->86266
86266->96267
96267->106268
106268->116269
106268->116270
116270->126271
116270->126272
126272->136273
136273->146274
146274->156275
156275->166276
166276->176277
156275->166278
86266->96279
96279->106280
106280->116281
106280->116282
116282->126283
86266->96284
96284->106285
106285->116286
106285->116287
116287->126288
126288->136289
136289->146290
136289->146291
116287->126292
126292->136293
126292->136294
56261->66295
66295->76296
76296->86297
76296->86298
86298->96299
96299->106300
106300->116301
106300->116302
66295->76303
66295->76304
76304->86305
86305->96306
76304->86307
66295->76308
76308->86309
86309->96310
96310->106311
96310->106312
106312->116313
116313->126314
126314->136315
126314->136316
106312->116317
116317->126318
126318->136319
136319->146320
126318->136321
116317->126322
126322->136323
56261->66324
66324->76325
76325->86326
25020->36327
36327->46328
36327->46329
46329->56330
46329->56331
56331->66332
66332->76333
66332->76334
36327->46335
46335->56336
56336->66337
66337->76338
66337->76339
76339->86340
76339->86341
76339->86342
76339->86343
25020->36344
36344->46345
36344->46346
46346->56347
46346->56348
56348->66349
66349->76350
76350->86351
86351->96352
86351->96353
76350->86354
86354->96355
86354->96356
76350->86357
86357->96358
86357->96359
66349->76360
76360->86361
76360->86362
36344->46363
46363->56364
56364->66365
66365->76366
76366->86367
76366->86368
66365->76369
76369->86370
86370->96371
86370->96372
86370->96373
96373->106374
56364->66375
66375->76376
76376->86377
76376->86378
66375->76379
76379->86380
86380->96381
86380->96382
86380->96383
56364->66384
66384->76385
76385->86386
76385->86387
86387->96388
86387->96389
96389->106390
56364->66391
66391->76392
76392->86393
86393->96394
86393->96395
76392->86396
86396->96397
86396->96398
96398->106399
56364->66400
66400->76401
76401->86402
76401->86403
86403->96404
86403->96405
96405->106406
96405->106407
56364->66408
66408->76409
76409->86410
76409->86411
56364->66412
66412->76413
76413->86414
76413->86415
86415->96416
86415->96417
66412->76418
76418->86419
76418->86420
66412->76421
76421->86422
66412->76423
76423->86424
86424->96425
96425->106426
106426->116427
106426->116428
106426->116429
116429->126430
126430->136431
126430->136432
136432->146433
136432->146434
146434->156435
156435->166436
156435->166437
116429->126438
86424->96439
96439->106440
106440->116441
106440->116442
116442->126443
116442->126444
96439->106445
106445->116446
116446->126447
116446->126448
116446->126449
126449->136450
126449->136451
96439->106452
106452->116453
56364->66454
66454->76455
76455->86456
76455->86457
76455->86458
56364->66459
66459->76460
76460->86461
76460->86462
86462->96463
86462->96464
96464->106465
96464->106466
56364->66467
66467->76468
76468->86469
86469->96470
86469->96471
96471->106472
96471->106473
76468->86474
86474->96475
86474->96476
66467->76477
76477->86478
86478->96479
96479->106480
96479->106481
96479->106482
106482->116483
116483->126484
106482->116485
56364->66486
66486->76487
25020->36488
36488->46489
36488->46490
46490->56491
46490->56492
56492->66493
66493->76494
76494->86495
86495->96496
96496->106497
96496->106498
86495->96499
76494->86500
86500->96501
86500->96502
76494->86503
86503->96504
86503->96505
66493->76506
76506->86507
76506->86508
36488->46509
46509->56510
56510->66511
66511->76512
76512->86513
76512->86514
86514->96515
86514->96516
96516->106517
56510->66518
66518->76519
76519->86520
76519->86521
86521->96522
86521->96523
96523->106524
96523->106525
56510->66526
66526->76527
76527->86528
76527->86529
56510->66530
66530->76531
76531->86532
76531->86533
86533->96534
86533->96535
66530->76536
76536->86537
76536->86538
66530->76539
76539->86540
66530->76541
76541->86542
86542->96543
96543->106544
106544->116545
106544->116546
106544->116547
116547->126548
126548->136549
126548->136550
136550->146551
136550->146552
146552->156553
156553->166554
156553->166555
116547->126556
86542->96557
96557->106558
106558->116559
106558->116560
116560->126561
116560->126562
96557->106563
106563->116564
116564->126565
116564->126566
116564->126567
126567->136568
126567->136569
96557->106570
106570->116571
56510->66572
66572->76573
76573->86574
76573->86575
76573->86576
56510->66577
66577->76578
76578->86579
76578->86580
86580->96581
86580->96582
96582->106583
96582->106584
56510->66585
66585->76586
76586->86587
86587->96588
86587->96589
96589->106590
96589->106591
76586->86592
86592->96593
86592->96594
66585->76595
76595->86596
86596->96597
96597->106598
96597->106599
96597->106600
106600->116601
116601->126602
106600->116603
56510->66604
66604->76605
25020->36606
36606->46607
36606->46608
36606->46609
46609->56610
56610->66611
66611->76612
76612->86613
86613->96614
86613->96615
56610->66616
66616->76617
66616->76618
76618->86619
86619->96620
96620->106621
96620->106622
46609->56623
56623->66624
56623->66625
66625->76626
66625->76627
76627->86628
86628->96629
96629->106630
96629->106631
86628->96632
96632->106633
96632->106634
56623->66635
66635->76636
76636->86637
86637->96638
96638->106639
96638->106640
106640->116641
106640->116642
116642->126643
116642->126644
76636->86645
86645->96646
96646->106647
96646->106648
86645->96649
96649->106650
106650->116651
116651->126652
116651->126653
116651->126654
76636->86655
86655->96656
96656->106657
96656->106658
96656->106659
106659->116660
106659->116661
116661->126662
116661->126663
126663->136664
126663->136665
76636->86666
86666->96667
96667->106668
96667->106669
106669->116670
106669->116671
46609->56672
56672->66673
66673->76674
56672->66675
56672->66676
66676->76677
66676->76678
56672->66679
66679->76680
76680->86681
86681->96682
96682->106683
96682->106684
106684->116685
106684->116686
76680->86687
86687->96688
96688->106689
96688->106690
106690->116691
116691->126692
126692->136693
126692->136694
86687->96695
86687->96696
96696->106697
86687->96698
96698->106699
106699->116700
116700->126701
126701->136702
126701->136703
136703->146704
136703->146705
146705->156706
106699->116707
116707->126708
126708->136709
126708->136710
136710->146711
136710->146712
146712->156713
106699->116714
116714->126715
126715->136716
126715->136717
126715->136718
136718->146719
146719->156720
156720->166721
166721->176722
166721->176723
176723->186724
176723->186725
156720->166726
146719->156727
136718->146728
76680->86729
86729->96730
46609->56731
56731->66732
56731->66733
66733->76734
66733->76735
56731->66736
66736->76737
76737->86738
86738->96739
96739->106740
86738->96741
25020->36742
36742->46743
36742->46744
46744->56745
46744->56746
36742->46747
46747->56748
56748->66749
66749->76750
76750->86751
76750->86752
66749->76753
66749->76754
76754->86755
25020->36756
36756->46757
36756->46758
46758->56759
56759->66760
56759->66761
56759->66762
66762->76763
66762->76764
46758->56765
56765->66766
56765->66767
56765->66768
66768->76769
46758->56770
56770->66771
56770->66772
56770->66773
46758->56774
56774->66775
56774->66776
56774->66777
46758->56778
56778->66779
56778->66780
56778->66781
46758->56782
56782->66783
56782->66784
56782->66785
46758->56786
56786->66787
66787->76788
66787->76789
56786->66790
56786->66791
66791->76792
66791->76793
76793->86794
86794->96795
96795->106796
106796->116797
116797->126798
116797->126799
86794->96800
56786->66801
66801->76802
76802->86803
86803->96804
96804->106805
96804->106806
96804->106807
106807->116808
116808->126809
116808->126810
106807->116811
116811->126812
126812->136813
116811->126814
76802->86815
86815->96816
96816->106817
96816->106818
96816->106819
106819->116820
106819->116821
116821->126822
126822->136823
76802->86824
86824->96825
96825->106826
106826->116827
116827->126828
96825->106829
106829->116830
106829->116831
116831->126832
76802->86833
86833->96834
96834->106835
96834->106836
76802->86837
86837->96838
96838->106839
96838->106840
76802->86841
86841->96842
96842->106843
96842->106844
96842->106845
76802->86846
86846->96847
96847->106848
76802->86849
86849->96850
96850->106851
96850->106852
96850->106853
76802->86854
86854->96855
96855->106856
46758->56857
56857->66858
56857->66859
66859->76860
66859->76861
76861->86862
86862->96863
96863->106864
96863->106865
86862->96866
96866->106867
96866->106868
56857->66869
66869->76870
76870->86871
86871->96872
96872->106873
96872->106874
106874->116875
106874->116876
116876->126877
116876->126878
76870->86879
86879->96880
86879->96881
86879->96882
96882->106883
86879->96884
96884->106885
106885->116886
116886->126887
116886->126888
116886->126889
126889->136890
126889->136891
76870->86892
86892->96893
96893->106894
96893->106895
76870->86896
86896->96897
96897->106898
106898->116899
106898->116900
96897->106901
96897->106902
106902->116903
46758->56904
56904->66905
56904->66906
66906->76907
66906->76908
76908->86909
86909->96910
96910->106911
106911->116912
86909->96913
56904->66914
66914->76915
76915->86916
86916->96917
96917->106918
96917->106919
106919->116920
106919->116921
76915->86922
86922->96923
86922->96924
86922->96925
86922->96926
96926->106927
106927->116928
116928->126929
116928->126930
126930->136931
126930->136932
136932->146933
136932->146934
46758->56935
56935->66936
56935->66937
66937->76938
66937->76939
56935->66940
66940->76941
76941->86942
86942->96943
96943->106944
96943->106945
96943->106946
106946->116947
106946->116948
116948->126949
126949->136950
126949->136951
76941->86952
86952->96953
96953->106954
106954->116955
106954->116956
96953->106957
96953->106958
106958->116959
106958->116960
76941->86961
86961->96962
96962->106963
96962->106964
96962->106965
106965->116966
106965->116967
116967->126968
126968->136969
126968->136970
106965->116971
76941->86972
86972->96973
96973->106974
106974->116975
116975->126976
96973->106977
106977->116978
106977->116979
116979->126980
126980->136981
76941->86982
86982->96983
86982->96984
86982->96985
96985->106986
96985->106987
96985->106988
86982->96989
96989->106990
106990->116991
116991->126992
126992->136993
126992->136994
136994->146995
146995->156996
146995->156997
136994->146998
106990->116999
116999->127000
127000->137001
127000->137002
106990->117003
117003->127004
127004->137005
127004->137006
76941->87007
87007->97008
97008->107009
107009->117010
87007->97011
97011->107012
107012->117013
117013->127014
127014->137015
127014->137016
137016->147017
137016->147018
147018->157019
107012->117020
117020->127021
117020->127022
117020->127023
127023->137024
117020->127025
127025->137026
137026->147027
147027->157028
157028->167029
157028->167030
167030->177031
167030->177032
177032->187033
177032->187034
137026->147035
147035->157036
157036->167037
157036->167038
137026->147039
147039->157040
157040->167041
157040->167042
167042->177043
167042->177044
177044->187045
137026->147046
147046->157047
157047->167048
167048->177049
167048->177050
157047->167051
147046->157052
157052->167053
167053->177054
177054->187055
177054->187056
177054->187057
187057->197058
137026->147059
147059->157060
157060->167061
157060->167062
167062->177063
167062->177064
177064->187065
177064->187066
137026->147067
147067->157068
157068->167069
157068->167070
167070->177071
167070->177072
137026->147073
147073->157074
157074->167075
157074->167076
167076->177077
137026->147078
147078->157079
157079->167080
157079->167081
46758->57082
57082->67083
57082->67084
67084->77085
67084->77086
77086->87087
87087->97088
87087->97089
57082->67090
67090->77091
77091->87092
87092->97093
97093->107094
107094->117095
117095->127096
97093->107097
107097->117098
107097->117099
117099->127100
77091->87101
87101->97102
97102->107103
107103->117104
107103->117105
97102->107106
107106->117107
117107->127108
107106->117109
87101->97110
77091->87111
87111->97112
97112->107113
97112->107114
107114->117115
117115->127116
107114->117117
117117->127118
117117->127119
127119->137120
137120->147121
77091->87122
87122->97123
97123->107124
107124->117125
117125->127126
97123->107127
107127->117128
107127->117129
117129->127130
77091->87131
87131->97132
97132->107133
97132->107134
107134->117135
107134->117136
87131->97137
97137->107138
97137->107139
107139->117140
87131->97141
97141->107142
87131->97143
97143->107144
107144->117145
117145->127146
127146->137147
127146->137148
117145->127149
117145->127150
127150->137151
77091->87152
87152->97153
97153->107154
107154->117155
117155->127156
127156->137157
107154->117158
117158->127159
97153->107160
97153->107161
46758->57162
57162->67163
57162->67164
67164->77165
67164->77166
77166->87167
87167->97168
97168->107169
107169->117170
87167->97171
57162->67172
67172->77173
77173->87174
87174->97175
97175->107176
97175->107177
97175->107178
77173->87179
87179->97180
97180->107181
97180->107182
97180->107183
107183->117184
77173->87185
87185->97186
97186->107187
97186->107188
107188->117189
107188->117190
77173->87191
87191->97192
97192->107193
107193->117194
107193->117195
97192->107196
97192->107197
77173->87198
87198->97199
97199->107200
97199->107201
97199->107202
77173->87203
87203->97204
97204->107205
97204->107206
107206->117207
107206->117208
117208->127209
117208->127210
77173->87211
87211->97212
97212->107213
107213->117214
117214->127215
127215->137216
127215->137217
137217->147218
147218->157219
157219->167220
157219->167221
97212->107222
107222->117223
107222->117224
117224->127225
127225->137226
137226->147227
137226->147228
147228->157229
157229->167230
167230->177231
167230->177232
117224->127233
127233->137234
137234->147235
127233->137236
127233->137237
77173->87238
87238->97239
97239->107240
97239->107241
107241->117242
107241->117243
77173->87244
87244->97245
97245->107246
97245->107247
46758->57248
57248->67249
57248->67250
67250->77251
67250->77252
77252->87253
87253->97254
87253->97255
57248->67256
67256->77257
77257->87258
87258->97259
97259->107260
107260->117261
107260->117262
97259->107263
107263->117264
107263->117265
117265->127266
117265->127267
127267->137268
77257->87269
87269->97270
97270->107271
107271->117272
107271->117273
97270->107274
107274->117275
107274->117276
117276->127277
117276->127278
127278->137279
77257->87280
87280->97281
97281->107282
97281->107283
107283->117284
117284->127285
107283->117286
117286->127287
117286->127288
127288->137289
77257->87290
87290->97291
97291->107292
97291->107293
87290->97294
97294->107295
107295->117296
117296->127297
127297->137298
127297->137299
137299->147300
137299->147301
137299->147302
137299->147303
137299->147304
107295->117305
117305->127306
127306->137307
127306->137308
137308->147309
137308->147310
137308->147311
137308->147312
137308->147313
107295->117314
117314->127315
127315->137316
127315->137317
137317->147318
137317->147319
137317->147320
137317->147321
137317->147322
77257->87323
87323->97324
97324->107325
97324->107326
97324->107327
77257->87328
87328->97329
97329->107330
97329->107331
97329->107332
77257->87333
87333->97334
97334->107335
97334->107336
97334->107337
77257->87338
87338->97339
97339->107340
97339->107341
97339->107342
46758->57343
57343->67344
57343->67345
67345->77346
67345->77347
77347->87348
87348->97349
97349->107350
107350->117351
117351->127352
117351->127353
127353->137354
137354->147355
147355->157356
147355->157357
87348->97358
57343->67359
67359->77360
77360->87361
87361->97362
97362->107363
97362->107364
107364->117365
107364->117366
77360->87367
87367->97368
97368->107369
97368->107370
107370->117371
107370->117372
117372->127373
127373->137374
127373->137375
137375->147376
147376->157377
157377->167378
167378->177379
167378->177380
157377->167381
147376->157382
137375->147383
117372->127384
77360->87385
87385->97386
97386->107387
97386->107388
107388->117389
107388->117390
77360->87391
87391->97392
97392->107393
97392->107394
107394->117395
107394->117396
77360->87397
87397->97398
97398->107399
97398->107400
87397->97401
97401->107402
107402->117403
107402->117404
117404->127405
117404->127406
77360->87407
87407->97408
97408->107409
97408->107410
107410->117411
117411->127412
127412->137413
137413->147414
117411->127415
127415->137416
137416->147417
137416->147418
127415->137419
137419->147420
147420->157421
147420->157422
157422->167423
157422->167424
117411->127425
127425->137426
137426->147427
147427->157428
147427->157429
137426->147430
127425->137431
137431->147432
147432->157433
157433->167434
167434->177435
147432->157436
127425->137437
137437->147438
147438->157439
147438->157440
137437->147441
147441->157442
157442->167443
167443->177444
177444->187445
177444->187446
177444->187447
157442->167448
167448->177449
177449->187450
177449->187451
177449->187452
117411->127453
127453->137454
137454->147455
137454->147456
137454->147457
147457->157458
147457->157459
157459->167460
167460->177461
167460->177462
157459->167463
117411->127464
127464->137465
137465->147466
137465->147467
147467->157468
157468->167469
157468->167470
167470->177471
177471->187472
177471->187473
187473->197474
197474->207475
187473->197476
167470->177477
127464->137478
137478->147479
147479->157480
157480->167481
167481->177482
167481->177483
177483->187484
177483->187485
187485->197486
197486->207487
207487->217488
207487->217489
217489->227490
227490->237491
227490->237492
217489->227493
227493->237494
237494->247495
237494->247496
187485->197497
187485->197498
197498->207499
207499->217500
207499->217501
197498->207502
207502->217503
217503->227504
217503->227505
147479->157506
157506->167507
167507->177508
167507->177509
177509->187510
177509->187511
187511->197512
197512->207513
197512->207514
117411->127515
127515->137516
137516->147517
137516->147518
127515->137519
117411->127520
127520->137521
137521->147522
137521->147523
147523->157524
147523->157525
127520->137526
137526->147527
137526->147528
147528->157529
127520->137530
137530->147531
127520->137532
137532->147533
147533->157534
157534->167535
157534->167536
167536->177537
167536->177538
177538->187539
187539->197540
187539->197541
177538->187542
147533->157543
137532->147544
117411->127545
77360->87546
87546->97547
97547->107548
107548->117549
117549->127550
117549->127551
107548->117552
117552->127553
127553->137554
137554->147555
137554->147556
127553->137557
97547->107558
87546->97559
97559->107560
107560->117561
107560->117562
107560->117563
77360->87564
87564->97565
97565->107566
107566->117567
107566->117568
97565->107569
97565->107570
77360->87571
87571->97572
97572->107573
97572->107574
97572->107575
107575->117576
117576->127577
127577->137578
127577->137579
137579->147580
147580->157581
147580->157582
157582->167583
167583->177584
167583->177585
177585->187586
187586->197587
177585->187588
157582->167589
137579->147590
107575->117591
107575->117592
117592->127593
127593->137594
127593->137595
137595->147596
147596->157597
147596->157598
157598->167599
167599->177600
157598->167601
137595->147602
117592->127603
77360->87604
87604->97605
97605->107606
97605->107607
107607->117608
117608->127609
127609->137610
127609->137611
87604->97612
87604->97613
87604->97614
97614->107615
107615->117616
117616->127617
127617->137618
127617->137619
137619->147620
137619->147621
147621->157622
117616->127623
117616->127624
77360->87625
87625->97626
97626->107627
97626->107628
107628->117629
117629->127630
127630->137631
127630->137632
87625->97633
87625->97634
87625->97635
97635->107636
107636->117637
117637->127638
127638->137639
137639->147640
147640->157641
157641->167642
157641->167643
167643->177644
177644->187645
187645->197646
187645->197647
127638->137648
137648->147649
137648->147650
147650->157651
157651->167652
167652->177653
167652->177654
177654->187655
187655->197656
197656->207657
197656->207658
147650->157659
157659->167660
167660->177661
177661->187662
167660->177663
167660->177664
167660->177665
157659->167666
107636->117667
117667->127668
127668->137669
137669->147670
137669->147671
147671->157672
157672->167673
147671->157674
127668->137675
117667->127676
127676->137677
137677->147678
147678->157679
157679->167680
167680->177681
167680->177682
177682->187683
177682->187684
187684->197685
157679->167686
157679->167687
167687->177688
177688->187689
187689->197690
197690->207691
207691->217692
197690->207693
177688->187694
137677->147695
147695->157696
157696->167697
117667->127698
127698->137699
137699->147700
147700->157701
157701->167702
157701->167703
167703->177704
167703->177705
177705->187706
177705->187707
137699->147708
147708->157709
157709->167710
167710->177711
167710->177712
177712->187713
177712->187714
187714->197715
157709->167716
157709->167717
107636->117718
117718->127719
127719->137720
137720->147721
127719->137722
137722->147723
137722->147724
147724->157725
77360->87726
87726->97727
46758->57728
57728->67729
57728->67730
67730->77731
67730->77732
57728->67733
67733->77734
77734->87735
87735->97736
97736->107737
97736->107738
107738->117739
117739->127740
107738->117741
117741->127742
117741->127743
127743->137744
137744->147745
137744->147746
77734->87747
87747->97748
97748->107749
97748->107750
107750->117751
107750->117752
107750->117753
107750->117754
107750->117755
77734->87756
87756->97757
97757->107758
97757->107759
97757->107760
77734->87761
87761->97762
97762->107763
97762->107764
107764->117765
117765->127766
107764->117767
117767->127768
117767->127769
127769->137770
137770->147771
137770->147772
77734->87773
87773->97774
97774->107775
97774->107776
107776->117777
107776->117778
107776->117779
107776->117780
107776->117781
77734->87782
87782->97783
97783->107784
97783->107785
97783->107786
-10->07787
07787->17788
17788->27789
27789->37790
37790->47791
47791->57792
57792->67793
07787->17794
17794->27795
27795->37796
37796->47797
47797->57798
57798->67799
67799->77800
07787->17801
17801->27802
27802->37803
37803->47804
47804->57805
57805->67806
67806->77807
07787->17808
17808->27809
27809->37810
37810->47811
47811->57812
57812->67813
67813->77814
07787->17815
17815->27816
27816->37817
37817->47818
47818->57819
57819->67820
07787->17821
17821->27822
27822->37823
37823->47824
47824->57825
57825->67826
07787->17827
17827->27828
27828->37829
37829->47830
47830->57831
57831->67832
67832->77833
77833->87834
07787->17835
17835->27836
27836->37837
37837->47838
47838->57839
57839->67840
07787->17841
17841->27842
27842->37843
37843->47844
47844->57845
57845->67846
67846->77847
07787->17848
17848->27849
27849->37850
37850->47851
47851->57852
57852->67853
07787->17854
17854->27855
27855->37856
37856->47857
47857->57858
57858->67859
07787->17860
17860->27861
27861->37862
37862->47863
07787->17864
17864->27865
27865->37866
07787->17867
17867->27868
17867->27869
27869->37870
17867->27871
27871->37872
37872->47873
47873->57874
57874->67875
67875->77876
67875->77877
37872->47878
27871->37879
37879->47880
47880->57881
37879->47882
37879->47883
47883->57884
57884->67885
67885->77886
47883->57887
57887->67888
67888->77889
77889->87890
77889->87891
67888->77892
37879->47893
47893->57894
57894->67895
67895->77896
77896->87897
77896->87898
67895->77899
77899->87900
87900->97901
97901->107902
107902->117903
107902->117904
87900->97905
97905->107906
107906->117907
57894->67908
67908->77909
77909->87910
77909->87911
87911->97912
87911->97913
77909->87914
87914->97915
87914->97916
97916->107917
97916->107918
107918->117919
117919->127920
57894->67921
67921->77922
77922->87923
77922->87924
87924->97925
87924->97926
57894->67927
67927->77928
77928->87929
77928->87930
87930->97931
87930->97932
77928->87933
87933->97934
87933->97935
97935->107936
107936->117937
97935->107938
107938->117939
107938->117940
117940->127941
127941->137942
97935->107943
57894->67944
67944->77945
77945->87946
77945->87947
87947->97948
87947->97949
97949->107950
107950->117951
117951->127952
117951->127953
97949->107954
107954->117955
117955->127956
127956->137957
117955->127958
117955->127959
127959->137960
127959->137961
137961->147962
147962->157963
157963->167964
167964->177965
167964->177966
157963->167967
167967->177968
167967->177969
147962->157970
157970->167971
167971->177972
167971->177973
157970->167974
117955->127975
127975->137976
137976->147977
147977->157978
157978->167979
157978->167980
167980->177981
167980->177982
177982->187983
177982->187984
137976->147985
147985->157986
157986->167987
157986->167988
167988->177989
167988->177990
147985->157991
157991->167992
167992->177993
177993->187994
187994->197995
197995->207996
197995->207997
187994->197998
187994->197999
167992->178000
178000->188001
188001->198002
178000->188003
188003->198004
198004->208005
208005->218006
218006->228007
218006->228008
208005->218009
208005->218010
218010->228011
228011->238012
218010->228013
57894->68014
68014->78015
78015->88016
88016->98017
98017->108018
78015->88019
88019->98020
88019->98021
98021->108022
108022->118023
57894->68024
68024->78025
78025->88026
68024->78027
78027->88028
88028->98029
98029->108030
98029->108031
108031->118032
108031->118033
88028->98034
98034->108035
98034->108036
108036->118037
88028->98038
98038->108039
108039->118040
118040->128041
128041->138042
128041->138043
118040->128044
108039->118045
118045->128046
128046->138047
138047->148048
148048->158049
148048->158050
158050->168051
158050->168052
168052->178053
168052->178054
128046->138055
138055->148056
148056->158057
148056->158058
158058->168059
138055->148060
148060->158061
138055->148062
148062->158063
158063->168064
168064->178065
178065->188066
178065->188067
168064->178068
158063->168069
128046->138070
138070->148071
148071->158072
158072->168073
168073->178074
148071->158075
158075->168076
158075->168077
168077->178078
168077->178079
178079->188080
178079->188081
178079->188082
128046->138083
138083->148084
138083->148085
138083->148086
138083->148087
148087->158088
158088->168089
168089->178090
178090->188091
188091->198092
168089->178093
178093->188094
178093->188095
158088->168096
168096->178097
178097->188098
188098->198099
198099->208100
208100->218101
208100->218102
198099->208103
198099->208104
208104->218105
218105->228106
178097->188107
188107->198108
198108->208109
208109->218110
208109->218111
198108->208112
198108->208113
208113->218114
178097->188115
188115->198116
198116->208117
198116->208118
198116->208119
208119->218120
208119->218121
128046->138122
138122->148123
148123->158124
148123->158125
148123->158126
108039->118127
118127->128128
128128->138129
138129->148130
57894->68131
68131->78132
78132->88133
78132->88134
88134->98135
88134->98136
68131->78137
78137->88138
78137->88139
88139->98140
68131->78141
78141->88142
88142->98143
98143->108144
108144->118145
108144->118146
118146->128147
118146->128148
128148->138149
138149->148150
148150->158151
158151->168152
158151->168153
158151->168154
168154->178155
168154->178156
138149->148157
148157->158158
158158->168159
148157->158160
158160->168161
168161->178162
178162->188163
188163->198164
188163->198165
178162->188166
168161->178167
178167->188168
168161->178169
178169->188170
178169->188171
148157->158172
88142->98173
98173->108174
108174->118175
118175->128176
108174->118177
108174->118178
88142->98179
98179->108180
108180->118181
108180->118182
88142->98183
98183->108184
108184->118185
108184->118186
108184->118187
118187->128188
118187->128189
57894->68190
68190->78191
27871->38192
38192->48193
38192->48194
48194->58195
38192->48196
48196->58197
48196->58198
58198->68199
68199->78200
78200->88201
88201->98202
78200->88203
78200->88204
58198->68205
68205->78206
78206->88207
88207->98208
78206->88209
78206->88210
27871->38211
38211->48212
38211->48213
48213->58214
48213->58215
58215->68216
68216->78217
78217->88218
88218->98219
88218->98220
98220->108221
98220->108222
58215->68223
38211->48224
48224->58225
48224->58226
58226->68227
68227->78228
78228->88229
78228->88230
78228->88231
88231->98232
98232->108233
108233->118234
108233->118235
58226->68236
68236->78237
78237->88238
78237->88239
58226->68240
68240->78241
78241->88242
78241->88243
27871->38244
38244->48245
48245->58246
38244->48247
38244->48248
48248->58249
48248->58250
58250->68251
68251->78252
68251->78253
38244->48254
48254->58255
58255->68256
68256->78257
27871->38258
38258->48259
38258->48260
48260->58261
58261->68262
68262->78263
78263->88264
78263->88265
48260->58266
38258->48267
48267->58268
58268->68269
27871->38270
38270->48271
38270->48272
48272->58273
48272->58274
58274->68275
68275->78276
78276->88277
88277->98278
98278->108279
98278->108280
68275->78281
38270->48282
48282->58283
58283->68284
68284->78285
78285->88286
68284->78287
68284->78288
27871->38289
38289->48290
38289->48291
48291->58292
48291->58293
58293->68294
68294->78295
68294->78296
38289->48297
48297->58298
58298->68299
68299->78300
78300->88301
78300->88302
78300->88303
88303->98304
98304->108305
108305->118306
108305->118307
58298->68308
68308->78309
78309->88310
88310->98311
98311->108312
108312->118313
108312->118314
118314->128315
118314->128316
78309->88317
88317->98318
88317->98319
58298->68320
68320->78321
78321->88322
88322->98323
98323->108324
98323->108325
98323->108326
108326->118327
108326->118328
68320->78329
78329->88330
88330->98331
88330->98332
78329->88333
88333->98334
98334->108335
108335->118336
118336->128337
118336->128338
128338->138339
128338->138340
138340->148341
138340->148342
98334->108343
108343->118344
58298->68345
68345->78346
78346->88347
88347->98348
88347->98349
78346->88350
88350->98351
98351->108352
68345->78353
78353->88354
88354->98355
98355->108356
98355->108357
58298->68358
68358->78359
-10->08360
08360->18361
18361->28362
28362->38363
38363->48364
48364->58365
08360->18366
18366->28367
28367->38368
38368->48369
48369->58370
58370->68371
68371->78372
78372->88373
08360->18374
18374->28375
28375->38376
38376->48377
48377->58378
58378->68379
68379->78380
78380->88381
08360->18382
18382->28383
28383->38384
38384->48385
48385->58386
58386->68387
68387->78388
08360->18389
18389->28390
28390->38391
38391->48392
48392->58393
58393->68394
68394->78395
08360->18396
18396->28397
28397->38398
38398->48399
48399->58400
58400->68401
68401->78402
08360->18403
18403->28404
28404->38405
38405->48406
08360->18407
18407->28408
28408->38409
08360->18410
18410->28411
18410->28412
28412->38413
18410->28414
28414->38415
38415->48416
38415->48417
48417->58418
48417->58419
48417->58420
58420->68421
38415->48422
48422->58423
58423->68424
68424->78425
78425->88426
78425->88427
88427->98428
88427->98429
58423->68430
68430->78431
78431->88432
78431->88433
58423->68434
68434->78435
78435->88436
78435->88437
58423->68438
68438->78439
78439->88440
78439->88441
58423->68442
68442->78443
78443->88444
78443->88445
58423->68446
68446->78447
78447->88448
88448->98449
98449->108450
78447->88451
88451->98452
88451->98453
98453->108454
98453->108455
58423->68456
68456->78457
78457->88458
88458->98459
78457->88460
28414->38461
38461->48462
38461->48463
48463->58464
48463->58465
48463->58466
58466->68467
38461->48468
48468->58469
58469->68470
68470->78471
78471->88472
88472->98473
98473->108474
108474->118475
108474->118476
78471->88477
88477->98478
88477->98479
98479->108480
108480->118481
118481->128482
118481->128483
58469->68484
68484->78485
78485->88486
88486->98487
88486->98488
78485->88489
88489->98490
88489->98491
98491->108492
98491->108493
98491->108494
108494->118495
118495->128496
118495->128497
118495->128498
118495->128499
58469->68500
68500->78501
68500->78502
68500->78503
68500->78504
78504->88505
88505->98506
98506->108507
98506->108508
108508->118509
108508->118510
58469->68511
68511->78512
78512->88513
88513->98514
98514->108515
78512->88516
88516->98517
88516->98518
98518->108519
108519->118520
58469->68521
68521->78522
78522->88523
78522->88524
58469->68525
68525->78526
78526->88527
78526->88528
88528->98529
88528->98530
98530->108531
108531->118532
98530->108533
108533->118534
118534->128535
128535->138536
118534->128537
118534->128538
128538->138539
128538->138540
138540->148541
148541->158542
158542->168543
168543->178544
168543->178545
158542->168546
168546->178547
168546->178548
148541->158549
158549->168550
158549->168551
118534->128552
128552->138553
138553->148554
148554->158555
158555->168556
148554->158557
158557->168558
158557->168559
158557->168560
158557->168561
28414->38562
38562->48563
38562->48564
48564->58565
48564->58566
48564->58567
58567->68568
38562->48569
48569->58570
58570->68571
68571->78572
78572->88573
88573->98574
98574->108575
108575->118576
108575->118577
78572->88578
88578->98579
88578->98580
98580->108581
108581->118582
118582->128583
118582->128584
58570->68585
68585->78586
78586->88587
88587->98588
88587->98589
78586->88590
88590->98591
88590->98592
98592->108593
58570->68594
68594->78595
78595->88596
68594->78597
78597->88598
88598->98599
98599->108600
108600->118601
108600->118602
118602->128603
118602->128604
128604->138605
88598->98606
98606->108607
108607->118608
108607->118609
118609->128610
118609->128611
58570->68612
68612->78613
78613->88614
88614->98615
98615->108616
78613->88617
88617->98618
88617->98619
98619->108620
108620->118621
58570->68622
68622->78623
78623->88624
78623->88625
58570->68626
68626->78627
68626->78628
68626->78629
78629->88630
68626->78631
78631->88632
88632->98633
98633->108634
98633->108635
108635->118636
108635->118637
118637->128638
118637->128639
28414->38640
38640->48641
38640->48642
48642->58643
48642->58644
48642->58645
58645->68646
38640->48647
48647->58648
58648->68649
68649->78650
78650->88651
88651->98652
98652->108653
108653->118654
108653->118655
78650->88656
88656->98657
88656->98658
98658->108659
108659->118660
118660->128661
118660->128662
58648->68663
68663->78664
78664->88665
88665->98666
88665->98667
78664->88668
88668->98669
88668->98670
98670->108671
98670->108672
98670->108673
108673->118674
118674->128675
118674->128676
118674->128677
118674->128678
58648->68679
68679->78680
68679->78681
68679->78682
68679->78683
78683->88684
88684->98685
98685->108686
98685->108687
108687->118688
108687->118689
58648->68690
68690->78691
78691->88692
88692->98693
98693->108694
78691->88695
88695->98696
88695->98697
98697->108698
108698->118699
58648->68700
68700->78701
78701->88702
78701->88703
58648->68704
68704->78705
78705->88706
88706->98707
78705->88708
88708->98709
88708->98710
28414->38711
38711->48712
38711->48713
48713->58714
48713->58715
48713->58716
58716->68717
38711->48718
28414->38719
38719->48720
38719->48721
48721->58722
48721->58723
48721->58724
58724->68725
38719->48726
48726->58727
58727->68728
68728->78729
78729->88730
88730->98731
98731->108732
108732->118733
108732->118734
78729->88735
88735->98736
88735->98737
98737->108738
108738->118739
118739->128740
118739->128741
58727->68742
68742->78743
78743->88744
88744->98745
88744->98746
78743->88747
88747->98748
88747->98749
98749->108750
58727->68751
68751->78752
78752->88753
68751->78754
78754->88755
88755->98756
98756->108757
108757->118758
108757->118759
118759->128760
118759->128761
128761->138762
138762->148763
128761->138764
138764->148765
148765->158766
138764->148767
88755->98768
98768->108769
108769->118770
108769->118771
118771->128772
118771->128773
58727->68774
68774->78775
78775->88776
78775->88777
88777->98778
88777->98779
58727->68780
68780->78781
78781->88782
78781->88783
88783->98784
58727->68785
68785->78786
78786->88787
88787->98788
98788->108789
78786->88790
88790->98791
88790->98792
98792->108793
108793->118794
58727->68795
68795->78796
78796->88797
78796->88798
58727->68799
68799->78800
68799->78801
68799->78802
78802->88803
68799->78804
78804->88805
88805->98806
98806->108807
108807->118808
118808->128809
128809->138810
108807->118811
118811->128812
118811->128813
128813->138814
128813->138815
88805->98816
98816->108817
108817->118818
118818->128819
128819->138820
108817->118821
118821->128822
118821->128823
128823->138824
138824->148825
88805->98826
98826->108827
98826->108828
98826->108829
98826->108830
108830->118831
118831->128832
128832->138833
128832->138834
138834->148835
148835->158836
138834->148837
148837->158838
88805->98839
98839->108840
108840->118841
118841->128842
128842->138843
138843->148844
148844->158845
158845->168846
138843->148847
148847->158848
158848->168849
108840->118850
118850->128851
118850->128852
128852->138853
128852->138854
88805->98855
98855->108856
108856->118857
118857->128858
128858->138859
108856->118860
118860->128861
118860->128862
128862->138863
138863->148864
88805->98865
98865->108866
108866->118867
118867->128868
128868->138869
108866->118870
118870->128871
128871->138872
98865->108873
98865->108874
98865->108875
108875->118876
118876->128877
128877->138878
128877->138879
138879->148880
148880->158881
138879->148882
148882->158883
158883->168884
168884->178885
158883->168886
88805->98887
98887->108888
108888->118889
108888->118890
118890->128891
118890->128892
28414->38893
38893->48894
38893->48895
48895->58896
48895->58897
48895->58898
58898->68899
38893->48900
48900->58901
58901->68902
68902->78903
78903->88904
88904->98905
98905->108906
108906->118907
108906->118908
78903->88909
88909->98910
88909->98911
98911->108912
108912->118913
118913->128914
118913->128915
58901->68916
68916->78917
78917->88918
88918->98919
88918->98920
78917->88921
88921->98922
88921->98923
98923->108924
58901->68925
68925->78926
78926->88927
68925->78928
78928->88929
88929->98930
98930->108931
108931->118932
108931->118933
118933->128934
118933->128935
128935->138936
138936->148937
128935->138938
138938->148939
148939->158940
138938->148941
88929->98942
98942->108943
108943->118944
108943->118945
118945->128946
118945->128947
58901->68948
68948->78949
78949->88950
78949->88951
88951->98952
88951->98953
58901->68954
68954->78955
78955->88956
78955->88957
88957->98958
58901->68959
68959->78960
78960->88961
88961->98962
98962->108963
78960->88964
88964->98965
88964->98966
98966->108967
108967->118968
58901->68969
68969->78970
78970->88971
78970->88972
88972->98973
88972->98974
98974->108975
58901->68976
68976->78977
78977->88978
78977->88979
58901->68980
68980->78981
78981->88982
88982->98983
78981->88984
88984->98985
98985->108986
98985->108987
108987->118988
118988->128989
128989->138990
118988->128991
88984->98992
58901->68993
68993->78994
78994->88995
88995->98996
98996->108997
78994->88998
88998->98999
88998->99000
99000->109001
99000->109002
58901->69003
69003->79004
79004->89005
79004->89006
79004->89007
89007->99008
58901->69009
69009->79010
69009->79011
69009->79012
69009->79013
79013->89014
89014->99015
99015->109016
109016->119017
119017->129018
129018->139019
139019->149020
149020->159021
159021->169022
139019->149023
149023->159024
159024->169025
109016->119026
119026->129027
119026->129028
129028->139029
129028->139030
89014->99031
99031->109032
109032->119033
119033->129034
129034->139035
109032->119036
119036->129037
129037->139038
99031->109039
99031->109040
99031->109041
109041->119042
119042->129043
129043->139044
139044->149045
139044->149046
149046->159047
149046->159048
159048->169049
119042->129050
129050->139051
139051->149052
139051->149053
149053->159054
149053->159055
159055->169056
119042->129057
129057->139058
139058->149059
139058->149060
149060->159061
159061->169062
159061->169063
169063->179064
169063->179065
149060->159066
159066->169067
58901->69068
69068->79069
79069->89070
89070->99071
79069->89072
89072->99073
89072->99074
99074->109075
109075->119076
99074->109077
28414->39078
39078->49079
39078->49080
49080->59081
49080->59082
49080->59083
59083->69084
39078->49085
49085->59086
59086->69087
69087->79088
79088->89089
89089->99090
99090->109091
109091->119092
109091->119093
79088->89094
89094->99095
89094->99096
99096->109097
109097->119098
119098->129099
119098->129100
59086->69101
69101->79102
79102->89103
89103->99104
89103->99105
79102->89106
89106->99107
89106->99108
99108->109109
99108->109110
99108->109111
109111->119112
119112->129113
119112->129114
119112->129115
119112->129116
59086->69117
69117->79118
69117->79119
69117->79120
69117->79121
79121->89122
89122->99123
99123->109124
99123->109125
109125->119126
109125->119127
59086->69128
69128->79129
79129->89130
79129->89131
89131->99132
89131->99133
59086->69134
69134->79135
79135->89136
79135->89137
89137->99138
59086->69139
69139->79140
69139->79141
69139->79142
69139->79143
79143->89144
89144->99145
99145->109146
99145->109147
109147->119148
109147->119149
59086->69150
69150->79151
79151->89152
79151->89153
89153->99154
89153->99155
59086->69156
69156->79157
79157->89158
79157->89159
89159->99160
89159->99161
-10->09162
09162->19163
19163->29164
29164->39165
39165->49166
49166->59167
59167->69168
09162->19169
19169->29170
29170->39171
39171->49172
49172->59173
59173->69174
69174->79175
09162->19176
19176->29177
29177->39178
39178->49179
49179->59180
59180->69181
69181->79182
09162->19183
19183->29184
29184->39185
39185->49186
49186->59187
59187->69188
69188->79189
09162->19190
19190->29191
29191->39192
39192->49193
49193->59194
59194->69195
69195->79196
09162->19197
19197->29198
29198->39199
39199->49200
49200->59201
59201->69202
09162->19203
19203->29204
29204->39205
39205->49206
09162->19207
19207->29208
29208->39209
39209->49210
09162->19211
19211->29212
29212->39213
39213->49214
09162->19215
19215->29216
19215->29217
29217->39218
19215->29219
29219->39220
39220->49221
49221->59222
59222->69223
39220->49224
29219->39225
39225->49226
49226->59227
49226->59228
39225->49229
29219->39230
39230->49231
39230->49232
49232->59233
39230->49234
49234->59235
59235->69236
69236->79237
69236->79238
69236->79239
79239->89240
89240->99241
29219->39242
39242->49243
39242->49244
49244->59245
49244->59246
59246->69247
69247->79248
69247->79249
39242->49250
49250->59251
59251->69252
69252->79253
69252->79254
29219->39255
39255->49256
39255->49257
49257->59258
49257->59259
59259->69260
69260->79261
79261->89262
89262->99263
99263->109264
99263->109265
69260->79266
39255->49267
49267->59268
59268->69269
69269->79270
79270->89271
79270->89272
79270->89273
89273->99274
89273->99275
99275->109276
109276->119277
59268->69278
69278->79279
79279->89280
79279->89281
89281->99282
99282->109283
109283->119284
109283->119285
69278->79286
69278->79287
79287->89288
69278->79289
79289->89290
89290->99291
99291->109292
109292->119293
109292->119294
119294->129295
99291->109296
99291->109297
109297->119298
59268->69299
69299->79300
79300->89301
79300->89302
29219->39303
39303->49304
39303->49305
49305->59306
49305->59307
59307->69308
69308->79309
79309->89310
79309->89311
69308->79312
39303->49313
49313->59314
59314->69315
69315->79316
69315->79317
29219->39318
39318->49319
39318->49320
49320->59321
49320->59322
59322->69323
69323->79324
69323->79325
39318->49326
49326->59327
59327->69328
69328->79329
69328->79330
29219->39331
39331->49332
39331->49333
49333->59334
49333->59335
39331->49336
49336->59337
59337->69338
69338->79339
29219->39340
39340->49341
39340->49342
49342->59343
49342->59344
59344->69345
69345->79346
69345->79347
49342->59348
59348->69349
39340->49350
49350->59351
59351->69352
69352->79353
79353->89354
79353->89355
89355->99356
59351->69357
69357->79358
69357->79359
69357->79360
69357->79361
79361->89362
89362->99363
99363->109364
99363->109365
109365->119366
109365->119367
29219->39368
39368->49369
39368->49370
49370->59371
49370->59372
59372->69373
69373->79374
69373->79375
39368->49376
49376->59377
59377->69378
69378->79379
79379->89380
79379->89381
79379->89382
89382->99383
89382->99384
99384->109385
109385->119386
59377->69387
69387->79388
79388->89389
89389->99390
99390->109391
109391->119392
109391->119393
79388->89394
89394->99395
89394->99396
99396->109397
109397->119398
119398->129399
119398->129400
59377->69401
69401->79402
79402->89403
79402->89404
89404->99405
89404->99406
69401->79407
79407->89408
79407->89409
89409->99410
69401->79411
79411->89412
69401->79413
79413->89414
89414->99415
99415->109416
109416->119417
119417->129418
119417->129419
109416->119420
109416->119421
119421->129422
89414->99423
99423->109424
109424->119425
109424->119426
119426->129427
129427->139428
129427->139429
119426->129430
59377->69431
69431->79432
79432->89433
89433->99434
89433->99435
79432->89436
-10->09437
09437->19438
19438->29439
29439->39440
39440->49441
49441->59442
59442->69443
69443->79444
09437->19445
19445->29446
29446->39447
39447->49448
09437->19449
19449->29450
29450->39451
39451->49452
09437->19453
19453->29454
29454->39455
39455->49456
09437->19457
19457->29458
29458->39459
39459->49460
09437->19461
19461->29462
29462->39463
39463->49464
09437->19465
19465->29466
29466->39467
39467->49468
09437->19469
19469->29470
29470->39471
39471->49472
09437->19473
19473->29474
29474->39475
39475->49476
09437->19477
19477->29478
29478->39479
39479->49480
09437->19481
19481->29482
29482->39483
39483->49484
09437->19485
19485->29486
19485->29487
29487->39488
39488->49489
39488->49490
39488->49491
49491->59492
59492->69493
69493->79494
49491->59495
59495->69496
69496->79497
79497->89498
79497->89499
69496->79500
79500->89501
89501->99502
89501->99503
79500->89504
39488->49505
49505->59506
59506->69507
69507->79508
79508->89509
89509->99510
89509->99511
99511->109512
99511->109513
59506->69514
69514->79515
79515->89516
79515->89517
69514->79518
79518->89519
89519->99520
99520->109521
109521->119522
119522->129523
109521->119524
119524->129525
89519->99526
99526->109527
109527->119528
109527->119529
89519->99530
99530->109531
109531->119532
109531->119533
89519->99534
99534->109535
29487->39536
39536->49537
39536->49538
39536->49539
49539->59540
59540->69541
69541->79542
49539->59543
59543->69544
69544->79545
79545->89546
79545->89547
69544->79548
79548->89549
89549->99550
89549->99551
79548->89552
39536->49553
49553->59554
59554->69555
69555->79556
69555->79557
79557->89558
79557->89559
79557->89560
29487->39561
39561->49562
39561->49563
39561->49564
49564->59565
59565->69566
69566->79567
49564->59568
59568->69569
69569->79570
79570->89571
89571->99572
89571->99573
79570->89574
89574->99575
99575->109576
99575->109577
89574->99578
69569->79579
79579->89580
79579->89581
39561->49582
49582->59583
59583->69584
69584->79585
79585->89586
89586->99587
99587->109588
79585->89589
89589->99590
89589->99591
99591->109592
109592->119593
59583->69594
69594->79595
79595->89596
79595->89597
89597->99598
89597->99599
59583->69600
69600->79601
79601->89602
89602->99603
99603->109604
79601->89605
59583->69606
69606->79607
79607->89608
79607->89609
69606->79610
79610->89611
89611->99612
99612->109613
99612->109614
99612->109615
109615->119616
109615->119617
69606->79618
79618->89619
89619->99620
99620->109621
109621->119622
109621->119623
109621->119624
119624->129625
89619->99626
99626->109627
109627->119628
119628->129629
129629->139630
139630->149631
139630->149632
149632->159633
149632->159634
159634->169635
159634->169636
119628->129637
129637->139638
129637->139639
129637->139640
139640->149641
129637->139642
139642->149643
149643->159644
159644->169645
159644->169646
169646->179647
169646->179648
169646->179649
99626->109650
109650->119651
119651->129652
119651->129653
109650->119654
59583->69655
69655->79656
79656->89657
89657->99658
99658->109659
79656->89660
89660->99661
89660->99662
69655->79663
79663->89664
79663->89665
69655->79666
79666->89667
79666->89668
79666->89669
89669->99670
69655->79671
79671->89672
89672->99673
89672->99674
89672->99675
99675->109676
89672->99677
99677->109678
109678->119679
119679->129680
119679->129681
129681->139682
129681->139683
129681->139684
59583->69685
69685->79686
69685->79687
79687->89688
89688->99689
89688->99690
89688->99691
89688->99692
99692->109693
109693->119694
119694->129695
119694->129696
109693->119697
119697->129698
129698->139699
139699->149700
149700->159701
149700->159702
59583->69703
69703->79704
29487->39705
39705->49706
39705->49707
39705->49708
49708->59709
49708->59710
59710->69711
69711->79712
79712->89713
89713->99714
89713->99715
79712->89716
89716->99717
89716->99718
69711->79719
79719->89720
89720->99721
99721->109722
79719->89723
39705->49724
49724->59725
59725->69726
69726->79727
79727->89728
79727->89729
89729->99730
89729->99731
99731->109732
99731->109733
109733->119734
59725->69735
69735->79736
79736->89737
79736->89738
69735->79739
79739->89740
89740->99741
99741->109742
109742->119743
109742->119744
119744->129745
119744->129746
89740->99747
99747->109748
109748->119749
119749->129750
129750->139751
109748->119752
119752->129753
119752->129754
129754->139755
99747->109756
109756->119757
99747->109758
109758->119759
119759->129760
129760->139761
139761->149762
139761->149763
149763->159764
149763->159765
159765->169766
119759->129767
129767->139768
139768->149769
139768->149770
149770->159771
149770->159772
159772->169773
119759->129774
129774->139775
139775->149776
139775->149777
149777->159778
149777->159779
159779->169780
119759->129781
129781->139782
139782->149783
139782->149784
129781->139785
139785->149786
149786->159787
159787->169788
169788->179789
169788->179790
149786->159791
159791->169792
169792->179793
169792->179794
179794->189795
179794->189796
189796->199797
189796->199798
199798->209799
199798->209800
149786->159801
159801->169802
169802->179803
169802->179804
179804->189805
179804->189806
189806->199807
189806->199808
149786->159809
159809->169810
169810->179811
169810->179812
169810->179813
179813->189814
179813->189815
189815->199816
149786->159817
159817->169818
169818->179819
179819->189820
189820->199821
169818->179822
179822->189823
179822->189824
189824->199825
149786->159826
159826->169827
169827->179828
179828->189829
179828->189830
169827->179831
179831->189832
189832->199833
199833->209834
199833->209835
189832->199836
199836->209837
199836->209838
159826->169839
169839->179840
179840->189841
189841->199842
199842->209843
179840->189844
189844->199845
199845->209846
199845->209847
199845->209848
209848->219849
209848->219850
219850->229851
219850->229852
219850->229853
219850->229854
179840->189855
189855->199856
199856->209857
189855->199858
199858->209859
209859->219860
219860->229861
219860->229862
229862->239863
229862->239864
229862->239865
229862->239866
229862->239867
189855->199868
199868->209869
209869->219870
219870->229871
219870->229872
229872->239873
229872->239874
229872->239875
229872->239876
229872->239877
179840->189878
189878->199879
199879->209880
199879->209881
199879->209882
149786->159883
159883->169884
169884->179885
169884->179886
179886->189887
189887->199888
159883->169889
89740->99890
99890->109891
109891->119892
119892->129893
109891->119894
119894->129895
99890->109896
109896->119897
119897->129898
129898->139899
139899->149900
139899->149901
149901->159902
149901->159903
159903->169904
159903->169905
169905->179906
169905->179907
119897->129908
129908->139909
139909->149910
149910->159911
159911->169912
159911->169913
169913->179914
149910->159915
29487->39916
39916->49917
39916->49918
39916->49919
49919->59920
49919->59921
59921->69922
69922->79923
79923->89924
89924->99925
89924->99926
79923->89927
89927->99928
89927->99929
79923->89930
89930->99931
89930->99932
79923->89933
89933->99934
89933->99935
69922->79936
79936->89937
79936->89938
39916->49939
49939->59940
59940->69941
69941->79942
79942->89943
89943->99944
99944->109945
109945->119946
109945->119947
99944->109948
109948->119949
109948->119950
119950->129951
129951->139952
129951->139953
119950->129954
129954->139955
129954->139956
79942->89957
89957->99958
99958->109959
109959->119960
109959->119961
99958->109962
109962->119963
109962->119964
119964->129965
129965->139966
129965->139967
119964->129968
129968->139969
129968->139970
139970->149971
139970->149972
139970->149973
79942->89974
89974->99975
99975->109976
109976->119977
109976->119978
99975->109979
109979->119980
109979->119981
119981->129982
129982->139983
129982->139984
119981->129985
129985->139986
129985->139987
139987->149988
149988->159989
139987->149990
149990->159991
159991->169992
149990->159993
159993->169994
79942->89995
89995->99996
99996->109997
99996->109998
109998->119999
109998->1110000
109998->1110001
109998->1110002
109998->1110003
1110003->1210004
79942->810005
810005->910006
910006->1010007
910006->1010008
1010008->1110009
1010008->1110010
1010008->1110011
1010008->1110012
1110012->1210013
1010008->1110014
1110014->1210015
79942->810016
810016->910017
910017->1010018
910017->1010019
1010019->1110020
1010019->1110021
59940->610022
610022->710023
710023->810024
810024->910025
810024->910026
710023->810027
810027->910028
910028->1010029
1010029->1110030
1110030->1210031
1210031->1310032
1210031->1310033
1110030->1210034
610022->710035
710035->810036
810036->910037
810036->910038
710035->810039
810039->910040
910040->1010041
1010041->1110042
1110042->1210043
1210043->1310044
1310044->1410045
1310044->1410046
1410046->1510047
1210043->1310048
1110042->1210049
29487->310050
310050->410051
310050->410052
310050->410053
410053->510054
410053->510055
510055->610056
610056->710057
710057->810058
810058->910059
810058->910060
710057->810061
810061->910062
810061->910063
710057->810064
810064->910065
810064->910066
710057->810067
810067->910068
810067->910069
610056->710070
710070->810071
710070->810072
310050->410073
410073->510074
510074->610075
610075->710076
710076->810077
810077->910078
910078->1010079
1010079->1110080
1010079->1110081
910078->1010082
1010082->1110083
1010082->1110084
1110084->1210085
1210085->1310086
1210085->1310087
1110084->1210088
1210088->1310089
1310089->1410090
1210088->1310091
1310091->1410092
710076->810093
810093->910094
910094->1010095
1010095->1110096
1010095->1110097
910094->1010098
1010098->1110099
1010098->1110100
1110100->1210101
1210101->1310102
1210101->1310103
1110100->1210104
1210104->1310105
1210104->1310106
1310106->1410107
1310106->1410108
1310106->1410109
710076->810110
810110->910111
910111->1010112
1010112->1110113
1010112->1110114
910111->1010115
1010115->1110116
1010115->1110117
1110117->1210118
1210118->1310119
1210118->1310120
1110117->1210121
1210121->1310122
1210121->1310123
1310123->1410124
1410124->1510125
1310123->1410126
1410126->1510127
1510127->1610128
1410126->1510129
1510129->1610130
710076->810131
810131->910132
910132->1010133
910132->1010134
1010134->1110135
1010134->1110136
1010134->1110137
1010134->1110138
1010134->1110139
1110139->1210140
710076->810141
810141->910142
910142->1010143
910142->1010144
1010144->1110145
1010144->1110146
1010144->1110147
1010144->1110148
1110148->1210149
1010144->1110150
1110150->1210151
710076->810152
810152->910153
910153->1010154
1010154->1110155
910153->1010156
1010156->1110157
1010156->1110158
1110158->1210159
1110158->1210160
510074->610161
610161->710162
710162->810163
810163->910164
810163->910165
710162->810166
810166->910167
910167->1010168
1010168->1110169
1110169->1210170
1210170->1310171
1210170->1310172
1110169->1210173
610161->710174
710174->810175
810175->910176
810175->910177
710174->810178
810178->910179
910179->1010180
1010180->1110181
1110181->1210182
1210182->1310183
1310183->1410184
1310183->1410185
1410185->1510186
1210182->1310187
1110181->1210188
610161->710189
710189->810190
810190->910191
810190->910192
710189->810193
810193->910194
910194->1010195
1010195->1110196
1110196->1210197
1210197->1310198
1310198->1410199
1310198->1410200
1210197->1310201
1110196->1210202
29487->310203
310203->410204
310203->410205
310203->410206
410206->510207
410206->510208
510208->610209
610209->710210
710210->810211
810211->910212
810211->910213
710210->810214
810214->910215
810214->910216
610209->710217
710217->810218
810218->910219
910219->1010220
710217->810221
310203->410222
410222->510223
510223->610224
610224->710225
710225->810226
710225->810227
810227->910228
810227->910229
910229->1010230
510223->610231
610231->710232
710232->810233
710232->810234
610231->710235
710235->810236
810236->910237
910237->1010238
1010238->1110239
1010238->1110240
1110240->1210241
1110240->1210242
1210242->1310243
1210242->1310244
1310244->1410245
810236->910246
910246->1010247
1010247->1110248
1010247->1110249
910246->1010250
1010250->1110251
1110251->1210252
1210252->1310253
1310253->1410254
1310253->1410255
1410255->1510256
1410255->1510257
1110251->1210258
1210258->1310259
1310259->1410260
1410260->1510261
1510261->1610262
1310259->1410263
1410263->1510264
1410263->1510265
1510265->1610266
1210258->1310267
1310267->1410268
1210258->1310269
1310269->1410270
1410270->1510271
1510271->1610272
1610272->1710273
1610272->1710274
1710274->1810275
1710274->1810276
1810276->1910277
1410270->1510278
1510278->1610279
1610279->1710280
1610279->1710281
1710281->1810282
1710281->1810283
1810283->1910284
1410270->1510285
1510285->1610286
1610286->1710287
1610286->1710288
1710288->1810289
1710288->1810290
1810290->1910291
1410270->1510292
1510292->1610293
1610293->1710294
1610293->1710295
1510292->1610296
1610296->1710297
1710297->1810298
1810298->1910299
1910299->2010300
1910299->2010301
1710297->1810302
1810302->1910303
1910303->2010304
1910303->2010305
2010305->2110306
2010305->2110307
2110307->2210308
2110307->2210309
2210309->2310310
2210309->2310311
1710297->1810312
1810312->1910313
1910313->2010314
1910313->2010315
2010315->2110316
2010315->2110317
2110317->2210318
2110317->2210319
1710297->1810320
1810320->1910321
1910321->2010322
1910321->2010323
1910321->2010324
2010324->2110325
2010324->2110326
2110326->2210327
1710297->1810328
1810328->1910329
1910329->2010330
2010330->2110331
2110331->2210332
1910329->2010333
2010333->2110334
2010333->2110335
2110335->2210336
1710297->1810337
1810337->1910338
1910338->2010339
2010339->2110340
2010339->2110341
1910338->2010342
2010342->2110343
2110343->2210344
2210344->2310345
2210344->2310346
2110343->2210347
2210347->2310348
2210347->2310349
1810337->1910350
1910350->2010351
2010351->2110352
2110352->2210353
2210353->2310354
2010351->2110355
2110355->2210356
2210356->2310357
2210356->2310358
2210356->2310359
2310359->2410360
2310359->2410361
2410361->2510362
2410361->2510363
2410361->2510364
2410361->2510365
2010351->2110366
2110366->2210367
2210367->2310368
2110366->2210369
2210369->2310370
2310370->2410371
2410371->2510372
2410371->2510373
2510373->2610374
2510373->2610375
2510373->2610376
2510373->2610377
2510373->2610378
2110366->2210379
2210379->2310380
2310380->2410381
2410381->2510382
2410381->2510383
2510383->2610384
2510383->2610385
2510383->2610386
2510383->2610387
2510383->2610388
2010351->2110389
2110389->2210390
2210390->2310391
2210390->2310392
2210390->2310393
1710297->1810394
1810394->1910395
1910395->2010396
1910395->2010397
2010397->2110398
2110398->2210399
1810394->1910400
1110251->1210401
1210401->1310402
1310402->1410403
1410403->1510404
1310402->1410405
1410405->1510406
1210401->1310407
1310407->1410408
1410408->1510409
1510409->1610410
1610410->1710411
1610410->1710412
1710412->1810413
1710412->1810414
1810414->1910415
1810414->1910416
1910416->2010417
1910416->2010418
1410408->1510419
1510419->1610420
1610420->1710421
1710421->1810422
1710421->1810423
29487->310424
310424->410425
310424->410426
310424->410427
410427->510428
410427->510429
510429->610430
610430->710431
610430->710432
310424->410433
410433->510434
510434->610435
610435->710436
610435->710437
710437->810438
810438->910439
710437->810440
29487->310441
310441->410442
310441->410443
310441->410444
410444->510445
410444->510446
510446->610447
610447->710448
710448->810449
710448->810450
610447->710451
710451->810452
710451->810453
310441->410454
410454->510455
510455->610456
610456->710457
710457->810458
810458->910459
910459->1010460
710457->810461
510455->610462
610462->710463
710463->810464
710463->810465
610462->710466
710466->810467
810467->910468
910468->1010469
910468->1010470
910468->1010471
1010471->1110472
1010471->1110473
610462->710474
710474->810475
810475->910476
910476->1010477
910476->1010478
910476->1010479
1010479->1110480
510455->610481
610481->710482
710482->810483
710482->810484
810484->910485
810484->910486
910486->1010487
510455->610488
610488->710489
710489->810490
810490->910491
910491->1010492
910491->1010493
1010493->1110494
1010493->1110495
1110495->1210496
1110495->1210497
710489->810498
810498->910499
910499->1010500
910499->1010501
810498->910502
910502->1010503
1010503->1110504
1110504->1210505
1110504->1210506
1110504->1210507
1210507->1310508
1210507->1310509
1310509->1410510
1310509->1410511
510455->610512
610512->710513
710513->810514
710513->810515
810515->910516
810515->910517
510455->610518
610518->710519
710519->810520
810520->910521
910521->1010522
710519->810523
810523->910524
810523->910525
610518->710526
710526->810527
710526->810528
610518->710529
710529->810530
710529->810531
710529->810532
810532->910533
610518->710534
710534->810535
810535->910536
810535->910537
810535->910538
910538->1010539
810535->910540
910540->1010541
1010541->1110542
1110542->1210543
1110542->1210544
1210544->1310545
1210544->1310546
1210544->1310547
510455->610548
610548->710549
710549->810550
810550->910551
910551->1010552
1010552->1110553
1010552->1110554
1110554->1210555
1110554->1210556
1210556->1310557
1210556->1310558
810550->910559
910559->1010560
910559->1010561
910559->1010562
1010562->1110563
910559->1010564
1010564->1110565
1110565->1210566
1210566->1310567
1210566->1310568
1310568->1410569
1310568->1410570
1310568->1410571
610548->710572
710572->810573
810573->910574
810573->910575
710572->810576
29487->310577
310577->410578
310577->410579
310577->410580
410580->510581
410580->510582
510582->610583
610583->710584
710584->810585
810585->910586
810585->910587
710584->810588
810588->910589
810588->910590
610583->710591
710591->810592
710591->810593
310577->410594
410594->510595
510595->610596
610596->710597
710597->810598
710597->810599
810599->910600
810599->910601
910601->1010602
910601->1010603
1010603->1110604
510595->610605
610605->710606
710606->810607
710606->810608
610605->710609
710609->810610
810610->910611
910611->1010612
1010612->1110613
1010612->1110614
1110614->1210615
1110614->1210616
1210616->1310617
1210616->1310618
1310618->1410619
1310618->1410620
810610->910621
910621->1010622
1010622->1110623
1010622->1110624
1110624->1210625
1110624->1210626
1210626->1310627
1210626->1310628
810610->910629
910629->1010630
1010630->1110631
1010630->1110632
1110632->1210633
1110632->1210634
1210634->1310635
810610->910636
910636->1010637
1010637->1110638
1010637->1110639
1110639->1210640
1110639->1210641
1210641->1310642
810610->910643
910643->1010644
1010644->1110645
1010644->1110646
1110646->1210647
1110646->1210648
1210648->1310649
810610->910650
910650->1010651
1010651->1110652
1010651->1110653
810610->910654
910654->1010655
1010655->1110656
1110656->1210657
1210657->1310658
1310658->1410659
1310658->1410660
1410660->1510661
1410660->1510662
1510662->1610663
1510662->1610664
1110656->1210665
1210665->1310666
1310666->1410667
1410667->1510668
1510668->1610669
1310666->1410670
1410670->1510671
1410670->1510672
1510672->1610673
1110656->1210674
1210674->1310675
1310675->1410676
1310675->1410677
1410677->1510678
1410677->1510679
1410677->1510680
1410677->1510681
1410677->1510682
1410677->1510683
1410677->1510684
1410677->1510685
910654->1010686
1010686->1110687
1110687->1210688
1110687->1210689
1010686->1110690
1110690->1210691
1210691->1310692
1310692->1410693
1410693->1510694
1510694->1610695
1610695->1710696
1610695->1710697
1510694->1610698
1410693->1510699
29487->310700
310700->410701
310700->410702
310700->410703
410703->510704
410703->510705
510705->610706
610706->710707
710707->810708
810708->910709
810708->910710
710707->810711
810711->910712
810711->910713
610706->710714
710714->810715
710714->810716
310700->410717
410717->510718
510718->610719
610719->710720
710720->810721
710720->810722
810722->910723
810722->910724
910724->1010725
510718->610726
610726->710727
710727->810728
710727->810729
610726->710730
710730->810731
810731->910732
910732->1010733
1010733->1110734
1010733->1110735
1110735->1210736
1110735->1210737
1210737->1310738
1210737->1310739
1310739->1410740
810731->910741
910741->1010742
1010742->1110743
1010742->1110744
910741->1010745
1010745->1110746
1110746->1210747
1210747->1310748
1310748->1410749
1310748->1410750
1410750->1510751
1410750->1510752
1510752->1610753
1510752->1610754
1610754->1710755
1610754->1710756
1110746->1210757
1210757->1310758
1310758->1410759
1310758->1410760
1410760->1510761
1410760->1510762
1510762->1610763
1510762->1610764
1110746->1210765
1210765->1310766
1310766->1410767
1310766->1410768
1410768->1510769
1410768->1510770
1510770->1610771
1110746->1210772
1210772->1310773
1310773->1410774
1310773->1410775
1410775->1510776
1410775->1510777
1510777->1610778
1110746->1210779
1210779->1310780
1310780->1410781
1310780->1410782
1410782->1510783
1410782->1510784
1510784->1610785
1110746->1210786
1210786->1310787
1310787->1410788
1410788->1510789
1510789->1610790
1610790->1710791
1610790->1710792
1710792->1810793
1710792->1810794
1810794->1910795
1410788->1510796
1510796->1610797
1610797->1710798
1610797->1710799
1410788->1510800
1510800->1610801
1610801->1710802
1610801->1710803
1510800->1610804
1610804->1710805
1710805->1810806
1810806->1910807
1810806->1910808
1810806->1910809
1510800->1610810
1610810->1710811
1710811->1810812
1810812->1910813
1810812->1910814
1810812->1910815
1910815->2010816
1910815->2010817
2010817->2110818
2010817->2110819
2110819->2210820
2210820->2310821
2210820->2310822
2110819->2210823
1410788->1510824
1510824->1610825
1610825->1710826
1710826->1810827
1810827->1910828
1610825->1710829
1710829->1810830
1710829->1810831
1810831->1910832
1410788->1510833
1510833->1610834
1610834->1710835
1610834->1710836
1710836->1810837
1710836->1810838
1710836->1810839
1710836->1810840
1710836->1810841
1710836->1810842
1710836->1810843
1710836->1810844
1210786->1310845
1310845->1410846
1410846->1510847
1510847->1610848
1510847->1610849
1410846->1510850
1510850->1610851
1610851->1710852
1710852->1810853
1810853->1910854
1910854->2010855
2010855->2110856
2010855->2110857
1910854->2010858
1810853->1910859
1310845->1410860
1410860->1510861
1510861->1610862
1510861->1610863
1410860->1510864
1510864->1610865
1610865->1710866
1710866->1810867
1810867->1910868
1910868->2010869
1910868->2010870
1810867->1910871
29487->310872
310872->410873
310872->410874
310872->410875
410875->510876
410875->510877
510877->610878
610878->710879
710879->810880
810880->910881
810880->910882
710879->810883
810883->910884
810883->910885
710879->810886
810886->910887
810886->910888
710879->810889
810889->910890
810889->910891
710879->810892
810892->910893
910893->1010894
1010894->1110895
810892->910896
710879->810897
810897->910898
810897->910899
710879->810900
810900->910901
810900->910902
610878->710903
710903->810904
710903->810905
310872->410906
410906->510907
510907->610908
610908->710909
710909->810910
710909->810911
810911->910912
810911->910913
910913->1010914
510907->610915
610915->710916
710916->810917
710916->810918
510907->610919
610919->710920
710920->810921
710920->810922
510907->610923
610923->710924
710924->810925
710924->810926
610923->710927
710927->810928
810928->910929
910929->1010930
1010930->1110931
1010930->1110932
810928->910933
910933->1010934
1010934->1110935
1010934->1110936
810928->910937
910937->1010938
1010938->1110939
1010938->1110940
810928->910941
910941->1010942
1010942->1110943
1010942->1110944
510907->610945
610945->710946
710946->810947
810947->910948
810947->910949
910949->1010950
710946->810951
810951->910952
810951->910953
910953->1010954
610945->710955
710955->810956
810956->910957
910957->1010958
1010958->1110959
1010958->1110960
810956->910961
910961->1010962
1010962->1110963
1010962->1110964
610945->710965
710965->810966
810966->910967
910967->1010968
1010968->1110969
1010968->1110970
810966->910971
910971->1010972
1010972->1110973
910971->1010974
1010974->1110975
1110975->1210976
1210976->1310977
1310977->1410978
1310977->1410979
1410979->1510980
1410979->1510981
1510981->1610982
1510981->1610983
1610983->1710984
1110975->1210985
1210985->1310986
1310986->1410987
1310986->1410988
1110975->1210989
1210989->1310990
1310990->1410991
1310990->1410992
1110975->1210993
1210993->1310994
1310994->1410995
1310994->1410996
1110975->1210997
1210997->1310998
1310998->1410999
1310998->1411000
910971->1011001
1011001->1111002
1111002->1211003
1211003->1311004
1311004->1411005
1311004->1411006
1411006->1511007
1411006->1511008
1511008->1611009
1511008->1611010
1111002->1211011
1211011->1311012
1311012->1411013
1311012->1411014
810966->911015
911015->1011016
1011016->1111017
1011016->1111018
810966->911019
911019->1011020
1011020->1111021
1011020->1111022
810966->911023
911023->1011024
1011024->1111025
1011024->1111026
911023->1011027
1011027->1111028
1111028->1211029
1211029->1311030
1311030->1411031
1311030->1411032
1111028->1211033
1211033->1311034
1311034->1411035
1211033->1311036
1311036->1411037
1411037->1511038
1511038->1611039
1611039->1711040
1711040->1811041
1811041->1911042
1611039->1711043
1711043->1811044
1711043->1811045
1811045->1911046
1911046->2011047
1411037->1511048
1511048->1611049
1611049->1711050
1611049->1711051
1711051->1811052
1711051->1811053
1811053->1911054
1811053->1911055
1411037->1511056
1511056->1611057
1611057->1711058
1611057->1711059
1711059->1811060
1711059->1811061
1511056->1611062
1611062->1711063
1611062->1711064
1511056->1611065
1611065->1711066
1511056->1611067
1611067->1711068
1711068->1811069
1811069->1911070
1811069->1911071
1911071->2011072
1911071->2011073
2011073->2111074
2011073->2111075
1411037->1511076
1511076->1611077
1611077->1711078
1611077->1711079
1211033->1311080
1311080->1411081
1411081->1511082
1511082->1611083
1511082->1611084
1111028->1211085
1211085->1311086
1311086->1411087
1311086->1411088
510907->611089
611089->711090
711090->811091
711090->811092
29487->311093
311093->411094
311093->411095
311093->411096
411096->511097
411096->511098
511098->611099
611099->711100
711100->811101
811101->911102
611099->711103
311093->411104
411104->511105
511105->611106
611106->711107
711107->811108
711107->811109
811109->911110
811109->911111
911111->1011112
511105->611113
611113->711114
711114->811115
711114->811116
811116->911117
811116->911118
911118->1011119
911118->1011120
511105->611121
611121->711122
711122->811123
711122->811124
711122->811125
811125->911126
811125->911127
911127->1011128
911127->1011129
511105->611130
611130->711131
29487->311132
311132->411133
311132->411134
411134->511135
411134->511136
511136->611137
611137->711138
711138->811139
711138->811140
611137->711141
711141->811142
711141->811143
311132->411144
411144->511145
511145->611146
611146->711147
711147->811148
711147->811149
811149->911150
811149->911151
911151->1011152
511145->611153
611153->711154
711154->811155
711154->811156
611153->711157
711157->811158
811158->911159
911159->1011160
911159->1011161
911159->1011162
1011162->1111163
511145->611164
611164->711165
29487->311166
311166->411167
311166->411168
311166->411169
411169->511170
411169->511171
511171->611172
611172->711173
711173->811174
811174->911175
811174->911176
711173->811177
811177->911178
911178->1011179
1011179->1111180
811177->911181
711173->811182
811182->911183
811182->911184
611172->711185
711185->811186
811186->911187
911187->1011188
711185->811189
311166->411190
411190->511191
511191->611192
611192->711193
711193->811194
711193->811195
511191->611196
611196->711197
711197->811198
811198->911199
811198->911200
911200->1011201
711197->811202
811202->911203
811202->911204
911204->1011205
611196->711206
711206->811207
811207->911208
911208->1011209
911208->1011210
911208->1011211
611196->711212
711212->811213
811213->911214
911214->1011215
811213->911216
911216->1011217
1011217->1111218
1111218->1211219
1211219->1311220
1211219->1311221
1211219->1311222
1311222->1411223
1011217->1111224
1111224->1211225
1211225->1311226
811213->911227
911227->1011228
1011228->1111229
1111229->1211230
1211230->1311231
1311231->1411232
1311231->1411233
1411233->1511234
1211230->1311235
511191->611236
611236->711237
29487->311238
311238->411239
311238->411240
411240->511241
411240->511242
511242->611243
611243->711244
711244->811245
811245->911246
911246->1011247
1011247->1111248
811245->911249
711244->811250
811250->911251
811250->911252
711244->811253
811253->911254
811253->911255
711244->811256
811256->911257
811256->911258
611243->711259
711259->811260
711259->811261
311238->411262
411262->511263
511263->611264
611264->711265
711265->811266
811266->911267
911267->1011268
911267->1011269
911267->1011270
1011270->1111271
1011270->1111272
1111272->1211273
1111272->1211274
1111272->1211275
711265->811276
811276->911277
911277->1011278
1011278->1111279
911277->1011280
1011280->1111281
1011280->1111282
511263->611283
611283->711284
711284->811285
811285->911286
811285->911287
711284->811288
811288->911289
911289->1011290
1011290->1111291
1111291->1211292
1211292->1311293
1211292->1311294
1111291->1211295
611283->711296
711296->811297
811297->911298
811297->911299
711296->811300
811300->911301
911301->1011302
1011302->1111303
1111303->1211304
1211304->1311305
1311305->1411306
1311305->1411307
1411307->1511308
1211304->1311309
1111303->1211310
611283->711311
711311->811312
811312->911313
811312->911314
711311->811315
811315->911316
911316->1011317
1011317->1111318
1111318->1211319
1211319->1311320
1311320->1411321
1311320->1411322
1211319->1311323
1111318->1211324
29487->311325
311325->411326
311325->411327
411327->511328
411327->511329
511329->611330
611330->711331
611330->711332
311325->411333
411333->511334
511334->611335
611335->711336
711336->811337
711336->811338
811338->911339
811338->911340
911340->1011341
511334->611342
611342->711343
711343->811344
711343->811345
611342->711346
711346->811347
811347->911348
911348->1011349
911348->1011350
911348->1011351
511334->611352
611352->711353
29487->311354
311354->411355
311354->411356
411356->511357
411356->511358
511358->611359
611359->711360
711360->811361
711360->811362
611359->711363
711363->811364
711363->811365
311354->411366
411366->511367
511367->611368
611368->711369
711369->811370
711369->811371
811371->911372
811371->911373
911373->1011374
511367->611375
611375->711376
711376->811377
711376->811378
611375->711379
711379->811380
811380->911381
911381->1011382
911381->1011383
911381->1011384
1011384->1111385
511367->611386
611386->711387
29487->311388
311388->411389
311388->411390
411390->511391
411390->511392
511392->611393
611393->711394
711394->811395
811395->911396
911396->1011397
1011397->1111398
811395->911399
711394->811400
811400->911401
811400->911402
711394->811403
811403->911404
811403->911405
711394->811406
811406->911407
811406->911408
611393->711409
711409->811410
711409->811411
311388->411412
411412->511413
511413->611414
611414->711415
711415->811416
711415->811417
511413->611418
611418->711419
711419->811420
811420->911421
911421->1011422
1011422->1111423
1011422->1111424
1011422->1111425
1111425->1211426
1111425->1211427
1211427->1311428
1211427->1311429
1211427->1311430
811420->911431
911431->1011432
1011432->1111433
1011432->1111434
1111434->1211435
1111434->1211436
611418->711437
711437->811438
811438->911439
911439->1011440
911439->1011441
811438->911442
911442->1011443
1011443->1111444
1111444->1211445
1211445->1311446
1311446->1411447
1311446->1411448
1211445->1311449
711437->811450
811450->911451
911451->1011452
911451->1011453
811450->911454
911454->1011455
1011455->1111456
1111456->1211457
1211457->1311458
1311458->1411459
1411459->1511460
1411459->1511461
1511461->1611462
1311458->1411463
1211457->1311464
29487->311465
311465->411466
311465->411467
311465->411468
411468->511469
411468->511470
511470->611471
611471->711472
711472->811473
811473->911474
911474->1011475
1011475->1111476
811473->911477
711472->811478
811478->911479
811478->911480
611471->711481
711481->811482
711481->811483
411468->511484
511484->611485
311465->411486
411486->511487
511487->611488
611488->711489
711489->811490
811490->911491
911491->1011492
911491->1011493
1011493->1111494
811490->911495
911495->1011496
911495->1011497
1011497->1111498
711489->811499
811499->911500
811499->911501
911501->1011502
611488->711503
711503->811504
811504->911505
911505->1011506
1011506->1111507
1011506->1111508
1111508->1211509
1111508->1211510
1211510->1311511
1211510->1311512
811504->911513
911513->1011514
1011514->1111515
911513->1011516
1011516->1111517
1111517->1211518
1211518->1311519
1311519->1411520
1411520->1511521
1411520->1511522
1311519->1411523
1411523->1511524
1411523->1511525
1511525->1611526
1511525->1611527
1111517->1211528
1211528->1311529
1311529->1411530
1311529->1411531
1311529->1411532
1411532->1511533
1111517->1211534
1211534->1311535
1311535->1411536
1311535->1411537
1411537->1511538
1211534->1311539
1311539->1411540
1411540->1511541
1511541->1611542
1511541->1611543
1511541->1611544
1211534->1311545
1311545->1411546
1411546->1511547
1511547->1611548
1611548->1711549
1711549->1811550
1711549->1811551
1611548->1711552
1711552->1811553
1711552->1811554
1811554->1911555
1911555->2011556
1911555->2011557
1811554->1911558
1911558->2011559
1911558->2011560
2011560->2111561
2011560->2111562
2111562->2211563
1411546->1511564
1511564->1611565
1611565->1711566
1611565->1711567
1711567->1811568
1711567->1811569
1511564->1611570
1611570->1711571
1611570->1711572
1711572->1811573
1511564->1611574
1611574->1711575
1511564->1611576
1611576->1711577
1711577->1811578
1811578->1911579
1911579->2011580
1911579->2011581
1811578->1911582
1811578->1911583
1911583->2011584
1911583->2011585
2011585->2111586
2011585->2111587
2111587->2211588
2111587->2211589
1411546->1511590
1511590->1611591
1611591->1711592
1611591->1711593
1611591->1711594
911513->1011595
1011595->1111596
1111596->1211597
1211597->1311598
1211597->1311599
1211597->1311600
1311600->1411601
1311600->1411602
1411602->1511603
1411602->1511604
511487->611605
611605->711606
29487->311607
311607->411608
311607->411609
311607->411610
411610->511611
411610->511612
511612->611613
611613->711614
711614->811615
811615->911616
911616->1011617
711614->811618
611613->711619
711619->811620
711619->811621
411610->511622
511622->611623
311607->411624
411624->511625
511625->611626
611626->711627
611626->711628
611626->711629
611626->711630
711630->811631
811631->911632
911632->1011633
1011633->1111634
1011633->1111635
1111635->1211636
1111635->1211637
1211637->1311638
1211637->1311639
1311639->1411640
1311639->1411641
811631->911642
911642->1011643
1011643->1111644
1011643->1111645
911642->1011646
1011646->1111647
1111647->1211648
511625->611649
611649->711650
711650->811651
811651->911652
811651->911653
911653->1011654
911653->1011655
1011655->1111656
911653->1011657
29487->311658
311658->411659
311658->411660
311658->411661
411661->511662
411661->511663
511663->611664
611664->711665
611664->711666
311658->411667
411667->511668
511668->611669
611669->711670
611669->711671
511668->611672
611672->711673
711673->811674
811674->911675
911675->1011676
911675->1011677
1011677->1111678
1011677->1111679
1111679->1211680
1111679->1211681
711673->811682
811682->911683
911683->1011684
1011684->1111685
1011684->1111686
1111686->1211687
811682->911688
911688->1011689
1011689->1111690
1111690->1211691
1111690->1211692
29487->311693
311693->411694
311693->411695
311693->411696
411696->511697
511697->611698
511697->611699
611699->711700
611699->711701
711701->811702
811702->911703
911703->1011704
1011704->1111705
1111705->1211706
911703->1011707
811702->911708
911708->1011709
911708->1011710
511697->611711
29487->311712
311712->411713
311712->411714
311712->411715
411715->511716
411715->511717
511717->611718
611718->711719
711719->811720
711719->811721
811721->911722
911722->1011723
711719->811724
611718->711725
711725->811726
711725->811727
711725->811728
311712->411729
411729->511730
511730->611731
611731->711732
711732->811733
811733->911734
811733->911735
911735->1011736
911735->1011737
1011737->1111738
1111738->1211739
1211739->1311740
1311740->1411741
1411741->1511742
1211739->1311743
1111738->1211744
1211744->1311745
1211744->1311746
811733->911747
911747->1011748
1011748->1111749
1111749->1211750
1211750->1311751
1211750->1311752
1311752->1411753
1311752->1411754
1011748->1111755
1111755->1211756
1211756->1311757
1211756->1311758
1111755->1211759
1211759->1311760
1311760->1411761
1411761->1511762
1511762->1611763
1611763->1711764
1711764->1811765
1711764->1811766
1811766->1911767
1811766->1911768
1911768->2011769
1911768->2011770
2011770->2111771
2011770->2111772
2111772->2211773
1511762->1611774
1611774->1711775
1711775->1811776
1711775->1811777
1811777->1911778
1811777->1911779
1311760->1411780
1411780->1511781
1511781->1611782
1611782->1711783
1611782->1711784
1511781->1611785
1411780->1511786
1511786->1611787
1611787->1711788
1611787->1711789
1511786->1611790
1611790->1711791
1711791->1811792
1811792->1911793
1911793->2011794
1911793->2011795
2011795->2111796
2011795->2111797
2111797->2211798
2011795->2111799
2011795->2111800
1011748->1111801
1111801->1211802
29487->311803
311803->411804
311803->411805
311803->411806
311803->411807
311803->411808
411808->511809
411808->511810
511810->611811
611811->711812
711812->811813
711812->811814
811814->911815
811814->911816
911816->1011817
1011817->1111818
1111818->1211819
1211819->1311820
1311820->1411821
1111818->1211822
1011817->1111823
1111823->1211824
1111823->1211825
711812->811826
811826->911827
911827->1011828
1011828->1111829
1111829->1211830
1111829->1211831
1211831->1311832
1211831->1311833
911827->1011834
1011834->1111835
1111835->1211836
1211836->1311837
1311837->1411838
1411838->1511839
1511839->1611840
1611840->1711841
1411838->1511842
1511842->1611843
1511842->1611844
1611844->1711845
1611844->1711846
1711846->1811847
1211836->1311848
1311848->1411849
1411849->1511850
1411849->1511851
1411849->1511852
1511852->1611853
1511852->1611854
1011834->1111855
1111855->1211856
1211856->1311857
1311857->1411858
1311857->1411859
1211856->1311860
1111855->1211861
1211861->1311862
1311862->1411863
1311862->1411864
1211861->1311865
1311865->1411866
1411866->1511867
1511867->1611868
1611868->1711869
1711869->1811870
1811870->1911871
1911871->2011872
1911871->2011873
1811870->1911874
1711869->1811875
1811875->1911876
1611868->1711877
911827->1011878
1011878->1111879
29487->311880
311880->411881
311880->411882
311880->411883
311880->411884
311880->411885
411885->511886
411885->511887
511887->611888
611888->711889
711889->811890
811890->911891
811890->911892
911892->1011893
1011893->1111894
1011893->1111895
711889->811896
711889->811897
811897->911898
811897->911899
911899->1011900
1011900->1111901
1111901->1211902
1111901->1211903
1011900->1111904
1111904->1211905
1111904->1211906
711889->811907
811907->911908
911908->1011909
1011909->1111910
1111910->1211911
1211911->1311912
1111910->1211913
1211913->1311914
1011909->1111915
1111915->1211916
1211916->1311917
1311917->1411918
1311917->1411919
1411919->1511920
1411919->1511921
911908->1011922
1011922->1111923
29487->311924
311924->411925
311924->411926
311924->411927
311924->411928
411928->511929
511929->611930
311924->411931
411931->511932
411931->511933
511933->611934
511933->611935
611935->711936
711936->811937
611935->711938
711938->811939
29487->311940
311940->411941
311940->411942
311940->411943
411943->511944
511944->611945
311940->411946
411946->511947
411946->511948
511948->611949
611949->711950
511948->611951
29487->311952
311952->411953
311952->411954
311952->411955
411955->511956
411955->511957
511957->611958
611958->711959
611958->711960
311952->411961
411961->511962
511962->611963
611963->711964
611963->711965
29487->311966
311966->411967
311966->411968
311966->411969
411969->511970
411969->511971
311966->411972
411972->511973
511973->611974
611974->711975
711975->811976
511973->611977
611977->711978
711978->811979
711978->811980
-10->011981
011981->111982
111982->211983
211983->311984
311984->411985
411985->511986
511986->611987
611987->711988
011981->111989
111989->211990
211990->311991
311991->411992
411992->511993
011981->111994
111994->211995
211995->311996
311996->411997
411997->511998
011981->111999
111999->212000
212000->312001
312001->412002
412002->512003
011981->112004
112004->212005
212005->312006
112004->212007
212007->312008
212007->312009
312009->412010
112004->212011
112004->212012
212012->312013
312013->412014
312013->412015
412015->512016
212012->312017
312017->412018
312017->412019
412019->512020
212012->312021
312021->412022
312021->412023
412023->512024
212012->312025
312025->412026
312025->412027
412027->512028
212012->312029
312029->412030
312029->412031
412031->512032
212012->312033
312033->412034
312033->412035
412035->512036
-10->012037
012037->112038
112038->212039
212039->312040
312040->412041
412041->512042
012037->112043
112043->212044
112043->212045
212045->312046
312046->412047
312046->412048
312046->412049
412049->512050
412049->512051
512051->612052
612052->712053
712053->812054
812054->912055
812054->912056
712053->812057
612052->712058
712058->812059
812059->912060
812059->912061
712058->812062
312046->412063
412063->512064
512064->612065
612065->712066
712066->812067
712066->812068
812068->912069
812068->912070
912070->1012071
512064->612072
612072->712073
712073->812074
712073->812075
812075->912076
812075->912077
912077->1012078
512064->612079
612079->712080
712080->812081
712080->812082
812082->912083
812082->912084
912084->1012085
912084->1012086
1012086->1112087
1012086->1112088
512064->612089
612089->712090
712090->812091
712090->812092
812092->912093
812092->912094
512064->612095
612095->712096
712096->812097
712096->812098
612095->712099
712099->812100
812100->912101
912101->1012102
1012102->1112103
1012102->1112104
1112104->1212105
1112104->1212106
1212106->1312107
1212106->1312108
812100->912109
912109->1012110
1012110->1112111
1012110->1112112
1112112->1212113
1112112->1212114
1212114->1312115
1212114->1312116
812100->912117
912117->1012118
1012118->1112119
1112119->1212120
1112119->1212121
912117->1012122
1012122->1112123
1112123->1212124
1212124->1312125
1212124->1312126
812100->912127
912127->1012128
1012128->1112129
512064->612130
612130->712131
712131->812132
712131->812133
-10->012134
012134->112135
112135->212136
212136->312137
312137->412138
412138->512139
012134->112140
112140->212141
212141->312142
312142->412143
012134->112144
112144->212145
112144->212146
212146->312147
312147->412148
312147->412149
312147->412150
412150->512151
412150->512152
512152->612153
612153->712154
712154->812155
812155->912156
912156->1012157
712154->812158
612153->712159
712159->812160
812160->912161
912161->1012162
712159->812163
312147->412164
412164->512165
512165->612166
612166->712167
712167->812168
812168->912169
812168->912170
712167->812171
812171->912172
812171->912173
912173->1012174
912173->1012175
1012175->1112176
1012175->1112177
1112177->1212178
512165->612179
612179->712180
712180->812181
812181->912182
812181->912183
712180->812184
812184->912185
812184->912186
912186->1012187
912186->1012188
1012188->1112189
1012188->1112190
1112190->1212191
512165->612192
612192->712193
712193->812194
712193->812195
812195->912196
812195->912197
212146->312198
312198->412199
312198->412200
312198->412201
412201->512202
412201->512203
512203->612204
612204->712205
712205->812206
812206->912207
812206->912208
712205->812209
612204->712210
712210->812211
812211->912212
812211->912213
712210->812214
312198->412215
412215->512216
512216->612217
612217->712218
712218->812219
712218->812220
812220->912221
812220->912222
512216->612223
612223->712224
712224->812225
712224->812226
812226->912227
812226->912228
512216->612229
612229->712230
712230->812231
712230->812232
812232->912233
812232->912234
912234->1012235
912234->1012236
1012236->1112237
1112237->1212238
1112237->1212239
1012236->1112240
1112240->1212241
1112240->1212242
512216->612243
612243->712244
612243->712245
712245->812246
812246->912247
912247->1012248
1012248->1112249
1112249->1212250
1112249->1212251
1012248->1112252
1112252->1212253
1112252->1212254
912247->1012255
1012255->1112256
1112256->1212257
1212257->1312258
912247->1012259
1012259->1112260
1112260->1212261
1212261->1312262
812246->912263
912263->1012264
1012264->1112265
1112265->1212266
1112265->1212267
1212267->1312268
1012264->1112269
1112269->1212270
1112269->1212271
1212271->1312272
912263->1012273
1012273->1112274
812246->912275
912275->1012276
1012276->1112277
1112277->1212278
1112277->1212279
1212279->1312280
1312280->1412281
1312280->1412282
1212279->1312283
1312283->1412284
1312283->1412285
1012276->1112286
912275->1012287
1012287->1112288
1112288->1212289
1212289->1312290
1212289->1312291
1212289->1312292
1312292->1412293
1312292->1412294
1412294->1512295
1512295->1612296
1512295->1612297
1412294->1512298
1512298->1612299
1512298->1612300
512216->612301
612301->712302
212146->312303
312303->412304
312303->412305
312303->412306
412306->512307
412306->512308
512308->612309
612309->712310
712310->812311
812311->912312
812311->912313
712310->812314
612309->712315
712315->812316
812316->912317
812316->912318
712315->812319
312303->412320
412320->512321
512321->612322
612322->712323
712323->812324
712323->812325
812325->912326
812325->912327
512321->612328
612328->712329
712329->812330
712329->812331
812331->912332
812331->912333
512321->612334
612334->712335
612334->712336
612334->712337
612334->712338
712338->812339
812339->912340
812339->912341
812339->912342
512321->612343
612343->712344
612343->712345
612343->712346
612343->712347
712347->812348
812348->912349
812348->912350
812348->912351
512321->612352
612352->712353
712353->812354
712353->812355
812355->912356
912356->1012357
912356->1012358
1012358->1112359
812355->912360
912360->1012361
912360->1012362
1012362->1112363
-10->012364
012364->112365
112365->212366
212366->312367
312367->412368
412368->512369
512369->612370
612370->712371
712371->812372
012364->112373
112373->212374
212374->312375
312375->412376
412376->512377
512377->612378
612378->712379
712379->812380
012364->112381
112381->212382
112381->212383
212383->312384
312384->412385
312384->412386
312384->412387
412387->512388
412387->512389
512389->612390
612390->712391
712391->812392
812392->912393
812392->912394
712391->812395
612390->712396
712396->812397
712396->812398
312384->412399
412399->512400
512400->612401
612401->712402
712402->812403
712402->812404
812404->912405
812404->912406
912406->1012407
1012407->1112408
912406->1012409
512400->612410
612410->712411
712411->812412
812412->912413
712411->812414
612410->712415
712415->812416
812416->912417
512400->612418
612418->712419
712419->812420
712419->812421
812421->912422
812421->912423
512400->612424
612424->712425
712425->812426
712425->812427
612424->712428
712428->812429
812429->912430
912430->1012431
1012431->1112432
1012431->1112433
1112433->1212434
1112433->1212435
1212435->1312436
1312436->1412437
1412437->1512438
1412437->1512439
1212435->1312440
812429->912441
912441->1012442
1012442->1112443
1012442->1112444
1112444->1212445
1112444->1212446
1212446->1312447
1312447->1412448
1312447->1412449
1212446->1312450
1312450->1412451
812429->912452
912452->1012453
1012453->1112454
1012453->1112455
912452->1012456
1012456->1112457
1112457->1212458
1112457->1212459
1112457->1212460
1212460->1312461
1212460->1312462
912452->1012463
1012463->1112464
1112464->1212465
1112464->1212466
1012463->1112467
1112467->1212468
1212468->1312469
1212468->1312470
1212468->1312471
1312471->1412472
1312471->1412473
1012463->1112474
1112474->1212475
512400->612476
612476->712477
712477->812478
812478->912479
912479->1012480
912479->1012481
212383->312482
312482->412483
312482->412484
312482->412485
412485->512486
412485->512487
512487->612488
612488->712489
712489->812490
812490->912491
812490->912492
712489->812493
612488->712494
712494->812495
712494->812496
312482->412497
412497->512498
512498->612499
612499->712500
712500->812501
712500->812502
812502->912503
812502->912504
912504->1012505
1012505->1112506
912504->1012507
512498->612508
612508->712509
712509->812510
812510->912511
712509->812512
612508->712513
712513->812514
812514->912515
512498->612516
612516->712517
712517->812518
712517->812519
812519->912520
812519->912521
512498->612522
612522->712523
712523->812524
712523->812525
612522->712526
712526->812527
812527->912528
912528->1012529
1012529->1112530
1012529->1112531
1112531->1212532
1112531->1212533
1212533->1312534
1312534->1412535
1412535->1512536
1412535->1512537
1212533->1312538
812527->912539
912539->1012540
1012540->1112541
1012540->1112542
1112542->1212543
1112542->1212544
1212544->1312545
1312545->1412546
1312545->1412547
1212544->1312548
1312548->1412549
812527->912550
912550->1012551
1012551->1112552
1012551->1112553
912550->1012554
1012554->1112555
1112555->1212556
1112555->1212557
1112555->1212558
1212558->1312559
1212558->1312560
912550->1012561
1012561->1112562
1112562->1212563
1112562->1212564
1012561->1112565
1112565->1212566
1212566->1312567
1212566->1312568
1212566->1312569
1312569->1412570
1312569->1412571
1012561->1112572
1112572->1212573
512498->612574
612574->712575
712575->812576
812576->912577
912577->1012578
912577->1012579
-10->012580
012580->112581
112581->212582
212582->312583
312583->412584
412584->512585
512585->612586
612586->712587
012580->112588
112588->212589
212589->312590
312590->412591
412591->512592
512592->612593
612593->712594
012580->112595
112595->212596
212596->312597
312597->412598
412598->512599
512599->612600
612600->712601
012580->112602
112602->212603
212603->312604
312604->412605
412605->512606
512606->612607
012580->112608
112608->212609
212609->312610
312610->412611
412611->512612
512612->612613
612613->712614
012580->112615
112615->212616
212616->312617
312617->412618
412618->512619
512619->612620
012580->112621
112621->212622
112621->212623
212623->312624
312624->412625
312624->412626
312624->412627
212623->312628
312628->412629
312628->412630
312628->412631
212623->312632
312632->412633
312632->412634
412634->512635
412634->512636
512636->612637
612637->712638
612637->712639
512636->612640
612640->712641
612640->712642
312632->412643
412643->512644
512644->612645
612645->712646
712646->812647
812647->912648
712646->812649
712646->812650
512644->612651
612651->712652
712652->812653
812653->912654
712652->812655
712652->812656
212623->312657
312657->412658
312657->412659
412659->512660
412659->512661
512661->612662
612662->712663
612662->712664
512661->612665
612665->712666
612665->712667
312657->412668
412668->512669
512669->612670
612670->712671
712671->812672
812672->912673
712671->812674
712671->812675
812675->912676
812675->912677
512669->612678
612678->712679
712679->812680
812680->912681
712679->812682
712679->812683
212623->312684
312684->412685
312684->412686
412686->512687
412686->512688
312684->412689
412689->512690
512690->612691
612691->712692
712692->812693
712692->812694
812694->912695
812694->912696
912696->1012697
512690->612698
612698->712699
612698->712700
712700->812701
812701->912702
912702->1012703
1012703->1112704
812701->912705
712700->812706
812706->912707
912707->1012708
1012708->1112709
1112709->1212710
912707->1012711
1012711->1112712
1112712->1212713
912707->1012714
1012714->1112715
1112715->1212716
812706->912717
912717->1012718
1012718->1112719
1112719->1212720
1112719->1212721
1112719->1212722
1212722->1312723
912717->1012724
1012724->1112725
1112725->1212726
1112725->1212727
1112725->1212728
1212728->1312729
912717->1012730
712700->812731
812731->912732
912732->1012733
1012733->1112734
812731->912735
912735->1012736
1012736->1112737
1112737->1212738
1112737->1212739
1112737->1212740
1212740->1312741
912735->1012742
712700->812743
812743->912744
912744->1012745
1012745->1112746
812743->912747
912747->1012748
1012748->1112749
1112749->1212750
1112749->1212751
1112749->1212752
1212752->1312753
912747->1012754
1012754->1112755
1112755->1212756
1112755->1212757
1112755->1212758
1212758->1312759
912747->1012760
712700->812761
812761->912762
912762->1012763
1012763->1112764
812761->912765
912765->1012766
1012766->1112767
1112767->1212768
1212768->1312769
1312769->1412770
1212768->1312771
1112767->1212772
1012766->1112773
1112773->1212774
1212774->1312775
1312775->1412776
1412776->1512777
1412776->1512778
1412776->1512779
1512779->1612780
1212774->1312781
1312781->1412782
1412782->1512783
1412782->1512784
1412782->1512785
1512785->1612786
1012766->1112787
1112787->1212788
1212788->1312789
1312789->1412790
1412790->1512791
1412790->1512792
1412790->1512793
1512793->1612794
1212788->1312795
1312795->1412796
1412796->1512797
1412796->1512798
1412796->1512799
1512799->1612800
912765->1012801
712700->812802
812802->912803
812802->912804
512690->612805
612805->712806
212623->312807
312807->412808
412808->512809
312807->412810
312807->412811
412811->512812
412811->512813
312807->412814
412814->512815
512815->612816
612816->712817
712817->812818
812818->912819
912819->1012820
1012820->1112821
1112821->1212822
1112821->1212823
1012820->1112824
912819->1012825
812818->912826
712817->812827
612816->712828
212623->312829
312829->412830
312829->412831
312829->412832
412832->512833
412832->512834
512834->612835
612835->712836
712836->812837
712836->812838
612835->712839
712839->812840
712839->812841
312829->412842
412842->512843
512843->612844
612844->712845
712845->812846
712845->812847
812847->912848
812847->912849
512843->612850
612850->712851
712851->812852
712851->812853
812853->912854
812853->912855
912855->1012856
512843->612857
612857->712858
712858->812859
712858->812860
812860->912861
812860->912862
512843->612863
612863->712864
612863->712865
712865->812866
812866->912867
912867->1012868
1012868->1112869
812866->912870
712865->812871
812871->912872
912872->1012873
1012873->1112874
1112874->1212875
912872->1012876
1012876->1112877
1112877->1212878
912872->1012879
1012879->1112880
1112880->1212881
812871->912882
912882->1012883
1012883->1112884
1112884->1212885
1112884->1212886
1112884->1212887
1212887->1312888
912882->1012889
1012889->1112890
1112890->1212891
1112890->1212892
1112890->1212893
1212893->1312894
912882->1012895
712865->812896
812896->912897
912897->1012898
1012898->1112899
812896->912900
912900->1012901
1012901->1112902
1112902->1212903
1112902->1212904
1112902->1212905
1212905->1312906
912900->1012907
712865->812908
812908->912909
912909->1012910
1012910->1112911
812908->912912
912912->1012913
1012913->1112914
1112914->1212915
1112914->1212916
1112914->1212917
1212917->1312918
912912->1012919
1012919->1112920
1112920->1212921
1112920->1212922
1112920->1212923
1212923->1312924
912912->1012925
712865->812926
812926->912927
912927->1012928
1012928->1112929
812926->912930
912930->1012931
1012931->1112932
1112932->1212933
1112932->1212934
1112932->1212935
1212935->1312936
912930->1012937
1012937->1112938
1112938->1212939
1112938->1212940
1112938->1212941
1212941->1312942
912930->1012943
712865->812944
812944->912945
812944->912946
512843->612947
612947->712948
712948->812949
812949->912950
812949->912951
812949->912952
912952->1012953
1012953->1112954
1012953->1112955
-10->012956
012956->112957
112957->212958
212958->312959
312959->412960
412960->512961
512961->612962
612962->712963
012956->112964
112964->212965
212965->312966
312966->412967
412967->512968
512968->612969
512968->612970
412967->512971
312966->412972
412972->512973
512973->612974
212965->312975
312975->412976
412976->512977
412976->512978
512978->612979
612979->712980
612979->712981
312975->412982
412982->512983
512983->612984
612984->712985
612984->712986
212965->312987
312987->412988
412988->512989
412988->512990
512990->612991
612991->712992
712992->812993
712992->812994
612991->712995
712995->812996
712995->812997
312987->412998
412998->512999
512999->613000
613000->713001
713001->813002
713001->813003
613000->713004
613000->713005
212965->313006
313006->413007
413007->513008
413007->513009
313006->413010
413010->513011
513011->613012
613012->713013
713013->813014
713013->813015
212965->313016
313016->413017
413017->513018
413017->513019
313016->413020
413020->513021
513021->613022
212965->313023
313023->413024
413024->513025
413024->513026
313023->413027
413027->513028
513028->613029
613029->713030
713030->813031
713030->813032
513028->613033
613033->713034
713034->813035
713034->813036
713034->813037
513028->613038
613038->713039
713039->813040
713039->813041
713039->813042
513028->613043
613043->713044
713044->813045
713044->813046
713044->813047
212965->313048
313048->413049
413049->513050
413049->513051
513051->613052
613052->713053
613052->713054
313048->413055
413055->513056
513056->613057
613057->713058
713058->813059
713058->813060
613057->713061
713061->813062
813062->913063
913063->1013064
913063->1013065
1013065->1113066
1013065->1113067
513056->613068
613068->713069
713069->813070
813070->913071
813070->913072
913072->1013073
913072->1013074
713069->813075
713069->813076
212965->313077
313077->413078
413078->513079
413078->513080
313077->413081
413081->513082
513082->613083
613083->713084
212965->313085
313085->413086
413086->513087
413086->513088
513088->613089
613089->713090
613089->713091
313085->413092
413092->513093
513093->613094
613094->713095
713095->813096
713095->813097
613094->713098
713098->813099
813099->913100
913100->1013101
913100->1013102
513093->613103
613103->713104
713104->813105
713104->813106
713104->813107
212965->313108
313108->413109
413109->513110
413109->513111
513111->613112
613112->713113
713113->813114
713113->813115
613112->713116
713116->813117
713116->813118
313108->413119
413119->513120
513120->613121
613121->713122
713122->813123
713122->813124
613121->713125
713125->813126
813126->913127
913127->1013128
913127->1013129
513120->613130
613130->713131
713131->813132
713131->813133
613130->713134
713134->813135
813135->913136
913136->1013137
1013137->1113138
1013137->1113139
1113139->1213140
1113139->1213141
913136->1013142
913136->1013143
212965->313144
313144->413145
413145->513146
413145->513147
513147->613148
613148->713149
613148->713150
313144->413151
413151->513152
513152->613153
613153->713154
613153->713155
513152->613156
613156->713157
713157->813158
813158->913159
813158->913160
212965->313161
313161->413162
313161->413163
413163->513164
413163->513165
513165->613166
613166->713167
613166->713168
313161->413169
413169->513170
513170->613171
613171->713172
713172->813173
713172->813174
513170->613175
613175->713176
713176->813177
713176->813178
813178->913179
813178->913180
613175->713181
713181->813182
813182->913183
913183->1013184
913183->1013185
913183->1013186
613175->713187
713187->813188
813188->913189
913189->1013190
1013190->1113191
1013190->1113192
1013190->1113193
813188->913194
913194->1013195
1013195->1113196
1013195->1113197
913194->1013198
1013198->1113199
1113199->1213200
1213200->1313201
1213200->1313202
1213200->1313203
513170->613204
613204->713205
713205->813206
813206->913207
813206->913208
713205->813209
813209->913210
813209->913211
913211->1013212
913211->1013213
1013213->1113214
513170->613215
613215->713216
713216->813217
713216->813218
613215->713219
713219->813220
813220->913221
913221->1013222
913221->1013223
1013223->1113224
1013223->1113225
1013223->1113226
1013223->1113227
1013223->1113228
513170->613229
613229->713230
713230->813231
713230->813232
713230->813233
513170->613234
613234->713235
713235->813236
713235->813237
713235->813238
212965->313239
313239->413240
313239->413241
413241->513242
413241->513243
313239->413244
212965->313245
313245->413246
313245->413247
313245->413248
212965->313249
313249->413250
313249->413251
313249->413252
-10->013253
013253->113254
113254->213255
213255->313256
313256->413257
413257->513258
513258->613259
613259->713260
013253->113261
113261->213262
213262->313263
313263->413264
413264->513265
513265->613266
513265->613267
413264->513268
313263->413269
413269->513270
513270->613271
213262->313272
313272->413273
413273->513274
413273->513275
513275->613276
613276->713277
613276->713278
313272->413279
413279->513280
513280->613281
613281->713282
613281->713283
213262->313284
313284->413285
413285->513286
413285->513287
513287->613288
613288->713289
713289->813290
713289->813291
613288->713292
713292->813293
713292->813294
313284->413295
413295->513296
513296->613297
613297->713298
713298->813299
713298->813300
613297->713301
613297->713302
213262->313303
313303->413304
413304->513305
413304->513306
313303->413307
413307->513308
513308->613309
613309->713310
713310->813311
713310->813312
213262->313313
313313->413314
413314->513315
413314->513316
313313->413317
413317->513318
513318->613319
213262->313320
313320->413321
413321->513322
413321->513323
313320->413324
413324->513325
513325->613326
613326->713327
713327->813328
713327->813329
513325->613330
613330->713331
713331->813332
713331->813333
713331->813334
513325->613335
613335->713336
713336->813337
713336->813338
713336->813339
513325->613340
613340->713341
713341->813342
713341->813343
713341->813344
213262->313345
313345->413346
413346->513347
413346->513348
513348->613349
613349->713350
613349->713351
313345->413352
413352->513353
513353->613354
613354->713355
713355->813356
713355->813357
613354->713358
713358->813359
813359->913360
913360->1013361
913360->1013362
1013362->1113363
1013362->1113364
513353->613365
613365->713366
713366->813367
813367->913368
813367->913369
913369->1013370
913369->1013371
713366->813372
713366->813373
213262->313374
313374->413375
413375->513376
413375->513377
313374->413378
413378->513379
513379->613380
613380->713381
213262->313382
313382->413383
413383->513384
413383->513385
513385->613386
613386->713387
613386->713388
313382->413389
413389->513390
513390->613391
613391->713392
713392->813393
713392->813394
613391->713395
713395->813396
813396->913397
913397->1013398
913397->1013399
513390->613400
613400->713401
713401->813402
713401->813403
713401->813404
213262->313405
313405->413406
413406->513407
413406->513408
513408->613409
613409->713410
713410->813411
713410->813412
613409->713413
713413->813414
713413->813415
313405->413416
413416->513417
513417->613418
613418->713419
713419->813420
713419->813421
613418->713422
713422->813423
813423->913424
913424->1013425
913424->1013426
513417->613427
613427->713428
713428->813429
713428->813430
613427->713431
713431->813432
813432->913433
913433->1013434
1013434->1113435
1013434->1113436
1113436->1213437
1113436->1213438
913433->1013439
913433->1013440
213262->313441
313441->413442
413442->513443
413442->513444
513444->613445
613445->713446
613445->713447
313441->413448
413448->513449
513449->613450
613450->713451
613450->713452
513449->613453
613453->713454
713454->813455
813455->913456
813455->913457
213262->313458
313458->413459
313458->413460
413460->513461
413460->513462
513462->613463
613463->713464
613463->713465
313458->413466
413466->513467
513467->613468
613468->713469
713469->813470
713469->813471
513467->613472
613472->713473
713473->813474
713473->813475
813475->913476
813475->913477
613472->713478
713478->813479
813479->913480
913480->1013481
913480->1013482
913480->1013483
613472->713484
713484->813485
813485->913486
913486->1013487
1013487->1113488
1013487->1113489
1013487->1113490
813485->913491
913491->1013492
1013492->1113493
1013492->1113494
913491->1013495
1013495->1113496
1113496->1213497
1213497->1313498
1213497->1313499
1213497->1313500
513467->613501
613501->713502
713502->813503
813503->913504
813503->913505
713502->813506
813506->913507
813506->913508
913508->1013509
913508->1013510
1013510->1113511
513467->613512
613512->713513
713513->813514
713513->813515
613512->713516
713516->813517
813517->913518
913518->1013519
913518->1013520
1013520->1113521
1013520->1113522
1013520->1113523
1013520->1113524
1013520->1113525
513467->613526
613526->713527
713527->813528
713527->813529
713527->813530
513467->613531
613531->713532
713532->813533
713532->813534
713532->813535
213262->313536
313536->413537
313536->413538
413538->513539
413538->513540
313536->413541
213262->313542
313542->413543
313542->413544
313542->413545
213262->313546
313546->413547
313546->413548
313546->413549
-10->013550
013550->113551
113551->213552
213552->313553
313553->413554
413554->513555
513555->613556
613556->713557
013550->113558
113558->213559
213559->313560
313560->413561
413561->513562
513562->613563
613563->713564
713564->813565
013550->113566
113566->213567
113566->213568
213568->313569
113566->213570
213570->313571
313571->413572
313571->413573
413573->513574
413573->513575
513575->613576
613576->713577
613576->713578
513575->613579
613579->713580
713580->813581
713580->813582
613579->713583
313571->413584
413584->513585
513585->613586
613586->713587
613586->713588
213570->313589
313589->413590
313589->413591
413591->513592
413591->513593
513593->613594
513593->613595
313589->413596
413596->513597
513597->613598
213570->313599
313599->413600
313599->413601
413601->513602
413601->513603
513603->613604
613604->713605
713605->813606
813606->913607
913607->1013608
913607->1013609
813606->913610
713605->813611
813611->913612
913612->1013613
913612->1013614
813611->913615
713605->813616
813616->913617
913617->1013618
913617->1013619
813616->913620
713605->813621
813621->913622
913622->1013623
913622->1013624
813621->913625
613604->713626
713626->813627
713626->813628
313599->413629
413629->513630
513630->613631
613631->713632
613631->713633
713633->813634
713633->813635
513630->613636
613636->713637
613636->713638
713638->813639
513630->613640
613640->713641
513630->613642
613642->713643
713643->813644
813644->913645
913645->1013646
913645->1013647
813644->913648
913648->1013649
913648->1013650
713643->813651
713643->813652
813652->913653
913653->1013654
1013654->1113655
1113655->1213656
1113655->1213657
1213657->1313658
1313658->1413659
1313658->1413660
1213657->1313661
1213657->1313662
1213657->1313663
1213657->1313664
913653->1013665
1013665->1113666
1113666->1213667
1213667->1313668
1313668->1413669
1313668->1413670
1213667->1313671
1113666->1213672
1213672->1313673
1313673->1413674
1313673->1413675
1213672->1313676
1313676->1413677
1013665->1113678
1113678->1213679
1213679->1313680
1213679->1313681
1313681->1413682
1413682->1513683
1413682->1513684
1313681->1413685
1413685->1513686
1313681->1413687
1313681->1413688
1313681->1413689
1013665->1113690
1113690->1213691
1213691->1313692
1313692->1413693
213570->313694
313694->413695
313694->413696
413696->513697
413696->513698
513698->613699
613699->713700
713700->813701
813701->913702
813701->913703
713700->813704
813704->913705
813704->913706
713700->813707
813707->913708
913708->1013709
913708->1013710
813707->913711
713700->813712
813712->913713
913713->1013714
913713->1013715
813712->913716
613699->713717
713717->813718
713717->813719
313694->413720
413720->513721
513721->613722
613722->713723
713723->813724
713723->813725
813725->913726
813725->913727
913727->1013728
913727->1013729
1013729->1113730
1013729->1113731
513721->613732
613732->713733
713733->813734
813734->913735
813734->913736
713733->813737
713733->813738
813738->913739
813738->913740
913740->1013741
913740->1013742
513721->613743
613743->713744
713744->813745
813745->913746
813745->913747
713744->813748
713744->813749
513721->613750
613750->713751
713751->813752
813752->913753
813752->913754
713751->813755
713751->813756
213570->313757
313757->413758
313757->413759
413759->513760
413759->513761
513761->613762
613762->713763
713763->813764
813764->913765
913765->1013766
913765->1013767
813764->913768
713763->813769
813769->913770
913770->1013771
913770->1013772
813769->913773
613762->713774
713774->813775
713774->813776
313757->413777
413777->513778
513778->613779
613779->713780
613779->713781
713781->813782
713781->813783
513778->613784
613784->713785
613784->713786
713786->813787
513778->613788
613788->713789
513778->613790
613790->713791
713791->813792
813792->913793
913793->1013794
913793->1013795
813792->913796
813792->913797
913797->1013798
913797->1013799
1013799->1113800
1113800->1213801
1213801->1313802
1313802->1413803
1413803->1513804
1413803->1513805
1313802->1413806
1413806->1513807
1513807->1613808
1613808->1713809
1613808->1713810
1713810->1813811
1713810->1813812
1413806->1513813
1513813->1613814
1513813->1613815
1113800->1213816
-10->013817
013817->113818
113818->213819
213819->313820
313820->413821
413821->513822
513822->613823
013817->113824
113824->213825
213825->313826
313826->413827
413827->513828
513828->613829
613829->713830
013817->113831
113831->213832
113831->213833
213833->313834
113831->213835
213835->313836
313836->413837
313836->413838
413838->513839
513839->613840
313836->413841
213835->313842
313842->413843
313842->413844
413844->513845
313842->413846
413846->513847
513847->613848
613848->713849
613848->713850
613848->713851
713851->813852
813852->913853
213835->313854
313854->413855
313854->413856
413856->513857
513857->613858
613858->713859
413856->513860
313854->413861
413861->513862
513862->613863
213835->313864
313864->413865
313864->413866
413866->513867
413866->513868
313864->413869
413869->513870
513870->613871
613871->713872
-10->013873
013873->113874
113874->213875
213875->313876
313876->413877
413877->513878
513878->613879
013873->113880
113880->213881
213881->313882
313882->413883
413883->513884
513884->613885
613885->713886
013873->113887
113887->213888
213888->313889
313889->413890
413890->513891
513891->613892
613892->713893
013873->113894
113894->213895
213895->313896
313896->413897
413897->513898
513898->613899
613899->713900
013873->113901
113901->213902
213902->313903
313903->413904
413904->513905
513905->613906
613906->713907
013873->113908
113908->213909
213909->313910
313910->413911
413911->513912
513912->613913
613913->713914
013873->113915
113915->213916
213916->313917
313917->413918
413918->513919
513919->613920
013873->113921
113921->213922
213922->313923
313923->413924
413924->513925
513925->613926
613926->713927
013873->113928
113928->213929
213929->313930
313930->413931
413931->513932
513932->613933
613933->713934
013873->113935
113935->213936
213936->313937
313937->413938
413938->513939
513939->613940
013873->113941
113941->213942
213942->313943
313943->413944
013873->113945
113945->213946
213946->313947
313947->413948
013873->113949
113949->213950
213950->313951
013873->113952
113952->213953
213953->313954
313954->413955
413955->513956
513956->613957
013873->113958
113958->213959
113958->213960
213960->313961
313961->413962
313961->413963
413963->513964
413963->513965
513965->613966
613966->713967
713967->813968
813968->913969
913969->1013970
1013970->1113971
1013970->1113972
713967->813973
613966->713974
713974->813975
813975->913976
913976->1013977
1013977->1113978
1013977->1113979
713974->813980
313961->413981
413981->513982
513982->613983
613983->713984
713984->813985
713984->813986
813986->913987
913987->1013988
1013988->1113989
1013988->1113990
613983->713991
613983->713992
713992->813993
613983->713994
713994->813995
813995->913996
913996->1013997
1013997->1113998
1013997->1113999
1113999->1214000
1113999->1214001
1214001->1314002
1214001->1314003
1314003->1414004
813995->914005
914005->1014006
1014006->1114007
1014006->1114008
914005->1014009
1014009->1114010
1114010->1214011
1214011->1314012
1214011->1314013
513982->614014
614014->714015
714015->814016
714015->814017
814017->914018
914018->1014019
1014019->1114020
1014019->1114021
614014->714022
614014->714023
714023->814024
614014->714025
714025->814026
814026->914027
914027->1014028
1014028->1114029
1014028->1114030
1114030->1214031
1114030->1214032
1214032->1314033
1214032->1314034
1314034->1414035
814026->914036
914036->1014037
1014037->1114038
1114038->1214039
1114038->1214040
914036->1014041
1014041->1114042
1114042->1214043
1214043->1314044
1214043->1314045
1314045->1414046
1314045->1414047
1414047->1514048
213960->314049
314049->414050
314049->414051
414051->514052
414051->514053
514053->614054
614054->714055
714055->814056
814056->914057
914057->1014058
1014058->1114059
1114059->1214060
1114059->1214061
814056->914062
714055->814063
814063->914064
914064->1014065
1014065->1114066
1114066->1214067
1114066->1214068
814063->914069
614054->714070
714070->814071
714070->814072
314049->414073
414073->514074
514074->614075
614075->714076
614075->714077
714077->814078
814078->914079
914079->1014080
914079->1014081
514074->614082
514074->614083
614083->714084
514074->614085
614085->714086
714086->814087
814087->914088
914088->1014089
914088->1014090
1014090->1114091
1014090->1114092
1114092->1214093
714086->814094
814094->914095
914095->1014096
914095->1014097
1014097->1114098
1014097->1114099
1114099->1214100
1114099->1214101
1214101->1314102
714086->814103
814103->914104
914104->1014105
914104->1014106
814103->914107
914107->1014108
1014108->1114109
1014108->1114110
1014108->1114111
1114111->1214112
1114111->1214113
1214113->1314114
1214113->1314115
1314115->1414116
1114111->1214117
1214117->1314118
714086->814119
814119->914120
914120->1014121
914120->1014122
1014122->1114123
1014122->1114124
213960->314125
314125->414126
314125->414127
414127->514128
414127->514129
514129->614130
614130->714131
714131->814132
814132->914133
914133->1014134
1014134->1114135
1114135->1214136
1114135->1214137
814132->914138
714131->814139
814139->914140
814139->914141
614130->714142
714142->814143
714142->814144
314125->414145
414145->514146
514146->614147
614147->714148
714148->814149
714148->814150
814150->914151
814150->914152
914152->1014153
514146->614154
614154->714155
614154->714156
614154->714157
614154->714158
714158->814159
814159->914160
914160->1014161
1014161->1114162
1014161->1114163
814159->914164
914164->1014165
514146->614166
614166->714167
614166->714168
714168->814169
814169->914170
814169->914171
814169->914172
914172->1014173
514146->614174
614174->714175
714175->814176
814176->914177
914177->1014178
1014178->1114179
1014178->1114180
1114180->1214181
1214181->1314182
1314182->1414183
1314182->1414184
714175->814185
814185->914186
814185->914187
914187->1014188
514146->614189
614189->714190
714190->814191
714190->814192
814192->914193
914193->1014194
1014194->1114195
1014194->1114196
614189->714197
614189->714198
614189->714199
714199->814200
814200->914201
914201->1014202
914201->1014203
1014203->1114204
1114204->1214205
1014203->1114206
1114206->1214207
514146->614208
614208->714209
213960->314210
314210->414211
314210->414212
414212->514213
414212->514214
514214->614215
614215->714216
714216->814217
714216->814218
614215->714219
714219->814220
814220->914221
914221->1014222
714219->814223
314210->414224
414224->514225
514225->614226
614226->714227
614226->714228
714228->814229
714228->814230
714228->814231
213960->314232
314232->414233
314232->414234
414234->514235
414234->514236
514236->614237
614237->714238
714238->814239
814239->914240
814239->914241
714238->814242
814242->914243
914243->1014244
1014244->1114245
814242->914246
614237->714247
714247->814248
714247->814249
314232->414250
414250->514251
514251->614252
614252->714253
714253->814254
714253->814255
814255->914256
814255->914257
514251->614258
614258->714259
614258->714260
714260->814261
814261->914262
914262->1014263
914262->1014264
914262->1014265
1014265->1114266
514251->614267
614267->714268
714268->814269
714268->814270
814270->914271
814270->914272
614267->714273
714273->814274
514251->614275
614275->714276
714276->814277
814277->914278
914278->1014279
1014279->1114280
1014279->1114281
714276->814282
814282->914283
814282->914284
914284->1014285
1014285->1114286
1114286->1214287
1114286->1214288
514251->614289
614289->714290
714290->814291
814291->914292
814291->914293
914293->1014294
914293->1014295
914293->1014296
614289->714297
714297->814298
514251->614299
614299->714300
714300->814301
714300->814302
814302->914303
814302->914304
514251->614305
614305->714306
714306->814307
714306->814308
514251->614309
614309->714310
714310->814311
714310->814312
814312->914313
814312->914314
514251->614315
614315->714316
714316->814317
714316->814318
814318->914319
814318->914320
814318->914321
914321->1014322
514251->614323
614323->714324
213960->314325
314325->414326
314325->414327
414327->514328
414327->514329
514329->614330
614330->714331
714331->814332
714331->814333
614330->714334
714334->814335
814335->914336
914336->1014337
714334->814338
314325->414339
414339->514340
514340->614341
614341->714342
714342->814343
714342->814344
814344->914345
814344->914346
914346->1014347
914346->1014348
1014348->1114349
1014348->1114350
1114350->1214351
514340->614352
614352->714353
714353->814354
714353->814355
614352->714356
714356->814357
514340->614358
614358->714359
714359->814360
714359->814361
814361->914362
814361->914363
914363->1014364
514340->614365
614365->714366
714366->814367
814367->914368
814367->914369
714366->814370
814370->914371
814370->914372
914372->1014373
914372->1014374
1014374->1114375
514340->614376
614376->714377
714377->814378
714377->814379
814379->914380
814379->914381
614376->714382
714382->814383
714382->814384
814384->914385
614376->714386
714386->814387
614376->714388
714388->814389
814389->914390
914390->1014391
1014391->1114392
1014391->1114393
914390->1014394
914390->1014395
1014395->1114396
514340->614397
614397->714398
714398->814399
714398->814400
814400->914401
814400->914402
514340->614403
614403->714404
213960->314405
314405->414406
314405->414407
414407->514408
414407->514409
514409->614410
614410->714411
714411->814412
814412->914413
814412->914414
714411->814415
814415->914416
914416->1014417
1014417->1114418
814415->914419
614410->714420
714420->814421
814421->914422
914422->1014423
1014423->1114424
1014423->1114425
1114425->1214426
1214426->1314427
1314427->1414428
1314427->1414429
714420->814430
314405->414431
414431->514432
514432->614433
614433->714434
714434->814435
814435->914436
714434->814437
814437->914438
614433->714439
714439->814440
814440->914441
914441->1014442
1014442->1114443
1014442->1114444
814440->914445
914445->1014446
514432->614447
614447->714448
714448->814449
814449->914450
914450->1014451
1014451->1114452
1014451->1114453
1114453->1214454
1114453->1214455
1214455->1314456
1314456->1414457
1314456->1414458
1414458->1514459
1414458->1514460
1514460->1614461
814449->914462
914462->1014463
1014463->1114464
1014463->1114465
1114465->1214466
814449->914467
914467->1014468
1014468->1114469
1014468->1114470
1114470->1214471
1214471->1314472
1314472->1414473
1314472->1414474
914467->1014475
914467->1014476
914467->1014477
1014477->1114478
1114478->1214479
1214479->1314480
1314480->1414481
1414481->1514482
1414481->1514483
1314480->1414484
1414484->1514485
1414484->1514486
1514486->1614487
1614487->1714488
1514486->1614489
1114478->1214490
1214490->1314491
1314491->1414492
1314491->1414493
1414493->1514494
1114478->1214495
1214495->1314496
1214495->1314497
1214495->1314498
1214495->1314499
1314499->1414500
1414500->1514501
1514501->1614502
1514501->1614503
814449->914504
914504->1014505
1014505->1114506
1014505->1114507
814449->914508
914508->1014509
1014509->1114510
614447->714511
714511->814512
814512->914513
814512->914514
714511->814515
814515->914516
914516->1014517
1014517->1114518
1114518->1214519
1114518->1214520
1214520->1314521
1314521->1414522
1314521->1414523
1214520->1314524
914516->1014525
1014525->1114526
514432->614527
614527->714528
213960->314529
314529->414530
314529->414531
314529->414532
414532->514533
414532->514534
514534->614535
614535->714536
714536->814537
814537->914538
814537->914539
714536->814540
614535->714541
714541->814542
814542->914543
914543->1014544
714541->814545
314529->414546
414546->514547
514547->614548
614548->714549
714549->814550
714549->814551
213960->314552
314552->414553
314552->414554
314552->414555
414555->514556
414555->514557
514557->614558
614558->714559
714559->814560
814560->914561
814560->914562
714559->814563
614558->714564
714564->814565
814565->914566
914566->1014567
714564->814568
314552->414569
414569->514570
514570->614571
614571->714572
714572->814573
714572->814574
814574->914575
814574->914576
914576->1014577
1014577->1114578
514570->614579
614579->714580
714580->814581
714580->814582
814582->914583
814582->914584
914584->1014585
914584->1014586
1014586->1114587
1014586->1114588
514570->614589
614589->714590
714590->814591
814591->914592
814591->914593
914593->1014594
1014594->1114595
1114595->1214596
1114595->1214597
714590->814598
514570->614599
614599->714600
714600->814601
714600->814602
814602->914603
814602->914604
514570->614605
614605->714606
714606->814607
714606->814608
514570->614609
614609->714610
714610->814611
814611->914612
914612->1014613
914612->1014614
914612->1014615
1014615->1114616
714610->814617
614609->714618
714618->814619
814619->914620
914620->1014621
1014621->1114622
1014621->1114623
1014621->1114624
1114624->1214625
814619->914626
914626->1014627
1014627->1114628
1014627->1114629
914626->1014630
1014630->1114631
1114631->1214632
1214632->1314633
1314633->1414634
1314633->1414635
1414635->1514636
1414635->1514637
1114631->1214638
1214638->1314639
1314639->1414640
814619->914641
914641->1014642
1014642->1114643
1014642->1114644
1114644->1214645
814619->914646
914646->1014647
1014647->1114648
1014647->1114649
1014647->1114650
1114650->1214651
1114650->1214652
1214652->1314653
1314653->1414654
1214652->1314655
514570->614656
614656->714657
714657->814658
714657->814659
814659->914660
614656->714661
714661->814662
814662->914663
914663->1014664
1014664->1114665
1014664->1114666
1114666->1214667
1114666->1214668
814662->914669
914669->1014670
1014670->1114671
514570->614672
614672->714673
714673->814674
213960->314675
314675->414676
314675->414677
314675->414678
414678->514679
414678->514680
514680->614681
614681->714682
714682->814683
814683->914684
814683->914685
714682->814686
614681->714687
714687->814688
814688->914689
914689->1014690
714687->814691
314675->414692
414692->514693
514693->614694
614694->714695
714695->814696
714695->814697
814697->914698
814697->914699
714695->814700
814700->914701
814700->914702
914702->1014703
914702->1014704
1014704->1114705
1114705->1214706
514693->614707
614707->714708
714708->814709
714708->814710
814710->914711
814710->914712
714708->814713
814713->914714
814713->914715
914715->1014716
914715->1014717
1014717->1114718
1114718->1214719
514693->614720
614720->714721
714721->814722
714721->814723
814723->914724
814723->914725
914725->1014726
1014726->1114727
914725->1014728
1014728->1114729
1114729->1214730
1214730->1314731
1114729->1214732
1114729->1214733
1214733->1314734
1214733->1314735
1314735->1414736
1414736->1514737
1514737->1614738
1614738->1714739
1614738->1714740
1514737->1614741
1614741->1714742
1614741->1714743
1414736->1514744
1514744->1614745
1514744->1614746
1114729->1214747
1214747->1314748
1314748->1414749
1414749->1514750
1514750->1614751
1514750->1614752
1614752->1714753
1614752->1714754
1714754->1814755
1714754->1814756
1314748->1414757
1414757->1514758
1514758->1614759
1514758->1614760
1614760->1714761
1614760->1714762
1414757->1514763
1514763->1614764
1614764->1714765
1714765->1814766
1814766->1914767
1914767->2014768
1914767->2014769
1814766->1914770
1814766->1914771
1614764->1714772
1714772->1814773
1814773->1914774
1914774->2014775
1914774->2014776
1814773->1914777
1814773->1914778
514693->614779
614779->714780
714780->814781
714780->814782
814782->914783
814782->914784
914784->1014785
1014785->1114786
514693->614787
614787->714788
714788->814789
714788->814790
814790->914791
814790->914792
614787->714793
714793->814794
714793->814795
814795->914796
614787->714797
714797->814798
814798->914799
914799->1014800
1014800->1114801
1114801->1214802
1114801->1214803
1014800->1114804
914799->1014805
1014805->1114806
1114806->1214807
1214807->1314808
1314808->1414809
1314808->1414810
1414810->1514811
1414810->1514812
1114806->1214813
1214813->1314814
1314814->1414815
1114806->1214816
814798->914817
914817->1014818
1014818->1114819
1014818->1114820
1114820->1214821
1114820->1214822
814798->914823
914823->1014824
1014824->1114825
1014824->1114826
1014824->1114827
1114827->1214828
1114827->1214829
514693->614830
614830->714831
714831->814832
213960->314833
314833->414834
314833->414835
314833->414836
414836->514837
514837->614838
614838->714839
314833->414840
414840->514841
514841->614842
514841->614843
414840->514844
514844->614845
614845->714846
714846->814847
514844->614848
414840->514849
514849->614850
514849->614851
614851->714852
614851->714853
714853->814854
814854->914855
914855->1014856
914855->1014857
814854->914858
714853->814859
814859->914860
914860->1014861
1014861->1114862
814859->914863
514849->614864
614864->714865
714865->814866
614864->714867
714867->814868
814868->914869
914869->1014870
814868->914871
814868->914872
414840->514873
514873->614874
514873->614875
614875->714876
614875->714877
714877->814878
814878->914879
814878->914880
714877->814881
814881->914882
914882->1014883
1014883->1114884
814881->914885
514873->614886
614886->714887
714887->814888
614886->714889
714889->814890
814890->914891
914891->1014892
814890->914893
814890->914894
414840->514895
514895->614896
614896->714897
514895->614898
514895->614899
614899->714900
714900->814901
714900->814902
814902->914903
914903->1014904
1014904->1114905
1014904->1114906
614899->714907
514895->614908
614908->714909
714909->814910
814910->914911
914911->1014912
1014912->1114913
1014912->1114914
1114914->1214915
1214915->1314916
1314916->1414917
1314916->1414918
914911->1014919
1014919->1114920
1014919->1114921
714909->814922
814922->914923
914923->1014924
914923->1014925
1014925->1114926
814922->914927
914927->1014928
1014928->1114929
1114929->1214930
1214930->1314931
1314931->1414932
1414932->1514933
1514933->1614934
1514933->1614935
1614935->1714936
1714936->1814937
1814937->1914938
1814937->1914939
1214930->1314940
1314940->1414941
1314940->1414942
1414942->1514943
1414942->1514944
1514944->1614945
1514944->1614946
1014928->1114947
1114947->1214948
1214948->1314949
1314949->1414950
1214948->1314951
1114947->1214952
1214952->1314953
1314953->1414954
1414954->1514955
1114947->1214956
1214956->1314957
1314957->1414958
1414958->1514959
1514959->1614960
1514959->1614961
1514959->1614962
1614962->1714963
1314957->1414964
1414964->1514965
1514965->1614966
1514965->1614967
1514965->1614968
1314957->1414969
1414969->1514970
1514970->1614971
1514970->1614972
1514970->1614973
1614973->1714974
1714974->1814975
1614973->1714976
1314957->1414977
714909->814978
814978->914979
914979->1014980
914979->1014981
814978->914982
914982->1014983
1014983->1114984
714909->814985
814985->914986
-10->014987
014987->114988
114988->214989
214989->314990
314990->414991
414991->514992
514992->614993
014987->114994
114994->214995
214995->314996
314996->414997
414997->514998
514998->614999
614999->715000
715000->815001
014987->115002
115002->215003
215003->315004
315004->415005
415005->515006
515006->615007
615007->715008
014987->115009
115009->215010
215010->315011
315011->415012
415012->515013
515013->615014
615014->715015
014987->115016
115016->215017
215017->315018
315018->415019
415019->515020
515020->615021
615021->715022
014987->115023
115023->215024
215024->315025
315025->415026
415026->515027
515027->615028
615028->715029
014987->115030
115030->215031
215031->315032
315032->415033
014987->115034
115034->215035
115034->215036
215036->315037
315037->415038
315037->415039
315037->415040
215036->315041
315041->415042
315041->415043
415043->515044
415043->515045
315041->415046
215036->315047
315047->415048
315047->415049
415049->515050
415049->515051
315047->415052
215036->315053
315053->415054
315053->415055
415055->515056
515056->615057
315053->415058
215036->315059
315059->415060
315059->415061
415061->515062
415061->515063
515063->615064
515063->615065
315059->415066
415066->515067
515067->615068
615068->715069
715069->815070
715069->815071
815071->915072
815071->915073
915073->1015074
515067->615075
615075->715076
715076->815077
715076->815078
815078->915079
815078->915080
915080->1015081
515067->615082
615082->715083
715083->815084
715083->815085
715083->815086
815086->915087
515067->615088
615088->715089
715089->815090
715089->815091
715089->815092
815092->915093
815092->915094
915094->1015095
1015095->1115096
1115096->1215097
915094->1015098
1015098->1115099
1115099->1215100
515067->615101
615101->715102
715102->815103
715102->815104
715102->815105
815105->915106
815105->915107
915107->1015108
1015108->1115109
515067->615110
615110->715111
615110->715112
615110->715113
615110->715114
715114->815115
815115->915116
915116->1015117
1015117->1115118
1115118->1215119
1115118->1215120
1215120->1315121
815115->915122
915122->1015123
1015123->1115124
1015123->1115125
1115125->1215126
1215126->1315127
1315127->1415128
1315127->1415129
1415129->1515130
1415129->1515131
915122->1015132
915122->1015133
1015133->1115134
1115134->1215135
915122->1015136
1015136->1115137
1115137->1215138
1215138->1315139
1315139->1415140
1315139->1415141
1415141->1515142
1315139->1415143
1315139->1415144
1415144->1515145
1215138->1315146
1215138->1315147
-10->015148
015148->115149
115149->215150
215150->315151
315151->415152
415152->515153
515153->615154
615154->715155
015148->115156
115156->215157
215157->315158
315158->415159
415159->515160
515160->615161
615161->715162
015148->115163
115163->215164
215164->315165
315165->415166
015148->115167
115167->215168
215168->315169
315169->415170
015148->115171
115171->215172
215172->315173
315173->415174
015148->115175
115175->215176
215176->315177
315177->415178
015148->115179
115179->215180
215180->315181
315181->415182
015148->115183
115183->215184
215184->315185
315185->415186
015148->115187
115187->215188
215188->315189
315189->415190
015148->115191
115191->215192
115191->215193
115191->215194
215194->315195
115191->215196
215196->315197
315197->415198
415198->515199
115191->215200
215200->315201
315201->415202
315201->415203
315201->415204
415204->515205
415204->515206
315201->415207
415207->515208
415207->515209
515209->615210
215200->315211
315211->415212
315211->415213
415213->515214
415213->515215
315211->415216
215200->315217
315217->415218
315217->415219
315217->415220
215200->315221
315221->415222
315221->415223
315221->415224
215200->315225
315225->415226
315225->415227
315225->415228
215200->315229
315229->415230
315229->415231
415231->515232
515232->615233
615233->715234
415231->515235
515235->615236
615236->715237
715237->815238
815238->915239
815238->915240
715237->815241
615236->715242
715242->815243
715242->815244
315229->415245
415245->515246
515246->615247
615247->715248
715248->815249
815249->915250
915250->1015251
715248->815252
815252->915253
815252->915254
515246->615255
615255->715256
715256->815257
715256->815258
815258->915259
815258->915260
615255->715261
715261->815262
715261->815263
815263->915264
615255->715265
715265->815266
615255->715267
715267->815268
815268->915269
915269->1015270
1015270->1115271
1015270->1115272
1015270->1115273
1115273->1215274
1115273->1215275
1215275->1315276
1215275->1315277
815268->915278
915278->1015279
1015279->1115280
1115280->1215281
1115280->1215282
1015279->1115283
1115283->1215284
1215284->1315285
1115283->1215286
1215286->1315287
915278->1015288
1015288->1115289
515246->615290
615290->715291
215200->315292
315292->415293
315292->415294
415294->515295
515295->615296
615296->715297
415294->515298
515298->615299
615299->715300
615299->715301
315292->415302
415302->515303
515303->615304
615304->715305
715305->815306
815306->915307
915307->1015308
715305->815309
815309->915310
815309->915311
515303->615312
615312->715313
715313->815314
715313->815315
715313->815316
815316->915317
815316->915318
515303->615319
615319->715320
715320->815321
815321->915322
815321->915323
715320->815324
815324->915325
915325->1015326
815324->915327
915327->1015328
615319->715329
715329->815330
515303->615331
615331->715332
215200->315333
315333->415334
315333->415335
315333->415336
415336->515337
415336->515338
515338->615339
615339->715340
615339->715341
315333->415342
215200->315343
315343->415344
315343->415345
415345->515346
415345->515347
515347->615348
615348->715349
615348->715350
315343->415351
415351->515352
515352->615353
615353->715354
715354->815355
715354->815356
615353->715357
215200->315358
315358->415359
315358->415360
415360->515361
415360->515362
315358->415363
415363->515364
515364->615365
215200->315366
315366->415367
315366->415368
315366->415369
415369->515370
415369->515371
515371->615372
615372->715373
615372->715374
315366->415375
215200->315376
315376->415377
315376->415378
315376->415379
415379->515380
415379->515381
315376->415382
415382->515383
515383->615384
215200->315385
315385->415386
315385->415387
315385->415388
415388->515389
415388->515390
515390->615391
615391->715392
615391->715393
315385->415394
415394->515395
515395->615396
615396->715397
715397->815398
615396->715399
615396->715400
215200->315401
315401->415402
415402->515403
315401->415404
315401->415405
415405->515406
415405->515407
515407->615408
615408->715409
615408->715410
315401->415411
415411->515412
515412->615413
615413->715414
615413->715415
715415->815416
215200->315417
315417->415418
315417->415419
415419->515420
415419->515421
515421->615422
615422->715423
615422->715424
315417->415425
415425->515426
515426->615427
615427->715428
715428->815429
815429->915430
815429->915431
715428->815432
615427->715433
715433->815434
815434->915435
515426->615436
615436->715437
715437->815438
815438->915439
815438->915440
715437->815441
615436->715442
715442->815443
815443->915444
915444->1015445
515426->615446
615446->715447
215200->315448
315448->415449
315448->415450
415450->515451
415450->515452
315448->415453
415453->515454
515454->615455
215200->315456
315456->415457
315456->415458
415458->515459
415458->515460
515460->615461
615461->715462
715462->815463
715462->815464
615461->715465
715465->815466
815466->915467
915467->1015468
1015468->1115469
1015468->1115470
1115470->1215471
1215471->1315472
1315472->1415473
1315472->1415474
715465->815475
315456->415476
415476->515477
515477->615478
615478->715479
715479->815480
715479->815481
515477->615482
615482->715483
715483->815484
815484->915485
815484->915486
915486->1015487
715483->815488
815488->915489
815488->915490
915490->1015491
615482->715492
715492->815493
815493->915494
915494->1015495
915494->1015496
1015496->1115497
1115497->1215498
1215498->1315499
1115497->1215500
515477->615501
615501->715502
715502->815503
715502->815504
615501->715505
515477->615506
615506->715507
615506->715508
615506->715509
615506->715510
715510->815511
815511->915512
915512->1015513
1015513->1115514
1015513->1115515
915512->1015516
815511->915517
915517->1015518
1015518->1115519
1015518->1115520
1115520->1215521
1215521->1315522
1315522->1415523
1115520->1215524
215200->315525
315525->415526
315525->415527
415527->515528
415527->515529
515529->615530
615530->715531
615530->715532
415527->515533
515533->615534
315525->415535
415535->515536
515536->615537
615537->715538
715538->815539
715538->815540
515536->615541
615541->715542
715542->815543
715542->815544
815544->915545
515536->615546
615546->715547
715547->815548
715547->815549
815549->915550
815549->915551
515536->615552
615552->715553
715553->815554
715553->815555
615552->715556
715556->815557
815557->915558
815557->915559
815557->915560
915560->1015561
515536->615562
615562->715563
715563->815564
715563->815565
515536->615566
615566->715567
715567->815568
715567->815569
615566->715570
515536->615571
615571->715572
615571->715573
615571->715574
615571->715575
715575->815576
815576->915577
915577->1015578
915577->1015579
215200->315580
315580->415581
315580->415582
415582->515583
415582->515584
515584->615585
615585->715586
615585->715587
415582->515588
515588->615589
315580->415590
415590->515591
515591->615592
615592->715593
715593->815594
715593->815595
515591->615596
615596->715597
715597->815598
715597->815599
815599->915600
515591->615601
615601->715602
715602->815603
815603->915604
815603->915605
915605->1015606
715602->815607
815607->915608
815607->915609
915609->1015610
615601->715611
715611->815612
815612->915613
915613->1015614
915613->1015615
515591->615616
615616->715617
715617->815618
715617->815619
815619->915620
815619->915621
515591->615622
615622->715623
715623->815624
715623->815625
615622->715626
715626->815627
815627->915628
815627->915629
815627->915630
915630->1015631
515591->615632
615632->715633
715633->815634
715633->815635
515591->615636
615636->715637
715637->815638
715637->815639
615636->715640
515591->615641
615641->715642
615641->715643
615641->715644
615641->715645
715645->815646
815646->915647
915647->1015648
915647->1015649
215200->315650
315650->415651
315650->415652
415652->515653
415652->515654
515654->615655
615655->715656
715656->815657
715656->815658
615655->715659
715659->815660
815660->915661
915661->1015662
715659->815663
315650->415664
415664->515665
515665->615666
615666->715667
715667->815668
715667->815669
715667->815670
815670->915671
515665->615672
615672->715673
715673->815674
715673->815675
715673->815676
815676->915677
815676->915678
915678->1015679
515665->615680
615680->715681
715681->815682
815682->915683
815682->915684
915684->1015685
715681->815686
815686->915687
815686->915688
915688->1015689
615680->715690
715690->815691
815691->915692
915692->1015693
915692->1015694
915692->1015695
1015695->1115696
515665->615697
615697->715698
715698->815699
715698->815700
815700->915701
815700->915702
915702->1015703
515665->615704
615704->715705
715705->815706
715705->815707
715705->815708
815708->915709
815708->915710
915710->1015711
515665->615712
615712->715713
715713->815714
715713->815715
815715->915716
815715->915717
615712->715718
715718->815719
715718->815720
615712->715721
715721->815722
615712->715723
715723->815724
815724->915725
915725->1015726
1015726->1115727
1115727->1215728
1115727->1215729
1015726->1115730
1015726->1115731
1115731->1215732
1215732->1315733
815724->915734
915734->1015735
1015735->1115736
1115736->1215737
1115736->1215738
1015735->1115739
1115739->1215740
1115739->1215741
215200->315742
315742->415743
315742->415744
415744->515745
415744->515746
515746->615747
615747->715748
615747->715749
415744->515750
515750->615751
615751->715752
615751->715753
315742->415754
415754->515755
515755->615756
615756->715757
715757->815758
715757->815759
715757->815760
815760->915761
515755->615762
615762->715763
715763->815764
715763->815765
715763->815766
815766->915767
815766->915768
915768->1015769
515755->615770
615770->715771
715771->815772
815772->915773
815772->915774
915774->1015775
715771->815776
815776->915777
815776->915778
915778->1015779
615770->715780
715780->815781
815781->915782
915782->1015783
915782->1015784
915782->1015785
1015785->1115786
1015785->1115787
1115787->1215788
515755->615789
615789->715790
715790->815791
715790->815792
815792->915793
815792->915794
915794->1015795
515755->615796
615796->715797
715797->815798
715797->815799
715797->815800
815800->915801
815800->915802
915802->1015803
515755->615804
615804->715805
715805->815806
715805->815807
815807->915808
815807->915809
615804->715810
715810->815811
715810->815812
615804->715813
715813->815814
615804->715815
715815->815816
815816->915817
915817->1015818
1015818->1115819
1115819->1215820
1115819->1215821
1015818->1115822
1015818->1115823
1115823->1215824
1215824->1315825
815816->915826
915826->1015827
1015827->1115828
1115828->1215829
1115828->1215830
1015827->1115831
215200->315832
315832->415833
315832->415834
415834->515835
515835->615836
515835->615837
515835->615838
515835->615839
215200->315840
315840->415841
315840->415842
415842->515843
515843->615844
515843->615845
615845->715846
715846->815847
715846->815848
315840->415849
415849->515850
515850->615851
615851->715852
315840->415853
415853->515854
515854->615855
515854->615856
615856->715857
615856->715858
715858->815859
815859->915860
815859->915861
715858->815862
815862->915863
815862->915864
515854->615865
615865->715866
715866->815867
815867->915868
815867->915869
415853->515870
515870->615871
615871->715872
515870->615873
515870->615874
615874->715875
615874->715876
715876->815877
815877->915878
815877->915879
515870->615880
615880->715881
715881->815882
815882->915883
915883->1015884
815882->915885
915885->1015886
1015886->1115887
215200->315888
315888->415889
415889->515890
315888->415891
315888->415892
415892->515893
415892->515894
315888->415895
415895->515896
515896->615897
615897->715898
715898->815899
715898->815900
615897->715901
715901->815902
815902->915903
915903->1015904
1015904->1115905
1115905->1215906
1215906->1315907
1315907->1415908
1415908->1515909
1515909->1615910
1515909->1615911
1415908->1515912
1315907->1415913
1215906->1315914
1115905->1215915
1015904->1115916
915903->1015917
515896->615918
615918->715919
715919->815920
815920->915921
915921->1015922
1015922->1115923
1115923->1215924
1215924->1315925
1315925->1415926
1415926->1515927
1515927->1615928
1515927->1615929
1415926->1515930
1515930->1615931
1315925->1415932
1215924->1315933
1115923->1215934
1015922->1115935
915921->1015936
815920->915937
715919->815938
-10->015939
015939->115940
115940->215941
215941->315942
315942->415943
415943->515944
515944->615945
015939->115946
115946->215947
215947->315948
015939->115949
115949->215950
115949->215951
115949->215952
215952->315953
315953->415954
415954->515955
115949->215956
215956->315957
115949->215958
215958->315959
315959->415960
315959->415961
415961->515962
315959->415963
415963->515964
515964->615965
615965->715966
615965->715967
615965->715968
715968->815969
815969->915970
915970->1015971
915970->1015972
1015972->1115973
1115973->1215974
215958->315975
315975->415976
315975->415977
415977->515978
515978->615979
615979->715980
615979->715981
715981->815982
815982->915983
315975->415984
215958->315985
315985->415986
315985->415987
315985->415988
415988->515989
415988->515990
215958->315991
315991->415992
315991->415993
415993->515994
415993->515995
515995->615996
615996->715997
615996->715998
315991->415999
415999->516000
516000->616001
616001->716002
716002->816003
816003->916004
716002->816005
716002->816006
516000->616007
616007->716008
215958->316009
316009->416010
416010->516011
316009->416012
316009->416013
416013->516014
416013->516015
516015->616016
616016->716017
616016->716018
316009->416019
416019->516020
516020->616021
616021->716022
716022->816023
716022->816024
816024->916025
816024->916026
916026->1016027
916026->1016028
516020->616029
616029->716030
716030->816031
716030->816032
616029->716033
516020->616034
616034->716035
716035->816036
816036->916037
916037->1016038
716035->816039
816039->916040
816039->916041
916041->1016042
916041->1016043
516020->616044
616044->716045
716045->816046
716045->816047
616044->716048
716048->816049
816049->916050
916050->1016051
1016051->1116052
1016051->1116053
1016051->1116054
1116054->1216055
1216055->1316056
816049->916057
916057->1016058
1016058->1116059
1016058->1116060
1116060->1216061
1116060->1216062
516020->616063
616063->716064
716064->816065
716064->816066
215958->316067
316067->416068
316067->416069
316067->416070
416070->516071
416070->516072
516072->616073
616073->716074
616073->716075
316067->416076
215958->316077
316077->416078
416078->516079
316077->416080
316077->416081
416081->516082
516082->616083
616083->716084
716084->816085
716084->816086
416081->516087
516087->616088
616088->716089
616088->716090
316077->416091
416091->516092
516092->616093
616093->716094
716094->816095
816095->916096
916096->1016097
1016097->1116098
1016097->1116099
716094->816100
816100->916101
816100->916102
916102->1016103
1016103->1116104
1116104->1216105
1116104->1216106
916102->1016107
1016107->1116108
516092->616109
616109->716110
716110->816111
716110->816112
816112->916113
816112->916114
916114->1016115
916114->1016116
516092->616117
616117->716118
716118->816119
716118->816120
616117->716121
716121->816122
516092->616123
616123->716124
716124->816125
716124->816126
816126->916127
916127->1016128
1016128->1116129
1016128->1116130
1116130->1216131
1216131->1316132
616123->716133
616123->716134
716134->816135
616123->716136
716136->816137
816137->916138
916138->1016139
1016139->1116140
1016139->1116141
1116141->1216142
1116141->1216143
1216143->1316144
816137->916145
916145->1016146
1016146->1116147
1016146->1116148
1116148->1216149
1116148->1216150
1216150->1316151
1216150->1316152
816137->916153
916153->1016154
916153->1016155
916153->1016156
1016156->1116157
916153->1016158
1016158->1116159
1116159->1216160
1216160->1316161
1216160->1316162
1316162->1416163
1316162->1416164
516092->616165
616165->716166
215958->316167
316167->416168
416168->516169
316167->416170
316167->416171
416171->516172
416171->516173
316167->416174
416174->516175
516175->616176
616176->716177
-10->016178
016178->116179
116179->216180
216180->316181
316181->416182
416182->516183
016178->116184
116184->216185
216185->316186
316186->416187
016178->116188
116188->216189
116188->216190
116188->216191
216191->316192
116188->216193
216193->316194
316194->416195
316194->416196
416196->516197
416196->516198
316194->416199
216193->316200
316200->416201
316200->416202
316200->416203
216193->316204
316204->416205
316204->416206
416206->516207
416206->516208
516208->616209
616209->716210
616209->716211
516208->616212
316204->416213
416213->516214
516214->616215
616215->716216
716216->816217
616215->716218
616215->716219
216193->316220
316220->416221
316220->416222
416222->516223
416222->516224
516224->616225
516224->616226
316220->416227
416227->516228
516228->616229
616229->716230
216193->316231
316231->416232
316231->416233
316231->416234
416234->516235
516235->616236
516235->616237
616237->716238
716238->816239
816239->916240
816239->916241
416234->516242
316231->416243
216193->316244
316244->416245
316244->416246
416246->516247
416246->516248
316244->416249
416249->516250
516250->616251
-10->016252
016252->116253
116253->216254
216254->316255
316255->416256
416256->516257
516257->616258
616258->716259
016252->116260
116260->216261
116260->216262
216262->316263
316263->416264
316263->416265
216262->316266
316266->416267
316266->416268
-10->016269
016269->116270
116270->216271
216271->316272
316272->416273
416273->516274
016269->116275
116275->216276
216276->316277
316277->416278
416278->516279
016269->116280
116280->216281
216281->316282
316282->416283
416283->516284
516284->616285
016269->116286
116286->216287
216287->316288
316288->416289
416289->516290
516290->616291
616291->716292
016269->116293
116293->216294
216294->316295
316295->416296
016269->116297
116297->216298
116297->216299
216299->316300
316300->416301
316300->416302
316300->416303
316300->416304
316300->416305
416305->516306
416305->516307
516307->616308
616308->716309
516307->616310
616310->716311
516307->616312
616312->716313
216299->316314
316314->416315
316314->416316
316314->416317
416317->516318
516318->616319
616319->716320
416317->516321
516321->616322
616322->716323
616322->716324
316314->416325
416325->516326
516326->616327
616327->716328
616327->716329
716329->816330
216299->316331
316331->416332
316331->416333
316331->416334
416334->516335
516335->616336
616336->716337
416334->516338
516338->616339
616339->716340
716340->816341
716340->816342
616339->716343
316331->416344
416344->516345
516345->616346
616346->716347
616346->716348
216299->316349
316349->416350
316349->416351
316349->416352
416352->516353
516353->616354
616354->716355
716355->816356
816356->916357
416352->516358
516358->616359
616359->716360
616359->716361
316349->416362
416362->516363
516363->616364
616364->716365
616364->716366
-10->016367
016367->116368
116368->216369
216369->316370
316370->416371
416371->516372
516372->616373
016367->116374
116374->216375
216375->316376
316376->416377
416377->516378
016367->116379
116379->216380
216380->316381
316381->416382
416382->516383
516383->616384
616384->716385
016367->116386
116386->216387
216387->316388
316388->416389
416389->516390
516390->616391
616391->716392
716392->816393
016367->116394
116394->216395
216395->316396
316396->416397
416397->516398
516398->616399
616399->716400
016367->116401
116401->216402
216402->316403
316403->416404
416404->516405
516405->616406
616406->716407
016367->116408
116408->216409
216409->316410
316410->416411
416411->516412
516412->616413
016367->116414
116414->216415
216415->316416
316416->416417
016367->116418
116418->216419
216419->316420
316420->416421
016367->116422
116422->216423
216423->316424
316424->416425
016367->116426
116426->216427
216427->316428
316428->416429
016367->116430
116430->216431
216431->316432
316432->416433
416433->516434
516434->616435
016367->116436
116436->216437
116436->216438
216438->316439
316439->416440
316439->416441
416441->516442
516442->616443
316439->416444
216438->316445
316445->416446
416446->516447
516447->616448
616448->716449
716449->816450
716449->816451
816451->916452
816451->916453
916453->1016454
516447->616455
616455->716456
716456->816457
716456->816458
816458->916459
916459->1016460
616455->716461
716461->816462
816462->916463
916463->1016464
916463->1016465
1016465->1116466
1116466->1216467
1216467->1316468
1316468->1416469
1316468->1416470
1416470->1516471
1516471->1616472
1216467->1316473
1116466->1216474
1216474->1316475
1316475->1416476
1416476->1516477
1316475->1416478
1016465->1116479
616455->716480
716480->816481
816481->916482
916482->1016483
916482->1016484
1016484->1116485
1116485->1216486
1216486->1316487
1316487->1416488
1316487->1416489
1416489->1516490
1516490->1616491
1216486->1316492
1116485->1216493
1216493->1316494
1316494->1416495
1416495->1516496
1316494->1416497
1016484->1116498
216438->316499
316499->416500
316499->416501
416501->516502
416501->516503
516503->616504
616504->716505
616504->716506
316499->416507
416507->516508
516508->616509
616509->716510
716510->816511
716510->816512
716510->816513
816513->916514
916514->1016515
516508->616516
616516->716517
716517->816518
716517->816519
816519->916520
916520->1016521
916520->1016522
816519->916523
916523->1016524
616516->716525
716525->816526
516508->616527
616527->716528
716528->816529
816529->916530
916530->1016531
1016531->1116532
1016531->1116533
716528->816534
816534->916535
816534->916536
916536->1016537
1016537->1116538
1116538->1216539
1116538->1216540
516508->616541
616541->716542
616541->716543
616541->716544
716544->816545
716544->816546
616541->716547
716547->816548
816548->916549
916549->1016550
1016550->1116551
1116551->1216552
1116551->1216553
1016550->1116554
1116554->1216555
1116554->1216556
1216556->1316557
1216556->1316558
816548->916559
916559->1016560
1016560->1116561
1116561->1216562
1116561->1216563
1016560->1116564
1116564->1216565
916559->1016566
1016566->1116567
816548->916568
916568->1016569
1016569->1116570
1016569->1116571
1116571->1216572
1116571->1216573
1216573->1316574
1216573->1316575
816548->916576
916576->1016577
1016577->1116578
1016577->1116579
1116579->1216580
1216580->1316581
1216580->1316582
1116579->1216583
516508->616584
616584->716585
716585->816586
816586->916587
716585->816588
616584->716589
716589->816590
516508->616591
616591->716592
716592->816593
716592->816594
516508->616595
616595->716596
716596->816597
816597->916598
816597->916599
916599->1016600
916599->1016601
616595->716602
716602->816603
816603->916604
816603->916605
916605->1016606
1016606->1116607
1116607->1216608
1116607->1216609
1016606->1116610
1116610->1216611
916605->1016612
516508->616613
616613->716614
216438->316615
316615->416616
316615->416617
316615->416618
416618->516619
416618->516620
516620->616621
616621->716622
616621->716623
316615->416624
416624->516625
516625->616626
616626->716627
716627->816628
716627->816629
816629->916630
816629->916631
916631->1016632
916631->1016633
516625->616634
616634->716635
716635->816636
716635->816637
616634->716638
716638->816639
516625->616640
616640->716641
716641->816642
716641->816643
816643->916644
816643->916645
916645->1016646
516625->616647
616647->716648
716648->816649
816649->916650
816649->916651
716648->816652
816652->916653
816652->916654
916654->1016655
916654->1016656
1016656->1116657
516625->616658
616658->716659
716659->816660
716659->816661
816661->916662
816661->916663
616658->716664
716664->816665
716664->816666
816666->916667
616658->716668
716668->816669
616658->716670
716670->816671
816671->916672
916672->1016673
1016673->1116674
1016673->1116675
916672->1016676
916672->1016677
1016677->1116678
516625->616679
616679->716680
716680->816681
716680->816682
816682->916683
816682->916684
216438->316685
316685->416686
316685->416687
416687->516688
416687->516689
516689->616690
616690->716691
716691->816692
716691->816693
616690->716694
716694->816695
816695->916696
916696->1016697
1016697->1116698
1016697->1116699
716694->816700
316685->416701
416701->516702
516702->616703
616703->716704
716704->816705
816705->916706
916706->1016707
716704->816708
816708->916709
816708->916710
916710->1016711
516702->616712
616712->716713
716713->816714
816714->916715
916715->1016716
1016716->1116717
1016716->1116718
1116718->1216719
1116718->1216720
1216720->1316721
1316721->1416722
1316721->1416723
1416723->1516724
1516724->1616725
1516724->1616726
1416723->1516727
1516727->1616728
816714->916729
916729->1016730
1016730->1116731
1016730->1116732
1116732->1216733
816714->916734
916734->1016735
916734->1016736
916734->1016737
916734->1016738
1016738->1116739
1116739->1216740
1216740->1316741
1216740->1316742
816714->916743
916743->1016744
1016744->1116745
1116745->1216746
1116745->1216747
916743->1016748
1016748->1116749
816714->916750
916750->1016751
1016751->1116752
616712->716753
716753->816754
816754->916755
816754->916756
716753->816757
816757->916758
916758->1016759
1016759->1116760
1116760->1216761
1116760->1216762
1216762->1316763
1216762->1316764
916758->1016765
1016765->1116766
516702->616767
616767->716768
216438->316769
316769->416770
316769->416771
316769->416772
416772->516773
416772->516774
516774->616775
616775->716776
616775->716777
316769->416778
416778->516779
516779->616780
616780->716781
616780->716782
216438->316783
316783->416784
316783->416785
316783->416786
416786->516787
416786->516788
516788->616789
616789->716790
716790->816791
816791->916792
816791->916793
716790->816794
816794->916795
816794->916796
716790->816797
816797->916798
816797->916799
616789->716800
716800->816801
716800->816802
316783->416803
416803->516804
516804->616805
616805->716806
716806->816807
716806->816808
816808->916809
816808->916810
916810->1016811
916810->1016812
1016812->1116813
1116813->1216814
1116813->1216815
1016812->1116816
516804->616817
616817->716818
716818->816819
716818->816820
616817->716821
716821->816822
816822->916823
816822->916824
816822->916825
916825->1016826
916825->1016827
1016827->1116828
1116828->1216829
1116828->1216830
1016827->1116831
1116831->1216832
1116831->1216833
516804->616834
616834->716835
716835->816836
716835->816837
616834->716838
716838->816839
816839->916840
816839->916841
816839->916842
916842->1016843
916842->1016844
1016844->1116845
1116845->1216846
1216846->1316847
1216846->1316848
1116845->1216849
1016844->1116850
516804->616851
616851->716852
716852->816853
716852->816854
616851->716855
716855->816856
816856->916857
816856->916858
816856->916859
916859->1016860
916859->1016861
1016861->1116862
1116862->1216863
1216863->1316864
1216863->1316865
1116862->1216866
1016861->1116867
1116867->1216868
1116867->1216869
516804->616870
616870->716871
716871->816872
716871->816873
616870->716874
716874->816875
816875->916876
816875->916877
816875->916878
516804->616879
616879->716880
-10->016881
016881->116882
116882->216883
216883->316884
316884->416885
416885->516886
016881->116887
116887->216888
216888->316889
316889->416890
416890->516891
016881->116892
116892->216893
216893->316894
316894->416895
416895->516896
516896->616897
616897->716898
016881->116899
116899->216900
216900->316901
316901->416902
416902->516903
516903->616904
616904->716905
716905->816906
016881->116907
116907->216908
216908->316909
316909->416910
416910->516911
516911->616912
616912->716913
016881->116914
116914->216915
216915->316916
316916->416917
416917->516918
516918->616919
616919->716920
016881->116921
116921->216922
216922->316923
316923->416924
416924->516925
516925->616926
016881->116927
116927->216928
216928->316929
316929->416930
416930->516931
516931->616932
016881->116933
116933->216934
216934->316935
016881->116936
116936->216937
216937->316938
316938->416939
016881->116940
116940->216941
216941->316942
316942->416943
416943->516944
016881->116945
116945->216946
216946->316947
016881->116948
116948->216949
216949->316950
316950->416951
416951->516952
516952->616953
016881->116954
116954->216955
116954->216956
216956->316957
316957->416958
316957->416959
416959->516960
516960->616961
316957->416962
216956->316963
316963->416964
316963->416965
316963->416966
316963->416967
316963->416968
416968->516969
416968->516970
516970->616971
616971->716972
216956->316973
316973->416974
316973->416975
316973->416976
316973->416977
316973->416978
416978->516979
416978->516980
216956->316981
316981->416982
416982->516983
516983->616984
616984->716985
716985->816986
716985->816987
816987->916988
816987->916989
916989->1016990
516983->616991
616991->716992
716992->816993
816993->916994
816993->916995
616991->716996
716996->816997
816997->916998
916998->1016999
616991->717000
717000->817001
817001->917002
917002->1017003
917002->1017004
1017004->1117005
1117005->1217006
1217006->1317007
1217006->1317008
1117005->1217009
1217009->1317010
1317010->1417011
1417011->1517012
1317010->1417013
1017004->1117014
216956->317015
317015->417016
317015->417017
317015->417018
417018->517019
417018->517020
517020->617021
617021->717022
617021->717023
317015->417024
417024->517025
517025->617026
617026->717027
717027->817028
717027->817029
817029->917030
817029->917031
517025->617032
617032->717033
717033->817034
717033->817035
717033->817036
817036->917037
917037->1017038
517025->617039
617039->717040
717040->817041
717040->817042
817042->917043
817042->917044
917044->1017045
1017045->1117046
1017045->1117047
517025->617048
617048->717049
717049->817050
617048->717051
717051->817052
517025->617053
617053->717054
717054->817055
817055->917056
917056->1017057
1017057->1117058
1017057->1117059
717054->817060
817060->917061
817060->917062
917062->1017063
1017063->1117064
1117064->1217065
1117064->1217066
517025->617067
617067->717068
717068->817069
717068->817070
517025->617071
617071->717072
717072->817073
817073->917074
917074->1017075
1017075->1117076
1017075->1117077
1017075->1117078
1117078->1217079
1217079->1317080
1317080->1417081
1417081->1517082
1417081->1517083
1317080->1417084
817073->917085
917085->1017086
1017086->1117087
1017086->1117088
817073->917089
917089->1017090
1017090->1117091
1117091->1217092
1217092->1317093
1217092->1317094
1217092->1317095
1317095->1417096
1017090->1117097
917089->1017098
1017098->1117099
1117099->1217100
1217100->1317101
1317101->1417102
1417102->1517103
1417102->1517104
1317101->1417105
1417105->1517106
1417105->1517107
1517107->1617108
1517107->1617109
1117099->1217110
1217110->1317111
1317111->1417112
1317111->1417113
1417113->1517114
1417113->1517115
1517115->1617116
1517115->1617117
1117099->1217118
1217118->1317119
1317119->1417120
1317119->1417121
1417121->1517122
1417121->1517123
1517123->1617124
1517123->1617125
1617125->1717126
1617125->1717127
1117099->1217128
1217128->1317129
1317129->1417130
1317129->1417131
1417131->1517132
1417131->1517133
817073->917134
917134->1017135
1017135->1117136
817073->917137
917137->1017138
1017138->1117139
1017138->1117140
1117140->1217141
1217141->1317142
1217141->1317143
1117140->1217144
617071->717145
717145->817146
817146->917147
917147->1017148
917147->1017149
817146->917150
917150->1017151
1017151->1117152
1117152->1217153
1217153->1317154
1217153->1317155
1317155->1417156
1417156->1517157
1517157->1617158
1517157->1617159
1417156->1517160
1317155->1417161
1017151->1117162
1117162->1217163
717145->817164
817164->917165
917165->1017166
917165->1017167
817164->917168
917168->1017169
1017169->1117170
1117170->1217171
1217171->1317172
1217171->1317173
1317173->1417174
1417174->1517175
1517175->1617176
1517175->1617177
1417174->1517178
1317173->1417179
1017169->1117180
1117180->1217181
517025->617182
617182->717183
717183->817184
717183->817185
817185->917186
817185->917187
917187->1017188
917187->1017189
517025->617190
617190->717191
717191->817192
717191->817193
817193->917194
817193->917195
517025->617196
617196->717197
717197->817198
717197->817199
817199->917200
917200->1017201
917200->1017202
1017202->1117203
817199->917204
517025->617205
617205->717206
617205->717207
717207->817208
817208->917209
917209->1017210
1017210->1117211
1117211->1217212
1217212->1317213
1217212->1317214
1317214->1417215
1317214->1417216
1417216->1517217
1517217->1617218
1617218->1717219
1617218->1717220
1717220->1817221
1717220->1817222
1817222->1917223
1017210->1117224
1117224->1217225
1217225->1317226
1317226->1417227
1417227->1517228
1217225->1317229
1317229->1417230
1317229->1417231
1417231->1517232
1017210->1117233
1117233->1217234
1217234->1317235
1217234->1317236
1317236->1417237
1017210->1117238
1117238->1217239
1117238->1217240
1117238->1217241
1117238->1217242
1217242->1317243
1317243->1417244
1417244->1517245
1417244->1517246
1017210->1117247
1117247->1217248
1217248->1317249
1217248->1317250
1017210->1117251
1117251->1217252
1217252->1317253
817208->917254
917254->1017255
1017255->1117256
1017255->1117257
917254->1017258
1017258->1117259
1117259->1217260
1217260->1317261
1317261->1417262
1317261->1417263
1417263->1517264
1517264->1617265
1617265->1717266
1717266->1817267
1717266->1817268
1617265->1717269
1717269->1817270
1517264->1617271
1417263->1517272
1517272->1617273
1517272->1617274
1117259->1217275
1217275->1317276
517025->617277
617277->717278
216956->317279
317279->417280
317279->417281
317279->417282
417282->517283
417282->517284
517284->617285
617285->717286
617285->717287
317279->417288
417288->517289
517289->617290
617290->717291
717291->817292
817292->917293
917293->1017294
1017294->1117295
1017294->1117296
1117296->1217297
1117296->1217298
1217298->1317299
1217298->1317300
1317300->1417301
1317300->1417302
1417302->1517303
817292->917304
917304->1017305
1017305->1117306
1017305->1117307
917304->1017308
1017308->1117309
817292->917310
917310->1017311
1017311->1117312
1017311->1117313
1117313->1217314
1117313->1217315
1217315->1317316
817292->917317
917317->1017318
1017318->1117319
1117319->1217320
1117319->1217321
1017318->1117322
1117322->1217323
1117322->1217324
1217324->1317325
1217324->1317326
1317326->1417327
817292->917328
917328->1017329
1017329->1117330
1017329->1117331
1117331->1217332
1117331->1217333
917328->1017334
1017334->1117335
1017334->1117336
917328->1017337
1017337->1117338
917328->1017339
1017339->1117340
1117340->1217341
1217341->1317342
1317342->1417343
1317342->1417344
1217341->1317345
1217341->1317346
1317346->1417347
817292->917348
917348->1017349
1017349->1117350
1117350->1217351
1117350->1217352
1217352->1317353
1217352->1317354
917348->1017355
1017355->1117356
617290->717357
717357->817358
817358->917359
817358->917360
717357->817361
817361->917362
917362->1017363
517289->617364
617364->717365
216956->317366
317366->417367
317366->417368
317366->417369
417369->517370
517370->617371
617371->717372
417369->517373
317366->417374
417374->517375
517375->617376
617376->717377
717377->817378
817378->917379
917379->1017380
717377->817381
817381->917382
817381->917383
917383->1017384
1017384->1117385
517375->617386
617386->717387
717387->817388
717387->817389
517375->617390
617390->717391
717391->817392
817392->917393
917393->1017394
1017394->1117395
1017394->1117396
1017394->1117397
1117397->1217398
1217398->1317399
1317399->1417400
1417400->1517401
1417400->1517402
1317399->1417403
817392->917404
917404->1017405
1017405->1117406
1017405->1117407
817392->917408
917408->1017409
1017409->1117410
1117410->1217411
1217411->1317412
1217411->1317413
1217411->1317414
1317414->1417415
1017409->1117416
917408->1017417
1017417->1117418
1117418->1217419
1217419->1317420
1317420->1417421
1417421->1517422
1417421->1517423
1317420->1417424
1417424->1517425
1417424->1517426
1517426->1617427
1517426->1617428
1117418->1217429
1217429->1317430
1317430->1417431
1317430->1417432
1417432->1517433
1417432->1517434
1517434->1617435
1517434->1617436
1117418->1217437
1217437->1317438
1317438->1417439
1317438->1417440
1317438->1417441
1417441->1517442
1417441->1517443
1117418->1217444
1217444->1317445
1217444->1317446
1217444->1317447
1217444->1317448
1317448->1417449
1417449->1517450
1517450->1617451
1517450->1617452
1417449->1517453
1517453->1617454
1617454->1717455
1717455->1817456
1717455->1817457
817392->917458
917458->1017459
1017459->1117460
617390->717461
717461->817462
817462->917463
917463->1017464
917463->1017465
817462->917466
917466->1017467
1017467->1117468
1117468->1217469
717461->817470
817470->917471
917471->1017472
917471->1017473
817470->917474
917474->1017475
1017475->1117476
1117476->1217477
517375->617478
617478->717479
216956->317480
317480->417481
317480->417482
317480->417483
417483->517484
417483->517485
517485->617486
617486->717487
717487->817488
717487->817489
617486->717490
717490->817491
717490->817492
317480->417493
417493->517494
517494->617495
617495->717496
617495->717497
717497->817498
817498->917499
817498->917500
717497->817501
216956->317502
317502->417503
317502->417504
317502->417505
417505->517506
417505->517507
517507->617508
617508->717509
617508->717510
317502->417511
417511->517512
517512->617513
617513->717514
717514->817515
717514->817516
817516->917517
817516->917518
917518->1017519
917518->1017520
517512->617521
617521->717522
717522->817523
817523->917524
917524->1017525
917524->1017526
817523->917527
817523->917528
216956->317529
317529->417530
317529->417531
317529->417532
417532->517533
417532->517534
517534->617535
617535->717536
717536->817537
817537->917538
917538->1017539
1017539->1117540
1017539->1117541
717536->817542
617535->717543
717543->817544
717543->817545
317529->417546
417546->517547
517547->617548
617548->717549
717549->817550
717549->817551
817551->917552
817551->917553
517547->617554
617554->717555
717555->817556
717555->817557
817557->917558
917558->1017559
1017559->1117560
1017559->1117561
617554->717562
617554->717563
717563->817564
617554->717565
717565->817566
817566->917567
917567->1017568
1017568->1117569
1017568->1117570
1117570->1217571
817566->917572
917572->1017573
1017573->1117574
1017573->1117575
817566->917576
917576->1017577
1017577->1117578
1017577->1117579
1117579->1217580
817566->917581
917581->1017582
1017582->1117583
1017582->1117584
517547->617585
617585->717586
717586->817587
717586->817588
817588->917589
817588->917590
917590->1017591
216956->317592
317592->417593
317592->417594
317592->417595
417595->517596
417595->517597
517597->617598
617598->717599
717599->817600
817600->917601
917601->1017602
1017602->1117603
817600->917604
717599->817605
817605->917606
917606->1017607
1017607->1117608
817605->917609
617598->717610
717610->817611
717610->817612
317592->417613
417613->517614
517614->617615
617615->717616
717616->817617
817617->917618
917618->1017619
717616->817620
817620->917621
817620->917622
917622->1017623
1017623->1117624
517614->617625
617625->717626
717626->817627
717626->817628
817628->917629
817628->917630
617625->717631
717631->817632
717631->817633
817633->917634
617625->717635
717635->817636
617625->717637
717637->817638
817638->917639
917639->1017640
917639->1017641
1017641->1117642
1117642->1217643
1117642->1217644
1017641->1117645
1117645->1217646
1117645->1217647
517614->617648
617648->717649
717649->817650
717649->817651
517614->617652
617652->717653
717653->817654
817654->917655
917655->1017656
1017656->1117657
1017656->1117658
1117658->1217659
1117658->1217660
1217660->1317661
1317661->1417662
1417662->1517663
1417662->1517664
817654->917665
917665->1017666
917665->1017667
917665->1017668
917665->1017669
1017669->1117670
1117670->1217671
1217671->1317672
1317672->1417673
1317672->1417674
1417674->1517675
1517675->1617676
1517675->1617677
1417674->1517678
1517678->1617679
1517678->1617680
1117670->1217681
1217681->1317682
1317682->1417683
817654->917684
917684->1017685
1017685->1117686
617652->717687
717687->817688
817688->917689
917689->1017690
917689->1017691
817688->917692
917692->1017693
1017693->1117694
1117694->1217695
717687->817696
817696->917697
917697->1017698
917697->1017699
817696->917700
917700->1017701
1017701->1117702
1117702->1217703
-10->017704
017704->117705
117705->217706
217706->317707
317707->417708
417708->517709
517709->617710
017704->117711
117711->217712
217712->317713
317713->417714
017704->117715
117715->217716
217716->317717
317717->417718
017704->117719
117719->217720
217720->317721
317721->417722
017704->117723
117723->217724
117723->217725
217725->317726
117723->217727
217727->317728
317728->417729
317728->417730
417730->517731
517731->617732
517731->617733
417730->517734
517734->617735
617735->717736
617735->717737
317728->417738
417738->517739
517739->617740
617740->717741
717741->817742
817742->917743
717741->817744
617740->717745
717745->817746
817746->917747
817746->917748
917748->1017749
517739->617750
617750->717751
717751->817752
817752->917753
817752->917754
717751->817755
817755->917756
817755->917757
917757->1017758
517739->617759
617759->717760
717760->817761
717760->817762
517739->617763
617763->717764
717764->817765
817765->917766
917766->1017767
1017767->1117768
1017767->1117769
717764->817770
817770->917771
817770->917772
917772->1017773
1017773->1117774
1117774->1217775
1117774->1217776
517739->617777
617777->717778
717778->817779
717778->817780
817780->917781
817780->917782
517739->617783
617783->717784
717784->817785
717784->817786
817786->917787
817786->917788
917788->1017789
517739->617790
617790->717791
717791->817792
717791->817793
817793->917794
817793->917795
517739->617796
617796->717797
717797->817798
717797->817799
817799->917800
817799->917801
917801->1017802
917801->1017803
1017803->1117804
1017803->1117805
517739->617806
617806->717807
717807->817808
717807->817809
517739->617810
617810->717811
717811->817812
817812->917813
717811->817814
617810->717815
717815->817816
817816->917817
917817->1017818
1017818->1117819
1017818->1117820
1017818->1117821
1117821->1217822
1117821->1217823
1217823->1317824
1217823->1317825
817816->917826
917826->1017827
1017827->1117828
1017827->1117829
1117829->1217830
917826->1017831
1017831->1117832
1117832->1217833
1217833->1317834
1317834->1417835
1317834->1417836
1417836->1517837
1417836->1517838
1417836->1517839
1517839->1617840
1617840->1717841
1617840->1717842
1717842->1817843
1717842->1817844
1117832->1217845
1217845->1317846
1317846->1417847
1317846->1417848
1317846->1417849
917826->1017850
1017850->1117851
1117851->1217852
1117851->1217853
1017850->1117854
1117854->1217855
1217855->1317856
1317856->1417857
1417857->1517858
1517858->1617859
1617859->1717860
1617859->1717861
1517858->1617862
1417857->1517863
1517863->1617864
1517863->1617865
1617865->1717866
1317856->1417867
1417867->1517868
1517868->1617869
1617869->1717870
1717870->1817871
1617869->1717872
1517868->1617873
1617873->1717874
1717874->1817875
1817875->1917876
1917876->2017877
1917876->2017878
1917876->2017879
2017879->2117880
2017879->2117881
2117881->2217882
2117881->2217883
1717874->1817884
1817884->1917885
1917885->2017886
1917885->2017887
2017887->2117888
1817884->1917889
1217855->1317890
1317890->1417891
1417891->1517892
1517892->1617893
1517892->1617894
1617894->1717895
1417891->1517896
1517896->1617897
1517896->1617898
1617898->1717899
1317890->1417900
1417900->1517901
1517901->1617902
1517901->1617903
1617903->1717904
1617903->1717905
1617903->1717906
1717906->1817907
1817907->1917908
1817907->1917909
1917909->2017910
1917909->2017911
1217855->1317912
1317912->1417913
1417913->1517914
1417913->1517915
1417913->1517916
817816->917917
917917->1017918
1017918->1117919
1017918->1117920
1017918->1117921
517739->617922
617922->717923
717923->817924
717923->817925
617922->717926
717926->817927
817927->917928
917928->1017929
917928->1017930
1017930->1117931
817927->917932
917932->1017933
917932->1017934
1017934->1117935
717926->817936
817936->917937
917937->1017938
917937->1017939
1017939->1117940
1017939->1117941
1017939->1117942
1117942->1217943
1217943->1317944
1217943->1317945
1317945->1417946
1317945->1417947
517739->617948
617948->717949
717949->817950
617948->717951
717951->817952
817952->917953
817952->917954
917954->1017955
517739->617956
617956->717957
717957->817958
817958->917959
817958->917960
717957->817961
817961->917962
817961->917963
917963->1017964
917963->1017965
1017965->1117966
1117966->1217967
1217967->1317968
1117966->1217969
517739->617970
617970->717971
717971->817972
817972->917973
917973->1017974
1017974->1117975
1017974->1117976
717971->817977
817977->917978
817977->917979
917979->1017980
517739->617981
617981->717982
717982->817983
817983->917984
817983->917985
717982->817986
817986->917987
817986->917988
917988->1017989
517739->617990
617990->717991
717991->817992
717991->817993
817993->917994
817993->917995
917995->1017996
517739->617997
617997->717998
717998->817999
617997->718000
718000->818001
818001->918002
918002->1018003
1018003->1118004
1118004->1218005
1118004->1218006
1018003->1118007
1118007->1218008
1118007->1218009
1218009->1318010
818001->918011
918011->1018012
1018012->1118013
1118013->1218014
1118013->1218015
1218015->1318016
1018012->1118017
1018012->1118018
1118018->1218019
1218019->1318020
1318020->1418021
1418021->1518022
1418021->1518023
1318020->1418024
1418024->1518025
1418024->1518026
1118018->1218027
1218027->1318028
1318028->1418029
1318028->1418030
1418030->1518031
1418030->1518032
1318028->1418033
1418033->1518034
1418033->1518035
1118018->1218036
1218036->1318037
1318037->1418038
1318037->1418039
1418039->1518040
1418039->1518041
1318037->1418042
1418042->1518043
1418042->1518044
1118018->1218045
818001->918046
918046->1018047
1018047->1118048
1018047->1118049
1018047->1118050
517739->618051
618051->718052
-10->018053
018053->118054
118054->218055
218055->318056
318056->418057
418057->518058
518058->618059
618059->718060
018053->118061
118061->218062
218062->318063
318063->418064
418064->518065
518065->618066
618066->718067
018053->118068
118068->218069
218069->318070
318070->418071
418071->518072
518072->618073
618073->718074
018053->118075
118075->218076
218076->318077
318077->418078
418078->518079
518079->618080
618080->718081
018053->118082
118082->218083
218083->318084
318084->418085
418085->518086
518086->618087
618087->718088
018053->118089
118089->218090
218090->318091
318091->418092
418092->518093
518093->618094
018053->118095
118095->218096
218096->318097
018053->118098
118098->218099
218099->318100
018053->118101
118101->218102
218102->318103
318103->418104
418104->518105
518105->618106
018053->118107
118107->218108
118107->218109
218109->318110
118107->218111
218111->318112
318112->418113
418113->518114
118107->218115
218115->318116
318116->418117
418117->518118
518118->618119
318116->418120
118107->218121
218121->318122
318122->418123
318122->418124
318122->418125
218121->318126
318126->418127
318126->418128
418128->518129
318126->418130
418130->518131
518131->618132
618132->718133
718133->818134
718133->818135
718133->818136
818136->918137
818136->918138
918138->1018139
1018139->1118140
1018139->1118141
518131->618142
618142->718143
718143->818144
718143->818145
718143->818146
518131->618147
618147->718148
718148->818149
718148->818150
718148->818151
818151->918152
218121->318153
318153->418154
318153->418155
418155->518156
418155->518157
518157->618158
618158->718159
718159->818160
718159->818161
618158->718162
718162->818163
718162->818164
318153->418165
418165->518166
518166->618167
618167->718168
718168->818169
818169->918170
718168->818171
618167->718172
518166->618173
618173->718174
718174->818175
718174->818176
818176->918177
818176->918178
518166->618179
618179->718180
718180->818181
818181->918182
818181->918183
718180->818184
818184->918185
818184->918186
918186->1018187
518166->618188
618188->718189
718189->818190
718189->818191
818191->918192
818191->918193
618188->718194
718194->818195
718194->818196
818196->918197
918197->1018198
818196->918199
618188->718200
718200->818201
618188->718202
718202->818203
818203->918204
918204->1018205
1018205->1118206
1018205->1118207
1118207->1218208
1218208->1318209
1318209->1418210
1318209->1418211
1218208->1318212
1318212->1418213
1218208->1318214
818203->918215
918215->1018216
1018216->1118217
1018216->1118218
1018216->1118219
1118219->1218220
1118219->1218221
1218221->1318222
1218221->1318223
518166->618224
618224->718225
718225->818226
718225->818227
818227->918228
918228->1018229
818227->918230
918230->1018231
1018231->1118232
1018231->1118233
1118233->1218234
1218234->1318235
1118233->1218236
918230->1018237
1018237->1118238
918230->1018239
618224->718240
718240->818241
818241->918242
918242->1018243
218121->318244
318244->418245
318244->418246
418246->518247
418246->518248
518248->618249
618249->718250
718250->818251
818251->918252
818251->918253
718250->818254
618249->718255
718255->818256
718255->818257
318244->418258
418258->518259
518259->618260
618260->718261
718261->818262
718261->818263
818263->918264
818263->918265
518259->618266
618266->718267
718267->818268
718267->818269
818269->918270
818269->918271
618266->718272
718272->818273
718272->818274
818274->918275
918275->1018276
818274->918277
618266->718278
718278->818279
618266->718280
718280->818281
818281->918282
918282->1018283
1018283->1118284
1018283->1118285
1118285->1218286
1218286->1318287
1318287->1418288
1318287->1418289
1218286->1318290
1318290->1418291
1218286->1318292
818281->918293
918293->1018294
1018294->1118295
1018294->1118296
1018294->1118297
1118297->1218298
1118297->1218299
1218299->1318300
1218299->1318301
518259->618302
618302->718303
718303->818304
718303->818305
818305->918306
918306->1018307
818305->918308
918308->1018309
1018309->1118310
1018309->1118311
1118311->1218312
1218312->1318313
1118311->1218314
918308->1018315
1018315->1118316
918308->1018317
618302->718318
718318->818319
818319->918320
918320->1018321
218121->318322
318322->418323
318322->418324
418324->518325
418324->518326
518326->618327
618327->718328
718328->818329
718328->818330
618327->718331
718331->818332
718331->818333
318322->418334
418334->518335
518335->618336
618336->718337
618336->718338
718338->818339
818339->918340
718338->818341
218121->318342
318342->418343
318342->418344
418344->518345
418344->518346
518346->618347
618347->718348
618347->718349
318342->418350
418350->518351
518351->618352
618352->718353
718353->818354
718353->818355
818355->918356
818355->918357
518351->618358
618358->718359
718359->818360
818360->918361
818360->918362
718359->818363
818363->918364
818363->918365
918365->1018366
518351->618367
618367->718368
718368->818369
718368->818370
818370->918371
818370->918372
618367->718373
718373->818374
718373->818375
818375->918376
918376->1018377
818375->918378
618367->718379
718379->818380
618367->718381
718381->818382
818382->918383
918383->1018384
1018384->1118385
1018384->1118386
918383->1018387
818382->918388
918388->1018389
1018389->1118390
1018389->1118391
1018389->1118392
1118392->1218393
1118392->1218394
1218394->1318395
1218394->1318396
518351->618397
618397->718398
718398->818399
718398->818400
618397->718401
518351->618402
618402->718403
718403->818404
718403->818405
818405->918406
918406->1018407
1018407->1118408
1018407->1118409
1118409->1218410
1218410->1318411
1118409->1218412
918406->1018413
1018413->1118414
918406->1018415
618402->718416
718416->818417
818417->918418
918418->1018419
218121->318420
318420->418421
318420->418422
418422->518423
418422->518424
518424->618425
618425->718426
618425->718427
318420->418428
418428->518429
518429->618430
618430->718431
718431->818432
718431->818433
818433->918434
818433->918435
518429->618436
618436->718437
718437->818438
818438->918439
818438->918440
718437->818441
818441->918442
818441->918443
918443->1018444
518429->618445
618445->718446
618445->718447
618445->718448
618445->718449
718449->818450
818450->918451
918451->1018452
1018452->1118453
1018452->1118454
918451->1018455
1018455->1118456
818450->918457
918457->1018458
1018458->1118459
1018458->1118460
1018458->1118461
1118461->1218462
1118461->1218463
518429->618464
618464->718465
718465->818466
818466->918467
818466->918468
718465->818469
818469->918470
918470->1018471
1018471->1118472
1118472->1218473
1018471->1118474
1118474->1218475
918470->1018476
1018476->1118477
1118477->1218478
1018476->1118479
1118479->1218480
218121->318481
318481->418482
318481->418483
418483->518484
418483->518485
518485->618486
618486->718487
618486->718488
318481->418489
418489->518490
518490->618491
618491->718492
718492->818493
718492->818494
818494->918495
818494->918496
518490->618497
618497->718498
718498->818499
818499->918500
818499->918501
718498->818502
818502->918503
818502->918504
918504->1018505
518490->618506
618506->718507
618506->718508
618506->718509
618506->718510
718510->818511
818511->918512
918512->1018513
1018513->1118514
1018513->1118515
918512->1018516
1018516->1118517
818511->918518
918518->1018519
1018519->1118520
1018519->1118521
1018519->1118522
1118522->1218523
1118522->1218524
518490->618525
618525->718526
718526->818527
718526->818528
618525->718529
718529->818530
518490->618531
618531->718532
718532->818533
818533->918534
918534->1018535
1018535->1118536
1118536->1218537
1018535->1118538
1118538->1218539
918534->1018540
1018540->1118541
1118541->1218542
1018540->1118543
1118543->1218544
618531->718545
718545->818546
518490->618547
618547->718548
718548->818549
718548->818550
818550->918551
218121->318552
318552->418553
318552->418554
418554->518555
418554->518556
518556->618557
618557->718558
718558->818559
718558->818560
618557->718561
318552->418562
418562->518563
518563->618564
618564->718565
718565->818566
718565->818567
818567->918568
818567->918569
518563->618570
618570->718571
618570->718572
618570->718573
618570->718574
718574->818575
818575->918576
918576->1018577
1018577->1118578
1018577->1118579
918576->1018580
1018580->1118581
818575->918582
918582->1018583
1018583->1118584
1018583->1118585
1018583->1118586
1118586->1218587
1118586->1218588
518563->618589
618589->718590
718590->818591
718590->818592
618589->718593
718593->818594
518563->618595
618595->718596
718596->818597
818597->918598
918598->1018599
1018599->1118600
1118600->1218601
1018599->1118602
1118602->1218603
918598->1018604
1018604->1118605
1118605->1218606
1018604->1118607
1118607->1218608
618595->718609
718609->818610
518563->618611
618611->718612
718612->818613
718612->818614
818614->918615
218121->318616
318616->418617
418617->518618
318616->418619
318616->418620
418620->518621
518621->618622
518621->618623
418620->518624
518624->618625
618625->718626
718626->818627
718626->818628
618625->718629
318616->418630
418630->518631
518631->618632
618632->718633
718633->818634
818634->918635
718633->818636
618632->718637
718637->818638
818638->918639
818638->918640
818638->918641
918641->1018642
1018642->1118643
1018642->1118644
918641->1018645
1018645->1118646
1118646->1218647
1218647->1318648
1318648->1418649
1018645->1118650
1118650->1218651
1218651->1318652
1318652->1418653
1218651->1318654
1118650->1218655
518631->618656
618656->718657
718657->818658
718657->818659
818659->918660
818659->918661
518631->618662
618662->718663
718663->818664
718663->818665
818665->918666
918666->1018667
1018667->1118668
1018667->1118669
618662->718670
618662->718671
718671->818672
618662->718673
718673->818674
818674->918675
918675->1018676
1018676->1118677
1018676->1118678
1118678->1218679
1118678->1218680
918675->1018681
918675->1018682
1018682->1118683
518631->618684
618684->718685
218121->318686
318686->418687
318686->418688
418688->518689
518689->618690
618690->718691
718691->818692
718691->818693
818693->918694
918694->1018695
1018695->1118696
1018695->1118697
418688->518698
318686->418699
418699->518700
518700->618701
618701->718702
718702->818703
818703->918704
918704->1018705
1018705->1118706
1018705->1118707
1118707->1218708
1218708->1318709
1318709->1418710
1318709->1418711
718702->818712
818712->918713
818712->918714
918714->1018715
1018715->1118716
1118716->1218717
1118716->1218718
1218718->1318719
1318719->1418720
1418720->1518721
1418720->1518722
518700->618723
618723->718724
718724->818725
718724->818726
818726->918727
818726->918728
518700->618729
618729->718730
618729->718731
618729->718732
618729->718733
718733->818734
818734->918735
918735->1018736
1018736->1118737
1018736->1118738
918735->1018739
818734->918740
918740->1018741
1018741->1118742
1018741->1118743
1118743->1218744
1218744->1318745
1318745->1418746
1118743->1218747
518700->618748
618748->718749
218121->318750
318750->418751
318750->418752
418752->518753
518753->618754
618754->718755
418752->518756
318750->418757
418757->518758
518758->618759
618759->718760
718760->818761
818761->918762
918762->1018763
718760->818764
818764->918765
818764->918766
918766->1018767
1018767->1118768
518758->618769
618769->718770
718770->818771
718770->818772
818772->918773
918773->1018774
1018774->1118775
1018774->1118776
618769->718777
618769->718778
718778->818779
618769->718780
718780->818781
818781->918782
918782->1018783
918782->1018784
1018784->1118785
518758->618786
618786->718787
218121->318788
318788->418789
318788->418790
418790->518791
518791->618792
618792->718793
718793->818794
718793->818795
818795->918796
918796->1018797
1018797->1118798
1018797->1118799
418790->518800
518800->618801
618801->718802
618801->718803
318788->418804
418804->518805
518805->618806
618806->718807
718807->818808
818808->918809
918809->1018810
1018810->1118811
1018810->1118812
1118812->1218813
1218813->1318814
1318814->1418815
1318814->1418816
718807->818817
818817->918818
818817->918819
918819->1018820
1018820->1118821
1118821->1218822
1118821->1218823
1218823->1318824
1318824->1418825
1418825->1518826
1418825->1518827
518805->618828
618828->718829
718829->818830
718829->818831
818831->918832
818831->918833
918833->1018834
1018834->1118835
1018834->1118836
1118836->1218837
1118836->1218838
1218838->1318839
1318839->1418840
1218838->1318841
518805->618842
618842->718843
718843->818844
718843->818845
818845->918846
818845->918847
518805->618848
618848->718849
718849->818850
818850->918851
818850->918852
718849->818853
818853->918854
818853->918855
918855->1018856
518805->618857
618857->718858
618857->718859
618857->718860
618857->718861
718861->818862
818862->918863
918863->1018864
1018864->1118865
1018864->1118866
918863->1018867
1018867->1118868
818862->918869
918869->1018870
1018870->1118871
1018870->1118872
1018870->1118873
1118873->1218874
1118873->1218875
518805->618876
618876->718877
718877->818878
718877->818879
618876->718880
718880->818881
518805->618882
618882->718883
718883->818884
718883->818885
818885->918886
818885->918887
518805->618888
618888->718889
218121->318890
318890->418891
318890->418892
418892->518893
518893->618894
618894->718895
718895->818896
718895->818897
818897->918898
918898->1018899
1018899->1118900
1018899->1118901
418892->518902
518902->618903
618903->718904
618903->718905
318890->418906
418906->518907
518907->618908
618908->718909
718909->818910
818910->918911
818910->918912
718909->818913
818913->918914
818913->918915
918915->1018916
518907->618917
618917->718918
718918->818919
718918->818920
818920->918921
818920->918922
218121->318923
318923->418924
318923->418925
418925->518926
518926->618927
618927->718928
718928->818929
718928->818930
818930->918931
918931->1018932
1018932->1118933
1018932->1118934
418925->518935
518935->618936
618936->718937
718937->818938
818938->918939
818938->918940
718937->818941
618936->718942
718942->818943
718942->818944
318923->418945
418945->518946
518946->618947
618947->718948
718948->818949
818949->918950
918950->1018951
1018951->1118952
1018951->1118953
1118953->1218954
1218954->1318955
1318955->1418956
1318955->1418957
718948->818958
818958->918959
818958->918960
918960->1018961
1018961->1118962
1118962->1218963
1118962->1218964
1218964->1318965
1318965->1418966
1418966->1518967
1418966->1518968
518946->618969
618969->718970
718970->818971
718970->818972
818972->918973
818972->918974
518946->618975
618975->718976
718976->818977
718976->818978
818978->918979
818978->918980
518946->618981
618981->718982
718982->818983
718982->818984
818984->918985
818984->918986
618981->718987
718987->818988
718987->818989
818989->918990
618981->718991
718991->818992
618981->718993
718993->818994
818994->918995
918995->1018996
1018996->1118997
1018996->1118998
1118998->1218999
1118998->1219000
1219000->1319001
1219000->1319002
818994->919003
919003->1019004
1019004->1119005
1019004->1119006
1019004->1119007
1119007->1219008
1119007->1219009
818994->919010
919010->1019011
1019011->1119012
1119012->1219013
1119012->1219014
1019011->1119015
1119015->1219016
1219016->1319017
1119015->1219018
1219018->1319019
919010->1019020
1019020->1119021
818994->919022
919022->1019023
1019023->1119024
1019023->1119025
818994->919026
919026->1019027
1019027->1119028
1119028->1219029
1219029->1319030
1119028->1219031
1219031->1319032
1019027->1119033
1119033->1219034
1219034->1319035
1119033->1219036
1219036->1319037
919026->1019038
1019038->1119039
1119039->1219040
1219040->1319041
1219040->1319042
1319042->1419043
1419043->1519044
1519044->1619045
1519044->1619046
1319042->1419047
1419047->1519048
1519048->1619049
1419047->1519050
1519050->1619051
1519050->1619052
1619052->1719053
518946->619054
619054->719055
218121->319056
319056->419057
419057->519058
319056->419059
319056->419060
419060->519061
419060->519062
519062->619063
619063->719064
619063->719065
319056->419066
419066->519067
519067->619068
619068->719069
719069->819070
719069->819071
819071->919072
819071->919073
519067->619074
619074->719075
719075->819076
719075->819077
819077->919078
819077->919079
919079->1019080
519067->619081
619081->719082
719082->819083
719082->819084
819084->919085
819084->919086
919086->1019087
919086->1019088
519067->619089
619089->719090
719090->819091
719090->819092
619089->719093
719093->819094
819094->919095
919095->1019096
1019096->1119097
1119097->1219098
1119097->1219099
1019096->1119100
1019096->1119101
819094->919102
919102->1019103
1019103->1119104
1019103->1119105
1019103->1119106
619089->719107
719107->819108
819108->919109
919109->1019110
819108->919111
919111->1019112
1019112->1119113
1119113->1219114
1019112->1119115
1119115->1219116
1219116->1319117
1319117->1419118
1419118->1519119
1319117->1419120
1419120->1519121
1219116->1319122
1319122->1419123
1419123->1519124
1519124->1619125
1619125->1719126
1719126->1819127
1619125->1719128
1619125->1719129
1719129->1819130
1419123->1519131
1519131->1619132
1619132->1719133
1619132->1719134
1619132->1719135
1119115->1219136
919111->1019137
1019137->1119138
1119138->1219139
1019137->1119140
1119140->1219141
1219141->1319142
1319142->1419143
1419143->1519144
1319142->1419145
1419145->1519146
1219141->1319147
1319147->1419148
1419148->1519149
1519149->1619150
1619150->1719151
1519149->1619152
1519149->1619153
1619153->1719154
1119140->1219155
919111->1019156
1019156->1119157
1119157->1219158
1019156->1119159
1119159->1219160
1219160->1319161
1319161->1419162
1419162->1519163
1319161->1419164
1419164->1519165
1219160->1319166
1319166->1419167
1419167->1519168
1519168->1619169
1619169->1719170
1519168->1619171
1519168->1619172
1619172->1719173
1119159->1219174
1219174->1319175
1319175->1419176
1419176->1519177
1319175->1419178
1219174->1319179
1319179->1419180
1419180->1519181
1519181->1619182
1519181->1619183
1519181->1619184
1119159->1219185
1219185->1319186
1319186->1419187
1319186->1419188
1419188->1519189
1119159->1219190
519067->619191
619191->719192
218121->319193
319193->419194
319193->419195
419195->519196
419195->519197
319193->419198
419198->519199
519199->619200
218121->319201
319201->419202
419202->519203
319201->419204
319201->419205
419205->519206
419205->519207
319201->419208
419208->519209
519209->619210
218121->319211
319211->419212
419212->519213
319211->419214
319211->419215
419215->519216
419215->519217
519217->619218
619218->719219
619218->719220
319211->419221
419221->519222
519222->619223
619223->719224
619223->719225
218121->319226
319226->419227
319226->419228
419228->519229
419228->519230
519230->619231
619231->719232
619231->719233
319226->419234
419234->519235
519235->619236
619236->719237
719237->819238
819238->919239
919239->1019240
1019240->1119241
1019240->1119242
1119242->1219243
1119242->1219244
1219244->1319245
1319245->1419246
1319245->1419247
819238->919248
919248->1019249
919248->1019250
919248->1019251
919248->1019252
1019252->1119253
1119253->1219254
1219254->1319255
1219254->1319256
1119253->1219257
1219257->1319258
1319258->1419259
1419259->1519260
1419259->1519261
1119253->1219262
1219262->1319263
1319263->1419264
1419264->1519265
1519265->1619266
1519265->1619267
1319263->1419268
1419268->1519269
1519269->1619270
1519269->1619271
819238->919272
919272->1019273
1019273->1119274
619236->719275
719275->819276
819276->919277
819276->919278
719275->819279
819279->919280
919280->1019281
1019281->1119282
1119282->1219283
1119282->1219284
1219284->1319285
1319285->1419286
1419286->1519287
1419286->1519288
1319285->1419289
1219284->1319290
1319290->1419291
1319290->1419292
919280->1019293
1019293->1119294
519235->619295
619295->719296
218121->319297
319297->419298
419298->519299
319297->419300
319297->419301
419301->519302
419301->519303
519303->619304
619304->719305
719305->819306
819306->919307
919307->1019308
919307->1019309
619304->719310
319297->419311
419311->519312
519312->619313
619313->719314
719314->819315
719314->819316
819316->919317
919317->1019318
1019318->1119319
1019318->1119320
619313->719321
619313->719322
719322->819323
619313->719324
719324->819325
819325->919326
919326->1019327
919326->1019328
1019328->1119329
1119329->1219330
1019328->1119331
1119331->1219332
519312->619333
619333->719334
218121->319335
319335->419336
319335->419337
419337->519338
419337->519339
519339->619340
619340->719341
619340->719342
319335->419343
419343->519344
519344->619345
619345->719346
719346->819347
819347->919348
819347->919349
819347->919350
819347->919351
919351->1019352
1019352->1119353
1119353->1219354
1119353->1219355
1019352->1119356
1119356->1219357
1219357->1319358
1319358->1419359
1319358->1419360
1019352->1119361
1119361->1219362
1219362->1319363
1319363->1419364
1419364->1519365
1419364->1519366
1219362->1319367
1319367->1419368
1419368->1519369
1419368->1519370
619345->719371
719371->819372
819372->919373
819372->919374
719371->819375
819375->919376
919376->1019377
1019377->1119378
1119378->1219379
1119378->1219380
1219380->1319381
1319381->1419382
1419382->1519383
1419382->1519384
1319381->1419385
1219380->1319386
1319386->1419387
1319386->1419388
919376->1019389
1019389->1119390
519344->619391
619391->719392
218121->319393
319393->419394
319393->419395
419395->519396
419395->519397
519397->619398
619398->719399
719399->819400
719399->819401
619398->719402
719402->819403
819403->919404
819403->919405
719402->819406
319393->419407
419407->519408
519408->619409
619409->719410
719410->819411
819411->919412
819411->919413
719410->819414
819414->919415
819414->919416
919416->1019417
919416->1019418
519408->619419
619419->719420
719420->819421
719420->819422
619419->719423
719423->819424
519408->619425
619425->719426
719426->819427
719426->819428
819428->919429
819428->919430
919430->1019431
519408->619432
619432->719433
719433->819434
719433->819435
819435->919436
819435->919437
919437->1019438
519408->619439
619439->719440
719440->819441
719440->819442
819442->919443
819442->919444
619439->719445
719445->819446
719445->819447
819447->919448
619439->719449
719449->819450
619439->719451
719451->819452
819452->919453
919453->1019454
1019454->1119455
1019454->1119456
1119456->1219457
1119456->1219458
1219458->1319459
819452->919460
919460->1019461
1019461->1119462
1019461->1119463
919460->1019464
1019464->1119465
1119465->1219466
1219466->1319467
1319467->1419468
1419468->1519469
1419468->1519470
1319467->1419471
1319467->1419472
1419472->1519473
1519473->1619474
1119465->1219475
1219475->1319476
1319476->1419477
1419477->1519478
1419477->1519479
1319476->1419480
1419480->1519481
1419480->1519482
519408->619483
619483->719484
719484->819485
719484->819486
719484->819487
819487->919488
519408->619489
619489->719490
218121->319491
319491->419492
319491->419493
419493->519494
419493->519495
519495->619496
619496->719497
619496->719498
319491->419499
419499->519500
519500->619501
619501->719502
719502->819503
819503->919504
819503->919505
719502->819506
819506->919507
819506->919508
919508->1019509
919508->1019510
519500->619511
619511->719512
719512->819513
719512->819514
619511->719515
719515->819516
519500->619517
619517->719518
719518->819519
719518->819520
819520->919521
819520->919522
519500->619523
619523->719524
719524->819525
719524->819526
819526->919527
819526->919528
919528->1019529
519500->619530
619530->719531
719531->819532
719531->819533
819533->919534
819533->919535
619530->719536
719536->819537
719536->819538
819538->919539
619530->719540
719540->819541
619530->719542
719542->819543
819543->919544
919544->1019545
1019545->1119546
1019545->1119547
1119547->1219548
1119547->1219549
1219549->1319550
819543->919551
919551->1019552
1019552->1119553
1019552->1119554
919551->1019555
1019555->1119556
1119556->1219557
1219557->1319558
1319558->1419559
1419559->1519560
1419559->1519561
1319558->1419562
1319558->1419563
1419563->1519564
1519564->1619565
1119556->1219566
1219566->1319567
1319567->1419568
1419568->1519569
1419568->1519570
1319567->1419571
1419571->1519572
1419571->1519573
519500->619574
619574->719575
719575->819576
719575->819577
719575->819578
819578->919579
519500->619580
619580->719581
218121->319582
319582->419583
319582->419584
419584->519585
419584->519586
519586->619587
619587->719588
719588->819589
719588->819590
619587->719591
719591->819592
719591->819593
319582->419594
419594->519595
519595->619596
619596->719597
719597->819598
719597->819599
819599->919600
819599->919601
619596->719602
719602->819603
719602->819604
819604->919605
619596->719606
719606->819607
619596->719608
719608->819609
819609->919610
919610->1019611
1019611->1119612
1019611->1119613
1119613->1219614
1119613->1219615
1219615->1319616
819609->919617
919617->1019618
1019618->1119619
1019618->1119620
919617->1019621
1019621->1119622
1119622->1219623
1219623->1319624
1319624->1419625
1419625->1519626
1419625->1519627
1319624->1419628
1319624->1419629
1419629->1519630
1519630->1619631
1119622->1219632
1219632->1319633
1319633->1419634
1419634->1519635
1419634->1519636
1319633->1419637
1419637->1519638
1419637->1519639
519595->619640
619640->719641
719641->819642
719641->819643
719641->819644
819644->919645
919645->1019646
519595->619647
619647->719648
218121->319649
319649->419650
319649->419651
419651->519652
419651->519653
519653->619654
619654->719655
719655->819656
719655->819657
619654->719658
719658->819659
819659->919660
819659->919661
719658->819662
319649->419663
419663->519664
519664->619665
619665->719666
619665->719667
719667->819668
719667->819669
819669->919670
919670->1019671
819669->919672
919672->1019673
218121->319674
319674->419675
319674->419676
419676->519677
419676->519678
319674->419679
419679->519680
519680->619681
218121->319682
319682->419683
419683->519684
319682->419685
319682->419686
419686->519687
419686->519688
519688->619689
619689->719690
619689->719691
419686->519692
519692->619693
319682->419694
419694->519695
519695->619696
619696->719697
719697->819698
719697->819699
519695->619700
619700->719701
619700->719702
619700->719703
619700->719704
719704->819705
819705->919706
919706->1019707
919706->1019708
819705->919709
919709->1019710
1019710->1119711
1119711->1219712
1119711->1219713
819705->919714
919714->1019715
1019715->1119716
1119716->1219717
1219717->1319718
1219717->1319719
1019715->1119720
1119720->1219721
1219721->1319722
1219721->1319723
218121->319724
319724->419725
419725->519726
319724->419727
319724->419728
419728->519729
419728->519730
519730->619731
619731->719732
619731->719733
419728->519734
519734->619735
619735->719736
619735->719737
319724->419738
419738->519739
519739->619740
619740->719741
719741->819742
719741->819743
719741->819744
819744->919745
519739->619746
619746->719747
719747->819748
719747->819749
819749->919750
819749->919751
619746->719752
719752->819753
719752->819754
819754->919755
619746->719756
719756->819757
619746->719758
719758->819759
819759->919760
919760->1019761
1019761->1119762
1019761->1119763
1119763->1219764
1119763->1219765
1219765->1319766
819759->919767
919767->1019768
1019768->1119769
1019768->1119770
919767->1019771
1019771->1119772
1119772->1219773
1219773->1319774
1319774->1419775
1419775->1519776
1419775->1519777
1319774->1419778
1319774->1419779
1419779->1519780
1519780->1619781
1119772->1219782
1219782->1319783
1319783->1419784
1419784->1519785
1419784->1519786
1319783->1419787
218121->319788
319788->419789
319788->419790
419790->519791
419790->519792
519792->619793
619793->719794
719794->819795
719794->819796
619793->719797
719797->819798
819798->919799
819798->919800
919800->1019801
1019801->1119802
719797->819803
319788->419804
419804->519805
519805->619806
619806->719807
719807->819808
719807->819809
819809->919810
819809->919811
919811->1019812
519805->619813
619813->719814
719814->819815
719814->819816
819816->919817
819816->919818
619813->719819
719819->819820
719819->819821
619813->719822
719822->819823
619813->719824
719824->819825
819825->919826
919826->1019827
1019827->1119828
1119828->1219829
1219829->1319830
1019827->1119831
1119831->1219832
1119831->1219833
1219833->1319834
1219833->1319835
1319835->1419836
1319835->1419837
819825->919838
919838->1019839
1019839->1119840
1019839->1119841
919838->1019842
1019842->1119843
1119843->1219844
1219844->1319845
1319845->1419846
1319845->1419847
1419847->1519848
1419847->1519849
1519849->1619850
1519849->1619851
1119843->1219852
1219852->1319853
1319853->1419854
1319853->1419855
1419855->1519856
1419855->1519857
1119843->1219858
1219858->1319859
1319859->1419860
1319859->1419861
1419861->1519862
1419861->1519863
1519863->1619864
1119843->1219865
1219865->1319866
1319866->1419867
1319866->1419868
1219865->1319869
1319869->1419870
1219865->1319871
1319871->1419872
1419872->1519873
1519873->1619874
1619874->1719875
1619874->1719876
1619874->1719877
1719877->1819878
1719877->1819879
1819879->1919880
1819879->1919881
1419872->1519882
1519882->1619883
1619883->1719884
1619883->1719885
1519882->1619886
1419872->1519887
1519887->1619888
1619888->1719889
1719889->1819890
1619888->1719891
1519887->1619892
1619892->1719893
1719893->1819894
1819894->1919895
1919895->2019896
1919895->2019897
1919895->2019898
2019898->2119899
1719893->1819900
1819900->1919901
1919901->2019902
1919901->2019903
1919901->2019904
2019904->2119905
2019904->2119906
1119843->1219907
1219907->1319908
1319908->1419909
1319908->1419910
1219907->1319911
1319911->1419912
1419912->1519913
1519913->1619914
1619914->1719915
1619914->1719916
1719916->1819917
1719916->1819918
1719916->1819919
1419912->1519920
1519920->1619921
1619921->1719922
1619921->1719923
1619921->1719924
1719924->1819925
1719924->1819926
218121->319927
319927->419928
319927->419929
419929->519930
419929->519931
519931->619932
619932->719933
719933->819934
819934->919935
819934->919936
719933->819937
619932->719938
719938->819939
819939->919940
819939->919941
919941->1019942
1019942->1119943
719938->819944
319927->419945
419945->519946
519946->619947
619947->719948
719948->819949
719948->819950
819950->919951
819950->919952
919952->1019953
519946->619954
619954->719955
719955->819956
719955->819957
819957->919958
819957->919959
619954->719960
719960->819961
719960->819962
619954->719963
719963->819964
619954->719965
719965->819966
819966->919967
919967->1019968
1019968->1119969
1119969->1219970
1219970->1319971
1019968->1119972
1119972->1219973
1119972->1219974
1219974->1319975
1219974->1319976
1319976->1419977
1319976->1419978
819966->919979
919979->1019980
1019980->1119981
1019980->1119982
919979->1019983
1019983->1119984
1119984->1219985
1219985->1319986
1319986->1419987
1319986->1419988
1419988->1519989
1419988->1519990
1519990->1619991
1519990->1619992
1119984->1219993
1219993->1319994
1319994->1419995
1319994->1419996
1419996->1519997
1419996->1519998
1119984->1219999
1219999->1320000
1320000->1420001
1320000->1420002
1420002->1520003
1420002->1520004
1520004->1620005
1119984->1220006
1220006->1320007
1320007->1420008
1320007->1420009
1220006->1320010
1320010->1420011
1220006->1320012
1320012->1420013
1420013->1520014
1520014->1620015
1620015->1720016
1620015->1720017
1620015->1720018
1720018->1820019
1720018->1820020
1820020->1920021
1820020->1920022
1420013->1520023
1520023->1620024
1620024->1720025
1620024->1720026
1520023->1620027
1420013->1520028
1520028->1620029
1620029->1720030
1720030->1820031
1620029->1720032
1520028->1620033
1620033->1720034
1720034->1820035
1820035->1920036
1920036->2020037
1920036->2020038
1920036->2020039
2020039->2120040
1720034->1820041
1820041->1920042
1920042->2020043
1920042->2020044
1920042->2020045
2020045->2120046
2020045->2120047
1119984->1220048
1220048->1320049
1320049->1420050
1320049->1420051
1220048->1320052
1320052->1420053
1420053->1520054
1520054->1620055
1620055->1720056
1620055->1720057
1720057->1820058
1720057->1820059
1720057->1820060
1420053->1520061
1520061->1620062
1620062->1720063
1620062->1720064
1620062->1720065
1720065->1820066
1720065->1820067
218121->320068
320068->420069
320068->420070
420070->520071
420070->520072
520072->620073
620073->720074
720074->820075
720074->820076
620073->720077
720077->820078
820078->920079
820078->920080
920080->1020081
1020081->1120082
720077->820083
320068->420084
420084->520085
520085->620086
620086->720087
720087->820088
720087->820089
820089->920090
820089->920091
920091->1020092
520085->620093
620093->720094
720094->820095
720094->820096
820096->920097
820096->920098
520085->620099
620099->720100
720100->820101
820101->920102
920102->1020103
720100->820104
820104->920105
820104->920106
520085->620107
620107->720108
720108->820109
720108->820110
820110->920111
820110->920112
620107->720113
720113->820114
720113->820115
620107->720116
720116->820117
620107->720118
720118->820119
820119->920120
920120->1020121
1020121->1120122
1020121->1120123
1020121->1120124
1120124->1220125
1120124->1220126
1220126->1320127
1220126->1320128
820119->920129
920129->1020130
1020130->1120131
1020130->1120132
920129->1020133
1020133->1120134
1120134->1220135
1220135->1320136
1320136->1420137
1320136->1420138
1420138->1520139
1420138->1520140
1520140->1620141
1120134->1220142
1220142->1320143
1320143->1420144
1320143->1420145
1220142->1320146
1320146->1420147
1420147->1520148
1520148->1620149
1520148->1620150
1620150->1720151
1620150->1720152
1720152->1820153
1720152->1820154
1620150->1720155
920129->1020156
1020156->1120157
1120157->1220158
1220158->1320159
1320159->1420160
1320159->1420161
1320159->1420162
1120157->1220163
1220163->1320164
1320164->1420165
1120157->1220166
1220166->1320167
1320167->1420168
1320167->1420169
1320167->1420170
218121->320171
320171->420172
320171->420173
420173->520174
420173->520175
520175->620176
620176->720177
720177->820178
820178->920179
820178->920180
720177->820181
620176->720182
720182->820183
820183->920184
820183->920185
920185->1020186
1020186->1120187
720182->820188
320171->420189
420189->520190
520190->620191
620191->720192
720192->820193
720192->820194
820194->920195
820194->920196
920196->1020197
520190->620198
620198->720199
720199->820200
720199->820201
820201->920202
820201->920203
520190->620204
620204->720205
720205->820206
820206->920207
920207->1020208
720205->820209
820209->920210
820209->920211
520190->620212
620212->720213
720213->820214
720213->820215
820215->920216
820215->920217
620212->720218
720218->820219
720218->820220
620212->720221
720221->820222
620212->720223
720223->820224
820224->920225
920225->1020226
1020226->1120227
1020226->1120228
1020226->1120229
1120229->1220230
1120229->1220231
1220231->1320232
1220231->1320233
820224->920234
920234->1020235
1020235->1120236
1020235->1120237
920234->1020238
1020238->1120239
1120239->1220240
1220240->1320241
1320241->1420242
1320241->1420243
1420243->1520244
1420243->1520245
1520245->1620246
1120239->1220247
1220247->1320248
1320248->1420249
1320248->1420250
1220247->1320251
1320251->1420252
1420252->1520253
1520253->1620254
1520253->1620255
1620255->1720256
1620255->1720257
1720257->1820258
1720257->1820259
1620255->1720260
920234->1020261
1020261->1120262
1120262->1220263
1220263->1320264
1320264->1420265
1320264->1420266
1320264->1420267
1120262->1220268
1220268->1320269
1320269->1420270
1120262->1220271
1220271->1320272
1320272->1420273
1320272->1420274
1320272->1420275
-10->020276
020276->120277
120277->220278
220278->320279
320279->420280
420280->520281
520281->620282
620282->720283
020276->120284
120284->220285
220285->320286
320286->420287
420287->520288
520288->620289
620289->720290
020276->120291
120291->220292
220292->320293
320293->420294
020276->120295
120295->220296
120295->220297
220297->320298
120295->220299
220299->320300
320300->420301
320300->420302
420302->520303
420302->520304
420302->520305
520305->620306
320300->420307
420307->520308
520308->620309
620309->720310
720310->820311
820311->920312
920312->1020313
720310->820314
820314->920315
820314->920316
920316->1020317
1020317->1120318
520308->620319
620319->720320
720320->820321
820321->920322
820321->920323
720320->820324
820324->920325
820324->920326
920326->1020327
920326->1020328
920326->1020329
1020329->1120330
1120330->1220331
1120330->1220332
1120330->1220333
520308->620334
620334->720335
620334->720336
620334->720337
620334->720338
720338->820339
820339->920340
920340->1020341
920340->1020342
1020342->1120343
1020342->1120344
520308->620345
620345->720346
720346->820347
720346->820348
720346->820349
820349->920350
820349->920351
520308->620352
620352->720353
720353->820354
820354->920355
820354->920356
920356->1020357
1020357->1120358
720353->820359
820359->920360
820359->920361
920361->1020362
1020362->1120363
920361->1020364
1020364->1120365
1120365->1220366
1220366->1320367
1120365->1220368
1120365->1220369
1220369->1320370
1220369->1320371
1320371->1420372
1420372->1520373
1520373->1620374
1620374->1720375
1620374->1720376
1520373->1620377
1620377->1720378
1620377->1720379
1420372->1520380
1520380->1620381
1520380->1620382
1120365->1220383
1220383->1320384
1320384->1420385
1420385->1520386
1520386->1620387
1620387->1720388
1520386->1620389
1620389->1720390
1620389->1720391
1620389->1720392
1620389->1720393
1320384->1420394
1420394->1520395
1520395->1620396
1520395->1620397
1620397->1720398
1620397->1720399
1720399->1820400
1720399->1820401
1820401->1920402
1820401->1920403
520308->620404
620404->720405
720405->820406
720405->820407
820407->920408
820407->920409
-10->020410
020410->120411
120411->220412
220412->320413
320413->420414
420414->520415
520415->620416
620416->720417
020410->120418
120418->220419
220419->320420
320420->420421
420421->520422
420421->520423
520423->620424
620424->720425
620424->720426
320420->420427
420427->520428
520428->620429
620429->720430
720430->820431
820431->920432
920432->1020433
1020433->1120434
1020433->1120435
1120435->1220436
1120435->1220437
920432->1020438
1020438->1120439
1120439->1220440
1120439->1220441
820431->920442
620429->720443
220419->320444
320444->420445
420445->520446
420445->520447
520447->620448
620448->720449
720449->820450
720449->820451
620448->720452
720452->820453
720452->820454
320444->420455
420455->520456
520456->620457
520456->620458
620458->720459
720459->820460
820460->920461
820460->920462
920462->1020463
1020463->1120464
1020463->1120465
920462->1020466
1020466->1120467
1120467->1220468
1120467->1220469
1220469->1320470
1220469->1320471
1020466->1120472
1120472->1220473
1120472->1220474
1220474->1320475
1320475->1420476
1320475->1420477
220419->320478
320478->420479
420479->520480
420479->520481
520481->620482
620482->720483
620482->720484
320478->420485
420485->520486
520486->620487
620487->720488
720488->820489
720488->820490
820490->920491
820490->920492
920492->1020493
920492->1020494
520486->620495
620495->720496
720496->820497
820497->920498
820497->920499
720496->820500
820500->920501
820500->920502
920502->1020503
1020503->1120504
1020503->1120505
920502->1020506
1020506->1120507
1120507->1220508
1220508->1320509
1120507->1220510
1220510->1320511
1320511->1420512
1420512->1520513
1420512->1520514
1520514->1620515
1620515->1720516
1620515->1720517
1320511->1420518
220419->320519
320519->420520
420520->520521
420520->520522
320519->420523
420523->520524
520524->620525
620525->720526
220419->320527
320527->420528
420528->520529
420528->520530
320527->420531
420531->520532
520532->620533
220419->320534
320534->420535
420535->520536
420535->520537
320534->420538
420538->520539
520539->620540
220419->320541
320541->420542
420542->520543
420542->520544
320541->420545
420545->520546
520546->620547
620547->720548
720548->820549
820549->920550
920550->1020551
920550->1020552
720548->820553
620547->720554
720554->820555
820555->920556
920556->1020557
920556->1020558
520546->620559
620559->720560
720560->820561
220419->320562
320562->420563
420563->520564
420563->520565
320562->420566
420566->520567
520567->620568
620568->720569
720569->820570
720569->820571
720569->820572
820572->920573
820572->920574
920574->1020575
1020575->1120576
520567->620577
620577->720578
720578->820579
720578->820580
720578->820581
520567->620582
620582->720583
720583->820584
720583->820585
820585->920586
820585->920587
620582->720588
720588->820589
720588->820590
820590->920591
620582->720592
720592->820593
620582->720594
720594->820595
820595->920596
920596->1020597
1020597->1120598
1120598->1220599
1120598->1220600
1020597->1120601
1020597->1120602
820595->920603
920603->1020604
1020604->1120605
1020604->1120606
1020604->1120607
1120607->1220608
1120607->1220609
1220609->1320610
1220609->1320611
220419->320612
320612->420613
420613->520614
420613->520615
320612->420616
420616->520617
520617->620618
620618->720619
720619->820620
520617->620621
620621->720622
720622->820623
720622->820624
720622->820625
220419->320626
320626->420627
320626->420628
320626->420629
320626->420630
320626->420631
420631->520632
420631->520633
220419->320634
320634->420635
320634->420636
320634->420637
420637->520638
420637->520639
520639->620640
620640->720641
620640->720642
320634->420643
420643->520644
520644->620645
620645->720646
720646->820647
720646->820648
720646->820649
820649->920650
920650->1020651
1020651->1120652
1120652->1220653
1220653->1320654
1220653->1320655
1020651->1120656
820649->920657
920657->1020658
1020658->1120659
1020658->1120660
520644->620661
620661->720662
720662->820663
720662->820664
720662->820665
820665->920666
920666->1020667
1020667->1120668
1120668->1220669
1220669->1320670
1220669->1320671
1020667->1120672
820665->920673
920673->1020674
1020674->1120675
1020674->1120676
520644->620677
620677->720678
720678->820679
720678->820680
720678->820681
820681->920682
920682->1020683
1020683->1120684
1120684->1220685
1220685->1320686
1220685->1320687
1020683->1120688
820681->920689
520644->620690
620690->720691
720691->820692
720691->820693
720691->820694
820694->920695
820694->920696
520644->620697
620697->720698
720698->820699
720698->820700
720698->820701
820701->920702
820701->920703
520644->620704
620704->720705
720705->820706
720705->820707
220419->320708
320708->420709
320708->420710
320708->420711
420711->520712
420711->520713
220419->320714
320714->420715
320714->420716
420716->520717
420716->520718
320714->420719
220419->320720
320720->420721
320720->420722
320720->420723
220419->320724
320724->420725
320724->420726
320724->420727
-10->020728
020728->120729
120729->220730
220730->320731
320731->420732
420732->520733
520733->620734
020728->120735
120735->220736
120735->220737
220737->320738
120735->220739
220739->320740
320740->420741
320740->420742
420742->520743
520743->620744
520743->620745
420742->520746
520746->620747
620747->720748
620747->720749
320740->420750
420750->520751
520751->620752
620752->720753
620752->720754
-10->020755
020755->120756
120756->220757
220757->320758
320758->420759
420759->520760
020755->120761
120761->220762
220762->320763
320763->420764
020755->120765
120765->220766
220766->320767
320767->420768
020755->120769
120769->220770
220770->320771
320771->420772
020755->120773
120773->220774
120773->220775
220775->320776
320776->420777
320776->420778
220775->320779
320779->420780
320779->420781
220775->320782
320782->420783
420783->520784
520784->620785
620785->720786
720786->820787
320782->420788
220775->320789
320789->420790
420790->520791
520791->620792
620792->720793
720793->820794
720793->820795
420790->520796
320789->420797
220775->320798
320798->420799
420799->520800
520800->620801
620801->720802
620801->720803
320798->420804
220775->320805
320805->420806
420806->520807
520807->620808
620808->720809
620808->720810
320805->420811
220775->320812
320812->420813
320812->420814
320812->420815
320812->420816
420816->520817
420816->520818
220775->320819
320819->420820
320819->420821
320819->420822
320819->420823
420823->520824
420823->520825
220775->320826
320826->420827
320826->420828
420828->520829
420828->520830
520830->620831
620831->720832
720832->820833
820833->920834
920834->1020835
520830->620836
320826->420837
420837->520838
520838->620839
620839->720840
720840->820841
820841->920842
720840->820843
720840->820844
520838->620845
620845->720846
720846->820847
720846->820848
720846->820849
820849->920850
520838->620851
620851->720852
720852->820853
820853->920854
620851->720855
620851->720856
620851->720857
720857->820858
820858->920859
920859->1020860
920859->1020861
920859->1020862
1020862->1120863
520838->620864
620864->720865
720865->820866
720865->820867
720865->820868
520838->620869
620869->720870
720870->820871
720870->820872
720870->820873
820873->920874
820873->920875
920875->1020876
520838->620877
620877->720878
720878->820879
720878->820880
720878->820881
820881->920882
920882->1020883
1020883->1120884
1020883->1120885
520838->620886
620886->720887
720887->820888
720887->820889
720887->820890
820890->920891
920891->1020892
1020892->1120893
1020892->1120894
520838->620895
620895->720896
720896->820897
220775->320898
320898->420899
320898->420900
420900->520901
420900->520902
320898->420903
420903->520904
520904->620905
620905->720906
720906->820907
720906->820908
820908->920909
820908->920910
520904->620911
620911->720912
720912->820913
820913->920914
620911->720915
620911->720916
620911->720917
720917->820918
820918->920919
920919->1020920
1020920->1120921
1120921->1220922
1220922->1320923
1320923->1420924
1320923->1420925
1020920->1120926
1120926->1220927
1120926->1220928
1220928->1320929
1320929->1420930
1420930->1520931
1420930->1520932
820918->920933
920933->1020934
920933->1020935
920933->1020936
920933->1020937
1020937->1120938
1120938->1220939
1220939->1320940
1320940->1420941
1320940->1420942
1420942->1520943
1420942->1520944
1520944->1620945
1520944->1620946
1120938->1220947
1220947->1320948
1320948->1420949
1320948->1420950
1320948->1420951
1420951->1520952
1520952->1620953
1620953->1720954
1720954->1820955
1720954->1820956
1620953->1720957
1620953->1720958
1420951->1520959
1120938->1220960
1220960->1320961
1320961->1420962
1320961->1420963
1420963->1520964
1420963->1520965
820918->920966
920966->1020967
1020967->1120968
1120968->1220969
1120968->1220970
1020967->1120971
1020967->1120972
820918->920973
920973->1020974
1020974->1120975
1020974->1120976
1120976->1220977
1220977->1320978
1320978->1420979
1320978->1420980
920973->1020981
920973->1020982
1020982->1120983
920973->1020984
1020984->1120985
1120985->1220986
1220986->1320987
1320987->1420988
1320987->1420989
1420989->1520990
1420989->1520991
1520991->1620992
1120985->1220993
1220993->1320994
1320994->1420995
1320994->1420996
1420996->1520997
1420996->1520998
1520998->1620999
1520998->1621000
1120985->1221001
1221001->1321002
1321002->1421003
1321002->1421004
1321002->1421005
1421005->1521006
1521006->1621007
1621007->1721008
1721008->1821009
1721008->1821010
1621007->1721011
1621007->1721012
1421005->1521013
1120985->1221014
1221014->1321015
1321015->1421016
1321015->1421017
1421017->1521018
1421017->1521019
820918->921020
921020->1021021
1021021->1121022
520904->621023
621023->721024
721024->821025
721024->821026
821026->921027
921027->1021028
1021028->1121029
1021028->1121030
621023->721031
621023->721032
721032->821033
621023->721034
721034->821035
821035->921036
921036->1021037
1021037->1121038
1021037->1121039
1121039->1221040
1121039->1221041
1221041->1321042
821035->921043
921043->1021044
1021044->1121045
1021044->1121046
1121046->1221047
1121046->1221048
1221048->1321049
821035->921050
921050->1021051
1021051->1121052
1021051->1121053
1121053->1221054
1121053->1221055
1221055->1321056
1321056->1421057
1321056->1421058
1421058->1521059
1521059->1621060
1521059->1621061
1421058->1521062
1221055->1321063
1321063->1421064
1321063->1421065
1421065->1521066
1421065->1521067
220775->321068
321068->421069
321068->421070
421070->521071
421070->521072
521072->621073
621073->721074
721074->821075
821075->921076
921076->1021077
721074->821078
621073->721079
721079->821080
721079->821081
321068->421082
421082->521083
521083->621084
621084->721085
721085->821086
721085->821087
821087->921088
821087->921089
521083->621090
621090->721091
621090->721092
621090->721093
621090->721094
721094->821095
821095->921096
921096->1021097
1021097->1121098
1121098->1221099
1221099->1321100
1221099->1321101
1121098->1221102
1221102->1321103
921096->1021104
821095->921105
921105->1021106
1021106->1121107
1021106->1121108
1121108->1221109
1121108->1221110
1221110->1321111
1321111->1421112
1321111->1421113
1221110->1321114
821095->921115
921115->1021116
1021116->1121117
1021116->1121118
1121118->1221119
1121118->1221120
1221120->1321121
1321121->1421122
1321121->1421123
1221120->1321124
1321124->1421125
821095->921126
921126->1021127
1021127->1121128
1021127->1121129
1021127->1121130
1121130->1221131
1221131->1321132
1321132->1421133
1421133->1521134
1521134->1621135
1521134->1621136
1421133->1521137
1321132->1421138
1421138->1521139
1521139->1621140
1521139->1621141
1221131->1321142
1321142->1421143
1421143->1521144
1421143->1521145
1521145->1621146
1521145->1621147
1621147->1721148
1721148->1821149
1821149->1921150
1821149->1921151
1721148->1821152
1821152->1921153
1921153->2021154
1921153->2021155
1821152->1921156
521083->621157
621157->721158
220775->321159
321159->421160
321159->421161
421161->521162
521162->621163
521162->621164
421161->521165
521165->621166
621166->721167
721167->821168
821168->921169
621166->721170
321159->421171
421171->521172
521172->621173
621173->721174
721174->821175
821175->921176
821175->921177
721174->821178
821178->921179
821178->921180
921180->1021181
921180->1021182
1021182->1121183
521172->621184
621184->721185
721185->821186
721185->821187
821187->921188
821187->921189
621184->721190
721190->821191
721190->821192
621184->721193
721193->821194
621184->721195
721195->821196
821196->921197
921197->1021198
1021198->1121199
1021198->1121200
921197->1021201
921197->1021202
1021202->1121203
1021202->1121204
1121204->1221205
1121204->1221206
521172->621207
621207->721208
-10->021209
021209->121210
121210->221211
221211->321212
321212->421213
421213->521214
521214->621215
021209->121216
121216->221217
221217->321218
321218->421219
421219->521220
521220->621221
021209->121222
121222->221223
221223->321224
321224->421225
421225->521226
521226->621227
021209->121228
121228->221229
121228->221230
221230->321231
321231->421232
421232->521233
421232->521234
321231->421235
221230->321236
321236->421237
321236->421238
221230->321239
321239->421240
321239->421241
421241->521242
421241->521243
521243->621244
621244->721245
621244->721246
521243->621247
321239->421248
421248->521249
521249->621250
621250->721251
721251->821252
621250->721253
621250->721254
221230->321255
321255->421256
321255->421257
321255->421258
421258->521259
421258->521260
521260->621261
621261->721262
621261->721263
321255->421264
421264->521265
521265->621266
621266->721267
721267->821268
821268->921269
821268->921270
721267->821271
821271->921272
821271->921273
921273->1021274
921273->1021275
521265->621276
621276->721277
721277->821278
721277->821279
621276->721280
721280->821281
521265->621282
621282->721283
721283->821284
221230->321285
321285->421286
321285->421287
421287->521288
521288->621289
521288->621290
421287->521291
321285->421292
421292->521293
521293->621294
221230->321295
321295->421296
321295->421297
421297->521298
421297->521299
321295->421300
421300->521301
521301->621302
621302->721303
721303->821304
721303->821305
821305->921306
821305->921307
921307->1021308
921307->1021309
1021309->1121310
1021309->1121311
521301->621312
621312->721313
721313->821314
721313->821315
721313->821316
521301->621317
621317->721318
221230->321319
321319->421320
321319->421321
421321->521322
421321->521323
321319->421324
421324->521325
521325->621326
621326->721327
721327->821328
721327->821329
821329->921330
821329->921331
921331->1021332
921331->1021333
1021333->1121334
1021333->1121335
521325->621336
621336->721337
721337->821338
721337->821339
721337->821340
521325->621341
621341->721342
221230->321343
321343->421344
321343->421345
421345->521346
421345->521347
321343->421348
421348->521349
521349->621350
621350->721351
721351->821352
721351->821353
821353->921354
821353->921355
921355->1021356
921355->1021357
1021357->1121358
1021357->1121359
521349->621360
621360->721361
721361->821362
721361->821363
721361->821364
521349->621365
621365->721366
221230->321367
321367->421368
321367->421369
421369->521370
421369->521371
321367->421372
421372->521373
521373->621374
621374->721375
621374->721376
721376->821377
721376->821378
221230->321379
321379->421380
321379->421381
421381->521382
421381->521383
321379->421384
421384->521385
521385->621386
621386->721387
621386->721388
721388->821389
221230->321390
321390->421391
321390->421392
421392->521393
421392->521394
321390->421395
421395->521396
521396->621397
621397->721398
721398->821399
821399->921400
821399->921401
721398->821402
821402->921403
821402->921404
921404->1021405
921404->1021406
1021406->1121407
1121407->1221408
521396->621409
621409->721410
721410->821411
721410->821412
821412->921413
821412->921414
621409->721415
721415->821416
721415->821417
821417->921418
621409->721419
721419->821420
621409->721421
721421->821422
821422->921423
921423->1021424
1021424->1121425
1021424->1121426
921423->1021427
921423->1021428
1021428->1121429
521396->621430
621430->721431
721431->821432
221230->321433
321433->421434
321433->421435
421435->521436
421435->521437
321433->421438
421438->521439
521439->621440
621440->721441
721441->821442
721441->821443
821443->921444
821443->921445
921445->1021446
921445->1021447
1021447->1121448
1021447->1121449
521439->621450
621450->721451
721451->821452
721451->821453
721451->821454
521439->621455
621455->721456
221230->321457
321457->421458
321457->421459
421459->521460
421459->521461
321457->421462
421462->521463
521463->621464
621464->721465
721465->821466
721465->821467
821467->921468
821467->921469
921469->1021470
521463->621471
621471->721472
721472->821473
721472->821474
821474->921475
821474->921476
921476->1021477
521463->621478
621478->721479
721479->821480
821480->921481
921481->1021482
1021482->1121483
1121483->1221484
1221484->1321485
1221484->1321486
1021482->1121487
821480->921488
921488->1021489
1021489->1121490
1021489->1121491
221230->321492
321492->421493
321492->421494
421494->521495
421494->521496
321492->421497
421497->521498
521498->621499
621499->721500
721500->821501
721500->821502
821502->921503
821502->921504
921504->1021505
521498->621506
621506->721507
721507->821508
821508->921509
821508->921510
721507->821511
821511->921512
821511->921513
521498->621514
621514->721515
721515->821516
821516->921517
821516->921518
721515->821519
821519->921520
821519->921521
521498->621522
621522->721523
721523->821524
721523->821525
721523->821526
821526->921527
821526->921528
921528->1021529
521498->621530
621530->721531
721531->821532
721531->821533
721531->821534
821534->921535
821534->921536
921536->1021537
521498->621538
621538->721539
721539->821540
721539->821541
821541->921542
821541->921543
821541->921544
521498->621545
621545->721546
721546->821547
721546->821548
821548->921549
821548->921550
521498->621551
621551->721552
721552->821553
721552->821554
821554->921555
821554->921556
521498->621557
621557->721558
721558->821559
721558->821560
821560->921561
821560->921562
621557->721563
721563->821564
721563->821565
621557->721566
721566->821567
621557->721568
721568->821569
821569->921570
921570->1021571
1021571->1121572
1021571->1121573
921570->1021574
921570->1021575
1021575->1121576
521498->621577
621577->721578
721578->821579
721578->821580
621577->721581
721581->821582
821582->921583
921583->1021584
1021584->1121585
1021584->1121586
1021584->1121587
1121587->1221588
1221588->1321589
1221588->1321590
1321590->1421591
1321590->1421592
1121587->1221593
821582->921594
921594->1021595
1021595->1121596
1021595->1121597
921594->1021598
821582->921599
921599->1021600
1021600->1121601
821582->921602
921602->1021603
1021603->1121604
1121604->1221605
1121604->1221606
1221606->1321607
1221606->1321608
1021603->1121609
1021603->1121610
1121610->1221611
1121610->1221612
521498->621613
621613->721614
721614->821615
721614->821616
621613->721617
721617->821618
821618->921619
921619->1021620
1021620->1121621
1021620->1121622
1021620->1121623
1121623->1221624
1221624->1321625
1221624->1321626
1321626->1421627
1321626->1421628
1121623->1221629
821618->921630
921630->1021631
1021631->1121632
1021631->1121633
921630->1021634
1021634->1121635
1121635->1221636
1221636->1321637
1321637->1421638
1221636->1321639
1321639->1421640
1221636->1321641
1321641->1421642
1221636->1321643
1321643->1421644
1221636->1321645
1321645->1421646
1221636->1321647
1321647->1421648
1221636->1321649
1321649->1421650
1221636->1321651
1321651->1421652
1121635->1221653
1221653->1321654
1321654->1421655
1421655->1521656
1221653->1321657
1321657->1421658
1421658->1521659
1521659->1621660
1521659->1621661
1621661->1721662
1621661->1721663
1421658->1521664
1421658->1521665
1521665->1621666
1521665->1621667
1221653->1321668
1021634->1121669
1121669->1221670
1221670->1321671
1321671->1421672
1221670->1321673
1321673->1421674
1121669->1221675
1221675->1321676
1321676->1421677
1421677->1521678
1421677->1521679
1421677->1521680
1221675->1321681
1321681->1421682
1421682->1521683
1421682->1521684
1321681->1421685
1421685->1521686
1521686->1621687
1521686->1621688
1221675->1321689
1321689->1421690
1421690->1521691
1421690->1521692
1421690->1521693
1521693->1621694
1521693->1621695
1621695->1721696
1621695->1721697
1721697->1821698
1721697->1821699
1221675->1321700
1321700->1421701
1421701->1521702
1521702->1621703
1621703->1721704
1621703->1721705
1421701->1521706
1321700->1421707
1421707->1521708
1521708->1621709
1521708->1621710
1621710->1721711
1621710->1721712
1221675->1321713
1321713->1421714
1421714->1521715
1521715->1621716
1521715->1621717
1621717->1721718
1621717->1721719
1421714->1521720
1421714->1521721
1521721->1621722
1521721->1621723
1621723->1721724
1721724->1821725
1821725->1921726
1921726->2021727
2021727->2121728
2121728->2221729
2121728->2221730
1921726->2021731
1721724->1821732
1821732->1921733
1921733->2021734
1921733->2021735
1221675->1321736
1021634->1121737
1121737->1221738
1221738->1321739
1121737->1221740
1221740->1321741
1321741->1421742
1421742->1521743
1421742->1521744
1421742->1521745
1221740->1321746
1321746->1421747
1421747->1521748
1421747->1521749
1321746->1421750
1421750->1521751
1521751->1621752
1521751->1621753
1221740->1321754
1321754->1421755
1421755->1521756
1421755->1521757
1421755->1521758
1521758->1621759
1521758->1621760
1621760->1721761
1621760->1721762
1721762->1821763
1721762->1821764
1221740->1321765
1321765->1421766
1421766->1521767
1421766->1521768
1421766->1521769
1521769->1621770
1521769->1621771
1621771->1721772
1621771->1721773
1721773->1821774
1721773->1821775
1221740->1321776
1321776->1421777
1421777->1521778
1521778->1621779
1621779->1721780
1721780->1821781
1821781->1921782
1821781->1921783
1621779->1721784
1421777->1521785
1521785->1621786
1621786->1721787
1721787->1821788
1821788->1921789
1821788->1921790
1621786->1721791
1321776->1421792
1421792->1521793
1521793->1621794
1521793->1621795
1621795->1721796
1621795->1721797
1721797->1821798
1821798->1921799
1821798->1921800
1221740->1321801
1321801->1421802
1421802->1521803
1521803->1621804
1521803->1621805
1621805->1721806
1621805->1721807
1421802->1521808
1421802->1521809
1521809->1621810
1521809->1621811
1621811->1721812
1721812->1821813
1821813->1921814
1921814->2021815
2021815->2121816
2121816->2221817
2221817->2321818
2221817->2321819
2021815->2121820
1821813->1921821
1921821->2021822
2021822->2121823
2121823->2221824
2221824->2321825
2221824->2321826
2021822->2121827
1721812->1821828
1821828->1921829
1921829->2021830
2021830->2121831
2121831->2221832
2121831->2221833
1921829->2021834
1221740->1321835
1021634->1121836
1121836->1221837
1121836->1221838
1221838->1321839
1321839->1421840
1321839->1421841
1421841->1521842
1421841->1521843
521498->621844
621844->721845
721845->821846
821846->921847
821846->921848
821846->921849
221230->321850
321850->421851
321850->421852
421852->521853
421852->521854
321850->421855
421855->521856
521856->621857
221230->321858
321858->421859
321858->421860
421860->521861
421860->521862
321858->421863
421863->521864
521864->621865
621865->721866
221230->321867
321867->421868
321867->421869
421869->521870
421869->521871
321867->421872
421872->521873
521873->621874
621874->721875
621874->721876
621874->721877
221230->321878
321878->421879
421879->521880
321878->421881
321878->421882
421882->521883
421882->521884
421882->521885
521885->621886
321878->421887
421887->521888
521888->621889
621889->721890
-10->021891
021891->121892
121892->221893
221893->321894
321894->421895
421895->521896
521896->621897
021891->121898
121898->221899
221899->321900
321900->421901
421901->521902
521902->621903
021891->121904
121904->221905
221905->321906
321906->421907
021891->121908
121908->221909
221909->321910
321910->421911
021891->121912
121912->221913
221913->321914
321914->421915
021891->121916
121916->221917
221917->321918
321918->421919
421919->521920
021891->121921
121921->221922
221922->321923
321923->421924
421924->521925
521925->621926
021891->121927
121927->221928
121927->221929
221929->321930
121927->221931
221931->321932
321932->421933
321932->421934
321932->421935
221931->321936
321936->421937
321936->421938
421938->521939
421938->521940
521940->621941
621941->721942
721942->821943
821943->921944
821943->921945
721942->821946
621941->721947
721947->821948
721947->821949
521940->621950
621950->721951
621950->721952
321936->421953
421953->521954
521954->621955
621955->721956
621955->721957
421953->521958
521958->621959
621959->721960
721960->821961
621959->721962
621959->721963
221931->321964
321964->421965
321964->421966
321964->421967
421967->521968
421967->521969
521969->621970
621970->721971
621970->721972
321964->421973
421973->521974
521974->621975
621975->721976
721976->821977
821977->921978
921978->1021979
921978->1021980
1021980->1121981
1021980->1121982
1121982->1221983
721976->821984
821984->921985
921985->1021986
921985->1021987
521974->621988
621988->721989
721989->821990
721989->821991
621988->721992
721992->821993
821993->921994
921994->1021995
1021995->1121996
1021995->1121997
1121997->1221998
1121997->1221999
821993->922000
922000->1022001
221931->322002
322002->422003
322002->422004
322002->422005
422005->522006
422005->522007
522007->622008
622008->722009
622008->722010
422005->522011
522011->622012
322002->422013
422013->522014
522014->622015
622015->722016
722016->822017
722016->822018
822018->922019
822018->922020
922020->1022021
522014->622022
622022->722023
722023->822024
722023->822025
822025->922026
822025->922027
922027->1022028
522014->622029
622029->722030
722030->822031
722030->822032
822032->922033
822032->922034
922034->1022035
922034->1022036
1022036->1122037
1022036->1122038
1122038->1222039
1122038->1222040
522014->622041
622041->722042
722042->822043
722042->822044
822044->922045
822044->922046
922046->1022047
922046->1022048
522014->622049
622049->722050
722050->822051
822051->922052
822051->922053
722050->822054
622049->722055
722055->822056
822056->922057
922057->1022058
1022058->1122059
822056->922060
922060->1022061
1022061->1122062
1022061->1122063
1022061->1122064
522014->622065
622065->722066
722066->822067
522014->622068
622068->722069
722069->822070
822070->922071
822070->922072
722069->822073
822073->922074
822073->922075
922075->1022076
522014->622077
622077->722078
722078->822079
822079->922080
822079->922081
822079->922082
221931->322083
322083->422084
422084->522085
322083->422086
322083->422087
422087->522088
422087->522089
322083->422090
422090->522091
522091->622092
622092->722093
722093->822094
722093->822095
622092->722096
722096->822097
722096->822098
221931->322099
322099->422100
422100->522101
322099->422102
322099->422103
422103->522104
422103->522105
522105->622106
622106->722107
622106->722108
322099->422109
422109->522110
522110->622111
622111->722112
722112->822113
722112->822114
622111->722115
522110->622116
622116->722117
722117->822118
822118->922119
922119->1022120
1022120->1122121
1122121->1222122
1122121->1222123
1222123->1322124
1222123->1322125
1322125->1422126
1322125->1422127
1422127->1522128
1522128->1622129
1622129->1722130
1522128->1622131
1622131->1722132
922119->1022133
1022133->1122134
1122134->1222135
1122134->1222136
1222136->1322137
1222136->1322138
1322138->1422139
1322138->1422140
1422140->1522141
1422140->1522142
1522142->1622143
1522142->1622144
922119->1022145
1022145->1122146
1122146->1222147
1122146->1222148
1222148->1322149
1222148->1322150
1322150->1422151
1322150->1422152
922119->1022153
1022153->1122154
1122154->1222155
1122154->1222156
1022153->1122157
1122157->1222158
1222158->1322159
1322159->1422160
1422160->1522161
1222158->1322162
1322162->1422163
1422163->1522164
1422163->1522165
1422163->1522166
922119->1022167
1022167->1122168
1122168->1222169
1122168->1222170
1022167->1122171
922119->1022172
1022172->1122173
1122173->1222174
922119->1022175
1022175->1122176
1122176->1222177
1222177->1322178
1222177->1322179
1122176->1222180
1222180->1322181
1222180->1322182
1322182->1422183
922119->1022184
1022184->1122185
1122185->1222186
1122185->1222187
1222187->1322188
1322188->1422189
1322188->1422190
1222187->1322191
1222187->1322192
1322192->1422193
1322192->1422194
1222187->1322195
1322195->1422196
1322195->1422197
1222187->1322198
1322198->1422199
1322198->1422200
922119->1022201
1022201->1122202
1122202->1222203
1122202->1222204
1222204->1322205
1222204->1322206
1222204->1322207
1322207->1422208
1322207->1422209
1222204->1322210
1322210->1422211
1322210->1422212
1222204->1322213
922119->1022214
1022214->1122215
1122215->1222216
1122215->1222217
1122215->1222218
722117->822219
822219->922220
922220->1022221
922220->1022222
822219->922223
922223->1022224
1022224->1122225
1122225->1222226
221931->322227
322227->422228
422228->522229
322227->422230
322227->422231
422231->522232
422231->522233
322227->422234
422234->522235
522235->622236
622236->722237
522235->622238
622238->722239
722239->822240
822240->922241
922241->1022242
622238->722243
722243->822244
822244->922245
822244->922246
722243->822247
822247->922248
922248->1022249
1022249->1122250
1022249->1122251
1122251->1222252
1122251->1222253
-10->022254
022254->122255
122255->222256
222256->322257
322257->422258
422258->522259
522259->622260
022254->122261
122261->222262
222262->322263
322263->422264
422264->522265
522265->622266
022254->122267
122267->222268
222268->322269
322269->422270
022254->122271
122271->222272
222272->322273
322273->422274
022254->122275
122275->222276
222276->322277
322277->422278
022254->122279
122279->222280
222280->322281
322281->422282
422282->522283
522283->622284
022254->122285
122285->222286
222286->322287
322287->422288
422288->522289
522289->622290
022254->122291
122291->222292
122291->222293
222293->322294
122291->222295
222295->322296
322296->422297
322296->422298
222295->322299
322299->422300
322299->422301
422301->522302
422301->522303
522303->622304
622304->722305
722305->822306
722305->822307
622304->722308
522303->622309
622309->722310
622309->722311
322299->422312
422312->522313
522313->622314
622314->722315
622314->722316
222295->322317
322317->422318
322317->422319
422319->522320
422319->522321
522321->622322
622322->722323
722323->822324
822324->922325
822324->922326
722323->822327
622322->722328
722328->822329
722328->822330
522321->622331
622331->722332
622331->722333
322317->422334
422334->522335
522335->622336
622336->722337
622336->722338
422334->522339
522339->622340
622340->722341
722341->822342
622340->722343
622340->722344
222295->322345
322345->422346
322345->422347
322345->422348
422348->522349
422348->522350
522350->622351
622351->722352
622351->722353
322345->422354
422354->522355
522355->622356
622356->722357
722357->822358
822358->922359
922359->1022360
922359->1022361
1022361->1122362
1022361->1122363
1122363->1222364
1222364->1322365
1222364->1322366
1122363->1222367
1222367->1322368
1122363->1222369
1222369->1322370
1222369->1322371
722357->822372
822372->922373
922373->1022374
922373->1022375
522355->622376
622376->722377
722377->822378
722377->822379
622376->722380
722380->822381
822381->922382
922382->1022383
1022383->1122384
1022383->1122385
1122385->1222386
1122385->1222387
822381->922388
922388->1022389
222295->322390
322390->422391
322390->422392
322390->422393
422393->522394
422393->522395
522395->622396
622396->722397
622396->722398
422393->522399
522399->622400
322390->422401
422401->522402
522402->622403
622403->722404
722404->822405
722404->822406
622403->722407
722407->822408
522402->622409
622409->722410
722410->822411
722410->822412
822412->922413
822412->922414
922414->1022415
522402->622416
622416->722417
722417->822418
722417->822419
722417->822420
822420->922421
822420->922422
922422->1022423
922422->1022424
522402->622425
622425->722426
722426->822427
722426->822428
822428->922429
822428->922430
922430->1022431
922430->1022432
1022432->1122433
1022432->1122434
522402->622435
622435->722436
722436->822437
822437->922438
822437->922439
722436->822440
822440->922441
822440->922442
922442->1022443
922442->1022444
1022444->1122445
522402->622446
622446->722447
722447->822448
822448->922449
822448->922450
922450->1022451
922450->1022452
722447->822453
622446->722454
722454->822455
822455->922456
922456->1022457
522402->622458
622458->722459
722459->822460
822460->922461
822460->922462
822460->922463
222295->322464
322464->422465
422465->522466
322464->422467
322464->422468
422468->522469
422468->522470
522470->622471
622471->722472
622471->722473
322464->422474
422474->522475
522475->622476
622476->722477
722477->822478
722477->822479
622476->722480
522475->622481
622481->722482
722482->822483
822483->922484
922484->1022485
1022485->1122486
1122486->1222487
1122486->1222488
1222488->1322489
1222488->1322490
1322490->1422491
1422491->1522492
1422491->1522493
1322490->1422494
922484->1022495
1022495->1122496
1122496->1222497
1122496->1222498
1122496->1222499
1222499->1322500
1222499->1322501
1322501->1422502
1322501->1422503
1422503->1522504
922484->1022505
1022505->1122506
1122506->1222507
1122506->1222508
1122506->1222509
1222509->1322510
1222509->1322511
1322511->1422512
1322511->1422513
922484->1022514
1022514->1122515
1122515->1222516
1222516->1322517
1222516->1322518
1122515->1222519
1222519->1322520
1222519->1322521
1322521->1422522
1322521->1422523
1422523->1522524
922484->1022525
1022525->1122526
1122526->1222527
1122526->1222528
1222528->1322529
1222528->1322530
1322530->1422531
1322530->1422532
1422532->1522533
1422532->1522534
922484->1022535
1022535->1122536
1122536->1222537
1122536->1222538
1022535->1122539
922484->1022540
1022540->1122541
1122541->1222542
1122541->1222543
1222543->1322544
1322544->1422545
1322544->1422546
1222543->1322547
1222543->1322548
1322548->1422549
1322548->1422550
1222543->1322551
1322551->1422552
1322551->1422553
1222543->1322554
1322554->1422555
1322554->1422556
922484->1022557
1022557->1122558
1122558->1222559
1122558->1222560
1222560->1322561
1222560->1322562
1222560->1322563
1322563->1422564
1322563->1422565
1222560->1322566
1322566->1422567
1322566->1422568
1222560->1322569
922484->1022570
1022570->1122571
1122571->1222572
1122571->1222573
1122571->1222574
722482->822575
822575->922576
922576->1022577
922576->1022578
822575->922579
922579->1022580
1022580->1122581
1122581->1222582
222295->322583
322583->422584
422584->522585
322583->422586
322583->422587
422587->522588
422587->522589
322583->422590
422590->522591
522591->622592
622592->722593
522591->622594
622594->722595
722595->822596
722595->822597
622594->722598
722598->822599
522591->622600
622600->722601
722601->822602
822602->922603
922603->1022604
622600->722605
722605->822606
822606->922607
822606->922608
722605->822609
822609->922610
922610->1022611
1022611->1122612
1022611->1122613
1122613->1222614
1122613->1222615
-10->022616
022616->122617
122617->222618
222618->322619
322619->422620
422620->522621
522621->622622
022616->122623
122623->222624
222624->322625
322625->422626
022616->122627
122627->222628
222628->322629
322629->422630
022616->122631
122631->222632
222632->322633
322633->422634
022616->122635
122635->222636
222636->322637
322637->422638
422638->522639
522639->622640
022616->122641
122641->222642
222642->322643
322643->422644
422644->522645
522645->622646
022616->122647
122647->222648
122647->222649
122647->222650
222650->322651
122647->222652
222652->322653
322653->422654
322653->422655
322653->422656
222652->322657
322657->422658
322657->422659
422659->522660
422659->522661
522661->622662
622662->722663
722663->822664
722663->822665
622662->722666
522661->622667
622667->722668
622667->722669
322657->422670
422670->522671
522671->622672
422670->522673
522673->622674
622674->722675
722675->822676
622674->722677
622674->722678
222652->322679
322679->422680
322679->422681
322679->422682
422682->522683
422682->522684
522684->622685
622685->722686
622685->722687
322679->422688
422688->522689
522689->622690
622690->722691
722691->822692
722691->822693
622690->722694
722694->822695
822695->922696
822695->922697
522689->622698
622698->722699
722699->822700
822700->922701
922701->1022702
1022702->1122703
1022702->1122704
1122704->1222705
1122704->1222706
1222706->1322707
1222706->1322708
822700->922709
922709->1022710
1022710->1122711
1022710->1122712
922709->1022713
1022713->1122714
1122714->1222715
1122714->1222716
1222716->1322717
1222716->1322718
822700->922719
922719->1022720
1022720->1122721
1022720->1122722
622698->722723
722723->822724
822724->922725
822724->922726
722723->822727
822727->922728
922728->1022729
1022729->1122730
1122730->1222731
1122730->1222732
1222732->1322733
1222732->1322734
922728->1022735
1022735->1122736
222652->322737
322737->422738
422738->522739
322737->422740
322737->422741
422741->522742
422741->522743
322737->422744
422744->522745
522745->622746
622746->722747
722747->822748
722747->822749
522745->622750
622750->722751
222652->322752
322752->422753
422753->522754
322752->422755
322752->422756
422756->522757
422756->522758
322752->422759
422759->522760
522760->622761
622761->722762
722762->822763
722762->822764
522760->622765
622765->722766
222652->322767
322767->422768
422768->522769
322767->422770
322767->422771
422771->522772
422771->522773
322767->422774
422774->522775
522775->622776
622776->722777
722777->822778
722777->822779
522775->622780
622780->722781
222652->322782
322782->422783
422783->522784
322782->422785
322782->422786
422786->522787
422786->522788
322782->422789
422789->522790
522790->622791
622791->722792
722792->822793
722792->822794
522790->622795
622795->722796
222652->322797
322797->422798
422798->522799
322797->422800
322797->422801
422801->522802
422801->522803
322797->422804
422804->522805
522805->622806
622806->722807
722807->822808
722807->822809
522805->622810
622810->722811
222652->322812
322812->422813
322812->422814
322812->422815
422815->522816
422815->522817
522817->622818
622818->722819
622818->722820
322812->422821
-10->022822
022822->122823
122823->222824
222824->322825
322825->422826
422826->522827
022822->122828
122828->222829
222829->322830
322830->422831
022822->122832
122832->222833
222833->322834
322834->422835
022822->122836
122836->222837
122836->222838
222838->322839
322839->422840
322839->422841
322839->422842
422842->522843
422842->522844
522844->622845
622845->722846
722846->822847
722846->822848
622845->722849
322839->422850
422850->522851
522851->622852
622852->722853
722853->822854
722853->822855
822855->922856
822855->922857
922857->1022858
922857->1022859
1022859->1122860
1122860->1222861
1222861->1322862
1322862->1422863
1422863->1522864
1422863->1522865
1322862->1422866
1122860->1222867
522851->622868
622868->722869
722869->822870
722869->822871
722869->822872
822872->922873
822872->922874
922874->1022875
1022875->1122876
1122876->1222877
1122876->1222878
1022875->1122879
522851->622880
622880->722881
222838->322882
322882->422883
322882->422884
322882->422885
422885->522886
422885->522887
522887->622888
622888->722889
722889->822890
722889->822891
622888->722892
322882->422893
422893->522894
522894->622895
622895->722896
622895->722897
722897->822898
722897->822899
222838->322900
322900->422901
322900->422902
322900->422903
422903->522904
422903->522905
522905->622906
622906->722907
722907->822908
822908->922909
822908->922910
722907->822911
622906->722912
722912->822913
722912->822914
322900->422915
422915->522916
522916->622917
622917->722918
722918->822919
722918->822920
822920->922921
822920->922922
922922->1022923
1022923->1122924
1122924->1222925
1222925->1322926
1222925->1322927
1322927->1422928
1322927->1422929
1122924->1222930
922922->1022931
522916->622932
622932->722933
722933->822934
722933->822935
722933->822936
822936->922937
922937->1022938
1022938->1122939
1122939->1222940
1122939->1222941
1222941->1322942
1222941->1322943
1322943->1422944
1322943->1422945
1022938->1122946
822936->922947
522916->622948
622948->722949
722949->822950
722949->822951
722949->822952
822952->922953
922953->1022954
1022954->1122955
1122955->1222956
1122955->1222957
1222957->1322958
1222957->1322959
1322959->1422960
1322959->1422961
1022954->1122962
822952->922963
522916->622964
622964->722965
722965->822966
722965->822967
722965->822968
822968->922969
922969->1022970
1022970->1122971
1122971->1222972
1122971->1222973
1222973->1322974
1222973->1322975
1322975->1422976
1322975->1422977
1022970->1122978
822968->922979
522916->622980
622980->722981
722981->822982
722981->822983
722981->822984
822984->922985
922985->1022986
1022986->1122987
1122987->1222988
1122987->1222989
1222989->1322990
1222989->1322991
1322991->1422992
1322991->1422993
1022986->1122994
822984->922995
522916->622996
622996->722997
722997->822998
722997->822999
722997->823000
823000->923001
923001->1023002
1023002->1123003
1123003->1223004
1123003->1223005
1223005->1323006
1223005->1323007
1323007->1423008
1323007->1423009
1023002->1123010
823000->923011
522916->623012
623012->723013
723013->823014
723013->823015
723013->823016
823016->923017
923017->1023018
1023018->1123019
1123019->1223020
1123019->1223021
1223021->1323022
1223021->1323023
1323023->1423024
1323023->1423025
1023018->1123026
823016->923027
522916->623028
623028->723029
723029->823030
723029->823031
723029->823032
823032->923033
923033->1023034
923033->1023035
1023035->1123036
1023035->1123037
1123037->1223038
1123037->1223039
823032->923040
522916->623041
623041->723042
723042->823043
723042->823044
222838->323045
323045->423046
323045->423047
323045->423048
423048->523049
423048->523050
523050->623051
623051->723052
723052->823053
723052->823054
623051->723055
323045->423056
423056->523057
523057->623058
623058->723059
623058->723060
723060->823061
723060->823062
222838->323063
323063->423064
323063->423065
323063->423066
423066->523067
423066->523068
523068->623069
623069->723070
723070->823071
723070->823072
623069->723073
323063->423074
423074->523075
523075->623076
623076->723077
723077->823078
723077->823079
823079->923080
823079->923081
923081->1023082
1023082->1123083
1123083->1223084
1223084->1323085
1223084->1323086
1123083->1223087
923081->1023088
523075->623089
623089->723090
723090->823091
723090->823092
723090->823093
823093->923094
923094->1023095
1023095->1123096
1123096->1223097
1123096->1223098
1023095->1123099
823093->923100
523075->623101
623101->723102
723102->823103
723102->823104
723102->823105
823105->923106
923106->1023107
1023107->1123108
1123108->1223109
1123108->1223110
1023107->1123111
823105->923112
523075->623113
623113->723114
723114->823115
723114->823116
723114->823117
823117->923118
923118->1023119
923118->1023120
823117->923121
523075->623122
623122->723123
222838->323124
323124->423125
323124->423126
323124->423127
423127->523128
423127->523129
523129->623130
623130->723131
723131->823132
723131->823133
623130->723134
323124->423135
423135->523136
523136->623137
623137->723138
723138->823139
723138->823140
823140->923141
823140->923142
923142->1023143
1023143->1123144
1123144->1223145
1223145->1323146
1223145->1323147
1323147->1423148
1323147->1423149
1123144->1223150
923142->1023151
523136->623152
623152->723153
723153->823154
723153->823155
723153->823156
823156->923157
923157->1023158
1023158->1123159
1123159->1223160
1123159->1223161
1223161->1323162
1223161->1323163
1023158->1123164
823156->923165
523136->623166
623166->723167
723167->823168
723167->823169
723167->823170
823170->923171
923171->1023172
1023172->1123173
1123173->1223174
1123173->1223175
1223175->1323176
1223175->1323177
1023172->1123178
823170->923179
523136->623180
623180->723181
723181->823182
723181->823183
723181->823184
823184->923185
923185->1023186
1023186->1123187
1123187->1223188
1123187->1223189
1223189->1323190
1223189->1323191
1023186->1123192
823184->923193
523136->623194
623194->723195
723195->823196
723195->823197
723195->823198
823198->923199
923199->1023200
1023200->1123201
1123201->1223202
1123201->1223203
1223203->1323204
1223203->1323205
1023200->1123206
823198->923207
523136->623208
623208->723209
723209->823210
723209->823211
723209->823212
823212->923213
923213->1023214
1023214->1123215
1123215->1223216
1123215->1223217
1223217->1323218
1223217->1323219
1023214->1123220
823212->923221
523136->623222
623222->723223
723223->823224
723223->823225
723223->823226
823226->923227
923227->1023228
1023228->1123229
1123229->1223230
1123229->1223231
1223231->1323232
1223231->1323233
1023228->1123234
823226->923235
523136->623236
623236->723237
723237->823238
723237->823239
723237->823240
823240->923241
923241->1023242
923241->1023243
1023243->1123244
1023243->1123245
823240->923246
523136->623247
623247->723248
222838->323249
323249->423250
323249->423251
323249->423252
423252->523253
423252->523254
523254->623255
623255->723256
723256->823257
723256->823258
623255->723259
323249->423260
423260->523261
523261->623262
623262->723263
723263->823264
723263->823265
823265->923266
823265->923267
923267->1023268
1023268->1123269
1123269->1223270
1223270->1323271
1223270->1323272
1323272->1423273
1323272->1423274
1123269->1223275
923267->1023276
523261->623277
623277->723278
723278->823279
723278->823280
723278->823281
823281->923282
923282->1023283
1023283->1123284
1123284->1223285
1123284->1223286
1223286->1323287
1223286->1323288
1023283->1123289
823281->923290
523261->623291
623291->723292
723292->823293
723292->823294
723292->823295
823295->923296
923296->1023297
1023297->1123298
1123298->1223299
1123298->1223300
1223300->1323301
1223300->1323302
1023297->1123303
823295->923304
523261->623305
623305->723306
723306->823307
723306->823308
723306->823309
823309->923310
923310->1023311
1023311->1123312
1123312->1223313
1123312->1223314
1223314->1323315
1223314->1323316
1023311->1123317
823309->923318
523261->623319
623319->723320
723320->823321
723320->823322
723320->823323
823323->923324
923324->1023325
1023325->1123326
1123326->1223327
1123326->1223328
1223328->1323329
1223328->1323330
1023325->1123331
823323->923332
523261->623333
623333->723334
723334->823335
723334->823336
723334->823337
823337->923338
923338->1023339
1023339->1123340
1123340->1223341
1123340->1223342
1223342->1323343
1223342->1323344
1023339->1123345
823337->923346
523261->623347
623347->723348
723348->823349
723348->823350
723348->823351
823351->923352
923352->1023353
1023353->1123354
1123354->1223355
1123354->1223356
1223356->1323357
1223356->1323358
1023353->1123359
823351->923360
523261->623361
623361->723362
723362->823363
723362->823364
723362->823365
823365->923366
923366->1023367
923366->1023368
1023368->1123369
1023368->1123370
823365->923371
523261->623372
623372->723373
222838->323374
323374->423375
323374->423376
323374->423377
423377->523378
523378->623379
523378->623380
423377->523381
523381->623382
623382->723383
623382->723384
323374->423385
423385->523386
523386->623387
623387->723388
723388->823389
823389->923390
823389->923391
723388->823392
823392->923393
823392->923394
923394->1023395
923394->1023396
1023396->1123397
523386->623398
623398->723399
723399->823400
823400->923401
823400->923402
723399->823403
723399->823404
823404->923405
823404->923406
923406->1023407
1023407->1123408
1023407->1123409
523386->623410
623410->723411
723411->823412
823412->923413
823412->923414
723411->823415
723411->823416
823416->923417
823416->923418
523386->623419
623419->723420
222838->323421
323421->423422
323421->423423
323421->423424
423424->523425
523425->623426
523425->623427
423424->523428
523428->623429
623429->723430
623429->723431
323421->423432
423432->523433
523433->623434
623434->723435
623434->723436
723436->823437
723436->823438
222838->323439
323439->423440
323439->423441
323439->423442
423442->523443
523443->623444
523443->623445
423442->523446
523446->623447
623447->723448
623447->723449
323439->423450
423450->523451
523451->623452
623452->723453
623452->723454
723454->823455
723454->823456
222838->323457
323457->423458
323457->423459
323457->423460
423460->523461
523461->623462
523461->623463
423460->523464
523464->623465
623465->723466
623465->723467
323457->423468
423468->523469
523469->623470
623470->723471
723471->823472
823472->923473
823472->923474
723471->823475
823475->923476
823475->923477
923477->1023478
923477->1023479
1023479->1123480
523469->623481
623481->723482
723482->823483
823483->923484
823483->923485
723482->823486
723482->823487
823487->923488
823487->923489
923489->1023490
1023490->1123491
1023490->1123492
523469->623493
623493->723494
723494->823495
823495->923496
823495->923497
723494->823498
723494->823499
823499->923500
823499->923501
923501->1023502
1023502->1123503
1023502->1123504
523469->623505
623505->723506
723506->823507
823507->923508
823507->923509
723506->823510
723506->823511
823511->923512
823511->923513
923513->1023514
1023514->1123515
1023514->1123516
523469->623517
623517->723518
723518->823519
823519->923520
823519->923521
723518->823522
723518->823523
823523->923524
823523->923525
523469->623526
623526->723527
222838->323528
323528->423529
323528->423530
323528->423531
423531->523532
523532->623533
523532->623534
423531->523535
523535->623536
623536->723537
623536->723538
323528->423539
423539->523540
523540->623541
623541->723542
723542->823543
823543->923544
823543->923545
723542->823546
823546->923547
823546->923548
923548->1023549
923548->1023550
1023550->1123551
523540->623552
623552->723553
723553->823554
823554->923555
823554->923556
723553->823557
723553->823558
823558->923559
823558->923560
923560->1023561
1023561->1123562
1023561->1123563
523540->623564
623564->723565
723565->823566
823566->923567
823566->923568
723565->823569
723565->823570
823570->923571
823570->923572
923572->1023573
1023573->1123574
1023573->1123575
523540->623576
623576->723577
723577->823578
823578->923579
823578->923580
723577->823581
723577->823582
823582->923583
823582->923584
923584->1023585
1023585->1123586
1023585->1123587
523540->623588
623588->723589
723589->823590
823590->923591
823590->923592
723589->823593
723589->823594
823594->923595
823594->923596
923596->1023597
1023597->1123598
1023597->1123599
523540->623600
623600->723601
723601->823602
823602->923603
823602->923604
723601->823605
723601->823606
823606->923607
823606->923608
923608->1023609
1023609->1123610
1023609->1123611
523540->623612
623612->723613
723613->823614
823614->923615
823614->923616
723613->823617
723613->823618
823618->923619
823618->923620
923620->1023621
1023621->1123622
1023621->1123623
523540->623624
623624->723625
723625->823626
823626->923627
823626->923628
723625->823629
723625->823630
823630->923631
823630->923632
923632->1023633
1023633->1123634
1023633->1123635
523540->623636
623636->723637
723637->823638
823638->923639
823638->923640
723637->823641
723637->823642
823642->923643
823642->923644
923644->1023645
523540->623646
623646->723647
222838->323648
323648->423649
323648->423650
323648->423651
423651->523652
423651->523653
523653->623654
623654->723655
723655->823656
823656->923657
823656->923658
723655->823659
623654->723660
723660->823661
723660->823662
323648->423663
423663->523664
523664->623665
623665->723666
723666->823667
723666->823668
823668->923669
823668->923670
923670->1023671
1023671->1123672
1023671->1123673
923670->1023674
523664->623675
623675->723676
723676->823677
723676->823678
723676->823679
823679->923680
923680->1023681
1023681->1123682
1123682->1223683
1223683->1323684
1223683->1323685
1323685->1423686
1323685->1423687
1123682->1223688
923680->1023689
523664->623690
623690->723691
723691->823692
723691->823693
723691->823694
823694->923695
923695->1023696
1023696->1123697
1123697->1223698
1223698->1323699
1223698->1323700
1323700->1423701
1323700->1423702
1123697->1223703
923695->1023704
523664->623705
623705->723706
723706->823707
723706->823708
723706->823709
823709->923710
923710->1023711
1023711->1123712
1123712->1223713
1223713->1323714
1223713->1323715
1323715->1423716
1323715->1423717
1123712->1223718
923710->1023719
523664->623720
623720->723721
222838->323722
323722->423723
323722->423724
323722->423725
423725->523726
423725->523727
523727->623728
623728->723729
723729->823730
823730->923731
823730->923732
723729->823733
623728->723734
723734->823735
723734->823736
323722->423737
423737->523738
523738->623739
623739->723740
723740->823741
723740->823742
823742->923743
823742->923744
923744->1023745
1023745->1123746
1023745->1123747
1123747->1223748
1123747->1223749
923744->1023750
523738->623751
623751->723752
723752->823753
723752->823754
723752->823755
823755->923756
923756->1023757
1023757->1123758
1123758->1223759
1223759->1323760
1223759->1323761
1323761->1423762
1323761->1423763
1123758->1223764
923756->1023765
523738->623766
623766->723767
723767->823768
723767->823769
723767->823770
823770->923771
923771->1023772
1023772->1123773
1123773->1223774
1223774->1323775
1223774->1323776
1323776->1423777
1323776->1423778
1123773->1223779
923771->1023780
523738->623781
623781->723782
723782->823783
723782->823784
723782->823785
823785->923786
923786->1023787
1023787->1123788
1123788->1223789
1223789->1323790
1223789->1323791
1123788->1223792
923786->1023793
523738->623794
623794->723795
222838->323796
323796->423797
323796->423798
323796->423799
423799->523800
423799->523801
523801->623802
623802->723803
723803->823804
823804->923805
823804->923806
723803->823807
623802->723808
723808->823809
723808->823810
323796->423811
423811->523812
523812->623813
623813->723814
723814->823815
723814->823816
823816->923817
823816->923818
923818->1023819
923818->1023820
1023820->1123821
1123821->1223822
1223822->1323823
1323823->1423824
1423824->1523825
1523825->1623826
1623826->1723827
1623826->1723828
1523825->1623829
1323823->1423830
1123821->1223831
1223831->1323832
1323832->1423833
1423833->1523834
1423833->1523835
1523835->1623836
1523835->1623837
1323832->1423838
523812->623839
623839->723840
222838->323841
323841->423842
323841->423843
323841->423844
423844->523845
423844->523846
523846->623847
623847->723848
723848->823849
823849->923850
823849->923851
723848->823852
623847->723853
723853->823854
723853->823855
323841->423856
423856->523857
523857->623858
623858->723859
723859->823860
723859->823861
823861->923862
823861->923863
923863->1023864
923863->1023865
1023865->1123866
1023865->1123867
523857->623868
623868->723869
723869->823870
723869->823871
222838->323872
323872->423873
323872->423874
323872->423875
423875->523876
423875->523877
523877->623878
623878->723879
723879->823880
723879->823881
623878->723882
723882->823883
723882->823884
423875->523885
523885->623886
323872->423887
423887->523888
523888->623889
623889->723890
723890->823891
723890->823892
823892->923893
823892->923894
923894->1023895
1023895->1123896
1123896->1223897
1223897->1323898
1223897->1323899
1023895->1123900
523888->623901
623901->723902
723902->823903
723902->823904
823904->923905
823904->923906
923906->1023907
1023907->1123908
1123908->1223909
1223909->1323910
1223909->1323911
1023907->1123912
222838->323913
323913->423914
323913->423915
323913->423916
423916->523917
423916->523918
523918->623919
623919->723920
723920->823921
723920->823922
623919->723923
723923->823924
723923->823925
323913->423926
423926->523927
523927->623928
623928->723929
723929->823930
723929->823931
823931->923932
823931->923933
923933->1023934
923933->1023935
523927->623936
623936->723937
723937->823938
723937->823939
723937->823940
523927->623941
623941->723942
222838->323943
323943->423944
323943->423945
323943->423946
423946->523947
523947->623948
523947->623949
423946->523950
523950->623951
623951->723952
623951->723953
323943->423954
423954->523955
523955->623956
623956->723957
723957->823958
823958->923959
823958->923960
723957->823961
823961->923962
823961->923963
923963->1023964
923963->1023965
1023965->1123966
523955->623967
623967->723968
723968->823969
823969->923970
823969->923971
723968->823972
723968->823973
823973->923974
823973->923975
923975->1023976
1023976->1123977
1023976->1123978
523955->623979
623979->723980
723980->823981
823981->923982
823981->923983
723980->823984
723980->823985
823985->923986
823985->923987
923987->1023988
1023988->1123989
1023988->1123990
523955->623991
623991->723992
-10->023993
023993->123994
123994->223995
223995->323996
323996->423997
423997->523998
023993->123999
123999->224000
224000->324001
324001->424002
424002->524003
524003->624004
624004->724005
023993->124006
124006->224007
224007->324008
324008->424009
424009->524010
524010->624011
023993->124012
124012->224013
224013->324014
324014->424015
023993->124016
124016->224017
224017->324018
324018->424019
023993->124020
124020->224021
224021->324022
324022->424023
023993->124024
124024->224025
124024->224026
224026->324027
124024->224028
224028->324029
324029->424030
324029->424031
324029->424032
324029->424033
324029->424034
424034->524035
424034->524036
224028->324037
324037->424038
324037->424039
424039->524040
424039->524041
424039->524042
524042->624043
324037->424044
424044->524045
524045->624046
624046->724047
724047->824048
724047->824049
824049->924050
824049->924051
924051->1024052
1024052->1124053
524045->624054
624054->724055
724055->824056
724055->824057
524045->624058
624058->724059
724059->824060
724059->824061
524045->624062
624062->724063
724063->824064
724063->824065
824065->924066
824065->924067
924067->1024068
924067->1024069
524045->624070
624070->724071
724071->824072
824072->924073
724071->824074
824074->924075
524045->624076
624076->724077
724077->824078
824078->924079
724077->824080
824080->924081
224028->324082
324082->424083
324082->424084
424084->524085
424084->524086
424084->524087
524087->624088
324082->424089
424089->524090
524090->624091
624091->724092
724092->824093
724092->824094
824094->924095
824094->924096
924096->1024097
1024097->1124098
524090->624099
624099->724100
724100->824101
724100->824102
524090->624103
624103->724104
724104->824105
724104->824106
824106->924107
824106->924108
924108->1024109
924108->1024110
524090->624111
624111->724112
724112->824113
824113->924114
724112->824115
824115->924116
224028->324117
324117->424118
324117->424119
424119->524120
424119->524121
424119->524122
524122->624123
324117->424124
424124->524125
524125->624126
624126->724127
724127->824128
724127->824129
824129->924130
824129->924131
924131->1024132
1024132->1124133
524125->624134
624134->724135
724135->824136
724135->824137
824137->924138
824137->924139
524125->624140
624140->724141
724141->824142
724141->824143
824143->924144
824143->924145
924145->1024146
1024146->1124147
1124147->1224148
1224148->1324149
1224148->1324150
1024146->1124151
524125->624152
624152->724153
724153->824154
724153->824155
824155->924156
824155->924157
924157->1024158
1024158->1124159
1124159->1224160
1224160->1324161
1224160->1324162
1024158->1124163
524125->624164
624164->724165
724165->824166
724165->824167
824167->924168
824167->924169
924169->1024170
924169->1024171
524125->624172
624172->724173
724173->824174
824174->924175
724173->824176
824176->924177
224028->324178
324178->424179
324178->424180
424180->524181
424180->524182
424180->524183
524183->624184
324178->424185
424185->524186
524186->624187
624187->724188
624187->724189
724189->824190
724189->824191
524186->624192
624192->724193
624192->724194
724194->824195
524186->624196
624196->724197
524186->624198
624198->724199
724199->824200
824200->924201
924201->1024202
924201->1024203
1024203->1124204
1024203->1124205
724199->824206
824206->924207
924207->1024208
1024208->1124209
1024208->1124210
924207->1024211
1024211->1124212
1024211->1124213
1124213->1224214
1124213->1224215
724199->824216
824216->924217
924217->1024218
924217->1024219
1024219->1124220
1024219->1124221
1124221->1224222
1124221->1224223
1224223->1324224
1324224->1424225
1324224->1424226
1224223->1324227
1324227->1424228
1324227->1424229
-10->024230
024230->124231
124231->224232
224232->324233
324233->424234
424234->524235
524235->624236
024230->124237
124237->224238
224238->324239
324239->424240
024230->124241
124241->224242
224242->324243
324243->424244
024230->124245
124245->224246
124245->224247
224247->324248
124245->224249
224249->324250
324250->424251
324250->424252
324250->424253
224249->324254
324254->424255
324254->424256
424256->524257
424256->524258
524258->624259
524258->624260
324254->424261
424261->524262
324254->424263
424263->524264
524264->624265
424263->524266
524266->624267
624267->724268
624267->724269
624267->724270
724270->824271
824271->924272
924272->1024273
1024273->1124274
1124274->1224275
1124274->1224276
924272->1024277
824271->924278
224249->324279
324279->424280
424280->524281
324279->424282
324279->424283
424283->524284
424283->524285
424283->524286
524286->624287
324279->424288
424288->524289
524289->624290
224249->324291
324291->424292
424292->524293
324291->424294
324291->424295
424295->524296
424295->524297
424295->524298
524298->624299
324291->424300
424300->524301
524301->624302
624302->724303
724303->824304
724303->824305
824305->924306
824305->924307
924307->1024308
524301->624309
624309->724310
724310->824311
724310->824312
824312->924313
624309->724314
724314->824315
824315->924316
924316->1024317
924316->1024318
924316->1024319
1024319->1124320
524301->624321
624321->724322
224249->324323
324323->424324
324323->424325
424325->524326
424325->524327
424325->524328
524328->624329
324323->424330
424330->524331
524331->624332
624332->724333
724333->824334
824334->924335
924335->1024336
824334->924337
924337->1024338
724333->824339
624332->724340
724340->824341
824341->924342
924342->1024343
1024343->1124344
1024343->1124345
1124345->1224346
1124345->1224347
1224347->1324348
824341->924349
924349->1024350
1024350->1124351
1124351->1224352
1124351->1224353
1024350->1124354
1024350->1124355
1124355->1224356
1124355->1224357
524331->624358
624358->724359
724359->824360
224249->324361
324361->424362
424362->524363
324361->424364
324361->424365
424365->524366
424365->524367
524367->624368
624368->724369
724369->824370
724369->824371
624368->724372
724372->824373
724372->824374
424365->524375
524375->624376
324361->424377
424377->524378
524378->624379
624379->724380
724380->824381
824381->924382
824381->924383
524378->624384
624384->724385
724385->824386
724385->824387
824387->924388
924388->1024389
1024389->1124390
1124390->1224391
1224391->1324392
1124390->1224393
1024389->1124394
924388->1024395
824387->924396
-10->024397
024397->124398
124398->224399
224399->324400
324400->424401
424401->524402
524402->624403
024397->124404
124404->224405
224405->324406
324406->424407
024397->124408
124408->224409
224409->324410
324410->424411
024397->124412
124412->224413
224413->324414
324414->424415
024397->124416
124416->224417
224417->324418
324418->424419
024397->124420
124420->224421
224421->324422
324422->424423
024397->124424
124424->224425
124424->224426
224426->324427
124424->224428
224428->324429
324429->424430
424430->524431
524431->624432
624432->724433
624432->724434
324429->424435
224428->324436
324436->424437
424437->524438
524438->624439
324436->424440
224428->324441
324441->424442
324441->424443
424443->524444
324441->424445
424445->524446
524446->624447
624447->724448
724448->824449
724448->824450
724448->824451
824451->924452
924452->1024453
1024453->1124454
1024453->1124455
524446->624456
624456->724457
724457->824458
724457->824459
724457->824460
824460->924461
924461->1024462
224428->324463
324463->424464
324463->424465
424465->524466
424465->524467
524467->624468
624468->724469
624468->724470
524467->624471
324463->424472
424472->524473
424472->524474
524474->624475
624475->724476
624475->724477
724477->824478
724477->824479
524474->624480
624480->724481
624480->724482
724482->824483
524474->624484
624484->724485
524474->624486
624486->724487
724487->824488
824488->924489
924489->1024490
924489->1024491
1024491->1124492
1124492->1224493
1124492->1224494
1024491->1124495
724487->824496
824496->924497
924497->1024498
924497->1024499
1024499->1124500
1024499->1124501
224428->324502
324502->424503
324502->424504
424504->524505
424504->524506
524506->624507
624507->724508
624507->724509
324502->424510
424510->524511
524511->624512
624512->724513
724513->824514
724513->824515
824515->924516
824515->924517
924517->1024518
924517->1024519
524511->624520
624520->724521
724521->824522
724521->824523
624520->724524
724524->824525
824525->924526
924526->1024527
1024527->1124528
1024527->1124529
1024527->1124530
1124530->1224531
824525->924532
924532->1024533
1024533->1124534
1024533->1124535
1124535->1224536
1124535->1224537
824525->924538
924538->1024539
1024539->1124540
1124540->1224541
1024539->1124542
824525->924543
924543->1024544
1024544->1124545
1024544->1124546
524511->624547
624547->724548
224428->324549
324549->424550
324549->424551
424551->524552
424551->524553
524553->624554
624554->724555
624554->724556
324549->424557
424557->524558
524558->624559
624559->724560
624559->724561
224428->324562
324562->424563
324562->424564
424564->524565
424564->524566
524566->624567
624567->724568
624567->724569
324562->424570
424570->524571
524571->624572
624572->724573
724573->824574
724573->824575
524571->624576
624576->724577
724577->824578
724577->824579
824579->924580
524571->624581
624581->724582
724582->824583
724582->824584
224428->324585
324585->424586
324585->424587
424587->524588
424587->524589
324585->424590
424590->524591
524591->624592
624592->724593
224428->324594
324594->424595
324594->424596
424596->524597
524597->624598
524597->624599
424596->524600
324594->424601
424601->524602
524602->624603
624603->724604
724604->824605
824605->924606
824605->924607
724604->824608
824608->924609
824608->924610
924610->1024611
924610->1024612
1024612->1124613
1124613->1224614
524602->624615
624615->724616
724616->824617
724616->824618
524602->624619
624619->724620
-10->024621
024621->124622
124622->224623
224623->324624
324624->424625
424625->524626
524626->624627
024621->124628
124628->224629
224629->324630
324630->424631
424631->524632
524632->624633
624633->724634
724634->824635
824635->924636
024621->124637
124637->224638
224638->324639
324639->424640
424640->524641
524641->624642
624642->724643
724643->824644
824644->924645
024621->124646
124646->224647
224647->324648
324648->424649
424649->524650
524650->624651
624651->724652
024621->124653
124653->224654
224654->324655
324655->424656
424656->524657
524657->624658
624658->724659
024621->124660
124660->224661
224661->324662
324662->424663
424663->524664
524664->624665
624665->724666
724666->824667
024621->124668
124668->224669
224669->324670
324670->424671
024621->124672
124672->224673
224673->324674
324674->424675
024621->124676
124676->224677
224677->324678
324678->424679
024621->124680
124680->224681
124680->224682
224682->324683
124680->224684
224684->324685
324685->424686
324685->424687
424687->524688
424687->524689
424687->524690
224684->324691
324691->424692
324691->424693
224684->324694
324694->424695
424695->524696
424695->524697
324694->424698
224684->324699
324699->424700
324699->424701
324699->424702
424702->524703
424702->524704
324699->424705
424705->524706
424705->524707
524707->624708
524707->624709
524707->624710
624710->724711
724711->824712
724711->824713
724711->824714
724711->824715
724711->824716
224684->324717
324717->424718
324717->424719
324717->424720
424720->524721
424720->524722
324717->424723
424723->524724
424723->524725
524725->624726
624726->724727
624726->724728
224684->324729
324729->424730
324729->424731
324729->424732
324729->424733
424733->524734
424733->524735
524735->624736
224684->324737
324737->424738
324737->424739
324737->424740
424740->524741
424740->524742
324737->424743
424743->524744
424743->524745
524745->624746
624746->724747
724747->824748
824748->924749
824748->924750
624746->724751
724751->824752
824752->924753
824752->924754
624746->724755
724755->824756
824756->924757
824756->924758
624746->724759
724759->824760
824760->924761
824760->924762
224684->324763
324763->424764
324763->424765
424765->524766
324763->424767
424767->524768
524768->624769
624769->724770
724770->824771
724770->824772
724770->824773
524768->624774
624774->724775
724775->824776
724775->824777
824777->924778
824777->924779
724775->824780
824780->924781
824780->924782
924782->1024783
1024783->1124784
1024783->1124785
1024783->1124786
1024783->1124787
1024783->1124788
524768->624789
624789->724790
724790->824791
724790->824792
724790->824793
824793->924794
824793->924795
924795->1024796
824793->924797
524768->624798
624798->724799
724799->824800
824800->924801
824800->924802
724799->824803
724799->824804
824804->924805
824804->924806
824804->924807
924807->1024808
1024808->1124809
1024808->1124810
1124810->1224811
1224811->1324812
1224811->1324813
1224811->1324814
1224811->1324815
1224811->1324816
1024808->1124817
1124817->1224818
1224818->1324819
1224818->1324820
1224818->1324821
1224818->1324822
1224818->1324823
1024808->1124824
1024808->1124825
524768->624826
624826->724827
724827->824828
824828->924829
824828->924830
724827->824831
724827->824832
824832->924833
824832->924834
824832->924835
924835->1024836
1024836->1124837
1024836->1124838
1124838->1224839
1224839->1324840
1224839->1324841
1224839->1324842
1224839->1324843
1224839->1324844
1024836->1124845
1124845->1224846
1224846->1324847
1224846->1324848
1224846->1324849
1224846->1324850
1224846->1324851
1024836->1124852
1024836->1124853
524768->624854
624854->724855
724855->824856
824856->924857
824856->924858
724855->824859
724855->824860
824860->924861
824860->924862
824860->924863
924863->1024864
1024864->1124865
1124865->1224866
1224866->1324867
1224866->1324868
1224866->1324869
1224866->1324870
1224866->1324871
1024864->1124872
1024864->1124873
1024864->1124874
1124874->1224875
1224875->1324876
1224875->1324877
1224875->1324878
1224875->1324879
1224875->1324880
1024864->1124881
524768->624882
624882->724883
724883->824884
824884->924885
824884->924886
724883->824887
724883->824888
824888->924889
824888->924890
824888->924891
924891->1024892
1024892->1124893
1124893->1224894
1224894->1324895
1224894->1324896
1224894->1324897
1224894->1324898
1224894->1324899
1024892->1124900
1024892->1124901
1024892->1124902
1124902->1224903
1224903->1324904
1224903->1324905
1224903->1324906
1224903->1324907
1224903->1324908
1024892->1124909
524768->624910
624910->724911
724911->824912
824912->924913
824912->924914
724911->824915
724911->824916
824916->924917
824916->924918
824916->924919
924919->1024920
1024920->1124921
1124921->1224922
1224922->1324923
1224922->1324924
1224922->1324925
1224922->1324926
1224922->1324927
1024920->1124928
1024920->1124929
1024920->1124930
1124930->1224931
1224931->1324932
1224931->1324933
1224931->1324934
1224931->1324935
1224931->1324936
1024920->1124937
1124937->1224938
1224938->1324939
1224938->1324940
1224938->1324941
1224938->1324942
1224938->1324943
224684->324944
324944->424945
324944->424946
424946->524947
424946->524948
524948->624949
624949->724950
724950->824951
824951->924952
624949->724953
324944->424954
424954->524955
524955->624956
624956->724957
724957->824958
824958->924959
924959->1024960
1024960->1124961
1024960->1124962
724957->824963
824963->924964
824963->924965
924965->1024966
1024966->1124967
1124967->1224968
1124967->1224969
524955->624970
624970->724971
624970->724972
624970->724973
624970->724974
724974->824975
824975->924976
924976->1024977
1024977->1124978
1024977->1124979
1124979->1224980
1124979->1224981
1224981->1324982
824975->924983
924983->1024984
1024984->1124985
1124985->1224986
1024984->1124987
924983->1024988
1024988->1124989
1124989->1224990
1224990->1324991
1224990->1324992
1324992->1424993
1324992->1424994
1324992->1424995
1424995->1524996
1524996->1624997
1624997->1724998
1624997->1724999
1524996->1625000
924983->1025001
1025001->1125002
1125002->1225003
1225003->1325004
1325004->1425005
1325004->1425006
1425006->1525007
1425006->1525008
1425006->1525009
1525009->1625010
1625010->1725011
1725011->1825012
1725011->1825013
1625010->1725014
1125002->1225015
1225015->1325016
1325016->1425017
1325016->1425018
1425018->1525019
1425018->1525020
1225015->1325021
1325021->1425022
1325021->1425023
1425023->1525024
1525024->1625025
1425023->1525026
1225015->1325027
1325027->1425028
1225015->1325029
1325029->1425030
1425030->1525031
1525031->1625032
1525031->1625033
1625033->1725034
1625033->1725035
1625033->1725036
1725036->1825037
1825037->1925038
1925038->2025039
1925038->2025040
1825037->1925041
1125002->1225042
1225042->1325043
1325043->1425044
1325043->1425045
1425045->1525046
1425045->1525047
1425045->1525048
1525048->1625049
1625049->1725050
1725050->1825051
1725050->1825052
1825052->1925053
1925053->2025054
1825052->1925055
1625049->1725056
524955->625057
625057->725058
725058->825059
825059->925060
825059->925061
725058->825062
825062->925063
825062->925064
925064->1025065
925064->1025066
1025066->1125067
925064->1025068
524955->625069
625069->725070
725070->825071
825071->925072
825071->925073
725070->825074
725070->825075
524955->625076
625076->725077
725077->825078
825078->925079
825078->925080
725077->825081
725077->825082
524955->625083
625083->725084
725084->825085
725084->825086
825086->925087
825086->925088
825086->925089
524955->625090
625090->725091
725091->825092
725091->825093
825093->925094
825093->925095
524955->625096
625096->725097
725097->825098
725097->825099
625096->725100
625096->725101
625096->725102
725102->825103
825103->925104
925104->1025105
1025105->1125106
1025105->1125107
1125107->1225108
1125107->1225109
1125107->1225110
1125107->1225111
1125107->1225112
825103->925113
925113->1025114
1025114->1125115
1125115->1225116
1125115->1225117
1025114->1125118
1025114->1125119
825103->925120
925120->1025121
1025121->1125122
1025121->1125123
1125123->1225124
1125123->1225125
825103->925126
925126->1025127
1025127->1125128
1025127->1125129
1125129->1225130
1125129->1225131
1225131->1325132
1225131->1325133
1125129->1225134
1225134->1325135
1225134->1325136
825103->925137
925137->1025138
1025138->1125139
1025138->1125140
1125140->1225141
1125140->1225142
224684->325143
325143->425144
325143->425145
425145->525146
425145->525147
325143->425148
425148->525149
525149->625150
625150->725151
725151->825152
725151->825153
825153->925154
825153->925155
525149->625156
625156->725157
725157->825158
725157->825159
825159->925160
825159->925161
525149->625162
625162->725163
725163->825164
725163->825165
825165->925166
825165->925167
525149->625168
625168->725169
625168->725170
625168->725171
725171->825172
825172->925173
625168->725174
725174->825175
825175->925176
925176->1025177
1025177->1125178
1125178->1225179
1025177->1125180
925176->1025181
825175->925182
925182->1025183
1025183->1125184
1125184->1225185
1125184->1225186
1025183->1125187
1125187->1225188
1125187->1225189
1225189->1325190
1225189->1325191
1225189->1325192
1325192->1425193
1425193->1525194
1525194->1625195
1625195->1725196
1725196->1825197
1725196->1825198
1625195->1725199
1725199->1825200
1725199->1825201
1425193->1525202
1525202->1625203
1625203->1725204
1725204->1825205
1725204->1825206
1625203->1725207
1725207->1825208
1725207->1825209
1425193->1525210
1525210->1625211
1625211->1725212
1725212->1825213
1725212->1825214
1625211->1725215
1725215->1825216
1725215->1825217
825175->925218
925218->1025219
1025219->1125220
1025219->1125221
1125221->1225222
1125221->1225223
1225223->1325224
1225223->1325225
1325225->1425226
1425226->1525227
1525227->1625228
1525227->1625229
1425226->1525230
1325225->1425231
1425231->1525232
1525232->1625233
1525232->1625234
1625234->1725235
1725235->1825236
1725235->1825237
1625234->1725238
1725238->1825239
1725238->1825240
1425231->1525241
825175->925242
925242->1025243
1025243->1125244
1025243->1125245
1125245->1225246
1125245->1225247
1225247->1325248
1225247->1325249
1325249->1425250
1425250->1525251
1525251->1625252
1525251->1625253
1625253->1725254
1725254->1825255
1725254->1825256
1625253->1725257
1725257->1825258
1725257->1825259
1425250->1525260
1325249->1425261
1425261->1525262
1525262->1625263
1525262->1625264
1625264->1725265
1625264->1725266
1425261->1525267
825175->925268
925268->1025269
1025269->1125270
1025269->1125271
1125271->1225272
1125271->1225273
1225273->1325274
1225273->1325275
1325275->1425276
1425276->1525277
1525277->1625278
1525277->1625279
1625279->1725280
1625279->1725281
1425276->1525282
1325275->1425283
1425283->1525284
1525284->1625285
1425283->1525286
825175->925287
925287->1025288
1025288->1125289
1125289->1225290
1125289->1225291
1025288->1125292
1125292->1225293
1125292->1225294
925287->1025295
1025295->1125296
1125296->1225297
1125296->1225298
1125296->1225299
1225299->1325300
1225299->1325301
1325301->1425302
925287->1025303
1025303->1125304
1125304->1225305
1225305->1325306
1225305->1325307
1125304->1225308
1225308->1325309
1225308->1325310
1025303->1125311
1125311->1225312
1225312->1325313
1225312->1325314
1225312->1325315
1325315->1425316
1325315->1425317
1425317->1525318
1025303->1125319
1125319->1225320
1225320->1325321
1325321->1425322
1325321->1425323
1225320->1325324
1325324->1425325
1325324->1425326
1125319->1225327
1225327->1325328
1325328->1425329
1325328->1425330
1325328->1425331
1425331->1525332
1425331->1525333
1525333->1625334
525149->625335
625335->725336
725336->825337
725336->825338
725336->825339
825339->925340
825339->925341
925341->1025342
925341->1025343
1025343->1125344
1125344->1225345
1125344->1225346
1025343->1125347
525149->625348
625348->725349
725349->825350
725349->825351
725349->825352
825352->925353
825352->925354
925354->1025355
925354->1025356
1025356->1125357
1125357->1225358
1125357->1225359
1025356->1125360
525149->625361
625361->725362
725362->825363
725362->825364
725362->825365
825365->925366
825365->925367
925367->1025368
925367->1025369
1025369->1125370
1125370->1225371
1125370->1225372
1025369->1125373
224684->325374
325374->425375
425375->525376
425375->525377
525377->625378
625378->725379
725379->825380
825380->925381
825380->925382
725379->825383
825383->925384
825383->925385
725379->825386
825386->925387
825386->925388
725379->825389
825389->925390
825389->925391
725379->825392
825392->925393
825392->925394
625378->725395
725395->825396
725395->825397
325374->425398
425398->525399
525399->625400
625400->725401
725401->825402
825402->925403
825402->925404
825402->925405
825402->925406
825402->925407
825402->925408
725401->825409
625400->725410
725410->825411
525399->625412
625412->725413
725413->825414
725413->825415
825415->925416
825415->925417
925417->1025418
925417->1025419
525399->625420
625420->725421
725421->825422
725421->825423
825423->925424
825423->925425
925425->1025426
925425->1025427
525399->625428
625428->725429
725429->825430
725429->825431
825431->925432
825431->925433
925433->1025434
925433->1025435
525399->625436
625436->725437
725437->825438
725437->825439
825439->925440
825439->925441
925441->1025442
925441->1025443
1025443->1125444
1025443->1125445
1125445->1225446
1125445->1225447
525399->625448
625448->725449
725449->825450
725449->825451
825451->925452
825451->925453
925453->1025454
925453->1025455
1025455->1125456
1125456->1225457
1125456->1225458
1225458->1325459
1225458->1325460
1325460->1425461
1325460->1425462
1325460->1425463
1325460->1425464
1025455->1125465
1125465->1225466
1125465->1225467
1225467->1325468
1225467->1325469
525399->625470
625470->725471
725471->825472
725471->825473
825473->925474
825473->925475
925475->1025476
925475->1025477
1025477->1125478
1125478->1225479
1125478->1225480
1225480->1325481
1225480->1325482
1325482->1425483
1325482->1425484
1325482->1425485
1325482->1425486
1325482->1425487
1325482->1425488
1025477->1125489
1125489->1225490
1125489->1225491
1225491->1325492
1225491->1325493
1225491->1325494
1225491->1325495
525399->625496
625496->725497
725497->825498
825498->925499
925499->1025500
925499->1025501
825498->925502
725497->825503
625496->725504
725504->825505
525399->625506
625506->725507
725507->825508
725507->825509
825509->925510
925510->1025511
925510->1025512
825509->925513
224684->325514
325514->425515
325514->425516
425516->525517
525517->625518
525517->625519
425516->525520
525520->625521
625521->725522
725522->825523
725522->825524
625521->725525
325514->425526
425526->525527
525527->625528
625528->725529
725529->825530
825530->925531
725529->825532
625528->725533
725533->825534
825534->925535
825534->925536
925536->1025537
525527->625538
625538->725539
725539->825540
825540->925541
725539->825542
625538->725543
725543->825544
825544->925545
825544->925546
825544->925547
925547->1025548
525527->625549
625549->725550
725550->825551
825551->925552
825551->925553
725550->825554
825554->925555
825554->925556
925556->1025557
925556->1025558
1025558->1125559
1125559->1225560
525527->625561
625561->725562
725562->825563
825563->925564
825563->925565
725562->825566
825566->925567
825566->925568
925568->1025569
925568->1025570
1025570->1125571
1125571->1225572
1025570->1125573
1125573->1225574
525527->625575
625575->725576
725576->825577
825577->925578
825577->925579
725576->825580
825580->925581
825580->925582
925582->1025583
925582->1025584
1025584->1125585
525527->625586
625586->725587
725587->825588
825588->925589
825588->925590
725587->825591
825591->925592
825591->925593
925593->1025594
925593->1025595
1025595->1125596
1125596->1225597
1225597->1325598
1025595->1125599
1125599->1225600
1025595->1125601
1125601->1225602
525527->625603
625603->725604
725604->825605
725604->825606
825606->925607
825606->925608
625603->725609
725609->825610
725609->825611
625603->725612
725612->825613
625603->725614
725614->825615
825615->925616
925616->1025617
1025617->1125618
1025617->1125619
1125619->1225620
1125619->1225621
1225621->1325622
1325622->1425623
1425623->1525624
1525624->1625625
1525624->1625626
1425623->1525627
1525627->1625628
1525627->1625629
1225621->1325630
1225621->1325631
1325631->1425632
1325631->1425633
1425633->1525634
1525634->1625635
1525634->1625636
1425633->1525637
1425633->1525638
1525638->1625639
1525638->1625640
1425633->1525641
1425633->1525642
1525642->1625643
1525642->1625644
1425633->1525645
825615->925646
925646->1025647
1025647->1125648
1125648->1225649
1125648->1225650
1025647->1125651
1025647->1125652
525527->625653
625653->725654
725654->825655
725654->825656
825656->925657
825656->925658
625653->725659
725659->825660
725659->825661
625653->725662
725662->825663
625653->725664
725664->825665
825665->925666
925666->1025667
925666->1025668
1025668->1125669
1025668->1125670
825665->925671
925671->1025672
925671->1025673
825665->925674
925674->1025675
825665->925676
925676->1025677
1025677->1125678
1125678->1225679
1225679->1325680
1225679->1325681
1325681->1425682
1325681->1425683
1425683->1525684
1525684->1625685
1525684->1625686
1425683->1525687
1525687->1625688
1525687->1625689
1625689->1725690
1725690->1825691
1725690->1825692
1625689->1725693
1625689->1725694
1725694->1825695
1725694->1825696
1625689->1725697
1625689->1725698
1725698->1825699
1725698->1825700
1625689->1725701
1025677->1125702
1125702->1225703
1225703->1325704
1325704->1425705
1325704->1425706
1325704->1425707
1325704->1425708
1225703->1325709
1225703->1325710
1025677->1125711
1125711->1225712
1225712->1325713
1325713->1425714
1325713->1425715
1325713->1425716
1325713->1425717
1325713->1425718
1325713->1425719
1225712->1325720
1225712->1325721
525527->625722
625722->725723
725723->825724
825724->925725
825724->925726
725723->825727
825727->925728
825727->925729
925729->1025730
925729->1025731
1025731->1125732
1125732->1225733
1025731->1125734
1125734->1225735
525527->625736
625736->725737
725737->825738
725737->825739
825739->925740
825739->925741
625736->725742
725742->825743
725742->825744
825744->925745
625736->725746
725746->825747
625736->725748
725748->825749
825749->925750
925750->1025751
1025751->1125752
1125752->1225753
1125752->1225754
1025751->1125755
1125755->1225756
1125755->1225757
825749->925758
925758->1025759
1025759->1125760
1025759->1125761
1025759->1125762
825749->925763
925763->1025764
1025764->1125765
1025764->1125766
1025764->1125767
825749->925768
925768->1025769
1025769->1125770
1025769->1125771
1125771->1225772
1125771->1225773
925768->1025774
1025774->1125775
1025774->1125776
925768->1025777
1025777->1125778
925768->1025779
1025779->1125780
1125780->1225781
1225781->1325782
1225781->1325783
1325783->1425784
1325783->1425785
1125780->1225786
1225786->1325787
1225786->1325788
1125780->1225789
1225789->1325790
1125780->1225791
1225791->1325792
1325792->1425793
1425793->1525794
1525794->1625795
1625795->1725796
1625795->1725797
1625795->1725798
1625795->1725799
1525794->1625800
1525794->1625801
1625801->1725802
1325792->1425803
1425803->1525804
1525804->1625805
1525804->1625806
1625806->1725807
1625806->1725808
1425803->1525809
1525809->1625810
1525809->1625811
1425803->1525812
1525812->1625813
1425803->1525814
1525814->1625815
1625815->1725816
1725816->1825817
1825817->1925818
1825817->1925819
1925819->2025820
1925819->2025821
2025821->2125822
2125822->2225823
2125822->2225824
2125822->2225825
2125822->2225826
2025821->2125827
2125827->2225828
2125827->2225829
2225829->2325830
2325830->2425831
2325830->2425832
2425832->2525833
2425832->2525834
2225829->2325835
2225829->2325836
2325836->2425837
2325836->2425838
2425838->2525839
2425838->2525840
2225829->2325841
2225829->2325842
2325842->2425843
2325842->2425844
2225829->2325845
1625815->1725846
1725846->1825847
1825847->1925848
1825847->1925849
1925849->2025850
1925849->2025851
1925849->2025852
1925849->2025853
1725846->1825854
1825854->1925855
1925855->2025856
2025856->2125857
2125857->2225858
2225858->2325859
2225858->2325860
2225858->2325861
2225858->2325862
2125857->2225863
2125857->2225864
1925855->2025865
2025865->2125866
2125866->2225867
2225867->2325868
2225867->2325869
2225867->2325870
2225867->2325871
2225867->2325872
2225867->2325873
2125866->2225874
2125866->2225875
525527->625876
625876->725877
725877->825878
725877->825879
825879->925880
825879->925881
925881->1025882
1025882->1125883
925881->1025884
525527->625885
625885->725886
725886->825887
725886->825888
825888->925889
825888->925890
525527->625891
625891->725892
725892->825893
725892->825894
825894->925895
825894->925896
525527->625897
625897->725898
725898->825899
725898->825900
825900->925901
825900->925902
625897->725903
725903->825904
725903->825905
825905->925906
625897->725907
725907->825908
625897->725909
725909->825910
825910->925911
925911->1025912
1025912->1125913
1125913->1225914
1125913->1225915
1025912->1125916
1125916->1225917
1125916->1225918
1225918->1325919
1225918->1325920
825910->925921
925921->1025922
1025922->1125923
1125923->1225924
1125923->1225925
1225925->1325926
1225925->1325927
1125923->1225928
1125923->1225929
1225929->1325930
1225929->1325931
1025922->1125932
925921->1025933
1025933->1125934
1125934->1225935
1225935->1325936
1325936->1425937
1325936->1425938
1325936->1425939
1425939->1525940
1425939->1525941
1525941->1625942
1525941->1625943
1425939->1525944
1425939->1525945
1525945->1625946
1525945->1625947
1125934->1225948
1225948->1325949
1325949->1425950
1325949->1425951
1325949->1425952
1425952->1525953
1425952->1525954
1125934->1225955
1225955->1325956
1325956->1425957
1325956->1425958
1325956->1425959
1425959->1525960
1425959->1525961
525527->625962
625962->725963
725963->825964
725963->825965
825965->925966
825965->925967
925967->1025968
1025968->1125969
925967->1025970
625962->725971
725971->825972
725971->825973
625962->725974
725974->825975
625962->725976
725976->825977
825977->925978
925978->1025979
1025979->1125980
1125980->1225981
1125980->1225982
1025979->1125983
1025979->1125984
1125984->1225985
1125984->1225986
825977->925987
925987->1025988
1025988->1125989
1025988->1125990
1125990->1225991
1125990->1225992
1225992->1325993
1225992->1325994
1225992->1325995
1225992->1325996
1225992->1325997
1225992->1325998
825977->925999
925999->1026000
1026000->1126001
1026000->1126002
1026000->1126003
825977->926004
926004->1026005
1026005->1126006
1026005->1126007
1026005->1126008
525527->626009
626009->726010
224684->326011
326011->426012
326011->426013
326011->426014
426014->526015
426014->526016
526016->626017
626017->726018
726018->826019
726018->826020
626017->726021
726021->826022
726021->826023
326011->426024
426024->526025
526025->626026
626026->726027
726027->826028
726027->826029
626026->726030
726030->826031
526025->626032
626032->726033
726033->826034
726033->826035
826035->926036
826035->926037
224684->326038
326038->426039
326038->426040
326038->426041
426041->526042
426041->526043
526043->626044
626044->726045
726045->826046
726045->826047
626044->726048
726048->826049
726048->826050
326038->426051
426051->526052
526052->626053
626053->726054
726054->826055
726054->826056
626053->726057
726057->826058
526052->626059
626059->726060
726060->826061
726060->826062
224684->326063
326063->426064
426064->526065
326063->426066
326063->426067
426067->526068
426067->526069
526069->626070
626070->726071
626070->726072
426067->526073
526073->626074
326063->426075
426075->526076
526076->626077
626077->726078
726078->826079
726078->826080
526076->626081
626081->726082
726082->826083
726082->826084
526076->626085
626085->726086
726086->826087
726086->826088
526076->626089
626089->726090
726090->826091
726090->826092
224684->326093
326093->426094
426094->526095
326093->426096
326093->426097
426097->526098
426097->526099
526099->626100
626100->726101
626100->726102
326093->426103
426103->526104
526104->626105
626105->726106
726106->826107
726106->826108
726106->826109
826109->926110
526104->626111
626111->726112
726112->826113
726112->826114
726112->826115
826115->926116
526104->626117
626117->726118
726118->826119
726118->826120
726118->826121
826121->926122
526104->626123
626123->726124
726124->826125
726124->826126
526104->626127
626127->726128
-10->026129
026129->126130
126130->226131
226131->326132
326132->426133
426133->526134
026129->126135
126135->226136
226136->326137
326137->426138
026129->126139
126139->226140
226140->326141
326141->426142
026129->126143
126143->226144
226144->326145
326145->426146
026129->126147
126147->226148
226148->326149
326149->426150
026129->126151
126151->226152
226152->326153
326153->426154
026129->126155
126155->226156
226156->326157
326157->426158
426158->526159
526159->626160
026129->126161
126161->226162
226162->326163
326163->426164
426164->526165
526165->626166
626166->726167
026129->126168
126168->226169
226169->326170
326170->426171
426171->526172
526172->626173
026129->126174
126174->226175
226175->326176
326176->426177
426177->526178
526178->626179
026129->126180
126180->226181
226181->326182
326182->426183
426183->526184
526184->626185
026129->126186
126186->226187
226187->326188
326188->426189
426189->526190
526190->626191
626191->726192
026129->126193
126193->226194
226194->326195
326195->426196
426196->526197
526197->626198
626198->726199
026129->126200
126200->226201
126200->226202
126200->226203
226203->326204
126200->226205
226205->326206
326206->426207
326206->426208
326206->426209
426209->526210
526210->626211
526210->626212
426209->526213
526213->626214
626214->726215
626214->726216
326206->426217
426217->526218
526218->626219
626219->726220
726220->826221
826221->926222
826221->926223
726220->826224
826224->926225
826224->926226
926226->1026227
926226->1026228
1026228->1126229
526218->626230
626230->726231
726231->826232
726231->826233
626230->726234
726234->826235
826235->926236
926236->1026237
926236->1026238
926236->1026239
1026239->1126240
1026239->1126241
1126241->1226242
526218->626243
626243->726244
726244->826245
726244->826246
626243->726247
726247->826248
826248->926249
926249->1026250
1026250->1126251
926249->1026252
826248->926253
926253->1026254
1026254->1126255
1126255->1226256
1226256->1326257
1126255->1226258
1226258->1326259
1026254->1126260
1126260->1226261
1226261->1326262
1226261->1326263
1226261->1326264
1326264->1426265
1426265->1526266
1026254->1126267
1126267->1226268
1226268->1326269
1326269->1426270
1226268->1326271
1326271->1426272
1126267->1226273
1226273->1326274
1326274->1426275
1326274->1426276
1326274->1426277
1426277->1526278
1426277->1526279
1526279->1626280
826248->926281
926281->1026282
1026282->1126283
1126283->1226284
1226284->1326285
1326285->1426286
1126283->1226287
1026282->1126288
926281->1026289
1026289->1126290
1126290->1226291
1126290->1226292
1126290->1226293
1226293->1326294
1326294->1426295
926281->1026296
1026296->1126297
1126297->1226298
1126297->1226299
1126297->1226300
1226300->1326301
1326301->1426302
626243->726303
726303->826304
826304->926305
926305->1026306
826304->926307
826304->926308
926308->1026309
1026309->1126310
926308->1026311
526218->626312
626312->726313
226205->326314
326314->426315
426315->526316
326314->426317
326314->426318
426318->526319
526319->626320
626320->726321
426318->526322
526322->626323
626323->726324
726324->826325
726324->826326
626323->726327
326314->426328
426328->526329
526329->626330
626330->726331
726331->826332
826332->926333
726331->826334
626330->726335
726335->826336
826336->926337
526329->626338
626338->726339
726339->826340
826340->926341
926341->1026342
726339->826343
826343->926344
826343->926345
926345->1026346
926345->1026347
526329->626348
626348->726349
726349->826350
826350->926351
926351->1026352
1026352->1126353
1126353->1226354
1026352->1126355
1126355->1226356
926351->1026357
1026357->1126358
626348->726359
726359->826360
526329->626361
626361->726362
726362->826363
826363->926364
926364->1026365
726362->826366
826366->926367
826366->926368
926368->1026369
926368->1026370
1026370->1126371
1026370->1126372
526329->626373
626373->726374
726374->826375
626373->726376
726376->826377
826377->926378
926378->1026379
1026379->1126380
1026379->1126381
1126381->1226382
1126381->1226383
1226383->1326384
826377->926385
926385->1026386
1026386->1126387
1026386->1126388
1126388->1226389
1126388->1226390
826377->926391
926391->1026392
926391->1026393
926391->1026394
926391->1026395
1026395->1126396
1126396->1226397
1226397->1326398
1326398->1426399
1426399->1526400
1326398->1426401
1226397->1326402
1326402->1426403
1426403->1526404
1526404->1626405
1426403->1526406
1426403->1526407
1526407->1626408
1626408->1726409
1626408->1726410
1726410->1826411
1726410->1826412
1526407->1626413
1126396->1226414
1226414->1326415
1326415->1426416
526329->626417
626417->726418
726418->826419
626417->726420
726420->826421
826421->926422
926422->1026423
1026423->1126424
1026423->1126425
826421->926426
926426->1026427
1026427->1126428
1026427->1126429
1026427->1126430
1126430->1226431
1126430->1226432
1226432->1326433
1226432->1326434
1326434->1426435
526329->626436
626436->726437
226205->326438
326438->426439
326438->426440
326438->426441
426441->526442
526442->626443
626443->726444
426441->526445
526445->626446
626446->726447
726447->826448
726447->826449
626446->726450
326438->426451
226205->326452
326452->426453
326452->426454
426454->526455
526455->626456
626456->726457
426454->526458
526458->626459
626459->726460
726460->826461
826461->926462
926462->1026463
726460->826464
626459->726465
726465->826466
726465->826467
326452->426468
426468->526469
526469->626470
626470->726471
726471->826472
826472->926473
926473->1026474
726471->826475
826475->926476
826475->926477
926477->1026478
1026478->1126479
926477->1026480
1026480->1126481
1126481->1226482
1026480->1126483
526469->626484
626484->726485
626484->726486
726486->826487
826487->926488
826487->926489
926489->1026490
526469->626491
626491->726492
626491->726493
626491->726494
626491->726495
726495->826496
826496->926497
926497->1026498
1026498->1126499
1126499->1226500
1126499->1226501
1026498->1126502
1126502->1226503
1126502->1226504
1226504->1326505
1226504->1326506
826496->926507
926507->1026508
1026508->1126509
1026508->1126510
1126510->1226511
1126510->1226512
1226512->1326513
1326513->1426514
1426514->1526515
1326513->1426516
826496->926517
926517->1026518
1026518->1126519
1026518->1126520
526469->626521
626521->726522
626521->726523
726523->826524
826524->926525
826524->926526
926526->1026527
526469->626528
626528->726529
226205->326530
326530->426531
326530->426532
326530->426533
426533->526534
526534->626535
626535->726536
426533->526537
526537->626538
626538->726539
726539->826540
826540->926541
926541->1026542
726539->826543
626538->726544
726544->826545
726544->826546
326530->426547
426547->526548
526548->626549
626549->726550
726550->826551
726550->826552
526548->626553
626553->726554
726554->826555
826555->926556
726554->826557
626553->726558
726558->826559
726558->826560
826560->926561
526548->626562
626562->726563
726563->826564
726563->826565
826565->926566
826565->926567
926567->1026568
1026568->1126569
926567->1026570
526548->626571
626571->726572
726572->826573
826573->926574
926574->1026575
726572->826576
826576->926577
826576->926578
926578->1026579
1026579->1126580
926578->1026581
526548->626582
626582->726583
726583->826584
826584->926585
926585->1026586
726583->826587
826587->926588
826587->926589
926589->1026590
526548->626591
626591->726592
726592->826593
526548->626594
626594->726595
626594->726596
726596->826597
826597->926598
926598->1026599
1026599->1126600
1026599->1126601
1126601->1226602
1126601->1226603
826597->926604
926604->1026605
1026605->1126606
1026605->1126607
1126607->1226608
1126607->1226609
926604->1026610
1026610->1126611
1026610->1126612
926604->1026613
1026613->1126614
926604->1026615
1026615->1126616
1126616->1226617
1226617->1326618
1326618->1426619
1326618->1426620
1426620->1526621
1426620->1526622
1526622->1626623
1126616->1226624
1226624->1326625
1326625->1426626
1326625->1426627
1426627->1526628
1426627->1526629
1526629->1626630
1526629->1626631
1126616->1226632
1226632->1326633
1326633->1426634
1426634->1526635
1326633->1426636
1326633->1426637
1126616->1226638
1226638->1326639
1326639->1426640
1326639->1426641
1326639->1426642
1426642->1526643
1126616->1226644
1226644->1326645
1326645->1426646
1326645->1426647
626594->726648
726648->826649
826649->926650
926650->1026651
926650->1026652
1026652->1126653
1026652->1126654
826649->926655
926655->1026656
926655->1026657
826649->926658
926658->1026659
826649->926660
926660->1026661
1026661->1126662
1126662->1226663
1226663->1326664
1226663->1326665
1326665->1426666
1326665->1426667
1426667->1526668
1026661->1126669
1126669->1226670
1226670->1326671
1226670->1326672
1326672->1426673
1326672->1426674
1426674->1526675
1426674->1526676
1026661->1126677
1126677->1226678
1226678->1326679
1226678->1326680
526548->626681
626681->726682
226205->326683
326683->426684
326683->426685
326683->426686
426686->526687
426686->526688
526688->626689
626689->726690
626689->726691
326683->426692
426692->526693
526693->626694
626694->726695
726695->826696
826696->926697
726695->826698
826698->926699
-10->026700
026700->126701
126701->226702
226702->326703
326703->426704
426704->526705
026700->126706
126706->226707
126706->226708
226708->326709
326709->426710
326709->426711
326709->426712
426712->526713
426712->526714
526714->626715
626715->726716
626715->726717
326709->426718
426718->526719
526719->626720
626720->726721
726721->826722
826722->926723
926723->1026724
1026724->1126725
1126725->1226726
1126725->1226727
1026724->1126728
1126728->1226729
1126728->1226730
926723->1026731
1026731->1126732
1026731->1126733
826722->926734
926734->1026735
926734->1026736
726721->826737
826737->926738
826737->926739
626720->726740
726740->826741
726740->826742
226708->326743
326743->426744
326743->426745
326743->426746
426746->526747
426746->526748
526748->626749
626749->726750
626749->726751
326743->426752
426752->526753
526753->626754
626754->726755
726755->826756
826756->926757
926757->1026758
926757->1026759
826756->926760
926760->1026761
926760->1026762
626754->726763
726763->826764
826764->926765
926765->1026766
926765->1026767
826764->926768
926768->1026769
926768->1026770
226708->326771
326771->426772
326771->426773
326771->426774
426774->526775
426774->526776
526776->626777
626777->726778
626777->726779
326771->426780
426780->526781
526781->626782
626782->726783
726783->826784
726783->826785
626782->726786
726786->826787
726786->826788
226708->326789
326789->426790
326789->426791
326789->426792
426792->526793
426792->526794
526794->626795
626795->726796
626795->726797
326789->426798
426798->526799
526799->626800
626800->726801
726801->826802
826802->926803
826802->926804
726801->826805
826805->926806
826805->926807
926807->1026808
1026808->1126809
926807->1026810
526799->626811
626811->726812
726812->826813
826813->926814
926814->1026815
1026815->1126816
1126816->1226817
1226817->1326818
1326818->1426819
1426819->1526820
1526820->1626821
1626821->1726822
1626821->1726823
1726823->1826824
1826824->1926825
1526820->1626826
1626826->1726827
1626826->1726828
1726828->1826829
1826829->1926830
1426819->1526831
1526831->1626832
1526831->1626833
1626833->1726834
1726834->1826835
1326818->1426836
1426836->1526837
1426836->1526838
1526838->1626839
1626839->1726840
1226817->1326841
1326841->1426842
1326841->1426843
1426843->1526844
1526844->1626845
1126816->1226846
1226846->1326847
1226846->1326848
1326848->1426849
1426849->1526850
1026815->1126851
1126851->1226852
1126851->1226853
1226853->1326854
1326854->1426855
926814->1026856
1026856->1126857
1026856->1126858
1126858->1226859
1226859->1326860
826813->926861
926861->1026862
926861->1026863
1026863->1126864
1126864->1226865
726812->826866
826866->926867
826866->926868
926868->1026869
1026869->1126870
626811->726871
726871->826872
826872->926873
626811->726874
726874->826875
826875->926876
226708->326877
326877->426878
326877->426879
326877->426880
426880->526881
426880->526882
526882->626883
626883->726884
626883->726885
326877->426886
426886->526887
526887->626888
626888->726889
726889->826890
726889->826891
626888->726892
726892->826893
826893->926894
926894->1026895
926894->1026896
926894->1026897
1026897->1126898
1026897->1126899
626888->726900
726900->826901
826901->926902
926902->1026903
926902->1026904
826901->926905
926905->1026906
926905->1026907
726900->826908
826908->926909
926909->1026910
1026910->1126911
1026910->1126912
1026910->1126913
1126913->1226914
1126913->1226915
1226915->1326916
1326916->1426917
1326916->1426918
726900->826919
826919->926920
926920->1026921
1026921->1126922
1026921->1126923
926920->1026924
1026924->1126925
1026924->1126926
826919->926927
926927->1026928
1026928->1126929
1126929->1226930
1126929->1226931
1126929->1226932
526887->626933
626933->726934
-10->026935
026935->126936
126936->226937
226937->326938
326938->426939
426939->526940
526940->626941
626941->726942
026935->126943
126943->226944
126943->226945
226945->326946
326946->426947
426947->526948
426947->526949
326946->426950
226945->326951
326951->426952
426952->526953
426952->526954
326951->426955
226945->326956
326956->426957
426957->526958
426957->526959
326956->426960
226945->326961
326961->426962
426962->526963
526963->626964
526963->626965
426962->526966
526966->626967
626967->726968
626967->726969
326961->426970
226945->326971
326971->426972
426972->526973
526973->626974
526973->626975
426972->526976
526976->626977
626977->726978
626977->726979
326971->426980
226945->326981
326981->426982
426982->526983
426982->526984
526984->626985
626985->726986
726986->826987
726986->826988
626985->726989
326981->426990
-10->026991
026991->126992
126992->226993
226993->326994
326994->426995
426995->526996
526996->626997
626997->726998
026991->126999
126999->227000
227000->327001
327001->427002
427002->527003
527003->627004
026991->127005
127005->227006
227006->327007
327007->427008
427008->527009
527009->627010
627010->727011
026991->127012
127012->227013
127012->227014
227014->327015
327015->427016
427016->527017
527017->627018
327015->427019
427019->527020
527020->627021
127012->227022
227022->327023
327023->427024
427024->527025
427024->527026
327023->427027
227022->327028
327028->427029
327028->427030
427030->527031
427030->527032
527032->627033
627033->727034
627033->727035
527032->627036
327028->427037
427037->527038
527038->627039
627039->727040
727040->827041
627039->727042
627039->727043
227022->327044
327044->427045
427045->527046
327044->427047
327044->427048
427048->527049
427048->527050
527050->627051
627051->727052
627051->727053
327044->427054
427054->527055
527055->627056
627056->727057
727057->827058
727057->827059
827059->927060
827059->927061
927061->1027062
527055->627063
627063->727064
727064->827065
727064->827066
827066->927067
827066->927068
927068->1027069
1027069->1127070
527055->627071
627071->727072
727072->827073
727072->827074
827074->927075
827074->927076
927076->1027077
927076->1027078
1027078->1127079
1027078->1127080
527055->627081
627081->727082
727082->827083
727082->827084
827084->927085
927085->1027086
827084->927087
527055->627088
627088->727089
727089->827090
727089->827091
827091->927092
927092->1027093
827091->927094
927094->1027095
527055->627096
627096->727097
727097->827098
727097->827099
827099->927100
827099->927101
527055->627102
627102->727103
727103->827104
727103->827105
627102->727106
727106->827107
827107->927108
927108->1027109
1027109->1127110
1027109->1127111
1127111->1227112
1127111->1227113
1227113->1327114
1227113->1327115
827107->927116
927116->1027117
1027117->1127118
1027117->1127119
1127119->1227120
1127119->1227121
1227121->1327122
1227121->1327123
827107->927124
927124->1027125
1027125->1127126
1027125->1127127
927124->1027128
1027128->1127129
1127129->1227130
1227130->1327131
1227130->1327132
827107->927133
927133->1027134
1027134->1127135
527055->627136
627136->727137
727137->827138
727137->827139
227022->327140
327140->427141
427141->527142
327140->427143
327140->427144
427144->527145
427144->527146
527146->627147
627147->727148
627147->727149
327140->427150
427150->527151
527151->627152
627152->727153
727153->827154
727153->827155
827155->927156
827155->927157
927157->1027158
1027158->1127159
1027158->1127160
1127160->1227161
1227161->1327162
1227161->1327163
1127160->1227164
1227164->1327165
927157->1027166
527151->627167
627167->727168
727168->827169
727168->827170
-10->027171
027171->127172
127172->227173
227173->327174
327174->427175
427175->527176
527176->627177
027171->127178
127178->227179
227179->327180
327180->427181
427181->527182
027171->127183
127183->227184
227184->327185
327185->427186
427186->527187
527187->627188
627188->727189
027171->127190
127190->227191
227191->327192
327192->427193
427193->527194
527194->627195
027171->127196
127196->227197
227197->327198
327198->427199
027171->127200
127200->227201
227201->327202
327202->427203
027171->127204
127204->227205
227205->327206
327206->427207
427207->527208
527208->627209
027171->127210
127210->227211
127210->227212
227212->327213
327213->427214
327213->427215
327213->427216
427216->527217
427216->527218
327213->427219
227212->327220
327220->427221
427221->527222
527222->627223
627223->727224
727224->827225
727224->827226
827226->927227
827226->927228
927228->1027229
527222->627230
627230->727231
727231->827232
827232->927233
827232->927234
927234->1027235
1027235->1127236
627230->727237
727237->827238
827238->927239
927239->1027240
527222->627241
627241->727242
727242->827243
727242->827244
827244->927245
927245->1027246
927245->1027247
1027247->1127248
1127248->1227249
1227249->1327250
1127248->1227251
827244->927252
227212->327253
327253->427254
327253->427255
327253->427256
427256->527257
427256->527258
527258->627259
627259->727260
627259->727261
327253->427262
427262->527263
527263->627264
627264->727265
727265->827266
727265->827267
827267->927268
827267->927269
927269->1027270
927269->1027271
1027271->1127272
527263->627273
627273->727274
727274->827275
727274->827276
627273->727277
727277->827278
527263->627279
627279->727280
727280->827281
727280->827282
727280->827283
827283->927284
827283->927285
927285->1027286
1027286->1127287
1127287->1227288
1027286->1127289
527263->627290
627290->727291
727291->827292
727291->827293
827293->927294
827293->927295
627290->727296
727296->827297
727296->827298
827298->927299
627290->727300
727300->827301
627290->727302
727302->827303
827303->927304
927304->1027305
1027305->1127306
1027305->1127307
927304->1027308
927304->1027309
1027309->1127310
1027309->1127311
527263->627312
627312->727313
727313->827314
827314->927315
827314->927316
727313->827317
827317->927318
827317->927319
927319->1027320
527263->627321
627321->727322
727322->827323
627321->727324
727324->827325
827325->927326
927326->1027327
1027327->1127328
1027327->1127329
1127329->1227330
1127329->1227331
1227331->1327332
827325->927333
927333->1027334
1027334->1127335
1027334->1127336
927333->1027337
1027337->1127338
827325->927339
927339->1027340
1027340->1127341
1127341->1227342
1027340->1127343
927339->1027344
827325->927345
927345->1027346
1027346->1127347
1127347->1227348
1127347->1227349
1227349->1327350
1227349->1327351
1027346->1127352
1027346->1127353
1127353->1227354
1127353->1227355
1227355->1327356
1227355->1327357
527263->627358
627358->727359
727359->827360
727359->827361
827361->927362
827361->927363
527263->627364
627364->727365
727365->827366
727365->827367
827367->927368
827367->927369
527263->627370
627370->727371
227212->327372
327372->427373
327372->427374
327372->427375
427375->527376
427375->527377
527377->627378
627378->727379
627378->727380
327372->427381
427381->527382
527382->627383
627383->727384
727384->827385
827385->927386
927386->1027387
1027387->1127388
1027387->1127389
1127389->1227390
1127389->1227391
1227391->1327392
1327392->1427393
1327392->1427394
827385->927395
927395->1027396
1027396->1127397
1027396->1127398
1027396->1127399
1127399->1227400
1227400->1327401
1227400->1327402
1127399->1227403
1227403->1327404
827385->927405
927405->1027406
1027406->1127407
627383->727408
727408->827409
827409->927410
827409->927411
727408->827412
827412->927413
927413->1027414
1027414->1127415
1127415->1227416
1127415->1227417
1227417->1327418
1227417->1327419
927413->1027420
1027420->1127421
527382->627422
627422->727423
227212->327424
327424->427425
327424->427426
327424->427427
427427->527428
427427->527429
527429->627430
627430->727431
627430->727432
327424->427433
427433->527434
527434->627435
627435->727436
627435->727437
227212->327438
327438->427439
327438->427440
327438->427441
427441->527442
527442->627443
527442->627444
427441->527445
527445->627446
627446->727447
727447->827448
727447->827449
627446->727450
327438->427451
427451->527452
527452->627453
627453->727454
727454->827455
827455->927456
827455->927457
727454->827458
827458->927459
827458->927460
927460->1027461
927460->1027462
1027462->1127463
1127463->1227464
527452->627465
627465->727466
727466->827467
727466->827468
827468->927469
827468->927470
627465->727471
727471->827472
727471->827473
827473->927474
627465->727475
727475->827476
627465->727477
727477->827478
827478->927479
927479->1027480
1027480->1127481
1027480->1127482
927479->1027483
927479->1027484
1027484->1127485
1027484->1127486
1127486->1227487
1127486->1227488
527452->627489
627489->727490
227212->327491
327491->427492
327491->427493
327491->427494
427494->527495
427494->527496
527496->627497
627497->727498
627497->727499
327491->427500
427500->527501
527501->627502
627502->727503
727503->827504
727503->827505
527501->627506
627506->727507
727507->827508
827508->927509
827508->927510
727507->827511
827511->927512
827511->927513
927513->1027514
927513->1027515
1027515->1127516
1127516->1227517
527501->627518
627518->727519
727519->827520
727519->827521
827521->927522
827521->927523
627518->727524
727524->827525
727524->827526
827526->927527
627518->727528
727528->827529
627518->727530
727530->827531
827531->927532
927532->1027533
1027533->1127534
1027533->1127535
927532->1027536
927532->1027537
1027537->1127538
1027537->1127539
1127539->1227540
1127539->1227541
527501->627542
627542->727543
727543->827544
227212->327545
327545->427546
327545->427547
327545->427548
427548->527549
427548->527550
527550->627551
627551->727552
727552->827553
727552->827554
627551->727555
327545->427556
427556->527557
527557->627558
627558->727559
727559->827560
727559->827561
527557->627562
627562->727563
727563->827564
727563->827565
827565->927566
827565->927567
627562->727568
727568->827569
727568->827570
827570->927571
627562->727572
727572->827573
627562->727574
727574->827575
827575->927576
927576->1027577
1027577->1127578
1027577->1127579
927576->1027580
927576->1027581
1027581->1127582
1027581->1127583
1127583->1227584
1127583->1227585
-10->027586
027586->127587
127587->227588
227588->327589
327589->427590
427590->527591
527591->627592
027586->127593
127593->227594
227594->327595
327595->427596
427596->527597
027586->127598
127598->227599
227599->327600
327600->427601
427601->527602
527602->627603
627603->727604
027586->127605
127605->227606
227606->327607
327607->427608
427608->527609
527609->627610
027586->127611
127611->227612
227612->327613
327613->427614
027586->127615
127615->227616
227616->327617
327617->427618
027586->127619
127619->227620
227620->327621
327621->427622
027586->127623
127623->227624
227624->327625
327625->427626
027586->127627
127627->227628
227628->327629
327629->427630
027586->127631
127631->227632
227632->327633
327633->427634
427634->527635
527635->627636
027586->127637
127637->227638
127637->227639
227639->327640
327640->427641
327640->427642
327640->427643
327640->427644
327640->427645
427645->527646
427645->527647
227639->327648
327648->427649
327648->427650
327648->427651
327648->427652
327648->427653
427653->527654
427653->527655
527655->627656
527655->627657
227639->327658
327658->427659
327658->427660
327658->427661
327658->427662
327658->427663
427663->527664
427663->527665
527665->627666
527665->627667
227639->327668
327668->427669
327668->427670
327668->427671
327668->427672
327668->427673
427673->527674
427673->527675
527675->627676
527675->627677
227639->327678
327678->427679
327678->427680
327678->427681
327678->427682
327678->427683
427683->527684
427683->527685
527685->627686
527685->627687
227639->327688
327688->427689
327688->427690
327688->427691
327688->427692
327688->427693
427693->527694
427693->527695
527695->627696
527695->627697
227639->327698
327698->427699
327698->427700
327698->427701
327698->427702
327698->427703
427703->527704
427703->527705
527705->627706
527705->627707
227639->327708
327708->427709
327708->427710
327708->427711
327708->427712
327708->427713
427713->527714
427713->527715
527715->627716
527715->627717
227639->327718
327718->427719
327718->427720
327718->427721
427721->527722
427721->527723
327718->427724
227639->327725
327725->427726
427726->527727
527727->627728
627728->727729
727729->827730
727729->827731
727729->827732
827732->927733
827732->927734
927734->1027735
527727->627736
627736->727737
727737->827738
727737->827739
827739->927740
827739->927741
927741->1027742
1027742->1127743
527727->627744
627744->727745
727745->827746
727745->827747
827747->927748
827747->927749
927749->1027750
527727->627751
627751->727752
727752->827753
727752->827754
827754->927755
827754->927756
927756->1027757
927756->1027758
1027758->1127759
1127759->1227760
527727->627761
627761->727762
727762->827763
727762->827764
627761->727765
727765->827766
827766->927767
927767->1027768
1027768->1127769
1127769->1227770
1127769->1227771
1127769->1227772
1227772->1327773
827766->927774
927774->1027775
1027775->1127776
1027775->1127777
927774->1027778
1027778->1127779
1127779->1227780
1227780->1327781
1327781->1427782
1427782->1527783
1527783->1627784
1527783->1627785
1627785->1727786
1727786->1827787
1427782->1527788
1327781->1427789
1427789->1527790
1427789->1527791
527727->627792
627792->727793
727793->827794
627792->727795
727795->827796
827796->927797
927797->1027798
1027798->1127799
1027798->1127800
1127800->1227801
1127800->1227802
1227802->1327803
827796->927804
927804->1027805
1027805->1127806
1027805->1127807
1127807->1227808
1127807->1227809
1227809->1327810
827796->927811
927811->1027812
1027812->1127813
1027812->1127814
1127814->1227815
1127814->1227816
1227816->1327817
827796->927818
927818->1027819
1027819->1127820
1027819->1127821
1127821->1227822
1127821->1227823
927818->1027824
1027824->1127825
1027824->1127826
927818->1027827
1027827->1127828
927818->1027829
1027829->1127830
1127830->1227831
1227831->1327832
1327832->1427833
1327832->1427834
1227831->1327835
1227831->1327836
527727->627837
627837->727838
727838->827839
727838->827840
827840->927841
927841->1027842
927841->1027843
1027843->1127844
1127844->1227845
1227845->1327846
1127844->1227847
827840->927848
227639->327849
327849->427850
327849->427851
327849->427852
427852->527853
427852->527854
427852->527855
527855->627856
327849->427857
427857->527858
527858->627859
627859->727860
727860->827861
727860->827862
827862->927863
827862->927864
527858->627865
627865->727866
727866->827867
727866->827868
827868->927869
827868->927870
527858->627871
627871->727872
727872->827873
827873->927874
927874->1027875
1027875->1127876
1027875->1127877
727872->827878
827878->927879
827878->927880
927880->1027881
1027881->1127882
1127882->1227883
1127882->1227884
527858->627885
627885->727886
727886->827887
727886->827888
827888->927889
827888->927890
627885->727891
727891->827892
727891->827893
827893->927894
627885->727895
727895->827896
627885->727897
727897->827898
827898->927899
927899->1027900
1027900->1127901
1027900->1127902
1127902->1227903
1127902->1227904
1227904->1327905
1227904->1327906
1327906->1427907
1327906->1427908
827898->927909
927909->1027910
1027910->1127911
1027910->1127912
927909->1027913
1027913->1127914
1127914->1227915
1227915->1327916
1327916->1427917
1427917->1527918
1427917->1527919
1327916->1427920
1427920->1527921
1427920->1527922
1527922->1627923
1527922->1627924
1627924->1727925
1127914->1227926
1227926->1327927
1327927->1427928
1427928->1527929
1427928->1527930
1327927->1427931
1327927->1427932
1127914->1227933
1227933->1327934
1327934->1427935
1427935->1527936
1427935->1527937
1327934->1427938
1327934->1427939
1427939->1527940
1427939->1527941
1127914->1227942
1227942->1327943
1327943->1427944
1427944->1527945
1427944->1527946
1327943->1427947
1327943->1427948
1127914->1227949
1227949->1327950
1327950->1427951
1327950->1427952
1127914->1227953
1227953->1327954
1327954->1427955
1327954->1427956
1327954->1427957
827898->927958
927958->1027959
1027959->1127960
1027959->1127961
1027959->1127962
527858->627963
627963->727964
727964->827965
827965->927966
927966->1027967
1027967->1127968
1027967->1127969
927966->1027970
1027970->1127971
1027970->1127972
1127972->1227973
1127972->1227974
1227974->1327975
727964->827976
827976->927977
927977->1027978
1027978->1127979
1027978->1127980
927977->1027981
927977->1027982
727964->827983
827983->927984
927984->1027985
1027985->1127986
1027985->1127987
927984->1027988
927984->1027989
1027989->1127990
1027989->1127991
1127991->1227992
727964->827993
827993->927994
927994->1027995
1027995->1127996
1027995->1127997
927994->1027998
927994->1027999
727964->828000
828000->928001
928001->1028002
928001->1028003
527858->628004
628004->728005
728005->828006
728005->828007
828007->928008
828007->928009
928009->1028010
1028010->1128011
1128011->1228012
1228012->1328013
527858->628014
628014->728015
728015->828016
728015->828017
628014->728018
628014->728019
628014->728020
728020->828021
828021->928022
928022->1028023
1028023->1128024
1028023->1128025
1128025->1228026
1128025->1228027
828021->928028
928028->1028029
1028029->1128030
1028029->1128031
1128031->1228032
1128031->1228033
828021->928034
928034->1028035
1028035->1128036
1028035->1128037
1128037->1228038
1128037->1228039
527858->628040
628040->728041
728041->828042
527858->628043
628043->728044
728044->828045
728044->828046
828046->928047
828046->928048
928048->1028049
928048->1028050
1028050->1128051
1128051->1228052
527858->628053
628053->728054
227639->328055
328055->428056
328055->428057
328055->428058
428058->528059
428058->528060
528060->628061
628061->728062
628061->728063
328055->428064
428064->528065
528065->628066
628066->728067
628066->728068
728068->828069
728068->828070
-10->028071
028071->128072
128072->228073
228073->328074
328074->428075
428075->528076
528076->628077
028071->128078
128078->228079
228079->328080
328080->428081
428081->528082
528082->628083
028071->128084
128084->228085
228085->328086
328086->428087
428087->528088
528088->628089
628089->728090
028071->128091
128091->228092
228092->328093
328093->428094
428094->528095
528095->628096
628096->728097
028071->128098
128098->228099
228099->328100
328100->428101
028071->128102
128102->228103
228103->328104
328104->428105
028071->128106
128106->228107
228107->328108
328108->428109
028071->128110
128110->228111
128110->228112
228112->328113
328113->428114
328113->428115
328113->428116
428116->528117
428116->528118
228112->328119
328119->428120
328119->428121
328119->428122
428122->528123
428122->528124
228112->328125
328125->428126
328125->428127
328125->428128
428128->528129
428128->528130
528130->628131
628131->728132
628131->728133
328125->428134
428134->528135
528135->628136
628136->728137
728137->828138
728137->828139
828139->928140
828139->928141
928141->1028142
528135->628143
628143->728144
228112->328145
328145->428146
328145->428147
428147->528148
528148->628149
628149->728150
728150->828151
728150->828152
428147->528153
528153->628154
628154->728155
628154->728156
328145->428157
428157->528158
528158->628159
628159->728160
728160->828161
828161->928162
928162->1028163
1028163->1128164
1028163->1128165
728160->828166
828166->928167
828166->928168
928168->1028169
1028169->1128170
1128170->1228171
1128170->1228172
528158->628173
628173->728174
728174->828175
728174->828176
828176->928177
828176->928178
828176->928179
828176->928180
828176->928181
828176->928182
528158->628183
628183->728184
728184->828185
728184->828186
528158->628187
628187->728188
728188->828189
728188->828190
528158->628191
628191->728192
728192->828193
728192->828194
828194->928195
828194->928196
628191->728197
728197->828198
728197->828199
828199->928200
928200->1028201
628191->728202
728202->828203
628191->728204
728204->828205
828205->928206
928206->1028207
1028207->1128208
1128208->1228209
1128208->1228210
1028207->1128211
1128211->1228212
1128211->1228213
1228213->1328214
1328214->1428215
1228213->1328216
828205->928217
928217->1028218
1028218->1128219
1028218->1128220
1028218->1128221
828205->928222
928222->1028223
928222->1028224
928222->1028225
928222->1028226
1028226->1128227
1128227->1228228
1228228->1328229
1228228->1328230
1228228->1328231
828205->928232
928232->1028233
1028233->1128234
1028233->1128235
1028233->1128236
1128236->1228237
1228237->1328238
1128236->1228239
828205->928240
928240->1028241
1028241->1128242
1028241->1128243
1128243->1228244
1128243->1228245
928240->1028246
1028246->1128247
1028246->1128248
1128248->1228249
928240->1028250
1028250->1128251
928240->1028252
1028252->1128253
1128253->1228254
1228254->1328255
1328255->1428256
1328255->1428257
1328255->1428258
1428258->1528259
1428258->1528260
1128253->1228261
1228261->1328262
1328262->1428263
1328262->1428264
1328262->1428265
1428265->1528266
1528266->1628267
1628267->1728268
1528266->1628269
1428265->1528270
1128253->1228271
1228271->1328272
1328272->1428273
1328272->1428274
1328272->1428275
1428275->1528276
1428275->1528277
1128253->1228278
1228278->1328279
1328279->1428280
1328279->1428281
1328279->1428282
1428282->1528283
1428282->1528284
1128253->1228285
1228285->1328286
1328286->1428287
1328286->1428288
1328286->1428289
1428289->1528290
1528290->1628291
1628291->1728292
1528290->1628293
1628293->1728294
1628293->1728295
1728295->1828296
1828296->1928297
1928297->2028298
1928297->2028299
1828296->1928300
1928300->2028301
1928300->2028302
1728295->1828303
1428289->1528304
1528304->1628305
1628305->1728306
1728306->1828307
1828307->1928308
1928308->2028309
2028309->2128310
2028309->2128311
1828307->1928312
1928312->2028313
2028313->2128314
2028313->2128315
1728306->1828316
1828316->1928317
1928317->2028318
1928317->2028319
1628305->1728320
1728320->1828321
1828321->1928322
1828321->1928323
1128253->1228324
1228324->1328325
1328325->1428326
1328325->1428327
1228324->1328328
1328328->1428329
1428329->1528330
1528330->1628331
1628331->1728332
1628331->1728333
1628331->1728334
1728334->1828335
1728334->1828336
1428329->1528337
1528337->1628338
1628338->1728339
1728339->1828340
1728339->1828341
1628338->1728342
1728342->1828343
1728342->1828344
1528337->1628345
1628345->1728346
1728346->1828347
1828347->1928348
1828347->1928349
1928349->2028350
1928349->2028351
528158->628352
628352->728353
728353->828354
828354->928355
728353->828356
628352->728357
728357->828358
828358->928359
928359->1028360
1028360->1128361
1128361->1228362
1228362->1328363
1328363->1428364
1328363->1428365
1428365->1528366
1528366->1628367
1628367->1728368
1628367->1728369
1028360->1128370
1128370->1228371
1128370->1228372
1228372->1328373
1328373->1428374
1428374->1528375
1428374->1528376
1528376->1628377
1628377->1728378
1728378->1828379
1728378->1828380
1228372->1328381
1328381->1428382
1328381->1428383
1428383->1528384
1528384->1628385
1628385->1728386
1628385->1728387
1728387->1828388
1828388->1928389
1928389->2028390
1928389->2028391
1428383->1528392
1528392->1628393
1628393->1728394
1728394->1828395
1628393->1728396
1628393->1728397
1728397->1828398
1728397->1828399
1828399->1928400
1928400->2028401
2028401->2128402
2128402->2228403
2128402->2228404
2228404->2328405
2328405->2428406
2428406->2528407
2428406->2528408
2028401->2128409
1928400->2028410
2028410->2128411
2128411->2228412
2128411->2228413
2228413->2328414
2328414->2428415
2428415->2528416
2428415->2528417
2028410->2128418
1628393->1728419
1728419->1828420
1828420->1928421
1928421->2028422
2028422->2128423
1928421->2028424
2028424->2128425
2128425->2228426
828358->928427
928427->1028428
1028428->1128429
1028428->1128430
1128430->1228431
1228431->1328432
1328432->1428433
1328432->1428434
928427->1028435
928427->1028436
1028436->1128437
928427->1028438
1028438->1128439
1128439->1228440
1228440->1328441
1228440->1328442
828358->928443
928443->1028444
1028444->1128445
828358->928446
928446->1028447
1028447->1128448
1028447->1128449
1128449->1228450
1228450->1328451
1328451->1428452
1328451->1428453
928446->1028454
928446->1028455
1028455->1128456
928446->1028457
1028457->1128458
1128458->1228459
1228459->1328460
1228459->1328461
1328461->1428462
1428462->1528463
1328461->1428464
1428464->1528465
528158->628466
628466->728467
228112->328468
328468->428469
328468->428470
428470->528471
428470->528472
328468->428473
428473->528474
528474->628475
228112->328476
328476->428477
328476->428478
428478->528479
428478->528480
528480->628481
628481->728482
628481->728483
328476->428484
428484->528485
528485->628486
628486->728487
728487->828488
628486->728489
628486->728490
228112->328491
328491->428492
328491->428493
428493->528494
428493->528495
528495->628496
628496->728497
628496->728498
328491->428499
428499->528500
528500->628501
628501->728502
728502->828503
728502->828504
728502->828505
828505->928506
828505->928507
928507->1028508
928507->1028509
528500->628510
628510->728511
228112->328512
328512->428513
328512->428514
428514->528515
428514->528516
328512->428517
428517->528518
528518->628519
628519->728520
628519->728521
728521->828522
728521->828523
-10->028524
028524->128525
128525->228526
228526->328527
328527->428528
428528->528529
528529->628530
028524->128531
128531->228532
228532->328533
028524->128534
128534->228535
128534->228536
228536->328537
328537->428538
328537->428539
328537->428540
428540->528541
528541->628542
628542->728543
628542->728544
728544->828545
828545->928546
928546->1028547
1028547->1128548
428540->528549
528549->628550
628550->728551
728551->828552
728551->828553
428540->528554
528554->628555
628555->728556
728556->828557
828557->928558
928558->1028559
1028559->1128560
1028559->1128561
728556->828562
628555->728563
728563->828564
728563->828565
728563->828566
328537->428567
428567->528568
528568->628569
628569->728570
728570->828571
828571->928572
928572->1028573
1028573->1128574
1028573->1128575
728570->828576
828576->928577
828576->928578
928578->1028579
1028579->1128580
1128580->1228581
1128580->1228582
928578->1028583
1028583->1128584
528568->628585
628585->728586
728586->828587
828587->928588
928588->1028589
1028589->1128590
1028589->1128591
1128591->1228592
1228592->1328593
1328593->1428594
1328593->1428595
728586->828596
828596->928597
828596->928598
928598->1028599
1028599->1128600
1128600->1228601
1128600->1228602
1228602->1328603
1328603->1428604
1428604->1528605
1428604->1528606
928598->1028607
1028607->1128608
528568->628609
628609->728610
728610->828611
728610->828612
828612->928613
828612->928614
928614->1028615
1028615->1128616
1128616->1228617
1128616->1228618
1228618->1328619
1328619->1428620
1428620->1528621
1428620->1528622
928614->1028623
1028623->1128624
1128624->1228625
1128624->1228626
1228626->1328627
1228626->1328628
1328628->1428629
1428629->1528630
1528630->1628631
1628631->1728632
1628631->1728633
1728633->1828634
1828634->1928635
1928635->2028636
1928635->2028637
1528630->1628638
1428629->1528639
1528639->1628640
1628640->1728641
1628640->1728642
1728642->1828643
1828643->1928644
1928644->2028645
1928644->2028646
1528639->1628647
1128624->1228648
1228648->1328649
1328649->1428650
1428650->1528651
1428650->1528652
1528652->1628653
1628653->1728654
1728654->1828655
1628653->1728656
1728656->1828657
1828657->1928658
1328649->1428659
1428659->1528660
1528660->1628661
1628661->1728662
1528660->1628663
1628663->1728664
1728664->1828665
528568->628666
628666->728667
728667->828668
728667->828669
828669->928670
928670->1028671
1028671->1128672
1028671->1128673
628666->728674
628666->728675
628666->728676
728676->828677
828677->928678
928678->1028679
928678->1028680
1028680->1128681
1128681->1228682
1028680->1128683
1128683->1228684
528568->628685
628685->728686
228536->328687
328687->428688
328687->428689
328687->428690
428690->528691
528691->628692
628692->728693
628692->728694
728694->828695
828695->928696
928696->1028697
1028697->1128698
428690->528699
528699->628700
628700->728701
728701->828702
728701->828703
428690->528704
528704->628705
628705->728706
728706->828707
828707->928708
928708->1028709
928708->1028710
628705->728711
328687->428712
428712->528713
528713->628714
628714->728715
628714->728716
728716->828717
728716->828718
228536->328719
328719->428720
328719->428721
328719->428722
428722->528723
428722->528724
528724->628725
628725->728726
728726->828727
828727->928728
928728->1028729
928728->1028730
628725->728731
328719->428732
428732->528733
528733->628734
628734->728735
728735->828736
728735->828737
828737->928738
828737->928739
928739->1028740
528733->628741
628741->728742
728742->828743
728742->828744
828744->928745
828744->928746
528733->628747
628747->728748
728748->828749
728748->828750
828750->928751
928751->1028752
1028752->1128753
1028752->1128754
628747->728755
628747->728756
728756->828757
628747->728758
728758->828759
828759->928760
928760->1028761
1028761->1128762
1028761->1128763
1128763->1228764
1128763->1228765
1228765->1328766
828759->928767
928767->1028768
1028768->1128769
1028768->1128770
928767->1028771
1028771->1128772
1128772->1228773
1228773->1328774
1328774->1428775
1328774->1428776
1328774->1428777
1128772->1228778
1228778->1328779
1328779->1428780
1328779->1428781
1328779->1428782
1428782->1528783
528733->628784
628784->728785
228536->328786
328786->428787
328786->428788
328786->428789
428789->528790
528790->628791
528790->628792
428789->528793
528793->628794
628794->728795
728795->828796
828796->928797
828796->928798
728795->828799
628794->728800
728800->828801
728800->828802
328786->428803
428803->528804
528804->628805
628805->728806
728806->828807
828807->928808
828807->928809
728806->828810
828810->928811
828810->928812
528804->628813
628813->728814
728814->828815
828815->928816
828815->928817
728814->828818
828818->928819
828818->928820
928820->1028821
928820->1028822
1028822->1128823
928820->1028824
528804->628825
628825->728826
728826->828827
828827->928828
828827->928829
728826->828830
728826->828831
828831->928832
828831->928833
928833->1028834
1028834->1128835
1028834->1128836
1128836->1228837
1228837->1328838
1328838->1428839
1228837->1328840
528804->628841
628841->728842
728842->828843
828843->928844
828843->928845
728842->828846
728842->828847
828847->928848
828847->928849
928849->1028850
1028850->1128851
1128851->1228852
1028850->1128853
1128853->1228854
1228854->1328855
1228854->1328856
1128853->1228857
528804->628858
628858->728859
728859->828860
728859->828861
828861->928862
828861->928863
828861->928864
928864->1028865
928864->1028866
828861->928867
828861->928868
928868->1028869
1028869->1128870
1028869->1128871
928868->1028872
528804->628873
628873->728874
728874->828875
728874->828876
828876->928877
828876->928878
928878->1028879
1028879->1128880
1028879->1128881
928878->1028882
828876->928883
928883->1028884
928883->1028885
828876->928886
828876->928887
928887->1028888
1028888->1128889
1028888->1128890
928887->1028891
528804->628892
628892->728893
228536->328894
328894->428895
328894->428896
328894->428897
428897->528898
528898->628899
628899->728900
728900->828901
728900->828902
828902->928903
828902->928904
428897->528905
528905->628906
628906->728907
728907->828908
828908->928909
928909->1028910
1028910->1128911
1028910->1128912
1128912->1228913
1128912->1228914
728907->828915
628906->728916
728916->828917
728916->828918
328894->428919
428919->528920
528920->628921
628921->728922
728922->828923
828923->928924
828923->928925
728922->828926
828926->928927
828926->928928
528920->628929
628929->728930
728930->828931
828931->928932
928932->1028933
1028933->1128934
1028933->1128935
1128935->1228936
1128935->1228937
728930->828938
828938->928939
828938->928940
928940->1028941
1028941->1128942
1128942->1228943
1128942->1228944
1228944->1328945
1228944->1328946
528920->628947
628947->728948
728948->828949
728948->828950
828950->928951
928951->1028952
1028952->1128953
1028952->1128954
1128954->1228955
1128954->1228956
628947->728957
628947->728958
728958->828959
628947->728960
728960->828961
828961->928962
928962->1028963
1028963->1128964
1128964->1228965
1128964->1228966
1028963->1128967
1128967->1228968
1128967->1228969
1228969->1328970
1228969->1328971
1328971->1428972
1428972->1528973
1328971->1428974
828961->928975
928975->1028976
1028976->1128977
1028976->1128978
1128978->1228979
1228979->1328980
1128978->1228981
1228981->1328982
1228981->1328983
828961->928984
928984->1028985
1028985->1128986
1028985->1128987
1128987->1228988
1128987->1228989
528920->628990
628990->728991
-10->028992
028992->128993
128993->228994
228994->328995
328995->428996
428996->528997
528997->628998
028992->128999
128999->229000
229000->329001
329001->429002
429002->529003
529003->629004
629004->729005
028992->129006
129006->229007
229007->329008
329008->429009
429009->529010
529010->629011
629011->729012
028992->129013
129013->229014
229014->329015
329015->429016
028992->129017
129017->229018
229018->329019
329019->429020
028992->129021
129021->229022
129021->229023
229023->329024
129021->229025
229025->329026
329026->429027
429027->529028
529028->629029
329026->429030
229025->329031
329031->429032
329031->429033
429033->529034
429033->529035
529035->629036
629036->729037
729037->829038
529035->629039
329031->429040
429040->529041
529041->629042
629042->729043
729043->829044
629042->729045
629042->729046
229025->329047
329047->429048
329047->429049
429049->529050
429049->529051
529051->629052
629052->729053
729053->829054
829054->929055
829054->929056
529051->629057
329047->429058
429058->529059
529059->629060
629060->729061
629060->729062
629060->729063
729063->829064
829064->929065
729063->829066
229025->329067
329067->429068
329067->429069
429069->529070
529070->629071
629071->729072
729072->829073
829073->929074
429069->529075
529075->629076
629076->729077
629076->729078
329067->429079
429079->529080
529080->629081
629081->729082
629081->729083
729083->829084
729083->829085
229025->329086
329086->429087
329086->429088
429088->529089
529089->629090
629090->729091
729091->829092
829092->929093
429088->529094
529094->629095
629095->729096
729096->829097
729096->829098
629095->729099
329086->429100
429100->529101
529101->629102
629102->729103
629102->729104
729104->829105
729104->829106
-10->029107
029107->129108
129108->229109
229109->329110
329110->429111
429111->529112
529112->629113
029107->129114
129114->229115
229115->329116
329116->429117
429117->529118
529118->629119
629119->729120
029107->129121
129121->229122
229122->329123
329123->429124
429124->529125
529125->629126
629126->729127
029107->129128
129128->229129
229129->329130
329130->429131
429131->529132
529132->629133
629133->729134
029107->129135
129135->229136
229136->329137
329137->429138
029107->129139
129139->229140
129139->229141
229141->329142
329142->429143
329142->429144
329142->429145
429145->529146
529146->629147
429145->529148
529148->629149
629149->729150
729150->829151
829151->929152
429145->529153
529153->629154
629154->729155
729155->829156
729155->829157
629154->729158
729158->829159
829159->929160
929160->1029161
729158->829162
329142->429163
429163->529164
529164->629165
629165->729166
629165->729167
729167->829168
829168->929169
729167->829170
229141->329171
329171->429172
329171->429173
329171->429174
429174->529175
529175->629176
429174->529177
529177->629178
629178->729179
729179->829180
829180->929181
429174->529182
529182->629183
629183->729184
729184->829185
729184->829186
829186->929187
829186->929188
729184->829189
629183->729190
729190->829191
829191->929192
929192->1029193
729190->829194
329171->429195
429195->529196
529196->629197
629197->729198
729198->829199
829199->929200
929200->1029201
1029201->1129202
1129202->1229203
729198->829204
829204->929205
829204->929206
929206->1029207
1029207->1129208
1129208->1229209
1229209->1329210
529196->629211
629211->729212
729212->829213
729212->829214
829214->929215
929215->1029216
1029216->1129217
829214->929218
729212->829219
829219->929220
829219->929221
929221->1029222
929221->1029223
1029223->1129224
1129224->1229225
529196->629226
629226->729227
729227->829228
729227->829229
829229->929230
829229->929231
929231->1029232
1029232->1129233
929231->1029234
1029234->1129235
1129235->1229236
1229236->1329237
1129235->1229238
1129235->1229239
1229239->1329240
1229239->1329241
1329241->1429242
1429242->1529243
1529243->1629244
1629244->1729245
1629244->1729246
1529243->1629247
1629247->1729248
1629247->1729249
1429242->1529250
1529250->1629251
1529250->1629252
1129235->1229253
1229253->1329254
1329254->1429255
1429255->1529256
1529256->1629257
1629257->1729258
1629257->1729259
1529256->1629260
1429255->1529261
1529261->1629262
1629262->1729263
1729263->1829264
1729263->1829265
1629262->1729266
1629262->1729267
1529261->1629268
1629268->1729269
1629268->1729270
1329254->1429271
1429271->1529272
1529272->1629273
1629273->1729274
1729274->1829275
1729274->1829276
1629273->1729277
1629273->1729278
1729278->1829279
1829279->1929280
1729278->1829281
1829281->1929282
1929282->2029283
2029283->2129284
2029283->2129285
2029283->2129286
2129286->2229287
2129286->2229288
1829281->1929289
1829281->1929290
529196->629291
629291->729292
729292->829293
729292->829294
829294->929295
829294->929296
629291->729297
729297->829298
729297->829299
829299->929300
629291->729301
729301->829302
829302->929303
929303->1029304
1029304->1129305
1029304->1129306
929303->1029307
829302->929308
929308->1029309
1029309->1129310
1129310->1229311
1229311->1329312
1229311->1329313
1329313->1429314
1329313->1429315
1029309->1129316
1129316->1229317
1229317->1329318
1229317->1329319
1329319->1429320
1329319->1429321
1029309->1129322
1129322->1229323
1229323->1329324
1329324->1429325
1329324->1429326
1429326->1529327
1229323->1329328
1329328->1429329
1429329->1529330
1429329->1529331
1329328->1429332
1129322->1229333
1229333->1329334
1329334->1429335
1429335->1529336
1529336->1629337
1529336->1629338
1629338->1729339
1629338->1729340
1329334->1429341
1429341->1529342
1529342->1629343
1029309->1129344
1129344->1229345
1229345->1329346
1229345->1329347
1329347->1429348
1429348->1529349
1329347->1429350
1429350->1529351
1529351->1629352
1429350->1529353
1429350->1529354
829302->929355
929355->1029356
1029356->1129357
1129357->1229358
1229358->1329359
1229358->1329360
1329360->1429361
1329360->1429362
1029356->1129363
1129363->1229364
1229364->1329365
1229364->1329366
1229364->1329367
1329367->1429368
1429368->1529369
1429368->1529370
1329367->1429371
1329367->1429372
529196->629373
629373->729374
229141->329375
329375->429376
329375->429377
329375->429378
429378->529379
529379->629380
429378->529381
529381->629382
629382->729383
729383->829384
829384->929385
429378->529386
529386->629387
629387->729388
729388->829389
729388->829390
629387->729391
729391->829392
829392->929393
929393->1029394
729391->829395
329375->429396
429396->529397
529397->629398
629398->729399
629398->729400
729400->829401
829401->929402
729400->829403
229141->329404
329404->429405
329404->429406
329404->429407
429407->529408
529408->629409
429407->529410
529410->629411
629411->729412
729412->829413
829413->929414
429407->529415
529415->629416
629416->729417
729417->829418
729417->829419
829419->929420
829419->929421
729417->829422
629416->729423
729423->829424
829424->929425
929425->1029426
729423->829427
329404->429428
429428->529429
529429->629430
629430->729431
729431->829432
829432->929433
929433->1029434
1029434->1129435
1129435->1229436
729431->829437
829437->929438
829437->929439
929439->1029440
1029440->1129441
1129441->1229442
1229442->1329443
529429->629444
629444->729445
729445->829446
729445->829447
829447->929448
929448->1029449
1029449->1129450
829447->929451
729445->829452
829452->929453
829452->929454
929454->1029455
929454->1029456
1029456->1129457
1129457->1229458
1229458->1329459
1129457->1229460
529429->629461
629461->729462
729462->829463
729462->829464
829464->929465
829464->929466
929466->1029467
1029467->1129468
929466->1029469
1029469->1129470
1129470->1229471
1229471->1329472
1129470->1229473
1129470->1229474
1229474->1329475
1229474->1329476
1329476->1429477
1429477->1529478
1529478->1629479
1629479->1729480
1629479->1729481
1529478->1629482
1629482->1729483
1629482->1729484
1429477->1529485
1529485->1629486
1529485->1629487
1129470->1229488
1229488->1329489
1329489->1429490
1429490->1529491
1529491->1629492
1629492->1729493
1629492->1729494
1529491->1629495
1429490->1529496
1529496->1629497
1629497->1729498
1729498->1829499
1729498->1829500
1629497->1729501
1629497->1729502
1529496->1629503
1629503->1729504
1629503->1729505
1329489->1429506
1429506->1529507
1529507->1629508
1629508->1729509
1729509->1829510
1729509->1829511
1629508->1729512
1629508->1729513
1729513->1829514
1829514->1929515
1729513->1829516
1829516->1929517
1929517->2029518
2029518->2129519
2029518->2129520
2029518->2129521
2129521->2229522
2129521->2229523
1829516->1929524
1829516->1929525
529429->629526
629526->729527
729527->829528
729527->829529
829529->929530
829529->929531
929531->1029532
629526->729533
729533->829534
729533->829535
629526->729536
729536->829537
829537->929538
929538->1029539
1029539->1129540
1029539->1129541
929538->1029542
829537->929543
929543->1029544
1029544->1129545
1129545->1229546
1229546->1329547
1229546->1329548
1329548->1429549
1329548->1429550
1029544->1129551
1129551->1229552
1229552->1329553
1229552->1329554
1329554->1429555
1329554->1429556
1429556->1529557
1429556->1529558
1029544->1129559
1129559->1229560
1229560->1329561
1229560->1329562
1329562->1429563
1329562->1429564
1429564->1529565
1429564->1529566
1529566->1629567
1529566->1629568
1029544->1129569
1129569->1229570
1229570->1329571
1329571->1429572
1429572->1529573
1429572->1529574
1329571->1429575
1429575->1529576
1529576->1629577
1529576->1629578
1429575->1529579
1229570->1329580
1329580->1429581
1429581->1529582
1429581->1529583
1529583->1629584
1529583->1629585
1629585->1729586
1629585->1729587
1329580->1429588
1129569->1229589
1229589->1329590
1329590->1429591
1429591->1529592
1529592->1629593
1529592->1629594
1629594->1729595
1629594->1729596
1729596->1829597
1729596->1829598
1329590->1429599
1429599->1529600
1529600->1629601
1529600->1629602
1529600->1629603
1629603->1729604
1629603->1729605
1729605->1829606
1729605->1829607
1829607->1929608
1829607->1929609
1329590->1429610
1429610->1529611
1529611->1629612
1029544->1129613
1129613->1229614
1229614->1329615
1229614->1329616
1329616->1429617
1429617->1529618
1329616->1429619
1429619->1529620
1529620->1629621
1629621->1729622
1529620->1629623
1429619->1529624
1429619->1529625
829537->929626
929626->1029627
1029627->1129628
1129628->1229629
1229629->1329630
1229629->1329631
1329631->1429632
1329631->1429633
1029627->1129634
1129634->1229635
1229635->1329636
1229635->1329637
1229635->1329638
1329638->1429639
1429639->1529640
1429639->1529641
1329638->1429642
1329638->1429643
529429->629644
629644->729645
-10->029646
029646->129647
129647->229648
229648->329649
329649->429650
429650->529651
529651->629652
029646->129653
129653->229654
229654->329655
329655->429656
429656->529657
529657->629658
629658->729659
029646->129660
129660->229661
229661->329662
329662->429663
429663->529664
529664->629665
629665->729666
029646->129667
129667->229668
229668->329669
329669->429670
429670->529671
529671->629672
629672->729673
029646->129674
129674->229675
229675->329676
329676->429677
429677->529678
529678->629679
029646->129680
129680->229681
229681->329682
329682->429683
029646->129684
129684->229685
229685->329686
329686->429687
029646->129688
129688->229689
229689->329690
329690->429691
029646->129692
129692->229693
229693->329694
329694->429695
029646->129696
129696->229697
229697->329698
029646->129699
129699->229700
229700->329701
329701->429702
429702->529703
529703->629704
029646->129705
129705->229706
229706->329707
329707->429708
429708->529709
529709->629710
029646->129711
129711->229712
129711->229713
129711->229714
229714->329715
129711->229716
229716->329717
329717->429718
429718->529719
529719->629720
329717->429721
229716->329722
329722->429723
329722->429724
329722->429725
429725->529726
529726->629727
529726->629728
429725->529729
529729->629730
629730->729731
629730->729732
329722->429733
229716->329734
329734->429735
329734->429736
429736->529737
429736->529738
529738->629739
629739->729740
629739->729741
329734->429742
429742->529743
529743->629744
629744->729745
729745->829746
729745->829747
729745->829748
829748->929749
929749->1029750
529743->629751
629751->729752
729752->829753
729752->829754
829754->929755
829754->929756
929756->1029757
529743->629758
629758->729759
729759->829760
729759->829761
829761->929762
829761->929763
929763->1029764
929763->1029765
629758->729766
729766->829767
829767->929768
529743->629769
629769->729770
729770->829771
829771->929772
929772->1029773
1029773->1129774
1029773->1129775
729770->829776
829776->929777
829776->929778
929778->1029779
1029779->1129780
1129780->1229781
1129780->1229782
529743->629783
629783->729784
729784->829785
829785->929786
929786->1029787
1029787->1129788
1029787->1129789
1129789->1229790
1129789->1229791
1229791->1329792
1329792->1429793
1429793->1529794
1529794->1629795
1529794->1629796
1429793->1529797
829785->929798
929798->1029799
1029799->1129800
1029799->1129801
829785->929802
929802->1029803
1029803->1129804
1129804->1229805
1229805->1329806
1229805->1329807
1229805->1329808
1329808->1429809
1029803->1129810
929802->1029811
1029811->1129812
1129812->1229813
1229813->1329814
1329814->1429815
1429815->1529816
1429815->1529817
1329814->1429818
1429818->1529819
1429818->1529820
1529820->1629821
1529820->1629822
1129812->1229823
1229823->1329824
1329824->1429825
1329824->1429826
1429826->1529827
1529827->1629828
1529827->1629829
1429826->1529830
1529830->1629831
1529830->1629832
829785->929833
929833->1029834
1029834->1129835
629783->729836
729836->829837
829837->929838
829837->929839
729836->829840
829840->929841
929841->1029842
1029842->1129843
1029842->1129844
1129844->1229845
1229845->1329846
1329846->1429847
1329846->1429848
1229845->1329849
1129844->1229850
529743->629851
629851->729852
729852->829853
729852->829854
529743->629855
629855->729856
729856->829857
829857->929858
929858->1029859
1029859->1129860
1029859->1129861
1129861->1229862
1229862->1329863
1329863->1429864
1329863->1429865
729856->829866
829866->929867
829866->929868
929868->1029869
529743->629870
629870->729871
729871->829872
829872->929873
929873->1029874
729871->829875
829875->929876
829875->929877
929877->1029878
1029878->1129879
929877->1029880
1029880->1129881
529743->629882
629882->729883
729883->829884
829884->929885
929885->1029886
729883->829887
829887->929888
829887->929889
929889->1029890
1029890->1129891
929889->1029892
1029892->1129893
529743->629894
629894->729895
729895->829896
729895->829897
829897->929898
929898->1029899
1029899->1129900
1029899->1129901
629894->729902
629894->729903
629894->729904
729904->829905
829905->929906
929906->1029907
1029907->1129908
1029907->1129909
1129909->1229910
829905->929911
929911->1029912
1029912->1129913
1029912->1129914
1129914->1229915
529743->629916
629916->729917
729917->829918
729917->829919
829919->929920
829919->929921
929921->1029922
929921->1029923
1029923->1129924
1029923->1129925
529743->629926
629926->729927
729927->829928
729927->829929
629926->729930
729930->829931
829931->929932
929932->1029933
1029933->1129934
1029933->1129935
829931->929936
929936->1029937
529743->629938
629938->729939
729939->829940
729939->829941
829941->929942
929942->1029943
1029943->1129944
1029943->1129945
929942->1029946
1029946->1129947
1129947->1229948
1229948->1329949
1129947->1229950
829941->929951
529743->629952
629952->729953
729953->829954
729953->829955
829955->929956
929956->1029957
929956->1029958
829955->929959
529743->629960
629960->729961
229716->329962
329962->429963
329962->429964
429964->529965
429964->529966
529966->629967
629967->729968
629967->729969
329962->429970
429970->529971
529971->629972
629972->729973
729973->829974
829974->929975
829974->929976
729973->829977
829977->929978
829977->929979
929979->1029980
929979->1029981
529971->629982
629982->729983
729983->829984
729983->829985
629982->729986
729986->829987
829987->929988
529971->629989
629989->729990
729990->829991
729990->829992
829992->929993
929993->1029994
829992->929995
929995->1029996
829992->929997
229716->329998
329998->429999
329998->430000
430000->530001
430000->530002
530002->630003
630003->730004
730004->830005
730004->830006
630003->730007
730007->830008
830008->930009
930009->1030010
730007->830011
329998->430012
430012->530013
530013->630014
630014->730015
730015->830016
830016->930017
930017->1030018
1030018->1130019
1030018->1130020
1130020->1230021
1130020->1230022
1230022->1330023
1330023->1430024
1330023->1430025
830016->930026
930026->1030027
1030027->1130028
1030027->1130029
1130029->1230030
830016->930031
930031->1030032
930031->1030033
930031->1030034
930031->1030035
1030035->1130036
1130036->1230037
1230037->1330038
1230037->1330039
1330039->1430040
1330039->1430041
830016->930042
930042->1030043
1030043->1130044
1030043->1130045
830016->930046
930046->1030047
1030047->1130048
630014->730049
730049->830050
830050->930051
830050->930052
730049->830053
830053->930054
930054->1030055
1030055->1130056
1130056->1230057
1130056->1230058
1230058->1330059
1230058->1330060
1330060->1430061
1330060->1430062
930054->1030063
1030063->1130064
530013->630065
630065->730066
229716->330067
330067->430068
330067->430069
330067->430070
430070->530071
430070->530072
530072->630073
630073->730074
730074->830075
730074->830076
630073->730077
730077->830078
730077->830079
430070->530080
530080->630081
330067->430082
229716->330083
330083->430084
330083->430085
430085->530086
430085->530087
530087->630088
630088->730089
630088->730090
330083->430091
430091->530092
530092->630093
630093->730094
630093->730095
229716->330096
330096->430097
330096->430098
430098->530099
430098->530100
530100->630101
630101->730102
630101->730103
330096->430104
430104->530105
530105->630106
630106->730107
730107->830108
730107->830109
630106->730110
229716->330111
330111->430112
330111->430113
430113->530114
430113->530115
330111->430116
430116->530117
530117->630118
630118->730119
229716->330120
330120->430121
330120->430122
330120->430123
430123->530124
430123->530125
530125->630126
630126->730127
730127->830128
730127->830129
630126->730130
330120->430131
229716->330132
330132->430133
330132->430134
430134->530135
430134->530136
530136->630137
630137->730138
730138->830139
830139->930140
930140->1030141
930140->1030142
630137->730143
330132->430144
-10->030145
030145->130146
130146->230147
230147->330148
330148->430149
430149->530150
530150->630151
030145->130152
130152->230153
230153->330154
330154->430155
430155->530156
530156->630157
630157->730158
730158->830159
830159->930160
030145->130161
130161->230162
230162->330163
330163->430164
430164->530165
530165->630166
630166->730167
730167->830168
830168->930169
030145->130170
130170->230171
230171->330172
330172->430173
030145->130174
130174->230175
230175->330176
330176->430177
430177->530178
530178->630179
030145->130180
130180->230181
130180->230182
130180->230183
230183->330184
130180->230185
230185->330186
330186->430187
330186->430188
330186->430189
430189->530190
430189->530191
230185->330192
330192->430193
330192->430194
230185->330195
330195->430196
330195->430197
230185->330198
330198->430199
330198->430200
230185->330201
330201->430202
330201->430203
430203->530204
430203->530205
530205->630206
530205->630207
330201->430208
430208->530209
530209->630210
630210->730211
730211->830212
730211->830213
730211->830214
530209->630215
630215->730216
730216->830217
730216->830218
730216->830219
530209->630220
630220->730221
730221->830222
830222->930223
730221->830224
730221->830225
230185->330226
330226->430227
430227->530228
330226->430229
330226->430230
430230->530231
430230->530232
530232->630233
630233->730234
630233->730235
330226->430236
430236->530237
530237->630238
630238->730239
730239->830240
730239->830241
830241->930242
830241->930243
630238->730244
730244->830245
830245->930246
930246->1030247
930246->1030248
830245->930249
930249->1030250
1030250->1130251
530237->630252
630252->730253
230185->330254
330254->430255
330254->430256
430256->530257
430256->530258
530258->630259
630259->730260
730260->830261
830261->930262
930262->1030263
1030263->1130264
630259->730265
330254->430266
430266->530267
530267->630268
630268->730269
730269->830270
730269->830271
530267->630272
630272->730273
730273->830274
730273->830275
230185->330276
330276->430277
330276->430278
330276->430279
430279->530280
430279->530281
530281->630282
630282->730283
730283->830284
830284->930285
930285->1030286
1030286->1130287
630282->730288
330276->430289
230185->330290
330290->430291
330290->430292
330290->430293
430293->530294
430293->530295
530295->630296
630296->730297
730297->830298
830298->930299
930299->1030300
1030300->1130301
630296->730302
330290->430303
-10->030304
030304->130305
130305->230306
230306->330307
330307->430308
430308->530309
530309->630310
030304->130311
130311->230312
230312->330313
330313->430314
430314->530315
530315->630316
630316->730317
730317->830318
030304->130319
130319->230320
230320->330321
330321->430322
430322->530323
530323->630324
630324->730325
030304->130326
130326->230327
230327->330328
330328->430329
430329->530330
530330->630331
030304->130332
130332->230333
230333->330334
330334->430335
030304->130336
130336->230337
230337->330338
330338->430339
030304->130340
130340->230341
230341->330342
330342->430343
030304->130344
130344->230345
230345->330346
330346->430347
030304->130348
130348->230349
230349->330350
330350->430351
030304->130352
130352->230353
230353->330354
330354->430355
030304->130356
130356->230357
230357->330358
330358->430359
430359->530360
530360->630361
030304->130362
130362->230363
130362->230364
230364->330365
330365->430366
430366->530367
530367->630368
330365->430369
230364->330370
330370->430371
330370->430372
430372->530373
430372->530374
530374->630375
630375->730376
630375->730377
330370->430378
430378->530379
530379->630380
630380->730381
730381->830382
730381->830383
730381->830384
830384->930385
930385->1030386
530379->630387
630387->730388
730388->830389
730388->830390
830390->930391
830390->930392
930392->1030393
630387->730394
730394->830395
530379->630396
630396->730397
730397->830398
730397->830399
830399->930400
830399->930401
530379->630402
630402->730403
730403->830404
830404->930405
930405->1030406
1030406->1130407
1030406->1130408
1130408->1230409
1130408->1230410
1230410->1330411
1330411->1430412
1430412->1530413
1430412->1530414
830404->930415
930415->1030416
1030416->1130417
1130417->1230418
1230418->1330419
1230418->1330420
1230418->1330421
1330421->1430422
1030416->1130423
930415->1030424
1030424->1130425
1130425->1230426
1230426->1330427
1230426->1330428
1330428->1430429
1330428->1430430
830404->930431
930431->1030432
1030432->1130433
630402->730434
730434->830435
830435->930436
830435->930437
730434->830438
830438->930439
930439->1030440
1030440->1130441
1030440->1130442
1130442->1230443
1230443->1330444
1330444->1430445
1330444->1430446
1230443->1330447
1130442->1230448
530379->630449
630449->730450
730450->830451
830451->930452
830451->930453
930453->1030454
930453->1030455
1030455->1130456
630449->730457
730457->830458
830458->930459
830458->930460
930460->1030461
1030461->1130462
1130462->1230463
1130462->1230464
1030461->1130465
1130465->1230466
930460->1030467
530379->630468
630468->730469
230364->330470
330470->430471
430471->530472
430471->530473
530473->630474
630474->730475
630474->730476
330470->430477
430477->530478
530478->630479
630479->730480
630479->730481
230364->330482
330482->430483
330482->430484
430484->530485
530485->630486
630486->730487
430484->530488
330482->430489
430489->530490
530490->630491
630491->730492
730492->830493
830493->930494
930494->1030495
730492->830496
830496->930497
830496->930498
930498->1030499
1030499->1130500
530490->630501
630501->730502
730502->830503
730502->830504
830504->930505
930505->1030506
1030506->1130507
1030506->1130508
630501->730509
630501->730510
730510->830511
630501->730512
730512->830513
830513->930514
930514->1030515
930514->1030516
1030516->1130517
530490->630518
630518->730519
-10->030520
030520->130521
130521->230522
230522->330523
330523->430524
430524->530525
530525->630526
030520->130527
130527->230528
230528->330529
330529->430530
430530->530531
530531->630532
630532->730533
730533->830534
030520->130535
130535->230536
230536->330537
330537->430538
430538->530539
530539->630540
630540->730541
030520->130542
130542->230543
230543->330544
330544->430545
430545->530546
530546->630547
630547->730548
030520->130549
130549->230550
230550->330551
330551->430552
430552->530553
530553->630554
030520->130555
130555->230556
230556->330557
330557->430558
030520->130559
130559->230560
230560->330561
330561->430562
030520->130563
130563->230564
230564->330565
330565->430566
030520->130567
130567->230568
230568->330569
330569->430570
030520->130571
130571->230572
130571->230573
230573->330574
330574->430575
330574->430576
230573->330577
330577->430578
330577->430579
430579->530580
330577->430581
430581->530582
530582->630583
630583->730584
630583->730585
630583->730586
230573->330587
330587->430588
330587->430589
430589->530590
430589->530591
530591->630592
630592->730593
630592->730594
330587->430595
430595->530596
530596->630597
630597->730598
630597->730599
230573->330600
330600->430601
330600->430602
430602->530603
530603->630604
630604->730605
430602->530606
530606->630607
630607->730608
730608->830609
730608->830610
630607->730611
730611->830612
730611->830613
330600->430614
430614->530615
530615->630616
630616->730617
630616->730618
730618->830619
730618->830620
730618->830621
230573->330622
330622->430623
330622->430624
430624->530625
530625->630626
630626->730627
430624->530628
530628->630629
630629->730630
730630->830631
830631->930632
830631->930633
730630->830634
830634->930635
830634->930636
630629->730637
730637->830638
730637->830639
330622->430640
430640->530641
530641->630642
630642->730643
730643->830644
730643->830645
830645->930646
830645->930647
530641->630648
630648->730649
630648->730650
630648->730651
730651->830652
630648->730653
730653->830654
830654->930655
930655->1030656
1030656->1130657
930655->1030658
830654->930659
930659->1030660
1030660->1130661
1130661->1230662
1230662->1330663
1230662->1330664
1330664->1430665
1330664->1430666
1430666->1530667
1530667->1630668
1630668->1730669
1530667->1630670
1430666->1530671
1530671->1630672
1030660->1130673
1130673->1230674
1130673->1230675
1230675->1330676
1330676->1430677
1430677->1530678
1430677->1530679
1530679->1630680
1530679->1630681
1330676->1430682
1430682->1530683
1430682->1530684
1330676->1430685
1430685->1530686
1330676->1430687
1430687->1530688
1530688->1630689
1630689->1730690
1630689->1730691
1730691->1830692
1730691->1830693
1830693->1930694
1930694->2030695
2030695->2130696
1930694->2030697
1830693->1930698
1930698->2030699
530641->630700
630700->730701
630700->730702
730702->830703
830703->930704
930704->1030705
930704->1030706
930704->1030707
530641->630708
630708->730709
730709->830710
730709->830711
830711->930712
830711->930713
230573->330714
330714->430715
330714->430716
330714->430717
430717->530718
530718->630719
630719->730720
430717->530721
530721->630722
630722->730723
730723->830724
730723->830725
630722->730726
730726->830727
730726->830728
330714->430729
430729->530730
530730->630731
630731->730732
730732->830733
830733->930734
930734->1030735
730732->830736
830736->930737
830736->930738
930738->1030739
1030739->1130740
930738->1030741
530730->630742
630742->730743
630742->730744
630742->730745
730745->830746
630742->730747
730747->830748
830748->930749
930749->1030750
1030750->1130751
1130751->1230752
1030750->1130753
930749->1030754
830748->930755
930755->1030756
1030756->1130757
1030756->1130758
1130758->1230759
530730->630760
630760->730761
230573->330762
330762->430763
330762->430764
430764->530765
530765->630766
630766->730767
430764->530768
530768->630769
630769->730770
730770->830771
830771->930772
830771->930773
730770->830774
830774->930775
830774->930776
630769->730777
730777->830778
730777->830779
330762->430780
430780->530781
530781->630782
630782->730783
730783->830784
730783->830785
830785->930786
830785->930787
530781->630788
630788->730789
630788->730790
630788->730791
730791->830792
630788->730793
730793->830794
830794->930795
930795->1030796
1030796->1130797
1130797->1230798
1230798->1330799
1030796->1130800
1130800->1230801
1130800->1230802
1230802->1330803
1230802->1330804
830794->930805
930805->1030806
1030806->1130807
1130807->1230808
1030806->1130809
930805->1030810
1030810->1130811
1130811->1230812
1230812->1330813
1330813->1430814
1330813->1430815
1430815->1530816
1430815->1530817
1530817->1630818
1530817->1630819
1630819->1730820
1730820->1830821
1830821->1930822
1730820->1830823
1630819->1730824
1730824->1830825
1130811->1230826
1230826->1330827
1230826->1330828
1330828->1430829
1430829->1530830
1530830->1630831
1530830->1630832
1630832->1730833
1630832->1730834
1430829->1530835
1530835->1630836
1530835->1630837
1430829->1530838
1530838->1630839
1430829->1530840
1530840->1630841
1630841->1730842
1730842->1830843
1730842->1830844
1830844->1930845
1830844->1930846
1930846->2030847
1930846->2030848
2030848->2130849
2130849->2230850
2230850->2330851
2130849->2230852
2030848->2130853
2130853->2230854
530781->630855
630855->730856
730856->830857
730856->830858
830858->930859
830858->930860
230573->330861
330861->430862
330861->430863
330861->430864
430864->530865
430864->530866
530866->630867
630867->730868
730868->830869
830869->930870
630867->730871
330861->430872
430872->530873
530873->630874
630874->730875
730875->830876
730875->830877
830877->930878
830877->930879
530873->630880
630880->730881
630880->730882
630880->730883
630880->730884
730884->830885
830885->930886
930886->1030887
930886->1030888
1030888->1130889
530873->630890
630890->730891
730891->830892
-10->030893
030893->130894
130894->230895
230895->330896
330896->430897
430897->530898
530898->630899
030893->130900
130900->230901
230901->330902
330902->430903
430903->530904
530904->630905
630905->730906
030893->130907
130907->230908
230908->330909
330909->430910
430910->530911
530911->630912
630912->730913
730913->830914
030893->130915
130915->230916
230916->330917
330917->430918
430918->530919
530919->630920
630920->730921
030893->130922
130922->230923
230923->330924
330924->430925
430925->530926
530926->630927
630927->730928
030893->130929
130929->230930
230930->330931
330931->430932
030893->130933
130933->230934
230934->330935
330935->430936
030893->130937
130937->230938
230938->330939
330939->430940
030893->130941
130941->230942
230942->330943
330943->430944
030893->130945
130945->230946
230946->330947
330947->430948
030893->130949
130949->230950
230950->330951
330951->430952
030893->130953
130953->230954
230954->330955
330955->430956
030893->130957
130957->230958
230958->330959
330959->430960
430960->530961
530961->630962
630962->730963
730963->830964
030893->130965
130965->230966
230966->330967
330967->430968
430968->530969
530969->630970
630970->730971
030893->130972
130972->230973
230973->330974
330974->430975
430975->530976
530976->630977
030893->130978
130978->230979
230979->330980
330980->430981
430981->530982
530982->630983
630983->730984
030893->130985
130985->230986
230986->330987
330987->430988
430988->530989
530989->630990
030893->130991
130991->230992
230992->330993
330993->430994
430994->530995
530995->630996
030893->130997
130997->230998
230998->330999
330999->431000
431000->531001
531001->631002
030893->131003
131003->231004
131003->231005
231005->331006
331006->431007
431007->531008
531008->631009
331006->431010
231005->331011
331011->431012
331011->431013
331011->431014
231005->331015
331015->431016
331015->431017
431017->531018
331015->431019
231005->331020
331020->431021
331020->431022
331020->431023
431023->531024
431023->531025
531025->631026
631026->731027
631026->731028
331020->431029
431029->531030
531030->631031
631031->731032
731032->831033
731032->831034
831034->931035
831034->931036
531030->631037
631037->731038
731038->831039
731038->831040
631037->731041
731041->831042
831042->931043
531030->631044
631044->731045
231005->331046
331046->431047
331046->431048
431048->531049
431048->531050
531050->631051
631051->731052
631051->731053
331046->431054
431054->531055
531055->631056
631056->731057
731057->831058
731057->831059
731057->831060
831060->931061
931061->1031062
531055->631063
631063->731064
731064->831065
831065->931066
931066->1031067
1031067->1131068
1031067->1131069
731064->831070
831070->931071
831070->931072
931072->1031073
1031073->1131074
1131074->1231075
1131074->1231076
531055->631077
631077->731078
731078->831079
731078->831080
831080->931081
831080->931082
531055->631083
631083->731084
731084->831085
831085->931086
931086->1031087
1031087->1131088
1031087->1131089
1131089->1231090
1131089->1231091
1231091->1331092
1331092->1431093
1431093->1531094
1431093->1531095
831085->931096
931096->1031097
1031097->1131098
1131098->1231099
1231099->1331100
1031097->1131101
1131101->1231102
1131101->1231103
831085->931104
931104->1031105
1031105->1131106
1131106->1231107
1231107->1331108
1231107->1331109
1231107->1331110
1331110->1431111
1031105->1131112
931104->1031113
1031113->1131114
1131114->1231115
1231115->1331116
1331116->1431117
1431117->1531118
1431117->1531119
1331116->1431120
1431120->1531121
1431120->1531122
1531122->1631123
1531122->1631124
1131114->1231125
1231125->1331126
1331126->1431127
1331126->1431128
1331126->1431129
1431129->1531130
1431129->1531131
1131114->1231132
1231132->1331133
1331133->1431134
1331133->1431135
1431135->1531136
1431135->1531137
1531137->1631138
1631138->1731139
1631138->1731140
1531137->1631141
1631141->1731142
1731142->1831143
1831143->1931144
1931144->2031145
1931144->2031146
1831143->1931147
1731142->1831148
1131114->1231149
1231149->1331150
1231149->1331151
1231149->1331152
1231149->1331153
1331153->1431154
1431154->1531155
1531155->1631156
1531155->1631157
1631157->1731158
1731158->1831159
1631157->1731160
1731160->1831161
1831161->1931162
1831161->1931163
1831161->1931164
831085->931165
931165->1031166
1031166->1131167
831085->931168
931168->1031169
1031169->1131170
1131170->1231171
1131170->1231172
1031169->1131173
1131173->1231174
1231174->1331175
1131173->1231176
931168->1031177
1031177->1131178
1131178->1231179
1231179->1331180
1231179->1331181
1231179->1331182
1331182->1431183
1431183->1531184
1531184->1631185
1631185->1731186
1631185->1731187
1731187->1831188
1831188->1931189
1731187->1831190
1531184->1631191
1431183->1531192
1531192->1631193
1531192->1631194
1631194->1731195
1631194->1731196
1331182->1431197
831085->931198
931198->1031199
1031199->1131200
1031199->1131201
1131201->1231202
1131201->1231203
1231203->1331204
1231203->1331205
831085->931206
931206->1031207
1031207->1131208
1031207->1131209
931206->1031210
1031210->1131211
1131211->1231212
1231212->1331213
1331213->1431214
1331213->1431215
1431215->1531216
1531216->1631217
1631217->1731218
1631217->1731219
1531216->1631220
1431215->1531221
1131211->1231222
1231222->1331223
631083->731224
731224->831225
831225->931226
831225->931227
731224->831228
831228->931229
931229->1031230
1031230->1131231
1131231->1231232
1131231->1231233
1231233->1331234
1331234->1431235
1431235->1531236
1531236->1631237
1531236->1631238
1431235->1531239
1331234->1431240
1231233->1331241
931229->1031242
1031242->1131243
531055->631244
631244->731245
231005->331246
331246->431247
331246->431248
431248->531249
431248->531250
531250->631251
631251->731252
631251->731253
331246->431254
431254->531255
531255->631256
631256->731257
631256->731258
231005->331259
331259->431260
331259->431261
431261->531262
431261->531263
331259->431264
431264->531265
531265->631266
231005->331267
331267->431268
331267->431269
431269->531270
431269->531271
531271->631272
631272->731273
731273->831274
731273->831275
631272->731276
731276->831277
731276->831278
331267->431279
431279->531280
531280->631281
631281->731282
731282->831283
731282->831284
831284->931285
831284->931286
931286->1031287
931286->1031288
531280->631289
631289->731290
731290->831291
731290->831292
631289->731293
731293->831294
831294->931295
931295->1031296
831294->931297
531280->631298
631298->731299
731299->831300
731299->831301
831301->931302
831301->931303
931303->1031304
931303->1031305
531280->631306
631306->731307
731307->831308
731307->831309
631306->731310
731310->831311
831311->931312
931312->1031313
831311->931314
531280->631315
631315->731316
731316->831317
731316->831318
231005->331319
331319->431320
331319->431321
431321->531322
431321->531323
531323->631324
631324->731325
631324->731326
331319->431327
431327->531328
531328->631329
631329->731330
731330->831331
731330->831332
531328->631333
631333->731334
731334->831335
731334->831336
831336->931337
831336->931338
931338->1031339
1031339->1131340
1031339->1131341
1131341->1231342
1231342->1331343
1331343->1431344
1231342->1331345
531328->631346
631346->731347
731347->831348
731347->831349
831349->931350
831349->931351
931351->1031352
531328->631353
631353->731354
731354->831355
731354->831356
831356->931357
831356->931358
631353->731359
731359->831360
731359->831361
831361->931362
631353->731363
731363->831364
631353->731365
731365->831366
831366->931367
931367->1031368
1031368->1131369
1031368->1131370
1131370->1231371
1131370->1231372
831366->931373
931373->1031374
1031374->1131375
1031374->1131376
1031374->1131377
1131377->1231378
1131377->1231379
1231379->1331380
1331380->1431381
1331380->1431382
1231379->1331383
831366->931384
931384->1031385
1031385->1131386
1031385->1131387
931384->1031388
1031388->1131389
1131389->1231390
1231390->1331391
1331391->1431392
1331391->1431393
1431393->1531394
1431393->1531395
1131389->1231396
1231396->1331397
1331397->1431398
1331397->1431399
1431399->1531400
1431399->1531401
1531401->1631402
1531401->1631403
1131389->1231404
1231404->1331405
1331405->1431406
1331405->1431407
1431407->1531408
1431407->1531409
1531409->1631410
1131389->1231411
1231411->1331412
1331412->1431413
1331412->1431414
1431414->1531415
1431414->1531416
1131389->1231417
1231417->1331418
1331418->1431419
1331418->1431420
1431420->1531421
1231417->1331422
1331422->1431423
1231417->1331424
1331424->1431425
1431425->1531426
1531426->1631427
1631427->1731428
1631427->1731429
1631427->1731430
1731430->1831431
1731430->1831432
1831432->1931433
1931433->2031434
1931433->2031435
1831432->1931436
1431425->1531437
1531437->1631438
1631438->1731439
1631438->1731440
1531437->1631441
1431425->1531442
1531442->1631443
1631443->1731444
1631443->1731445
1731445->1831446
1731445->1831447
1831447->1931448
1831447->1931449
1431425->1531450
1531450->1631451
1631451->1731452
1631451->1731453
1531450->1631454
1631454->1731455
1731455->1831456
1831456->1931457
1931457->2031458
1931457->2031459
1931457->2031460
1731455->1831461
1831461->1931462
1931462->2031463
1931462->2031464
1931462->2031465
2031465->2131466
2031465->2131467
1131389->1231468
1231468->1331469
1331469->1431470
1331469->1431471
1231468->1331472
1331472->1431473
1431473->1531474
1531474->1631475
1631475->1731476
1631475->1731477
1731477->1831478
1731477->1831479
1831479->1931480
1831479->1931481
1931481->2031482
2031482->2131483
1931481->2031484
1431473->1531485
1531485->1631486
1631486->1731487
1631486->1731488
1531485->1631489
1631489->1731490
1731490->1831491
1831491->1931492
1931492->2031493
1931492->2031494
2031494->2131495
1731490->1831496
1831496->1931497
1931497->2031498
1931497->2031499
1931497->2031500
2031500->2131501
1531485->1631502
1631502->1731503
1731503->1831504
1831504->1931505
1931505->2031506
1931505->2031507
1931505->2031508
2031508->2131509
2031508->2131510
2131510->2231511
2131510->2231512
1731503->1831513
1831513->1931514
1931514->2031515
1931514->2031516
1431473->1531517
1531517->1631518
1631518->1731519
1631518->1731520
1631518->1731521
1731521->1831522
1731521->1831523
1231468->1331524
1331524->1431525
1431525->1531526
1531526->1631527
1631527->1731528
1631527->1731529
1631527->1731530
1731530->1831531
1731530->1831532
1831532->1931533
1831532->1931534
1431525->1531535
1531535->1631536
1631536->1731537
1631536->1731538
1731538->1831539
1731538->1831540
931384->1031541
1031541->1131542
1131542->1231543
1231543->1331544
1331544->1431545
1331544->1431546
1331544->1431547
1431547->1531548
1431547->1531549
1531549->1631550
1531549->1631551
1131542->1231552
1231552->1331553
1331553->1431554
1331553->1431555
1431555->1531556
1431555->1531557
531328->631558
631558->731559
731559->831560
231005->331561
331561->431562
331561->431563
431563->531564
431563->531565
531565->631566
631566->731567
631566->731568
331561->431569
431569->531570
531570->631571
631571->731572
731572->831573
831573->931574
931574->1031575
731572->831576
831576->931577
831576->931578
931578->1031579
931578->1031580
1031580->1131581
531570->631582
631582->731583
731583->831584
731583->831585
831585->931586
831585->931587
931587->1031588
1031588->1131589
1031588->1131590
1131590->1231591
1231591->1331592
1331592->1431593
1231591->1331594
531570->631595
631595->731596
731596->831597
731596->831598
831598->931599
831598->931600
931600->1031601
531570->631602
631602->731603
631602->731604
631602->731605
631602->731606
731606->831607
831607->931608
931608->1031609
1031609->1131610
1031609->1131611
1131611->1231612
1131611->1231613
1231613->1331614
1231613->1331615
1331615->1431616
831607->931617
931617->1031618
1031618->1131619
1031618->1131620
831607->931621
931621->1031622
1031622->1131623
1131623->1231624
1131623->1231625
1031622->1131626
1131626->1231627
1231627->1331628
1331628->1431629
1331628->1431630
1331628->1431631
1431631->1531632
1431631->1531633
1531633->1631634
1631634->1731635
1531633->1631636
1131626->1231637
931621->1031638
1031638->1131639
1131639->1231640
1231640->1331641
1231640->1331642
1331642->1431643
931621->1031644
1031644->1131645
1131645->1231646
1131645->1231647
1231647->1331648
831607->931649
931649->1031650
1031650->1131651
1031650->1131652
1031650->1131653
1131653->1231654
1131653->1231655
1231655->1331656
1331656->1431657
1431657->1531658
1231655->1331659
1331659->1431660
531570->631661
631661->731662
731662->831663
231005->331664
331664->431665
331664->431666
331664->431667
431667->531668
531668->631669
531668->631670
531668->631671
431667->531672
531672->631673
531672->631674
631674->731675
731675->831676
531672->631677
431667->531678
531678->631679
531678->631680
531678->631681
431667->531682
531682->631683
531682->631684
631684->731685
631684->731686
731686->831687
831687->931688
931688->1031689
931688->1031690
831687->931691
931691->1031692
1031692->1131693
1131693->1231694
931691->1031695
731686->831696
831696->931697
831696->931698
531682->631699
631699->731700
731700->831701
831701->931702
931702->1031703
1031703->1131704
931702->1031705
931702->1031706
731700->831707
831707->931708
931708->1031709
1031709->1131710
931708->1031711
931708->1031712
731700->831713
831713->931714
931714->1031715
1031715->1131716
931714->1031717
931714->1031718
431667->531719
531719->631720
531719->631721
631721->731722
631721->731723
731723->831724
831724->931725
931725->1031726
931725->1031727
831724->931728
931728->1031729
1031729->1131730
1131730->1231731
931728->1031732
731723->831733
831733->931734
831733->931735
531719->631736
631736->731737
731737->831738
831738->931739
931739->1031740
1031740->1131741
931739->1031742
931739->1031743
731737->831744
831744->931745
931745->1031746
1031746->1131747
931745->1031748
931745->1031749
731737->831750
831750->931751
831750->931752
931752->1031753
1031753->1131754
1131754->1231755
1031753->1131756
1131756->1231757
1231757->1331758
1331758->1431759
1431759->1531760
1331758->1431761
1331758->1431762
1431762->1531763
1131756->1231764
931752->1031765
1031765->1131766
1131766->1231767
1031765->1131768
1131768->1231769
1231769->1331770
1331770->1431771
1431771->1531772
1331770->1431773
1331770->1431774
1431774->1531775
1131768->1231776
931752->1031777
1031777->1131778
1031777->1131779
1131779->1231780
1231780->1331781
1331781->1431782
1431782->1531783
1331781->1431784
1331781->1431785
1431785->1531786
1131779->1231787
431667->531788
531788->631789
531788->631790
631790->731791
631790->731792
731792->831793
831793->931794
931794->1031795
931794->1031796
831793->931797
931797->1031798
931797->1031799
531788->631800
631800->731801
731801->831802
831802->931803
931803->1031804
1031804->1131805
1131805->1231806
931803->1031807
1031807->1131808
1031807->1131809
1131809->1231810
1231810->1331811
1131809->1231812
731801->831813
831813->931814
931814->1031815
1031815->1131816
1131816->1231817
931814->1031818
1031818->1131819
1031818->1131820
1131820->1231821
731801->831822
831822->931823
931823->1031824
931823->1031825
831822->931826
931826->1031827
1031827->1131828
931826->1031829
1031829->1131830
1131830->1231831
1231831->1331832
1331832->1431833
1331832->1431834
1431834->1531835
1431834->1531836
1531836->1631837
1131830->1231838
1231838->1331839
1331839->1431840
1431840->1531841
1531841->1631842
1431840->1531843
1331839->1431844
1431844->1531845
1531845->1631846
1631846->1731847
1631846->1731848
1531845->1631849
1631849->1731850
1731850->1831851
1731850->1831852
1831852->1931853
1831852->1931854
1931854->2031855
1631849->1731856
1231838->1331857
1331857->1431858
1431858->1531859
731801->831860
831860->931861
931861->1031862
1031862->1131863
931861->1031864
831860->931865
931865->1031866
731801->831867
831867->931868
931868->1031869
931868->1031870
1031870->1131871
1031870->1131872
1131872->1231873
1231873->1331874
1331874->1431875
1231873->1331876
1331876->1431877
1331876->1431878
1431878->1531879
431667->531880
531880->631881
531880->631882
631882->731883
631882->731884
531880->631885
631885->731886
731886->831887
831887->931888
831887->931889
931889->1031890
931889->1031891
431667->531892
531892->631893
631893->731894
531892->631895
531892->631896
631896->731897
631896->731898
531892->631899
631899->731900
731900->831901
831901->931902
931902->1031903
931902->1031904
931902->1031905
1031905->1131906
1031905->1131907
731900->831908
831908->931909
931909->1031910
931909->1031911
731900->831912
831912->931913
931913->1031914
931913->1031915
731900->831916
831916->931917
931917->1031918
931917->1031919
731900->831920
831920->931921
931921->1031922
931921->1031923
731900->831924
831924->931925
931925->1031926
931925->1031927
731900->831928
831928->931929
931929->1031930
431667->531931
531931->631932
531931->631933
631933->731934
631933->731935
731935->831936
831936->931937
831936->931938
531931->631939
631939->731940
731940->831941
831941->931942
831941->931943
931943->1031944
431667->531945
531945->631946
531945->631947
531945->631948
631948->731949
631948->731950
731950->831951
831951->931952
831951->931953
531945->631954
631954->731955
731955->831956
831956->931957
931957->1031958
931957->1031959
1031959->1131960
1031959->1131961
1131961->1231962
1231962->1331963
1331963->1431964
1431964->1531965
1431964->1531966
1531966->1631967
1631967->1731968
1731968->1831969
1631967->1731970
1531966->1631971
1631971->1731972
1731972->1831973
1631971->1731974
1231962->1331975
1231962->1331976
1331976->1431977
731955->831978
831978->931979
-10->031980
031980->131981
131981->231982
231982->331983
331983->431984
431984->531985
531985->631986
031980->131987
131987->231988
231988->331989
331989->431990
431990->531991
531991->631992
031980->131993
131993->231994
231994->331995
331995->431996
431996->531997
531997->631998
631998->731999
031980->132000
132000->232001
232001->332002
332002->432003
432003->532004
532004->632005
632005->732006
031980->132007
132007->232008
232008->332009
332009->432010
031980->132011
132011->232012
232012->332013
332013->432014
031980->132015
132015->232016
232016->332017
332017->432018
031980->132019
132019->232020
232020->332021
031980->132022
132022->232023
232023->332024
332024->432025
432025->532026
532026->632027
031980->132028
132028->232029
132028->232030
232030->332031
332031->432032
432032->532033
532033->632034
632034->732035
632034->732036
332031->432037
232030->332038
332038->432039
332038->432040
432040->532041
332038->432042
232030->332043
332043->432044
332043->432045
332043->432046
432046->532047
432046->532048
532048->632049
632049->732050
632049->732051
332043->432052
432052->532053
532053->632054
632054->732055
732055->832056
732055->832057
832057->932058
832057->932059
532053->632060
632060->732061
732061->832062
732061->832063
632060->732064
732064->832065
832065->932066
532053->632067
632067->732068
232030->332069
332069->432070
332069->432071
432071->532072
432071->532073
532073->632074
632074->732075
632074->732076
332069->432077
432077->532078
532078->632079
632079->732080
732080->832081
732080->832082
732080->832083
832083->932084
932084->1032085
1032085->1132086
1032085->1132087
532078->632088
632088->732089
732089->832090
832090->932091
932091->1032092
1032092->1132093
1032092->1132094
1132094->1232095
1232095->1332096
732089->832097
832097->932098
832097->932099
932099->1032100
1032100->1132101
1132101->1232102
1132101->1232103
1232103->1332104
1332104->1432105
532078->632106
632106->732107
732107->832108
732107->832109
832109->932110
832109->932111
532078->632112
632112->732113
732113->832114
832114->932115
932115->1032116
1032116->1132117
1032116->1132118
1132118->1232119
1132118->1232120
1232120->1332121
1332121->1432122
1432122->1532123
1432122->1532124
832114->932125
932125->1032126
1032126->1132127
1132127->1232128
1232128->1332129
1232128->1332130
1232128->1332131
1332131->1432132
1032126->1132133
932125->1032134
1032134->1132135
1132135->1232136
1232136->1332137
1332137->1432138
1432138->1532139
1432138->1532140
1332137->1432141
1432141->1532142
1432141->1532143
1532143->1632144
1532143->1632145
1132135->1232146
1232146->1332147
1332147->1432148
1432148->1532149
1532149->1632150
1332147->1432151
1432151->1532152
1432151->1532153
1532153->1632154
1532153->1632155
1132135->1232156
1232156->1332157
1232156->1332158
1232156->1332159
1232156->1332160
1332160->1432161
1432161->1532162
1532162->1632163
1632163->1732164
1732164->1832165
1832165->1932166
1632163->1732167
1732167->1832168
1732167->1832169
1832169->1932170
1832169->1932171
1932171->2032172
1432161->1532173
1532173->1632174
1632174->1732175
1632174->1732176
1532173->1632177
1632177->1732178
1732178->1832179
1832179->1932180
1932180->2032181
1932180->2032182
1932180->2032183
2032183->2132184
2132184->2232185
1732178->1832186
1832186->1932187
1932187->2032188
1932187->2032189
2032189->2132190
2132190->2232191
2032189->2132192
1432161->1532193
1532193->1632194
1632194->1732195
1632194->1732196
1732196->1832197
832114->932198
932198->1032199
1032199->1132200
832114->932201
932201->1032202
1032202->1132203
1132203->1232204
1232204->1332205
1032202->1132206
1132206->1232207
1132206->1232208
1232208->1332209
1332209->1432210
1232208->1332211
1332211->1432212
832114->932213
932213->1032214
932213->1032215
932213->1032216
1032216->1132217
932213->1032218
1032218->1132219
1132219->1232220
1232220->1332221
1232220->1332222
832114->932223
932223->1032224
1032224->1132225
1132225->1232226
1232226->1332227
1332227->1432228
1332227->1432229
1032224->1132230
1132230->1232231
1132230->1232232
1232232->1332233
1332233->1432234
1432234->1532235
1432234->1532236
1232232->1332237
1332237->1432238
832114->932239
932239->1032240
1032240->1132241
1132241->1232242
932239->1032243
932239->1032244
1032244->1132245
932239->1032246
1032246->1132247
1132247->1232248
1232248->1332249
1232248->1332250
1332250->1432251
1332250->1432252
1432252->1532253
1432252->1532254
1532254->1632255
832114->932256
932256->1032257
1032257->1132258
1032257->1132259
1132259->1232260
1132259->1232261
1232261->1332262
1232261->1332263
1332263->1432264
1332263->1432265
832114->932266
932266->1032267
1032267->1132268
1032267->1132269
932266->1032270
1032270->1132271
1132271->1232272
1232272->1332273
1332273->1432274
1332273->1432275
1432275->1532276
1532276->1632277
1632277->1732278
1632277->1732279
1532276->1632280
1432275->1532281
1132271->1232282
1232282->1332283
632112->732284
732284->832285
832285->932286
832285->932287
732284->832288
832288->932289
932289->1032290
1032290->1132291
1132291->1232292
1132291->1232293
1232293->1332294
1332294->1432295
1432295->1532296
1532296->1632297
1632297->1732298
1632297->1732299
1532296->1632300
1432295->1532301
1332294->1432302
1232293->1332303
932289->1032304
1032304->1132305
532078->632306
632306->732307
232030->332308
332308->432309
332308->432310
432310->532311
532311->632312
532311->632313
432310->532314
532314->632315
632315->732316
632315->732317
332308->432318
432318->532319
532319->632320
632320->732321
632320->732322
232030->332323
332323->432324
332323->432325
432325->532326
432325->532327
532327->632328
632328->732329
732329->832330
732329->832331
632328->732332
732332->832333
732332->832334
332323->432335
432335->532336
532336->632337
632337->732338
732338->832339
832339->932340
832339->932341
732338->832342
832342->932343
832342->932344
932344->1032345
932344->1032346
532336->632347
632347->732348
732348->832349
732348->832350
632347->732351
732351->832352
832352->932353
932353->1032354
832352->932355
532336->632356
632356->732357
732357->832358
832358->932359
832358->932360
732357->832361
832361->932362
832361->932363
932363->1032364
932363->1032365
532336->632366
632366->732367
732367->832368
732367->832369
632366->732370
732370->832371
832371->932372
932372->1032373
832371->932374
532336->632375
632375->732376
732376->832377
732376->832378
832378->932379
832378->932380
232030->332381
332381->432382
332381->432383
332381->432384
432384->532385
332381->432386
432386->532387
532387->632388
532387->632389
632389->732390
732390->832391
832391->932392
832391->932393
532387->632394
432386->532395
532395->632396
532395->632397
632397->732398
632397->732399
732399->832400
832400->932401
832400->932402
732399->832403
832403->932404
932404->1032405
1032405->1132406
1132406->1232407
1132406->1232408
832403->932409
532395->632410
632410->732411
732411->832412
832412->932413
932413->1032414
832412->932415
932415->1032416
832412->932417
932417->1032418
632410->732419
732419->832420
832420->932421
932421->1032422
832420->932423
832420->932424
432386->532425
532425->632426
632426->732427
532425->632428
532425->632429
632429->732430
632429->732431
532425->632432
632432->732433
732433->832434
832434->932435
932435->1032436
932435->1032437
932435->1032438
1032438->1132439
1032438->1132440
732433->832441
832441->932442
932442->1032443
932442->1032444
732433->832445
832445->932446
932446->1032447
932446->1032448
732433->832449
832449->932450
932450->1032451
932450->1032452
732433->832453
832453->932454
932454->1032455
}

digraph G {
00[label="compilationUnit\n Bud1%@@@@E%DSDB@@@ "]
01[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.bintrie;publicclass_EmptyValueArray<V>extends_ValueArray<V>{public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}}<EOF> "]
12[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.bintrie; "]
23[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie "]
34[label="packageName\n com.hankcs.hanlp.collection.trie "]
45[label="packageName\n com.hankcs.hanlp.collection "]
56[label="packageName\n com.hankcs.hanlp "]
67[label="packageName\n com.hankcs "]
78[label="packageName\n com "]
19[label="normalClassDeclaration\n publicclass_EmptyValueArray<V>extends_ValueArray<V>{public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}} "]
210[label="classModifier\n public "]
211[label="typeParameters\n <V> "]
312[label="typeParameter\n V "]
213[label="superclass\n extends_ValueArray<V> "]
314[label="classType\n _ValueArray<V> "]
415[label="typeArguments\n <V> "]
516[label="classType_lfno_classOrInterfaceType\n V "]
217[label="classBody\n {public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}} "]
318[label="constructorDeclaration\n public_EmptyValueArray(){} "]
419[label="constructorModifier\n public "]
420[label="constructorDeclarator\n _EmptyValueArray() "]
521[label="simpleTypeName\n _EmptyValueArray "]
422[label="constructorBody\n {} "]
323[label="methodDeclaration\n @OverridepublicVnextValue(){returnnull;} "]
424[label="markerAnnotation\n @Override "]
525[label="typeName\n Override "]
426[label="methodModifier\n public "]
427[label="methodHeader\n VnextValue() "]
528[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
529[label="methodDeclarator\n nextValue() "]
430[label="block\n {returnnull;} "]
531[label="returnStatement\n returnnull; "]
632[label="literal\n null "]
033[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.bintrie;publicclass_ValueArray<V>{V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}}<EOF> "]
134[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.bintrie; "]
235[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie "]
336[label="packageName\n com.hankcs.hanlp.collection.trie "]
437[label="packageName\n com.hankcs.hanlp.collection "]
538[label="packageName\n com.hankcs.hanlp "]
639[label="packageName\n com.hankcs "]
740[label="packageName\n com "]
141[label="normalClassDeclaration\n publicclass_ValueArray<V>{V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}} "]
242[label="classModifier\n public "]
243[label="typeParameters\n <V> "]
344[label="typeParameter\n V "]
245[label="classBody\n {V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}} "]
346[label="fieldDeclaration\n V[]value; "]
447[label="unannArrayType\n V[] "]
548[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
549[label="dims\n [] "]
450[label="variableDeclaratorId\n value "]
351[label="fieldDeclaration\n intoffset; "]
452[label="integralType\n int "]
453[label="variableDeclaratorId\n offset "]
354[label="constructorDeclaration\n public_ValueArray(V[]value){this.value=value;} "]
455[label="constructorModifier\n public "]
456[label="constructorDeclarator\n _ValueArray(V[]value) "]
557[label="simpleTypeName\n _ValueArray "]
558[label="formalParameter\n V[]value "]
659[label="unannArrayType\n V[] "]
760[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
761[label="dims\n [] "]
662[label="variableDeclaratorId\n value "]
463[label="constructorBody\n {this.value=value;} "]
564[label="expressionStatement\n this.value=value; "]
665[label="assignment\n this.value=value "]
766[label="fieldAccess\n this.value "]
867[label="primaryNoNewArray_lfno_primary\n this "]
768[label="assignmentOperator\n = "]
769[label="expressionName\n value "]
370[label="methodDeclaration\n publicVnextValue(){returnvalue[offset++];} "]
471[label="methodModifier\n public "]
472[label="methodHeader\n VnextValue() "]
573[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
574[label="methodDeclarator\n nextValue() "]
475[label="block\n {returnvalue[offset++];} "]
576[label="returnStatement\n returnvalue[offset++]; "]
677[label="arrayAccess_lfno_primary\n value[offset++] "]
778[label="expressionName\n value "]
779[label="postfixExpression\n offset++ "]
880[label="expressionName\n offset "]
881[label="postIncrementExpression_lf_postfixExpression\n ++ "]
382[label="constructorDeclaration\n protected_ValueArray(){} "]
483[label="constructorModifier\n protected "]
484[label="constructorDeclarator\n _ValueArray() "]
585[label="simpleTypeName\n _ValueArray "]
486[label="constructorBody\n {} "]
387[label="methodDeclaration\n public_ValueArraysetValue(V[]value){this.value=value;returnthis;} "]
488[label="methodModifier\n public "]
489[label="methodHeader\n _ValueArraysetValue(V[]value) "]
590[label="unannClassType_lfno_unannClassOrInterfaceType\n _ValueArray "]
591[label="methodDeclarator\n setValue(V[]value) "]
692[label="formalParameter\n V[]value "]
793[label="unannArrayType\n V[] "]
894[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
895[label="dims\n [] "]
796[label="variableDeclaratorId\n value "]
497[label="block\n {this.value=value;returnthis;} "]
598[label="blockStatements\n this.value=value;returnthis; "]
699[label="expressionStatement\n this.value=value; "]
7100[label="assignment\n this.value=value "]
8101[label="fieldAccess\n this.value "]
9102[label="primaryNoNewArray_lfno_primary\n this "]
8103[label="assignmentOperator\n = "]
8104[label="expressionName\n value "]
6105[label="returnStatement\n returnthis; "]
7106[label="primaryNoNewArray_lfno_primary\n this "]
0107[label="compilationUnit\n packagecom.hankcs.hanlp.classification.classifiers;importcom.hankcs.hanlp.classification.corpus.Document;importcom.hankcs.hanlp.classification.corpus.IDataSet;importcom.hankcs.hanlp.classification.corpus.MemoryDataSet;importcom.hankcs.hanlp.classification.models.AbstractModel;importcom.hankcs.hanlp.classification.utilities.CollectionUtility;importcom.hankcs.hanlp.classification.utilities.MathUtility;importjava.io.IOException;importjava.util.Map;importjava.util.TreeMap;importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger;publicabstractclassAbstractClassifierimplementsIClassifier{@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}}<EOF> "]
1108[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.classifiers; "]
2109[label="packageName\n com.hankcs.hanlp.classification.classifiers "]
3110[label="packageName\n com.hankcs.hanlp.classification "]
4111[label="packageName\n com.hankcs.hanlp "]
5112[label="packageName\n com.hankcs "]
6113[label="packageName\n com "]
1114[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.Document; "]
2115[label="typeName\n com.hankcs.hanlp.classification.corpus.Document "]
3116[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4117[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5118[label="packageOrTypeName\n com.hankcs.hanlp "]
6119[label="packageOrTypeName\n com.hankcs "]
7120[label="packageOrTypeName\n com "]
1121[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.IDataSet; "]
2122[label="typeName\n com.hankcs.hanlp.classification.corpus.IDataSet "]
3123[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4124[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5125[label="packageOrTypeName\n com.hankcs.hanlp "]
6126[label="packageOrTypeName\n com.hankcs "]
7127[label="packageOrTypeName\n com "]
1128[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.MemoryDataSet; "]
2129[label="typeName\n com.hankcs.hanlp.classification.corpus.MemoryDataSet "]
3130[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4131[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5132[label="packageOrTypeName\n com.hankcs.hanlp "]
6133[label="packageOrTypeName\n com.hankcs "]
7134[label="packageOrTypeName\n com "]
1135[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.models.AbstractModel; "]
2136[label="typeName\n com.hankcs.hanlp.classification.models.AbstractModel "]
3137[label="packageOrTypeName\n com.hankcs.hanlp.classification.models "]
4138[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5139[label="packageOrTypeName\n com.hankcs.hanlp "]
6140[label="packageOrTypeName\n com.hankcs "]
7141[label="packageOrTypeName\n com "]
1142[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.CollectionUtility; "]
2143[label="typeName\n com.hankcs.hanlp.classification.utilities.CollectionUtility "]
3144[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4145[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5146[label="packageOrTypeName\n com.hankcs.hanlp "]
6147[label="packageOrTypeName\n com.hankcs "]
7148[label="packageOrTypeName\n com "]
1149[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.MathUtility; "]
2150[label="typeName\n com.hankcs.hanlp.classification.utilities.MathUtility "]
3151[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4152[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5153[label="packageOrTypeName\n com.hankcs.hanlp "]
6154[label="packageOrTypeName\n com.hankcs "]
7155[label="packageOrTypeName\n com "]
1156[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
2157[label="typeName\n java.io.IOException "]
3158[label="packageOrTypeName\n java.io "]
4159[label="packageOrTypeName\n java "]
1160[label="singleTypeImportDeclaration\n importjava.util.Map; "]
2161[label="typeName\n java.util.Map "]
3162[label="packageOrTypeName\n java.util "]
4163[label="packageOrTypeName\n java "]
1164[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
2165[label="typeName\n java.util.TreeMap "]
3166[label="packageOrTypeName\n java.util "]
4167[label="packageOrTypeName\n java "]
1168[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger; "]
2169[label="typeName\n com.hankcs.hanlp.classification.utilities.Predefine "]
3170[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4171[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5172[label="packageOrTypeName\n com.hankcs.hanlp "]
6173[label="packageOrTypeName\n com.hankcs "]
7174[label="packageOrTypeName\n com "]
1175[label="normalClassDeclaration\n publicabstractclassAbstractClassifierimplementsIClassifier{@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}} "]
2176[label="classModifier\n public "]
2177[label="classModifier\n abstract "]
2178[label="superinterfaces\n implementsIClassifier "]
3179[label="classType\n IClassifier "]
2180[label="classBody\n {@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}} "]
3181[label="methodDeclaration\n @OverridepublicIClassifierenableProbability(booleanenable){returnthis;} "]
4182[label="markerAnnotation\n @Override "]
5183[label="typeName\n Override "]
4184[label="methodModifier\n public "]
4185[label="methodHeader\n IClassifierenableProbability(booleanenable) "]
5186[label="unannClassType_lfno_unannClassOrInterfaceType\n IClassifier "]
5187[label="methodDeclarator\n enableProbability(booleanenable) "]
6188[label="formalParameter\n booleanenable "]
7189[label="unannPrimitiveType\n boolean "]
7190[label="variableDeclaratorId\n enable "]
4191[label="block\n {returnthis;} "]
5192[label="returnStatement\n returnthis; "]
6193[label="primaryNoNewArray_lfno_primary\n this "]
3194[label="fieldDeclaration\n booleanconfigProbabilityEnabled=true; "]
4195[label="unannPrimitiveType\n boolean "]
4196[label="variableDeclarator\n configProbabilityEnabled=true "]
5197[label="variableDeclaratorId\n configProbabilityEnabled "]
5198[label="literal\n true "]
3199[label="methodDeclaration\n @OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);} "]
4200[label="markerAnnotation\n @Override "]
5201[label="typeName\n Override "]
4202[label="methodModifier\n public "]
4203[label="methodHeader\n Stringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException "]
5204[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
5205[label="methodDeclarator\n classify(Stringtext) "]
6206[label="formalParameter\n Stringtext "]
7207[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
7208[label="variableDeclaratorId\n text "]
5209[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6210[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7211[label="classType\n IllegalArgumentException "]
7212[label="classType\n IllegalStateException "]
4213[label="block\n {Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);} "]
5214[label="blockStatements\n Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap); "]
6215[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=predict(text); "]
7216[label="localVariableDeclaration\n Map<String,Double>scoreMap=predict(text) "]
8217[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9218[label="typeArguments\n <String,Double> "]
10219[label="typeArgumentList\n String,Double "]
11220[label="classType_lfno_classOrInterfaceType\n String "]
11221[label="classType_lfno_classOrInterfaceType\n Double "]
8222[label="variableDeclarator\n scoreMap=predict(text) "]
9223[label="variableDeclaratorId\n scoreMap "]
9224[label="methodInvocation_lfno_primary\n predict(text) "]
10225[label="methodName\n predict "]
10226[label="expressionName\n text "]
6227[label="returnStatement\n returnCollectionUtility.max(scoreMap); "]
7228[label="methodInvocation_lfno_primary\n CollectionUtility.max(scoreMap) "]
8229[label="typeName\n CollectionUtility "]
8230[label="expressionName\n scoreMap "]
3231[label="methodDeclaration\n @OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);} "]
4232[label="markerAnnotation\n @Override "]
5233[label="typeName\n Override "]
4234[label="methodModifier\n public "]
4235[label="methodHeader\n Stringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException "]
5236[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
5237[label="methodDeclarator\n classify(Documentdocument) "]
6238[label="formalParameter\n Documentdocument "]
7239[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7240[label="variableDeclaratorId\n document "]
5241[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6242[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7243[label="classType\n IllegalArgumentException "]
7244[label="classType\n IllegalStateException "]
4245[label="block\n {Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);} "]
5246[label="blockStatements\n Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap); "]
6247[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=predict(document); "]
7248[label="localVariableDeclaration\n Map<String,Double>scoreMap=predict(document) "]
8249[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9250[label="typeArguments\n <String,Double> "]
10251[label="typeArgumentList\n String,Double "]
11252[label="classType_lfno_classOrInterfaceType\n String "]
11253[label="classType_lfno_classOrInterfaceType\n Double "]
8254[label="variableDeclarator\n scoreMap=predict(document) "]
9255[label="variableDeclaratorId\n scoreMap "]
9256[label="methodInvocation_lfno_primary\n predict(document) "]
10257[label="methodName\n predict "]
10258[label="expressionName\n document "]
6259[label="returnStatement\n returnCollectionUtility.max(scoreMap); "]
7260[label="methodInvocation_lfno_primary\n CollectionUtility.max(scoreMap) "]
8261[label="typeName\n CollectionUtility "]
8262[label="expressionName\n scoreMap "]
3263[label="methodDeclaration\n @Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);} "]
4264[label="markerAnnotation\n @Override "]
5265[label="typeName\n Override "]
4266[label="methodModifier\n public "]
4267[label="methodHeader\n voidtrain(StringfolderPath,StringcharsetName)throwsIOException "]
5268[label="result\n void "]
5269[label="methodDeclarator\n train(StringfolderPath,StringcharsetName) "]
6270[label="formalParameterList\n StringfolderPath,StringcharsetName "]
7271[label="formalParameter\n StringfolderPath "]
8272[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8273[label="variableDeclaratorId\n folderPath "]
7274[label="formalParameter\n StringcharsetName "]
8275[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8276[label="variableDeclaratorId\n charsetName "]
5277[label="throws_\n throwsIOException "]
6278[label="classType\n IOException "]
4279[label="block\n {IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);} "]
5280[label="blockStatements\n IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet); "]
6281[label="localVariableDeclarationStatement\n IDataSetdataSet=newMemoryDataSet(); "]
7282[label="localVariableDeclaration\n IDataSetdataSet=newMemoryDataSet() "]
8283[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
8284[label="variableDeclarator\n dataSet=newMemoryDataSet() "]
9285[label="variableDeclaratorId\n dataSet "]
9286[label="classInstanceCreationExpression_lfno_primary\n newMemoryDataSet() "]
6287[label="expressionStatement\n dataSet.load(folderPath,charsetName); "]
7288[label="methodInvocation\n dataSet.load(folderPath,charsetName) "]
8289[label="typeName\n dataSet "]
8290[label="argumentList\n folderPath,charsetName "]
9291[label="expressionName\n folderPath "]
9292[label="expressionName\n charsetName "]
6293[label="expressionStatement\n train(dataSet); "]
7294[label="methodInvocation\n train(dataSet) "]
8295[label="methodName\n train "]
8296[label="expressionName\n dataSet "]
3297[label="methodDeclaration\n @Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);} "]
4298[label="markerAnnotation\n @Override "]
5299[label="typeName\n Override "]
4300[label="methodModifier\n public "]
4301[label="methodHeader\n voidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException "]
5302[label="result\n void "]
5303[label="methodDeclarator\n train(Map<String,String[]>trainingDataSet) "]
6304[label="formalParameter\n Map<String,String[]>trainingDataSet "]
7305[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String[]> "]
8306[label="typeArguments\n <String,String[]> "]
9307[label="typeArgumentList\n String,String[] "]
10308[label="classType_lfno_classOrInterfaceType\n String "]
10309[label="arrayType\n String[] "]
11310[label="classType_lfno_classOrInterfaceType\n String "]
11311[label="dims\n [] "]
7312[label="variableDeclaratorId\n trainingDataSet "]
5313[label="throws_\n throwsIllegalArgumentException "]
6314[label="classType\n IllegalArgumentException "]
4315[label="block\n {IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);} "]
5316[label="blockStatements\n IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet); "]
6317[label="localVariableDeclarationStatement\n IDataSetdataSet=newMemoryDataSet(); "]
7318[label="localVariableDeclaration\n IDataSetdataSet=newMemoryDataSet() "]
8319[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
8320[label="variableDeclarator\n dataSet=newMemoryDataSet() "]
9321[label="variableDeclaratorId\n dataSet "]
9322[label="classInstanceCreationExpression_lfno_primary\n newMemoryDataSet() "]
6323[label="expressionStatement\n logger.start(\"正在构造训练数据集...\"); "]
7324[label="methodInvocation\n logger.start(\"正在构造训练数据集...\") "]
8325[label="typeName\n logger "]
8326[label="literal\n \"正在构造训练数据集...\" "]
6327[label="localVariableDeclarationStatement\n inttotal=trainingDataSet.size(); "]
7328[label="localVariableDeclaration\n inttotal=trainingDataSet.size() "]
8329[label="integralType\n int "]
8330[label="variableDeclarator\n total=trainingDataSet.size() "]
9331[label="variableDeclaratorId\n total "]
9332[label="methodInvocation_lfno_primary\n trainingDataSet.size() "]
10333[label="typeName\n trainingDataSet "]
6334[label="localVariableDeclarationStatement\n intcur=0; "]
7335[label="localVariableDeclaration\n intcur=0 "]
8336[label="integralType\n int "]
8337[label="variableDeclarator\n cur=0 "]
9338[label="variableDeclaratorId\n cur "]
9339[label="literal\n 0 "]
6340[label="enhancedForStatement\n for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));} "]
7341[label="unannClassOrInterfaceType\n Map.Entry<String,String[]> "]
8342[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
8343[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String[]> "]
9344[label="typeArguments\n <String,String[]> "]
10345[label="typeArgumentList\n String,String[] "]
11346[label="classType_lfno_classOrInterfaceType\n String "]
11347[label="arrayType\n String[] "]
12348[label="classType_lfno_classOrInterfaceType\n String "]
12349[label="dims\n [] "]
7350[label="variableDeclaratorId\n entry "]
7351[label="methodInvocation_lfno_primary\n trainingDataSet.entrySet() "]
8352[label="typeName\n trainingDataSet "]
7353[label="block\n {Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));} "]
8354[label="blockStatements\n Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)); "]
9355[label="localVariableDeclarationStatement\n Stringcategory=entry.getKey(); "]
10356[label="localVariableDeclaration\n Stringcategory=entry.getKey() "]
11357[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
11358[label="variableDeclarator\n category=entry.getKey() "]
12359[label="variableDeclaratorId\n category "]
12360[label="methodInvocation_lfno_primary\n entry.getKey() "]
13361[label="typeName\n entry "]
9362[label="expressionStatement\n logger.out(\"[%s]...\",category); "]
10363[label="methodInvocation\n logger.out(\"[%s]...\",category) "]
11364[label="typeName\n logger "]
11365[label="argumentList\n \"[%s]...\",category "]
12366[label="literal\n \"[%s]...\" "]
12367[label="expressionName\n category "]
9368[label="enhancedForStatement\n for(Stringdoc:entry.getValue()){dataSet.add(category,doc);} "]
10369[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
10370[label="variableDeclaratorId\n doc "]
10371[label="methodInvocation_lfno_primary\n entry.getValue() "]
11372[label="typeName\n entry "]
10373[label="block\n {dataSet.add(category,doc);} "]
11374[label="expressionStatement\n dataSet.add(category,doc); "]
12375[label="methodInvocation\n dataSet.add(category,doc) "]
13376[label="typeName\n dataSet "]
13377[label="argumentList\n category,doc "]
14378[label="expressionName\n category "]
14379[label="expressionName\n doc "]
9380[label="expressionStatement\n ++cur; "]
10381[label="preIncrementExpression\n ++cur "]
11382[label="expressionName\n cur "]
9383[label="expressionStatement\n logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)); "]
10384[label="methodInvocation\n logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)) "]
11385[label="typeName\n logger "]
11386[label="argumentList\n \"%.2f%%...\",MathUtility.percentage(cur,total) "]
12387[label="literal\n \"%.2f%%...\" "]
12388[label="methodInvocation_lfno_primary\n MathUtility.percentage(cur,total) "]
13389[label="typeName\n MathUtility "]
13390[label="argumentList\n cur,total "]
14391[label="expressionName\n cur "]
14392[label="expressionName\n total "]
6393[label="expressionStatement\n logger.finish(\" 加载完毕\n\"); "]
7394[label="methodInvocation\n logger.finish(\" 加载完毕\n\") "]
8395[label="typeName\n logger "]
8396[label="literal\n \" 加载完毕\n\" "]
6397[label="expressionStatement\n train(dataSet); "]
7398[label="methodInvocation\n train(dataSet) "]
8399[label="methodName\n train "]
8400[label="expressionName\n dataSet "]
3401[label="methodDeclaration\n @Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");} "]
4402[label="markerAnnotation\n @Override "]
5403[label="typeName\n Override "]
4404[label="methodModifier\n public "]
4405[label="methodHeader\n voidtrain(StringfolderPath)throwsIOException "]
5406[label="result\n void "]
5407[label="methodDeclarator\n train(StringfolderPath) "]
6408[label="formalParameter\n StringfolderPath "]
7409[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
7410[label="variableDeclaratorId\n folderPath "]
5411[label="throws_\n throwsIOException "]
6412[label="classType\n IOException "]
4413[label="block\n {train(folderPath,\"UTF-8\");} "]
5414[label="expressionStatement\n train(folderPath,\"UTF-8\"); "]
6415[label="methodInvocation\n train(folderPath,\"UTF-8\") "]
7416[label="methodName\n train "]
7417[label="argumentList\n folderPath,\"UTF-8\" "]
8418[label="expressionName\n folderPath "]
8419[label="literal\n \"UTF-8\" "]
3420[label="methodDeclaration\n @OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;} "]
4421[label="markerAnnotation\n @Override "]
5422[label="typeName\n Override "]
4423[label="methodModifier\n public "]
4424[label="methodHeader\n Map<String,Double>predict(Documentdocument) "]
5425[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
6426[label="typeArguments\n <String,Double> "]
7427[label="typeArgumentList\n String,Double "]
8428[label="classType_lfno_classOrInterfaceType\n String "]
8429[label="classType_lfno_classOrInterfaceType\n Double "]
5430[label="methodDeclarator\n predict(Documentdocument) "]
6431[label="formalParameter\n Documentdocument "]
7432[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7433[label="variableDeclaratorId\n document "]
4434[label="block\n {AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;} "]
5435[label="blockStatements\n AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap; "]
6436[label="localVariableDeclarationStatement\n AbstractModelmodel=getModel(); "]
7437[label="localVariableDeclaration\n AbstractModelmodel=getModel() "]
8438[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractModel "]
8439[label="variableDeclarator\n model=getModel() "]
9440[label="variableDeclaratorId\n model "]
9441[label="methodInvocation_lfno_primary\n getModel() "]
10442[label="methodName\n getModel "]
6443[label="ifThenStatement\n if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
7444[label="equalityExpression\n model==null "]
8445[label="expressionName\n model "]
8446[label="literal\n null "]
7447[label="block\n {thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
8448[label="throwStatement\n thrownewIllegalStateException(\"未训练模型！无法执行预测！\"); "]
9449[label="classInstanceCreationExpression_lfno_primary\n newIllegalStateException(\"未训练模型！无法执行预测！\") "]
10450[label="literal\n \"未训练模型！无法执行预测！\" "]
6451[label="ifThenStatement\n if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");} "]
7452[label="equalityExpression\n document==null "]
8453[label="expressionName\n document "]
8454[label="literal\n null "]
7455[label="block\n {thrownewIllegalArgumentException(\"参数 text == null\");} "]
8456[label="throwStatement\n thrownewIllegalArgumentException(\"参数 text == null\"); "]
9457[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"参数 text == null\") "]
10458[label="literal\n \"参数 text == null\" "]
6459[label="localVariableDeclarationStatement\n double[]probs=categorize(document); "]
7460[label="localVariableDeclaration\n double[]probs=categorize(document) "]
8461[label="unannArrayType\n double[] "]
9462[label="floatingPointType\n double "]
9463[label="dims\n [] "]
8464[label="variableDeclarator\n probs=categorize(document) "]
9465[label="variableDeclaratorId\n probs "]
9466[label="methodInvocation_lfno_primary\n categorize(document) "]
10467[label="methodName\n categorize "]
10468[label="expressionName\n document "]
6469[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=newTreeMap<String,Double>(); "]
7470[label="localVariableDeclaration\n Map<String,Double>scoreMap=newTreeMap<String,Double>() "]
8471[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9472[label="typeArguments\n <String,Double> "]
10473[label="typeArgumentList\n String,Double "]
11474[label="classType_lfno_classOrInterfaceType\n String "]
11475[label="classType_lfno_classOrInterfaceType\n Double "]
8476[label="variableDeclarator\n scoreMap=newTreeMap<String,Double>() "]
9477[label="variableDeclaratorId\n scoreMap "]
9478[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,Double>() "]
10479[label="typeArguments\n <String,Double> "]
11480[label="typeArgumentList\n String,Double "]
12481[label="classType_lfno_classOrInterfaceType\n String "]
12482[label="classType_lfno_classOrInterfaceType\n Double "]
6483[label="basicForStatement\n for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);} "]
7484[label="localVariableDeclaration\n inti=0 "]
8485[label="integralType\n int "]
8486[label="variableDeclarator\n i=0 "]
9487[label="variableDeclaratorId\n i "]
9488[label="literal\n 0 "]
7489[label="relationalExpression\n i<probs.length "]
8490[label="expressionName\n i "]
8491[label="expressionName\n probs.length "]
9492[label="ambiguousName\n probs "]
7493[label="postIncrementExpression\n i++ "]
8494[label="expressionName\n i "]
7495[label="block\n {scoreMap.put(model.catalog[i],probs[i]);} "]
8496[label="expressionStatement\n scoreMap.put(model.catalog[i],probs[i]); "]
9497[label="methodInvocation\n scoreMap.put(model.catalog[i],probs[i]) "]
10498[label="typeName\n scoreMap "]
10499[label="argumentList\n model.catalog[i],probs[i] "]
11500[label="arrayAccess_lfno_primary\n model.catalog[i] "]
12501[label="expressionName\n model.catalog "]
13502[label="ambiguousName\n model "]
12503[label="expressionName\n i "]
11504[label="arrayAccess_lfno_primary\n probs[i] "]
12505[label="expressionName\n probs "]
12506[label="expressionName\n i "]
6507[label="returnStatement\n returnscoreMap; "]
7508[label="expressionName\n scoreMap "]
3509[label="methodDeclaration\n @Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;} "]
4510[label="markerAnnotation\n @Override "]
5511[label="typeName\n Override "]
4512[label="methodModifier\n public "]
4513[label="methodHeader\n intlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException "]
5514[label="integralType\n int "]
5515[label="methodDeclarator\n label(Documentdocument) "]
6516[label="formalParameter\n Documentdocument "]
7517[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7518[label="variableDeclaratorId\n document "]
5519[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6520[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7521[label="classType\n IllegalArgumentException "]
7522[label="classType\n IllegalStateException "]
4523[label="block\n {AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;} "]
5524[label="blockStatements\n AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest; "]
6525[label="localVariableDeclarationStatement\n AbstractModelmodel=getModel(); "]
7526[label="localVariableDeclaration\n AbstractModelmodel=getModel() "]
8527[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractModel "]
8528[label="variableDeclarator\n model=getModel() "]
9529[label="variableDeclaratorId\n model "]
9530[label="methodInvocation_lfno_primary\n getModel() "]
10531[label="methodName\n getModel "]
6532[label="ifThenStatement\n if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
7533[label="equalityExpression\n model==null "]
8534[label="expressionName\n model "]
8535[label="literal\n null "]
7536[label="block\n {thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
8537[label="throwStatement\n thrownewIllegalStateException(\"未训练模型！无法执行预测！\"); "]
9538[label="classInstanceCreationExpression_lfno_primary\n newIllegalStateException(\"未训练模型！无法执行预测！\") "]
10539[label="literal\n \"未训练模型！无法执行预测！\" "]
6540[label="ifThenStatement\n if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");} "]
7541[label="equalityExpression\n document==null "]
8542[label="expressionName\n document "]
8543[label="literal\n null "]
7544[label="block\n {thrownewIllegalArgumentException(\"参数 text == null\");} "]
8545[label="throwStatement\n thrownewIllegalArgumentException(\"参数 text == null\"); "]
9546[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"参数 text == null\") "]
10547[label="literal\n \"参数 text == null\" "]
6548[label="localVariableDeclarationStatement\n double[]probs=categorize(document); "]
7549[label="localVariableDeclaration\n double[]probs=categorize(document) "]
8550[label="unannArrayType\n double[] "]
9551[label="floatingPointType\n double "]
9552[label="dims\n [] "]
8553[label="variableDeclarator\n probs=categorize(document) "]
9554[label="variableDeclaratorId\n probs "]
9555[label="methodInvocation_lfno_primary\n categorize(document) "]
10556[label="methodName\n categorize "]
10557[label="expressionName\n document "]
6558[label="localVariableDeclarationStatement\n doublemax=Double.NEGATIVE_INFINITY; "]
7559[label="localVariableDeclaration\n doublemax=Double.NEGATIVE_INFINITY "]
8560[label="floatingPointType\n double "]
8561[label="variableDeclarator\n max=Double.NEGATIVE_INFINITY "]
9562[label="variableDeclaratorId\n max "]
9563[label="expressionName\n Double.NEGATIVE_INFINITY "]
10564[label="ambiguousName\n Double "]
6565[label="localVariableDeclarationStatement\n intbest=-1; "]
7566[label="localVariableDeclaration\n intbest=-1 "]
8567[label="integralType\n int "]
8568[label="variableDeclarator\n best=-1 "]
9569[label="variableDeclaratorId\n best "]
9570[label="unaryExpression\n -1 "]
10571[label="literal\n 1 "]
6572[label="basicForStatement\n for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}} "]
7573[label="localVariableDeclaration\n inti=0 "]
8574[label="integralType\n int "]
8575[label="variableDeclarator\n i=0 "]
9576[label="variableDeclaratorId\n i "]
9577[label="literal\n 0 "]
7578[label="relationalExpression\n i<probs.length "]
8579[label="expressionName\n i "]
8580[label="expressionName\n probs.length "]
9581[label="ambiguousName\n probs "]
7582[label="postIncrementExpression\n i++ "]
8583[label="expressionName\n i "]
7584[label="block\n {if(probs[i]>max){max=probs[i];best=i;}} "]
8585[label="ifThenStatement\n if(probs[i]>max){max=probs[i];best=i;} "]
9586[label="relationalExpression\n probs[i]>max "]
10587[label="arrayAccess_lfno_primary\n probs[i] "]
11588[label="expressionName\n probs "]
11589[label="expressionName\n i "]
10590[label="expressionName\n max "]
9591[label="block\n {max=probs[i];best=i;} "]
10592[label="blockStatements\n max=probs[i];best=i; "]
11593[label="expressionStatement\n max=probs[i]; "]
12594[label="assignment\n max=probs[i] "]
13595[label="expressionName\n max "]
13596[label="assignmentOperator\n = "]
13597[label="arrayAccess_lfno_primary\n probs[i] "]
14598[label="expressionName\n probs "]
14599[label="expressionName\n i "]
11600[label="expressionStatement\n best=i; "]
12601[label="assignment\n best=i "]
13602[label="expressionName\n best "]
13603[label="assignmentOperator\n = "]
13604[label="expressionName\n i "]
6605[label="returnStatement\n returnbest; "]
7606[label="expressionName\n best "]
0607[label="compilationUnit\n packagecom.hankcs.hanlp.mining.word2vec;importjava.io.IOException;importjava.util.Scanner;publicabstractclassAbstractClosestVectors{staticfinalintN=40;protectedScannerscanner;protectedfinalVectorsReadervectorsReader;protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);}protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;}protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;}protectedabstractResultgetTargetVector();finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}}protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}}}<EOF> "]
1608[label="packageDeclaration\n packagecom.hankcs.hanlp.mining.word2vec; "]
2609[label="packageName\n com.hankcs.hanlp.mining.word2vec "]
3610[label="packageName\n com.hankcs.hanlp.mining "]
4611[label="packageName\n com.hankcs.hanlp "]
5612[label="packageName\n com.hankcs "]
6613[label="packageName\n com "]
1614[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
2615[label="typeName\n java.io.IOException "]
3616[label="packageOrTypeName\n java.io "]
4617[label="packageOrTypeName\n java "]
1618[label="singleTypeImportDeclaration\n importjava.util.Scanner; "]
2619[label="typeName\n java.util.Scanner "]
3620[label="packageOrTypeName\n java.util "]
4621[label="packageOrTypeName\n java "]
1622[label="normalClassDeclaration\n publicabstractclassAbstractClosestVectors{staticfinalintN=40;protectedScannerscanner;protectedfinalVectorsReadervectorsReader;protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);}protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;}protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;}protectedabstractResultgetTargetVector();finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}}protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}}} "]
2623[label="classModifier\n public "]
2624[label="classModifier\n abstract "]
2625[label="classBody\n {staticfinalintN=40;protectedScannerscanner;protectedfinalVectorsReadervectorsReader;protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);}protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;}protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;}protectedabstractResultgetTargetVector();finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}}protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}}} "]
3626[label="fieldDeclaration\n staticfinalintN=40; "]
4627[label="fieldModifier\n static "]
4628[label="fieldModifier\n final "]
4629[label="integralType\n int "]
4630[label="variableDeclarator\n N=40 "]
5631[label="variableDeclaratorId\n N "]
5632[label="literal\n 40 "]
3633[label="fieldDeclaration\n protectedScannerscanner; "]
4634[label="fieldModifier\n protected "]
4635[label="unannClassType_lfno_unannClassOrInterfaceType\n Scanner "]
4636[label="variableDeclaratorId\n scanner "]
3637[label="fieldDeclaration\n protectedfinalVectorsReadervectorsReader; "]
4638[label="fieldModifier\n protected "]
4639[label="fieldModifier\n final "]
4640[label="unannClassType_lfno_unannClassOrInterfaceType\n VectorsReader "]
4641[label="variableDeclaratorId\n vectorsReader "]
3642[label="constructorDeclaration\n protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);} "]
4643[label="constructorModifier\n protected "]
4644[label="constructorDeclarator\n AbstractClosestVectors(Stringfile) "]
5645[label="simpleTypeName\n AbstractClosestVectors "]
5646[label="formalParameter\n Stringfile "]
6647[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
6648[label="variableDeclaratorId\n file "]
4649[label="constructorBody\n {vectorsReader=newVectorsReader(file);} "]
5650[label="expressionStatement\n vectorsReader=newVectorsReader(file); "]
6651[label="assignment\n vectorsReader=newVectorsReader(file) "]
7652[label="expressionName\n vectorsReader "]
7653[label="assignmentOperator\n = "]
7654[label="classInstanceCreationExpression_lfno_primary\n newVectorsReader(file) "]
8655[label="expressionName\n file "]
3656[label="methodDeclaration\n protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;} "]
4657[label="methodModifier\n protected "]
4658[label="methodHeader\n String[]nextWords(intn,Stringmsg) "]
5659[label="unannArrayType\n String[] "]
6660[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
6661[label="dims\n [] "]
5662[label="methodDeclarator\n nextWords(intn,Stringmsg) "]
6663[label="formalParameterList\n intn,Stringmsg "]
7664[label="formalParameter\n intn "]
8665[label="integralType\n int "]
8666[label="variableDeclaratorId\n n "]
7667[label="formalParameter\n Stringmsg "]
8668[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8669[label="variableDeclaratorId\n msg "]
4670[label="block\n {System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;} "]
5671[label="blockStatements\n System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords; "]
6672[label="expressionStatement\n System.out.println(msg+\" ('q' to break): \"); "]
7673[label="methodInvocation\n System.out.println(msg+\" ('q' to break): \") "]
8674[label="typeName\n System.out "]
9675[label="packageOrTypeName\n System "]
8676[label="additiveExpression\n msg+\" ('q' to break): \" "]
9677[label="expressionName\n msg "]
9678[label="literal\n \" ('q' to break): \" "]
6679[label="localVariableDeclarationStatement\n String[]words=newString[n]; "]
7680[label="localVariableDeclaration\n String[]words=newString[n] "]
8681[label="unannArrayType\n String[] "]
9682[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
9683[label="dims\n [] "]
8684[label="variableDeclarator\n words=newString[n] "]
9685[label="variableDeclaratorId\n words "]
9686[label="arrayCreationExpression\n newString[n] "]
10687[label="classType_lfno_classOrInterfaceType\n String "]
10688[label="dimExpr\n [n] "]
11689[label="expressionName\n n "]
6690[label="basicForStatement\n for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;} "]
7691[label="localVariableDeclaration\n inti=0 "]
8692[label="integralType\n int "]
8693[label="variableDeclarator\n i=0 "]
9694[label="variableDeclaratorId\n i "]
9695[label="literal\n 0 "]
7696[label="relationalExpression\n i<n "]
8697[label="expressionName\n i "]
8698[label="expressionName\n n "]
7699[label="postIncrementExpression\n i++ "]
8700[label="expressionName\n i "]
7701[label="block\n {Stringword=nextWord();if(word==null)returnnull;words[i]=word;} "]
8702[label="blockStatements\n Stringword=nextWord();if(word==null)returnnull;words[i]=word; "]
9703[label="localVariableDeclarationStatement\n Stringword=nextWord(); "]
10704[label="localVariableDeclaration\n Stringword=nextWord() "]
11705[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
11706[label="variableDeclarator\n word=nextWord() "]
12707[label="variableDeclaratorId\n word "]
12708[label="methodInvocation_lfno_primary\n nextWord() "]
13709[label="methodName\n nextWord "]
9710[label="ifThenStatement\n if(word==null)returnnull; "]
10711[label="equalityExpression\n word==null "]
11712[label="expressionName\n word "]
11713[label="literal\n null "]
10714[label="returnStatement\n returnnull; "]
11715[label="literal\n null "]
9716[label="expressionStatement\n words[i]=word; "]
10717[label="assignment\n words[i]=word "]
11718[label="arrayAccess\n words[i] "]
12719[label="expressionName\n words "]
12720[label="expressionName\n i "]
11721[label="assignmentOperator\n = "]
11722[label="expressionName\n word "]
6723[label="returnStatement\n returnwords; "]
7724[label="expressionName\n words "]
3725[label="methodDeclaration\n protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;} "]
4726[label="methodModifier\n protected "]
4727[label="methodHeader\n StringnextWord() "]
5728[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
5729[label="methodDeclarator\n nextWord() "]
4730[label="block\n {Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;} "]
5731[label="blockStatements\n Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word; "]
6732[label="localVariableDeclarationStatement\n Stringword=scanner.next(); "]
7733[label="localVariableDeclaration\n Stringword=scanner.next() "]
8734[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8735[label="variableDeclarator\n word=scanner.next() "]
9736[label="variableDeclaratorId\n word "]
9737[label="methodInvocation_lfno_primary\n scanner.next() "]
10738[label="typeName\n scanner "]
6739[label="returnStatement\n returnword==null||word.length()==0||word.equals(\"q\")?null:word; "]
7740[label="conditionalExpression\n word==null||word.length()==0||word.equals(\"q\")?null:word "]
8741[label="conditionalOrExpression\n word==null||word.length()==0||word.equals(\"q\") "]
9742[label="conditionalOrExpression\n word==null||word.length()==0 "]
10743[label="equalityExpression\n word==null "]
11744[label="expressionName\n word "]
11745[label="literal\n null "]
10746[label="equalityExpression\n word.length()==0 "]
11747[label="methodInvocation_lfno_primary\n word.length() "]
12748[label="typeName\n word "]
11749[label="literal\n 0 "]
9750[label="methodInvocation_lfno_primary\n word.equals(\"q\") "]
10751[label="typeName\n word "]
10752[label="literal\n \"q\" "]
8753[label="literal\n null "]
8754[label="expressionName\n word "]
3755[label="methodDeclaration\n protectedabstractResultgetTargetVector(); "]
4756[label="methodModifier\n protected "]
4757[label="methodModifier\n abstract "]
4758[label="methodHeader\n ResultgetTargetVector() "]
5759[label="unannClassType_lfno_unannClassOrInterfaceType\n Result "]
5760[label="methodDeclarator\n getTargetVector() "]
4761[label="methodBody\n ; "]
3762[label="methodDeclaration\n finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}} "]
4763[label="methodModifier\n final "]
4764[label="methodModifier\n protected "]
4765[label="methodHeader\n voidexecute()throwsIOException "]
5766[label="result\n void "]
5767[label="methodDeclarator\n execute() "]
5768[label="throws_\n throwsIOException "]
6769[label="classType\n IOException "]
4770[label="block\n {vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}} "]
5771[label="blockStatements\n vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();} "]
6772[label="expressionStatement\n vectorsReader.readVectorFile(); "]
7773[label="methodInvocation\n vectorsReader.readVectorFile() "]
8774[label="typeName\n vectorsReader "]
6775[label="localVariableDeclarationStatement\n finalintwords=vectorsReader.getNumWords(); "]
7776[label="localVariableDeclaration\n finalintwords=vectorsReader.getNumWords() "]
8777[label="variableModifier\n final "]
8778[label="integralType\n int "]
8779[label="variableDeclarator\n words=vectorsReader.getNumWords() "]
9780[label="variableDeclaratorId\n words "]
9781[label="methodInvocation_lfno_primary\n vectorsReader.getNumWords() "]
10782[label="typeName\n vectorsReader "]
6783[label="localVariableDeclarationStatement\n finalintsize=vectorsReader.getSize(); "]
7784[label="localVariableDeclaration\n finalintsize=vectorsReader.getSize() "]
8785[label="variableModifier\n final "]
8786[label="integralType\n int "]
8787[label="variableDeclarator\n size=vectorsReader.getSize() "]
9788[label="variableDeclaratorId\n size "]
9789[label="methodInvocation_lfno_primary\n vectorsReader.getSize() "]
10790[label="typeName\n vectorsReader "]
6791[label="tryStatement\n try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();} "]
7792[label="block\n {scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}} "]
8793[label="blockStatements\n scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);} "]
9794[label="expressionStatement\n scanner=newScanner(System.in); "]
10795[label="assignment\n scanner=newScanner(System.in) "]
11796[label="expressionName\n scanner "]
11797[label="assignmentOperator\n = "]
11798[label="classInstanceCreationExpression_lfno_primary\n newScanner(System.in) "]
12799[label="expressionName\n System.in "]
13800[label="ambiguousName\n System "]
9801[label="localVariableDeclarationStatement\n Resultresult=null; "]
10802[label="localVariableDeclaration\n Resultresult=null "]
11803[label="unannClassType_lfno_unannClassOrInterfaceType\n Result "]
11804[label="variableDeclarator\n result=null "]
12805[label="variableDeclaratorId\n result "]
12806[label="literal\n null "]
9807[label="whileStatement\n while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);} "]
10808[label="equalityExpression\n (result=getTargetVector())!=null "]
11809[label="primaryNoNewArray_lfno_primary\n (result=getTargetVector()) "]
12810[label="assignment\n result=getTargetVector() "]
13811[label="expressionName\n result "]
13812[label="assignmentOperator\n = "]
13813[label="methodInvocation_lfno_primary\n getTargetVector() "]
14814[label="methodName\n getTargetVector "]
11815[label="literal\n null "]
10816[label="block\n {double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);} "]
11817[label="blockStatements\n double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]); "]
12818[label="localVariableDeclarationStatement\n double[]bestd=newdouble[N]; "]
13819[label="localVariableDeclaration\n double[]bestd=newdouble[N] "]
14820[label="unannArrayType\n double[] "]
15821[label="floatingPointType\n double "]
15822[label="dims\n [] "]
14823[label="variableDeclarator\n bestd=newdouble[N] "]
15824[label="variableDeclaratorId\n bestd "]
15825[label="arrayCreationExpression\n newdouble[N] "]
16826[label="floatingPointType\n double "]
16827[label="dimExpr\n [N] "]
17828[label="expressionName\n N "]
12829[label="localVariableDeclarationStatement\n String[]bestw=newString[N]; "]
13830[label="localVariableDeclaration\n String[]bestw=newString[N] "]
14831[label="unannArrayType\n String[] "]
15832[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
15833[label="dims\n [] "]
14834[label="variableDeclarator\n bestw=newString[N] "]
15835[label="variableDeclaratorId\n bestw "]
15836[label="arrayCreationExpression\n newString[N] "]
16837[label="classType_lfno_classOrInterfaceType\n String "]
16838[label="dimExpr\n [N] "]
17839[label="expressionName\n N "]
12840[label="labeledStatement\n next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}} "]
13841[label="basicForStatement\n for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}} "]
14842[label="localVariableDeclaration\n inti=0 "]
15843[label="integralType\n int "]
15844[label="variableDeclarator\n i=0 "]
16845[label="variableDeclaratorId\n i "]
16846[label="literal\n 0 "]
14847[label="relationalExpression\n i<words "]
15848[label="expressionName\n i "]
15849[label="expressionName\n words "]
14850[label="postIncrementExpression\n i++ "]
15851[label="expressionName\n i "]
14852[label="block\n {for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}} "]
15853[label="blockStatements\n for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}} "]
16854[label="enhancedForStatement\n for(intbi:result.bi){if(i==bi)continuenext_word;} "]
17855[label="integralType\n int "]
17856[label="variableDeclaratorId\n bi "]
17857[label="expressionName\n result.bi "]
18858[label="ambiguousName\n result "]
17859[label="block\n {if(i==bi)continuenext_word;} "]
18860[label="ifThenStatement\n if(i==bi)continuenext_word; "]
19861[label="equalityExpression\n i==bi "]
20862[label="expressionName\n i "]
20863[label="expressionName\n bi "]
19864[label="continueStatement\n continuenext_word; "]
16865[label="localVariableDeclarationStatement\n doubledist=0; "]
17866[label="localVariableDeclaration\n doubledist=0 "]
18867[label="floatingPointType\n double "]
18868[label="variableDeclarator\n dist=0 "]
19869[label="variableDeclaratorId\n dist "]
19870[label="literal\n 0 "]
16871[label="basicForStatement\n for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);} "]
17872[label="localVariableDeclaration\n intj=0 "]
18873[label="integralType\n int "]
18874[label="variableDeclarator\n j=0 "]
19875[label="variableDeclaratorId\n j "]
19876[label="literal\n 0 "]
17877[label="relationalExpression\n j<size "]
18878[label="expressionName\n j "]
18879[label="expressionName\n size "]
17880[label="postIncrementExpression\n j++ "]
18881[label="expressionName\n j "]
17882[label="block\n {dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);} "]
18883[label="expressionStatement\n dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j); "]
19884[label="assignment\n dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j) "]
20885[label="expressionName\n dist "]
20886[label="assignmentOperator\n += "]
20887[label="multiplicativeExpression\n result.vec[j]*vectorsReader.getMatrixElement(i,j) "]
21888[label="arrayAccess_lfno_primary\n result.vec[j] "]
22889[label="expressionName\n result.vec "]
23890[label="ambiguousName\n result "]
22891[label="expressionName\n j "]
21892[label="methodInvocation_lfno_primary\n vectorsReader.getMatrixElement(i,j) "]
22893[label="typeName\n vectorsReader "]
22894[label="argumentList\n i,j "]
23895[label="expressionName\n i "]
23896[label="expressionName\n j "]
16897[label="basicForStatement\n for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}} "]
17898[label="localVariableDeclaration\n intj=0 "]
18899[label="integralType\n int "]
18900[label="variableDeclarator\n j=0 "]
19901[label="variableDeclaratorId\n j "]
19902[label="literal\n 0 "]
17903[label="relationalExpression\n j<N "]
18904[label="expressionName\n j "]
18905[label="expressionName\n N "]
17906[label="postIncrementExpression\n j++ "]
18907[label="expressionName\n j "]
17908[label="block\n {if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}} "]
18909[label="ifThenStatement\n if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;} "]
19910[label="relationalExpression\n dist>bestd[j] "]
20911[label="expressionName\n dist "]
20912[label="arrayAccess_lfno_primary\n bestd[j] "]
21913[label="expressionName\n bestd "]
21914[label="expressionName\n j "]
19915[label="block\n {for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;} "]
20916[label="blockStatements\n for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break; "]
21917[label="basicForStatement\n for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];} "]
22918[label="localVariableDeclaration\n intk=N-1 "]
23919[label="integralType\n int "]
23920[label="variableDeclarator\n k=N-1 "]
24921[label="variableDeclaratorId\n k "]
24922[label="additiveExpression\n N-1 "]
25923[label="expressionName\n N "]
25924[label="literal\n 1 "]
22925[label="relationalExpression\n k>j "]
23926[label="expressionName\n k "]
23927[label="expressionName\n j "]
22928[label="postDecrementExpression\n k-- "]
23929[label="expressionName\n k "]
22930[label="block\n {bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];} "]
23931[label="blockStatements\n bestd[k]=bestd[k-1];bestw[k]=bestw[k-1]; "]
24932[label="expressionStatement\n bestd[k]=bestd[k-1]; "]
25933[label="assignment\n bestd[k]=bestd[k-1] "]
26934[label="arrayAccess\n bestd[k] "]
27935[label="expressionName\n bestd "]
27936[label="expressionName\n k "]
26937[label="assignmentOperator\n = "]
26938[label="arrayAccess_lfno_primary\n bestd[k-1] "]
27939[label="expressionName\n bestd "]
27940[label="additiveExpression\n k-1 "]
28941[label="expressionName\n k "]
28942[label="literal\n 1 "]
24943[label="expressionStatement\n bestw[k]=bestw[k-1]; "]
25944[label="assignment\n bestw[k]=bestw[k-1] "]
26945[label="arrayAccess\n bestw[k] "]
27946[label="expressionName\n bestw "]
27947[label="expressionName\n k "]
26948[label="assignmentOperator\n = "]
26949[label="arrayAccess_lfno_primary\n bestw[k-1] "]
27950[label="expressionName\n bestw "]
27951[label="additiveExpression\n k-1 "]
28952[label="expressionName\n k "]
28953[label="literal\n 1 "]
21954[label="expressionStatement\n bestd[j]=dist; "]
22955[label="assignment\n bestd[j]=dist "]
23956[label="arrayAccess\n bestd[j] "]
24957[label="expressionName\n bestd "]
24958[label="expressionName\n j "]
23959[label="assignmentOperator\n = "]
23960[label="expressionName\n dist "]
21961[label="expressionStatement\n bestw[j]=vectorsReader.getWord(i); "]
22962[label="assignment\n bestw[j]=vectorsReader.getWord(i) "]
23963[label="arrayAccess\n bestw[j] "]
24964[label="expressionName\n bestw "]
24965[label="expressionName\n j "]
23966[label="assignmentOperator\n = "]
23967[label="methodInvocation_lfno_primary\n vectorsReader.getWord(i) "]
24968[label="typeName\n vectorsReader "]
24969[label="expressionName\n i "]
21970[label="breakStatement\n break; "]
12971[label="expressionStatement\n System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\"); "]
13972[label="methodInvocation\n System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\") "]
14973[label="typeName\n System.out "]
15974[label="packageOrTypeName\n System "]
14975[label="literal\n \"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\" "]
12976[label="basicForStatement\n for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]); "]
13977[label="localVariableDeclaration\n intj=0 "]
14978[label="integralType\n int "]
14979[label="variableDeclarator\n j=0 "]
15980[label="variableDeclaratorId\n j "]
15981[label="literal\n 0 "]
13982[label="relationalExpression\n j<N "]
14983[label="expressionName\n j "]
14984[label="expressionName\n N "]
13985[label="postIncrementExpression\n j++ "]
14986[label="expressionName\n j "]
13987[label="expressionStatement\n System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]); "]
14988[label="methodInvocation\n System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]) "]
15989[label="typeName\n System.out "]
16990[label="packageOrTypeName\n System "]
15991[label="argumentList\n \"%50s\t\t%f\n\",bestw[j],bestd[j] "]
16992[label="literal\n \"%50s\t\t%f\n\" "]
16993[label="arrayAccess_lfno_primary\n bestw[j] "]
17994[label="expressionName\n bestw "]
17995[label="expressionName\n j "]
16996[label="arrayAccess_lfno_primary\n bestd[j] "]
17997[label="expressionName\n bestd "]
17998[label="expressionName\n j "]
7999[label="finally_\n finally{scanner.close();} "]
81000[label="block\n {scanner.close();} "]
91001[label="expressionStatement\n scanner.close(); "]
101002[label="methodInvocation\n scanner.close() "]
111003[label="typeName\n scanner "]
31004[label="normalClassDeclaration\n protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}} "]
41005[label="classModifier\n protected "]
41006[label="classModifier\n static "]
41007[label="classBody\n {float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}} "]
51008[label="fieldDeclaration\n float[]vec; "]
61009[label="unannArrayType\n float[] "]
71010[label="floatingPointType\n float "]
71011[label="dims\n [] "]
61012[label="variableDeclaratorId\n vec "]
51013[label="fieldDeclaration\n int[]bi; "]
61014[label="unannArrayType\n int[] "]
71015[label="integralType\n int "]
71016[label="dims\n [] "]
61017[label="variableDeclaratorId\n bi "]
51018[label="constructorDeclaration\n publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;} "]
61019[label="constructorModifier\n public "]
61020[label="constructorDeclarator\n Result(float[]vec,int[]bi) "]
71021[label="simpleTypeName\n Result "]
71022[label="formalParameterList\n float[]vec,int[]bi "]
81023[label="formalParameter\n float[]vec "]
91024[label="unannArrayType\n float[] "]
101025[label="floatingPointType\n float "]
101026[label="dims\n [] "]
91027[label="variableDeclaratorId\n vec "]
81028[label="formalParameter\n int[]bi "]
91029[label="unannArrayType\n int[] "]
101030[label="integralType\n int "]
101031[label="dims\n [] "]
91032[label="variableDeclaratorId\n bi "]
61033[label="constructorBody\n {this.vec=vec;this.bi=bi;} "]
71034[label="blockStatements\n this.vec=vec;this.bi=bi; "]
81035[label="expressionStatement\n this.vec=vec; "]
91036[label="assignment\n this.vec=vec "]
101037[label="fieldAccess\n this.vec "]
111038[label="primaryNoNewArray_lfno_primary\n this "]
101039[label="assignmentOperator\n = "]
101040[label="expressionName\n vec "]
81041[label="expressionStatement\n this.bi=bi; "]
91042[label="assignment\n this.bi=bi "]
101043[label="fieldAccess\n this.bi "]
111044[label="primaryNoNewArray_lfno_primary\n this "]
101045[label="assignmentOperator\n = "]
101046[label="expressionName\n bi "]
01047[label="compilationUnit\n packagecom.hankcs.hanlp.classification.corpus;importcom.hankcs.hanlp.classification.models.AbstractModel;importcom.hankcs.hanlp.classification.tokenizers.BigramTokenizer;importcom.hankcs.hanlp.classification.tokenizers.HanLPTokenizer;importcom.hankcs.hanlp.classification.tokenizers.ITokenizer;importcom.hankcs.hanlp.classification.utilities.MathUtility;importcom.hankcs.hanlp.classification.utilities.TextProcessUtility;importjava.io.File;importjava.io.IOException;importjava.util.Map;importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger;publicabstractclassAbstractDataSetimplementsIDataSet{protectedITokenizertokenizer;protectedCatalogcatalog;protectedLexiconlexicon;protectedbooleantestingDataSet;publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;}publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();}publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;}publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);}publicITokenizergetTokenizer(){returntokenizer;}publicCataloggetCatalog(){returncatalog;}publicLexicongetLexicon(){returnlexicon;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);}@OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");}@OverridepublicbooleanisTestingDataSet(){returntestingDataSet;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;}@OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;}@OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;}}<EOF> "]
11048[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.corpus; "]
21049[label="packageName\n com.hankcs.hanlp.classification.corpus "]
31050[label="packageName\n com.hankcs.hanlp.classification "]
41051[label="packageName\n com.hankcs.hanlp "]
51052[label="packageName\n com.hankcs "]
61053[label="packageName\n com "]
11054[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.models.AbstractModel; "]
21055[label="typeName\n com.hankcs.hanlp.classification.models.AbstractModel "]
31056[label="packageOrTypeName\n com.hankcs.hanlp.classification.models "]
41057[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51058[label="packageOrTypeName\n com.hankcs.hanlp "]
61059[label="packageOrTypeName\n com.hankcs "]
71060[label="packageOrTypeName\n com "]
11061[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.BigramTokenizer; "]
21062[label="typeName\n com.hankcs.hanlp.classification.tokenizers.BigramTokenizer "]
31063[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
41064[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51065[label="packageOrTypeName\n com.hankcs.hanlp "]
61066[label="packageOrTypeName\n com.hankcs "]
71067[label="packageOrTypeName\n com "]
11068[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.HanLPTokenizer; "]
21069[label="typeName\n com.hankcs.hanlp.classification.tokenizers.HanLPTokenizer "]
31070[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
41071[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51072[label="packageOrTypeName\n com.hankcs.hanlp "]
61073[label="packageOrTypeName\n com.hankcs "]
71074[label="packageOrTypeName\n com "]
11075[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.ITokenizer; "]
21076[label="typeName\n com.hankcs.hanlp.classification.tokenizers.ITokenizer "]
31077[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
41078[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51079[label="packageOrTypeName\n com.hankcs.hanlp "]
61080[label="packageOrTypeName\n com.hankcs "]
71081[label="packageOrTypeName\n com "]
11082[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.MathUtility; "]
21083[label="typeName\n com.hankcs.hanlp.classification.utilities.MathUtility "]
31084[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
41085[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51086[label="packageOrTypeName\n com.hankcs.hanlp "]
61087[label="packageOrTypeName\n com.hankcs "]
71088[label="packageOrTypeName\n com "]
11089[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.TextProcessUtility; "]
21090[label="typeName\n com.hankcs.hanlp.classification.utilities.TextProcessUtility "]
31091[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
41092[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51093[label="packageOrTypeName\n com.hankcs.hanlp "]
61094[label="packageOrTypeName\n com.hankcs "]
71095[label="packageOrTypeName\n com "]
11096[label="singleTypeImportDeclaration\n importjava.io.File; "]
21097[label="typeName\n java.io.File "]
31098[label="packageOrTypeName\n java.io "]
41099[label="packageOrTypeName\n java "]
11100[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
21101[label="typeName\n java.io.IOException "]
31102[label="packageOrTypeName\n java.io "]
41103[label="packageOrTypeName\n java "]
11104[label="singleTypeImportDeclaration\n importjava.util.Map; "]
21105[label="typeName\n java.util.Map "]
31106[label="packageOrTypeName\n java.util "]
41107[label="packageOrTypeName\n java "]
11108[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger; "]
21109[label="typeName\n com.hankcs.hanlp.classification.utilities.Predefine "]
31110[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
41111[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51112[label="packageOrTypeName\n com.hankcs.hanlp "]
61113[label="packageOrTypeName\n com.hankcs "]
71114[label="packageOrTypeName\n com "]
11115[label="normalClassDeclaration\n publicabstractclassAbstractDataSetimplementsIDataSet{protectedITokenizertokenizer;protectedCatalogcatalog;protectedLexiconlexicon;protectedbooleantestingDataSet;publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;}publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();}publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;}publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);}publicITokenizergetTokenizer(){returntokenizer;}publicCataloggetCatalog(){returncatalog;}publicLexicongetLexicon(){returnlexicon;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);}@OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");}@OverridepublicbooleanisTestingDataSet(){returntestingDataSet;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;}@OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;}@OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;}} "]
21116[label="classModifier\n public "]
21117[label="classModifier\n abstract "]
21118[label="superinterfaces\n implementsIDataSet "]
31119[label="classType\n IDataSet "]
21120[label="classBody\n {protectedITokenizertokenizer;protectedCatalogcatalog;protectedLexiconlexicon;protectedbooleantestingDataSet;publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;}publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();}publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;}publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);}publicITokenizergetTokenizer(){returntokenizer;}publicCataloggetCatalog(){returncatalog;}publicLexicongetLexicon(){returnlexicon;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);}@OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");}@OverridepublicbooleanisTestingDataSet(){returntestingDataSet;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;}@OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;}@OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;}} "]
31121[label="fieldDeclaration\n protectedITokenizertokenizer; "]
41122[label="fieldModifier\n protected "]
41123[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
41124[label="variableDeclaratorId\n tokenizer "]
31125[label="fieldDeclaration\n protectedCatalogcatalog; "]
41126[label="fieldModifier\n protected "]
41127[label="unannClassType_lfno_unannClassOrInterfaceType\n Catalog "]
41128[label="variableDeclaratorId\n catalog "]
31129[label="fieldDeclaration\n protectedLexiconlexicon; "]
41130[label="fieldModifier\n protected "]
41131[label="unannClassType_lfno_unannClassOrInterfaceType\n Lexicon "]
41132[label="variableDeclaratorId\n lexicon "]
31133[label="fieldDeclaration\n protectedbooleantestingDataSet; "]
41134[label="fieldModifier\n protected "]
41135[label="unannPrimitiveType\n boolean "]
41136[label="variableDeclaratorId\n testingDataSet "]
31137[label="constructorDeclaration\n publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;} "]
41138[label="constructorModifier\n public "]
41139[label="constructorDeclarator\n AbstractDataSet(AbstractModelmodel) "]
51140[label="simpleTypeName\n AbstractDataSet "]
51141[label="formalParameter\n AbstractModelmodel "]
61142[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractModel "]
61143[label="variableDeclaratorId\n model "]
41144[label="constructorBody\n {lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;} "]
51145[label="blockStatements\n lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true; "]
61146[label="expressionStatement\n lexicon=newLexicon(model.wordIdTrie); "]
71147[label="assignment\n lexicon=newLexicon(model.wordIdTrie) "]
81148[label="expressionName\n lexicon "]
81149[label="assignmentOperator\n = "]
81150[label="classInstanceCreationExpression_lfno_primary\n newLexicon(model.wordIdTrie) "]
91151[label="expressionName\n model.wordIdTrie "]
101152[label="ambiguousName\n model "]
61153[label="expressionStatement\n tokenizer=model.tokenizer; "]
71154[label="assignment\n tokenizer=model.tokenizer "]
81155[label="expressionName\n tokenizer "]
81156[label="assignmentOperator\n = "]
81157[label="expressionName\n model.tokenizer "]
91158[label="ambiguousName\n model "]
61159[label="expressionStatement\n catalog=newCatalog(model.catalog); "]
71160[label="assignment\n catalog=newCatalog(model.catalog) "]
81161[label="expressionName\n catalog "]
81162[label="assignmentOperator\n = "]
81163[label="classInstanceCreationExpression_lfno_primary\n newCatalog(model.catalog) "]
91164[label="expressionName\n model.catalog "]
101165[label="ambiguousName\n model "]
61166[label="expressionStatement\n testingDataSet=true; "]
71167[label="assignment\n testingDataSet=true "]
81168[label="expressionName\n testingDataSet "]
81169[label="assignmentOperator\n = "]
81170[label="literal\n true "]
31171[label="constructorDeclaration\n publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();} "]
41172[label="constructorModifier\n public "]
41173[label="constructorDeclarator\n AbstractDataSet() "]
51174[label="simpleTypeName\n AbstractDataSet "]
41175[label="constructorBody\n {tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();} "]
51176[label="blockStatements\n tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon(); "]
61177[label="expressionStatement\n tokenizer=newHanLPTokenizer(); "]
71178[label="assignment\n tokenizer=newHanLPTokenizer() "]
81179[label="expressionName\n tokenizer "]
81180[label="assignmentOperator\n = "]
81181[label="classInstanceCreationExpression_lfno_primary\n newHanLPTokenizer() "]
61182[label="expressionStatement\n catalog=newCatalog(); "]
71183[label="assignment\n catalog=newCatalog() "]
81184[label="expressionName\n catalog "]
81185[label="assignmentOperator\n = "]
81186[label="classInstanceCreationExpression_lfno_primary\n newCatalog() "]
61187[label="expressionStatement\n lexicon=newLexicon(); "]
71188[label="assignment\n lexicon=newLexicon() "]
81189[label="expressionName\n lexicon "]
81190[label="assignmentOperator\n = "]
81191[label="classInstanceCreationExpression_lfno_primary\n newLexicon() "]
31192[label="methodDeclaration\n publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;} "]
41193[label="methodModifier\n public "]
41194[label="methodHeader\n IDataSetsetTokenizer(ITokenizertokenizer) "]
51195[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51196[label="methodDeclarator\n setTokenizer(ITokenizertokenizer) "]
61197[label="formalParameter\n ITokenizertokenizer "]
71198[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
71199[label="variableDeclaratorId\n tokenizer "]
41200[label="block\n {this.tokenizer=tokenizer;returnthis;} "]
51201[label="blockStatements\n this.tokenizer=tokenizer;returnthis; "]
61202[label="expressionStatement\n this.tokenizer=tokenizer; "]
71203[label="assignment\n this.tokenizer=tokenizer "]
81204[label="fieldAccess\n this.tokenizer "]
91205[label="primaryNoNewArray_lfno_primary\n this "]
81206[label="assignmentOperator\n = "]
81207[label="expressionName\n tokenizer "]
61208[label="returnStatement\n returnthis; "]
71209[label="primaryNoNewArray_lfno_primary\n this "]
31210[label="methodDeclaration\n publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);} "]
41211[label="methodModifier\n public "]
41212[label="methodHeader\n Documentconvert(Stringcategory,Stringtext) "]
51213[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
51214[label="methodDeclarator\n convert(Stringcategory,Stringtext) "]
61215[label="formalParameterList\n Stringcategory,Stringtext "]
71216[label="formalParameter\n Stringcategory "]
81217[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81218[label="variableDeclaratorId\n category "]
71219[label="formalParameter\n Stringtext "]
81220[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81221[label="variableDeclaratorId\n text "]
41222[label="block\n {String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);} "]
51223[label="blockStatements\n String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray); "]
61224[label="localVariableDeclarationStatement\n String[]tokenArray=tokenizer.segment(text); "]
71225[label="localVariableDeclaration\n String[]tokenArray=tokenizer.segment(text) "]
81226[label="unannArrayType\n String[] "]
91227[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91228[label="dims\n [] "]
81229[label="variableDeclarator\n tokenArray=tokenizer.segment(text) "]
91230[label="variableDeclaratorId\n tokenArray "]
91231[label="methodInvocation_lfno_primary\n tokenizer.segment(text) "]
101232[label="typeName\n tokenizer "]
101233[label="expressionName\n text "]
61234[label="returnStatement\n returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray); "]
71235[label="conditionalExpression\n testingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray) "]
81236[label="expressionName\n testingDataSet "]
81237[label="classInstanceCreationExpression_lfno_primary\n newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray) "]
91238[label="argumentList\n catalog.categoryId,lexicon.wordId,category,tokenArray "]
101239[label="expressionName\n catalog.categoryId "]
111240[label="ambiguousName\n catalog "]
101241[label="expressionName\n lexicon.wordId "]
111242[label="ambiguousName\n lexicon "]
101243[label="expressionName\n category "]
101244[label="expressionName\n tokenArray "]
81245[label="classInstanceCreationExpression_lfno_primary\n newDocument(catalog,lexicon,category,tokenArray) "]
91246[label="argumentList\n catalog,lexicon,category,tokenArray "]
101247[label="expressionName\n catalog "]
101248[label="expressionName\n lexicon "]
101249[label="expressionName\n category "]
101250[label="expressionName\n tokenArray "]
31251[label="methodDeclaration\n publicITokenizergetTokenizer(){returntokenizer;} "]
41252[label="methodModifier\n public "]
41253[label="methodHeader\n ITokenizergetTokenizer() "]
51254[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
51255[label="methodDeclarator\n getTokenizer() "]
41256[label="block\n {returntokenizer;} "]
51257[label="returnStatement\n returntokenizer; "]
61258[label="expressionName\n tokenizer "]
31259[label="methodDeclaration\n publicCataloggetCatalog(){returncatalog;} "]
41260[label="methodModifier\n public "]
41261[label="methodHeader\n CataloggetCatalog() "]
51262[label="unannClassType_lfno_unannClassOrInterfaceType\n Catalog "]
51263[label="methodDeclarator\n getCatalog() "]
41264[label="block\n {returncatalog;} "]
51265[label="returnStatement\n returncatalog; "]
61266[label="expressionName\n catalog "]
31267[label="methodDeclaration\n publicLexicongetLexicon(){returnlexicon;} "]
41268[label="methodModifier\n public "]
41269[label="methodHeader\n LexicongetLexicon() "]
51270[label="unannClassType_lfno_unannClassOrInterfaceType\n Lexicon "]
51271[label="methodDeclarator\n getLexicon() "]
41272[label="block\n {returnlexicon;} "]
51273[label="returnStatement\n returnlexicon; "]
61274[label="expressionName\n lexicon "]
31275[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);} "]
41276[label="markerAnnotation\n @Override "]
51277[label="typeName\n Override "]
41278[label="methodModifier\n public "]
41279[label="methodHeader\n IDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException "]
51280[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51281[label="methodDeclarator\n load(StringfolderPath,StringcharsetName) "]
61282[label="formalParameterList\n StringfolderPath,StringcharsetName "]
71283[label="formalParameter\n StringfolderPath "]
81284[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81285[label="variableDeclaratorId\n folderPath "]
71286[label="formalParameter\n StringcharsetName "]
81287[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81288[label="variableDeclaratorId\n charsetName "]
51289[label="throws_\n throwsIllegalArgumentException,IOException "]
61290[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71291[label="classType\n IllegalArgumentException "]
71292[label="classType\n IOException "]
41293[label="block\n {returnload(folderPath,charsetName,1.);} "]
51294[label="returnStatement\n returnload(folderPath,charsetName,1.); "]
61295[label="methodInvocation_lfno_primary\n load(folderPath,charsetName,1.) "]
71296[label="methodName\n load "]
71297[label="argumentList\n folderPath,charsetName,1. "]
81298[label="expressionName\n folderPath "]
81299[label="expressionName\n charsetName "]
81300[label="literal\n 1. "]
31301[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");} "]
41302[label="markerAnnotation\n @Override "]
51303[label="typeName\n Override "]
41304[label="methodModifier\n public "]
41305[label="methodHeader\n IDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException "]
51306[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51307[label="methodDeclarator\n load(StringfolderPath) "]
61308[label="formalParameter\n StringfolderPath "]
71309[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
71310[label="variableDeclaratorId\n folderPath "]
51311[label="throws_\n throwsIllegalArgumentException,IOException "]
61312[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71313[label="classType\n IllegalArgumentException "]
71314[label="classType\n IOException "]
41315[label="block\n {returnload(folderPath,\"UTF-8\");} "]
51316[label="returnStatement\n returnload(folderPath,\"UTF-8\"); "]
61317[label="methodInvocation_lfno_primary\n load(folderPath,\"UTF-8\") "]
71318[label="methodName\n load "]
71319[label="argumentList\n folderPath,\"UTF-8\" "]
81320[label="expressionName\n folderPath "]
81321[label="literal\n \"UTF-8\" "]
31322[label="methodDeclaration\n @OverridepublicbooleanisTestingDataSet(){returntestingDataSet;} "]
41323[label="markerAnnotation\n @Override "]
51324[label="typeName\n Override "]
41325[label="methodModifier\n public "]
41326[label="methodHeader\n booleanisTestingDataSet() "]
51327[label="unannPrimitiveType\n boolean "]
51328[label="methodDeclarator\n isTestingDataSet() "]
41329[label="block\n {returntestingDataSet;} "]
51330[label="returnStatement\n returntestingDataSet; "]
61331[label="expressionName\n testingDataSet "]
31332[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;} "]
41333[label="markerAnnotation\n @Override "]
51334[label="typeName\n Override "]
41335[label="methodModifier\n public "]
41336[label="methodHeader\n IDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException "]
51337[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51338[label="methodDeclarator\n load(StringfolderPath,StringcharsetName,doublepercentage) "]
61339[label="formalParameterList\n StringfolderPath,StringcharsetName,doublepercentage "]
71340[label="formalParameters\n StringfolderPath,StringcharsetName "]
81341[label="formalParameter\n StringfolderPath "]
91342[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91343[label="variableDeclaratorId\n folderPath "]
81344[label="formalParameter\n StringcharsetName "]
91345[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91346[label="variableDeclaratorId\n charsetName "]
71347[label="formalParameter\n doublepercentage "]
81348[label="floatingPointType\n double "]
81349[label="variableDeclaratorId\n percentage "]
51350[label="throws_\n throwsIllegalArgumentException,IOException "]
61351[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71352[label="classType\n IllegalArgumentException "]
71353[label="classType\n IOException "]
41354[label="block\n {if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;} "]
51355[label="blockStatements\n if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis; "]
61356[label="ifThenStatement\n if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\"); "]
71357[label="equalityExpression\n folderPath==null "]
81358[label="expressionName\n folderPath "]
81359[label="literal\n null "]
71360[label="throwStatement\n thrownewIllegalArgumentException(\"参数 folderPath == null\"); "]
81361[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"参数 folderPath == null\") "]
91362[label="literal\n \"参数 folderPath == null\" "]
61363[label="localVariableDeclarationStatement\n Fileroot=newFile(folderPath); "]
71364[label="localVariableDeclaration\n Fileroot=newFile(folderPath) "]
81365[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
81366[label="variableDeclarator\n root=newFile(folderPath) "]
91367[label="variableDeclaratorId\n root "]
91368[label="classInstanceCreationExpression_lfno_primary\n newFile(folderPath) "]
101369[label="expressionName\n folderPath "]
61370[label="ifThenStatement\n if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath())); "]
71371[label="unaryExpressionNotPlusMinus\n !root.exists() "]
81372[label="methodInvocation_lfno_primary\n root.exists() "]
91373[label="typeName\n root "]
71374[label="throwStatement\n thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath())); "]
81375[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath())) "]
91376[label="methodInvocation_lfno_primary\n String.format(\"目录 %s 不存在\",root.getAbsolutePath()) "]
101377[label="typeName\n String "]
101378[label="argumentList\n \"目录 %s 不存在\",root.getAbsolutePath() "]
111379[label="literal\n \"目录 %s 不存在\" "]
111380[label="methodInvocation_lfno_primary\n root.getAbsolutePath() "]
121381[label="typeName\n root "]
61382[label="ifThenStatement\n if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath())); "]
71383[label="unaryExpressionNotPlusMinus\n !root.isDirectory() "]
81384[label="methodInvocation_lfno_primary\n root.isDirectory() "]
91385[label="typeName\n root "]
71386[label="throwStatement\n thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath())); "]
81387[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath())) "]
91388[label="methodInvocation_lfno_primary\n String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()) "]
101389[label="typeName\n String "]
101390[label="argumentList\n \"目录 %s 不是一个目录\",root.getAbsolutePath() "]
111391[label="literal\n \"目录 %s 不是一个目录\" "]
111392[label="methodInvocation_lfno_primary\n root.getAbsolutePath() "]
121393[label="typeName\n root "]
61394[label="ifThenStatement\n if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\"); "]
71395[label="conditionalOrExpression\n percentage>1.0||percentage<-1.0 "]
81396[label="relationalExpression\n percentage>1.0 "]
91397[label="expressionName\n percentage "]
91398[label="literal\n 1.0 "]
81399[label="relationalExpression\n percentage<-1.0 "]
91400[label="expressionName\n percentage "]
91401[label="unaryExpression\n -1.0 "]
101402[label="literal\n 1.0 "]
71403[label="throwStatement\n thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\"); "]
81404[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\") "]
91405[label="literal\n \"percentage 的绝对值必须介于[0, 1]之间\" "]
61406[label="localVariableDeclarationStatement\n File[]folders=root.listFiles(); "]
71407[label="localVariableDeclaration\n File[]folders=root.listFiles() "]
81408[label="unannArrayType\n File[] "]
91409[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
91410[label="dims\n [] "]
81411[label="variableDeclarator\n folders=root.listFiles() "]
91412[label="variableDeclaratorId\n folders "]
91413[label="methodInvocation_lfno_primary\n root.listFiles() "]
101414[label="typeName\n root "]
61415[label="ifThenStatement\n if(folders==null)returnnull; "]
71416[label="equalityExpression\n folders==null "]
81417[label="expressionName\n folders "]
81418[label="literal\n null "]
71419[label="returnStatement\n returnnull; "]
81420[label="literal\n null "]
61421[label="expressionStatement\n logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath); "]
71422[label="methodInvocation\n logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath) "]
81423[label="typeName\n logger "]
81424[label="argumentList\n \"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath "]
91425[label="literal\n \"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\" "]
91426[label="conditionalExpression\n testingDataSet?\"测试集\":\"训练集\" "]
101427[label="expressionName\n testingDataSet "]
101428[label="literal\n \"测试集\" "]
101429[label="literal\n \"训练集\" "]
91430[label="expressionName\n charsetName "]
91431[label="expressionName\n folderPath "]
61432[label="enhancedForStatement\n for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);} "]
71433[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
71434[label="variableDeclaratorId\n folder "]
71435[label="expressionName\n folders "]
71436[label="block\n {if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);} "]
81437[label="blockStatements\n if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b); "]
91438[label="ifThenStatement\n if(folder.isFile())continue; "]
101439[label="methodInvocation_lfno_primary\n folder.isFile() "]
111440[label="typeName\n folder "]
101441[label="continueStatement\n continue; "]
91442[label="localVariableDeclarationStatement\n File[]files=folder.listFiles(); "]
101443[label="localVariableDeclaration\n File[]files=folder.listFiles() "]
111444[label="unannArrayType\n File[] "]
121445[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
121446[label="dims\n [] "]
111447[label="variableDeclarator\n files=folder.listFiles() "]
121448[label="variableDeclaratorId\n files "]
121449[label="methodInvocation_lfno_primary\n folder.listFiles() "]
131450[label="typeName\n folder "]
91451[label="ifThenStatement\n if(files==null)continue; "]
101452[label="equalityExpression\n files==null "]
111453[label="expressionName\n files "]
111454[label="literal\n null "]
101455[label="continueStatement\n continue; "]
91456[label="localVariableDeclarationStatement\n Stringcategory=folder.getName(); "]
101457[label="localVariableDeclaration\n Stringcategory=folder.getName() "]
111458[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
111459[label="variableDeclarator\n category=folder.getName() "]
121460[label="variableDeclaratorId\n category "]
121461[label="methodInvocation_lfno_primary\n folder.getName() "]
131462[label="typeName\n folder "]
91463[label="expressionStatement\n logger.out(\"[%s]...\",category); "]
101464[label="methodInvocation\n logger.out(\"[%s]...\",category) "]
111465[label="typeName\n logger "]
111466[label="argumentList\n \"[%s]...\",category "]
121467[label="literal\n \"[%s]...\" "]
121468[label="expressionName\n category "]
91469[label="localVariableDeclarationStatement\n intb,e; "]
101470[label="localVariableDeclaration\n intb,e "]
111471[label="integralType\n int "]
111472[label="variableDeclaratorList\n b,e "]
121473[label="variableDeclaratorId\n b "]
121474[label="variableDeclaratorId\n e "]
91475[label="ifThenElseStatement\n if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;} "]
101476[label="relationalExpression\n percentage>0 "]
111477[label="expressionName\n percentage "]
111478[label="literal\n 0 "]
101479[label="block\n {b=0;e=(int)(files.length*percentage);} "]
111480[label="blockStatements\n b=0;e=(int)(files.length*percentage); "]
121481[label="expressionStatement\n b=0; "]
131482[label="assignment\n b=0 "]
141483[label="expressionName\n b "]
141484[label="assignmentOperator\n = "]
141485[label="literal\n 0 "]
121486[label="expressionStatement\n e=(int)(files.length*percentage); "]
131487[label="assignment\n e=(int)(files.length*percentage) "]
141488[label="expressionName\n e "]
141489[label="assignmentOperator\n = "]
141490[label="castExpression\n (int)(files.length*percentage) "]
151491[label="integralType\n int "]
151492[label="primaryNoNewArray_lfno_primary\n (files.length*percentage) "]
161493[label="multiplicativeExpression\n files.length*percentage "]
171494[label="expressionName\n files.length "]
181495[label="ambiguousName\n files "]
171496[label="expressionName\n percentage "]
101497[label="block\n {b=(int)(files.length*(1+percentage));e=files.length;} "]
111498[label="blockStatements\n b=(int)(files.length*(1+percentage));e=files.length; "]
121499[label="expressionStatement\n b=(int)(files.length*(1+percentage)); "]
131500[label="assignment\n b=(int)(files.length*(1+percentage)) "]
141501[label="expressionName\n b "]
141502[label="assignmentOperator\n = "]
141503[label="castExpression\n (int)(files.length*(1+percentage)) "]
151504[label="integralType\n int "]
151505[label="primaryNoNewArray_lfno_primary\n (files.length*(1+percentage)) "]
161506[label="multiplicativeExpression\n files.length*(1+percentage) "]
171507[label="expressionName\n files.length "]
181508[label="ambiguousName\n files "]
171509[label="primaryNoNewArray_lfno_primary\n (1+percentage) "]
181510[label="additiveExpression\n 1+percentage "]
191511[label="literal\n 1 "]
191512[label="expressionName\n percentage "]
121513[label="expressionStatement\n e=files.length; "]
131514[label="assignment\n e=files.length "]
141515[label="expressionName\n e "]
141516[label="assignmentOperator\n = "]
141517[label="expressionName\n files.length "]
151518[label="ambiguousName\n files "]
91519[label="localVariableDeclarationStatement\n intlogEvery=(int)Math.ceil((e-b)/10000f); "]
101520[label="localVariableDeclaration\n intlogEvery=(int)Math.ceil((e-b)/10000f) "]
111521[label="integralType\n int "]
111522[label="variableDeclarator\n logEvery=(int)Math.ceil((e-b)/10000f) "]
121523[label="variableDeclaratorId\n logEvery "]
121524[label="castExpression\n (int)Math.ceil((e-b)/10000f) "]
131525[label="integralType\n int "]
131526[label="methodInvocation_lfno_primary\n Math.ceil((e-b)/10000f) "]
141527[label="typeName\n Math "]
141528[label="multiplicativeExpression\n (e-b)/10000f "]
151529[label="primaryNoNewArray_lfno_primary\n (e-b) "]
161530[label="additiveExpression\n e-b "]
171531[label="expressionName\n e "]
171532[label="expressionName\n b "]
151533[label="literal\n 10000f "]
91534[label="basicForStatement\n for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}} "]
101535[label="localVariableDeclaration\n inti=b "]
111536[label="integralType\n int "]
111537[label="variableDeclarator\n i=b "]
121538[label="variableDeclaratorId\n i "]
121539[label="expressionName\n b "]
101540[label="relationalExpression\n i<e "]
111541[label="expressionName\n i "]
111542[label="expressionName\n e "]
101543[label="postIncrementExpression\n i++ "]
111544[label="expressionName\n i "]
101545[label="block\n {add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}} "]
111546[label="blockStatements\n add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));} "]
121547[label="expressionStatement\n add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName)); "]
131548[label="methodInvocation\n add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName)) "]
141549[label="methodName\n add "]
141550[label="argumentList\n folder.getName(),TextProcessUtility.readTxt(files[i],charsetName) "]
151551[label="methodInvocation_lfno_primary\n folder.getName() "]
161552[label="typeName\n folder "]
151553[label="methodInvocation_lfno_primary\n TextProcessUtility.readTxt(files[i],charsetName) "]
161554[label="typeName\n TextProcessUtility "]
161555[label="argumentList\n files[i],charsetName "]
171556[label="arrayAccess_lfno_primary\n files[i] "]
181557[label="expressionName\n files "]
181558[label="expressionName\n i "]
171559[label="expressionName\n charsetName "]
121560[label="ifThenStatement\n if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));} "]
131561[label="equalityExpression\n i%logEvery==0 "]
141562[label="multiplicativeExpression\n i%logEvery "]
151563[label="expressionName\n i "]
151564[label="expressionName\n logEvery "]
141565[label="literal\n 0 "]
131566[label="block\n {logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));} "]
141567[label="expressionStatement\n logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b)); "]
151568[label="methodInvocation\n logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b)) "]
161569[label="typeName\n logger "]
161570[label="argumentList\n \"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b) "]
171571[label="literal\n \"%c[%s]...%.2f%%\" "]
171572[label="literal\n 13 "]
171573[label="expressionName\n category "]
171574[label="methodInvocation_lfno_primary\n MathUtility.percentage(i-b+1,e-b) "]
181575[label="typeName\n MathUtility "]
181576[label="argumentList\n i-b+1,e-b "]
191577[label="additiveExpression\n i-b+1 "]
201578[label="additiveExpression\n i-b "]
211579[label="expressionName\n i "]
211580[label="expressionName\n b "]
201581[label="literal\n 1 "]
191582[label="additiveExpression\n e-b "]
201583[label="expressionName\n e "]
201584[label="expressionName\n b "]
91585[label="expressionStatement\n logger.out(\" %d 篇文档\n\",e-b); "]
101586[label="methodInvocation\n logger.out(\" %d 篇文档\n\",e-b) "]
111587[label="typeName\n logger "]
111588[label="argumentList\n \" %d 篇文档\n\",e-b "]
121589[label="literal\n \" %d 篇文档\n\" "]
121590[label="additiveExpression\n e-b "]
131591[label="expressionName\n e "]
131592[label="expressionName\n b "]
61593[label="expressionStatement\n logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size()); "]
71594[label="methodInvocation\n logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size()) "]
81595[label="typeName\n logger "]
81596[label="argumentList\n \" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size() "]
91597[label="literal\n \" 加载了 %d 个类目,共 %d 篇文档\n\" "]
91598[label="primary\n getCatalog().size() "]
101599[label="methodInvocation_lfno_primary\n getCatalog() "]
111600[label="methodName\n getCatalog "]
101601[label="methodInvocation_lf_primary\n .size() "]
91602[label="methodInvocation_lfno_primary\n size() "]
101603[label="methodName\n size "]
61604[label="returnStatement\n returnthis; "]
71605[label="primaryNoNewArray_lfno_primary\n this "]
31606[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;} "]
41607[label="markerAnnotation\n @Override "]
51608[label="typeName\n Override "]
41609[label="methodModifier\n public "]
41610[label="methodHeader\n IDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException "]
51611[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51612[label="methodDeclarator\n load(StringfolderPath,doublerate) "]
61613[label="formalParameterList\n StringfolderPath,doublerate "]
71614[label="formalParameter\n StringfolderPath "]
81615[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81616[label="variableDeclaratorId\n folderPath "]
71617[label="formalParameter\n doublerate "]
81618[label="floatingPointType\n double "]
81619[label="variableDeclaratorId\n rate "]
51620[label="throws_\n throwsIllegalArgumentException,IOException "]
61621[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71622[label="classType\n IllegalArgumentException "]
71623[label="classType\n IOException "]
41624[label="block\n {returnnull;} "]
51625[label="returnStatement\n returnnull; "]
61626[label="literal\n null "]
31627[label="methodDeclaration\n @OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;} "]
41628[label="markerAnnotation\n @Override "]
51629[label="typeName\n Override "]
41630[label="methodModifier\n public "]
41631[label="methodHeader\n IDataSetadd(Map<String,String[]>testingDataSet) "]
51632[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51633[label="methodDeclarator\n add(Map<String,String[]>testingDataSet) "]
61634[label="formalParameter\n Map<String,String[]>testingDataSet "]
71635[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String[]> "]
81636[label="typeArguments\n <String,String[]> "]
91637[label="typeArgumentList\n String,String[] "]
101638[label="classType_lfno_classOrInterfaceType\n String "]
101639[label="arrayType\n String[] "]
111640[label="classType_lfno_classOrInterfaceType\n String "]
111641[label="dims\n [] "]
71642[label="variableDeclaratorId\n testingDataSet "]
41643[label="block\n {for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;} "]
51644[label="blockStatements\n for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis; "]
61645[label="enhancedForStatement\n for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}} "]
71646[label="unannClassOrInterfaceType\n Map.Entry<String,String[]> "]
81647[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
81648[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String[]> "]
91649[label="typeArguments\n <String,String[]> "]
101650[label="typeArgumentList\n String,String[] "]
111651[label="classType_lfno_classOrInterfaceType\n String "]
111652[label="arrayType\n String[] "]
121653[label="classType_lfno_classOrInterfaceType\n String "]
121654[label="dims\n [] "]
71655[label="variableDeclaratorId\n entry "]
71656[label="methodInvocation_lfno_primary\n testingDataSet.entrySet() "]
81657[label="typeName\n testingDataSet "]
71658[label="block\n {for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}} "]
81659[label="enhancedForStatement\n for(Stringdocument:entry.getValue()){add(entry.getKey(),document);} "]
91660[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91661[label="variableDeclaratorId\n document "]
91662[label="methodInvocation_lfno_primary\n entry.getValue() "]
101663[label="typeName\n entry "]
91664[label="block\n {add(entry.getKey(),document);} "]
101665[label="expressionStatement\n add(entry.getKey(),document); "]
111666[label="methodInvocation\n add(entry.getKey(),document) "]
121667[label="methodName\n add "]
121668[label="argumentList\n entry.getKey(),document "]
131669[label="methodInvocation_lfno_primary\n entry.getKey() "]
141670[label="typeName\n entry "]
131671[label="expressionName\n document "]
61672[label="returnStatement\n returnthis; "]
71673[label="primaryNoNewArray_lfno_primary\n this "]
01674[label="compilationUnit\n packagecom.hankcs.hanlp.dependency;importcom.hankcs.hanlp.HanLP;importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLSentence;importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLWord;importcom.hankcs.hanlp.corpus.io.IOUtil;importcom.hankcs.hanlp.seg.Segment;importcom.hankcs.hanlp.tokenizer.NLPTokenizer;importcom.hankcs.hanlp.utility.GlobalObjectPool;importjava.util.Map;importjava.util.TreeMap;publicabstractclassAbstractDependencyParserimplementsIDependencyParser{privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true);privateMap<String,String>deprelTranslater;privatebooleanenableDeprelTranslater;@OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;}@OverridepublicSegmentgetSegment(){returnsegment;}@OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;}@OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;}@OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;}publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;}@OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;}}<EOF> "]
11675[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency; "]
21676[label="packageName\n com.hankcs.hanlp.dependency "]
31677[label="packageName\n com.hankcs.hanlp "]
41678[label="packageName\n com.hankcs "]
51679[label="packageName\n com "]
11680[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.HanLP; "]
21681[label="typeName\n com.hankcs.hanlp.HanLP "]
31682[label="packageOrTypeName\n com.hankcs.hanlp "]
41683[label="packageOrTypeName\n com.hankcs "]
51684[label="packageOrTypeName\n com "]
11685[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLSentence; "]
21686[label="typeName\n com.hankcs.hanlp.corpus.dependency.CoNll.CoNLLSentence "]
31687[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency.CoNll "]
41688[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency "]
51689[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
61690[label="packageOrTypeName\n com.hankcs.hanlp "]
71691[label="packageOrTypeName\n com.hankcs "]
81692[label="packageOrTypeName\n com "]
11693[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLWord; "]
21694[label="typeName\n com.hankcs.hanlp.corpus.dependency.CoNll.CoNLLWord "]
31695[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency.CoNll "]
41696[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency "]
51697[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
61698[label="packageOrTypeName\n com.hankcs.hanlp "]
71699[label="packageOrTypeName\n com.hankcs "]
81700[label="packageOrTypeName\n com "]
11701[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
21702[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
31703[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
41704[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
51705[label="packageOrTypeName\n com.hankcs.hanlp "]
61706[label="packageOrTypeName\n com.hankcs "]
71707[label="packageOrTypeName\n com "]
11708[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.Segment; "]
21709[label="typeName\n com.hankcs.hanlp.seg.Segment "]
31710[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
41711[label="packageOrTypeName\n com.hankcs.hanlp "]
51712[label="packageOrTypeName\n com.hankcs "]
61713[label="packageOrTypeName\n com "]
11714[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.tokenizer.NLPTokenizer; "]
21715[label="typeName\n com.hankcs.hanlp.tokenizer.NLPTokenizer "]
31716[label="packageOrTypeName\n com.hankcs.hanlp.tokenizer "]
41717[label="packageOrTypeName\n com.hankcs.hanlp "]
51718[label="packageOrTypeName\n com.hankcs "]
61719[label="packageOrTypeName\n com "]
11720[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.GlobalObjectPool; "]
21721[label="typeName\n com.hankcs.hanlp.utility.GlobalObjectPool "]
31722[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
41723[label="packageOrTypeName\n com.hankcs.hanlp "]
51724[label="packageOrTypeName\n com.hankcs "]
61725[label="packageOrTypeName\n com "]
11726[label="singleTypeImportDeclaration\n importjava.util.Map; "]
21727[label="typeName\n java.util.Map "]
31728[label="packageOrTypeName\n java.util "]
41729[label="packageOrTypeName\n java "]
11730[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
21731[label="typeName\n java.util.TreeMap "]
31732[label="packageOrTypeName\n java.util "]
41733[label="packageOrTypeName\n java "]
11734[label="normalClassDeclaration\n publicabstractclassAbstractDependencyParserimplementsIDependencyParser{privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true);privateMap<String,String>deprelTranslater;privatebooleanenableDeprelTranslater;@OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;}@OverridepublicSegmentgetSegment(){returnsegment;}@OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;}@OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;}@OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;}publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;}@OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;}} "]
21735[label="classModifier\n public "]
21736[label="classModifier\n abstract "]
21737[label="superinterfaces\n implementsIDependencyParser "]
31738[label="classType\n IDependencyParser "]
21739[label="classBody\n {privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true);privateMap<String,String>deprelTranslater;privatebooleanenableDeprelTranslater;@OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;}@OverridepublicSegmentgetSegment(){returnsegment;}@OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;}@OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;}@OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;}publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;}@OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;}} "]
31740[label="fieldDeclaration\n privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true); "]
41741[label="fieldModifier\n private "]
41742[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
41743[label="variableDeclarator\n segment=HanLP.newSegment().enablePartOfSpeechTagging(true) "]
51744[label="variableDeclaratorId\n segment "]
51745[label="primary\n HanLP.newSegment().enablePartOfSpeechTagging(true) "]
61746[label="methodInvocation_lfno_primary\n HanLP.newSegment() "]
71747[label="typeName\n HanLP "]
61748[label="methodInvocation_lf_primary\n .enablePartOfSpeechTagging(true) "]
71749[label="literal\n true "]
31750[label="fieldDeclaration\n privateMap<String,String>deprelTranslater; "]
41751[label="fieldModifier\n private "]
41752[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
51753[label="typeArguments\n <String,String> "]
61754[label="typeArgumentList\n String,String "]
71755[label="classType_lfno_classOrInterfaceType\n String "]
71756[label="classType_lfno_classOrInterfaceType\n String "]
41757[label="variableDeclaratorId\n deprelTranslater "]
31758[label="fieldDeclaration\n privatebooleanenableDeprelTranslater; "]
41759[label="fieldModifier\n private "]
41760[label="unannPrimitiveType\n boolean "]
41761[label="variableDeclaratorId\n enableDeprelTranslater "]
31762[label="methodDeclaration\n @OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;} "]
41763[label="markerAnnotation\n @Override "]
51764[label="typeName\n Override "]
41765[label="methodModifier\n public "]
41766[label="methodHeader\n CoNLLSentenceparse(Stringsentence) "]
51767[label="unannClassType_lfno_unannClassOrInterfaceType\n CoNLLSentence "]
51768[label="methodDeclarator\n parse(Stringsentence) "]
61769[label="formalParameter\n Stringsentence "]
71770[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
71771[label="variableDeclaratorId\n sentence "]
41772[label="block\n {assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;} "]
51773[label="blockStatements\n assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput; "]
61774[label="assertStatement\n assertsentence!=null; "]
71775[label="equalityExpression\n sentence!=null "]
81776[label="expressionName\n sentence "]
81777[label="literal\n null "]
61778[label="localVariableDeclarationStatement\n CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray())); "]
71779[label="localVariableDeclaration\n CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray())) "]
81780[label="unannClassType_lfno_unannClassOrInterfaceType\n CoNLLSentence "]
81781[label="variableDeclarator\n output=parse(segment.seg(sentence.toCharArray())) "]
91782[label="variableDeclaratorId\n output "]
91783[label="methodInvocation_lfno_primary\n parse(segment.seg(sentence.toCharArray())) "]
101784[label="methodName\n parse "]
101785[label="methodInvocation_lfno_primary\n segment.seg(sentence.toCharArray()) "]
111786[label="typeName\n segment "]
111787[label="methodInvocation_lfno_primary\n sentence.toCharArray() "]
121788[label="typeName\n sentence "]
61789[label="ifThenStatement\n if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}} "]
71790[label="conditionalAndExpression\n enableDeprelTranslater&&deprelTranslater!=null "]
81791[label="expressionName\n enableDeprelTranslater "]
81792[label="equalityExpression\n deprelTranslater!=null "]
91793[label="expressionName\n deprelTranslater "]
91794[label="literal\n null "]
71795[label="block\n {for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}} "]
81796[label="enhancedForStatement\n for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;} "]
91797[label="unannClassType_lfno_unannClassOrInterfaceType\n CoNLLWord "]
91798[label="variableDeclaratorId\n word "]
91799[label="expressionName\n output "]
91800[label="block\n {StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;} "]
101801[label="blockStatements\n StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel; "]
111802[label="localVariableDeclarationStatement\n StringtranslatedDeprel=deprelTranslater.get(word.DEPREL); "]
121803[label="localVariableDeclaration\n StringtranslatedDeprel=deprelTranslater.get(word.DEPREL) "]
131804[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
131805[label="variableDeclarator\n translatedDeprel=deprelTranslater.get(word.DEPREL) "]
141806[label="variableDeclaratorId\n translatedDeprel "]
141807[label="methodInvocation_lfno_primary\n deprelTranslater.get(word.DEPREL) "]
151808[label="typeName\n deprelTranslater "]
151809[label="expressionName\n word.DEPREL "]
161810[label="ambiguousName\n word "]
111811[label="expressionStatement\n word.DEPREL=translatedDeprel; "]
121812[label="assignment\n word.DEPREL=translatedDeprel "]
131813[label="expressionName\n word.DEPREL "]
141814[label="ambiguousName\n word "]
131815[label="assignmentOperator\n = "]
131816[label="expressionName\n translatedDeprel "]
61817[label="returnStatement\n returnoutput; "]
71818[label="expressionName\n output "]
31819[label="methodDeclaration\n @OverridepublicSegmentgetSegment(){returnsegment;} "]
41820[label="markerAnnotation\n @Override "]
51821[label="typeName\n Override "]
41822[label="methodModifier\n public "]
41823[label="methodHeader\n SegmentgetSegment() "]
51824[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
51825[label="methodDeclarator\n getSegment() "]
41826[label="block\n {returnsegment;} "]
51827[label="returnStatement\n returnsegment; "]
61828[label="expressionName\n segment "]
31829[label="methodDeclaration\n @OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;} "]
41830[label="markerAnnotation\n @Override "]
51831[label="typeName\n Override "]
41832[label="methodModifier\n public "]
41833[label="methodHeader\n IDependencyParsersetSegment(Segmentsegment) "]
51834[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51835[label="methodDeclarator\n setSegment(Segmentsegment) "]
61836[label="formalParameter\n Segmentsegment "]
71837[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
71838[label="variableDeclaratorId\n segment "]
41839[label="block\n {this.segment=segment;returnthis;} "]
51840[label="blockStatements\n this.segment=segment;returnthis; "]
61841[label="expressionStatement\n this.segment=segment; "]
71842[label="assignment\n this.segment=segment "]
81843[label="fieldAccess\n this.segment "]
91844[label="primaryNoNewArray_lfno_primary\n this "]
81845[label="assignmentOperator\n = "]
81846[label="expressionName\n segment "]
61847[label="returnStatement\n returnthis; "]
71848[label="primaryNoNewArray_lfno_primary\n this "]
31849[label="methodDeclaration\n @OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;} "]
41850[label="markerAnnotation\n @Override "]
51851[label="typeName\n Override "]
41852[label="methodModifier\n public "]
41853[label="methodHeader\n Map<String,String>getDeprelTranslator() "]
51854[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
61855[label="typeArguments\n <String,String> "]
71856[label="typeArgumentList\n String,String "]
81857[label="classType_lfno_classOrInterfaceType\n String "]
81858[label="classType_lfno_classOrInterfaceType\n String "]
51859[label="methodDeclarator\n getDeprelTranslator() "]
41860[label="block\n {returndeprelTranslater;} "]
51861[label="returnStatement\n returndeprelTranslater; "]
61862[label="expressionName\n deprelTranslater "]
31863[label="methodDeclaration\n @OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;} "]
41864[label="markerAnnotation\n @Override "]
51865[label="typeName\n Override "]
41866[label="methodModifier\n public "]
41867[label="methodHeader\n IDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator) "]
51868[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51869[label="methodDeclarator\n setDeprelTranslator(Map<String,String>deprelTranslator) "]
61870[label="formalParameter\n Map<String,String>deprelTranslator "]
71871[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
81872[label="typeArguments\n <String,String> "]
91873[label="typeArgumentList\n String,String "]
101874[label="classType_lfno_classOrInterfaceType\n String "]
101875[label="classType_lfno_classOrInterfaceType\n String "]
71876[label="variableDeclaratorId\n deprelTranslator "]
41877[label="block\n {this.deprelTranslater=deprelTranslator;returnthis;} "]
51878[label="blockStatements\n this.deprelTranslater=deprelTranslator;returnthis; "]
61879[label="expressionStatement\n this.deprelTranslater=deprelTranslator; "]
71880[label="assignment\n this.deprelTranslater=deprelTranslator "]
81881[label="fieldAccess\n this.deprelTranslater "]
91882[label="primaryNoNewArray_lfno_primary\n this "]
81883[label="assignmentOperator\n = "]
81884[label="expressionName\n deprelTranslator "]
61885[label="returnStatement\n returnthis; "]
71886[label="primaryNoNewArray_lfno_primary\n this "]
31887[label="methodDeclaration\n publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;} "]
41888[label="methodModifier\n public "]
41889[label="methodHeader\n IDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath) "]
51890[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51891[label="methodDeclarator\n setDeprelTranslater(StringdeprelTranslatorPath) "]
61892[label="formalParameter\n StringdeprelTranslatorPath "]
71893[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
71894[label="variableDeclaratorId\n deprelTranslatorPath "]
41895[label="block\n {deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;} "]
51896[label="blockStatements\n deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis; "]
61897[label="expressionStatement\n deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath); "]
71898[label="assignment\n deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath) "]
81899[label="expressionName\n deprelTranslater "]
81900[label="assignmentOperator\n = "]
81901[label="methodInvocation_lfno_primary\n GlobalObjectPool.get(deprelTranslatorPath) "]
91902[label="typeName\n GlobalObjectPool "]
91903[label="expressionName\n deprelTranslatorPath "]
61904[label="ifThenStatement\n if(deprelTranslater!=null)returnthis; "]
71905[label="equalityExpression\n deprelTranslater!=null "]
81906[label="expressionName\n deprelTranslater "]
81907[label="literal\n null "]
71908[label="returnStatement\n returnthis; "]
81909[label="primaryNoNewArray_lfno_primary\n this "]
61910[label="localVariableDeclarationStatement\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath); "]
71911[label="localVariableDeclaration\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath) "]
81912[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
91913[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
91914[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
81915[label="variableDeclarator\n iterator=newIOUtil.LineIterator(deprelTranslatorPath) "]
91916[label="variableDeclaratorId\n iterator "]
91917[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(deprelTranslatorPath) "]
101918[label="expressionName\n deprelTranslatorPath "]
61919[label="expressionStatement\n deprelTranslater=newTreeMap<String,String>(); "]
71920[label="assignment\n deprelTranslater=newTreeMap<String,String>() "]
81921[label="expressionName\n deprelTranslater "]
81922[label="assignmentOperator\n = "]
81923[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
91924[label="typeArguments\n <String,String> "]
101925[label="typeArgumentList\n String,String "]
111926[label="classType_lfno_classOrInterfaceType\n String "]
111927[label="classType_lfno_classOrInterfaceType\n String "]
61928[label="whileStatement\n while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);} "]
71929[label="methodInvocation_lfno_primary\n iterator.hasNext() "]
81930[label="typeName\n iterator "]
71931[label="block\n {String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);} "]
81932[label="blockStatements\n String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]); "]
91933[label="localVariableDeclarationStatement\n String[]args=iterator.next().split(\"\\s\"); "]
101934[label="localVariableDeclaration\n String[]args=iterator.next().split(\"\\s\") "]
111935[label="unannArrayType\n String[] "]
121936[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
121937[label="dims\n [] "]
111938[label="variableDeclarator\n args=iterator.next().split(\"\\s\") "]
121939[label="variableDeclaratorId\n args "]
121940[label="primary\n iterator.next().split(\"\\s\") "]
131941[label="methodInvocation_lfno_primary\n iterator.next() "]
141942[label="typeName\n iterator "]
131943[label="methodInvocation_lf_primary\n .split(\"\\s\") "]
141944[label="literal\n \"\\s\" "]
91945[label="expressionStatement\n deprelTranslater.put(args[0],args[1]); "]
101946[label="methodInvocation\n deprelTranslater.put(args[0],args[1]) "]
111947[label="typeName\n deprelTranslater "]
111948[label="argumentList\n args[0],args[1] "]
121949[label="arrayAccess_lfno_primary\n args[0] "]
131950[label="expressionName\n args "]
131951[label="literal\n 0 "]
121952[label="arrayAccess_lfno_primary\n args[1] "]
131953[label="expressionName\n args "]
131954[label="literal\n 1 "]
61955[label="ifThenStatement\n if(deprelTranslater.size()==0){deprelTranslater=null;} "]
71956[label="equalityExpression\n deprelTranslater.size()==0 "]
81957[label="methodInvocation_lfno_primary\n deprelTranslater.size() "]
91958[label="typeName\n deprelTranslater "]
81959[label="literal\n 0 "]
71960[label="block\n {deprelTranslater=null;} "]
81961[label="expressionStatement\n deprelTranslater=null; "]
91962[label="assignment\n deprelTranslater=null "]
101963[label="expressionName\n deprelTranslater "]
101964[label="assignmentOperator\n = "]
101965[label="literal\n null "]
61966[label="expressionStatement\n GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater); "]
71967[label="methodInvocation\n GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater) "]
81968[label="typeName\n GlobalObjectPool "]
81969[label="argumentList\n deprelTranslatorPath,deprelTranslater "]
91970[label="expressionName\n deprelTranslatorPath "]
91971[label="expressionName\n deprelTranslater "]
61972[label="returnStatement\n returnthis; "]
71973[label="primaryNoNewArray_lfno_primary\n this "]
31974[label="methodDeclaration\n @OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;} "]
41975[label="markerAnnotation\n @Override "]
51976[label="typeName\n Override "]
41977[label="methodModifier\n public "]
41978[label="methodHeader\n IDependencyParserenableDeprelTranslator(booleanenable) "]
51979[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51980[label="methodDeclarator\n enableDeprelTranslator(booleanenable) "]
61981[label="formalParameter\n booleanenable "]
71982[label="unannPrimitiveType\n boolean "]
71983[label="variableDeclaratorId\n enable "]
41984[label="block\n {enableDeprelTranslater=enable;returnthis;} "]
51985[label="blockStatements\n enableDeprelTranslater=enable;returnthis; "]
61986[label="expressionStatement\n enableDeprelTranslater=enable; "]
71987[label="assignment\n enableDeprelTranslater=enable "]
81988[label="expressionName\n enableDeprelTranslater "]
81989[label="assignmentOperator\n = "]
81990[label="expressionName\n enable "]
61991[label="returnStatement\n returnthis; "]
71992[label="primaryNoNewArray_lfno_primary\n this "]
01993[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;publicclassAbstractInexactActionimplementsComparable<AbstractInexactAction>{intseed;publicAbstractInexactAction(){}AbstractInexactAction(intname,intrel){seed=rel<<6|name;}publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);}@Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;}publicintname(){return(seed&0x3f);}publicintrel(){return(seed>>6);}}<EOF> "]
11994[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
21995[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
31996[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
41997[label="packageName\n com.hankcs.hanlp.dependency "]
51998[label="packageName\n com.hankcs.hanlp "]
61999[label="packageName\n com.hankcs "]
72000[label="packageName\n com "]
12001[label="normalClassDeclaration\n publicclassAbstractInexactActionimplementsComparable<AbstractInexactAction>{intseed;publicAbstractInexactAction(){}AbstractInexactAction(intname,intrel){seed=rel<<6|name;}publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);}@Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;}publicintname(){return(seed&0x3f);}publicintrel(){return(seed>>6);}} "]
22002[label="classModifier\n public "]
22003[label="superinterfaces\n implementsComparable<AbstractInexactAction> "]
32004[label="classType\n Comparable<AbstractInexactAction> "]
42005[label="typeArguments\n <AbstractInexactAction> "]
52006[label="classType_lfno_classOrInterfaceType\n AbstractInexactAction "]
22007[label="classBody\n {intseed;publicAbstractInexactAction(){}AbstractInexactAction(intname,intrel){seed=rel<<6|name;}publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);}@Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;}publicintname(){return(seed&0x3f);}publicintrel(){return(seed>>6);}} "]
32008[label="fieldDeclaration\n intseed; "]
42009[label="integralType\n int "]
42010[label="variableDeclaratorId\n seed "]
32011[label="constructorDeclaration\n publicAbstractInexactAction(){} "]
42012[label="constructorModifier\n public "]
42013[label="constructorDeclarator\n AbstractInexactAction() "]
52014[label="simpleTypeName\n AbstractInexactAction "]
42015[label="constructorBody\n {} "]
32016[label="constructorDeclaration\n AbstractInexactAction(intname,intrel){seed=rel<<6|name;} "]
42017[label="constructorDeclarator\n AbstractInexactAction(intname,intrel) "]
52018[label="simpleTypeName\n AbstractInexactAction "]
52019[label="formalParameterList\n intname,intrel "]
62020[label="formalParameter\n intname "]
72021[label="integralType\n int "]
72022[label="variableDeclaratorId\n name "]
62023[label="formalParameter\n intrel "]
72024[label="integralType\n int "]
72025[label="variableDeclaratorId\n rel "]
42026[label="constructorBody\n {seed=rel<<6|name;} "]
52027[label="expressionStatement\n seed=rel<<6|name; "]
62028[label="assignment\n seed=rel<<6|name "]
72029[label="expressionName\n seed "]
72030[label="assignmentOperator\n = "]
72031[label="inclusiveOrExpression\n rel<<6|name "]
82032[label="shiftExpression\n rel<<6 "]
92033[label="expressionName\n rel "]
92034[label="literal\n 6 "]
82035[label="expressionName\n name "]
32036[label="methodDeclaration\n publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);} "]
42037[label="methodModifier\n public "]
42038[label="methodHeader\n intcompareTo(AbstractInexactActiono) "]
52039[label="integralType\n int "]
52040[label="methodDeclarator\n compareTo(AbstractInexactActiono) "]
62041[label="formalParameter\n AbstractInexactActiono "]
72042[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractInexactAction "]
72043[label="variableDeclaratorId\n o "]
42044[label="block\n {returnnewInteger(seed).compareTo(o.seed);} "]
52045[label="returnStatement\n returnnewInteger(seed).compareTo(o.seed); "]
62046[label="primary\n newInteger(seed).compareTo(o.seed) "]
72047[label="classInstanceCreationExpression_lfno_primary\n newInteger(seed) "]
82048[label="expressionName\n seed "]
72049[label="methodInvocation_lf_primary\n .compareTo(o.seed) "]
82050[label="expressionName\n o.seed "]
92051[label="ambiguousName\n o "]
32052[label="methodDeclaration\n @Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;} "]
42053[label="markerAnnotation\n @Override "]
52054[label="typeName\n Override "]
42055[label="methodModifier\n public "]
42056[label="methodHeader\n booleanequals(Objectobj) "]
52057[label="unannPrimitiveType\n boolean "]
52058[label="methodDeclarator\n equals(Objectobj) "]
62059[label="formalParameter\n Objectobj "]
72060[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
72061[label="variableDeclaratorId\n obj "]
42062[label="block\n {if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;} "]
52063[label="blockStatements\n if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed; "]
62064[label="ifThenStatement\n if(!(objinstanceofAbstractInexactAction))returnfalse; "]
72065[label="unaryExpressionNotPlusMinus\n !(objinstanceofAbstractInexactAction) "]
82066[label="primaryNoNewArray_lfno_primary\n (objinstanceofAbstractInexactAction) "]
92067[label="relationalExpression\n objinstanceofAbstractInexactAction "]
102068[label="expressionName\n obj "]
102069[label="classType_lfno_classOrInterfaceType\n AbstractInexactAction "]
72070[label="returnStatement\n returnfalse; "]
82071[label="literal\n false "]
62072[label="localVariableDeclarationStatement\n AbstractInexactActiono=(AbstractInexactAction)obj; "]
72073[label="localVariableDeclaration\n AbstractInexactActiono=(AbstractInexactAction)obj "]
82074[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractInexactAction "]
82075[label="variableDeclarator\n o=(AbstractInexactAction)obj "]
92076[label="variableDeclaratorId\n o "]
92077[label="castExpression\n (AbstractInexactAction)obj "]
102078[label="classType_lfno_classOrInterfaceType\n AbstractInexactAction "]
102079[label="expressionName\n obj "]
62080[label="returnStatement\n returnseed==o.seed; "]
72081[label="equalityExpression\n seed==o.seed "]
82082[label="expressionName\n seed "]
82083[label="expressionName\n o.seed "]
92084[label="ambiguousName\n o "]
32085[label="methodDeclaration\n publicintname(){return(seed&0x3f);} "]
42086[label="methodModifier\n public "]
42087[label="methodHeader\n intname() "]
52088[label="integralType\n int "]
52089[label="methodDeclarator\n name() "]
42090[label="block\n {return(seed&0x3f);} "]
52091[label="returnStatement\n return(seed&0x3f); "]
62092[label="primaryNoNewArray_lfno_primary\n (seed&0x3f) "]
72093[label="andExpression\n seed&0x3f "]
82094[label="expressionName\n seed "]
82095[label="literal\n 0x3f "]
32096[label="methodDeclaration\n publicintrel(){return(seed>>6);} "]
42097[label="methodModifier\n public "]
42098[label="methodHeader\n intrel() "]
52099[label="integralType\n int "]
52100[label="methodDeclarator\n rel() "]
42101[label="block\n {return(seed>>6);} "]
52102[label="returnStatement\n return(seed>>6); "]
62103[label="primaryNoNewArray_lfno_primary\n (seed>>6) "]
72104[label="shiftExpression\n seed>>6 "]
82105[label="expressionName\n seed "]
82106[label="literal\n 6 "]
02107[label="compilationUnit\n packagecom.hankcs.hanlp.classification.models;importcom.hankcs.hanlp.collection.trie.bintrie.BinTrie;importcom.hankcs.hanlp.classification.tokenizers.ITokenizer;importjava.io.*;publicclassAbstractModelimplementsSerializable{publicString[]catalog;publicITokenizertokenizer;publicBinTrie<Integer>wordIdTrie;}<EOF> "]
12108[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.models; "]
22109[label="packageName\n com.hankcs.hanlp.classification.models "]
32110[label="packageName\n com.hankcs.hanlp.classification "]
42111[label="packageName\n com.hankcs.hanlp "]
52112[label="packageName\n com.hankcs "]
62113[label="packageName\n com "]
12114[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.bintrie.BinTrie; "]
22115[label="typeName\n com.hankcs.hanlp.collection.trie.bintrie.BinTrie "]
32116[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie.bintrie "]
42117[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
52118[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
62119[label="packageOrTypeName\n com.hankcs.hanlp "]
72120[label="packageOrTypeName\n com.hankcs "]
82121[label="packageOrTypeName\n com "]
12122[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.ITokenizer; "]
22123[label="typeName\n com.hankcs.hanlp.classification.tokenizers.ITokenizer "]
32124[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
42125[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
52126[label="packageOrTypeName\n com.hankcs.hanlp "]
62127[label="packageOrTypeName\n com.hankcs "]
72128[label="packageOrTypeName\n com "]
12129[label="typeImportOnDemandDeclaration\n importjava.io.*; "]
22130[label="packageOrTypeName\n java.io "]
32131[label="packageOrTypeName\n java "]
12132[label="normalClassDeclaration\n publicclassAbstractModelimplementsSerializable{publicString[]catalog;publicITokenizertokenizer;publicBinTrie<Integer>wordIdTrie;} "]
22133[label="classModifier\n public "]
22134[label="superinterfaces\n implementsSerializable "]
32135[label="classType\n Serializable "]
22136[label="classBody\n {publicString[]catalog;publicITokenizertokenizer;publicBinTrie<Integer>wordIdTrie;} "]
32137[label="fieldDeclaration\n publicString[]catalog; "]
42138[label="fieldModifier\n public "]
42139[label="unannArrayType\n String[] "]
52140[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
52141[label="dims\n [] "]
42142[label="variableDeclaratorId\n catalog "]
32143[label="fieldDeclaration\n publicITokenizertokenizer; "]
42144[label="fieldModifier\n public "]
42145[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
42146[label="variableDeclaratorId\n tokenizer "]
32147[label="fieldDeclaration\n publicBinTrie<Integer>wordIdTrie; "]
42148[label="fieldModifier\n public "]
42149[label="unannClassType_lfno_unannClassOrInterfaceType\n BinTrie<Integer> "]
52150[label="typeArguments\n <Integer> "]
62151[label="classType_lfno_classOrInterfaceType\n Integer "]
42152[label="variableDeclaratorId\n wordIdTrie "]
02153[label="compilationUnit\n packagecom.hankcs.hanlp.mining.word2vec;publicabstractclassAbstractTrainer{protectedabstractvoidlocalUsage();protectedvoidparamDesc(Stringparam,Stringdesc){System.err.printf(\"\t%s\n\t\t%s\n\",param,desc);}protectedvoidusage(){System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0);}protectedintargPos(Stringparam,String[]args){returnargPos(param,args,true);}protectedintargPos(Stringparam,String[]args,booleancheckArgNum){for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1;}protectedvoidsetConfig(String[]args,Configconfig){inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1]));}}<EOF> "]
12154[label="packageDeclaration\n packagecom.hankcs.hanlp.mining.word2vec; "]
22155[label="packageName\n com.hankcs.hanlp.mining.word2vec "]
32156[label="packageName\n com.hankcs.hanlp.mining "]
42157[label="packageName\n com.hankcs.hanlp "]
52158[label="packageName\n com.hankcs "]
62159[label="packageName\n com "]
12160[label="normalClassDeclaration\n publicabstractclassAbstractTrainer{protectedabstractvoidlocalUsage();protectedvoidparamDesc(Stringparam,Stringdesc){System.err.printf(\"\t%s\n\t\t%s\n\",param,desc);}protectedvoidusage(){System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0);}protectedintargPos(Stringparam,String[]args){returnargPos(param,args,true);}protectedintargPos(Stringparam,String[]args,booleancheckArgNum){for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1;}protectedvoidsetConfig(String[]args,Configconfig){inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1]));}} "]
22161[label="classModifier\n public "]
22162[label="classModifier\n abstract "]
22163[label="classBody\n {protectedabstractvoidlocalUsage();protectedvoidparamDesc(Stringparam,Stringdesc){System.err.printf(\"\t%s\n\t\t%s\n\",param,desc);}protectedvoidusage(){System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0);}protectedintargPos(Stringparam,String[]args){returnargPos(param,args,true);}protectedintargPos(Stringparam,String[]args,booleancheckArgNum){for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1;}protectedvoidsetConfig(String[]args,Configconfig){inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1]));}} "]
32164[label="methodDeclaration\n protectedabstractvoidlocalUsage(); "]
42165[label="methodModifier\n protected "]
42166[label="methodModifier\n abstract "]
42167[label="methodHeader\n voidlocalUsage() "]
52168[label="result\n void "]
52169[label="methodDeclarator\n localUsage() "]
42170[label="methodBody\n ; "]
32171[label="methodDeclaration\n protectedvoidparamDesc(Stringparam,Stringdesc){System.err.printf(\"\t%s\n\t\t%s\n\",param,desc);} "]
42172[label="methodModifier\n protected "]
42173[label="methodHeader\n voidparamDesc(Stringparam,Stringdesc) "]
52174[label="result\n void "]
52175[label="methodDeclarator\n paramDesc(Stringparam,Stringdesc) "]
62176[label="formalParameterList\n Stringparam,Stringdesc "]
72177[label="formalParameter\n Stringparam "]
82178[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
82179[label="variableDeclaratorId\n param "]
72180[label="formalParameter\n Stringdesc "]
82181[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
82182[label="variableDeclaratorId\n desc "]
42183[label="block\n {System.err.printf(\"\t%s\n\t\t%s\n\",param,desc);} "]
52184[label="expressionStatement\n System.err.printf(\"\t%s\n\t\t%s\n\",param,desc); "]
62185[label="methodInvocation\n System.err.printf(\"\t%s\n\t\t%s\n\",param,desc) "]
72186[label="typeName\n System.err "]
82187[label="packageOrTypeName\n System "]
72188[label="argumentList\n \"\t%s\n\t\t%s\n\",param,desc "]
82189[label="literal\n \"\t%s\n\t\t%s\n\" "]
82190[label="expressionName\n param "]
82191[label="expressionName\n desc "]
32192[label="methodDeclaration\n protectedvoidusage(){System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0);} "]
42193[label="methodModifier\n protected "]
42194[label="methodHeader\n voidusage() "]
52195[label="result\n void "]
52196[label="methodDeclarator\n usage() "]
42197[label="block\n {System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0);} "]
52198[label="blockStatements\n System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\");System.err.printf(\"Options:\n\");System.err.printf(\"Parameters for training:\n\");paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\");paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\");paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\");paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\");paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\");paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\");paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\");paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\");paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\");paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\");paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\");localUsage();System.exit(0); "]
62199[label="expressionStatement\n System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\"); "]
72200[label="methodInvocation\n System.err.printf(\"word2vec Java toolkit v 0.1c\n\n\") "]
82201[label="typeName\n System.err "]
92202[label="packageOrTypeName\n System "]
82203[label="literal\n \"word2vec Java toolkit v 0.1c\n\n\" "]
62204[label="expressionStatement\n System.err.printf(\"Options:\n\"); "]
72205[label="methodInvocation\n System.err.printf(\"Options:\n\") "]
82206[label="typeName\n System.err "]
92207[label="packageOrTypeName\n System "]
82208[label="literal\n \"Options:\n\" "]
62209[label="expressionStatement\n System.err.printf(\"Parameters for training:\n\"); "]
72210[label="methodInvocation\n System.err.printf(\"Parameters for training:\n\") "]
82211[label="typeName\n System.err "]
92212[label="packageOrTypeName\n System "]
82213[label="literal\n \"Parameters for training:\n\" "]
62214[label="expressionStatement\n paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\"); "]
72215[label="methodInvocation\n paramDesc(\"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\") "]
82216[label="methodName\n paramDesc "]
82217[label="argumentList\n \"-output <file>\",\"Use <file> to save the resulting word vectors / word clusters\" "]
92218[label="literal\n \"-output <file>\" "]
92219[label="literal\n \"Use <file> to save the resulting word vectors / word clusters\" "]
62220[label="expressionStatement\n paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\"); "]
72221[label="methodInvocation\n paramDesc(\"-size <int>\",\"Set size of word vectors; default is 100\") "]
82222[label="methodName\n paramDesc "]
82223[label="argumentList\n \"-size <int>\",\"Set size of word vectors; default is 100\" "]
92224[label="literal\n \"-size <int>\" "]
92225[label="literal\n \"Set size of word vectors; default is 100\" "]
62226[label="expressionStatement\n paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\"); "]
72227[label="methodInvocation\n paramDesc(\"-window <int>\",\"Set max skip length between words; default is 5\") "]
82228[label="methodName\n paramDesc "]
82229[label="argumentList\n \"-window <int>\",\"Set max skip length between words; default is 5\" "]
92230[label="literal\n \"-window <int>\" "]
92231[label="literal\n \"Set max skip length between words; default is 5\" "]
62232[label="expressionStatement\n paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\"); "]
72233[label="methodInvocation\n paramDesc(\"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\") "]
82234[label="methodName\n paramDesc "]
82235[label="argumentList\n \"-sample <float>\",\"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\" "]
92236[label="literal\n \"-sample <float>\" "]
92237[label="additiveExpression\n \"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\"+\" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\" "]
102238[label="literal\n \"Set threshold for occurrence of words. Those that appear with higher frequency in the training data\" "]
102239[label="literal\n \" will be randomly down-sampled; default is 0.001, useful range is (0, 0.00001)\" "]
62240[label="expressionStatement\n paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\"); "]
72241[label="methodInvocation\n paramDesc(\"-hs\",\"Use Hierarchical Softmax; default is not used\") "]
82242[label="methodName\n paramDesc "]
82243[label="argumentList\n \"-hs\",\"Use Hierarchical Softmax; default is not used\" "]
92244[label="literal\n \"-hs\" "]
92245[label="literal\n \"Use Hierarchical Softmax; default is not used\" "]
62246[label="expressionStatement\n paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\"); "]
72247[label="methodInvocation\n paramDesc(\"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\") "]
82248[label="methodName\n paramDesc "]
82249[label="argumentList\n \"-negative <int>\",\"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\" "]
92250[label="literal\n \"-negative <int>\" "]
92251[label="literal\n \"Number of negative examples; default is 5, common values are 3 - 10 (0 = not used)\" "]
62252[label="expressionStatement\n paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\"); "]
72253[label="methodInvocation\n paramDesc(\"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\") "]
82254[label="methodName\n paramDesc "]
82255[label="argumentList\n \"-threads <int>\",\"Use <int> threads (default is the cores of local machine)\" "]
92256[label="literal\n \"-threads <int>\" "]
92257[label="literal\n \"Use <int> threads (default is the cores of local machine)\" "]
62258[label="expressionStatement\n paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\"); "]
72259[label="methodInvocation\n paramDesc(\"-iter <int>\",\"Run more training iterations (default 5)\") "]
82260[label="methodName\n paramDesc "]
82261[label="argumentList\n \"-iter <int>\",\"Run more training iterations (default 5)\" "]
92262[label="literal\n \"-iter <int>\" "]
92263[label="literal\n \"Run more training iterations (default 5)\" "]
62264[label="expressionStatement\n paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\"); "]
72265[label="methodInvocation\n paramDesc(\"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\") "]
82266[label="methodName\n paramDesc "]
82267[label="argumentList\n \"-min-count <int>\",\"This will discard words that appear less than <int> times; default is 5\" "]
92268[label="literal\n \"-min-count <int>\" "]
92269[label="literal\n \"This will discard words that appear less than <int> times; default is 5\" "]
62270[label="expressionStatement\n paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\"); "]
72271[label="methodInvocation\n paramDesc(\"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\") "]
82272[label="methodName\n paramDesc "]
82273[label="argumentList\n \"-alpha <float>\",\"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\" "]
92274[label="literal\n \"-alpha <float>\" "]
92275[label="literal\n \"Set the starting learning rate; default is 0.025 for skip-gram and 0.05 for CBOW\" "]
62276[label="expressionStatement\n paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\"); "]
72277[label="methodInvocation\n paramDesc(\"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\") "]
82278[label="methodName\n paramDesc "]
82279[label="argumentList\n \"-cbow\",\"Use the continuous bag of words model; default is skip-gram model\" "]
92280[label="literal\n \"-cbow\" "]
92281[label="literal\n \"Use the continuous bag of words model; default is skip-gram model\" "]
62282[label="expressionStatement\n localUsage(); "]
72283[label="methodInvocation\n localUsage() "]
82284[label="methodName\n localUsage "]
62285[label="expressionStatement\n System.exit(0); "]
72286[label="methodInvocation\n System.exit(0) "]
82287[label="typeName\n System "]
82288[label="literal\n 0 "]
32289[label="methodDeclaration\n protectedintargPos(Stringparam,String[]args){returnargPos(param,args,true);} "]
42290[label="methodModifier\n protected "]
42291[label="methodHeader\n intargPos(Stringparam,String[]args) "]
52292[label="integralType\n int "]
52293[label="methodDeclarator\n argPos(Stringparam,String[]args) "]
62294[label="formalParameterList\n Stringparam,String[]args "]
72295[label="formalParameter\n Stringparam "]
82296[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
82297[label="variableDeclaratorId\n param "]
72298[label="formalParameter\n String[]args "]
82299[label="unannArrayType\n String[] "]
92300[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
92301[label="dims\n [] "]
82302[label="variableDeclaratorId\n args "]
42303[label="block\n {returnargPos(param,args,true);} "]
52304[label="returnStatement\n returnargPos(param,args,true); "]
62305[label="methodInvocation_lfno_primary\n argPos(param,args,true) "]
72306[label="methodName\n argPos "]
72307[label="argumentList\n param,args,true "]
82308[label="expressionName\n param "]
82309[label="expressionName\n args "]
82310[label="literal\n true "]
32311[label="methodDeclaration\n protectedintargPos(Stringparam,String[]args,booleancheckArgNum){for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1;} "]
42312[label="methodModifier\n protected "]
42313[label="methodHeader\n intargPos(Stringparam,String[]args,booleancheckArgNum) "]
52314[label="integralType\n int "]
52315[label="methodDeclarator\n argPos(Stringparam,String[]args,booleancheckArgNum) "]
62316[label="formalParameterList\n Stringparam,String[]args,booleancheckArgNum "]
72317[label="formalParameters\n Stringparam,String[]args "]
82318[label="formalParameter\n Stringparam "]
92319[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
92320[label="variableDeclaratorId\n param "]
82321[label="formalParameter\n String[]args "]
92322[label="unannArrayType\n String[] "]
102323[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
102324[label="dims\n [] "]
92325[label="variableDeclaratorId\n args "]
72326[label="formalParameter\n booleancheckArgNum "]
82327[label="unannPrimitiveType\n boolean "]
82328[label="variableDeclaratorId\n checkArgNum "]
42329[label="block\n {for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1;} "]
52330[label="blockStatements\n for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}}return-1; "]
62331[label="basicForStatement\n for(inti=0;i<args.length;i++){if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}} "]
72332[label="localVariableDeclaration\n inti=0 "]
82333[label="integralType\n int "]
82334[label="variableDeclarator\n i=0 "]
92335[label="variableDeclaratorId\n i "]
92336[label="literal\n 0 "]
72337[label="relationalExpression\n i<args.length "]
82338[label="expressionName\n i "]
82339[label="expressionName\n args.length "]
92340[label="ambiguousName\n args "]
72341[label="postIncrementExpression\n i++ "]
82342[label="expressionName\n i "]
72343[label="block\n {if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;}} "]
82344[label="ifThenStatement\n if(param.equals(args[i])){if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;} "]
92345[label="methodInvocation_lfno_primary\n param.equals(args[i]) "]
102346[label="typeName\n param "]
102347[label="arrayAccess_lfno_primary\n args[i] "]
112348[label="expressionName\n args "]
112349[label="expressionName\n i "]
92350[label="block\n {if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni;} "]
102351[label="blockStatements\n if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param));returni; "]
112352[label="ifThenStatement\n if(checkArgNum&&(i==args.length-1))thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param)); "]
122353[label="conditionalAndExpression\n checkArgNum&&(i==args.length-1) "]
132354[label="expressionName\n checkArgNum "]
132355[label="primaryNoNewArray_lfno_primary\n (i==args.length-1) "]
142356[label="equalityExpression\n i==args.length-1 "]
152357[label="expressionName\n i "]
152358[label="additiveExpression\n args.length-1 "]
162359[label="expressionName\n args.length "]
172360[label="ambiguousName\n args "]
162361[label="literal\n 1 "]
122362[label="throwStatement\n thrownewIllegalArgumentException(String.format(\"Argument missing for %s\",param)); "]
132363[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(String.format(\"Argument missing for %s\",param)) "]
142364[label="methodInvocation_lfno_primary\n String.format(\"Argument missing for %s\",param) "]
152365[label="typeName\n String "]
152366[label="argumentList\n \"Argument missing for %s\",param "]
162367[label="literal\n \"Argument missing for %s\" "]
162368[label="expressionName\n param "]
112369[label="returnStatement\n returni; "]
122370[label="expressionName\n i "]
62371[label="returnStatement\n return-1; "]
72372[label="unaryExpression\n -1 "]
82373[label="literal\n 1 "]
32374[label="methodDeclaration\n protectedvoidsetConfig(String[]args,Configconfig){inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1]));} "]
42375[label="methodModifier\n protected "]
42376[label="methodHeader\n voidsetConfig(String[]args,Configconfig) "]
52377[label="result\n void "]
52378[label="methodDeclarator\n setConfig(String[]args,Configconfig) "]
62379[label="formalParameterList\n String[]args,Configconfig "]
72380[label="formalParameter\n String[]args "]
82381[label="unannArrayType\n String[] "]
92382[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
92383[label="dims\n [] "]
82384[label="variableDeclaratorId\n args "]
72385[label="formalParameter\n Configconfig "]
82386[label="unannClassType_lfno_unannClassOrInterfaceType\n Config "]
82387[label="variableDeclaratorId\n config "]
42388[label="block\n {inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1]));} "]
52389[label="blockStatements\n inti;if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1]));if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]);if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1);if(config.useContinuousBagOfWords())config.setAlpha(0.05f);if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1]));if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1]));if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1]));if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1);if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1]));if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1]));if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1]));if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1])); "]
62390[label="localVariableDeclarationStatement\n inti; "]
72391[label="localVariableDeclaration\n inti "]
82392[label="integralType\n int "]
82393[label="variableDeclaratorId\n i "]
62394[label="ifThenStatement\n if((i=argPos(\"-size\",args))>=0)config.setLayer1Size(Integer.parseInt(args[i+1])); "]
72395[label="relationalExpression\n (i=argPos(\"-size\",args))>=0 "]
82396[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-size\",args)) "]
92397[label="assignment\n i=argPos(\"-size\",args) "]
102398[label="expressionName\n i "]
102399[label="assignmentOperator\n = "]
102400[label="methodInvocation_lfno_primary\n argPos(\"-size\",args) "]
112401[label="methodName\n argPos "]
112402[label="argumentList\n \"-size\",args "]
122403[label="literal\n \"-size\" "]
122404[label="expressionName\n args "]
82405[label="literal\n 0 "]
72406[label="expressionStatement\n config.setLayer1Size(Integer.parseInt(args[i+1])); "]
82407[label="methodInvocation\n config.setLayer1Size(Integer.parseInt(args[i+1])) "]
92408[label="typeName\n config "]
92409[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102410[label="typeName\n Integer "]
102411[label="arrayAccess_lfno_primary\n args[i+1] "]
112412[label="expressionName\n args "]
112413[label="additiveExpression\n i+1 "]
122414[label="expressionName\n i "]
122415[label="literal\n 1 "]
62416[label="ifThenStatement\n if((i=argPos(\"-output\",args))>=0)config.setOutputFile(args[i+1]); "]
72417[label="relationalExpression\n (i=argPos(\"-output\",args))>=0 "]
82418[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-output\",args)) "]
92419[label="assignment\n i=argPos(\"-output\",args) "]
102420[label="expressionName\n i "]
102421[label="assignmentOperator\n = "]
102422[label="methodInvocation_lfno_primary\n argPos(\"-output\",args) "]
112423[label="methodName\n argPos "]
112424[label="argumentList\n \"-output\",args "]
122425[label="literal\n \"-output\" "]
122426[label="expressionName\n args "]
82427[label="literal\n 0 "]
72428[label="expressionStatement\n config.setOutputFile(args[i+1]); "]
82429[label="methodInvocation\n config.setOutputFile(args[i+1]) "]
92430[label="typeName\n config "]
92431[label="arrayAccess_lfno_primary\n args[i+1] "]
102432[label="expressionName\n args "]
102433[label="additiveExpression\n i+1 "]
112434[label="expressionName\n i "]
112435[label="literal\n 1 "]
62436[label="ifThenStatement\n if((i=argPos(\"-cbow\",args))>=0)config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1); "]
72437[label="relationalExpression\n (i=argPos(\"-cbow\",args))>=0 "]
82438[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-cbow\",args)) "]
92439[label="assignment\n i=argPos(\"-cbow\",args) "]
102440[label="expressionName\n i "]
102441[label="assignmentOperator\n = "]
102442[label="methodInvocation_lfno_primary\n argPos(\"-cbow\",args) "]
112443[label="methodName\n argPos "]
112444[label="argumentList\n \"-cbow\",args "]
122445[label="literal\n \"-cbow\" "]
122446[label="expressionName\n args "]
82447[label="literal\n 0 "]
72448[label="expressionStatement\n config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1); "]
82449[label="methodInvocation\n config.setUseContinuousBagOfWords(Integer.parseInt(args[i+1])==1) "]
92450[label="typeName\n config "]
92451[label="equalityExpression\n Integer.parseInt(args[i+1])==1 "]
102452[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
112453[label="typeName\n Integer "]
112454[label="arrayAccess_lfno_primary\n args[i+1] "]
122455[label="expressionName\n args "]
122456[label="additiveExpression\n i+1 "]
132457[label="expressionName\n i "]
132458[label="literal\n 1 "]
102459[label="literal\n 1 "]
62460[label="ifThenStatement\n if(config.useContinuousBagOfWords())config.setAlpha(0.05f); "]
72461[label="methodInvocation_lfno_primary\n config.useContinuousBagOfWords() "]
82462[label="typeName\n config "]
72463[label="expressionStatement\n config.setAlpha(0.05f); "]
82464[label="methodInvocation\n config.setAlpha(0.05f) "]
92465[label="typeName\n config "]
92466[label="literal\n 0.05f "]
62467[label="ifThenStatement\n if((i=argPos(\"-alpha\",args))>=0)config.setAlpha(Float.parseFloat(args[i+1])); "]
72468[label="relationalExpression\n (i=argPos(\"-alpha\",args))>=0 "]
82469[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-alpha\",args)) "]
92470[label="assignment\n i=argPos(\"-alpha\",args) "]
102471[label="expressionName\n i "]
102472[label="assignmentOperator\n = "]
102473[label="methodInvocation_lfno_primary\n argPos(\"-alpha\",args) "]
112474[label="methodName\n argPos "]
112475[label="argumentList\n \"-alpha\",args "]
122476[label="literal\n \"-alpha\" "]
122477[label="expressionName\n args "]
82478[label="literal\n 0 "]
72479[label="expressionStatement\n config.setAlpha(Float.parseFloat(args[i+1])); "]
82480[label="methodInvocation\n config.setAlpha(Float.parseFloat(args[i+1])) "]
92481[label="typeName\n config "]
92482[label="methodInvocation_lfno_primary\n Float.parseFloat(args[i+1]) "]
102483[label="typeName\n Float "]
102484[label="arrayAccess_lfno_primary\n args[i+1] "]
112485[label="expressionName\n args "]
112486[label="additiveExpression\n i+1 "]
122487[label="expressionName\n i "]
122488[label="literal\n 1 "]
62489[label="ifThenStatement\n if((i=argPos(\"-window\",args))>=0)config.setWindow(Integer.parseInt(args[i+1])); "]
72490[label="relationalExpression\n (i=argPos(\"-window\",args))>=0 "]
82491[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-window\",args)) "]
92492[label="assignment\n i=argPos(\"-window\",args) "]
102493[label="expressionName\n i "]
102494[label="assignmentOperator\n = "]
102495[label="methodInvocation_lfno_primary\n argPos(\"-window\",args) "]
112496[label="methodName\n argPos "]
112497[label="argumentList\n \"-window\",args "]
122498[label="literal\n \"-window\" "]
122499[label="expressionName\n args "]
82500[label="literal\n 0 "]
72501[label="expressionStatement\n config.setWindow(Integer.parseInt(args[i+1])); "]
82502[label="methodInvocation\n config.setWindow(Integer.parseInt(args[i+1])) "]
92503[label="typeName\n config "]
92504[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102505[label="typeName\n Integer "]
102506[label="arrayAccess_lfno_primary\n args[i+1] "]
112507[label="expressionName\n args "]
112508[label="additiveExpression\n i+1 "]
122509[label="expressionName\n i "]
122510[label="literal\n 1 "]
62511[label="ifThenStatement\n if((i=argPos(\"-sample\",args))>=0)config.setSample(Float.parseFloat(args[i+1])); "]
72512[label="relationalExpression\n (i=argPos(\"-sample\",args))>=0 "]
82513[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-sample\",args)) "]
92514[label="assignment\n i=argPos(\"-sample\",args) "]
102515[label="expressionName\n i "]
102516[label="assignmentOperator\n = "]
102517[label="methodInvocation_lfno_primary\n argPos(\"-sample\",args) "]
112518[label="methodName\n argPos "]
112519[label="argumentList\n \"-sample\",args "]
122520[label="literal\n \"-sample\" "]
122521[label="expressionName\n args "]
82522[label="literal\n 0 "]
72523[label="expressionStatement\n config.setSample(Float.parseFloat(args[i+1])); "]
82524[label="methodInvocation\n config.setSample(Float.parseFloat(args[i+1])) "]
92525[label="typeName\n config "]
92526[label="methodInvocation_lfno_primary\n Float.parseFloat(args[i+1]) "]
102527[label="typeName\n Float "]
102528[label="arrayAccess_lfno_primary\n args[i+1] "]
112529[label="expressionName\n args "]
112530[label="additiveExpression\n i+1 "]
122531[label="expressionName\n i "]
122532[label="literal\n 1 "]
62533[label="ifThenStatement\n if((i=argPos(\"-hs\",args))>=0)config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1); "]
72534[label="relationalExpression\n (i=argPos(\"-hs\",args))>=0 "]
82535[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-hs\",args)) "]
92536[label="assignment\n i=argPos(\"-hs\",args) "]
102537[label="expressionName\n i "]
102538[label="assignmentOperator\n = "]
102539[label="methodInvocation_lfno_primary\n argPos(\"-hs\",args) "]
112540[label="methodName\n argPos "]
112541[label="argumentList\n \"-hs\",args "]
122542[label="literal\n \"-hs\" "]
122543[label="expressionName\n args "]
82544[label="literal\n 0 "]
72545[label="expressionStatement\n config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1); "]
82546[label="methodInvocation\n config.setUseHierarchicalSoftmax(Integer.parseInt(args[i+1])==1) "]
92547[label="typeName\n config "]
92548[label="equalityExpression\n Integer.parseInt(args[i+1])==1 "]
102549[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
112550[label="typeName\n Integer "]
112551[label="arrayAccess_lfno_primary\n args[i+1] "]
122552[label="expressionName\n args "]
122553[label="additiveExpression\n i+1 "]
132554[label="expressionName\n i "]
132555[label="literal\n 1 "]
102556[label="literal\n 1 "]
62557[label="ifThenStatement\n if((i=argPos(\"-negative\",args))>=0)config.setNegative(Integer.parseInt(args[i+1])); "]
72558[label="relationalExpression\n (i=argPos(\"-negative\",args))>=0 "]
82559[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-negative\",args)) "]
92560[label="assignment\n i=argPos(\"-negative\",args) "]
102561[label="expressionName\n i "]
102562[label="assignmentOperator\n = "]
102563[label="methodInvocation_lfno_primary\n argPos(\"-negative\",args) "]
112564[label="methodName\n argPos "]
112565[label="argumentList\n \"-negative\",args "]
122566[label="literal\n \"-negative\" "]
122567[label="expressionName\n args "]
82568[label="literal\n 0 "]
72569[label="expressionStatement\n config.setNegative(Integer.parseInt(args[i+1])); "]
82570[label="methodInvocation\n config.setNegative(Integer.parseInt(args[i+1])) "]
92571[label="typeName\n config "]
92572[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102573[label="typeName\n Integer "]
102574[label="arrayAccess_lfno_primary\n args[i+1] "]
112575[label="expressionName\n args "]
112576[label="additiveExpression\n i+1 "]
122577[label="expressionName\n i "]
122578[label="literal\n 1 "]
62579[label="ifThenStatement\n if((i=argPos(\"-threads\",args))>=0)config.setNumThreads(Integer.parseInt(args[i+1])); "]
72580[label="relationalExpression\n (i=argPos(\"-threads\",args))>=0 "]
82581[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-threads\",args)) "]
92582[label="assignment\n i=argPos(\"-threads\",args) "]
102583[label="expressionName\n i "]
102584[label="assignmentOperator\n = "]
102585[label="methodInvocation_lfno_primary\n argPos(\"-threads\",args) "]
112586[label="methodName\n argPos "]
112587[label="argumentList\n \"-threads\",args "]
122588[label="literal\n \"-threads\" "]
122589[label="expressionName\n args "]
82590[label="literal\n 0 "]
72591[label="expressionStatement\n config.setNumThreads(Integer.parseInt(args[i+1])); "]
82592[label="methodInvocation\n config.setNumThreads(Integer.parseInt(args[i+1])) "]
92593[label="typeName\n config "]
92594[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102595[label="typeName\n Integer "]
102596[label="arrayAccess_lfno_primary\n args[i+1] "]
112597[label="expressionName\n args "]
112598[label="additiveExpression\n i+1 "]
122599[label="expressionName\n i "]
122600[label="literal\n 1 "]
62601[label="ifThenStatement\n if((i=argPos(\"-iter\",args))>=0)config.setIter(Integer.parseInt(args[i+1])); "]
72602[label="relationalExpression\n (i=argPos(\"-iter\",args))>=0 "]
82603[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-iter\",args)) "]
92604[label="assignment\n i=argPos(\"-iter\",args) "]
102605[label="expressionName\n i "]
102606[label="assignmentOperator\n = "]
102607[label="methodInvocation_lfno_primary\n argPos(\"-iter\",args) "]
112608[label="methodName\n argPos "]
112609[label="argumentList\n \"-iter\",args "]
122610[label="literal\n \"-iter\" "]
122611[label="expressionName\n args "]
82612[label="literal\n 0 "]
72613[label="expressionStatement\n config.setIter(Integer.parseInt(args[i+1])); "]
82614[label="methodInvocation\n config.setIter(Integer.parseInt(args[i+1])) "]
92615[label="typeName\n config "]
92616[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102617[label="typeName\n Integer "]
102618[label="arrayAccess_lfno_primary\n args[i+1] "]
112619[label="expressionName\n args "]
112620[label="additiveExpression\n i+1 "]
122621[label="expressionName\n i "]
122622[label="literal\n 1 "]
62623[label="ifThenStatement\n if((i=argPos(\"-min-count\",args))>=0)config.setMinCount(Integer.parseInt(args[i+1])); "]
72624[label="relationalExpression\n (i=argPos(\"-min-count\",args))>=0 "]
82625[label="primaryNoNewArray_lfno_primary\n (i=argPos(\"-min-count\",args)) "]
92626[label="assignment\n i=argPos(\"-min-count\",args) "]
102627[label="expressionName\n i "]
102628[label="assignmentOperator\n = "]
102629[label="methodInvocation_lfno_primary\n argPos(\"-min-count\",args) "]
112630[label="methodName\n argPos "]
112631[label="argumentList\n \"-min-count\",args "]
122632[label="literal\n \"-min-count\" "]
122633[label="expressionName\n args "]
82634[label="literal\n 0 "]
72635[label="expressionStatement\n config.setMinCount(Integer.parseInt(args[i+1])); "]
82636[label="methodInvocation\n config.setMinCount(Integer.parseInt(args[i+1])) "]
92637[label="typeName\n config "]
92638[label="methodInvocation_lfno_primary\n Integer.parseInt(args[i+1]) "]
102639[label="typeName\n Integer "]
102640[label="arrayAccess_lfno_primary\n args[i+1] "]
112641[label="expressionName\n args "]
112642[label="additiveExpression\n i+1 "]
122643[label="expressionName\n i "]
122644[label="literal\n 1 "]
02645[label="compilationUnit\n packagecom.hankcs.hanlp.mining.word2vec;importcom.hankcs.hanlp.algorithm.MaxHeap;importjava.util.*;publicabstractclassAbstractVectorModel<K>{Map<K,Vector>storage;publicAbstractVectorModel(Map<K,Vector>storage){this.storage=storage;}publicAbstractVectorModel(){storage=newTreeMap<K,Vector>();}finalpublicVectorvector(Kkey){Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector;}publicfloatsimilarity(Kwhat,Kwith){VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith);}publicList<Map.Entry<K,Float>>nearest(Kkey,intsize){Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size);}privateList<Map.Entry<K,Float>>nearest(Kkey,Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector){returnnearest(vector,10);}publicList<Map.Entry<K,Float>>nearest(Kkey){returnnearest(key,10);}finalList<Map.Entry<K,Float>>queryNearest(Stringquery,intsize){if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();}}publicabstractVectorquery(Stringquery);publicintsize(){returnstorage.size();}publicintdimension(){if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size();}publicVectorremove(Kkey){returnstorage.remove(key);}}<EOF> "]
12646[label="packageDeclaration\n packagecom.hankcs.hanlp.mining.word2vec; "]
22647[label="packageName\n com.hankcs.hanlp.mining.word2vec "]
32648[label="packageName\n com.hankcs.hanlp.mining "]
42649[label="packageName\n com.hankcs.hanlp "]
52650[label="packageName\n com.hankcs "]
62651[label="packageName\n com "]
12652[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.algorithm.MaxHeap; "]
22653[label="typeName\n com.hankcs.hanlp.algorithm.MaxHeap "]
32654[label="packageOrTypeName\n com.hankcs.hanlp.algorithm "]
42655[label="packageOrTypeName\n com.hankcs.hanlp "]
52656[label="packageOrTypeName\n com.hankcs "]
62657[label="packageOrTypeName\n com "]
12658[label="typeImportOnDemandDeclaration\n importjava.util.*; "]
22659[label="packageOrTypeName\n java.util "]
32660[label="packageOrTypeName\n java "]
12661[label="normalClassDeclaration\n publicabstractclassAbstractVectorModel<K>{Map<K,Vector>storage;publicAbstractVectorModel(Map<K,Vector>storage){this.storage=storage;}publicAbstractVectorModel(){storage=newTreeMap<K,Vector>();}finalpublicVectorvector(Kkey){Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector;}publicfloatsimilarity(Kwhat,Kwith){VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith);}publicList<Map.Entry<K,Float>>nearest(Kkey,intsize){Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size);}privateList<Map.Entry<K,Float>>nearest(Kkey,Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector){returnnearest(vector,10);}publicList<Map.Entry<K,Float>>nearest(Kkey){returnnearest(key,10);}finalList<Map.Entry<K,Float>>queryNearest(Stringquery,intsize){if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();}}publicabstractVectorquery(Stringquery);publicintsize(){returnstorage.size();}publicintdimension(){if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size();}publicVectorremove(Kkey){returnstorage.remove(key);}} "]
22662[label="classModifier\n public "]
22663[label="classModifier\n abstract "]
22664[label="typeParameters\n <K> "]
32665[label="typeParameter\n K "]
22666[label="classBody\n {Map<K,Vector>storage;publicAbstractVectorModel(Map<K,Vector>storage){this.storage=storage;}publicAbstractVectorModel(){storage=newTreeMap<K,Vector>();}finalpublicVectorvector(Kkey){Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector;}publicfloatsimilarity(Kwhat,Kwith){VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith);}publicList<Map.Entry<K,Float>>nearest(Kkey,intsize){Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size);}privateList<Map.Entry<K,Float>>nearest(Kkey,Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();}publicList<Map.Entry<K,Float>>nearest(Vectorvector){returnnearest(vector,10);}publicList<Map.Entry<K,Float>>nearest(Kkey){returnnearest(key,10);}finalList<Map.Entry<K,Float>>queryNearest(Stringquery,intsize){if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();}}publicabstractVectorquery(Stringquery);publicintsize(){returnstorage.size();}publicintdimension(){if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size();}publicVectorremove(Kkey){returnstorage.remove(key);}} "]
32667[label="fieldDeclaration\n Map<K,Vector>storage; "]
42668[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<K,Vector> "]
52669[label="typeArguments\n <K,Vector> "]
62670[label="typeArgumentList\n K,Vector "]
72671[label="classType_lfno_classOrInterfaceType\n K "]
72672[label="classType_lfno_classOrInterfaceType\n Vector "]
42673[label="variableDeclaratorId\n storage "]
32674[label="constructorDeclaration\n publicAbstractVectorModel(Map<K,Vector>storage){this.storage=storage;} "]
42675[label="constructorModifier\n public "]
42676[label="constructorDeclarator\n AbstractVectorModel(Map<K,Vector>storage) "]
52677[label="simpleTypeName\n AbstractVectorModel "]
52678[label="formalParameter\n Map<K,Vector>storage "]
62679[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<K,Vector> "]
72680[label="typeArguments\n <K,Vector> "]
82681[label="typeArgumentList\n K,Vector "]
92682[label="classType_lfno_classOrInterfaceType\n K "]
92683[label="classType_lfno_classOrInterfaceType\n Vector "]
62684[label="variableDeclaratorId\n storage "]
42685[label="constructorBody\n {this.storage=storage;} "]
52686[label="expressionStatement\n this.storage=storage; "]
62687[label="assignment\n this.storage=storage "]
72688[label="fieldAccess\n this.storage "]
82689[label="primaryNoNewArray_lfno_primary\n this "]
72690[label="assignmentOperator\n = "]
72691[label="expressionName\n storage "]
32692[label="constructorDeclaration\n publicAbstractVectorModel(){storage=newTreeMap<K,Vector>();} "]
42693[label="constructorModifier\n public "]
42694[label="constructorDeclarator\n AbstractVectorModel() "]
52695[label="simpleTypeName\n AbstractVectorModel "]
42696[label="constructorBody\n {storage=newTreeMap<K,Vector>();} "]
52697[label="expressionStatement\n storage=newTreeMap<K,Vector>(); "]
62698[label="assignment\n storage=newTreeMap<K,Vector>() "]
72699[label="expressionName\n storage "]
72700[label="assignmentOperator\n = "]
72701[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<K,Vector>() "]
82702[label="typeArguments\n <K,Vector> "]
92703[label="typeArgumentList\n K,Vector "]
102704[label="classType_lfno_classOrInterfaceType\n K "]
102705[label="classType_lfno_classOrInterfaceType\n Vector "]
32706[label="methodDeclaration\n finalpublicVectorvector(Kkey){Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector;} "]
42707[label="methodModifier\n final "]
42708[label="methodModifier\n public "]
42709[label="methodHeader\n Vectorvector(Kkey) "]
52710[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
52711[label="methodDeclarator\n vector(Kkey) "]
62712[label="formalParameter\n Kkey "]
72713[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
72714[label="variableDeclaratorId\n key "]
42715[label="block\n {Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector;} "]
52716[label="blockStatements\n Vectorvector=storage.get(key);if(vector==null)returnnull;returnvector; "]
62717[label="localVariableDeclarationStatement\n Vectorvector=storage.get(key); "]
72718[label="localVariableDeclaration\n Vectorvector=storage.get(key) "]
82719[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
82720[label="variableDeclarator\n vector=storage.get(key) "]
92721[label="variableDeclaratorId\n vector "]
92722[label="methodInvocation_lfno_primary\n storage.get(key) "]
102723[label="typeName\n storage "]
102724[label="expressionName\n key "]
62725[label="ifThenStatement\n if(vector==null)returnnull; "]
72726[label="equalityExpression\n vector==null "]
82727[label="expressionName\n vector "]
82728[label="literal\n null "]
72729[label="returnStatement\n returnnull; "]
82730[label="literal\n null "]
62731[label="returnStatement\n returnvector; "]
72732[label="expressionName\n vector "]
32733[label="methodDeclaration\n publicfloatsimilarity(Kwhat,Kwith){VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith);} "]
42734[label="methodModifier\n public "]
42735[label="methodHeader\n floatsimilarity(Kwhat,Kwith) "]
52736[label="floatingPointType\n float "]
52737[label="methodDeclarator\n similarity(Kwhat,Kwith) "]
62738[label="formalParameterList\n Kwhat,Kwith "]
72739[label="formalParameter\n Kwhat "]
82740[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
82741[label="variableDeclaratorId\n what "]
72742[label="formalParameter\n Kwith "]
82743[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
82744[label="variableDeclaratorId\n with "]
42745[label="block\n {VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith);} "]
52746[label="blockStatements\n VectorvectorWhat=storage.get(what);if(vectorWhat==null){return-1f;}VectorvectorWith=storage.get(with);if(vectorWith==null){return-1f;}returnvectorWhat.cosineForUnitVector(vectorWith); "]
62747[label="localVariableDeclarationStatement\n VectorvectorWhat=storage.get(what); "]
72748[label="localVariableDeclaration\n VectorvectorWhat=storage.get(what) "]
82749[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
82750[label="variableDeclarator\n vectorWhat=storage.get(what) "]
92751[label="variableDeclaratorId\n vectorWhat "]
92752[label="methodInvocation_lfno_primary\n storage.get(what) "]
102753[label="typeName\n storage "]
102754[label="expressionName\n what "]
62755[label="ifThenStatement\n if(vectorWhat==null){return-1f;} "]
72756[label="equalityExpression\n vectorWhat==null "]
82757[label="expressionName\n vectorWhat "]
82758[label="literal\n null "]
72759[label="block\n {return-1f;} "]
82760[label="returnStatement\n return-1f; "]
92761[label="unaryExpression\n -1f "]
102762[label="literal\n 1f "]
62763[label="localVariableDeclarationStatement\n VectorvectorWith=storage.get(with); "]
72764[label="localVariableDeclaration\n VectorvectorWith=storage.get(with) "]
82765[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
82766[label="variableDeclarator\n vectorWith=storage.get(with) "]
92767[label="variableDeclaratorId\n vectorWith "]
92768[label="methodInvocation_lfno_primary\n storage.get(with) "]
102769[label="typeName\n storage "]
102770[label="expressionName\n with "]
62771[label="ifThenStatement\n if(vectorWith==null){return-1f;} "]
72772[label="equalityExpression\n vectorWith==null "]
82773[label="expressionName\n vectorWith "]
82774[label="literal\n null "]
72775[label="block\n {return-1f;} "]
82776[label="returnStatement\n return-1f; "]
92777[label="unaryExpression\n -1f "]
102778[label="literal\n 1f "]
62779[label="returnStatement\n returnvectorWhat.cosineForUnitVector(vectorWith); "]
72780[label="methodInvocation_lfno_primary\n vectorWhat.cosineForUnitVector(vectorWith) "]
82781[label="typeName\n vectorWhat "]
82782[label="expressionName\n vectorWith "]
32783[label="methodDeclaration\n publicList<Map.Entry<K,Float>>nearest(Kkey,intsize){Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size);} "]
42784[label="methodModifier\n public "]
42785[label="methodHeader\n List<Map.Entry<K,Float>>nearest(Kkey,intsize) "]
52786[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
62787[label="typeArguments\n <Map.Entry<K,Float>> "]
72788[label="classOrInterfaceType\n Map.Entry<K,Float> "]
82789[label="classType_lfno_classOrInterfaceType\n Map "]
82790[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
92791[label="typeArguments\n <K,Float> "]
102792[label="typeArgumentList\n K,Float "]
112793[label="classType_lfno_classOrInterfaceType\n K "]
112794[label="classType_lfno_classOrInterfaceType\n Float "]
52795[label="methodDeclarator\n nearest(Kkey,intsize) "]
62796[label="formalParameterList\n Kkey,intsize "]
72797[label="formalParameter\n Kkey "]
82798[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
82799[label="variableDeclaratorId\n key "]
72800[label="formalParameter\n intsize "]
82801[label="integralType\n int "]
82802[label="variableDeclaratorId\n size "]
42803[label="block\n {Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size);} "]
52804[label="blockStatements\n Vectorvector=storage.get(key);if(vector==null){returnCollections.emptyList();}returnnearest(key,vector,size); "]
62805[label="localVariableDeclarationStatement\n Vectorvector=storage.get(key); "]
72806[label="localVariableDeclaration\n Vectorvector=storage.get(key) "]
82807[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
82808[label="variableDeclarator\n vector=storage.get(key) "]
92809[label="variableDeclaratorId\n vector "]
92810[label="methodInvocation_lfno_primary\n storage.get(key) "]
102811[label="typeName\n storage "]
102812[label="expressionName\n key "]
62813[label="ifThenStatement\n if(vector==null){returnCollections.emptyList();} "]
72814[label="equalityExpression\n vector==null "]
82815[label="expressionName\n vector "]
82816[label="literal\n null "]
72817[label="block\n {returnCollections.emptyList();} "]
82818[label="returnStatement\n returnCollections.emptyList(); "]
92819[label="methodInvocation_lfno_primary\n Collections.emptyList() "]
102820[label="typeName\n Collections "]
62821[label="returnStatement\n returnnearest(key,vector,size); "]
72822[label="methodInvocation_lfno_primary\n nearest(key,vector,size) "]
82823[label="methodName\n nearest "]
82824[label="argumentList\n key,vector,size "]
92825[label="expressionName\n key "]
92826[label="expressionName\n vector "]
92827[label="expressionName\n size "]
32828[label="methodDeclaration\n privateList<Map.Entry<K,Float>>nearest(Kkey,Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();} "]
42829[label="methodModifier\n private "]
42830[label="methodHeader\n List<Map.Entry<K,Float>>nearest(Kkey,Vectorvector,intsize) "]
52831[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
62832[label="typeArguments\n <Map.Entry<K,Float>> "]
72833[label="classOrInterfaceType\n Map.Entry<K,Float> "]
82834[label="classType_lfno_classOrInterfaceType\n Map "]
82835[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
92836[label="typeArguments\n <K,Float> "]
102837[label="typeArgumentList\n K,Float "]
112838[label="classType_lfno_classOrInterfaceType\n K "]
112839[label="classType_lfno_classOrInterfaceType\n Float "]
52840[label="methodDeclarator\n nearest(Kkey,Vectorvector,intsize) "]
62841[label="formalParameterList\n Kkey,Vectorvector,intsize "]
72842[label="formalParameters\n Kkey,Vectorvector "]
82843[label="formalParameter\n Kkey "]
92844[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
92845[label="variableDeclaratorId\n key "]
82846[label="formalParameter\n Vectorvector "]
92847[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
92848[label="variableDeclaratorId\n vector "]
72849[label="formalParameter\n intsize "]
82850[label="integralType\n int "]
82851[label="variableDeclaratorId\n size "]
42852[label="block\n {MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();} "]
52853[label="blockStatements\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList(); "]
62854[label="localVariableDeclarationStatement\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}); "]
72855[label="localVariableDeclaration\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
82856[label="unannClassType_lfno_unannClassOrInterfaceType\n MaxHeap<Map.Entry<K,Float>> "]
92857[label="typeArguments\n <Map.Entry<K,Float>> "]
102858[label="classOrInterfaceType\n Map.Entry<K,Float> "]
112859[label="classType_lfno_classOrInterfaceType\n Map "]
112860[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
122861[label="typeArguments\n <K,Float> "]
132862[label="typeArgumentList\n K,Float "]
142863[label="classType_lfno_classOrInterfaceType\n K "]
142864[label="classType_lfno_classOrInterfaceType\n Float "]
82865[label="variableDeclarator\n maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
92866[label="variableDeclaratorId\n maxHeap "]
92867[label="classInstanceCreationExpression_lfno_primary\n newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
102868[label="typeArguments\n <Map.Entry<K,Float>> "]
112869[label="classOrInterfaceType\n Map.Entry<K,Float> "]
122870[label="classType_lfno_classOrInterfaceType\n Map "]
122871[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
132872[label="typeArguments\n <K,Float> "]
142873[label="typeArgumentList\n K,Float "]
152874[label="classType_lfno_classOrInterfaceType\n K "]
152875[label="classType_lfno_classOrInterfaceType\n Float "]
102876[label="argumentList\n size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
112877[label="expressionName\n size "]
112878[label="classInstanceCreationExpression_lfno_primary\n newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
122879[label="typeArguments\n <Map.Entry<K,Float>> "]
132880[label="classOrInterfaceType\n Map.Entry<K,Float> "]
142881[label="classType_lfno_classOrInterfaceType\n Map "]
142882[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
152883[label="typeArguments\n <K,Float> "]
162884[label="typeArgumentList\n K,Float "]
172885[label="classType_lfno_classOrInterfaceType\n K "]
172886[label="classType_lfno_classOrInterfaceType\n Float "]
122887[label="classBody\n {@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
132888[label="methodDeclaration\n @Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());} "]
142889[label="markerAnnotation\n @Override "]
152890[label="typeName\n Override "]
142891[label="methodModifier\n public "]
142892[label="methodHeader\n intcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2) "]
152893[label="integralType\n int "]
152894[label="methodDeclarator\n compare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2) "]
162895[label="formalParameterList\n Map.Entry<K,Float>o1,Map.Entry<K,Float>o2 "]
172896[label="formalParameter\n Map.Entry<K,Float>o1 "]
182897[label="unannClassOrInterfaceType\n Map.Entry<K,Float> "]
192898[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
192899[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Float> "]
202900[label="typeArguments\n <K,Float> "]
212901[label="typeArgumentList\n K,Float "]
222902[label="classType_lfno_classOrInterfaceType\n K "]
222903[label="classType_lfno_classOrInterfaceType\n Float "]
182904[label="variableDeclaratorId\n o1 "]
172905[label="formalParameter\n Map.Entry<K,Float>o2 "]
182906[label="unannClassOrInterfaceType\n Map.Entry<K,Float> "]
192907[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
192908[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Float> "]
202909[label="typeArguments\n <K,Float> "]
212910[label="typeArgumentList\n K,Float "]
222911[label="classType_lfno_classOrInterfaceType\n K "]
222912[label="classType_lfno_classOrInterfaceType\n Float "]
182913[label="variableDeclaratorId\n o2 "]
142914[label="block\n {returno1.getValue().compareTo(o2.getValue());} "]
152915[label="returnStatement\n returno1.getValue().compareTo(o2.getValue()); "]
162916[label="primary\n o1.getValue().compareTo(o2.getValue()) "]
172917[label="methodInvocation_lfno_primary\n o1.getValue() "]
182918[label="typeName\n o1 "]
172919[label="methodInvocation_lf_primary\n .compareTo(o2.getValue()) "]
182920[label="methodInvocation_lfno_primary\n o2.getValue() "]
192921[label="typeName\n o2 "]
62922[label="enhancedForStatement\n for(Map.Entry<K,Vector>entry:storage.entrySet()){if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));} "]
72923[label="unannClassOrInterfaceType\n Map.Entry<K,Vector> "]
82924[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
82925[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Vector> "]
92926[label="typeArguments\n <K,Vector> "]
102927[label="typeArgumentList\n K,Vector "]
112928[label="classType_lfno_classOrInterfaceType\n K "]
112929[label="classType_lfno_classOrInterfaceType\n Vector "]
72930[label="variableDeclaratorId\n entry "]
72931[label="methodInvocation_lfno_primary\n storage.entrySet() "]
82932[label="typeName\n storage "]
72933[label="block\n {if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));} "]
82934[label="blockStatements\n if(entry.getKey().equals(key)){continue;}maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector))); "]
92935[label="ifThenStatement\n if(entry.getKey().equals(key)){continue;} "]
102936[label="primary\n entry.getKey().equals(key) "]
112937[label="methodInvocation_lfno_primary\n entry.getKey() "]
122938[label="typeName\n entry "]
112939[label="methodInvocation_lf_primary\n .equals(key) "]
122940[label="expressionName\n key "]
102941[label="block\n {continue;} "]
112942[label="continueStatement\n continue; "]
92943[label="expressionStatement\n maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector))); "]
102944[label="methodInvocation\n maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector))) "]
112945[label="typeName\n maxHeap "]
112946[label="classInstanceCreationExpression_lfno_primary\n newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)) "]
122947[label="typeArguments\n <K,Float> "]
132948[label="typeArgumentList\n K,Float "]
142949[label="classType_lfno_classOrInterfaceType\n K "]
142950[label="classType_lfno_classOrInterfaceType\n Float "]
122951[label="argumentList\n entry.getKey(),entry.getValue().cosineForUnitVector(vector) "]
132952[label="methodInvocation_lfno_primary\n entry.getKey() "]
142953[label="typeName\n entry "]
132954[label="primary\n entry.getValue().cosineForUnitVector(vector) "]
142955[label="methodInvocation_lfno_primary\n entry.getValue() "]
152956[label="typeName\n entry "]
142957[label="methodInvocation_lf_primary\n .cosineForUnitVector(vector) "]
152958[label="expressionName\n vector "]
62959[label="returnStatement\n returnmaxHeap.toList(); "]
72960[label="methodInvocation_lfno_primary\n maxHeap.toList() "]
82961[label="typeName\n maxHeap "]
32962[label="methodDeclaration\n publicList<Map.Entry<K,Float>>nearest(Vectorvector,intsize){MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();} "]
42963[label="methodModifier\n public "]
42964[label="methodHeader\n List<Map.Entry<K,Float>>nearest(Vectorvector,intsize) "]
52965[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
62966[label="typeArguments\n <Map.Entry<K,Float>> "]
72967[label="classOrInterfaceType\n Map.Entry<K,Float> "]
82968[label="classType_lfno_classOrInterfaceType\n Map "]
82969[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
92970[label="typeArguments\n <K,Float> "]
102971[label="typeArgumentList\n K,Float "]
112972[label="classType_lfno_classOrInterfaceType\n K "]
112973[label="classType_lfno_classOrInterfaceType\n Float "]
52974[label="methodDeclarator\n nearest(Vectorvector,intsize) "]
62975[label="formalParameterList\n Vectorvector,intsize "]
72976[label="formalParameter\n Vectorvector "]
82977[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
82978[label="variableDeclaratorId\n vector "]
72979[label="formalParameter\n intsize "]
82980[label="integralType\n int "]
82981[label="variableDeclaratorId\n size "]
42982[label="block\n {MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList();} "]
52983[label="blockStatements\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}});for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));}returnmaxHeap.toList(); "]
62984[label="localVariableDeclarationStatement\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}); "]
72985[label="localVariableDeclaration\n MaxHeap<Map.Entry<K,Float>>maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
82986[label="unannClassType_lfno_unannClassOrInterfaceType\n MaxHeap<Map.Entry<K,Float>> "]
92987[label="typeArguments\n <Map.Entry<K,Float>> "]
102988[label="classOrInterfaceType\n Map.Entry<K,Float> "]
112989[label="classType_lfno_classOrInterfaceType\n Map "]
112990[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
122991[label="typeArguments\n <K,Float> "]
132992[label="typeArgumentList\n K,Float "]
142993[label="classType_lfno_classOrInterfaceType\n K "]
142994[label="classType_lfno_classOrInterfaceType\n Float "]
82995[label="variableDeclarator\n maxHeap=newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
92996[label="variableDeclaratorId\n maxHeap "]
92997[label="classInstanceCreationExpression_lfno_primary\n newMaxHeap<Map.Entry<K,Float>>(size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}}) "]
102998[label="typeArguments\n <Map.Entry<K,Float>> "]
112999[label="classOrInterfaceType\n Map.Entry<K,Float> "]
123000[label="classType_lfno_classOrInterfaceType\n Map "]
123001[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
133002[label="typeArguments\n <K,Float> "]
143003[label="typeArgumentList\n K,Float "]
153004[label="classType_lfno_classOrInterfaceType\n K "]
153005[label="classType_lfno_classOrInterfaceType\n Float "]
103006[label="argumentList\n size,newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
113007[label="expressionName\n size "]
113008[label="classInstanceCreationExpression_lfno_primary\n newComparator<Map.Entry<K,Float>>(){@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
123009[label="typeArguments\n <Map.Entry<K,Float>> "]
133010[label="classOrInterfaceType\n Map.Entry<K,Float> "]
143011[label="classType_lfno_classOrInterfaceType\n Map "]
143012[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
153013[label="typeArguments\n <K,Float> "]
163014[label="typeArgumentList\n K,Float "]
173015[label="classType_lfno_classOrInterfaceType\n K "]
173016[label="classType_lfno_classOrInterfaceType\n Float "]
123017[label="classBody\n {@Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());}} "]
133018[label="methodDeclaration\n @Overridepublicintcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2){returno1.getValue().compareTo(o2.getValue());} "]
143019[label="markerAnnotation\n @Override "]
153020[label="typeName\n Override "]
143021[label="methodModifier\n public "]
143022[label="methodHeader\n intcompare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2) "]
153023[label="integralType\n int "]
153024[label="methodDeclarator\n compare(Map.Entry<K,Float>o1,Map.Entry<K,Float>o2) "]
163025[label="formalParameterList\n Map.Entry<K,Float>o1,Map.Entry<K,Float>o2 "]
173026[label="formalParameter\n Map.Entry<K,Float>o1 "]
183027[label="unannClassOrInterfaceType\n Map.Entry<K,Float> "]
193028[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
193029[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Float> "]
203030[label="typeArguments\n <K,Float> "]
213031[label="typeArgumentList\n K,Float "]
223032[label="classType_lfno_classOrInterfaceType\n K "]
223033[label="classType_lfno_classOrInterfaceType\n Float "]
183034[label="variableDeclaratorId\n o1 "]
173035[label="formalParameter\n Map.Entry<K,Float>o2 "]
183036[label="unannClassOrInterfaceType\n Map.Entry<K,Float> "]
193037[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
193038[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Float> "]
203039[label="typeArguments\n <K,Float> "]
213040[label="typeArgumentList\n K,Float "]
223041[label="classType_lfno_classOrInterfaceType\n K "]
223042[label="classType_lfno_classOrInterfaceType\n Float "]
183043[label="variableDeclaratorId\n o2 "]
143044[label="block\n {returno1.getValue().compareTo(o2.getValue());} "]
153045[label="returnStatement\n returno1.getValue().compareTo(o2.getValue()); "]
163046[label="primary\n o1.getValue().compareTo(o2.getValue()) "]
173047[label="methodInvocation_lfno_primary\n o1.getValue() "]
183048[label="typeName\n o1 "]
173049[label="methodInvocation_lf_primary\n .compareTo(o2.getValue()) "]
183050[label="methodInvocation_lfno_primary\n o2.getValue() "]
193051[label="typeName\n o2 "]
63052[label="enhancedForStatement\n for(Map.Entry<K,Vector>entry:storage.entrySet()){maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));} "]
73053[label="unannClassOrInterfaceType\n Map.Entry<K,Vector> "]
83054[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
83055[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<K,Vector> "]
93056[label="typeArguments\n <K,Vector> "]
103057[label="typeArgumentList\n K,Vector "]
113058[label="classType_lfno_classOrInterfaceType\n K "]
113059[label="classType_lfno_classOrInterfaceType\n Vector "]
73060[label="variableDeclaratorId\n entry "]
73061[label="methodInvocation_lfno_primary\n storage.entrySet() "]
83062[label="typeName\n storage "]
73063[label="block\n {maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)));} "]
83064[label="expressionStatement\n maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector))); "]
93065[label="methodInvocation\n maxHeap.add(newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector))) "]
103066[label="typeName\n maxHeap "]
103067[label="classInstanceCreationExpression_lfno_primary\n newAbstractMap.SimpleEntry<K,Float>(entry.getKey(),entry.getValue().cosineForUnitVector(vector)) "]
113068[label="typeArguments\n <K,Float> "]
123069[label="typeArgumentList\n K,Float "]
133070[label="classType_lfno_classOrInterfaceType\n K "]
133071[label="classType_lfno_classOrInterfaceType\n Float "]
113072[label="argumentList\n entry.getKey(),entry.getValue().cosineForUnitVector(vector) "]
123073[label="methodInvocation_lfno_primary\n entry.getKey() "]
133074[label="typeName\n entry "]
123075[label="primary\n entry.getValue().cosineForUnitVector(vector) "]
133076[label="methodInvocation_lfno_primary\n entry.getValue() "]
143077[label="typeName\n entry "]
133078[label="methodInvocation_lf_primary\n .cosineForUnitVector(vector) "]
143079[label="expressionName\n vector "]
63080[label="returnStatement\n returnmaxHeap.toList(); "]
73081[label="methodInvocation_lfno_primary\n maxHeap.toList() "]
83082[label="typeName\n maxHeap "]
33083[label="methodDeclaration\n publicList<Map.Entry<K,Float>>nearest(Vectorvector){returnnearest(vector,10);} "]
43084[label="methodModifier\n public "]
43085[label="methodHeader\n List<Map.Entry<K,Float>>nearest(Vectorvector) "]
53086[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
63087[label="typeArguments\n <Map.Entry<K,Float>> "]
73088[label="classOrInterfaceType\n Map.Entry<K,Float> "]
83089[label="classType_lfno_classOrInterfaceType\n Map "]
83090[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
93091[label="typeArguments\n <K,Float> "]
103092[label="typeArgumentList\n K,Float "]
113093[label="classType_lfno_classOrInterfaceType\n K "]
113094[label="classType_lfno_classOrInterfaceType\n Float "]
53095[label="methodDeclarator\n nearest(Vectorvector) "]
63096[label="formalParameter\n Vectorvector "]
73097[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
73098[label="variableDeclaratorId\n vector "]
43099[label="block\n {returnnearest(vector,10);} "]
53100[label="returnStatement\n returnnearest(vector,10); "]
63101[label="methodInvocation_lfno_primary\n nearest(vector,10) "]
73102[label="methodName\n nearest "]
73103[label="argumentList\n vector,10 "]
83104[label="expressionName\n vector "]
83105[label="literal\n 10 "]
33106[label="methodDeclaration\n publicList<Map.Entry<K,Float>>nearest(Kkey){returnnearest(key,10);} "]
43107[label="methodModifier\n public "]
43108[label="methodHeader\n List<Map.Entry<K,Float>>nearest(Kkey) "]
53109[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
63110[label="typeArguments\n <Map.Entry<K,Float>> "]
73111[label="classOrInterfaceType\n Map.Entry<K,Float> "]
83112[label="classType_lfno_classOrInterfaceType\n Map "]
83113[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
93114[label="typeArguments\n <K,Float> "]
103115[label="typeArgumentList\n K,Float "]
113116[label="classType_lfno_classOrInterfaceType\n K "]
113117[label="classType_lfno_classOrInterfaceType\n Float "]
53118[label="methodDeclarator\n nearest(Kkey) "]
63119[label="formalParameter\n Kkey "]
73120[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
73121[label="variableDeclaratorId\n key "]
43122[label="block\n {returnnearest(key,10);} "]
53123[label="returnStatement\n returnnearest(key,10); "]
63124[label="methodInvocation_lfno_primary\n nearest(key,10) "]
73125[label="methodName\n nearest "]
73126[label="argumentList\n key,10 "]
83127[label="expressionName\n key "]
83128[label="literal\n 10 "]
33129[label="methodDeclaration\n finalList<Map.Entry<K,Float>>queryNearest(Stringquery,intsize){if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();}} "]
43130[label="methodModifier\n final "]
43131[label="methodHeader\n List<Map.Entry<K,Float>>queryNearest(Stringquery,intsize) "]
53132[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Map.Entry<K,Float>> "]
63133[label="typeArguments\n <Map.Entry<K,Float>> "]
73134[label="classOrInterfaceType\n Map.Entry<K,Float> "]
83135[label="classType_lfno_classOrInterfaceType\n Map "]
83136[label="classType_lf_classOrInterfaceType\n .Entry<K,Float> "]
93137[label="typeArguments\n <K,Float> "]
103138[label="typeArgumentList\n K,Float "]
113139[label="classType_lfno_classOrInterfaceType\n K "]
113140[label="classType_lfno_classOrInterfaceType\n Float "]
53141[label="methodDeclarator\n queryNearest(Stringquery,intsize) "]
63142[label="formalParameterList\n Stringquery,intsize "]
73143[label="formalParameter\n Stringquery "]
83144[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
83145[label="variableDeclaratorId\n query "]
73146[label="formalParameter\n intsize "]
83147[label="integralType\n int "]
83148[label="variableDeclaratorId\n size "]
43149[label="block\n {if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();}} "]
53150[label="blockStatements\n if(query==null||query.length()==0){returnCollections.emptyList();}try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();} "]
63151[label="ifThenStatement\n if(query==null||query.length()==0){returnCollections.emptyList();} "]
73152[label="conditionalOrExpression\n query==null||query.length()==0 "]
83153[label="equalityExpression\n query==null "]
93154[label="expressionName\n query "]
93155[label="literal\n null "]
83156[label="equalityExpression\n query.length()==0 "]
93157[label="methodInvocation_lfno_primary\n query.length() "]
103158[label="typeName\n query "]
93159[label="literal\n 0 "]
73160[label="block\n {returnCollections.emptyList();} "]
83161[label="returnStatement\n returnCollections.emptyList(); "]
93162[label="methodInvocation_lfno_primary\n Collections.emptyList() "]
103163[label="typeName\n Collections "]
63164[label="tryStatement\n try{returnnearest(query(query),size);}catch(Exceptione){returnCollections.emptyList();} "]
73165[label="block\n {returnnearest(query(query),size);} "]
83166[label="returnStatement\n returnnearest(query(query),size); "]
93167[label="methodInvocation_lfno_primary\n nearest(query(query),size) "]
103168[label="methodName\n nearest "]
103169[label="argumentList\n query(query),size "]
113170[label="methodInvocation_lfno_primary\n query(query) "]
123171[label="methodName\n query "]
123172[label="expressionName\n query "]
113173[label="expressionName\n size "]
73174[label="catchClause\n catch(Exceptione){returnCollections.emptyList();} "]
83175[label="catchFormalParameter\n Exceptione "]
93176[label="unannClassType\n Exception "]
93177[label="variableDeclaratorId\n e "]
83178[label="block\n {returnCollections.emptyList();} "]
93179[label="returnStatement\n returnCollections.emptyList(); "]
103180[label="methodInvocation_lfno_primary\n Collections.emptyList() "]
113181[label="typeName\n Collections "]
33182[label="methodDeclaration\n publicabstractVectorquery(Stringquery); "]
43183[label="methodModifier\n public "]
43184[label="methodModifier\n abstract "]
43185[label="methodHeader\n Vectorquery(Stringquery) "]
53186[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
53187[label="methodDeclarator\n query(Stringquery) "]
63188[label="formalParameter\n Stringquery "]
73189[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
73190[label="variableDeclaratorId\n query "]
43191[label="methodBody\n ; "]
33192[label="methodDeclaration\n publicintsize(){returnstorage.size();} "]
43193[label="methodModifier\n public "]
43194[label="methodHeader\n intsize() "]
53195[label="integralType\n int "]
53196[label="methodDeclarator\n size() "]
43197[label="block\n {returnstorage.size();} "]
53198[label="returnStatement\n returnstorage.size(); "]
63199[label="methodInvocation_lfno_primary\n storage.size() "]
73200[label="typeName\n storage "]
33201[label="methodDeclaration\n publicintdimension(){if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size();} "]
43202[label="methodModifier\n public "]
43203[label="methodHeader\n intdimension() "]
53204[label="integralType\n int "]
53205[label="methodDeclarator\n dimension() "]
43206[label="block\n {if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size();} "]
53207[label="blockStatements\n if(storage==null||storage.isEmpty()){return0;}returnstorage.values().iterator().next().size(); "]
63208[label="ifThenStatement\n if(storage==null||storage.isEmpty()){return0;} "]
73209[label="conditionalOrExpression\n storage==null||storage.isEmpty() "]
83210[label="equalityExpression\n storage==null "]
93211[label="expressionName\n storage "]
93212[label="literal\n null "]
83213[label="methodInvocation_lfno_primary\n storage.isEmpty() "]
93214[label="typeName\n storage "]
73215[label="block\n {return0;} "]
83216[label="returnStatement\n return0; "]
93217[label="literal\n 0 "]
63218[label="returnStatement\n returnstorage.values().iterator().next().size(); "]
73219[label="primary\n storage.values().iterator().next().size() "]
83220[label="methodInvocation_lfno_primary\n storage.values() "]
93221[label="typeName\n storage "]
83222[label="methodInvocation_lf_primary\n .iterator() "]
83223[label="methodInvocation_lf_primary\n .next() "]
83224[label="methodInvocation_lf_primary\n .size() "]
33225[label="methodDeclaration\n publicVectorremove(Kkey){returnstorage.remove(key);} "]
43226[label="methodModifier\n public "]
43227[label="methodHeader\n Vectorremove(Kkey) "]
53228[label="unannClassType_lfno_unannClassOrInterfaceType\n Vector "]
53229[label="methodDeclarator\n remove(Kkey) "]
63230[label="formalParameter\n Kkey "]
73231[label="unannClassType_lfno_unannClassOrInterfaceType\n K "]
73232[label="variableDeclaratorId\n key "]
43233[label="block\n {returnstorage.remove(key);} "]
53234[label="returnStatement\n returnstorage.remove(key); "]
63235[label="methodInvocation_lfno_primary\n storage.remove(key) "]
73236[label="typeName\n storage "]
73237[label="expressionName\n key "]
03238[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;publicclassActionextendsAbstractInexactActionimplementsActionType{publicAction(){}publicAction(intname,intrel){super(name,rel);}}<EOF> "]
13239[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
23240[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
33241[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
43242[label="packageName\n com.hankcs.hanlp.dependency "]
53243[label="packageName\n com.hankcs.hanlp "]
63244[label="packageName\n com.hankcs "]
73245[label="packageName\n com "]
13246[label="normalClassDeclaration\n publicclassActionextendsAbstractInexactActionimplementsActionType{publicAction(){}publicAction(intname,intrel){super(name,rel);}} "]
23247[label="classModifier\n public "]
23248[label="superclass\n extendsAbstractInexactAction "]
33249[label="classType\n AbstractInexactAction "]
23250[label="superinterfaces\n implementsActionType "]
33251[label="classType\n ActionType "]
23252[label="classBody\n {publicAction(){}publicAction(intname,intrel){super(name,rel);}} "]
33253[label="constructorDeclaration\n publicAction(){} "]
43254[label="constructorModifier\n public "]
43255[label="constructorDeclarator\n Action() "]
53256[label="simpleTypeName\n Action "]
43257[label="constructorBody\n {} "]
33258[label="constructorDeclaration\n publicAction(intname,intrel){super(name,rel);} "]
43259[label="constructorModifier\n public "]
43260[label="constructorDeclarator\n Action(intname,intrel) "]
53261[label="simpleTypeName\n Action "]
53262[label="formalParameterList\n intname,intrel "]
63263[label="formalParameter\n intname "]
73264[label="integralType\n int "]
73265[label="variableDeclaratorId\n name "]
63266[label="formalParameter\n intrel "]
73267[label="integralType\n int "]
73268[label="variableDeclaratorId\n rel "]
43269[label="constructorBody\n {super(name,rel);} "]
53270[label="explicitConstructorInvocation\n super(name,rel); "]
63271[label="argumentList\n name,rel "]
73272[label="expressionName\n name "]
73273[label="expressionName\n rel "]
03274[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;publicclassActionFactoryimplementsActionType{publicstaticActionmake_shift(){returnnewAction(kShift,0);}publicstaticActionmake_left_arc(finalintrel){returnnewAction(kLeftArc,rel);}publicstaticActionmake_right_arc(finalintrel){returnnewAction(kRightArc,rel);}}<EOF> "]
13275[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
23276[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
33277[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
43278[label="packageName\n com.hankcs.hanlp.dependency "]
53279[label="packageName\n com.hankcs.hanlp "]
63280[label="packageName\n com.hankcs "]
73281[label="packageName\n com "]
13282[label="normalClassDeclaration\n publicclassActionFactoryimplementsActionType{publicstaticActionmake_shift(){returnnewAction(kShift,0);}publicstaticActionmake_left_arc(finalintrel){returnnewAction(kLeftArc,rel);}publicstaticActionmake_right_arc(finalintrel){returnnewAction(kRightArc,rel);}} "]
23283[label="classModifier\n public "]
23284[label="superinterfaces\n implementsActionType "]
33285[label="classType\n ActionType "]
23286[label="classBody\n {publicstaticActionmake_shift(){returnnewAction(kShift,0);}publicstaticActionmake_left_arc(finalintrel){returnnewAction(kLeftArc,rel);}publicstaticActionmake_right_arc(finalintrel){returnnewAction(kRightArc,rel);}} "]
33287[label="methodDeclaration\n publicstaticActionmake_shift(){returnnewAction(kShift,0);} "]
43288[label="methodModifier\n public "]
43289[label="methodModifier\n static "]
43290[label="methodHeader\n Actionmake_shift() "]
53291[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
53292[label="methodDeclarator\n make_shift() "]
43293[label="block\n {returnnewAction(kShift,0);} "]
53294[label="returnStatement\n returnnewAction(kShift,0); "]
63295[label="classInstanceCreationExpression_lfno_primary\n newAction(kShift,0) "]
73296[label="argumentList\n kShift,0 "]
83297[label="expressionName\n kShift "]
83298[label="literal\n 0 "]
33299[label="methodDeclaration\n publicstaticActionmake_left_arc(finalintrel){returnnewAction(kLeftArc,rel);} "]
43300[label="methodModifier\n public "]
43301[label="methodModifier\n static "]
43302[label="methodHeader\n Actionmake_left_arc(finalintrel) "]
53303[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
53304[label="methodDeclarator\n make_left_arc(finalintrel) "]
63305[label="formalParameter\n finalintrel "]
73306[label="variableModifier\n final "]
73307[label="integralType\n int "]
73308[label="variableDeclaratorId\n rel "]
43309[label="block\n {returnnewAction(kLeftArc,rel);} "]
53310[label="returnStatement\n returnnewAction(kLeftArc,rel); "]
63311[label="classInstanceCreationExpression_lfno_primary\n newAction(kLeftArc,rel) "]
73312[label="argumentList\n kLeftArc,rel "]
83313[label="expressionName\n kLeftArc "]
83314[label="expressionName\n rel "]
33315[label="methodDeclaration\n publicstaticActionmake_right_arc(finalintrel){returnnewAction(kRightArc,rel);} "]
43316[label="methodModifier\n public "]
43317[label="methodModifier\n static "]
43318[label="methodHeader\n Actionmake_right_arc(finalintrel) "]
53319[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
53320[label="methodDeclarator\n make_right_arc(finalintrel) "]
63321[label="formalParameter\n finalintrel "]
73322[label="variableModifier\n final "]
73323[label="integralType\n int "]
73324[label="variableDeclaratorId\n rel "]
43325[label="block\n {returnnewAction(kRightArc,rel);} "]
53326[label="returnStatement\n returnnewAction(kRightArc,rel); "]
63327[label="classInstanceCreationExpression_lfno_primary\n newAction(kRightArc,rel) "]
73328[label="argumentList\n kRightArc,rel "]
83329[label="expressionName\n kRightArc "]
83330[label="expressionName\n rel "]
03331[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;publicinterfaceActionType{intkNone=0;intkShift=1;intkLeftArc=2;intkRightArc=3;}<EOF> "]
13332[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
23333[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
33334[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
43335[label="packageName\n com.hankcs.hanlp.dependency "]
53336[label="packageName\n com.hankcs.hanlp "]
63337[label="packageName\n com.hankcs "]
73338[label="packageName\n com "]
13339[label="normalInterfaceDeclaration\n publicinterfaceActionType{intkNone=0;intkShift=1;intkLeftArc=2;intkRightArc=3;} "]
23340[label="interfaceModifier\n public "]
23341[label="interfaceBody\n {intkNone=0;intkShift=1;intkLeftArc=2;intkRightArc=3;} "]
33342[label="constantDeclaration\n intkNone=0; "]
43343[label="integralType\n int "]
43344[label="variableDeclarator\n kNone=0 "]
53345[label="variableDeclaratorId\n kNone "]
53346[label="literal\n 0 "]
33347[label="constantDeclaration\n intkShift=1; "]
43348[label="integralType\n int "]
43349[label="variableDeclarator\n kShift=1 "]
53350[label="variableDeclaratorId\n kShift "]
53351[label="literal\n 1 "]
33352[label="constantDeclaration\n intkLeftArc=2; "]
43353[label="integralType\n int "]
43354[label="variableDeclarator\n kLeftArc=2 "]
53355[label="variableDeclaratorId\n kLeftArc "]
53356[label="literal\n 2 "]
33357[label="constantDeclaration\n intkRightArc=3; "]
43358[label="integralType\n int "]
43359[label="variableDeclarator\n kRightArc=3 "]
53360[label="variableDeclaratorId\n kRightArc "]
53361[label="literal\n 3 "]
03362[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;importcom.hankcs.hanlp.dependency.nnparser.Dependency;importjava.util.ArrayList;importjava.util.List;publicclassActionUtilsimplementsActionType{publicstaticbooleanis_shift(finalActionact){return(act.name()==kShift);}publicstaticbooleanis_left_arc(finalActionact,int[]deprel){if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}publicstaticbooleanis_right_arc(finalActionact,int[]deprel){if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}voidget_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions){intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions);}voidget_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions){List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));}}voidget_oracle_actions2(Dependencyinstance,List<Action>actions){get_oracle_actions2(instance.heads,instance.deprels,actions);}voidget_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions){actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];}}voidget_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions){inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];}}}<EOF> "]
13363[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
23364[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
33365[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
43366[label="packageName\n com.hankcs.hanlp.dependency "]
53367[label="packageName\n com.hankcs.hanlp "]
63368[label="packageName\n com.hankcs "]
73369[label="packageName\n com "]
13370[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.dependency.nnparser.Dependency; "]
23371[label="typeName\n com.hankcs.hanlp.dependency.nnparser.Dependency "]
33372[label="packageOrTypeName\n com.hankcs.hanlp.dependency.nnparser "]
43373[label="packageOrTypeName\n com.hankcs.hanlp.dependency "]
53374[label="packageOrTypeName\n com.hankcs.hanlp "]
63375[label="packageOrTypeName\n com.hankcs "]
73376[label="packageOrTypeName\n com "]
13377[label="singleTypeImportDeclaration\n importjava.util.ArrayList; "]
23378[label="typeName\n java.util.ArrayList "]
33379[label="packageOrTypeName\n java.util "]
43380[label="packageOrTypeName\n java "]
13381[label="singleTypeImportDeclaration\n importjava.util.List; "]
23382[label="typeName\n java.util.List "]
33383[label="packageOrTypeName\n java.util "]
43384[label="packageOrTypeName\n java "]
13385[label="normalClassDeclaration\n publicclassActionUtilsimplementsActionType{publicstaticbooleanis_shift(finalActionact){return(act.name()==kShift);}publicstaticbooleanis_left_arc(finalActionact,int[]deprel){if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}publicstaticbooleanis_right_arc(finalActionact,int[]deprel){if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}voidget_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions){intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions);}voidget_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions){List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));}}voidget_oracle_actions2(Dependencyinstance,List<Action>actions){get_oracle_actions2(instance.heads,instance.deprels,actions);}voidget_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions){actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];}}voidget_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions){inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];}}} "]
23386[label="classModifier\n public "]
23387[label="superinterfaces\n implementsActionType "]
33388[label="classType\n ActionType "]
23389[label="classBody\n {publicstaticbooleanis_shift(finalActionact){return(act.name()==kShift);}publicstaticbooleanis_left_arc(finalActionact,int[]deprel){if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}publicstaticbooleanis_right_arc(finalActionact,int[]deprel){if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;}voidget_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions){intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions);}voidget_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions){List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));}}voidget_oracle_actions2(Dependencyinstance,List<Action>actions){get_oracle_actions2(instance.heads,instance.deprels,actions);}voidget_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions){actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];}}voidget_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions){inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];}}} "]
33390[label="methodDeclaration\n publicstaticbooleanis_shift(finalActionact){return(act.name()==kShift);} "]
43391[label="methodModifier\n public "]
43392[label="methodModifier\n static "]
43393[label="methodHeader\n booleanis_shift(finalActionact) "]
53394[label="unannPrimitiveType\n boolean "]
53395[label="methodDeclarator\n is_shift(finalActionact) "]
63396[label="formalParameter\n finalActionact "]
73397[label="variableModifier\n final "]
73398[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
73399[label="variableDeclaratorId\n act "]
43400[label="block\n {return(act.name()==kShift);} "]
53401[label="returnStatement\n return(act.name()==kShift); "]
63402[label="primaryNoNewArray_lfno_primary\n (act.name()==kShift) "]
73403[label="equalityExpression\n act.name()==kShift "]
83404[label="methodInvocation_lfno_primary\n act.name() "]
93405[label="typeName\n act "]
83406[label="expressionName\n kShift "]
33407[label="methodDeclaration\n publicstaticbooleanis_left_arc(finalActionact,int[]deprel){if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;} "]
43408[label="methodModifier\n public "]
43409[label="methodModifier\n static "]
43410[label="methodHeader\n booleanis_left_arc(finalActionact,int[]deprel) "]
53411[label="unannPrimitiveType\n boolean "]
53412[label="methodDeclarator\n is_left_arc(finalActionact,int[]deprel) "]
63413[label="formalParameterList\n finalActionact,int[]deprel "]
73414[label="formalParameter\n finalActionact "]
83415[label="variableModifier\n final "]
83416[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
83417[label="variableDeclaratorId\n act "]
73418[label="formalParameter\n int[]deprel "]
83419[label="unannArrayType\n int[] "]
93420[label="integralType\n int "]
93421[label="dims\n [] "]
83422[label="variableDeclaratorId\n deprel "]
43423[label="block\n {if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;} "]
53424[label="blockStatements\n if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse; "]
63425[label="ifThenStatement\n if(act.name()==kLeftArc){deprel[0]=act.rel();returntrue;} "]
73426[label="equalityExpression\n act.name()==kLeftArc "]
83427[label="methodInvocation_lfno_primary\n act.name() "]
93428[label="typeName\n act "]
83429[label="expressionName\n kLeftArc "]
73430[label="block\n {deprel[0]=act.rel();returntrue;} "]
83431[label="blockStatements\n deprel[0]=act.rel();returntrue; "]
93432[label="expressionStatement\n deprel[0]=act.rel(); "]
103433[label="assignment\n deprel[0]=act.rel() "]
113434[label="arrayAccess\n deprel[0] "]
123435[label="expressionName\n deprel "]
123436[label="literal\n 0 "]
113437[label="assignmentOperator\n = "]
113438[label="methodInvocation_lfno_primary\n act.rel() "]
123439[label="typeName\n act "]
93440[label="returnStatement\n returntrue; "]
103441[label="literal\n true "]
63442[label="expressionStatement\n deprel[0]=0; "]
73443[label="assignment\n deprel[0]=0 "]
83444[label="arrayAccess\n deprel[0] "]
93445[label="expressionName\n deprel "]
93446[label="literal\n 0 "]
83447[label="assignmentOperator\n = "]
83448[label="literal\n 0 "]
63449[label="returnStatement\n returnfalse; "]
73450[label="literal\n false "]
33451[label="methodDeclaration\n publicstaticbooleanis_right_arc(finalActionact,int[]deprel){if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;} "]
43452[label="methodModifier\n public "]
43453[label="methodModifier\n static "]
43454[label="methodHeader\n booleanis_right_arc(finalActionact,int[]deprel) "]
53455[label="unannPrimitiveType\n boolean "]
53456[label="methodDeclarator\n is_right_arc(finalActionact,int[]deprel) "]
63457[label="formalParameterList\n finalActionact,int[]deprel "]
73458[label="formalParameter\n finalActionact "]
83459[label="variableModifier\n final "]
83460[label="unannClassType_lfno_unannClassOrInterfaceType\n Action "]
83461[label="variableDeclaratorId\n act "]
73462[label="formalParameter\n int[]deprel "]
83463[label="unannArrayType\n int[] "]
93464[label="integralType\n int "]
93465[label="dims\n [] "]
83466[label="variableDeclaratorId\n deprel "]
43467[label="block\n {if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse;} "]
53468[label="blockStatements\n if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;}deprel[0]=0;returnfalse; "]
63469[label="ifThenStatement\n if(act.name()==kRightArc){deprel[0]=act.rel();returntrue;} "]
73470[label="equalityExpression\n act.name()==kRightArc "]
83471[label="methodInvocation_lfno_primary\n act.name() "]
93472[label="typeName\n act "]
83473[label="expressionName\n kRightArc "]
73474[label="block\n {deprel[0]=act.rel();returntrue;} "]
83475[label="blockStatements\n deprel[0]=act.rel();returntrue; "]
93476[label="expressionStatement\n deprel[0]=act.rel(); "]
103477[label="assignment\n deprel[0]=act.rel() "]
113478[label="arrayAccess\n deprel[0] "]
123479[label="expressionName\n deprel "]
123480[label="literal\n 0 "]
113481[label="assignmentOperator\n = "]
113482[label="methodInvocation_lfno_primary\n act.rel() "]
123483[label="typeName\n act "]
93484[label="returnStatement\n returntrue; "]
103485[label="literal\n true "]
63486[label="expressionStatement\n deprel[0]=0; "]
73487[label="assignment\n deprel[0]=0 "]
83488[label="arrayAccess\n deprel[0] "]
93489[label="expressionName\n deprel "]
93490[label="literal\n 0 "]
83491[label="assignmentOperator\n = "]
83492[label="literal\n 0 "]
63493[label="returnStatement\n returnfalse; "]
73494[label="literal\n false "]
33495[label="methodDeclaration\n voidget_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions){intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions);} "]
43496[label="methodHeader\n voidget_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions) "]
53497[label="result\n void "]
53498[label="methodDeclarator\n get_oracle_actions(List<Integer>heads,List<Integer>deprels,List<Action>actions) "]
63499[label="formalParameterList\n List<Integer>heads,List<Integer>deprels,List<Action>actions "]
73500[label="formalParameters\n List<Integer>heads,List<Integer>deprels "]
83501[label="formalParameter\n List<Integer>heads "]
93502[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103503[label="typeArguments\n <Integer> "]
113504[label="classType_lfno_classOrInterfaceType\n Integer "]
93505[label="variableDeclaratorId\n heads "]
83506[label="formalParameter\n List<Integer>deprels "]
93507[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103508[label="typeArguments\n <Integer> "]
113509[label="classType_lfno_classOrInterfaceType\n Integer "]
93510[label="variableDeclaratorId\n deprels "]
73511[label="formalParameter\n List<Action>actions "]
83512[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Action> "]
93513[label="typeArguments\n <Action> "]
103514[label="classType_lfno_classOrInterfaceType\n Action "]
83515[label="variableDeclaratorId\n actions "]
43516[label="block\n {intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions);} "]
53517[label="blockStatements\n intN=heads.size();introot=-1;List<List<Integer>>tree=newArrayList<List<Integer>>(N);actions.clear();for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}}get_oracle_actions_travel(root,heads,deprels,tree,actions); "]
63518[label="localVariableDeclarationStatement\n intN=heads.size(); "]
73519[label="localVariableDeclaration\n intN=heads.size() "]
83520[label="integralType\n int "]
83521[label="variableDeclarator\n N=heads.size() "]
93522[label="variableDeclaratorId\n N "]
93523[label="methodInvocation_lfno_primary\n heads.size() "]
103524[label="typeName\n heads "]
63525[label="localVariableDeclarationStatement\n introot=-1; "]
73526[label="localVariableDeclaration\n introot=-1 "]
83527[label="integralType\n int "]
83528[label="variableDeclarator\n root=-1 "]
93529[label="variableDeclaratorId\n root "]
93530[label="unaryExpression\n -1 "]
103531[label="literal\n 1 "]
63532[label="localVariableDeclarationStatement\n List<List<Integer>>tree=newArrayList<List<Integer>>(N); "]
73533[label="localVariableDeclaration\n List<List<Integer>>tree=newArrayList<List<Integer>>(N) "]
83534[label="unannClassType_lfno_unannClassOrInterfaceType\n List<List<Integer>> "]
93535[label="typeArguments\n <List<Integer>> "]
103536[label="classType_lfno_classOrInterfaceType\n List<Integer> "]
113537[label="typeArguments\n <Integer> "]
123538[label="classType_lfno_classOrInterfaceType\n Integer "]
83539[label="variableDeclarator\n tree=newArrayList<List<Integer>>(N) "]
93540[label="variableDeclaratorId\n tree "]
93541[label="classInstanceCreationExpression_lfno_primary\n newArrayList<List<Integer>>(N) "]
103542[label="typeArguments\n <List<Integer>> "]
113543[label="classType_lfno_classOrInterfaceType\n List<Integer> "]
123544[label="typeArguments\n <Integer> "]
133545[label="classType_lfno_classOrInterfaceType\n Integer "]
103546[label="expressionName\n N "]
63547[label="expressionStatement\n actions.clear(); "]
73548[label="methodInvocation\n actions.clear() "]
83549[label="typeName\n actions "]
63550[label="basicForStatement\n for(inti=0;i<N;++i){inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}} "]
73551[label="localVariableDeclaration\n inti=0 "]
83552[label="integralType\n int "]
83553[label="variableDeclarator\n i=0 "]
93554[label="variableDeclaratorId\n i "]
93555[label="literal\n 0 "]
73556[label="relationalExpression\n i<N "]
83557[label="expressionName\n i "]
83558[label="expressionName\n N "]
73559[label="preIncrementExpression\n ++i "]
83560[label="expressionName\n i "]
73561[label="block\n {inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);}} "]
83562[label="blockStatements\n inthead=heads.get(i);if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);} "]
93563[label="localVariableDeclarationStatement\n inthead=heads.get(i); "]
103564[label="localVariableDeclaration\n inthead=heads.get(i) "]
113565[label="integralType\n int "]
113566[label="variableDeclarator\n head=heads.get(i) "]
123567[label="variableDeclaratorId\n head "]
123568[label="methodInvocation_lfno_primary\n heads.get(i) "]
133569[label="typeName\n heads "]
133570[label="expressionName\n i "]
93571[label="ifThenElseStatement\n if(head==-1){if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;}else{tree.get(head).add(i);} "]
103572[label="equalityExpression\n head==-1 "]
113573[label="expressionName\n head "]
113574[label="unaryExpression\n -1 "]
123575[label="literal\n 1 "]
103576[label="block\n {if(root==-1)System.err.println(\"error: there should be only one root.\");root=i;} "]
113577[label="blockStatements\n if(root==-1)System.err.println(\"error: there should be only one root.\");root=i; "]
123578[label="ifThenStatement\n if(root==-1)System.err.println(\"error: there should be only one root.\"); "]
133579[label="equalityExpression\n root==-1 "]
143580[label="expressionName\n root "]
143581[label="unaryExpression\n -1 "]
153582[label="literal\n 1 "]
133583[label="expressionStatement\n System.err.println(\"error: there should be only one root.\"); "]
143584[label="methodInvocation\n System.err.println(\"error: there should be only one root.\") "]
153585[label="typeName\n System.err "]
163586[label="packageOrTypeName\n System "]
153587[label="literal\n \"error: there should be only one root.\" "]
123588[label="expressionStatement\n root=i; "]
133589[label="assignment\n root=i "]
143590[label="expressionName\n root "]
143591[label="assignmentOperator\n = "]
143592[label="expressionName\n i "]
103593[label="block\n {tree.get(head).add(i);} "]
113594[label="expressionStatement\n tree.get(head).add(i); "]
123595[label="methodInvocation\n tree.get(head).add(i) "]
133596[label="methodInvocation_lfno_primary\n tree.get(head) "]
143597[label="typeName\n tree "]
143598[label="expressionName\n head "]
133599[label="expressionName\n i "]
63600[label="expressionStatement\n get_oracle_actions_travel(root,heads,deprels,tree,actions); "]
73601[label="methodInvocation\n get_oracle_actions_travel(root,heads,deprels,tree,actions) "]
83602[label="methodName\n get_oracle_actions_travel "]
83603[label="argumentList\n root,heads,deprels,tree,actions "]
93604[label="expressionName\n root "]
93605[label="expressionName\n heads "]
93606[label="expressionName\n deprels "]
93607[label="expressionName\n tree "]
93608[label="expressionName\n actions "]
33609[label="methodDeclaration\n voidget_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions){List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));}} "]
43610[label="methodHeader\n voidget_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions) "]
53611[label="result\n void "]
53612[label="methodDeclarator\n get_oracle_actions_travel(introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions) "]
63613[label="formalParameterList\n introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree,List<Action>actions "]
73614[label="formalParameters\n introot,List<Integer>heads,List<Integer>deprels,List<List<Integer>>tree "]
83615[label="formalParameter\n introot "]
93616[label="integralType\n int "]
93617[label="variableDeclaratorId\n root "]
83618[label="formalParameter\n List<Integer>heads "]
93619[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103620[label="typeArguments\n <Integer> "]
113621[label="classType_lfno_classOrInterfaceType\n Integer "]
93622[label="variableDeclaratorId\n heads "]
83623[label="formalParameter\n List<Integer>deprels "]
93624[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103625[label="typeArguments\n <Integer> "]
113626[label="classType_lfno_classOrInterfaceType\n Integer "]
93627[label="variableDeclaratorId\n deprels "]
83628[label="formalParameter\n List<List<Integer>>tree "]
93629[label="unannClassType_lfno_unannClassOrInterfaceType\n List<List<Integer>> "]
103630[label="typeArguments\n <List<Integer>> "]
113631[label="classType_lfno_classOrInterfaceType\n List<Integer> "]
123632[label="typeArguments\n <Integer> "]
133633[label="classType_lfno_classOrInterfaceType\n Integer "]
93634[label="variableDeclaratorId\n tree "]
73635[label="formalParameter\n List<Action>actions "]
83636[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Action> "]
93637[label="typeArguments\n <Action> "]
103638[label="classType_lfno_classOrInterfaceType\n Action "]
83639[label="variableDeclaratorId\n actions "]
43640[label="block\n {List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));}} "]
53641[label="blockStatements\n List<Integer>children=tree.get(root);inti;for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);}actions.add(ActionFactory.make_shift());for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));}for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));} "]
63642[label="localVariableDeclarationStatement\n List<Integer>children=tree.get(root); "]
73643[label="localVariableDeclaration\n List<Integer>children=tree.get(root) "]
83644[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
93645[label="typeArguments\n <Integer> "]
103646[label="classType_lfno_classOrInterfaceType\n Integer "]
83647[label="variableDeclarator\n children=tree.get(root) "]
93648[label="variableDeclaratorId\n children "]
93649[label="methodInvocation_lfno_primary\n tree.get(root) "]
103650[label="typeName\n tree "]
103651[label="expressionName\n root "]
63652[label="localVariableDeclarationStatement\n inti; "]
73653[label="localVariableDeclaration\n inti "]
83654[label="integralType\n int "]
83655[label="variableDeclaratorId\n i "]
63656[label="basicForStatement\n for(i=0;i<children.size()&&children.get(i)<root;++i){get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);} "]
73657[label="assignment\n i=0 "]
83658[label="expressionName\n i "]
83659[label="assignmentOperator\n = "]
83660[label="literal\n 0 "]
73661[label="conditionalAndExpression\n i<children.size()&&children.get(i)<root "]
83662[label="relationalExpression\n i<children.size() "]
93663[label="expressionName\n i "]
93664[label="methodInvocation_lfno_primary\n children.size() "]
103665[label="typeName\n children "]
83666[label="relationalExpression\n children.get(i)<root "]
93667[label="methodInvocation_lfno_primary\n children.get(i) "]
103668[label="typeName\n children "]
103669[label="expressionName\n i "]
93670[label="expressionName\n root "]
73671[label="preIncrementExpression\n ++i "]
83672[label="expressionName\n i "]
73673[label="block\n {get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions);} "]
83674[label="expressionStatement\n get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions); "]
93675[label="methodInvocation\n get_oracle_actions_travel(children.get(i),heads,deprels,tree,actions) "]
103676[label="methodName\n get_oracle_actions_travel "]
103677[label="argumentList\n children.get(i),heads,deprels,tree,actions "]
113678[label="methodInvocation_lfno_primary\n children.get(i) "]
123679[label="typeName\n children "]
123680[label="expressionName\n i "]
113681[label="expressionName\n heads "]
113682[label="expressionName\n deprels "]
113683[label="expressionName\n tree "]
113684[label="expressionName\n actions "]
63685[label="expressionStatement\n actions.add(ActionFactory.make_shift()); "]
73686[label="methodInvocation\n actions.add(ActionFactory.make_shift()) "]
83687[label="typeName\n actions "]
83688[label="methodInvocation_lfno_primary\n ActionFactory.make_shift() "]
93689[label="typeName\n ActionFactory "]
63690[label="basicForStatement\n for(intj=i;j<children.size();++j){intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));} "]
73691[label="localVariableDeclaration\n intj=i "]
83692[label="integralType\n int "]
83693[label="variableDeclarator\n j=i "]
93694[label="variableDeclaratorId\n j "]
93695[label="expressionName\n i "]
73696[label="relationalExpression\n j<children.size() "]
83697[label="expressionName\n j "]
83698[label="methodInvocation_lfno_primary\n children.size() "]
93699[label="typeName\n children "]
73700[label="preIncrementExpression\n ++j "]
83701[label="expressionName\n j "]
73702[label="block\n {intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child)));} "]
83703[label="blockStatements\n intchild=children.get(j);get_oracle_actions_travel(child,heads,deprels,tree,actions);actions.add(ActionFactory.make_right_arc(deprels.get(child))); "]
93704[label="localVariableDeclarationStatement\n intchild=children.get(j); "]
103705[label="localVariableDeclaration\n intchild=children.get(j) "]
113706[label="integralType\n int "]
113707[label="variableDeclarator\n child=children.get(j) "]
123708[label="variableDeclaratorId\n child "]
123709[label="methodInvocation_lfno_primary\n children.get(j) "]
133710[label="typeName\n children "]
133711[label="expressionName\n j "]
93712[label="expressionStatement\n get_oracle_actions_travel(child,heads,deprels,tree,actions); "]
103713[label="methodInvocation\n get_oracle_actions_travel(child,heads,deprels,tree,actions) "]
113714[label="methodName\n get_oracle_actions_travel "]
113715[label="argumentList\n child,heads,deprels,tree,actions "]
123716[label="expressionName\n child "]
123717[label="expressionName\n heads "]
123718[label="expressionName\n deprels "]
123719[label="expressionName\n tree "]
123720[label="expressionName\n actions "]
93721[label="expressionStatement\n actions.add(ActionFactory.make_right_arc(deprels.get(child))); "]
103722[label="methodInvocation\n actions.add(ActionFactory.make_right_arc(deprels.get(child))) "]
113723[label="typeName\n actions "]
113724[label="methodInvocation_lfno_primary\n ActionFactory.make_right_arc(deprels.get(child)) "]
123725[label="typeName\n ActionFactory "]
123726[label="methodInvocation_lfno_primary\n deprels.get(child) "]
133727[label="typeName\n deprels "]
133728[label="expressionName\n child "]
63729[label="basicForStatement\n for(intj=i-1;j>=0;--j){intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));} "]
73730[label="localVariableDeclaration\n intj=i-1 "]
83731[label="integralType\n int "]
83732[label="variableDeclarator\n j=i-1 "]
93733[label="variableDeclaratorId\n j "]
93734[label="additiveExpression\n i-1 "]
103735[label="expressionName\n i "]
103736[label="literal\n 1 "]
73737[label="relationalExpression\n j>=0 "]
83738[label="expressionName\n j "]
83739[label="literal\n 0 "]
73740[label="preDecrementExpression\n --j "]
83741[label="expressionName\n j "]
73742[label="block\n {intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child)));} "]
83743[label="blockStatements\n intchild=children.get(j);actions.add(ActionFactory.make_left_arc(deprels.get(child))); "]
93744[label="localVariableDeclarationStatement\n intchild=children.get(j); "]
103745[label="localVariableDeclaration\n intchild=children.get(j) "]
113746[label="integralType\n int "]
113747[label="variableDeclarator\n child=children.get(j) "]
123748[label="variableDeclaratorId\n child "]
123749[label="methodInvocation_lfno_primary\n children.get(j) "]
133750[label="typeName\n children "]
133751[label="expressionName\n j "]
93752[label="expressionStatement\n actions.add(ActionFactory.make_left_arc(deprels.get(child))); "]
103753[label="methodInvocation\n actions.add(ActionFactory.make_left_arc(deprels.get(child))) "]
113754[label="typeName\n actions "]
113755[label="methodInvocation_lfno_primary\n ActionFactory.make_left_arc(deprels.get(child)) "]
123756[label="typeName\n ActionFactory "]
123757[label="methodInvocation_lfno_primary\n deprels.get(child) "]
133758[label="typeName\n deprels "]
133759[label="expressionName\n child "]
33760[label="methodDeclaration\n voidget_oracle_actions2(Dependencyinstance,List<Action>actions){get_oracle_actions2(instance.heads,instance.deprels,actions);} "]
43761[label="methodHeader\n voidget_oracle_actions2(Dependencyinstance,List<Action>actions) "]
53762[label="result\n void "]
53763[label="methodDeclarator\n get_oracle_actions2(Dependencyinstance,List<Action>actions) "]
63764[label="formalParameterList\n Dependencyinstance,List<Action>actions "]
73765[label="formalParameter\n Dependencyinstance "]
83766[label="unannClassType_lfno_unannClassOrInterfaceType\n Dependency "]
83767[label="variableDeclaratorId\n instance "]
73768[label="formalParameter\n List<Action>actions "]
83769[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Action> "]
93770[label="typeArguments\n <Action> "]
103771[label="classType_lfno_classOrInterfaceType\n Action "]
83772[label="variableDeclaratorId\n actions "]
43773[label="block\n {get_oracle_actions2(instance.heads,instance.deprels,actions);} "]
53774[label="expressionStatement\n get_oracle_actions2(instance.heads,instance.deprels,actions); "]
63775[label="methodInvocation\n get_oracle_actions2(instance.heads,instance.deprels,actions) "]
73776[label="methodName\n get_oracle_actions2 "]
73777[label="argumentList\n instance.heads,instance.deprels,actions "]
83778[label="expressionName\n instance.heads "]
93779[label="ambiguousName\n instance "]
83780[label="expressionName\n instance.deprels "]
93781[label="ambiguousName\n instance "]
83782[label="expressionName\n actions "]
33783[label="methodDeclaration\n voidget_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions){actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];}} "]
43784[label="methodHeader\n voidget_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions) "]
53785[label="result\n void "]
53786[label="methodDeclarator\n get_oracle_actions2(List<Integer>heads,List<Integer>deprels,List<Action>actions) "]
63787[label="formalParameterList\n List<Integer>heads,List<Integer>deprels,List<Action>actions "]
73788[label="formalParameters\n List<Integer>heads,List<Integer>deprels "]
83789[label="formalParameter\n List<Integer>heads "]
93790[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103791[label="typeArguments\n <Integer> "]
113792[label="classType_lfno_classOrInterfaceType\n Integer "]
93793[label="variableDeclaratorId\n heads "]
83794[label="formalParameter\n List<Integer>deprels "]
93795[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103796[label="typeArguments\n <Integer> "]
113797[label="classType_lfno_classOrInterfaceType\n Integer "]
93798[label="variableDeclaratorId\n deprels "]
73799[label="formalParameter\n List<Action>actions "]
83800[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Action> "]
93801[label="typeArguments\n <Action> "]
103802[label="classType_lfno_classOrInterfaceType\n Action "]
83803[label="variableDeclaratorId\n actions "]
43804[label="block\n {actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];}} "]
53805[label="blockStatements\n actions.clear();intlen=heads.size();List<Integer>sigma=newArrayList<Integer>();intbeta=0;List<Integer>output=newArrayList<Integer>(len);for(inti=0;i<len;i++){output.add(-1);}intstep=0;while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];} "]
63806[label="expressionStatement\n actions.clear(); "]
73807[label="methodInvocation\n actions.clear() "]
83808[label="typeName\n actions "]
63809[label="localVariableDeclarationStatement\n intlen=heads.size(); "]
73810[label="localVariableDeclaration\n intlen=heads.size() "]
83811[label="integralType\n int "]
83812[label="variableDeclarator\n len=heads.size() "]
93813[label="variableDeclaratorId\n len "]
93814[label="methodInvocation_lfno_primary\n heads.size() "]
103815[label="typeName\n heads "]
63816[label="localVariableDeclarationStatement\n List<Integer>sigma=newArrayList<Integer>(); "]
73817[label="localVariableDeclaration\n List<Integer>sigma=newArrayList<Integer>() "]
83818[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
93819[label="typeArguments\n <Integer> "]
103820[label="classType_lfno_classOrInterfaceType\n Integer "]
83821[label="variableDeclarator\n sigma=newArrayList<Integer>() "]
93822[label="variableDeclaratorId\n sigma "]
93823[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Integer>() "]
103824[label="typeArguments\n <Integer> "]
113825[label="classType_lfno_classOrInterfaceType\n Integer "]
63826[label="localVariableDeclarationStatement\n intbeta=0; "]
73827[label="localVariableDeclaration\n intbeta=0 "]
83828[label="integralType\n int "]
83829[label="variableDeclarator\n beta=0 "]
93830[label="variableDeclaratorId\n beta "]
93831[label="literal\n 0 "]
63832[label="localVariableDeclarationStatement\n List<Integer>output=newArrayList<Integer>(len); "]
73833[label="localVariableDeclaration\n List<Integer>output=newArrayList<Integer>(len) "]
83834[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
93835[label="typeArguments\n <Integer> "]
103836[label="classType_lfno_classOrInterfaceType\n Integer "]
83837[label="variableDeclarator\n output=newArrayList<Integer>(len) "]
93838[label="variableDeclaratorId\n output "]
93839[label="classInstanceCreationExpression_lfno_primary\n newArrayList<Integer>(len) "]
103840[label="typeArguments\n <Integer> "]
113841[label="classType_lfno_classOrInterfaceType\n Integer "]
103842[label="expressionName\n len "]
63843[label="basicForStatement\n for(inti=0;i<len;i++){output.add(-1);} "]
73844[label="localVariableDeclaration\n inti=0 "]
83845[label="integralType\n int "]
83846[label="variableDeclarator\n i=0 "]
93847[label="variableDeclaratorId\n i "]
93848[label="literal\n 0 "]
73849[label="relationalExpression\n i<len "]
83850[label="expressionName\n i "]
83851[label="expressionName\n len "]
73852[label="postIncrementExpression\n i++ "]
83853[label="expressionName\n i "]
73854[label="block\n {output.add(-1);} "]
83855[label="expressionStatement\n output.add(-1); "]
93856[label="methodInvocation\n output.add(-1) "]
103857[label="typeName\n output "]
103858[label="unaryExpression\n -1 "]
113859[label="literal\n 1 "]
63860[label="localVariableDeclarationStatement\n intstep=0; "]
73861[label="localVariableDeclaration\n intstep=0 "]
83862[label="integralType\n int "]
83863[label="variableDeclarator\n step=0 "]
93864[label="variableDeclaratorId\n step "]
93865[label="literal\n 0 "]
63866[label="whileStatement\n while(!(sigma.size()==1&&beta==len)){int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];} "]
73867[label="unaryExpressionNotPlusMinus\n !(sigma.size()==1&&beta==len) "]
83868[label="primaryNoNewArray_lfno_primary\n (sigma.size()==1&&beta==len) "]
93869[label="conditionalAndExpression\n sigma.size()==1&&beta==len "]
103870[label="equalityExpression\n sigma.size()==1 "]
113871[label="methodInvocation_lfno_primary\n sigma.size() "]
123872[label="typeName\n sigma "]
113873[label="literal\n 1 "]
103874[label="equalityExpression\n beta==len "]
113875[label="expressionName\n beta "]
113876[label="expressionName\n len "]
73877[label="block\n {int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0];} "]
83878[label="blockStatements\n int[]beta_reference=newint[]{beta};get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions);beta=beta_reference[0]; "]
93879[label="localVariableDeclarationStatement\n int[]beta_reference=newint[]{beta}; "]
103880[label="localVariableDeclaration\n int[]beta_reference=newint[]{beta} "]
113881[label="unannArrayType\n int[] "]
123882[label="integralType\n int "]
123883[label="dims\n [] "]
113884[label="variableDeclarator\n beta_reference=newint[]{beta} "]
123885[label="variableDeclaratorId\n beta_reference "]
123886[label="arrayCreationExpression\n newint[]{beta} "]
133887[label="integralType\n int "]
133888[label="dims\n [] "]
133889[label="arrayInitializer\n {beta} "]
143890[label="expressionName\n beta "]
93891[label="expressionStatement\n get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions); "]
103892[label="methodInvocation\n get_oracle_actions_onestep(heads,deprels,sigma,beta_reference,output,actions) "]
113893[label="methodName\n get_oracle_actions_onestep "]
113894[label="argumentList\n heads,deprels,sigma,beta_reference,output,actions "]
123895[label="expressionName\n heads "]
123896[label="expressionName\n deprels "]
123897[label="expressionName\n sigma "]
123898[label="expressionName\n beta_reference "]
123899[label="expressionName\n output "]
123900[label="expressionName\n actions "]
93901[label="expressionStatement\n beta=beta_reference[0]; "]
103902[label="assignment\n beta=beta_reference[0] "]
113903[label="expressionName\n beta "]
113904[label="assignmentOperator\n = "]
113905[label="arrayAccess_lfno_primary\n beta_reference[0] "]
123906[label="expressionName\n beta_reference "]
123907[label="literal\n 0 "]
33908[label="methodDeclaration\n voidget_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions){inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];}} "]
43909[label="methodHeader\n voidget_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions) "]
53910[label="result\n void "]
53911[label="methodDeclarator\n get_oracle_actions_onestep(List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions) "]
63912[label="formalParameterList\n List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output,List<Action>actions "]
73913[label="formalParameters\n List<Integer>heads,List<Integer>deprels,List<Integer>sigma,int[]beta,List<Integer>output "]
83914[label="formalParameter\n List<Integer>heads "]
93915[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103916[label="typeArguments\n <Integer> "]
113917[label="classType_lfno_classOrInterfaceType\n Integer "]
93918[label="variableDeclaratorId\n heads "]
83919[label="formalParameter\n List<Integer>deprels "]
93920[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103921[label="typeArguments\n <Integer> "]
113922[label="classType_lfno_classOrInterfaceType\n Integer "]
93923[label="variableDeclaratorId\n deprels "]
83924[label="formalParameter\n List<Integer>sigma "]
93925[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103926[label="typeArguments\n <Integer> "]
113927[label="classType_lfno_classOrInterfaceType\n Integer "]
93928[label="variableDeclaratorId\n sigma "]
83929[label="formalParameter\n int[]beta "]
93930[label="unannArrayType\n int[] "]
103931[label="integralType\n int "]
103932[label="dims\n [] "]
93933[label="variableDeclaratorId\n beta "]
83934[label="formalParameter\n List<Integer>output "]
93935[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Integer> "]
103936[label="typeArguments\n <Integer> "]
113937[label="classType_lfno_classOrInterfaceType\n Integer "]
93938[label="variableDeclaratorId\n output "]
73939[label="formalParameter\n List<Action>actions "]
83940[label="unannClassType_lfno_unannClassOrInterfaceType\n List<Action> "]
93941[label="typeArguments\n <Action> "]
103942[label="classType_lfno_classOrInterfaceType\n Action "]
83943[label="variableDeclaratorId\n actions "]
43944[label="block\n {inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];}} "]
53945[label="blockStatements\n inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1);inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1);booleanall_descendents_reduced=true;if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}}if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];} "]
63946[label="localVariableDeclarationStatement\n inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1); "]
73947[label="localVariableDeclaration\n inttop0=(sigma.size()>0?sigma.get(sigma.size()-1):-1) "]
83948[label="integralType\n int "]
83949[label="variableDeclarator\n top0=(sigma.size()>0?sigma.get(sigma.size()-1):-1) "]
93950[label="variableDeclaratorId\n top0 "]
93951[label="primaryNoNewArray_lfno_primary\n (sigma.size()>0?sigma.get(sigma.size()-1):-1) "]
103952[label="conditionalExpression\n sigma.size()>0?sigma.get(sigma.size()-1):-1 "]
113953[label="relationalExpression\n sigma.size()>0 "]
123954[label="methodInvocation_lfno_primary\n sigma.size() "]
133955[label="typeName\n sigma "]
123956[label="literal\n 0 "]
113957[label="methodInvocation_lfno_primary\n sigma.get(sigma.size()-1) "]
123958[label="typeName\n sigma "]
123959[label="additiveExpression\n sigma.size()-1 "]
133960[label="methodInvocation_lfno_primary\n sigma.size() "]
143961[label="typeName\n sigma "]
133962[label="literal\n 1 "]
113963[label="unaryExpression\n -1 "]
123964[label="literal\n 1 "]
63965[label="localVariableDeclarationStatement\n inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1); "]
73966[label="localVariableDeclaration\n inttop1=(sigma.size()>1?sigma.get(sigma.size()-2):-1) "]
83967[label="integralType\n int "]
83968[label="variableDeclarator\n top1=(sigma.size()>1?sigma.get(sigma.size()-2):-1) "]
93969[label="variableDeclaratorId\n top1 "]
93970[label="primaryNoNewArray_lfno_primary\n (sigma.size()>1?sigma.get(sigma.size()-2):-1) "]
103971[label="conditionalExpression\n sigma.size()>1?sigma.get(sigma.size()-2):-1 "]
113972[label="relationalExpression\n sigma.size()>1 "]
123973[label="methodInvocation_lfno_primary\n sigma.size() "]
133974[label="typeName\n sigma "]
123975[label="literal\n 1 "]
113976[label="methodInvocation_lfno_primary\n sigma.get(sigma.size()-2) "]
123977[label="typeName\n sigma "]
123978[label="additiveExpression\n sigma.size()-2 "]
133979[label="methodInvocation_lfno_primary\n sigma.size() "]
143980[label="typeName\n sigma "]
133981[label="literal\n 2 "]
113982[label="unaryExpression\n -1 "]
123983[label="literal\n 1 "]
63984[label="localVariableDeclarationStatement\n booleanall_descendents_reduced=true; "]
73985[label="localVariableDeclaration\n booleanall_descendents_reduced=true "]
83986[label="unannPrimitiveType\n boolean "]
83987[label="variableDeclarator\n all_descendents_reduced=true "]
93988[label="variableDeclaratorId\n all_descendents_reduced "]
93989[label="literal\n true "]
63990[label="ifThenStatement\n if(top0>=0){for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}} "]
73991[label="relationalExpression\n top0>=0 "]
83992[label="expressionName\n top0 "]
83993[label="literal\n 0 "]
73994[label="block\n {for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}}} "]
83995[label="basicForStatement\n for(inti=0;i<heads.size();++i){if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}} "]
93996[label="localVariableDeclaration\n inti=0 "]
103997[label="integralType\n int "]
103998[label="variableDeclarator\n i=0 "]
113999[label="variableDeclaratorId\n i "]
114000[label="literal\n 0 "]
94001[label="relationalExpression\n i<heads.size() "]
104002[label="expressionName\n i "]
104003[label="methodInvocation_lfno_primary\n heads.size() "]
114004[label="typeName\n heads "]
94005[label="preIncrementExpression\n ++i "]
104006[label="expressionName\n i "]
94007[label="block\n {if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;}} "]
104008[label="ifThenStatement\n if(heads.get(i)==top0&&output.get(i)!=top0){all_descendents_reduced=false;break;} "]
114009[label="conditionalAndExpression\n heads.get(i)==top0&&output.get(i)!=top0 "]
124010[label="equalityExpression\n heads.get(i)==top0 "]
134011[label="methodInvocation_lfno_primary\n heads.get(i) "]
144012[label="typeName\n heads "]
144013[label="expressionName\n i "]
134014[label="expressionName\n top0 "]
124015[label="equalityExpression\n output.get(i)!=top0 "]
134016[label="methodInvocation_lfno_primary\n output.get(i) "]
144017[label="typeName\n output "]
144018[label="expressionName\n i "]
134019[label="expressionName\n top0 "]
114020[label="block\n {all_descendents_reduced=false;break;} "]
124021[label="blockStatements\n all_descendents_reduced=false;break; "]
134022[label="expressionStatement\n all_descendents_reduced=false; "]
144023[label="assignment\n all_descendents_reduced=false "]
154024[label="expressionName\n all_descendents_reduced "]
154025[label="assignmentOperator\n = "]
154026[label="literal\n false "]
134027[label="breakStatement\n break; "]
64028[label="ifThenElseStatement\n if(top1>=0&&heads.get(top1)==top0){actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);}elseif(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];} "]
74029[label="conditionalAndExpression\n top1>=0&&heads.get(top1)==top0 "]
84030[label="relationalExpression\n top1>=0 "]
94031[label="expressionName\n top1 "]
94032[label="literal\n 0 "]
84033[label="equalityExpression\n heads.get(top1)==top0 "]
94034[label="methodInvocation_lfno_primary\n heads.get(top1) "]
104035[label="typeName\n heads "]
104036[label="expressionName\n top1 "]
94037[label="expressionName\n top0 "]
74038[label="block\n {actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0);} "]
84039[label="blockStatements\n actions.add(ActionFactory.make_left_arc(deprels.get(top1)));output.set(top1,top0);sigma.remove(sigma.size()-1);sigma.set(sigma.size()-1,top0); "]
94040[label="expressionStatement\n actions.add(ActionFactory.make_left_arc(deprels.get(top1))); "]
104041[label="methodInvocation\n actions.add(ActionFactory.make_left_arc(deprels.get(top1))) "]
114042[label="typeName\n actions "]
114043[label="methodInvocation_lfno_primary\n ActionFactory.make_left_arc(deprels.get(top1)) "]
124044[label="typeName\n ActionFactory "]
124045[label="methodInvocation_lfno_primary\n deprels.get(top1) "]
134046[label="typeName\n deprels "]
134047[label="expressionName\n top1 "]
94048[label="expressionStatement\n output.set(top1,top0); "]
104049[label="methodInvocation\n output.set(top1,top0) "]
114050[label="typeName\n output "]
114051[label="argumentList\n top1,top0 "]
124052[label="expressionName\n top1 "]
124053[label="expressionName\n top0 "]
94054[label="expressionStatement\n sigma.remove(sigma.size()-1); "]
104055[label="methodInvocation\n sigma.remove(sigma.size()-1) "]
114056[label="typeName\n sigma "]
114057[label="additiveExpression\n sigma.size()-1 "]
124058[label="methodInvocation_lfno_primary\n sigma.size() "]
134059[label="typeName\n sigma "]
124060[label="literal\n 1 "]
94061[label="expressionStatement\n sigma.set(sigma.size()-1,top0); "]
104062[label="methodInvocation\n sigma.set(sigma.size()-1,top0) "]
114063[label="typeName\n sigma "]
114064[label="argumentList\n sigma.size()-1,top0 "]
124065[label="additiveExpression\n sigma.size()-1 "]
134066[label="methodInvocation_lfno_primary\n sigma.size() "]
144067[label="typeName\n sigma "]
134068[label="literal\n 1 "]
124069[label="expressionName\n top0 "]
74070[label="ifThenElseStatement\n if(top1>=0&&heads.get(top0)==top1&&all_descendents_reduced){actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);}elseif(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];} "]
84071[label="conditionalAndExpression\n top1>=0&&heads.get(top0)==top1&&all_descendents_reduced "]
94072[label="conditionalAndExpression\n top1>=0&&heads.get(top0)==top1 "]
104073[label="relationalExpression\n top1>=0 "]
114074[label="expressionName\n top1 "]
114075[label="literal\n 0 "]
104076[label="equalityExpression\n heads.get(top0)==top1 "]
114077[label="methodInvocation_lfno_primary\n heads.get(top0) "]
124078[label="typeName\n heads "]
124079[label="expressionName\n top0 "]
114080[label="expressionName\n top1 "]
94081[label="expressionName\n all_descendents_reduced "]
84082[label="block\n {actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1);} "]
94083[label="blockStatements\n actions.add(ActionFactory.make_right_arc(deprels.get(top0)));output.set(top0,top1);sigma.remove(sigma.size()-1); "]
104084[label="expressionStatement\n actions.add(ActionFactory.make_right_arc(deprels.get(top0))); "]
114085[label="methodInvocation\n actions.add(ActionFactory.make_right_arc(deprels.get(top0))) "]
124086[label="typeName\n actions "]
124087[label="methodInvocation_lfno_primary\n ActionFactory.make_right_arc(deprels.get(top0)) "]
134088[label="typeName\n ActionFactory "]
134089[label="methodInvocation_lfno_primary\n deprels.get(top0) "]
144090[label="typeName\n deprels "]
144091[label="expressionName\n top0 "]
104092[label="expressionStatement\n output.set(top0,top1); "]
114093[label="methodInvocation\n output.set(top0,top1) "]
124094[label="typeName\n output "]
124095[label="argumentList\n top0,top1 "]
134096[label="expressionName\n top0 "]
134097[label="expressionName\n top1 "]
104098[label="expressionStatement\n sigma.remove(sigma.size()-1); "]
114099[label="methodInvocation\n sigma.remove(sigma.size()-1) "]
124100[label="typeName\n sigma "]
124101[label="additiveExpression\n sigma.size()-1 "]
134102[label="methodInvocation_lfno_primary\n sigma.size() "]
144103[label="typeName\n sigma "]
134104[label="literal\n 1 "]
84105[label="ifThenStatement\n if(beta[0]<heads.size()){actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];} "]
94106[label="relationalExpression\n beta[0]<heads.size() "]
104107[label="arrayAccess_lfno_primary\n beta[0] "]
114108[label="expressionName\n beta "]
114109[label="literal\n 0 "]
104110[label="methodInvocation_lfno_primary\n heads.size() "]
114111[label="typeName\n heads "]
94112[label="block\n {actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0];} "]
104113[label="blockStatements\n actions.add(ActionFactory.make_shift());sigma.add(beta[0]);++beta[0]; "]
114114[label="expressionStatement\n actions.add(ActionFactory.make_shift()); "]
124115[label="methodInvocation\n actions.add(ActionFactory.make_shift()) "]
134116[label="typeName\n actions "]
134117[label="methodInvocation_lfno_primary\n ActionFactory.make_shift() "]
144118[label="typeName\n ActionFactory "]
114119[label="expressionStatement\n sigma.add(beta[0]); "]
124120[label="methodInvocation\n sigma.add(beta[0]) "]
134121[label="typeName\n sigma "]
134122[label="arrayAccess_lfno_primary\n beta[0] "]
144123[label="expressionName\n beta "]
144124[label="literal\n 0 "]
114125[label="expressionStatement\n ++beta[0]; "]
124126[label="preIncrementExpression\n ++beta[0] "]
134127[label="arrayAccess_lfno_primary\n beta[0] "]
144128[label="expressionName\n beta "]
144129[label="literal\n 0 "]
04130[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.option;publicclassAdaOption{doubleada_eps;doubleada_alpha;doublelambda;doubledropout_probability;}<EOF> "]
14131[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.option; "]
24132[label="packageName\n com.hankcs.hanlp.dependency.nnparser.option "]
34133[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
44134[label="packageName\n com.hankcs.hanlp.dependency "]
54135[label="packageName\n com.hankcs.hanlp "]
64136[label="packageName\n com.hankcs "]
74137[label="packageName\n com "]
14138[label="normalClassDeclaration\n publicclassAdaOption{doubleada_eps;doubleada_alpha;doublelambda;doubledropout_probability;} "]
24139[label="classModifier\n public "]
24140[label="classBody\n {doubleada_eps;doubleada_alpha;doublelambda;doubledropout_probability;} "]
34141[label="fieldDeclaration\n doubleada_eps; "]
44142[label="floatingPointType\n double "]
44143[label="variableDeclaratorId\n ada_eps "]
34144[label="fieldDeclaration\n doubleada_alpha; "]
44145[label="floatingPointType\n double "]
44146[label="variableDeclaratorId\n ada_alpha "]
34147[label="fieldDeclaration\n doublelambda; "]
44148[label="floatingPointType\n double "]
44149[label="variableDeclaratorId\n lambda "]
34150[label="fieldDeclaration\n doubledropout_probability; "]
44151[label="floatingPointType\n double "]
44152[label="variableDeclaratorId\n dropout_probability "]
-10->01
01->12
12->23
23->34
34->45
45->56
56->67
67->78
01->19
19->210
19->211
211->312
19->213
213->314
314->415
415->516
19->217
217->318
318->419
318->420
420->521
318->422
217->323
323->424
424->525
323->426
323->427
427->528
427->529
323->430
430->531
531->632
-10->033
033->134
134->235
235->336
336->437
437->538
538->639
639->740
033->141
141->242
141->243
243->344
141->245
245->346
346->447
447->548
447->549
346->450
245->351
351->452
351->453
245->354
354->455
354->456
456->557
456->558
558->659
659->760
659->761
558->662
354->463
463->564
564->665
665->766
766->867
665->768
665->769
245->370
370->471
370->472
472->573
472->574
370->475
475->576
576->677
677->778
677->779
779->880
779->881
245->382
382->483
382->484
484->585
382->486
245->387
387->488
387->489
489->590
489->591
591->692
692->793
793->894
793->895
692->796
387->497
497->598
598->699
699->7100
7100->8101
8101->9102
7100->8103
7100->8104
598->6105
6105->7106
-10->0107
0107->1108
1108->2109
2109->3110
3110->4111
4111->5112
5112->6113
0107->1114
1114->2115
2115->3116
3116->4117
4117->5118
5118->6119
6119->7120
0107->1121
1121->2122
2122->3123
3123->4124
4124->5125
5125->6126
6126->7127
0107->1128
1128->2129
2129->3130
3130->4131
4131->5132
5132->6133
6133->7134
0107->1135
1135->2136
2136->3137
3137->4138
4138->5139
5139->6140
6140->7141
0107->1142
1142->2143
2143->3144
3144->4145
4145->5146
5146->6147
6147->7148
0107->1149
1149->2150
2150->3151
3151->4152
4152->5153
5153->6154
6154->7155
0107->1156
1156->2157
2157->3158
3158->4159
0107->1160
1160->2161
2161->3162
3162->4163
0107->1164
1164->2165
2165->3166
3166->4167
0107->1168
1168->2169
2169->3170
3170->4171
4171->5172
5172->6173
6173->7174
0107->1175
1175->2176
1175->2177
1175->2178
2178->3179
1175->2180
2180->3181
3181->4182
4182->5183
3181->4184
3181->4185
4185->5186
4185->5187
5187->6188
6188->7189
6188->7190
3181->4191
4191->5192
5192->6193
2180->3194
3194->4195
3194->4196
4196->5197
4196->5198
2180->3199
3199->4200
4200->5201
3199->4202
3199->4203
4203->5204
4203->5205
5205->6206
6206->7207
6206->7208
4203->5209
5209->6210
6210->7211
6210->7212
3199->4213
4213->5214
5214->6215
6215->7216
7216->8217
8217->9218
9218->10219
10219->11220
10219->11221
7216->8222
8222->9223
8222->9224
9224->10225
9224->10226
5214->6227
6227->7228
7228->8229
7228->8230
2180->3231
3231->4232
4232->5233
3231->4234
3231->4235
4235->5236
4235->5237
5237->6238
6238->7239
6238->7240
4235->5241
5241->6242
6242->7243
6242->7244
3231->4245
4245->5246
5246->6247
6247->7248
7248->8249
8249->9250
9250->10251
10251->11252
10251->11253
7248->8254
8254->9255
8254->9256
9256->10257
9256->10258
5246->6259
6259->7260
7260->8261
7260->8262
2180->3263
3263->4264
4264->5265
3263->4266
3263->4267
4267->5268
4267->5269
5269->6270
6270->7271
7271->8272
7271->8273
6270->7274
7274->8275
7274->8276
4267->5277
5277->6278
3263->4279
4279->5280
5280->6281
6281->7282
7282->8283
7282->8284
8284->9285
8284->9286
5280->6287
6287->7288
7288->8289
7288->8290
8290->9291
8290->9292
5280->6293
6293->7294
7294->8295
7294->8296
2180->3297
3297->4298
4298->5299
3297->4300
3297->4301
4301->5302
4301->5303
5303->6304
6304->7305
7305->8306
8306->9307
9307->10308
9307->10309
10309->11310
10309->11311
6304->7312
4301->5313
5313->6314
3297->4315
4315->5316
5316->6317
6317->7318
7318->8319
7318->8320
8320->9321
8320->9322
5316->6323
6323->7324
7324->8325
7324->8326
5316->6327
6327->7328
7328->8329
7328->8330
8330->9331
8330->9332
9332->10333
5316->6334
6334->7335
7335->8336
7335->8337
8337->9338
8337->9339
5316->6340
6340->7341
7341->8342
7341->8343
8343->9344
9344->10345
10345->11346
10345->11347
11347->12348
11347->12349
6340->7350
6340->7351
7351->8352
6340->7353
7353->8354
8354->9355
9355->10356
10356->11357
10356->11358
11358->12359
11358->12360
12360->13361
8354->9362
9362->10363
10363->11364
10363->11365
11365->12366
11365->12367
8354->9368
9368->10369
9368->10370
9368->10371
10371->11372
9368->10373
10373->11374
11374->12375
12375->13376
12375->13377
13377->14378
13377->14379
8354->9380
9380->10381
10381->11382
8354->9383
9383->10384
10384->11385
10384->11386
11386->12387
11386->12388
12388->13389
12388->13390
13390->14391
13390->14392
5316->6393
6393->7394
7394->8395
7394->8396
5316->6397
6397->7398
7398->8399
7398->8400
2180->3401
3401->4402
4402->5403
3401->4404
3401->4405
4405->5406
4405->5407
5407->6408
6408->7409
6408->7410
4405->5411
5411->6412
3401->4413
4413->5414
5414->6415
6415->7416
6415->7417
7417->8418
7417->8419
2180->3420
3420->4421
4421->5422
3420->4423
3420->4424
4424->5425
5425->6426
6426->7427
7427->8428
7427->8429
4424->5430
5430->6431
6431->7432
6431->7433
3420->4434
4434->5435
5435->6436
6436->7437
7437->8438
7437->8439
8439->9440
8439->9441
9441->10442
5435->6443
6443->7444
7444->8445
7444->8446
6443->7447
7447->8448
8448->9449
9449->10450
5435->6451
6451->7452
7452->8453
7452->8454
6451->7455
7455->8456
8456->9457
9457->10458
5435->6459
6459->7460
7460->8461
8461->9462
8461->9463
7460->8464
8464->9465
8464->9466
9466->10467
9466->10468
5435->6469
6469->7470
7470->8471
8471->9472
9472->10473
10473->11474
10473->11475
7470->8476
8476->9477
8476->9478
9478->10479
10479->11480
11480->12481
11480->12482
5435->6483
6483->7484
7484->8485
7484->8486
8486->9487
8486->9488
6483->7489
7489->8490
7489->8491
8491->9492
6483->7493
7493->8494
6483->7495
7495->8496
8496->9497
9497->10498
9497->10499
10499->11500
11500->12501
12501->13502
11500->12503
10499->11504
11504->12505
11504->12506
5435->6507
6507->7508
2180->3509
3509->4510
4510->5511
3509->4512
3509->4513
4513->5514
4513->5515
5515->6516
6516->7517
6516->7518
4513->5519
5519->6520
6520->7521
6520->7522
3509->4523
4523->5524
5524->6525
6525->7526
7526->8527
7526->8528
8528->9529
8528->9530
9530->10531
5524->6532
6532->7533
7533->8534
7533->8535
6532->7536
7536->8537
8537->9538
9538->10539
5524->6540
6540->7541
7541->8542
7541->8543
6540->7544
7544->8545
8545->9546
9546->10547
5524->6548
6548->7549
7549->8550
8550->9551
8550->9552
7549->8553
8553->9554
8553->9555
9555->10556
9555->10557
5524->6558
6558->7559
7559->8560
7559->8561
8561->9562
8561->9563
9563->10564
5524->6565
6565->7566
7566->8567
7566->8568
8568->9569
8568->9570
9570->10571
5524->6572
6572->7573
7573->8574
7573->8575
8575->9576
8575->9577
6572->7578
7578->8579
7578->8580
8580->9581
6572->7582
7582->8583
6572->7584
7584->8585
8585->9586
9586->10587
10587->11588
10587->11589
9586->10590
8585->9591
9591->10592
10592->11593
11593->12594
12594->13595
12594->13596
12594->13597
13597->14598
13597->14599
10592->11600
11600->12601
12601->13602
12601->13603
12601->13604
5524->6605
6605->7606
-10->0607
0607->1608
1608->2609
2609->3610
3610->4611
4611->5612
5612->6613
0607->1614
1614->2615
2615->3616
3616->4617
0607->1618
1618->2619
2619->3620
3620->4621
0607->1622
1622->2623
1622->2624
1622->2625
2625->3626
3626->4627
3626->4628
3626->4629
3626->4630
4630->5631
4630->5632
2625->3633
3633->4634
3633->4635
3633->4636
2625->3637
3637->4638
3637->4639
3637->4640
3637->4641
2625->3642
3642->4643
3642->4644
4644->5645
4644->5646
5646->6647
5646->6648
3642->4649
4649->5650
5650->6651
6651->7652
6651->7653
6651->7654
7654->8655
2625->3656
3656->4657
3656->4658
4658->5659
5659->6660
5659->6661
4658->5662
5662->6663
6663->7664
7664->8665
7664->8666
6663->7667
7667->8668
7667->8669
3656->4670
4670->5671
5671->6672
6672->7673
7673->8674
8674->9675
7673->8676
8676->9677
8676->9678
5671->6679
6679->7680
7680->8681
8681->9682
8681->9683
7680->8684
8684->9685
8684->9686
9686->10687
9686->10688
10688->11689
5671->6690
6690->7691
7691->8692
7691->8693
8693->9694
8693->9695
6690->7696
7696->8697
7696->8698
6690->7699
7699->8700
6690->7701
7701->8702
8702->9703
9703->10704
10704->11705
10704->11706
11706->12707
11706->12708
12708->13709
8702->9710
9710->10711
10711->11712
10711->11713
9710->10714
10714->11715
8702->9716
9716->10717
10717->11718
11718->12719
11718->12720
10717->11721
10717->11722
5671->6723
6723->7724
2625->3725
3725->4726
3725->4727
4727->5728
4727->5729
3725->4730
4730->5731
5731->6732
6732->7733
7733->8734
7733->8735
8735->9736
8735->9737
9737->10738
5731->6739
6739->7740
7740->8741
8741->9742
9742->10743
10743->11744
10743->11745
9742->10746
10746->11747
11747->12748
10746->11749
8741->9750
9750->10751
9750->10752
7740->8753
7740->8754
2625->3755
3755->4756
3755->4757
3755->4758
4758->5759
4758->5760
3755->4761
2625->3762
3762->4763
3762->4764
3762->4765
4765->5766
4765->5767
4765->5768
5768->6769
3762->4770
4770->5771
5771->6772
6772->7773
7773->8774
5771->6775
6775->7776
7776->8777
7776->8778
7776->8779
8779->9780
8779->9781
9781->10782
5771->6783
6783->7784
7784->8785
7784->8786
7784->8787
8787->9788
8787->9789
9789->10790
5771->6791
6791->7792
7792->8793
8793->9794
9794->10795
10795->11796
10795->11797
10795->11798
11798->12799
12799->13800
8793->9801
9801->10802
10802->11803
10802->11804
11804->12805
11804->12806
8793->9807
9807->10808
10808->11809
11809->12810
12810->13811
12810->13812
12810->13813
13813->14814
10808->11815
9807->10816
10816->11817
11817->12818
12818->13819
13819->14820
14820->15821
14820->15822
13819->14823
14823->15824
14823->15825
15825->16826
15825->16827
16827->17828
11817->12829
12829->13830
13830->14831
14831->15832
14831->15833
13830->14834
14834->15835
14834->15836
15836->16837
15836->16838
16838->17839
11817->12840
12840->13841
13841->14842
14842->15843
14842->15844
15844->16845
15844->16846
13841->14847
14847->15848
14847->15849
13841->14850
14850->15851
13841->14852
14852->15853
15853->16854
16854->17855
16854->17856
16854->17857
17857->18858
16854->17859
17859->18860
18860->19861
19861->20862
19861->20863
18860->19864
15853->16865
16865->17866
17866->18867
17866->18868
18868->19869
18868->19870
15853->16871
16871->17872
17872->18873
17872->18874
18874->19875
18874->19876
16871->17877
17877->18878
17877->18879
16871->17880
17880->18881
16871->17882
17882->18883
18883->19884
19884->20885
19884->20886
19884->20887
20887->21888
21888->22889
22889->23890
21888->22891
20887->21892
21892->22893
21892->22894
22894->23895
22894->23896
15853->16897
16897->17898
17898->18899
17898->18900
18900->19901
18900->19902
16897->17903
17903->18904
17903->18905
16897->17906
17906->18907
16897->17908
17908->18909
18909->19910
19910->20911
19910->20912
20912->21913
20912->21914
18909->19915
19915->20916
20916->21917
21917->22918
22918->23919
22918->23920
23920->24921
23920->24922
24922->25923
24922->25924
21917->22925
22925->23926
22925->23927
21917->22928
22928->23929
21917->22930
22930->23931
23931->24932
24932->25933
25933->26934
26934->27935
26934->27936
25933->26937
25933->26938
26938->27939
26938->27940
27940->28941
27940->28942
23931->24943
24943->25944
25944->26945
26945->27946
26945->27947
25944->26948
25944->26949
26949->27950
26949->27951
27951->28952
27951->28953
20916->21954
21954->22955
22955->23956
23956->24957
23956->24958
22955->23959
22955->23960
20916->21961
21961->22962
22962->23963
23963->24964
23963->24965
22962->23966
22962->23967
23967->24968
23967->24969
20916->21970
11817->12971
12971->13972
13972->14973
14973->15974
13972->14975
11817->12976
12976->13977
13977->14978
13977->14979
14979->15980
14979->15981
12976->13982
13982->14983
13982->14984
12976->13985
13985->14986
12976->13987
13987->14988
14988->15989
15989->16990
14988->15991
15991->16992
15991->16993
16993->17994
16993->17995
15991->16996
16996->17997
16996->17998
6791->7999
7999->81000
81000->91001
91001->101002
101002->111003
2625->31004
31004->41005
31004->41006
31004->41007
41007->51008
51008->61009
61009->71010
61009->71011
51008->61012
41007->51013
51013->61014
61014->71015
61014->71016
51013->61017
41007->51018
51018->61019
51018->61020
61020->71021
61020->71022
71022->81023
81023->91024
91024->101025
91024->101026
81023->91027
71022->81028
81028->91029
91029->101030
91029->101031
81028->91032
51018->61033
61033->71034
71034->81035
81035->91036
91036->101037
101037->111038
91036->101039
91036->101040
71034->81041
81041->91042
91042->101043
101043->111044
91042->101045
91042->101046
-10->01047
01047->11048
11048->21049
21049->31050
31050->41051
41051->51052
51052->61053
01047->11054
11054->21055
21055->31056
31056->41057
41057->51058
51058->61059
61059->71060
01047->11061
11061->21062
21062->31063
31063->41064
41064->51065
51065->61066
61066->71067
01047->11068
11068->21069
21069->31070
31070->41071
41071->51072
51072->61073
61073->71074
01047->11075
11075->21076
21076->31077
31077->41078
41078->51079
51079->61080
61080->71081
01047->11082
11082->21083
21083->31084
31084->41085
41085->51086
51086->61087
61087->71088
01047->11089
11089->21090
21090->31091
31091->41092
41092->51093
51093->61094
61094->71095
01047->11096
11096->21097
21097->31098
31098->41099
01047->11100
11100->21101
21101->31102
31102->41103
01047->11104
11104->21105
21105->31106
31106->41107
01047->11108
11108->21109
21109->31110
31110->41111
41111->51112
51112->61113
61113->71114
01047->11115
11115->21116
11115->21117
11115->21118
21118->31119
11115->21120
21120->31121
31121->41122
31121->41123
31121->41124
21120->31125
31125->41126
31125->41127
31125->41128
21120->31129
31129->41130
31129->41131
31129->41132
21120->31133
31133->41134
31133->41135
31133->41136
21120->31137
31137->41138
31137->41139
41139->51140
41139->51141
51141->61142
51141->61143
31137->41144
41144->51145
51145->61146
61146->71147
71147->81148
71147->81149
71147->81150
81150->91151
91151->101152
51145->61153
61153->71154
71154->81155
71154->81156
71154->81157
81157->91158
51145->61159
61159->71160
71160->81161
71160->81162
71160->81163
81163->91164
91164->101165
51145->61166
61166->71167
71167->81168
71167->81169
71167->81170
21120->31171
31171->41172
31171->41173
41173->51174
31171->41175
41175->51176
51176->61177
61177->71178
71178->81179
71178->81180
71178->81181
51176->61182
61182->71183
71183->81184
71183->81185
71183->81186
51176->61187
61187->71188
71188->81189
71188->81190
71188->81191
21120->31192
31192->41193
31192->41194
41194->51195
41194->51196
51196->61197
61197->71198
61197->71199
31192->41200
41200->51201
51201->61202
61202->71203
71203->81204
81204->91205
71203->81206
71203->81207
51201->61208
61208->71209
21120->31210
31210->41211
31210->41212
41212->51213
41212->51214
51214->61215
61215->71216
71216->81217
71216->81218
61215->71219
71219->81220
71219->81221
31210->41222
41222->51223
51223->61224
61224->71225
71225->81226
81226->91227
81226->91228
71225->81229
81229->91230
81229->91231
91231->101232
91231->101233
51223->61234
61234->71235
71235->81236
71235->81237
81237->91238
91238->101239
101239->111240
91238->101241
101241->111242
91238->101243
91238->101244
71235->81245
81245->91246
91246->101247
91246->101248
91246->101249
91246->101250
21120->31251
31251->41252
31251->41253
41253->51254
41253->51255
31251->41256
41256->51257
51257->61258
21120->31259
31259->41260
31259->41261
41261->51262
41261->51263
31259->41264
41264->51265
51265->61266
21120->31267
31267->41268
31267->41269
41269->51270
41269->51271
31267->41272
41272->51273
51273->61274
21120->31275
31275->41276
41276->51277
31275->41278
31275->41279
41279->51280
41279->51281
51281->61282
61282->71283
71283->81284
71283->81285
61282->71286
71286->81287
71286->81288
41279->51289
51289->61290
61290->71291
61290->71292
31275->41293
41293->51294
51294->61295
61295->71296
61295->71297
71297->81298
71297->81299
71297->81300
21120->31301
31301->41302
41302->51303
31301->41304
31301->41305
41305->51306
41305->51307
51307->61308
61308->71309
61308->71310
41305->51311
51311->61312
61312->71313
61312->71314
31301->41315
41315->51316
51316->61317
61317->71318
61317->71319
71319->81320
71319->81321
21120->31322
31322->41323
41323->51324
31322->41325
31322->41326
41326->51327
41326->51328
31322->41329
41329->51330
51330->61331
21120->31332
31332->41333
41333->51334
31332->41335
31332->41336
41336->51337
41336->51338
51338->61339
61339->71340
71340->81341
81341->91342
81341->91343
71340->81344
81344->91345
81344->91346
61339->71347
71347->81348
71347->81349
41336->51350
51350->61351
61351->71352
61351->71353
31332->41354
41354->51355
51355->61356
61356->71357
71357->81358
71357->81359
61356->71360
71360->81361
81361->91362
51355->61363
61363->71364
71364->81365
71364->81366
81366->91367
81366->91368
91368->101369
51355->61370
61370->71371
71371->81372
81372->91373
61370->71374
71374->81375
81375->91376
91376->101377
91376->101378
101378->111379
101378->111380
111380->121381
51355->61382
61382->71383
71383->81384
81384->91385
61382->71386
71386->81387
81387->91388
91388->101389
91388->101390
101390->111391
101390->111392
111392->121393
51355->61394
61394->71395
71395->81396
81396->91397
81396->91398
71395->81399
81399->91400
81399->91401
91401->101402
61394->71403
71403->81404
81404->91405
51355->61406
61406->71407
71407->81408
81408->91409
81408->91410
71407->81411
81411->91412
81411->91413
91413->101414
51355->61415
61415->71416
71416->81417
71416->81418
61415->71419
71419->81420
51355->61421
61421->71422
71422->81423
71422->81424
81424->91425
81424->91426
91426->101427
91426->101428
91426->101429
81424->91430
81424->91431
51355->61432
61432->71433
61432->71434
61432->71435
61432->71436
71436->81437
81437->91438
91438->101439
101439->111440
91438->101441
81437->91442
91442->101443
101443->111444
111444->121445
111444->121446
101443->111447
111447->121448
111447->121449
121449->131450
81437->91451
91451->101452
101452->111453
101452->111454
91451->101455
81437->91456
91456->101457
101457->111458
101457->111459
111459->121460
111459->121461
121461->131462
81437->91463
91463->101464
101464->111465
101464->111466
111466->121467
111466->121468
81437->91469
91469->101470
101470->111471
101470->111472
111472->121473
111472->121474
81437->91475
91475->101476
101476->111477
101476->111478
91475->101479
101479->111480
111480->121481
121481->131482
131482->141483
131482->141484
131482->141485
111480->121486
121486->131487
131487->141488
131487->141489
131487->141490
141490->151491
141490->151492
151492->161493
161493->171494
171494->181495
161493->171496
91475->101497
101497->111498
111498->121499
121499->131500
131500->141501
131500->141502
131500->141503
141503->151504
141503->151505
151505->161506
161506->171507
171507->181508
161506->171509
171509->181510
181510->191511
181510->191512
111498->121513
121513->131514
131514->141515
131514->141516
131514->141517
141517->151518
81437->91519
91519->101520
101520->111521
101520->111522
111522->121523
111522->121524
121524->131525
121524->131526
131526->141527
131526->141528
141528->151529
151529->161530
161530->171531
161530->171532
141528->151533
81437->91534
91534->101535
101535->111536
101535->111537
111537->121538
111537->121539
91534->101540
101540->111541
101540->111542
91534->101543
101543->111544
91534->101545
101545->111546
111546->121547
121547->131548
131548->141549
131548->141550
141550->151551
151551->161552
141550->151553
151553->161554
151553->161555
161555->171556
171556->181557
171556->181558
161555->171559
111546->121560
121560->131561
131561->141562
141562->151563
141562->151564
131561->141565
121560->131566
131566->141567
141567->151568
151568->161569
151568->161570
161570->171571
161570->171572
161570->171573
161570->171574
171574->181575
171574->181576
181576->191577
191577->201578
201578->211579
201578->211580
191577->201581
181576->191582
191582->201583
191582->201584
81437->91585
91585->101586
101586->111587
101586->111588
111588->121589
111588->121590
121590->131591
121590->131592
51355->61593
61593->71594
71594->81595
71594->81596
81596->91597
81596->91598
91598->101599
101599->111600
91598->101601
81596->91602
91602->101603
51355->61604
61604->71605
21120->31606
31606->41607
41607->51608
31606->41609
31606->41610
41610->51611
41610->51612
51612->61613
61613->71614
71614->81615
71614->81616
61613->71617
71617->81618
71617->81619
41610->51620
51620->61621
61621->71622
61621->71623
31606->41624
41624->51625
51625->61626
21120->31627
31627->41628
41628->51629
31627->41630
31627->41631
41631->51632
41631->51633
51633->61634
61634->71635
71635->81636
81636->91637
91637->101638
91637->101639
101639->111640
101639->111641
61634->71642
31627->41643
41643->51644
51644->61645
61645->71646
71646->81647
71646->81648
81648->91649
91649->101650
101650->111651
101650->111652
111652->121653
111652->121654
61645->71655
61645->71656
71656->81657
61645->71658
71658->81659
81659->91660
81659->91661
81659->91662
91662->101663
81659->91664
91664->101665
101665->111666
111666->121667
111666->121668
121668->131669
131669->141670
121668->131671
51644->61672
61672->71673
-10->01674
01674->11675
11675->21676
21676->31677
31677->41678
41678->51679
01674->11680
11680->21681
21681->31682
31682->41683
41683->51684
01674->11685
11685->21686
21686->31687
31687->41688
41688->51689
51689->61690
61690->71691
71691->81692
01674->11693
11693->21694
21694->31695
31695->41696
41696->51697
51697->61698
61698->71699
71699->81700
01674->11701
11701->21702
21702->31703
31703->41704
41704->51705
51705->61706
61706->71707
01674->11708
11708->21709
21709->31710
31710->41711
41711->51712
51712->61713
01674->11714
11714->21715
21715->31716
31716->41717
41717->51718
51718->61719
01674->11720
11720->21721
21721->31722
31722->41723
41723->51724
51724->61725
01674->11726
11726->21727
21727->31728
31728->41729
01674->11730
11730->21731
21731->31732
31732->41733
01674->11734
11734->21735
11734->21736
11734->21737
21737->31738
11734->21739
21739->31740
31740->41741
31740->41742
31740->41743
41743->51744
41743->51745
51745->61746
61746->71747
51745->61748
61748->71749
21739->31750
31750->41751
31750->41752
41752->51753
51753->61754
61754->71755
61754->71756
31750->41757
21739->31758
31758->41759
31758->41760
31758->41761
21739->31762
31762->41763
41763->51764
31762->41765
31762->41766
41766->51767
41766->51768
51768->61769
61769->71770
61769->71771
31762->41772
41772->51773
51773->61774
61774->71775
71775->81776
71775->81777
51773->61778
61778->71779
71779->81780
71779->81781
81781->91782
81781->91783
91783->101784
91783->101785
101785->111786
101785->111787
111787->121788
51773->61789
61789->71790
71790->81791
71790->81792
81792->91793
81792->91794
61789->71795
71795->81796
81796->91797
81796->91798
81796->91799
81796->91800
91800->101801
101801->111802
111802->121803
121803->131804
121803->131805
131805->141806
131805->141807
141807->151808
141807->151809
151809->161810
101801->111811
111811->121812
121812->131813
131813->141814
121812->131815
121812->131816
51773->61817
61817->71818
21739->31819
31819->41820
41820->51821
31819->41822
31819->41823
41823->51824
41823->51825
31819->41826
41826->51827
51827->61828
21739->31829
31829->41830
41830->51831
31829->41832
31829->41833
41833->51834
41833->51835
51835->61836
61836->71837
61836->71838
31829->41839
41839->51840
51840->61841
61841->71842
71842->81843
81843->91844
71842->81845
71842->81846
51840->61847
61847->71848
21739->31849
31849->41850
41850->51851
31849->41852
31849->41853
41853->51854
51854->61855
61855->71856
71856->81857
71856->81858
41853->51859
31849->41860
41860->51861
51861->61862
21739->31863
31863->41864
41864->51865
31863->41866
31863->41867
41867->51868
41867->51869
51869->61870
61870->71871
71871->81872
81872->91873
91873->101874
91873->101875
61870->71876
31863->41877
41877->51878
51878->61879
61879->71880
71880->81881
81881->91882
71880->81883
71880->81884
51878->61885
61885->71886
21739->31887
31887->41888
31887->41889
41889->51890
41889->51891
51891->61892
61892->71893
61892->71894
31887->41895
41895->51896
51896->61897
61897->71898
71898->81899
71898->81900
71898->81901
81901->91902
81901->91903
51896->61904
61904->71905
71905->81906
71905->81907
61904->71908
71908->81909
51896->61910
61910->71911
71911->81912
81912->91913
81912->91914
71911->81915
81915->91916
81915->91917
91917->101918
51896->61919
61919->71920
71920->81921
71920->81922
71920->81923
81923->91924
91924->101925
101925->111926
101925->111927
51896->61928
61928->71929
71929->81930
61928->71931
71931->81932
81932->91933
91933->101934
101934->111935
111935->121936
111935->121937
101934->111938
111938->121939
111938->121940
121940->131941
131941->141942
121940->131943
131943->141944
81932->91945
91945->101946
101946->111947
101946->111948
111948->121949
121949->131950
121949->131951
111948->121952
121952->131953
121952->131954
51896->61955
61955->71956
71956->81957
81957->91958
71956->81959
61955->71960
71960->81961
81961->91962
91962->101963
91962->101964
91962->101965
51896->61966
61966->71967
71967->81968
71967->81969
81969->91970
81969->91971
51896->61972
61972->71973
21739->31974
31974->41975
41975->51976
31974->41977
31974->41978
41978->51979
41978->51980
51980->61981
61981->71982
61981->71983
31974->41984
41984->51985
51985->61986
61986->71987
71987->81988
71987->81989
71987->81990
51985->61991
61991->71992
-10->01993
01993->11994
11994->21995
21995->31996
31996->41997
41997->51998
51998->61999
61999->72000
01993->12001
12001->22002
12001->22003
22003->32004
32004->42005
42005->52006
12001->22007
22007->32008
32008->42009
32008->42010
22007->32011
32011->42012
32011->42013
42013->52014
32011->42015
22007->32016
32016->42017
42017->52018
42017->52019
52019->62020
62020->72021
62020->72022
52019->62023
62023->72024
62023->72025
32016->42026
42026->52027
52027->62028
62028->72029
62028->72030
62028->72031
72031->82032
82032->92033
82032->92034
72031->82035
22007->32036
32036->42037
32036->42038
42038->52039
42038->52040
52040->62041
62041->72042
62041->72043
32036->42044
42044->52045
52045->62046
62046->72047
72047->82048
62046->72049
72049->82050
82050->92051
22007->32052
32052->42053
42053->52054
32052->42055
32052->42056
42056->52057
42056->52058
52058->62059
62059->72060
62059->72061
32052->42062
42062->52063
52063->62064
62064->72065
72065->82066
82066->92067
92067->102068
92067->102069
62064->72070
72070->82071
52063->62072
62072->72073
72073->82074
72073->82075
82075->92076
82075->92077
92077->102078
92077->102079
52063->62080
62080->72081
72081->82082
72081->82083
82083->92084
22007->32085
32085->42086
32085->42087
42087->52088
42087->52089
32085->42090
42090->52091
52091->62092
62092->72093
72093->82094
72093->82095
22007->32096
32096->42097
32096->42098
42098->52099
42098->52100
32096->42101
42101->52102
52102->62103
62103->72104
72104->82105
72104->82106
-10->02107
02107->12108
12108->22109
22109->32110
32110->42111
42111->52112
52112->62113
02107->12114
12114->22115
22115->32116
32116->42117
42117->52118
52118->62119
62119->72120
72120->82121
02107->12122
12122->22123
22123->32124
32124->42125
42125->52126
52126->62127
62127->72128
02107->12129
12129->22130
22130->32131
02107->12132
12132->22133
12132->22134
22134->32135
12132->22136
22136->32137
32137->42138
32137->42139
42139->52140
42139->52141
32137->42142
22136->32143
32143->42144
32143->42145
32143->42146
22136->32147
32147->42148
32147->42149
42149->52150
52150->62151
32147->42152
-10->02153
02153->12154
12154->22155
22155->32156
32156->42157
42157->52158
52158->62159
02153->12160
12160->22161
12160->22162
12160->22163
22163->32164
32164->42165
32164->42166
32164->42167
42167->52168
42167->52169
32164->42170
22163->32171
32171->42172
32171->42173
42173->52174
42173->52175
52175->62176
62176->72177
72177->82178
72177->82179
62176->72180
72180->82181
72180->82182
32171->42183
42183->52184
52184->62185
62185->72186
72186->82187
62185->72188
72188->82189
72188->82190
72188->82191
22163->32192
32192->42193
32192->42194
42194->52195
42194->52196
32192->42197
42197->52198
52198->62199
62199->72200
72200->82201
82201->92202
72200->82203
52198->62204
62204->72205
72205->82206
82206->92207
72205->82208
52198->62209
62209->72210
72210->82211
82211->92212
72210->82213
52198->62214
62214->72215
72215->82216
72215->82217
82217->92218
82217->92219
52198->62220
62220->72221
72221->82222
72221->82223
82223->92224
82223->92225
52198->62226
62226->72227
72227->82228
72227->82229
82229->92230
82229->92231
52198->62232
62232->72233
72233->82234
72233->82235
82235->92236
82235->92237
92237->102238
92237->102239
52198->62240
62240->72241
72241->82242
72241->82243
82243->92244
82243->92245
52198->62246
62246->72247
72247->82248
72247->82249
82249->92250
82249->92251
52198->62252
62252->72253
72253->82254
72253->82255
82255->92256
82255->92257
52198->62258
62258->72259
72259->82260
72259->82261
82261->92262
82261->92263
52198->62264
62264->72265
72265->82266
72265->82267
82267->92268
82267->92269
52198->62270
62270->72271
72271->82272
72271->82273
82273->92274
82273->92275
52198->62276
62276->72277
72277->82278
72277->82279
82279->92280
82279->92281
52198->62282
62282->72283
72283->82284
52198->62285
62285->72286
72286->82287
72286->82288
22163->32289
32289->42290
32289->42291
42291->52292
42291->52293
52293->62294
62294->72295
72295->82296
72295->82297
62294->72298
72298->82299
82299->92300
82299->92301
72298->82302
32289->42303
42303->52304
52304->62305
62305->72306
62305->72307
72307->82308
72307->82309
72307->82310
22163->32311
32311->42312
32311->42313
42313->52314
42313->52315
52315->62316
62316->72317
72317->82318
82318->92319
82318->92320
72317->82321
82321->92322
92322->102323
92322->102324
82321->92325
62316->72326
72326->82327
72326->82328
32311->42329
42329->52330
52330->62331
62331->72332
72332->82333
72332->82334
82334->92335
82334->92336
62331->72337
72337->82338
72337->82339
82339->92340
62331->72341
72341->82342
62331->72343
72343->82344
82344->92345
92345->102346
92345->102347
102347->112348
102347->112349
82344->92350
92350->102351
102351->112352
112352->122353
122353->132354
122353->132355
132355->142356
142356->152357
142356->152358
152358->162359
162359->172360
152358->162361
112352->122362
122362->132363
132363->142364
142364->152365
142364->152366
152366->162367
152366->162368
102351->112369
112369->122370
52330->62371
62371->72372
72372->82373
22163->32374
32374->42375
32374->42376
42376->52377
42376->52378
52378->62379
62379->72380
72380->82381
82381->92382
82381->92383
72380->82384
62379->72385
72385->82386
72385->82387
32374->42388
42388->52389
52389->62390
62390->72391
72391->82392
72391->82393
52389->62394
62394->72395
72395->82396
82396->92397
92397->102398
92397->102399
92397->102400
102400->112401
102400->112402
112402->122403
112402->122404
72395->82405
62394->72406
72406->82407
82407->92408
82407->92409
92409->102410
92409->102411
102411->112412
102411->112413
112413->122414
112413->122415
52389->62416
62416->72417
72417->82418
82418->92419
92419->102420
92419->102421
92419->102422
102422->112423
102422->112424
112424->122425
112424->122426
72417->82427
62416->72428
72428->82429
82429->92430
82429->92431
92431->102432
92431->102433
102433->112434
102433->112435
52389->62436
62436->72437
72437->82438
82438->92439
92439->102440
92439->102441
92439->102442
102442->112443
102442->112444
112444->122445
112444->122446
72437->82447
62436->72448
72448->82449
82449->92450
82449->92451
92451->102452
102452->112453
102452->112454
112454->122455
112454->122456
122456->132457
122456->132458
92451->102459
52389->62460
62460->72461
72461->82462
62460->72463
72463->82464
82464->92465
82464->92466
52389->62467
62467->72468
72468->82469
82469->92470
92470->102471
92470->102472
92470->102473
102473->112474
102473->112475
112475->122476
112475->122477
72468->82478
62467->72479
72479->82480
82480->92481
82480->92482
92482->102483
92482->102484
102484->112485
102484->112486
112486->122487
112486->122488
52389->62489
62489->72490
72490->82491
82491->92492
92492->102493
92492->102494
92492->102495
102495->112496
102495->112497
112497->122498
112497->122499
72490->82500
62489->72501
72501->82502
82502->92503
82502->92504
92504->102505
92504->102506
102506->112507
102506->112508
112508->122509
112508->122510
52389->62511
62511->72512
72512->82513
82513->92514
92514->102515
92514->102516
92514->102517
102517->112518
102517->112519
112519->122520
112519->122521
72512->82522
62511->72523
72523->82524
82524->92525
82524->92526
92526->102527
92526->102528
102528->112529
102528->112530
112530->122531
112530->122532
52389->62533
62533->72534
72534->82535
82535->92536
92536->102537
92536->102538
92536->102539
102539->112540
102539->112541
112541->122542
112541->122543
72534->82544
62533->72545
72545->82546
82546->92547
82546->92548
92548->102549
102549->112550
102549->112551
112551->122552
112551->122553
122553->132554
122553->132555
92548->102556
52389->62557
62557->72558
72558->82559
82559->92560
92560->102561
92560->102562
92560->102563
102563->112564
102563->112565
112565->122566
112565->122567
72558->82568
62557->72569
72569->82570
82570->92571
82570->92572
92572->102573
92572->102574
102574->112575
102574->112576
112576->122577
112576->122578
52389->62579
62579->72580
72580->82581
82581->92582
92582->102583
92582->102584
92582->102585
102585->112586
102585->112587
112587->122588
112587->122589
72580->82590
62579->72591
72591->82592
82592->92593
82592->92594
92594->102595
92594->102596
102596->112597
102596->112598
112598->122599
112598->122600
52389->62601
62601->72602
72602->82603
82603->92604
92604->102605
92604->102606
92604->102607
102607->112608
102607->112609
112609->122610
112609->122611
72602->82612
62601->72613
72613->82614
82614->92615
82614->92616
92616->102617
92616->102618
102618->112619
102618->112620
112620->122621
112620->122622
52389->62623
62623->72624
72624->82625
82625->92626
92626->102627
92626->102628
92626->102629
102629->112630
102629->112631
112631->122632
112631->122633
72624->82634
62623->72635
72635->82636
82636->92637
82636->92638
92638->102639
92638->102640
102640->112641
102640->112642
112642->122643
112642->122644
-10->02645
02645->12646
12646->22647
22647->32648
32648->42649
42649->52650
52650->62651
02645->12652
12652->22653
22653->32654
32654->42655
42655->52656
52656->62657
02645->12658
12658->22659
22659->32660
02645->12661
12661->22662
12661->22663
12661->22664
22664->32665
12661->22666
22666->32667
32667->42668
42668->52669
52669->62670
62670->72671
62670->72672
32667->42673
22666->32674
32674->42675
32674->42676
42676->52677
42676->52678
52678->62679
62679->72680
72680->82681
82681->92682
82681->92683
52678->62684
32674->42685
42685->52686
52686->62687
62687->72688
72688->82689
62687->72690
62687->72691
22666->32692
32692->42693
32692->42694
42694->52695
32692->42696
42696->52697
52697->62698
62698->72699
62698->72700
62698->72701
72701->82702
82702->92703
92703->102704
92703->102705
22666->32706
32706->42707
32706->42708
32706->42709
42709->52710
42709->52711
52711->62712
62712->72713
62712->72714
32706->42715
42715->52716
52716->62717
62717->72718
72718->82719
72718->82720
82720->92721
82720->92722
92722->102723
92722->102724
52716->62725
62725->72726
72726->82727
72726->82728
62725->72729
72729->82730
52716->62731
62731->72732
22666->32733
32733->42734
32733->42735
42735->52736
42735->52737
52737->62738
62738->72739
72739->82740
72739->82741
62738->72742
72742->82743
72742->82744
32733->42745
42745->52746
52746->62747
62747->72748
72748->82749
72748->82750
82750->92751
82750->92752
92752->102753
92752->102754
52746->62755
62755->72756
72756->82757
72756->82758
62755->72759
72759->82760
82760->92761
92761->102762
52746->62763
62763->72764
72764->82765
72764->82766
82766->92767
82766->92768
92768->102769
92768->102770
52746->62771
62771->72772
72772->82773
72772->82774
62771->72775
72775->82776
82776->92777
92777->102778
52746->62779
62779->72780
72780->82781
72780->82782
22666->32783
32783->42784
32783->42785
42785->52786
52786->62787
62787->72788
72788->82789
72788->82790
82790->92791
92791->102792
102792->112793
102792->112794
42785->52795
52795->62796
62796->72797
72797->82798
72797->82799
62796->72800
72800->82801
72800->82802
32783->42803
42803->52804
52804->62805
62805->72806
72806->82807
72806->82808
82808->92809
82808->92810
92810->102811
92810->102812
52804->62813
62813->72814
72814->82815
72814->82816
62813->72817
72817->82818
82818->92819
92819->102820
52804->62821
62821->72822
72822->82823
72822->82824
82824->92825
82824->92826
82824->92827
22666->32828
32828->42829
32828->42830
42830->52831
52831->62832
62832->72833
72833->82834
72833->82835
82835->92836
92836->102837
102837->112838
102837->112839
42830->52840
52840->62841
62841->72842
72842->82843
82843->92844
82843->92845
72842->82846
82846->92847
82846->92848
62841->72849
72849->82850
72849->82851
32828->42852
42852->52853
52853->62854
62854->72855
72855->82856
82856->92857
92857->102858
102858->112859
102858->112860
112860->122861
122861->132862
132862->142863
132862->142864
72855->82865
82865->92866
82865->92867
92867->102868
102868->112869
112869->122870
112869->122871
122871->132872
132872->142873
142873->152874
142873->152875
92867->102876
102876->112877
102876->112878
112878->122879
122879->132880
132880->142881
132880->142882
142882->152883
152883->162884
162884->172885
162884->172886
112878->122887
122887->132888
132888->142889
142889->152890
132888->142891
132888->142892
142892->152893
142892->152894
152894->162895
162895->172896
172896->182897
182897->192898
182897->192899
192899->202900
202900->212901
212901->222902
212901->222903
172896->182904
162895->172905
172905->182906
182906->192907
182906->192908
192908->202909
202909->212910
212910->222911
212910->222912
172905->182913
132888->142914
142914->152915
152915->162916
162916->172917
172917->182918
162916->172919
172919->182920
182920->192921
52853->62922
62922->72923
72923->82924
72923->82925
82925->92926
92926->102927
102927->112928
102927->112929
62922->72930
62922->72931
72931->82932
62922->72933
72933->82934
82934->92935
92935->102936
102936->112937
112937->122938
102936->112939
112939->122940
92935->102941
102941->112942
82934->92943
92943->102944
102944->112945
102944->112946
112946->122947
122947->132948
132948->142949
132948->142950
112946->122951
122951->132952
132952->142953
122951->132954
132954->142955
142955->152956
132954->142957
142957->152958
52853->62959
62959->72960
72960->82961
22666->32962
32962->42963
32962->42964
42964->52965
52965->62966
62966->72967
72967->82968
72967->82969
82969->92970
92970->102971
102971->112972
102971->112973
42964->52974
52974->62975
62975->72976
72976->82977
72976->82978
62975->72979
72979->82980
72979->82981
32962->42982
42982->52983
52983->62984
62984->72985
72985->82986
82986->92987
92987->102988
102988->112989
102988->112990
112990->122991
122991->132992
132992->142993
132992->142994
72985->82995
82995->92996
82995->92997
92997->102998
102998->112999
112999->123000
112999->123001
123001->133002
133002->143003
143003->153004
143003->153005
92997->103006
103006->113007
103006->113008
113008->123009
123009->133010
133010->143011
133010->143012
143012->153013
153013->163014
163014->173015
163014->173016
113008->123017
123017->133018
133018->143019
143019->153020
133018->143021
133018->143022
143022->153023
143022->153024
153024->163025
163025->173026
173026->183027
183027->193028
183027->193029
193029->203030
203030->213031
213031->223032
213031->223033
173026->183034
163025->173035
173035->183036
183036->193037
183036->193038
193038->203039
203039->213040
213040->223041
213040->223042
173035->183043
133018->143044
143044->153045
153045->163046
163046->173047
173047->183048
163046->173049
173049->183050
183050->193051
52983->63052
63052->73053
73053->83054
73053->83055
83055->93056
93056->103057
103057->113058
103057->113059
63052->73060
63052->73061
73061->83062
63052->73063
73063->83064
83064->93065
93065->103066
93065->103067
103067->113068
113068->123069
123069->133070
123069->133071
103067->113072
113072->123073
123073->133074
113072->123075
123075->133076
133076->143077
123075->133078
133078->143079
52983->63080
63080->73081
73081->83082
22666->33083
33083->43084
33083->43085
43085->53086
53086->63087
63087->73088
73088->83089
73088->83090
83090->93091
93091->103092
103092->113093
103092->113094
43085->53095
53095->63096
63096->73097
63096->73098
33083->43099
43099->53100
53100->63101
63101->73102
63101->73103
73103->83104
73103->83105
22666->33106
33106->43107
33106->43108
43108->53109
53109->63110
63110->73111
73111->83112
73111->83113
83113->93114
93114->103115
103115->113116
103115->113117
43108->53118
53118->63119
63119->73120
63119->73121
33106->43122
43122->53123
53123->63124
63124->73125
63124->73126
73126->83127
73126->83128
22666->33129
33129->43130
33129->43131
43131->53132
53132->63133
63133->73134
73134->83135
73134->83136
83136->93137
93137->103138
103138->113139
103138->113140
43131->53141
53141->63142
63142->73143
73143->83144
73143->83145
63142->73146
73146->83147
73146->83148
33129->43149
43149->53150
53150->63151
63151->73152
73152->83153
83153->93154
83153->93155
73152->83156
83156->93157
93157->103158
83156->93159
63151->73160
73160->83161
83161->93162
93162->103163
53150->63164
63164->73165
73165->83166
83166->93167
93167->103168
93167->103169
103169->113170
113170->123171
113170->123172
103169->113173
63164->73174
73174->83175
83175->93176
83175->93177
73174->83178
83178->93179
93179->103180
103180->113181
22666->33182
33182->43183
33182->43184
33182->43185
43185->53186
43185->53187
53187->63188
63188->73189
63188->73190
33182->43191
22666->33192
33192->43193
33192->43194
43194->53195
43194->53196
33192->43197
43197->53198
53198->63199
63199->73200
22666->33201
33201->43202
33201->43203
43203->53204
43203->53205
33201->43206
43206->53207
53207->63208
63208->73209
73209->83210
83210->93211
83210->93212
73209->83213
83213->93214
63208->73215
73215->83216
83216->93217
53207->63218
63218->73219
73219->83220
83220->93221
73219->83222
73219->83223
73219->83224
22666->33225
33225->43226
33225->43227
43227->53228
43227->53229
53229->63230
63230->73231
63230->73232
33225->43233
43233->53234
53234->63235
63235->73236
63235->73237
-10->03238
03238->13239
13239->23240
23240->33241
33241->43242
43242->53243
53243->63244
63244->73245
03238->13246
13246->23247
13246->23248
23248->33249
13246->23250
23250->33251
13246->23252
23252->33253
33253->43254
33253->43255
43255->53256
33253->43257
23252->33258
33258->43259
33258->43260
43260->53261
43260->53262
53262->63263
63263->73264
63263->73265
53262->63266
63266->73267
63266->73268
33258->43269
43269->53270
53270->63271
63271->73272
63271->73273
-10->03274
03274->13275
13275->23276
23276->33277
33277->43278
43278->53279
53279->63280
63280->73281
03274->13282
13282->23283
13282->23284
23284->33285
13282->23286
23286->33287
33287->43288
33287->43289
33287->43290
43290->53291
43290->53292
33287->43293
43293->53294
53294->63295
63295->73296
73296->83297
73296->83298
23286->33299
33299->43300
33299->43301
33299->43302
43302->53303
43302->53304
53304->63305
63305->73306
63305->73307
63305->73308
33299->43309
43309->53310
53310->63311
63311->73312
73312->83313
73312->83314
23286->33315
33315->43316
33315->43317
33315->43318
43318->53319
43318->53320
53320->63321
63321->73322
63321->73323
63321->73324
33315->43325
43325->53326
53326->63327
63327->73328
73328->83329
73328->83330
-10->03331
03331->13332
13332->23333
23333->33334
33334->43335
43335->53336
53336->63337
63337->73338
03331->13339
13339->23340
13339->23341
23341->33342
33342->43343
33342->43344
43344->53345
43344->53346
23341->33347
33347->43348
33347->43349
43349->53350
43349->53351
23341->33352
33352->43353
33352->43354
43354->53355
43354->53356
23341->33357
33357->43358
33357->43359
43359->53360
43359->53361
-10->03362
03362->13363
13363->23364
23364->33365
33365->43366
43366->53367
53367->63368
63368->73369
03362->13370
13370->23371
23371->33372
33372->43373
43373->53374
53374->63375
63375->73376
03362->13377
13377->23378
23378->33379
33379->43380
03362->13381
13381->23382
23382->33383
33383->43384
03362->13385
13385->23386
13385->23387
23387->33388
13385->23389
23389->33390
33390->43391
33390->43392
33390->43393
43393->53394
43393->53395
53395->63396
63396->73397
63396->73398
63396->73399
33390->43400
43400->53401
53401->63402
63402->73403
73403->83404
83404->93405
73403->83406
23389->33407
33407->43408
33407->43409
33407->43410
43410->53411
43410->53412
53412->63413
63413->73414
73414->83415
73414->83416
73414->83417
63413->73418
73418->83419
83419->93420
83419->93421
73418->83422
33407->43423
43423->53424
53424->63425
63425->73426
73426->83427
83427->93428
73426->83429
63425->73430
73430->83431
83431->93432
93432->103433
103433->113434
113434->123435
113434->123436
103433->113437
103433->113438
113438->123439
83431->93440
93440->103441
53424->63442
63442->73443
73443->83444
83444->93445
83444->93446
73443->83447
73443->83448
53424->63449
63449->73450
23389->33451
33451->43452
33451->43453
33451->43454
43454->53455
43454->53456
53456->63457
63457->73458
73458->83459
73458->83460
73458->83461
63457->73462
73462->83463
83463->93464
83463->93465
73462->83466
33451->43467
43467->53468
53468->63469
63469->73470
73470->83471
83471->93472
73470->83473
63469->73474
73474->83475
83475->93476
93476->103477
103477->113478
113478->123479
113478->123480
103477->113481
103477->113482
113482->123483
83475->93484
93484->103485
53468->63486
63486->73487
73487->83488
83488->93489
83488->93490
73487->83491
73487->83492
53468->63493
63493->73494
23389->33495
33495->43496
43496->53497
43496->53498
53498->63499
63499->73500
73500->83501
83501->93502
93502->103503
103503->113504
83501->93505
73500->83506
83506->93507
93507->103508
103508->113509
83506->93510
63499->73511
73511->83512
83512->93513
93513->103514
73511->83515
33495->43516
43516->53517
53517->63518
63518->73519
73519->83520
73519->83521
83521->93522
83521->93523
93523->103524
53517->63525
63525->73526
73526->83527
73526->83528
83528->93529
83528->93530
93530->103531
53517->63532
63532->73533
73533->83534
83534->93535
93535->103536
103536->113537
113537->123538
73533->83539
83539->93540
83539->93541
93541->103542
103542->113543
113543->123544
123544->133545
93541->103546
53517->63547
63547->73548
73548->83549
53517->63550
63550->73551
73551->83552
73551->83553
83553->93554
83553->93555
63550->73556
73556->83557
73556->83558
63550->73559
73559->83560
63550->73561
73561->83562
83562->93563
93563->103564
103564->113565
103564->113566
113566->123567
113566->123568
123568->133569
123568->133570
83562->93571
93571->103572
103572->113573
103572->113574
113574->123575
93571->103576
103576->113577
113577->123578
123578->133579
133579->143580
133579->143581
143581->153582
123578->133583
133583->143584
143584->153585
153585->163586
143584->153587
113577->123588
123588->133589
133589->143590
133589->143591
133589->143592
93571->103593
103593->113594
113594->123595
123595->133596
133596->143597
133596->143598
123595->133599
53517->63600
63600->73601
73601->83602
73601->83603
83603->93604
83603->93605
83603->93606
83603->93607
83603->93608
23389->33609
33609->43610
43610->53611
43610->53612
53612->63613
63613->73614
73614->83615
83615->93616
83615->93617
73614->83618
83618->93619
93619->103620
103620->113621
83618->93622
73614->83623
83623->93624
93624->103625
103625->113626
83623->93627
73614->83628
83628->93629
93629->103630
103630->113631
113631->123632
123632->133633
83628->93634
63613->73635
73635->83636
83636->93637
93637->103638
73635->83639
33609->43640
43640->53641
53641->63642
63642->73643
73643->83644
83644->93645
93645->103646
73643->83647
83647->93648
83647->93649
93649->103650
93649->103651
53641->63652
63652->73653
73653->83654
73653->83655
53641->63656
63656->73657
73657->83658
73657->83659
73657->83660
63656->73661
73661->83662
83662->93663
83662->93664
93664->103665
73661->83666
83666->93667
93667->103668
93667->103669
83666->93670
63656->73671
73671->83672
63656->73673
73673->83674
83674->93675
93675->103676
93675->103677
103677->113678
113678->123679
113678->123680
103677->113681
103677->113682
103677->113683
103677->113684
53641->63685
63685->73686
73686->83687
73686->83688
83688->93689
53641->63690
63690->73691
73691->83692
73691->83693
83693->93694
83693->93695
63690->73696
73696->83697
73696->83698
83698->93699
63690->73700
73700->83701
63690->73702
73702->83703
83703->93704
93704->103705
103705->113706
103705->113707
113707->123708
113707->123709
123709->133710
123709->133711
83703->93712
93712->103713
103713->113714
103713->113715
113715->123716
113715->123717
113715->123718
113715->123719
113715->123720
83703->93721
93721->103722
103722->113723
103722->113724
113724->123725
113724->123726
123726->133727
123726->133728
53641->63729
63729->73730
73730->83731
73730->83732
83732->93733
83732->93734
93734->103735
93734->103736
63729->73737
73737->83738
73737->83739
63729->73740
73740->83741
63729->73742
73742->83743
83743->93744
93744->103745
103745->113746
103745->113747
113747->123748
113747->123749
123749->133750
123749->133751
83743->93752
93752->103753
103753->113754
103753->113755
113755->123756
113755->123757
123757->133758
123757->133759
23389->33760
33760->43761
43761->53762
43761->53763
53763->63764
63764->73765
73765->83766
73765->83767
63764->73768
73768->83769
83769->93770
93770->103771
73768->83772
33760->43773
43773->53774
53774->63775
63775->73776
63775->73777
73777->83778
83778->93779
73777->83780
83780->93781
73777->83782
23389->33783
33783->43784
43784->53785
43784->53786
53786->63787
63787->73788
73788->83789
83789->93790
93790->103791
103791->113792
83789->93793
73788->83794
83794->93795
93795->103796
103796->113797
83794->93798
63787->73799
73799->83800
83800->93801
93801->103802
73799->83803
33783->43804
43804->53805
53805->63806
63806->73807
73807->83808
53805->63809
63809->73810
73810->83811
73810->83812
83812->93813
83812->93814
93814->103815
53805->63816
63816->73817
73817->83818
83818->93819
93819->103820
73817->83821
83821->93822
83821->93823
93823->103824
103824->113825
53805->63826
63826->73827
73827->83828
73827->83829
83829->93830
83829->93831
53805->63832
63832->73833
73833->83834
83834->93835
93835->103836
73833->83837
83837->93838
83837->93839
93839->103840
103840->113841
93839->103842
53805->63843
63843->73844
73844->83845
73844->83846
83846->93847
83846->93848
63843->73849
73849->83850
73849->83851
63843->73852
73852->83853
63843->73854
73854->83855
83855->93856
93856->103857
93856->103858
103858->113859
53805->63860
63860->73861
73861->83862
73861->83863
83863->93864
83863->93865
53805->63866
63866->73867
73867->83868
83868->93869
93869->103870
103870->113871
113871->123872
103870->113873
93869->103874
103874->113875
103874->113876
63866->73877
73877->83878
83878->93879
93879->103880
103880->113881
113881->123882
113881->123883
103880->113884
113884->123885
113884->123886
123886->133887
123886->133888
123886->133889
133889->143890
83878->93891
93891->103892
103892->113893
103892->113894
113894->123895
113894->123896
113894->123897
113894->123898
113894->123899
113894->123900
83878->93901
93901->103902
103902->113903
103902->113904
103902->113905
113905->123906
113905->123907
23389->33908
33908->43909
43909->53910
43909->53911
53911->63912
63912->73913
73913->83914
83914->93915
93915->103916
103916->113917
83914->93918
73913->83919
83919->93920
93920->103921
103921->113922
83919->93923
73913->83924
83924->93925
93925->103926
103926->113927
83924->93928
73913->83929
83929->93930
93930->103931
93930->103932
83929->93933
73913->83934
83934->93935
93935->103936
103936->113937
83934->93938
63912->73939
73939->83940
83940->93941
93941->103942
73939->83943
33908->43944
43944->53945
53945->63946
63946->73947
73947->83948
73947->83949
83949->93950
83949->93951
93951->103952
103952->113953
113953->123954
123954->133955
113953->123956
103952->113957
113957->123958
113957->123959
123959->133960
133960->143961
123959->133962
103952->113963
113963->123964
53945->63965
63965->73966
73966->83967
73966->83968
83968->93969
83968->93970
93970->103971
103971->113972
113972->123973
123973->133974
113972->123975
103971->113976
113976->123977
113976->123978
123978->133979
133979->143980
123978->133981
103971->113982
113982->123983
53945->63984
63984->73985
73985->83986
73985->83987
83987->93988
83987->93989
53945->63990
63990->73991
73991->83992
73991->83993
63990->73994
73994->83995
83995->93996
93996->103997
93996->103998
103998->113999
103998->114000
83995->94001
94001->104002
94001->104003
104003->114004
83995->94005
94005->104006
83995->94007
94007->104008
104008->114009
114009->124010
124010->134011
134011->144012
134011->144013
124010->134014
114009->124015
124015->134016
134016->144017
134016->144018
124015->134019
104008->114020
114020->124021
124021->134022
134022->144023
144023->154024
144023->154025
144023->154026
124021->134027
53945->64028
64028->74029
74029->84030
84030->94031
84030->94032
74029->84033
84033->94034
94034->104035
94034->104036
84033->94037
64028->74038
74038->84039
84039->94040
94040->104041
104041->114042
104041->114043
114043->124044
114043->124045
124045->134046
124045->134047
84039->94048
94048->104049
104049->114050
104049->114051
114051->124052
114051->124053
84039->94054
94054->104055
104055->114056
104055->114057
114057->124058
124058->134059
114057->124060
84039->94061
94061->104062
104062->114063
104062->114064
114064->124065
124065->134066
134066->144067
124065->134068
114064->124069
64028->74070
74070->84071
84071->94072
94072->104073
104073->114074
104073->114075
94072->104076
104076->114077
114077->124078
114077->124079
104076->114080
84071->94081
74070->84082
84082->94083
94083->104084
104084->114085
114085->124086
114085->124087
124087->134088
124087->134089
134089->144090
134089->144091
94083->104092
104092->114093
114093->124094
114093->124095
124095->134096
124095->134097
94083->104098
104098->114099
114099->124100
114099->124101
124101->134102
134102->144103
124101->134104
74070->84105
84105->94106
94106->104107
104107->114108
104107->114109
94106->104110
104110->114111
84105->94112
94112->104113
104113->114114
114114->124115
124115->134116
124115->134117
134117->144118
104113->114119
114119->124120
124120->134121
124120->134122
134122->144123
134122->144124
104113->114125
114125->124126
124126->134127
134127->144128
134127->144129
-10->04130
04130->14131
14131->24132
24132->34133
34133->44134
44134->54135
54135->64136
64136->74137
04130->14138
14138->24139
14138->24140
24140->34141
34141->44142
34141->44143
24140->34144
34144->44145
34144->44146
24140->34147
34147->44148
34147->44149
24140->34150
34150->44151
34150->44152
}

digraph G {
00[label="compilationUnit\n Bud1%@@@@E%DSDB@@@ "]
01[label="compilationUnit\n digraphG{00[label=\"compilationUnit\n Bud1%@@@@E%DSDB@@@ \"]} "]
02[label="compilationUnit\n digraphG{00[label=\"compilationUnit\n Bud1%@@@@E%DSDB@@@ \"]01[label=\"compilationUnit\n digraphG{00[label=\\"compilationUnit\n Bud1%@@@@E%DSDB@@@ \\"]} \"]-10->01} "]
03[label="compilationUnit\n <EOF> "]
04[label="compilationUnit\n <EOF> "]
05[label="compilationUnit\n digraphG{00[label=\"compilationUnit\n Bud1%@@@@E%DSDB@@@ \"]01[label=\"compilationUnit\n digraphG{00[label=\\"compilationUnit\n Bud1%@@@@E%DSDB@@@ \\"]} \"]02[label=\"compilationUnit\n digraphG{00[label=\\"compilationUnit\n Bud1%@@@@E%DSDB@@@ \\"]01[label=\\"compilationUnit\n digraphG{00[label=\\\"compilationUnitnBud1%@@@@E%DSDB@@@\"]} \\"]-10->01} \"]03[label=\"compilationUnit\n <EOF> \"]04[label=\"compilationUnit\n <EOF> \"]-10->01-10->02-10->03-10->04} "]
06[label="compilationUnit\n <EOF> "]
07[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.bintrie;publicclass_EmptyValueArray<V>extends_ValueArray<V>{public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}}<EOF> "]
18[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.bintrie; "]
29[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie "]
310[label="packageName\n com.hankcs.hanlp.collection.trie "]
411[label="packageName\n com.hankcs.hanlp.collection "]
512[label="packageName\n com.hankcs.hanlp "]
613[label="packageName\n com.hankcs "]
714[label="packageName\n com "]
115[label="normalClassDeclaration\n publicclass_EmptyValueArray<V>extends_ValueArray<V>{public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}} "]
216[label="classModifier\n public "]
217[label="typeParameters\n <V> "]
318[label="typeParameter\n V "]
219[label="superclass\n extends_ValueArray<V> "]
320[label="classType\n _ValueArray<V> "]
421[label="typeArguments\n <V> "]
522[label="classType_lfno_classOrInterfaceType\n V "]
223[label="classBody\n {public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}} "]
324[label="constructorDeclaration\n public_EmptyValueArray(){} "]
425[label="constructorModifier\n public "]
426[label="constructorDeclarator\n _EmptyValueArray() "]
527[label="simpleTypeName\n _EmptyValueArray "]
428[label="constructorBody\n {} "]
329[label="methodDeclaration\n @OverridepublicVnextValue(){returnnull;} "]
430[label="markerAnnotation\n @Override "]
531[label="typeName\n Override "]
432[label="methodModifier\n public "]
433[label="methodHeader\n VnextValue() "]
534[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
535[label="methodDeclarator\n nextValue() "]
436[label="block\n {returnnull;} "]
537[label="returnStatement\n returnnull; "]
638[label="literal\n null "]
039[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.bintrie;publicclass_ValueArray<V>{V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}}<EOF> "]
140[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.bintrie; "]
241[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie "]
342[label="packageName\n com.hankcs.hanlp.collection.trie "]
443[label="packageName\n com.hankcs.hanlp.collection "]
544[label="packageName\n com.hankcs.hanlp "]
645[label="packageName\n com.hankcs "]
746[label="packageName\n com "]
147[label="normalClassDeclaration\n publicclass_ValueArray<V>{V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}} "]
248[label="classModifier\n public "]
249[label="typeParameters\n <V> "]
350[label="typeParameter\n V "]
251[label="classBody\n {V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}} "]
352[label="fieldDeclaration\n V[]value; "]
453[label="unannArrayType\n V[] "]
554[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
555[label="dims\n [] "]
456[label="variableDeclaratorId\n value "]
357[label="fieldDeclaration\n intoffset; "]
458[label="integralType\n int "]
459[label="variableDeclaratorId\n offset "]
360[label="constructorDeclaration\n public_ValueArray(V[]value){this.value=value;} "]
461[label="constructorModifier\n public "]
462[label="constructorDeclarator\n _ValueArray(V[]value) "]
563[label="simpleTypeName\n _ValueArray "]
564[label="formalParameter\n V[]value "]
665[label="unannArrayType\n V[] "]
766[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
767[label="dims\n [] "]
668[label="variableDeclaratorId\n value "]
469[label="constructorBody\n {this.value=value;} "]
570[label="expressionStatement\n this.value=value; "]
671[label="assignment\n this.value=value "]
772[label="fieldAccess\n this.value "]
873[label="primaryNoNewArray_lfno_primary\n this "]
774[label="assignmentOperator\n = "]
775[label="expressionName\n value "]
376[label="methodDeclaration\n publicVnextValue(){returnvalue[offset++];} "]
477[label="methodModifier\n public "]
478[label="methodHeader\n VnextValue() "]
579[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
580[label="methodDeclarator\n nextValue() "]
481[label="block\n {returnvalue[offset++];} "]
582[label="returnStatement\n returnvalue[offset++]; "]
683[label="arrayAccess_lfno_primary\n value[offset++] "]
784[label="expressionName\n value "]
785[label="postfixExpression\n offset++ "]
886[label="expressionName\n offset "]
887[label="postIncrementExpression_lf_postfixExpression\n ++ "]
388[label="constructorDeclaration\n protected_ValueArray(){} "]
489[label="constructorModifier\n protected "]
490[label="constructorDeclarator\n _ValueArray() "]
591[label="simpleTypeName\n _ValueArray "]
492[label="constructorBody\n {} "]
393[label="methodDeclaration\n public_ValueArraysetValue(V[]value){this.value=value;returnthis;} "]
494[label="methodModifier\n public "]
495[label="methodHeader\n _ValueArraysetValue(V[]value) "]
596[label="unannClassType_lfno_unannClassOrInterfaceType\n _ValueArray "]
597[label="methodDeclarator\n setValue(V[]value) "]
698[label="formalParameter\n V[]value "]
799[label="unannArrayType\n V[] "]
8100[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
8101[label="dims\n [] "]
7102[label="variableDeclaratorId\n value "]
4103[label="block\n {this.value=value;returnthis;} "]
5104[label="blockStatements\n this.value=value;returnthis; "]
6105[label="expressionStatement\n this.value=value; "]
7106[label="assignment\n this.value=value "]
8107[label="fieldAccess\n this.value "]
9108[label="primaryNoNewArray_lfno_primary\n this "]
8109[label="assignmentOperator\n = "]
8110[label="expressionName\n value "]
6111[label="returnStatement\n returnthis; "]
7112[label="primaryNoNewArray_lfno_primary\n this "]
0113[label="compilationUnit\n packagecom.hankcs.hanlp.classification.classifiers;importcom.hankcs.hanlp.classification.corpus.Document;importcom.hankcs.hanlp.classification.corpus.IDataSet;importcom.hankcs.hanlp.classification.corpus.MemoryDataSet;importcom.hankcs.hanlp.classification.models.AbstractModel;importcom.hankcs.hanlp.classification.utilities.CollectionUtility;importcom.hankcs.hanlp.classification.utilities.MathUtility;importjava.io.IOException;importjava.util.Map;importjava.util.TreeMap;importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger;publicabstractclassAbstractClassifierimplementsIClassifier{@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}}<EOF> "]
1114[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.classifiers; "]
2115[label="packageName\n com.hankcs.hanlp.classification.classifiers "]
3116[label="packageName\n com.hankcs.hanlp.classification "]
4117[label="packageName\n com.hankcs.hanlp "]
5118[label="packageName\n com.hankcs "]
6119[label="packageName\n com "]
1120[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.Document; "]
2121[label="typeName\n com.hankcs.hanlp.classification.corpus.Document "]
3122[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4123[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5124[label="packageOrTypeName\n com.hankcs.hanlp "]
6125[label="packageOrTypeName\n com.hankcs "]
7126[label="packageOrTypeName\n com "]
1127[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.IDataSet; "]
2128[label="typeName\n com.hankcs.hanlp.classification.corpus.IDataSet "]
3129[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4130[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5131[label="packageOrTypeName\n com.hankcs.hanlp "]
6132[label="packageOrTypeName\n com.hankcs "]
7133[label="packageOrTypeName\n com "]
1134[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.MemoryDataSet; "]
2135[label="typeName\n com.hankcs.hanlp.classification.corpus.MemoryDataSet "]
3136[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4137[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5138[label="packageOrTypeName\n com.hankcs.hanlp "]
6139[label="packageOrTypeName\n com.hankcs "]
7140[label="packageOrTypeName\n com "]
1141[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.models.AbstractModel; "]
2142[label="typeName\n com.hankcs.hanlp.classification.models.AbstractModel "]
3143[label="packageOrTypeName\n com.hankcs.hanlp.classification.models "]
4144[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5145[label="packageOrTypeName\n com.hankcs.hanlp "]
6146[label="packageOrTypeName\n com.hankcs "]
7147[label="packageOrTypeName\n com "]
1148[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.CollectionUtility; "]
2149[label="typeName\n com.hankcs.hanlp.classification.utilities.CollectionUtility "]
3150[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4151[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5152[label="packageOrTypeName\n com.hankcs.hanlp "]
6153[label="packageOrTypeName\n com.hankcs "]
7154[label="packageOrTypeName\n com "]
1155[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.MathUtility; "]
2156[label="typeName\n com.hankcs.hanlp.classification.utilities.MathUtility "]
3157[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4158[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5159[label="packageOrTypeName\n com.hankcs.hanlp "]
6160[label="packageOrTypeName\n com.hankcs "]
7161[label="packageOrTypeName\n com "]
1162[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
2163[label="typeName\n java.io.IOException "]
3164[label="packageOrTypeName\n java.io "]
4165[label="packageOrTypeName\n java "]
1166[label="singleTypeImportDeclaration\n importjava.util.Map; "]
2167[label="typeName\n java.util.Map "]
3168[label="packageOrTypeName\n java.util "]
4169[label="packageOrTypeName\n java "]
1170[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
2171[label="typeName\n java.util.TreeMap "]
3172[label="packageOrTypeName\n java.util "]
4173[label="packageOrTypeName\n java "]
1174[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger; "]
2175[label="typeName\n com.hankcs.hanlp.classification.utilities.Predefine "]
3176[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4177[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5178[label="packageOrTypeName\n com.hankcs.hanlp "]
6179[label="packageOrTypeName\n com.hankcs "]
7180[label="packageOrTypeName\n com "]
1181[label="normalClassDeclaration\n publicabstractclassAbstractClassifierimplementsIClassifier{@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}} "]
2182[label="classModifier\n public "]
2183[label="classModifier\n abstract "]
2184[label="superinterfaces\n implementsIClassifier "]
3185[label="classType\n IClassifier "]
2186[label="classBody\n {@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}} "]
3187[label="methodDeclaration\n @OverridepublicIClassifierenableProbability(booleanenable){returnthis;} "]
4188[label="markerAnnotation\n @Override "]
5189[label="typeName\n Override "]
4190[label="methodModifier\n public "]
4191[label="methodHeader\n IClassifierenableProbability(booleanenable) "]
5192[label="unannClassType_lfno_unannClassOrInterfaceType\n IClassifier "]
5193[label="methodDeclarator\n enableProbability(booleanenable) "]
6194[label="formalParameter\n booleanenable "]
7195[label="unannPrimitiveType\n boolean "]
7196[label="variableDeclaratorId\n enable "]
4197[label="block\n {returnthis;} "]
5198[label="returnStatement\n returnthis; "]
6199[label="primaryNoNewArray_lfno_primary\n this "]
3200[label="fieldDeclaration\n booleanconfigProbabilityEnabled=true; "]
4201[label="unannPrimitiveType\n boolean "]
4202[label="variableDeclarator\n configProbabilityEnabled=true "]
5203[label="variableDeclaratorId\n configProbabilityEnabled "]
5204[label="literal\n true "]
3205[label="methodDeclaration\n @OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);} "]
4206[label="markerAnnotation\n @Override "]
5207[label="typeName\n Override "]
4208[label="methodModifier\n public "]
4209[label="methodHeader\n Stringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException "]
5210[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
5211[label="methodDeclarator\n classify(Stringtext) "]
6212[label="formalParameter\n Stringtext "]
7213[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
7214[label="variableDeclaratorId\n text "]
5215[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6216[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7217[label="classType\n IllegalArgumentException "]
7218[label="classType\n IllegalStateException "]
4219[label="block\n {Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);} "]
5220[label="blockStatements\n Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap); "]
6221[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=predict(text); "]
7222[label="localVariableDeclaration\n Map<String,Double>scoreMap=predict(text) "]
8223[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9224[label="typeArguments\n <String,Double> "]
10225[label="typeArgumentList\n String,Double "]
11226[label="classType_lfno_classOrInterfaceType\n String "]
11227[label="classType_lfno_classOrInterfaceType\n Double "]
8228[label="variableDeclarator\n scoreMap=predict(text) "]
9229[label="variableDeclaratorId\n scoreMap "]
9230[label="methodInvocation_lfno_primary\n predict(text) "]
10231[label="methodName\n predict "]
10232[label="expressionName\n text "]
6233[label="returnStatement\n returnCollectionUtility.max(scoreMap); "]
7234[label="methodInvocation_lfno_primary\n CollectionUtility.max(scoreMap) "]
8235[label="typeName\n CollectionUtility "]
8236[label="expressionName\n scoreMap "]
3237[label="methodDeclaration\n @OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);} "]
4238[label="markerAnnotation\n @Override "]
5239[label="typeName\n Override "]
4240[label="methodModifier\n public "]
4241[label="methodHeader\n Stringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException "]
5242[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
5243[label="methodDeclarator\n classify(Documentdocument) "]
6244[label="formalParameter\n Documentdocument "]
7245[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7246[label="variableDeclaratorId\n document "]
5247[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6248[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7249[label="classType\n IllegalArgumentException "]
7250[label="classType\n IllegalStateException "]
4251[label="block\n {Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);} "]
5252[label="blockStatements\n Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap); "]
6253[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=predict(document); "]
7254[label="localVariableDeclaration\n Map<String,Double>scoreMap=predict(document) "]
8255[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9256[label="typeArguments\n <String,Double> "]
10257[label="typeArgumentList\n String,Double "]
11258[label="classType_lfno_classOrInterfaceType\n String "]
11259[label="classType_lfno_classOrInterfaceType\n Double "]
8260[label="variableDeclarator\n scoreMap=predict(document) "]
9261[label="variableDeclaratorId\n scoreMap "]
9262[label="methodInvocation_lfno_primary\n predict(document) "]
10263[label="methodName\n predict "]
10264[label="expressionName\n document "]
6265[label="returnStatement\n returnCollectionUtility.max(scoreMap); "]
7266[label="methodInvocation_lfno_primary\n CollectionUtility.max(scoreMap) "]
8267[label="typeName\n CollectionUtility "]
8268[label="expressionName\n scoreMap "]
3269[label="methodDeclaration\n @Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);} "]
4270[label="markerAnnotation\n @Override "]
5271[label="typeName\n Override "]
4272[label="methodModifier\n public "]
4273[label="methodHeader\n voidtrain(StringfolderPath,StringcharsetName)throwsIOException "]
5274[label="result\n void "]
5275[label="methodDeclarator\n train(StringfolderPath,StringcharsetName) "]
6276[label="formalParameterList\n StringfolderPath,StringcharsetName "]
7277[label="formalParameter\n StringfolderPath "]
8278[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8279[label="variableDeclaratorId\n folderPath "]
7280[label="formalParameter\n StringcharsetName "]
8281[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8282[label="variableDeclaratorId\n charsetName "]
5283[label="throws_\n throwsIOException "]
6284[label="classType\n IOException "]
4285[label="block\n {IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);} "]
5286[label="blockStatements\n IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet); "]
6287[label="localVariableDeclarationStatement\n IDataSetdataSet=newMemoryDataSet(); "]
7288[label="localVariableDeclaration\n IDataSetdataSet=newMemoryDataSet() "]
8289[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
8290[label="variableDeclarator\n dataSet=newMemoryDataSet() "]
9291[label="variableDeclaratorId\n dataSet "]
9292[label="classInstanceCreationExpression_lfno_primary\n newMemoryDataSet() "]
6293[label="expressionStatement\n dataSet.load(folderPath,charsetName); "]
7294[label="methodInvocation\n dataSet.load(folderPath,charsetName) "]
8295[label="typeName\n dataSet "]
8296[label="argumentList\n folderPath,charsetName "]
9297[label="expressionName\n folderPath "]
9298[label="expressionName\n charsetName "]
6299[label="expressionStatement\n train(dataSet); "]
7300[label="methodInvocation\n train(dataSet) "]
8301[label="methodName\n train "]
8302[label="expressionName\n dataSet "]
3303[label="methodDeclaration\n @Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);} "]
4304[label="markerAnnotation\n @Override "]
5305[label="typeName\n Override "]
4306[label="methodModifier\n public "]
4307[label="methodHeader\n voidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException "]
5308[label="result\n void "]
5309[label="methodDeclarator\n train(Map<String,String[]>trainingDataSet) "]
6310[label="formalParameter\n Map<String,String[]>trainingDataSet "]
7311[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String[]> "]
8312[label="typeArguments\n <String,String[]> "]
9313[label="typeArgumentList\n String,String[] "]
10314[label="classType_lfno_classOrInterfaceType\n String "]
10315[label="arrayType\n String[] "]
11316[label="classType_lfno_classOrInterfaceType\n String "]
11317[label="dims\n [] "]
7318[label="variableDeclaratorId\n trainingDataSet "]
5319[label="throws_\n throwsIllegalArgumentException "]
6320[label="classType\n IllegalArgumentException "]
4321[label="block\n {IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);} "]
5322[label="blockStatements\n IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet); "]
6323[label="localVariableDeclarationStatement\n IDataSetdataSet=newMemoryDataSet(); "]
7324[label="localVariableDeclaration\n IDataSetdataSet=newMemoryDataSet() "]
8325[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
8326[label="variableDeclarator\n dataSet=newMemoryDataSet() "]
9327[label="variableDeclaratorId\n dataSet "]
9328[label="classInstanceCreationExpression_lfno_primary\n newMemoryDataSet() "]
6329[label="expressionStatement\n logger.start(\"正在构造训练数据集...\"); "]
7330[label="methodInvocation\n logger.start(\"正在构造训练数据集...\") "]
8331[label="typeName\n logger "]
8332[label="literal\n \"正在构造训练数据集...\" "]
6333[label="localVariableDeclarationStatement\n inttotal=trainingDataSet.size(); "]
7334[label="localVariableDeclaration\n inttotal=trainingDataSet.size() "]
8335[label="integralType\n int "]
8336[label="variableDeclarator\n total=trainingDataSet.size() "]
9337[label="variableDeclaratorId\n total "]
9338[label="methodInvocation_lfno_primary\n trainingDataSet.size() "]
10339[label="typeName\n trainingDataSet "]
6340[label="localVariableDeclarationStatement\n intcur=0; "]
7341[label="localVariableDeclaration\n intcur=0 "]
8342[label="integralType\n int "]
8343[label="variableDeclarator\n cur=0 "]
9344[label="variableDeclaratorId\n cur "]
9345[label="literal\n 0 "]
6346[label="enhancedForStatement\n for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));} "]
7347[label="unannClassOrInterfaceType\n Map.Entry<String,String[]> "]
8348[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
8349[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String[]> "]
9350[label="typeArguments\n <String,String[]> "]
10351[label="typeArgumentList\n String,String[] "]
11352[label="classType_lfno_classOrInterfaceType\n String "]
11353[label="arrayType\n String[] "]
12354[label="classType_lfno_classOrInterfaceType\n String "]
12355[label="dims\n [] "]
7356[label="variableDeclaratorId\n entry "]
7357[label="methodInvocation_lfno_primary\n trainingDataSet.entrySet() "]
8358[label="typeName\n trainingDataSet "]
7359[label="block\n {Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));} "]
8360[label="blockStatements\n Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)); "]
9361[label="localVariableDeclarationStatement\n Stringcategory=entry.getKey(); "]
10362[label="localVariableDeclaration\n Stringcategory=entry.getKey() "]
11363[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
11364[label="variableDeclarator\n category=entry.getKey() "]
12365[label="variableDeclaratorId\n category "]
12366[label="methodInvocation_lfno_primary\n entry.getKey() "]
13367[label="typeName\n entry "]
9368[label="expressionStatement\n logger.out(\"[%s]...\",category); "]
10369[label="methodInvocation\n logger.out(\"[%s]...\",category) "]
11370[label="typeName\n logger "]
11371[label="argumentList\n \"[%s]...\",category "]
12372[label="literal\n \"[%s]...\" "]
12373[label="expressionName\n category "]
9374[label="enhancedForStatement\n for(Stringdoc:entry.getValue()){dataSet.add(category,doc);} "]
10375[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
10376[label="variableDeclaratorId\n doc "]
10377[label="methodInvocation_lfno_primary\n entry.getValue() "]
11378[label="typeName\n entry "]
10379[label="block\n {dataSet.add(category,doc);} "]
11380[label="expressionStatement\n dataSet.add(category,doc); "]
12381[label="methodInvocation\n dataSet.add(category,doc) "]
13382[label="typeName\n dataSet "]
13383[label="argumentList\n category,doc "]
14384[label="expressionName\n category "]
14385[label="expressionName\n doc "]
9386[label="expressionStatement\n ++cur; "]
10387[label="preIncrementExpression\n ++cur "]
11388[label="expressionName\n cur "]
9389[label="expressionStatement\n logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)); "]
10390[label="methodInvocation\n logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)) "]
11391[label="typeName\n logger "]
11392[label="argumentList\n \"%.2f%%...\",MathUtility.percentage(cur,total) "]
12393[label="literal\n \"%.2f%%...\" "]
12394[label="methodInvocation_lfno_primary\n MathUtility.percentage(cur,total) "]
13395[label="typeName\n MathUtility "]
13396[label="argumentList\n cur,total "]
14397[label="expressionName\n cur "]
14398[label="expressionName\n total "]
6399[label="expressionStatement\n logger.finish(\" 加载完毕\n\"); "]
7400[label="methodInvocation\n logger.finish(\" 加载完毕\n\") "]
8401[label="typeName\n logger "]
8402[label="literal\n \" 加载完毕\n\" "]
6403[label="expressionStatement\n train(dataSet); "]
7404[label="methodInvocation\n train(dataSet) "]
8405[label="methodName\n train "]
8406[label="expressionName\n dataSet "]
3407[label="methodDeclaration\n @Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");} "]
4408[label="markerAnnotation\n @Override "]
5409[label="typeName\n Override "]
4410[label="methodModifier\n public "]
4411[label="methodHeader\n voidtrain(StringfolderPath)throwsIOException "]
5412[label="result\n void "]
5413[label="methodDeclarator\n train(StringfolderPath) "]
6414[label="formalParameter\n StringfolderPath "]
7415[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
7416[label="variableDeclaratorId\n folderPath "]
5417[label="throws_\n throwsIOException "]
6418[label="classType\n IOException "]
4419[label="block\n {train(folderPath,\"UTF-8\");} "]
5420[label="expressionStatement\n train(folderPath,\"UTF-8\"); "]
6421[label="methodInvocation\n train(folderPath,\"UTF-8\") "]
7422[label="methodName\n train "]
7423[label="argumentList\n folderPath,\"UTF-8\" "]
8424[label="expressionName\n folderPath "]
8425[label="literal\n \"UTF-8\" "]
3426[label="methodDeclaration\n @OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;} "]
4427[label="markerAnnotation\n @Override "]
5428[label="typeName\n Override "]
4429[label="methodModifier\n public "]
4430[label="methodHeader\n Map<String,Double>predict(Documentdocument) "]
5431[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
6432[label="typeArguments\n <String,Double> "]
7433[label="typeArgumentList\n String,Double "]
8434[label="classType_lfno_classOrInterfaceType\n String "]
8435[label="classType_lfno_classOrInterfaceType\n Double "]
5436[label="methodDeclarator\n predict(Documentdocument) "]
6437[label="formalParameter\n Documentdocument "]
7438[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7439[label="variableDeclaratorId\n document "]
4440[label="block\n {AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;} "]
5441[label="blockStatements\n AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap; "]
6442[label="localVariableDeclarationStatement\n AbstractModelmodel=getModel(); "]
7443[label="localVariableDeclaration\n AbstractModelmodel=getModel() "]
8444[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractModel "]
8445[label="variableDeclarator\n model=getModel() "]
9446[label="variableDeclaratorId\n model "]
9447[label="methodInvocation_lfno_primary\n getModel() "]
10448[label="methodName\n getModel "]
6449[label="ifThenStatement\n if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
7450[label="equalityExpression\n model==null "]
8451[label="expressionName\n model "]
8452[label="literal\n null "]
7453[label="block\n {thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
8454[label="throwStatement\n thrownewIllegalStateException(\"未训练模型！无法执行预测！\"); "]
9455[label="classInstanceCreationExpression_lfno_primary\n newIllegalStateException(\"未训练模型！无法执行预测！\") "]
10456[label="literal\n \"未训练模型！无法执行预测！\" "]
6457[label="ifThenStatement\n if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");} "]
7458[label="equalityExpression\n document==null "]
8459[label="expressionName\n document "]
8460[label="literal\n null "]
7461[label="block\n {thrownewIllegalArgumentException(\"参数 text == null\");} "]
8462[label="throwStatement\n thrownewIllegalArgumentException(\"参数 text == null\"); "]
9463[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"参数 text == null\") "]
10464[label="literal\n \"参数 text == null\" "]
6465[label="localVariableDeclarationStatement\n double[]probs=categorize(document); "]
7466[label="localVariableDeclaration\n double[]probs=categorize(document) "]
8467[label="unannArrayType\n double[] "]
9468[label="floatingPointType\n double "]
9469[label="dims\n [] "]
8470[label="variableDeclarator\n probs=categorize(document) "]
9471[label="variableDeclaratorId\n probs "]
9472[label="methodInvocation_lfno_primary\n categorize(document) "]
10473[label="methodName\n categorize "]
10474[label="expressionName\n document "]
6475[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=newTreeMap<String,Double>(); "]
7476[label="localVariableDeclaration\n Map<String,Double>scoreMap=newTreeMap<String,Double>() "]
8477[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9478[label="typeArguments\n <String,Double> "]
10479[label="typeArgumentList\n String,Double "]
11480[label="classType_lfno_classOrInterfaceType\n String "]
11481[label="classType_lfno_classOrInterfaceType\n Double "]
8482[label="variableDeclarator\n scoreMap=newTreeMap<String,Double>() "]
9483[label="variableDeclaratorId\n scoreMap "]
9484[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,Double>() "]
10485[label="typeArguments\n <String,Double> "]
11486[label="typeArgumentList\n String,Double "]
12487[label="classType_lfno_classOrInterfaceType\n String "]
12488[label="classType_lfno_classOrInterfaceType\n Double "]
6489[label="basicForStatement\n for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);} "]
7490[label="localVariableDeclaration\n inti=0 "]
8491[label="integralType\n int "]
8492[label="variableDeclarator\n i=0 "]
9493[label="variableDeclaratorId\n i "]
9494[label="literal\n 0 "]
7495[label="relationalExpression\n i<probs.length "]
8496[label="expressionName\n i "]
8497[label="expressionName\n probs.length "]
9498[label="ambiguousName\n probs "]
7499[label="postIncrementExpression\n i++ "]
8500[label="expressionName\n i "]
7501[label="block\n {scoreMap.put(model.catalog[i],probs[i]);} "]
8502[label="expressionStatement\n scoreMap.put(model.catalog[i],probs[i]); "]
9503[label="methodInvocation\n scoreMap.put(model.catalog[i],probs[i]) "]
10504[label="typeName\n scoreMap "]
10505[label="argumentList\n model.catalog[i],probs[i] "]
11506[label="arrayAccess_lfno_primary\n model.catalog[i] "]
12507[label="expressionName\n model.catalog "]
13508[label="ambiguousName\n model "]
12509[label="expressionName\n i "]
11510[label="arrayAccess_lfno_primary\n probs[i] "]
12511[label="expressionName\n probs "]
12512[label="expressionName\n i "]
6513[label="returnStatement\n returnscoreMap; "]
7514[label="expressionName\n scoreMap "]
3515[label="methodDeclaration\n @Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;} "]
4516[label="markerAnnotation\n @Override "]
5517[label="typeName\n Override "]
4518[label="methodModifier\n public "]
4519[label="methodHeader\n intlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException "]
5520[label="integralType\n int "]
5521[label="methodDeclarator\n label(Documentdocument) "]
6522[label="formalParameter\n Documentdocument "]
7523[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7524[label="variableDeclaratorId\n document "]
5525[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6526[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7527[label="classType\n IllegalArgumentException "]
7528[label="classType\n IllegalStateException "]
4529[label="block\n {AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;} "]
5530[label="blockStatements\n AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest; "]
6531[label="localVariableDeclarationStatement\n AbstractModelmodel=getModel(); "]
7532[label="localVariableDeclaration\n AbstractModelmodel=getModel() "]
8533[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractModel "]
8534[label="variableDeclarator\n model=getModel() "]
9535[label="variableDeclaratorId\n model "]
9536[label="methodInvocation_lfno_primary\n getModel() "]
10537[label="methodName\n getModel "]
6538[label="ifThenStatement\n if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
7539[label="equalityExpression\n model==null "]
8540[label="expressionName\n model "]
8541[label="literal\n null "]
7542[label="block\n {thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
8543[label="throwStatement\n thrownewIllegalStateException(\"未训练模型！无法执行预测！\"); "]
9544[label="classInstanceCreationExpression_lfno_primary\n newIllegalStateException(\"未训练模型！无法执行预测！\") "]
10545[label="literal\n \"未训练模型！无法执行预测！\" "]
6546[label="ifThenStatement\n if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");} "]
7547[label="equalityExpression\n document==null "]
8548[label="expressionName\n document "]
8549[label="literal\n null "]
7550[label="block\n {thrownewIllegalArgumentException(\"参数 text == null\");} "]
8551[label="throwStatement\n thrownewIllegalArgumentException(\"参数 text == null\"); "]
9552[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"参数 text == null\") "]
10553[label="literal\n \"参数 text == null\" "]
6554[label="localVariableDeclarationStatement\n double[]probs=categorize(document); "]
7555[label="localVariableDeclaration\n double[]probs=categorize(document) "]
8556[label="unannArrayType\n double[] "]
9557[label="floatingPointType\n double "]
9558[label="dims\n [] "]
8559[label="variableDeclarator\n probs=categorize(document) "]
9560[label="variableDeclaratorId\n probs "]
9561[label="methodInvocation_lfno_primary\n categorize(document) "]
10562[label="methodName\n categorize "]
10563[label="expressionName\n document "]
6564[label="localVariableDeclarationStatement\n doublemax=Double.NEGATIVE_INFINITY; "]
7565[label="localVariableDeclaration\n doublemax=Double.NEGATIVE_INFINITY "]
8566[label="floatingPointType\n double "]
8567[label="variableDeclarator\n max=Double.NEGATIVE_INFINITY "]
9568[label="variableDeclaratorId\n max "]
9569[label="expressionName\n Double.NEGATIVE_INFINITY "]
10570[label="ambiguousName\n Double "]
6571[label="localVariableDeclarationStatement\n intbest=-1; "]
7572[label="localVariableDeclaration\n intbest=-1 "]
8573[label="integralType\n int "]
8574[label="variableDeclarator\n best=-1 "]
9575[label="variableDeclaratorId\n best "]
9576[label="unaryExpression\n -1 "]
10577[label="literal\n 1 "]
6578[label="basicForStatement\n for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}} "]
7579[label="localVariableDeclaration\n inti=0 "]
8580[label="integralType\n int "]
8581[label="variableDeclarator\n i=0 "]
9582[label="variableDeclaratorId\n i "]
9583[label="literal\n 0 "]
7584[label="relationalExpression\n i<probs.length "]
8585[label="expressionName\n i "]
8586[label="expressionName\n probs.length "]
9587[label="ambiguousName\n probs "]
7588[label="postIncrementExpression\n i++ "]
8589[label="expressionName\n i "]
7590[label="block\n {if(probs[i]>max){max=probs[i];best=i;}} "]
8591[label="ifThenStatement\n if(probs[i]>max){max=probs[i];best=i;} "]
9592[label="relationalExpression\n probs[i]>max "]
10593[label="arrayAccess_lfno_primary\n probs[i] "]
11594[label="expressionName\n probs "]
11595[label="expressionName\n i "]
10596[label="expressionName\n max "]
9597[label="block\n {max=probs[i];best=i;} "]
10598[label="blockStatements\n max=probs[i];best=i; "]
11599[label="expressionStatement\n max=probs[i]; "]
12600[label="assignment\n max=probs[i] "]
13601[label="expressionName\n max "]
13602[label="assignmentOperator\n = "]
13603[label="arrayAccess_lfno_primary\n probs[i] "]
14604[label="expressionName\n probs "]
14605[label="expressionName\n i "]
11606[label="expressionStatement\n best=i; "]
12607[label="assignment\n best=i "]
13608[label="expressionName\n best "]
13609[label="assignmentOperator\n = "]
13610[label="expressionName\n i "]
6611[label="returnStatement\n returnbest; "]
7612[label="expressionName\n best "]
0613[label="compilationUnit\n packagecom.hankcs.hanlp.mining.word2vec;importjava.io.IOException;importjava.util.Scanner;publicabstractclassAbstractClosestVectors{staticfinalintN=40;protectedScannerscanner;protectedfinalVectorsReadervectorsReader;protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);}protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;}protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;}protectedabstractResultgetTargetVector();finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}}protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}}}<EOF> "]
1614[label="packageDeclaration\n packagecom.hankcs.hanlp.mining.word2vec; "]
2615[label="packageName\n com.hankcs.hanlp.mining.word2vec "]
3616[label="packageName\n com.hankcs.hanlp.mining "]
4617[label="packageName\n com.hankcs.hanlp "]
5618[label="packageName\n com.hankcs "]
6619[label="packageName\n com "]
1620[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
2621[label="typeName\n java.io.IOException "]
3622[label="packageOrTypeName\n java.io "]
4623[label="packageOrTypeName\n java "]
1624[label="singleTypeImportDeclaration\n importjava.util.Scanner; "]
2625[label="typeName\n java.util.Scanner "]
3626[label="packageOrTypeName\n java.util "]
4627[label="packageOrTypeName\n java "]
1628[label="normalClassDeclaration\n publicabstractclassAbstractClosestVectors{staticfinalintN=40;protectedScannerscanner;protectedfinalVectorsReadervectorsReader;protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);}protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;}protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;}protectedabstractResultgetTargetVector();finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}}protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}}} "]
2629[label="classModifier\n public "]
2630[label="classModifier\n abstract "]
2631[label="classBody\n {staticfinalintN=40;protectedScannerscanner;protectedfinalVectorsReadervectorsReader;protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);}protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;}protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;}protectedabstractResultgetTargetVector();finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}}protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}}} "]
3632[label="fieldDeclaration\n staticfinalintN=40; "]
4633[label="fieldModifier\n static "]
4634[label="fieldModifier\n final "]
4635[label="integralType\n int "]
4636[label="variableDeclarator\n N=40 "]
5637[label="variableDeclaratorId\n N "]
5638[label="literal\n 40 "]
3639[label="fieldDeclaration\n protectedScannerscanner; "]
4640[label="fieldModifier\n protected "]
4641[label="unannClassType_lfno_unannClassOrInterfaceType\n Scanner "]
4642[label="variableDeclaratorId\n scanner "]
3643[label="fieldDeclaration\n protectedfinalVectorsReadervectorsReader; "]
4644[label="fieldModifier\n protected "]
4645[label="fieldModifier\n final "]
4646[label="unannClassType_lfno_unannClassOrInterfaceType\n VectorsReader "]
4647[label="variableDeclaratorId\n vectorsReader "]
3648[label="constructorDeclaration\n protectedAbstractClosestVectors(Stringfile){vectorsReader=newVectorsReader(file);} "]
4649[label="constructorModifier\n protected "]
4650[label="constructorDeclarator\n AbstractClosestVectors(Stringfile) "]
5651[label="simpleTypeName\n AbstractClosestVectors "]
5652[label="formalParameter\n Stringfile "]
6653[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
6654[label="variableDeclaratorId\n file "]
4655[label="constructorBody\n {vectorsReader=newVectorsReader(file);} "]
5656[label="expressionStatement\n vectorsReader=newVectorsReader(file); "]
6657[label="assignment\n vectorsReader=newVectorsReader(file) "]
7658[label="expressionName\n vectorsReader "]
7659[label="assignmentOperator\n = "]
7660[label="classInstanceCreationExpression_lfno_primary\n newVectorsReader(file) "]
8661[label="expressionName\n file "]
3662[label="methodDeclaration\n protectedString[]nextWords(intn,Stringmsg){System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;} "]
4663[label="methodModifier\n protected "]
4664[label="methodHeader\n String[]nextWords(intn,Stringmsg) "]
5665[label="unannArrayType\n String[] "]
6666[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
6667[label="dims\n [] "]
5668[label="methodDeclarator\n nextWords(intn,Stringmsg) "]
6669[label="formalParameterList\n intn,Stringmsg "]
7670[label="formalParameter\n intn "]
8671[label="integralType\n int "]
8672[label="variableDeclaratorId\n n "]
7673[label="formalParameter\n Stringmsg "]
8674[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8675[label="variableDeclaratorId\n msg "]
4676[label="block\n {System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords;} "]
5677[label="blockStatements\n System.out.println(msg+\" ('q' to break): \");String[]words=newString[n];for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;}returnwords; "]
6678[label="expressionStatement\n System.out.println(msg+\" ('q' to break): \"); "]
7679[label="methodInvocation\n System.out.println(msg+\" ('q' to break): \") "]
8680[label="typeName\n System.out "]
9681[label="packageOrTypeName\n System "]
8682[label="additiveExpression\n msg+\" ('q' to break): \" "]
9683[label="expressionName\n msg "]
9684[label="literal\n \" ('q' to break): \" "]
6685[label="localVariableDeclarationStatement\n String[]words=newString[n]; "]
7686[label="localVariableDeclaration\n String[]words=newString[n] "]
8687[label="unannArrayType\n String[] "]
9688[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
9689[label="dims\n [] "]
8690[label="variableDeclarator\n words=newString[n] "]
9691[label="variableDeclaratorId\n words "]
9692[label="arrayCreationExpression\n newString[n] "]
10693[label="classType_lfno_classOrInterfaceType\n String "]
10694[label="dimExpr\n [n] "]
11695[label="expressionName\n n "]
6696[label="basicForStatement\n for(inti=0;i<n;i++){Stringword=nextWord();if(word==null)returnnull;words[i]=word;} "]
7697[label="localVariableDeclaration\n inti=0 "]
8698[label="integralType\n int "]
8699[label="variableDeclarator\n i=0 "]
9700[label="variableDeclaratorId\n i "]
9701[label="literal\n 0 "]
7702[label="relationalExpression\n i<n "]
8703[label="expressionName\n i "]
8704[label="expressionName\n n "]
7705[label="postIncrementExpression\n i++ "]
8706[label="expressionName\n i "]
7707[label="block\n {Stringword=nextWord();if(word==null)returnnull;words[i]=word;} "]
8708[label="blockStatements\n Stringword=nextWord();if(word==null)returnnull;words[i]=word; "]
9709[label="localVariableDeclarationStatement\n Stringword=nextWord(); "]
10710[label="localVariableDeclaration\n Stringword=nextWord() "]
11711[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
11712[label="variableDeclarator\n word=nextWord() "]
12713[label="variableDeclaratorId\n word "]
12714[label="methodInvocation_lfno_primary\n nextWord() "]
13715[label="methodName\n nextWord "]
9716[label="ifThenStatement\n if(word==null)returnnull; "]
10717[label="equalityExpression\n word==null "]
11718[label="expressionName\n word "]
11719[label="literal\n null "]
10720[label="returnStatement\n returnnull; "]
11721[label="literal\n null "]
9722[label="expressionStatement\n words[i]=word; "]
10723[label="assignment\n words[i]=word "]
11724[label="arrayAccess\n words[i] "]
12725[label="expressionName\n words "]
12726[label="expressionName\n i "]
11727[label="assignmentOperator\n = "]
11728[label="expressionName\n word "]
6729[label="returnStatement\n returnwords; "]
7730[label="expressionName\n words "]
3731[label="methodDeclaration\n protectedStringnextWord(){Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;} "]
4732[label="methodModifier\n protected "]
4733[label="methodHeader\n StringnextWord() "]
5734[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
5735[label="methodDeclarator\n nextWord() "]
4736[label="block\n {Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word;} "]
5737[label="blockStatements\n Stringword=scanner.next();returnword==null||word.length()==0||word.equals(\"q\")?null:word; "]
6738[label="localVariableDeclarationStatement\n Stringword=scanner.next(); "]
7739[label="localVariableDeclaration\n Stringword=scanner.next() "]
8740[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8741[label="variableDeclarator\n word=scanner.next() "]
9742[label="variableDeclaratorId\n word "]
9743[label="methodInvocation_lfno_primary\n scanner.next() "]
10744[label="typeName\n scanner "]
6745[label="returnStatement\n returnword==null||word.length()==0||word.equals(\"q\")?null:word; "]
7746[label="conditionalExpression\n word==null||word.length()==0||word.equals(\"q\")?null:word "]
8747[label="conditionalOrExpression\n word==null||word.length()==0||word.equals(\"q\") "]
9748[label="conditionalOrExpression\n word==null||word.length()==0 "]
10749[label="equalityExpression\n word==null "]
11750[label="expressionName\n word "]
11751[label="literal\n null "]
10752[label="equalityExpression\n word.length()==0 "]
11753[label="methodInvocation_lfno_primary\n word.length() "]
12754[label="typeName\n word "]
11755[label="literal\n 0 "]
9756[label="methodInvocation_lfno_primary\n word.equals(\"q\") "]
10757[label="typeName\n word "]
10758[label="literal\n \"q\" "]
8759[label="literal\n null "]
8760[label="expressionName\n word "]
3761[label="methodDeclaration\n protectedabstractResultgetTargetVector(); "]
4762[label="methodModifier\n protected "]
4763[label="methodModifier\n abstract "]
4764[label="methodHeader\n ResultgetTargetVector() "]
5765[label="unannClassType_lfno_unannClassOrInterfaceType\n Result "]
5766[label="methodDeclarator\n getTargetVector() "]
4767[label="methodBody\n ; "]
3768[label="methodDeclaration\n finalprotectedvoidexecute()throwsIOException{vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}} "]
4769[label="methodModifier\n final "]
4770[label="methodModifier\n protected "]
4771[label="methodHeader\n voidexecute()throwsIOException "]
5772[label="result\n void "]
5773[label="methodDeclarator\n execute() "]
5774[label="throws_\n throwsIOException "]
6775[label="classType\n IOException "]
4776[label="block\n {vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();}} "]
5777[label="blockStatements\n vectorsReader.readVectorFile();finalintwords=vectorsReader.getNumWords();finalintsize=vectorsReader.getSize();try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();} "]
6778[label="expressionStatement\n vectorsReader.readVectorFile(); "]
7779[label="methodInvocation\n vectorsReader.readVectorFile() "]
8780[label="typeName\n vectorsReader "]
6781[label="localVariableDeclarationStatement\n finalintwords=vectorsReader.getNumWords(); "]
7782[label="localVariableDeclaration\n finalintwords=vectorsReader.getNumWords() "]
8783[label="variableModifier\n final "]
8784[label="integralType\n int "]
8785[label="variableDeclarator\n words=vectorsReader.getNumWords() "]
9786[label="variableDeclaratorId\n words "]
9787[label="methodInvocation_lfno_primary\n vectorsReader.getNumWords() "]
10788[label="typeName\n vectorsReader "]
6789[label="localVariableDeclarationStatement\n finalintsize=vectorsReader.getSize(); "]
7790[label="localVariableDeclaration\n finalintsize=vectorsReader.getSize() "]
8791[label="variableModifier\n final "]
8792[label="integralType\n int "]
8793[label="variableDeclarator\n size=vectorsReader.getSize() "]
9794[label="variableDeclaratorId\n size "]
9795[label="methodInvocation_lfno_primary\n vectorsReader.getSize() "]
10796[label="typeName\n vectorsReader "]
6797[label="tryStatement\n try{scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}}finally{scanner.close();} "]
7798[label="block\n {scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);}} "]
8799[label="blockStatements\n scanner=newScanner(System.in);Resultresult=null;while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);} "]
9800[label="expressionStatement\n scanner=newScanner(System.in); "]
10801[label="assignment\n scanner=newScanner(System.in) "]
11802[label="expressionName\n scanner "]
11803[label="assignmentOperator\n = "]
11804[label="classInstanceCreationExpression_lfno_primary\n newScanner(System.in) "]
12805[label="expressionName\n System.in "]
13806[label="ambiguousName\n System "]
9807[label="localVariableDeclarationStatement\n Resultresult=null; "]
10808[label="localVariableDeclaration\n Resultresult=null "]
11809[label="unannClassType_lfno_unannClassOrInterfaceType\n Result "]
11810[label="variableDeclarator\n result=null "]
12811[label="variableDeclaratorId\n result "]
12812[label="literal\n null "]
9813[label="whileStatement\n while((result=getTargetVector())!=null){double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);} "]
10814[label="equalityExpression\n (result=getTargetVector())!=null "]
11815[label="primaryNoNewArray_lfno_primary\n (result=getTargetVector()) "]
12816[label="assignment\n result=getTargetVector() "]
13817[label="expressionName\n result "]
13818[label="assignmentOperator\n = "]
13819[label="methodInvocation_lfno_primary\n getTargetVector() "]
14820[label="methodName\n getTargetVector "]
11821[label="literal\n null "]
10822[label="block\n {double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]);} "]
11823[label="blockStatements\n double[]bestd=newdouble[N];String[]bestw=newString[N];next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}}System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\");for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]); "]
12824[label="localVariableDeclarationStatement\n double[]bestd=newdouble[N]; "]
13825[label="localVariableDeclaration\n double[]bestd=newdouble[N] "]
14826[label="unannArrayType\n double[] "]
15827[label="floatingPointType\n double "]
15828[label="dims\n [] "]
14829[label="variableDeclarator\n bestd=newdouble[N] "]
15830[label="variableDeclaratorId\n bestd "]
15831[label="arrayCreationExpression\n newdouble[N] "]
16832[label="floatingPointType\n double "]
16833[label="dimExpr\n [N] "]
17834[label="expressionName\n N "]
12835[label="localVariableDeclarationStatement\n String[]bestw=newString[N]; "]
13836[label="localVariableDeclaration\n String[]bestw=newString[N] "]
14837[label="unannArrayType\n String[] "]
15838[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
15839[label="dims\n [] "]
14840[label="variableDeclarator\n bestw=newString[N] "]
15841[label="variableDeclaratorId\n bestw "]
15842[label="arrayCreationExpression\n newString[N] "]
16843[label="classType_lfno_classOrInterfaceType\n String "]
16844[label="dimExpr\n [N] "]
17845[label="expressionName\n N "]
12846[label="labeledStatement\n next_word:for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}} "]
13847[label="basicForStatement\n for(inti=0;i<words;i++){for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}} "]
14848[label="localVariableDeclaration\n inti=0 "]
15849[label="integralType\n int "]
15850[label="variableDeclarator\n i=0 "]
16851[label="variableDeclaratorId\n i "]
16852[label="literal\n 0 "]
14853[label="relationalExpression\n i<words "]
15854[label="expressionName\n i "]
15855[label="expressionName\n words "]
14856[label="postIncrementExpression\n i++ "]
15857[label="expressionName\n i "]
14858[label="block\n {for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}}} "]
15859[label="blockStatements\n for(intbi:result.bi){if(i==bi)continuenext_word;}doubledist=0;for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);}for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}} "]
16860[label="enhancedForStatement\n for(intbi:result.bi){if(i==bi)continuenext_word;} "]
17861[label="integralType\n int "]
17862[label="variableDeclaratorId\n bi "]
17863[label="expressionName\n result.bi "]
18864[label="ambiguousName\n result "]
17865[label="block\n {if(i==bi)continuenext_word;} "]
18866[label="ifThenStatement\n if(i==bi)continuenext_word; "]
19867[label="equalityExpression\n i==bi "]
20868[label="expressionName\n i "]
20869[label="expressionName\n bi "]
19870[label="continueStatement\n continuenext_word; "]
16871[label="localVariableDeclarationStatement\n doubledist=0; "]
17872[label="localVariableDeclaration\n doubledist=0 "]
18873[label="floatingPointType\n double "]
18874[label="variableDeclarator\n dist=0 "]
19875[label="variableDeclaratorId\n dist "]
19876[label="literal\n 0 "]
16877[label="basicForStatement\n for(intj=0;j<size;j++){dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);} "]
17878[label="localVariableDeclaration\n intj=0 "]
18879[label="integralType\n int "]
18880[label="variableDeclarator\n j=0 "]
19881[label="variableDeclaratorId\n j "]
19882[label="literal\n 0 "]
17883[label="relationalExpression\n j<size "]
18884[label="expressionName\n j "]
18885[label="expressionName\n size "]
17886[label="postIncrementExpression\n j++ "]
18887[label="expressionName\n j "]
17888[label="block\n {dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j);} "]
18889[label="expressionStatement\n dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j); "]
19890[label="assignment\n dist+=result.vec[j]*vectorsReader.getMatrixElement(i,j) "]
20891[label="expressionName\n dist "]
20892[label="assignmentOperator\n += "]
20893[label="multiplicativeExpression\n result.vec[j]*vectorsReader.getMatrixElement(i,j) "]
21894[label="arrayAccess_lfno_primary\n result.vec[j] "]
22895[label="expressionName\n result.vec "]
23896[label="ambiguousName\n result "]
22897[label="expressionName\n j "]
21898[label="methodInvocation_lfno_primary\n vectorsReader.getMatrixElement(i,j) "]
22899[label="typeName\n vectorsReader "]
22900[label="argumentList\n i,j "]
23901[label="expressionName\n i "]
23902[label="expressionName\n j "]
16903[label="basicForStatement\n for(intj=0;j<N;j++){if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}} "]
17904[label="localVariableDeclaration\n intj=0 "]
18905[label="integralType\n int "]
18906[label="variableDeclarator\n j=0 "]
19907[label="variableDeclaratorId\n j "]
19908[label="literal\n 0 "]
17909[label="relationalExpression\n j<N "]
18910[label="expressionName\n j "]
18911[label="expressionName\n N "]
17912[label="postIncrementExpression\n j++ "]
18913[label="expressionName\n j "]
17914[label="block\n {if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;}} "]
18915[label="ifThenStatement\n if(dist>bestd[j]){for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;} "]
19916[label="relationalExpression\n dist>bestd[j] "]
20917[label="expressionName\n dist "]
20918[label="arrayAccess_lfno_primary\n bestd[j] "]
21919[label="expressionName\n bestd "]
21920[label="expressionName\n j "]
19921[label="block\n {for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break;} "]
20922[label="blockStatements\n for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];}bestd[j]=dist;bestw[j]=vectorsReader.getWord(i);break; "]
21923[label="basicForStatement\n for(intk=N-1;k>j;k--){bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];} "]
22924[label="localVariableDeclaration\n intk=N-1 "]
23925[label="integralType\n int "]
23926[label="variableDeclarator\n k=N-1 "]
24927[label="variableDeclaratorId\n k "]
24928[label="additiveExpression\n N-1 "]
25929[label="expressionName\n N "]
25930[label="literal\n 1 "]
22931[label="relationalExpression\n k>j "]
23932[label="expressionName\n k "]
23933[label="expressionName\n j "]
22934[label="postDecrementExpression\n k-- "]
23935[label="expressionName\n k "]
22936[label="block\n {bestd[k]=bestd[k-1];bestw[k]=bestw[k-1];} "]
23937[label="blockStatements\n bestd[k]=bestd[k-1];bestw[k]=bestw[k-1]; "]
24938[label="expressionStatement\n bestd[k]=bestd[k-1]; "]
25939[label="assignment\n bestd[k]=bestd[k-1] "]
26940[label="arrayAccess\n bestd[k] "]
27941[label="expressionName\n bestd "]
27942[label="expressionName\n k "]
26943[label="assignmentOperator\n = "]
26944[label="arrayAccess_lfno_primary\n bestd[k-1] "]
27945[label="expressionName\n bestd "]
27946[label="additiveExpression\n k-1 "]
28947[label="expressionName\n k "]
28948[label="literal\n 1 "]
24949[label="expressionStatement\n bestw[k]=bestw[k-1]; "]
25950[label="assignment\n bestw[k]=bestw[k-1] "]
26951[label="arrayAccess\n bestw[k] "]
27952[label="expressionName\n bestw "]
27953[label="expressionName\n k "]
26954[label="assignmentOperator\n = "]
26955[label="arrayAccess_lfno_primary\n bestw[k-1] "]
27956[label="expressionName\n bestw "]
27957[label="additiveExpression\n k-1 "]
28958[label="expressionName\n k "]
28959[label="literal\n 1 "]
21960[label="expressionStatement\n bestd[j]=dist; "]
22961[label="assignment\n bestd[j]=dist "]
23962[label="arrayAccess\n bestd[j] "]
24963[label="expressionName\n bestd "]
24964[label="expressionName\n j "]
23965[label="assignmentOperator\n = "]
23966[label="expressionName\n dist "]
21967[label="expressionStatement\n bestw[j]=vectorsReader.getWord(i); "]
22968[label="assignment\n bestw[j]=vectorsReader.getWord(i) "]
23969[label="arrayAccess\n bestw[j] "]
24970[label="expressionName\n bestw "]
24971[label="expressionName\n j "]
23972[label="assignmentOperator\n = "]
23973[label="methodInvocation_lfno_primary\n vectorsReader.getWord(i) "]
24974[label="typeName\n vectorsReader "]
24975[label="expressionName\n i "]
21976[label="breakStatement\n break; "]
12977[label="expressionStatement\n System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\"); "]
13978[label="methodInvocation\n System.out.printf(\"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\") "]
14979[label="typeName\n System.out "]
15980[label="packageOrTypeName\n System "]
14981[label="literal\n \"\n                                              Word       Cosine cosine\n------------------------------------------------------------------------\n\" "]
12982[label="basicForStatement\n for(intj=0;j<N;j++)System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]); "]
13983[label="localVariableDeclaration\n intj=0 "]
14984[label="integralType\n int "]
14985[label="variableDeclarator\n j=0 "]
15986[label="variableDeclaratorId\n j "]
15987[label="literal\n 0 "]
13988[label="relationalExpression\n j<N "]
14989[label="expressionName\n j "]
14990[label="expressionName\n N "]
13991[label="postIncrementExpression\n j++ "]
14992[label="expressionName\n j "]
13993[label="expressionStatement\n System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]); "]
14994[label="methodInvocation\n System.out.printf(\"%50s\t\t%f\n\",bestw[j],bestd[j]) "]
15995[label="typeName\n System.out "]
16996[label="packageOrTypeName\n System "]
15997[label="argumentList\n \"%50s\t\t%f\n\",bestw[j],bestd[j] "]
16998[label="literal\n \"%50s\t\t%f\n\" "]
16999[label="arrayAccess_lfno_primary\n bestw[j] "]
171000[label="expressionName\n bestw "]
171001[label="expressionName\n j "]
161002[label="arrayAccess_lfno_primary\n bestd[j] "]
171003[label="expressionName\n bestd "]
171004[label="expressionName\n j "]
71005[label="finally_\n finally{scanner.close();} "]
81006[label="block\n {scanner.close();} "]
91007[label="expressionStatement\n scanner.close(); "]
101008[label="methodInvocation\n scanner.close() "]
111009[label="typeName\n scanner "]
31010[label="normalClassDeclaration\n protectedstaticclassResult{float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}} "]
41011[label="classModifier\n protected "]
41012[label="classModifier\n static "]
41013[label="classBody\n {float[]vec;int[]bi;publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;}} "]
51014[label="fieldDeclaration\n float[]vec; "]
61015[label="unannArrayType\n float[] "]
71016[label="floatingPointType\n float "]
71017[label="dims\n [] "]
61018[label="variableDeclaratorId\n vec "]
51019[label="fieldDeclaration\n int[]bi; "]
61020[label="unannArrayType\n int[] "]
71021[label="integralType\n int "]
71022[label="dims\n [] "]
61023[label="variableDeclaratorId\n bi "]
51024[label="constructorDeclaration\n publicResult(float[]vec,int[]bi){this.vec=vec;this.bi=bi;} "]
61025[label="constructorModifier\n public "]
61026[label="constructorDeclarator\n Result(float[]vec,int[]bi) "]
71027[label="simpleTypeName\n Result "]
71028[label="formalParameterList\n float[]vec,int[]bi "]
81029[label="formalParameter\n float[]vec "]
91030[label="unannArrayType\n float[] "]
101031[label="floatingPointType\n float "]
101032[label="dims\n [] "]
91033[label="variableDeclaratorId\n vec "]
81034[label="formalParameter\n int[]bi "]
91035[label="unannArrayType\n int[] "]
101036[label="integralType\n int "]
101037[label="dims\n [] "]
91038[label="variableDeclaratorId\n bi "]
61039[label="constructorBody\n {this.vec=vec;this.bi=bi;} "]
71040[label="blockStatements\n this.vec=vec;this.bi=bi; "]
81041[label="expressionStatement\n this.vec=vec; "]
91042[label="assignment\n this.vec=vec "]
101043[label="fieldAccess\n this.vec "]
111044[label="primaryNoNewArray_lfno_primary\n this "]
101045[label="assignmentOperator\n = "]
101046[label="expressionName\n vec "]
81047[label="expressionStatement\n this.bi=bi; "]
91048[label="assignment\n this.bi=bi "]
101049[label="fieldAccess\n this.bi "]
111050[label="primaryNoNewArray_lfno_primary\n this "]
101051[label="assignmentOperator\n = "]
101052[label="expressionName\n bi "]
01053[label="compilationUnit\n packagecom.hankcs.hanlp.classification.corpus;importcom.hankcs.hanlp.classification.models.AbstractModel;importcom.hankcs.hanlp.classification.tokenizers.BigramTokenizer;importcom.hankcs.hanlp.classification.tokenizers.HanLPTokenizer;importcom.hankcs.hanlp.classification.tokenizers.ITokenizer;importcom.hankcs.hanlp.classification.utilities.MathUtility;importcom.hankcs.hanlp.classification.utilities.TextProcessUtility;importjava.io.File;importjava.io.IOException;importjava.util.Map;importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger;publicabstractclassAbstractDataSetimplementsIDataSet{protectedITokenizertokenizer;protectedCatalogcatalog;protectedLexiconlexicon;protectedbooleantestingDataSet;publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;}publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();}publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;}publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);}publicITokenizergetTokenizer(){returntokenizer;}publicCataloggetCatalog(){returncatalog;}publicLexicongetLexicon(){returnlexicon;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);}@OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");}@OverridepublicbooleanisTestingDataSet(){returntestingDataSet;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;}@OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;}@OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;}}<EOF> "]
11054[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.corpus; "]
21055[label="packageName\n com.hankcs.hanlp.classification.corpus "]
31056[label="packageName\n com.hankcs.hanlp.classification "]
41057[label="packageName\n com.hankcs.hanlp "]
51058[label="packageName\n com.hankcs "]
61059[label="packageName\n com "]
11060[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.models.AbstractModel; "]
21061[label="typeName\n com.hankcs.hanlp.classification.models.AbstractModel "]
31062[label="packageOrTypeName\n com.hankcs.hanlp.classification.models "]
41063[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51064[label="packageOrTypeName\n com.hankcs.hanlp "]
61065[label="packageOrTypeName\n com.hankcs "]
71066[label="packageOrTypeName\n com "]
11067[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.BigramTokenizer; "]
21068[label="typeName\n com.hankcs.hanlp.classification.tokenizers.BigramTokenizer "]
31069[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
41070[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51071[label="packageOrTypeName\n com.hankcs.hanlp "]
61072[label="packageOrTypeName\n com.hankcs "]
71073[label="packageOrTypeName\n com "]
11074[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.HanLPTokenizer; "]
21075[label="typeName\n com.hankcs.hanlp.classification.tokenizers.HanLPTokenizer "]
31076[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
41077[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51078[label="packageOrTypeName\n com.hankcs.hanlp "]
61079[label="packageOrTypeName\n com.hankcs "]
71080[label="packageOrTypeName\n com "]
11081[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.ITokenizer; "]
21082[label="typeName\n com.hankcs.hanlp.classification.tokenizers.ITokenizer "]
31083[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
41084[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51085[label="packageOrTypeName\n com.hankcs.hanlp "]
61086[label="packageOrTypeName\n com.hankcs "]
71087[label="packageOrTypeName\n com "]
11088[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.MathUtility; "]
21089[label="typeName\n com.hankcs.hanlp.classification.utilities.MathUtility "]
31090[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
41091[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51092[label="packageOrTypeName\n com.hankcs.hanlp "]
61093[label="packageOrTypeName\n com.hankcs "]
71094[label="packageOrTypeName\n com "]
11095[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.TextProcessUtility; "]
21096[label="typeName\n com.hankcs.hanlp.classification.utilities.TextProcessUtility "]
31097[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
41098[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51099[label="packageOrTypeName\n com.hankcs.hanlp "]
61100[label="packageOrTypeName\n com.hankcs "]
71101[label="packageOrTypeName\n com "]
11102[label="singleTypeImportDeclaration\n importjava.io.File; "]
21103[label="typeName\n java.io.File "]
31104[label="packageOrTypeName\n java.io "]
41105[label="packageOrTypeName\n java "]
11106[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
21107[label="typeName\n java.io.IOException "]
31108[label="packageOrTypeName\n java.io "]
41109[label="packageOrTypeName\n java "]
11110[label="singleTypeImportDeclaration\n importjava.util.Map; "]
21111[label="typeName\n java.util.Map "]
31112[label="packageOrTypeName\n java.util "]
41113[label="packageOrTypeName\n java "]
11114[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger; "]
21115[label="typeName\n com.hankcs.hanlp.classification.utilities.Predefine "]
31116[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
41117[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
51118[label="packageOrTypeName\n com.hankcs.hanlp "]
61119[label="packageOrTypeName\n com.hankcs "]
71120[label="packageOrTypeName\n com "]
11121[label="normalClassDeclaration\n publicabstractclassAbstractDataSetimplementsIDataSet{protectedITokenizertokenizer;protectedCatalogcatalog;protectedLexiconlexicon;protectedbooleantestingDataSet;publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;}publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();}publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;}publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);}publicITokenizergetTokenizer(){returntokenizer;}publicCataloggetCatalog(){returncatalog;}publicLexicongetLexicon(){returnlexicon;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);}@OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");}@OverridepublicbooleanisTestingDataSet(){returntestingDataSet;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;}@OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;}@OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;}} "]
21122[label="classModifier\n public "]
21123[label="classModifier\n abstract "]
21124[label="superinterfaces\n implementsIDataSet "]
31125[label="classType\n IDataSet "]
21126[label="classBody\n {protectedITokenizertokenizer;protectedCatalogcatalog;protectedLexiconlexicon;protectedbooleantestingDataSet;publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;}publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();}publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;}publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);}publicITokenizergetTokenizer(){returntokenizer;}publicCataloggetCatalog(){returncatalog;}publicLexicongetLexicon(){returnlexicon;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);}@OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");}@OverridepublicbooleanisTestingDataSet(){returntestingDataSet;}@OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;}@OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;}@OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;}} "]
31127[label="fieldDeclaration\n protectedITokenizertokenizer; "]
41128[label="fieldModifier\n protected "]
41129[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
41130[label="variableDeclaratorId\n tokenizer "]
31131[label="fieldDeclaration\n protectedCatalogcatalog; "]
41132[label="fieldModifier\n protected "]
41133[label="unannClassType_lfno_unannClassOrInterfaceType\n Catalog "]
41134[label="variableDeclaratorId\n catalog "]
31135[label="fieldDeclaration\n protectedLexiconlexicon; "]
41136[label="fieldModifier\n protected "]
41137[label="unannClassType_lfno_unannClassOrInterfaceType\n Lexicon "]
41138[label="variableDeclaratorId\n lexicon "]
31139[label="fieldDeclaration\n protectedbooleantestingDataSet; "]
41140[label="fieldModifier\n protected "]
41141[label="unannPrimitiveType\n boolean "]
41142[label="variableDeclaratorId\n testingDataSet "]
31143[label="constructorDeclaration\n publicAbstractDataSet(AbstractModelmodel){lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;} "]
41144[label="constructorModifier\n public "]
41145[label="constructorDeclarator\n AbstractDataSet(AbstractModelmodel) "]
51146[label="simpleTypeName\n AbstractDataSet "]
51147[label="formalParameter\n AbstractModelmodel "]
61148[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractModel "]
61149[label="variableDeclaratorId\n model "]
41150[label="constructorBody\n {lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true;} "]
51151[label="blockStatements\n lexicon=newLexicon(model.wordIdTrie);tokenizer=model.tokenizer;catalog=newCatalog(model.catalog);testingDataSet=true; "]
61152[label="expressionStatement\n lexicon=newLexicon(model.wordIdTrie); "]
71153[label="assignment\n lexicon=newLexicon(model.wordIdTrie) "]
81154[label="expressionName\n lexicon "]
81155[label="assignmentOperator\n = "]
81156[label="classInstanceCreationExpression_lfno_primary\n newLexicon(model.wordIdTrie) "]
91157[label="expressionName\n model.wordIdTrie "]
101158[label="ambiguousName\n model "]
61159[label="expressionStatement\n tokenizer=model.tokenizer; "]
71160[label="assignment\n tokenizer=model.tokenizer "]
81161[label="expressionName\n tokenizer "]
81162[label="assignmentOperator\n = "]
81163[label="expressionName\n model.tokenizer "]
91164[label="ambiguousName\n model "]
61165[label="expressionStatement\n catalog=newCatalog(model.catalog); "]
71166[label="assignment\n catalog=newCatalog(model.catalog) "]
81167[label="expressionName\n catalog "]
81168[label="assignmentOperator\n = "]
81169[label="classInstanceCreationExpression_lfno_primary\n newCatalog(model.catalog) "]
91170[label="expressionName\n model.catalog "]
101171[label="ambiguousName\n model "]
61172[label="expressionStatement\n testingDataSet=true; "]
71173[label="assignment\n testingDataSet=true "]
81174[label="expressionName\n testingDataSet "]
81175[label="assignmentOperator\n = "]
81176[label="literal\n true "]
31177[label="constructorDeclaration\n publicAbstractDataSet(){tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();} "]
41178[label="constructorModifier\n public "]
41179[label="constructorDeclarator\n AbstractDataSet() "]
51180[label="simpleTypeName\n AbstractDataSet "]
41181[label="constructorBody\n {tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon();} "]
51182[label="blockStatements\n tokenizer=newHanLPTokenizer();catalog=newCatalog();lexicon=newLexicon(); "]
61183[label="expressionStatement\n tokenizer=newHanLPTokenizer(); "]
71184[label="assignment\n tokenizer=newHanLPTokenizer() "]
81185[label="expressionName\n tokenizer "]
81186[label="assignmentOperator\n = "]
81187[label="classInstanceCreationExpression_lfno_primary\n newHanLPTokenizer() "]
61188[label="expressionStatement\n catalog=newCatalog(); "]
71189[label="assignment\n catalog=newCatalog() "]
81190[label="expressionName\n catalog "]
81191[label="assignmentOperator\n = "]
81192[label="classInstanceCreationExpression_lfno_primary\n newCatalog() "]
61193[label="expressionStatement\n lexicon=newLexicon(); "]
71194[label="assignment\n lexicon=newLexicon() "]
81195[label="expressionName\n lexicon "]
81196[label="assignmentOperator\n = "]
81197[label="classInstanceCreationExpression_lfno_primary\n newLexicon() "]
31198[label="methodDeclaration\n publicIDataSetsetTokenizer(ITokenizertokenizer){this.tokenizer=tokenizer;returnthis;} "]
41199[label="methodModifier\n public "]
41200[label="methodHeader\n IDataSetsetTokenizer(ITokenizertokenizer) "]
51201[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51202[label="methodDeclarator\n setTokenizer(ITokenizertokenizer) "]
61203[label="formalParameter\n ITokenizertokenizer "]
71204[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
71205[label="variableDeclaratorId\n tokenizer "]
41206[label="block\n {this.tokenizer=tokenizer;returnthis;} "]
51207[label="blockStatements\n this.tokenizer=tokenizer;returnthis; "]
61208[label="expressionStatement\n this.tokenizer=tokenizer; "]
71209[label="assignment\n this.tokenizer=tokenizer "]
81210[label="fieldAccess\n this.tokenizer "]
91211[label="primaryNoNewArray_lfno_primary\n this "]
81212[label="assignmentOperator\n = "]
81213[label="expressionName\n tokenizer "]
61214[label="returnStatement\n returnthis; "]
71215[label="primaryNoNewArray_lfno_primary\n this "]
31216[label="methodDeclaration\n publicDocumentconvert(Stringcategory,Stringtext){String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);} "]
41217[label="methodModifier\n public "]
41218[label="methodHeader\n Documentconvert(Stringcategory,Stringtext) "]
51219[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
51220[label="methodDeclarator\n convert(Stringcategory,Stringtext) "]
61221[label="formalParameterList\n Stringcategory,Stringtext "]
71222[label="formalParameter\n Stringcategory "]
81223[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81224[label="variableDeclaratorId\n category "]
71225[label="formalParameter\n Stringtext "]
81226[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81227[label="variableDeclaratorId\n text "]
41228[label="block\n {String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray);} "]
51229[label="blockStatements\n String[]tokenArray=tokenizer.segment(text);returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray); "]
61230[label="localVariableDeclarationStatement\n String[]tokenArray=tokenizer.segment(text); "]
71231[label="localVariableDeclaration\n String[]tokenArray=tokenizer.segment(text) "]
81232[label="unannArrayType\n String[] "]
91233[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91234[label="dims\n [] "]
81235[label="variableDeclarator\n tokenArray=tokenizer.segment(text) "]
91236[label="variableDeclaratorId\n tokenArray "]
91237[label="methodInvocation_lfno_primary\n tokenizer.segment(text) "]
101238[label="typeName\n tokenizer "]
101239[label="expressionName\n text "]
61240[label="returnStatement\n returntestingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray); "]
71241[label="conditionalExpression\n testingDataSet?newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray):newDocument(catalog,lexicon,category,tokenArray) "]
81242[label="expressionName\n testingDataSet "]
81243[label="classInstanceCreationExpression_lfno_primary\n newDocument(catalog.categoryId,lexicon.wordId,category,tokenArray) "]
91244[label="argumentList\n catalog.categoryId,lexicon.wordId,category,tokenArray "]
101245[label="expressionName\n catalog.categoryId "]
111246[label="ambiguousName\n catalog "]
101247[label="expressionName\n lexicon.wordId "]
111248[label="ambiguousName\n lexicon "]
101249[label="expressionName\n category "]
101250[label="expressionName\n tokenArray "]
81251[label="classInstanceCreationExpression_lfno_primary\n newDocument(catalog,lexicon,category,tokenArray) "]
91252[label="argumentList\n catalog,lexicon,category,tokenArray "]
101253[label="expressionName\n catalog "]
101254[label="expressionName\n lexicon "]
101255[label="expressionName\n category "]
101256[label="expressionName\n tokenArray "]
31257[label="methodDeclaration\n publicITokenizergetTokenizer(){returntokenizer;} "]
41258[label="methodModifier\n public "]
41259[label="methodHeader\n ITokenizergetTokenizer() "]
51260[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
51261[label="methodDeclarator\n getTokenizer() "]
41262[label="block\n {returntokenizer;} "]
51263[label="returnStatement\n returntokenizer; "]
61264[label="expressionName\n tokenizer "]
31265[label="methodDeclaration\n publicCataloggetCatalog(){returncatalog;} "]
41266[label="methodModifier\n public "]
41267[label="methodHeader\n CataloggetCatalog() "]
51268[label="unannClassType_lfno_unannClassOrInterfaceType\n Catalog "]
51269[label="methodDeclarator\n getCatalog() "]
41270[label="block\n {returncatalog;} "]
51271[label="returnStatement\n returncatalog; "]
61272[label="expressionName\n catalog "]
31273[label="methodDeclaration\n publicLexicongetLexicon(){returnlexicon;} "]
41274[label="methodModifier\n public "]
41275[label="methodHeader\n LexicongetLexicon() "]
51276[label="unannClassType_lfno_unannClassOrInterfaceType\n Lexicon "]
51277[label="methodDeclarator\n getLexicon() "]
41278[label="block\n {returnlexicon;} "]
51279[label="returnStatement\n returnlexicon; "]
61280[label="expressionName\n lexicon "]
31281[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException{returnload(folderPath,charsetName,1.);} "]
41282[label="markerAnnotation\n @Override "]
51283[label="typeName\n Override "]
41284[label="methodModifier\n public "]
41285[label="methodHeader\n IDataSetload(StringfolderPath,StringcharsetName)throwsIllegalArgumentException,IOException "]
51286[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51287[label="methodDeclarator\n load(StringfolderPath,StringcharsetName) "]
61288[label="formalParameterList\n StringfolderPath,StringcharsetName "]
71289[label="formalParameter\n StringfolderPath "]
81290[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81291[label="variableDeclaratorId\n folderPath "]
71292[label="formalParameter\n StringcharsetName "]
81293[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81294[label="variableDeclaratorId\n charsetName "]
51295[label="throws_\n throwsIllegalArgumentException,IOException "]
61296[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71297[label="classType\n IllegalArgumentException "]
71298[label="classType\n IOException "]
41299[label="block\n {returnload(folderPath,charsetName,1.);} "]
51300[label="returnStatement\n returnload(folderPath,charsetName,1.); "]
61301[label="methodInvocation_lfno_primary\n load(folderPath,charsetName,1.) "]
71302[label="methodName\n load "]
71303[label="argumentList\n folderPath,charsetName,1. "]
81304[label="expressionName\n folderPath "]
81305[label="expressionName\n charsetName "]
81306[label="literal\n 1. "]
31307[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException{returnload(folderPath,\"UTF-8\");} "]
41308[label="markerAnnotation\n @Override "]
51309[label="typeName\n Override "]
41310[label="methodModifier\n public "]
41311[label="methodHeader\n IDataSetload(StringfolderPath)throwsIllegalArgumentException,IOException "]
51312[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51313[label="methodDeclarator\n load(StringfolderPath) "]
61314[label="formalParameter\n StringfolderPath "]
71315[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
71316[label="variableDeclaratorId\n folderPath "]
51317[label="throws_\n throwsIllegalArgumentException,IOException "]
61318[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71319[label="classType\n IllegalArgumentException "]
71320[label="classType\n IOException "]
41321[label="block\n {returnload(folderPath,\"UTF-8\");} "]
51322[label="returnStatement\n returnload(folderPath,\"UTF-8\"); "]
61323[label="methodInvocation_lfno_primary\n load(folderPath,\"UTF-8\") "]
71324[label="methodName\n load "]
71325[label="argumentList\n folderPath,\"UTF-8\" "]
81326[label="expressionName\n folderPath "]
81327[label="literal\n \"UTF-8\" "]
31328[label="methodDeclaration\n @OverridepublicbooleanisTestingDataSet(){returntestingDataSet;} "]
41329[label="markerAnnotation\n @Override "]
51330[label="typeName\n Override "]
41331[label="methodModifier\n public "]
41332[label="methodHeader\n booleanisTestingDataSet() "]
51333[label="unannPrimitiveType\n boolean "]
51334[label="methodDeclarator\n isTestingDataSet() "]
41335[label="block\n {returntestingDataSet;} "]
51336[label="returnStatement\n returntestingDataSet; "]
61337[label="expressionName\n testingDataSet "]
31338[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException{if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;} "]
41339[label="markerAnnotation\n @Override "]
51340[label="typeName\n Override "]
41341[label="methodModifier\n public "]
41342[label="methodHeader\n IDataSetload(StringfolderPath,StringcharsetName,doublepercentage)throwsIllegalArgumentException,IOException "]
51343[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51344[label="methodDeclarator\n load(StringfolderPath,StringcharsetName,doublepercentage) "]
61345[label="formalParameterList\n StringfolderPath,StringcharsetName,doublepercentage "]
71346[label="formalParameters\n StringfolderPath,StringcharsetName "]
81347[label="formalParameter\n StringfolderPath "]
91348[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91349[label="variableDeclaratorId\n folderPath "]
81350[label="formalParameter\n StringcharsetName "]
91351[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91352[label="variableDeclaratorId\n charsetName "]
71353[label="formalParameter\n doublepercentage "]
81354[label="floatingPointType\n double "]
81355[label="variableDeclaratorId\n percentage "]
51356[label="throws_\n throwsIllegalArgumentException,IOException "]
61357[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71358[label="classType\n IllegalArgumentException "]
71359[label="classType\n IOException "]
41360[label="block\n {if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis;} "]
51361[label="blockStatements\n if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\");Fileroot=newFile(folderPath);if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath()));if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()));if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\");File[]folders=root.listFiles();if(folders==null)returnnull;logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath);for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);}logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size());returnthis; "]
61362[label="ifThenStatement\n if(folderPath==null)thrownewIllegalArgumentException(\"参数 folderPath == null\"); "]
71363[label="equalityExpression\n folderPath==null "]
81364[label="expressionName\n folderPath "]
81365[label="literal\n null "]
71366[label="throwStatement\n thrownewIllegalArgumentException(\"参数 folderPath == null\"); "]
81367[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"参数 folderPath == null\") "]
91368[label="literal\n \"参数 folderPath == null\" "]
61369[label="localVariableDeclarationStatement\n Fileroot=newFile(folderPath); "]
71370[label="localVariableDeclaration\n Fileroot=newFile(folderPath) "]
81371[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
81372[label="variableDeclarator\n root=newFile(folderPath) "]
91373[label="variableDeclaratorId\n root "]
91374[label="classInstanceCreationExpression_lfno_primary\n newFile(folderPath) "]
101375[label="expressionName\n folderPath "]
61376[label="ifThenStatement\n if(!root.exists())thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath())); "]
71377[label="unaryExpressionNotPlusMinus\n !root.exists() "]
81378[label="methodInvocation_lfno_primary\n root.exists() "]
91379[label="typeName\n root "]
71380[label="throwStatement\n thrownewIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath())); "]
81381[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(String.format(\"目录 %s 不存在\",root.getAbsolutePath())) "]
91382[label="methodInvocation_lfno_primary\n String.format(\"目录 %s 不存在\",root.getAbsolutePath()) "]
101383[label="typeName\n String "]
101384[label="argumentList\n \"目录 %s 不存在\",root.getAbsolutePath() "]
111385[label="literal\n \"目录 %s 不存在\" "]
111386[label="methodInvocation_lfno_primary\n root.getAbsolutePath() "]
121387[label="typeName\n root "]
61388[label="ifThenStatement\n if(!root.isDirectory())thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath())); "]
71389[label="unaryExpressionNotPlusMinus\n !root.isDirectory() "]
81390[label="methodInvocation_lfno_primary\n root.isDirectory() "]
91391[label="typeName\n root "]
71392[label="throwStatement\n thrownewIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath())); "]
81393[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath())) "]
91394[label="methodInvocation_lfno_primary\n String.format(\"目录 %s 不是一个目录\",root.getAbsolutePath()) "]
101395[label="typeName\n String "]
101396[label="argumentList\n \"目录 %s 不是一个目录\",root.getAbsolutePath() "]
111397[label="literal\n \"目录 %s 不是一个目录\" "]
111398[label="methodInvocation_lfno_primary\n root.getAbsolutePath() "]
121399[label="typeName\n root "]
61400[label="ifThenStatement\n if(percentage>1.0||percentage<-1.0)thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\"); "]
71401[label="conditionalOrExpression\n percentage>1.0||percentage<-1.0 "]
81402[label="relationalExpression\n percentage>1.0 "]
91403[label="expressionName\n percentage "]
91404[label="literal\n 1.0 "]
81405[label="relationalExpression\n percentage<-1.0 "]
91406[label="expressionName\n percentage "]
91407[label="unaryExpression\n -1.0 "]
101408[label="literal\n 1.0 "]
71409[label="throwStatement\n thrownewIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\"); "]
81410[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"percentage 的绝对值必须介于[0, 1]之间\") "]
91411[label="literal\n \"percentage 的绝对值必须介于[0, 1]之间\" "]
61412[label="localVariableDeclarationStatement\n File[]folders=root.listFiles(); "]
71413[label="localVariableDeclaration\n File[]folders=root.listFiles() "]
81414[label="unannArrayType\n File[] "]
91415[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
91416[label="dims\n [] "]
81417[label="variableDeclarator\n folders=root.listFiles() "]
91418[label="variableDeclaratorId\n folders "]
91419[label="methodInvocation_lfno_primary\n root.listFiles() "]
101420[label="typeName\n root "]
61421[label="ifThenStatement\n if(folders==null)returnnull; "]
71422[label="equalityExpression\n folders==null "]
81423[label="expressionName\n folders "]
81424[label="literal\n null "]
71425[label="returnStatement\n returnnull; "]
81426[label="literal\n null "]
61427[label="expressionStatement\n logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath); "]
71428[label="methodInvocation\n logger.start(\"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath) "]
81429[label="typeName\n logger "]
81430[label="argumentList\n \"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\",testingDataSet?\"测试集\":\"训练集\",charsetName,folderPath "]
91431[label="literal\n \"模式:%s\n文本编码:%s\n根目录:%s\n加载中...\n\" "]
91432[label="conditionalExpression\n testingDataSet?\"测试集\":\"训练集\" "]
101433[label="expressionName\n testingDataSet "]
101434[label="literal\n \"测试集\" "]
101435[label="literal\n \"训练集\" "]
91436[label="expressionName\n charsetName "]
91437[label="expressionName\n folderPath "]
61438[label="enhancedForStatement\n for(Filefolder:folders){if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);} "]
71439[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
71440[label="variableDeclaratorId\n folder "]
71441[label="expressionName\n folders "]
71442[label="block\n {if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b);} "]
81443[label="blockStatements\n if(folder.isFile())continue;File[]files=folder.listFiles();if(files==null)continue;Stringcategory=folder.getName();logger.out(\"[%s]...\",category);intb,e;if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;}intlogEvery=(int)Math.ceil((e-b)/10000f);for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}}logger.out(\" %d 篇文档\n\",e-b); "]
91444[label="ifThenStatement\n if(folder.isFile())continue; "]
101445[label="methodInvocation_lfno_primary\n folder.isFile() "]
111446[label="typeName\n folder "]
101447[label="continueStatement\n continue; "]
91448[label="localVariableDeclarationStatement\n File[]files=folder.listFiles(); "]
101449[label="localVariableDeclaration\n File[]files=folder.listFiles() "]
111450[label="unannArrayType\n File[] "]
121451[label="unannClassType_lfno_unannClassOrInterfaceType\n File "]
121452[label="dims\n [] "]
111453[label="variableDeclarator\n files=folder.listFiles() "]
121454[label="variableDeclaratorId\n files "]
121455[label="methodInvocation_lfno_primary\n folder.listFiles() "]
131456[label="typeName\n folder "]
91457[label="ifThenStatement\n if(files==null)continue; "]
101458[label="equalityExpression\n files==null "]
111459[label="expressionName\n files "]
111460[label="literal\n null "]
101461[label="continueStatement\n continue; "]
91462[label="localVariableDeclarationStatement\n Stringcategory=folder.getName(); "]
101463[label="localVariableDeclaration\n Stringcategory=folder.getName() "]
111464[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
111465[label="variableDeclarator\n category=folder.getName() "]
121466[label="variableDeclaratorId\n category "]
121467[label="methodInvocation_lfno_primary\n folder.getName() "]
131468[label="typeName\n folder "]
91469[label="expressionStatement\n logger.out(\"[%s]...\",category); "]
101470[label="methodInvocation\n logger.out(\"[%s]...\",category) "]
111471[label="typeName\n logger "]
111472[label="argumentList\n \"[%s]...\",category "]
121473[label="literal\n \"[%s]...\" "]
121474[label="expressionName\n category "]
91475[label="localVariableDeclarationStatement\n intb,e; "]
101476[label="localVariableDeclaration\n intb,e "]
111477[label="integralType\n int "]
111478[label="variableDeclaratorList\n b,e "]
121479[label="variableDeclaratorId\n b "]
121480[label="variableDeclaratorId\n e "]
91481[label="ifThenElseStatement\n if(percentage>0){b=0;e=(int)(files.length*percentage);}else{b=(int)(files.length*(1+percentage));e=files.length;} "]
101482[label="relationalExpression\n percentage>0 "]
111483[label="expressionName\n percentage "]
111484[label="literal\n 0 "]
101485[label="block\n {b=0;e=(int)(files.length*percentage);} "]
111486[label="blockStatements\n b=0;e=(int)(files.length*percentage); "]
121487[label="expressionStatement\n b=0; "]
131488[label="assignment\n b=0 "]
141489[label="expressionName\n b "]
141490[label="assignmentOperator\n = "]
141491[label="literal\n 0 "]
121492[label="expressionStatement\n e=(int)(files.length*percentage); "]
131493[label="assignment\n e=(int)(files.length*percentage) "]
141494[label="expressionName\n e "]
141495[label="assignmentOperator\n = "]
141496[label="castExpression\n (int)(files.length*percentage) "]
151497[label="integralType\n int "]
151498[label="primaryNoNewArray_lfno_primary\n (files.length*percentage) "]
161499[label="multiplicativeExpression\n files.length*percentage "]
171500[label="expressionName\n files.length "]
181501[label="ambiguousName\n files "]
171502[label="expressionName\n percentage "]
101503[label="block\n {b=(int)(files.length*(1+percentage));e=files.length;} "]
111504[label="blockStatements\n b=(int)(files.length*(1+percentage));e=files.length; "]
121505[label="expressionStatement\n b=(int)(files.length*(1+percentage)); "]
131506[label="assignment\n b=(int)(files.length*(1+percentage)) "]
141507[label="expressionName\n b "]
141508[label="assignmentOperator\n = "]
141509[label="castExpression\n (int)(files.length*(1+percentage)) "]
151510[label="integralType\n int "]
151511[label="primaryNoNewArray_lfno_primary\n (files.length*(1+percentage)) "]
161512[label="multiplicativeExpression\n files.length*(1+percentage) "]
171513[label="expressionName\n files.length "]
181514[label="ambiguousName\n files "]
171515[label="primaryNoNewArray_lfno_primary\n (1+percentage) "]
181516[label="additiveExpression\n 1+percentage "]
191517[label="literal\n 1 "]
191518[label="expressionName\n percentage "]
121519[label="expressionStatement\n e=files.length; "]
131520[label="assignment\n e=files.length "]
141521[label="expressionName\n e "]
141522[label="assignmentOperator\n = "]
141523[label="expressionName\n files.length "]
151524[label="ambiguousName\n files "]
91525[label="localVariableDeclarationStatement\n intlogEvery=(int)Math.ceil((e-b)/10000f); "]
101526[label="localVariableDeclaration\n intlogEvery=(int)Math.ceil((e-b)/10000f) "]
111527[label="integralType\n int "]
111528[label="variableDeclarator\n logEvery=(int)Math.ceil((e-b)/10000f) "]
121529[label="variableDeclaratorId\n logEvery "]
121530[label="castExpression\n (int)Math.ceil((e-b)/10000f) "]
131531[label="integralType\n int "]
131532[label="methodInvocation_lfno_primary\n Math.ceil((e-b)/10000f) "]
141533[label="typeName\n Math "]
141534[label="multiplicativeExpression\n (e-b)/10000f "]
151535[label="primaryNoNewArray_lfno_primary\n (e-b) "]
161536[label="additiveExpression\n e-b "]
171537[label="expressionName\n e "]
171538[label="expressionName\n b "]
151539[label="literal\n 10000f "]
91540[label="basicForStatement\n for(inti=b;i<e;i++){add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}} "]
101541[label="localVariableDeclaration\n inti=b "]
111542[label="integralType\n int "]
111543[label="variableDeclarator\n i=b "]
121544[label="variableDeclaratorId\n i "]
121545[label="expressionName\n b "]
101546[label="relationalExpression\n i<e "]
111547[label="expressionName\n i "]
111548[label="expressionName\n e "]
101549[label="postIncrementExpression\n i++ "]
111550[label="expressionName\n i "]
101551[label="block\n {add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));}} "]
111552[label="blockStatements\n add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName));if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));} "]
121553[label="expressionStatement\n add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName)); "]
131554[label="methodInvocation\n add(folder.getName(),TextProcessUtility.readTxt(files[i],charsetName)) "]
141555[label="methodName\n add "]
141556[label="argumentList\n folder.getName(),TextProcessUtility.readTxt(files[i],charsetName) "]
151557[label="methodInvocation_lfno_primary\n folder.getName() "]
161558[label="typeName\n folder "]
151559[label="methodInvocation_lfno_primary\n TextProcessUtility.readTxt(files[i],charsetName) "]
161560[label="typeName\n TextProcessUtility "]
161561[label="argumentList\n files[i],charsetName "]
171562[label="arrayAccess_lfno_primary\n files[i] "]
181563[label="expressionName\n files "]
181564[label="expressionName\n i "]
171565[label="expressionName\n charsetName "]
121566[label="ifThenStatement\n if(i%logEvery==0){logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));} "]
131567[label="equalityExpression\n i%logEvery==0 "]
141568[label="multiplicativeExpression\n i%logEvery "]
151569[label="expressionName\n i "]
151570[label="expressionName\n logEvery "]
141571[label="literal\n 0 "]
131572[label="block\n {logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b));} "]
141573[label="expressionStatement\n logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b)); "]
151574[label="methodInvocation\n logger.out(\"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b)) "]
161575[label="typeName\n logger "]
161576[label="argumentList\n \"%c[%s]...%.2f%%\",13,category,MathUtility.percentage(i-b+1,e-b) "]
171577[label="literal\n \"%c[%s]...%.2f%%\" "]
171578[label="literal\n 13 "]
171579[label="expressionName\n category "]
171580[label="methodInvocation_lfno_primary\n MathUtility.percentage(i-b+1,e-b) "]
181581[label="typeName\n MathUtility "]
181582[label="argumentList\n i-b+1,e-b "]
191583[label="additiveExpression\n i-b+1 "]
201584[label="additiveExpression\n i-b "]
211585[label="expressionName\n i "]
211586[label="expressionName\n b "]
201587[label="literal\n 1 "]
191588[label="additiveExpression\n e-b "]
201589[label="expressionName\n e "]
201590[label="expressionName\n b "]
91591[label="expressionStatement\n logger.out(\" %d 篇文档\n\",e-b); "]
101592[label="methodInvocation\n logger.out(\" %d 篇文档\n\",e-b) "]
111593[label="typeName\n logger "]
111594[label="argumentList\n \" %d 篇文档\n\",e-b "]
121595[label="literal\n \" %d 篇文档\n\" "]
121596[label="additiveExpression\n e-b "]
131597[label="expressionName\n e "]
131598[label="expressionName\n b "]
61599[label="expressionStatement\n logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size()); "]
71600[label="methodInvocation\n logger.finish(\" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size()) "]
81601[label="typeName\n logger "]
81602[label="argumentList\n \" 加载了 %d 个类目,共 %d 篇文档\n\",getCatalog().size(),size() "]
91603[label="literal\n \" 加载了 %d 个类目,共 %d 篇文档\n\" "]
91604[label="primary\n getCatalog().size() "]
101605[label="methodInvocation_lfno_primary\n getCatalog() "]
111606[label="methodName\n getCatalog "]
101607[label="methodInvocation_lf_primary\n .size() "]
91608[label="methodInvocation_lfno_primary\n size() "]
101609[label="methodName\n size "]
61610[label="returnStatement\n returnthis; "]
71611[label="primaryNoNewArray_lfno_primary\n this "]
31612[label="methodDeclaration\n @OverridepublicIDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException{returnnull;} "]
41613[label="markerAnnotation\n @Override "]
51614[label="typeName\n Override "]
41615[label="methodModifier\n public "]
41616[label="methodHeader\n IDataSetload(StringfolderPath,doublerate)throwsIllegalArgumentException,IOException "]
51617[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51618[label="methodDeclarator\n load(StringfolderPath,doublerate) "]
61619[label="formalParameterList\n StringfolderPath,doublerate "]
71620[label="formalParameter\n StringfolderPath "]
81621[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
81622[label="variableDeclaratorId\n folderPath "]
71623[label="formalParameter\n doublerate "]
81624[label="floatingPointType\n double "]
81625[label="variableDeclaratorId\n rate "]
51626[label="throws_\n throwsIllegalArgumentException,IOException "]
61627[label="exceptionTypeList\n IllegalArgumentException,IOException "]
71628[label="classType\n IllegalArgumentException "]
71629[label="classType\n IOException "]
41630[label="block\n {returnnull;} "]
51631[label="returnStatement\n returnnull; "]
61632[label="literal\n null "]
31633[label="methodDeclaration\n @OverridepublicIDataSetadd(Map<String,String[]>testingDataSet){for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;} "]
41634[label="markerAnnotation\n @Override "]
51635[label="typeName\n Override "]
41636[label="methodModifier\n public "]
41637[label="methodHeader\n IDataSetadd(Map<String,String[]>testingDataSet) "]
51638[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
51639[label="methodDeclarator\n add(Map<String,String[]>testingDataSet) "]
61640[label="formalParameter\n Map<String,String[]>testingDataSet "]
71641[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String[]> "]
81642[label="typeArguments\n <String,String[]> "]
91643[label="typeArgumentList\n String,String[] "]
101644[label="classType_lfno_classOrInterfaceType\n String "]
101645[label="arrayType\n String[] "]
111646[label="classType_lfno_classOrInterfaceType\n String "]
111647[label="dims\n [] "]
71648[label="variableDeclaratorId\n testingDataSet "]
41649[label="block\n {for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis;} "]
51650[label="blockStatements\n for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}}returnthis; "]
61651[label="enhancedForStatement\n for(Map.Entry<String,String[]>entry:testingDataSet.entrySet()){for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}} "]
71652[label="unannClassOrInterfaceType\n Map.Entry<String,String[]> "]
81653[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
81654[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String[]> "]
91655[label="typeArguments\n <String,String[]> "]
101656[label="typeArgumentList\n String,String[] "]
111657[label="classType_lfno_classOrInterfaceType\n String "]
111658[label="arrayType\n String[] "]
121659[label="classType_lfno_classOrInterfaceType\n String "]
121660[label="dims\n [] "]
71661[label="variableDeclaratorId\n entry "]
71662[label="methodInvocation_lfno_primary\n testingDataSet.entrySet() "]
81663[label="typeName\n testingDataSet "]
71664[label="block\n {for(Stringdocument:entry.getValue()){add(entry.getKey(),document);}} "]
81665[label="enhancedForStatement\n for(Stringdocument:entry.getValue()){add(entry.getKey(),document);} "]
91666[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
91667[label="variableDeclaratorId\n document "]
91668[label="methodInvocation_lfno_primary\n entry.getValue() "]
101669[label="typeName\n entry "]
91670[label="block\n {add(entry.getKey(),document);} "]
101671[label="expressionStatement\n add(entry.getKey(),document); "]
111672[label="methodInvocation\n add(entry.getKey(),document) "]
121673[label="methodName\n add "]
121674[label="argumentList\n entry.getKey(),document "]
131675[label="methodInvocation_lfno_primary\n entry.getKey() "]
141676[label="typeName\n entry "]
131677[label="expressionName\n document "]
61678[label="returnStatement\n returnthis; "]
71679[label="primaryNoNewArray_lfno_primary\n this "]
01680[label="compilationUnit\n packagecom.hankcs.hanlp.dependency;importcom.hankcs.hanlp.HanLP;importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLSentence;importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLWord;importcom.hankcs.hanlp.corpus.io.IOUtil;importcom.hankcs.hanlp.seg.Segment;importcom.hankcs.hanlp.tokenizer.NLPTokenizer;importcom.hankcs.hanlp.utility.GlobalObjectPool;importjava.util.Map;importjava.util.TreeMap;publicabstractclassAbstractDependencyParserimplementsIDependencyParser{privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true);privateMap<String,String>deprelTranslater;privatebooleanenableDeprelTranslater;@OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;}@OverridepublicSegmentgetSegment(){returnsegment;}@OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;}@OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;}@OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;}publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;}@OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;}}<EOF> "]
11681[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency; "]
21682[label="packageName\n com.hankcs.hanlp.dependency "]
31683[label="packageName\n com.hankcs.hanlp "]
41684[label="packageName\n com.hankcs "]
51685[label="packageName\n com "]
11686[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.HanLP; "]
21687[label="typeName\n com.hankcs.hanlp.HanLP "]
31688[label="packageOrTypeName\n com.hankcs.hanlp "]
41689[label="packageOrTypeName\n com.hankcs "]
51690[label="packageOrTypeName\n com "]
11691[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLSentence; "]
21692[label="typeName\n com.hankcs.hanlp.corpus.dependency.CoNll.CoNLLSentence "]
31693[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency.CoNll "]
41694[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency "]
51695[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
61696[label="packageOrTypeName\n com.hankcs.hanlp "]
71697[label="packageOrTypeName\n com.hankcs "]
81698[label="packageOrTypeName\n com "]
11699[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.dependency.CoNll.CoNLLWord; "]
21700[label="typeName\n com.hankcs.hanlp.corpus.dependency.CoNll.CoNLLWord "]
31701[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency.CoNll "]
41702[label="packageOrTypeName\n com.hankcs.hanlp.corpus.dependency "]
51703[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
61704[label="packageOrTypeName\n com.hankcs.hanlp "]
71705[label="packageOrTypeName\n com.hankcs "]
81706[label="packageOrTypeName\n com "]
11707[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.corpus.io.IOUtil; "]
21708[label="typeName\n com.hankcs.hanlp.corpus.io.IOUtil "]
31709[label="packageOrTypeName\n com.hankcs.hanlp.corpus.io "]
41710[label="packageOrTypeName\n com.hankcs.hanlp.corpus "]
51711[label="packageOrTypeName\n com.hankcs.hanlp "]
61712[label="packageOrTypeName\n com.hankcs "]
71713[label="packageOrTypeName\n com "]
11714[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.seg.Segment; "]
21715[label="typeName\n com.hankcs.hanlp.seg.Segment "]
31716[label="packageOrTypeName\n com.hankcs.hanlp.seg "]
41717[label="packageOrTypeName\n com.hankcs.hanlp "]
51718[label="packageOrTypeName\n com.hankcs "]
61719[label="packageOrTypeName\n com "]
11720[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.tokenizer.NLPTokenizer; "]
21721[label="typeName\n com.hankcs.hanlp.tokenizer.NLPTokenizer "]
31722[label="packageOrTypeName\n com.hankcs.hanlp.tokenizer "]
41723[label="packageOrTypeName\n com.hankcs.hanlp "]
51724[label="packageOrTypeName\n com.hankcs "]
61725[label="packageOrTypeName\n com "]
11726[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.utility.GlobalObjectPool; "]
21727[label="typeName\n com.hankcs.hanlp.utility.GlobalObjectPool "]
31728[label="packageOrTypeName\n com.hankcs.hanlp.utility "]
41729[label="packageOrTypeName\n com.hankcs.hanlp "]
51730[label="packageOrTypeName\n com.hankcs "]
61731[label="packageOrTypeName\n com "]
11732[label="singleTypeImportDeclaration\n importjava.util.Map; "]
21733[label="typeName\n java.util.Map "]
31734[label="packageOrTypeName\n java.util "]
41735[label="packageOrTypeName\n java "]
11736[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
21737[label="typeName\n java.util.TreeMap "]
31738[label="packageOrTypeName\n java.util "]
41739[label="packageOrTypeName\n java "]
11740[label="normalClassDeclaration\n publicabstractclassAbstractDependencyParserimplementsIDependencyParser{privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true);privateMap<String,String>deprelTranslater;privatebooleanenableDeprelTranslater;@OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;}@OverridepublicSegmentgetSegment(){returnsegment;}@OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;}@OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;}@OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;}publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;}@OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;}} "]
21741[label="classModifier\n public "]
21742[label="classModifier\n abstract "]
21743[label="superinterfaces\n implementsIDependencyParser "]
31744[label="classType\n IDependencyParser "]
21745[label="classBody\n {privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true);privateMap<String,String>deprelTranslater;privatebooleanenableDeprelTranslater;@OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;}@OverridepublicSegmentgetSegment(){returnsegment;}@OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;}@OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;}@OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;}publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;}@OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;}} "]
31746[label="fieldDeclaration\n privateSegmentsegment=HanLP.newSegment().enablePartOfSpeechTagging(true); "]
41747[label="fieldModifier\n private "]
41748[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
41749[label="variableDeclarator\n segment=HanLP.newSegment().enablePartOfSpeechTagging(true) "]
51750[label="variableDeclaratorId\n segment "]
51751[label="primary\n HanLP.newSegment().enablePartOfSpeechTagging(true) "]
61752[label="methodInvocation_lfno_primary\n HanLP.newSegment() "]
71753[label="typeName\n HanLP "]
61754[label="methodInvocation_lf_primary\n .enablePartOfSpeechTagging(true) "]
71755[label="literal\n true "]
31756[label="fieldDeclaration\n privateMap<String,String>deprelTranslater; "]
41757[label="fieldModifier\n private "]
41758[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
51759[label="typeArguments\n <String,String> "]
61760[label="typeArgumentList\n String,String "]
71761[label="classType_lfno_classOrInterfaceType\n String "]
71762[label="classType_lfno_classOrInterfaceType\n String "]
41763[label="variableDeclaratorId\n deprelTranslater "]
31764[label="fieldDeclaration\n privatebooleanenableDeprelTranslater; "]
41765[label="fieldModifier\n private "]
41766[label="unannPrimitiveType\n boolean "]
41767[label="variableDeclaratorId\n enableDeprelTranslater "]
31768[label="methodDeclaration\n @OverridepublicCoNLLSentenceparse(Stringsentence){assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;} "]
41769[label="markerAnnotation\n @Override "]
51770[label="typeName\n Override "]
41771[label="methodModifier\n public "]
41772[label="methodHeader\n CoNLLSentenceparse(Stringsentence) "]
51773[label="unannClassType_lfno_unannClassOrInterfaceType\n CoNLLSentence "]
51774[label="methodDeclarator\n parse(Stringsentence) "]
61775[label="formalParameter\n Stringsentence "]
71776[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
71777[label="variableDeclaratorId\n sentence "]
41778[label="block\n {assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput;} "]
51779[label="blockStatements\n assertsentence!=null;CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray()));if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}}returnoutput; "]
61780[label="assertStatement\n assertsentence!=null; "]
71781[label="equalityExpression\n sentence!=null "]
81782[label="expressionName\n sentence "]
81783[label="literal\n null "]
61784[label="localVariableDeclarationStatement\n CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray())); "]
71785[label="localVariableDeclaration\n CoNLLSentenceoutput=parse(segment.seg(sentence.toCharArray())) "]
81786[label="unannClassType_lfno_unannClassOrInterfaceType\n CoNLLSentence "]
81787[label="variableDeclarator\n output=parse(segment.seg(sentence.toCharArray())) "]
91788[label="variableDeclaratorId\n output "]
91789[label="methodInvocation_lfno_primary\n parse(segment.seg(sentence.toCharArray())) "]
101790[label="methodName\n parse "]
101791[label="methodInvocation_lfno_primary\n segment.seg(sentence.toCharArray()) "]
111792[label="typeName\n segment "]
111793[label="methodInvocation_lfno_primary\n sentence.toCharArray() "]
121794[label="typeName\n sentence "]
61795[label="ifThenStatement\n if(enableDeprelTranslater&&deprelTranslater!=null){for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}} "]
71796[label="conditionalAndExpression\n enableDeprelTranslater&&deprelTranslater!=null "]
81797[label="expressionName\n enableDeprelTranslater "]
81798[label="equalityExpression\n deprelTranslater!=null "]
91799[label="expressionName\n deprelTranslater "]
91800[label="literal\n null "]
71801[label="block\n {for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;}} "]
81802[label="enhancedForStatement\n for(CoNLLWordword:output){StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;} "]
91803[label="unannClassType_lfno_unannClassOrInterfaceType\n CoNLLWord "]
91804[label="variableDeclaratorId\n word "]
91805[label="expressionName\n output "]
91806[label="block\n {StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel;} "]
101807[label="blockStatements\n StringtranslatedDeprel=deprelTranslater.get(word.DEPREL);word.DEPREL=translatedDeprel; "]
111808[label="localVariableDeclarationStatement\n StringtranslatedDeprel=deprelTranslater.get(word.DEPREL); "]
121809[label="localVariableDeclaration\n StringtranslatedDeprel=deprelTranslater.get(word.DEPREL) "]
131810[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
131811[label="variableDeclarator\n translatedDeprel=deprelTranslater.get(word.DEPREL) "]
141812[label="variableDeclaratorId\n translatedDeprel "]
141813[label="methodInvocation_lfno_primary\n deprelTranslater.get(word.DEPREL) "]
151814[label="typeName\n deprelTranslater "]
151815[label="expressionName\n word.DEPREL "]
161816[label="ambiguousName\n word "]
111817[label="expressionStatement\n word.DEPREL=translatedDeprel; "]
121818[label="assignment\n word.DEPREL=translatedDeprel "]
131819[label="expressionName\n word.DEPREL "]
141820[label="ambiguousName\n word "]
131821[label="assignmentOperator\n = "]
131822[label="expressionName\n translatedDeprel "]
61823[label="returnStatement\n returnoutput; "]
71824[label="expressionName\n output "]
31825[label="methodDeclaration\n @OverridepublicSegmentgetSegment(){returnsegment;} "]
41826[label="markerAnnotation\n @Override "]
51827[label="typeName\n Override "]
41828[label="methodModifier\n public "]
41829[label="methodHeader\n SegmentgetSegment() "]
51830[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
51831[label="methodDeclarator\n getSegment() "]
41832[label="block\n {returnsegment;} "]
51833[label="returnStatement\n returnsegment; "]
61834[label="expressionName\n segment "]
31835[label="methodDeclaration\n @OverridepublicIDependencyParsersetSegment(Segmentsegment){this.segment=segment;returnthis;} "]
41836[label="markerAnnotation\n @Override "]
51837[label="typeName\n Override "]
41838[label="methodModifier\n public "]
41839[label="methodHeader\n IDependencyParsersetSegment(Segmentsegment) "]
51840[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51841[label="methodDeclarator\n setSegment(Segmentsegment) "]
61842[label="formalParameter\n Segmentsegment "]
71843[label="unannClassType_lfno_unannClassOrInterfaceType\n Segment "]
71844[label="variableDeclaratorId\n segment "]
41845[label="block\n {this.segment=segment;returnthis;} "]
51846[label="blockStatements\n this.segment=segment;returnthis; "]
61847[label="expressionStatement\n this.segment=segment; "]
71848[label="assignment\n this.segment=segment "]
81849[label="fieldAccess\n this.segment "]
91850[label="primaryNoNewArray_lfno_primary\n this "]
81851[label="assignmentOperator\n = "]
81852[label="expressionName\n segment "]
61853[label="returnStatement\n returnthis; "]
71854[label="primaryNoNewArray_lfno_primary\n this "]
31855[label="methodDeclaration\n @OverridepublicMap<String,String>getDeprelTranslator(){returndeprelTranslater;} "]
41856[label="markerAnnotation\n @Override "]
51857[label="typeName\n Override "]
41858[label="methodModifier\n public "]
41859[label="methodHeader\n Map<String,String>getDeprelTranslator() "]
51860[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
61861[label="typeArguments\n <String,String> "]
71862[label="typeArgumentList\n String,String "]
81863[label="classType_lfno_classOrInterfaceType\n String "]
81864[label="classType_lfno_classOrInterfaceType\n String "]
51865[label="methodDeclarator\n getDeprelTranslator() "]
41866[label="block\n {returndeprelTranslater;} "]
51867[label="returnStatement\n returndeprelTranslater; "]
61868[label="expressionName\n deprelTranslater "]
31869[label="methodDeclaration\n @OverridepublicIDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator){this.deprelTranslater=deprelTranslator;returnthis;} "]
41870[label="markerAnnotation\n @Override "]
51871[label="typeName\n Override "]
41872[label="methodModifier\n public "]
41873[label="methodHeader\n IDependencyParsersetDeprelTranslator(Map<String,String>deprelTranslator) "]
51874[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51875[label="methodDeclarator\n setDeprelTranslator(Map<String,String>deprelTranslator) "]
61876[label="formalParameter\n Map<String,String>deprelTranslator "]
71877[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String> "]
81878[label="typeArguments\n <String,String> "]
91879[label="typeArgumentList\n String,String "]
101880[label="classType_lfno_classOrInterfaceType\n String "]
101881[label="classType_lfno_classOrInterfaceType\n String "]
71882[label="variableDeclaratorId\n deprelTranslator "]
41883[label="block\n {this.deprelTranslater=deprelTranslator;returnthis;} "]
51884[label="blockStatements\n this.deprelTranslater=deprelTranslator;returnthis; "]
61885[label="expressionStatement\n this.deprelTranslater=deprelTranslator; "]
71886[label="assignment\n this.deprelTranslater=deprelTranslator "]
81887[label="fieldAccess\n this.deprelTranslater "]
91888[label="primaryNoNewArray_lfno_primary\n this "]
81889[label="assignmentOperator\n = "]
81890[label="expressionName\n deprelTranslator "]
61891[label="returnStatement\n returnthis; "]
71892[label="primaryNoNewArray_lfno_primary\n this "]
31893[label="methodDeclaration\n publicIDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath){deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;} "]
41894[label="methodModifier\n public "]
41895[label="methodHeader\n IDependencyParsersetDeprelTranslater(StringdeprelTranslatorPath) "]
51896[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51897[label="methodDeclarator\n setDeprelTranslater(StringdeprelTranslatorPath) "]
61898[label="formalParameter\n StringdeprelTranslatorPath "]
71899[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
71900[label="variableDeclaratorId\n deprelTranslatorPath "]
41901[label="block\n {deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis;} "]
51902[label="blockStatements\n deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath);if(deprelTranslater!=null)returnthis;IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath);deprelTranslater=newTreeMap<String,String>();while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);}if(deprelTranslater.size()==0){deprelTranslater=null;}GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater);returnthis; "]
61903[label="expressionStatement\n deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath); "]
71904[label="assignment\n deprelTranslater=GlobalObjectPool.get(deprelTranslatorPath) "]
81905[label="expressionName\n deprelTranslater "]
81906[label="assignmentOperator\n = "]
81907[label="methodInvocation_lfno_primary\n GlobalObjectPool.get(deprelTranslatorPath) "]
91908[label="typeName\n GlobalObjectPool "]
91909[label="expressionName\n deprelTranslatorPath "]
61910[label="ifThenStatement\n if(deprelTranslater!=null)returnthis; "]
71911[label="equalityExpression\n deprelTranslater!=null "]
81912[label="expressionName\n deprelTranslater "]
81913[label="literal\n null "]
71914[label="returnStatement\n returnthis; "]
81915[label="primaryNoNewArray_lfno_primary\n this "]
61916[label="localVariableDeclarationStatement\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath); "]
71917[label="localVariableDeclaration\n IOUtil.LineIteratoriterator=newIOUtil.LineIterator(deprelTranslatorPath) "]
81918[label="unannClassOrInterfaceType\n IOUtil.LineIterator "]
91919[label="unannClassType_lfno_unannClassOrInterfaceType\n IOUtil "]
91920[label="unannClassType_lf_unannClassOrInterfaceType\n .LineIterator "]
81921[label="variableDeclarator\n iterator=newIOUtil.LineIterator(deprelTranslatorPath) "]
91922[label="variableDeclaratorId\n iterator "]
91923[label="classInstanceCreationExpression_lfno_primary\n newIOUtil.LineIterator(deprelTranslatorPath) "]
101924[label="expressionName\n deprelTranslatorPath "]
61925[label="expressionStatement\n deprelTranslater=newTreeMap<String,String>(); "]
71926[label="assignment\n deprelTranslater=newTreeMap<String,String>() "]
81927[label="expressionName\n deprelTranslater "]
81928[label="assignmentOperator\n = "]
81929[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,String>() "]
91930[label="typeArguments\n <String,String> "]
101931[label="typeArgumentList\n String,String "]
111932[label="classType_lfno_classOrInterfaceType\n String "]
111933[label="classType_lfno_classOrInterfaceType\n String "]
61934[label="whileStatement\n while(iterator.hasNext()){String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);} "]
71935[label="methodInvocation_lfno_primary\n iterator.hasNext() "]
81936[label="typeName\n iterator "]
71937[label="block\n {String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]);} "]
81938[label="blockStatements\n String[]args=iterator.next().split(\"\\s\");deprelTranslater.put(args[0],args[1]); "]
91939[label="localVariableDeclarationStatement\n String[]args=iterator.next().split(\"\\s\"); "]
101940[label="localVariableDeclaration\n String[]args=iterator.next().split(\"\\s\") "]
111941[label="unannArrayType\n String[] "]
121942[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
121943[label="dims\n [] "]
111944[label="variableDeclarator\n args=iterator.next().split(\"\\s\") "]
121945[label="variableDeclaratorId\n args "]
121946[label="primary\n iterator.next().split(\"\\s\") "]
131947[label="methodInvocation_lfno_primary\n iterator.next() "]
141948[label="typeName\n iterator "]
131949[label="methodInvocation_lf_primary\n .split(\"\\s\") "]
141950[label="literal\n \"\\s\" "]
91951[label="expressionStatement\n deprelTranslater.put(args[0],args[1]); "]
101952[label="methodInvocation\n deprelTranslater.put(args[0],args[1]) "]
111953[label="typeName\n deprelTranslater "]
111954[label="argumentList\n args[0],args[1] "]
121955[label="arrayAccess_lfno_primary\n args[0] "]
131956[label="expressionName\n args "]
131957[label="literal\n 0 "]
121958[label="arrayAccess_lfno_primary\n args[1] "]
131959[label="expressionName\n args "]
131960[label="literal\n 1 "]
61961[label="ifThenStatement\n if(deprelTranslater.size()==0){deprelTranslater=null;} "]
71962[label="equalityExpression\n deprelTranslater.size()==0 "]
81963[label="methodInvocation_lfno_primary\n deprelTranslater.size() "]
91964[label="typeName\n deprelTranslater "]
81965[label="literal\n 0 "]
71966[label="block\n {deprelTranslater=null;} "]
81967[label="expressionStatement\n deprelTranslater=null; "]
91968[label="assignment\n deprelTranslater=null "]
101969[label="expressionName\n deprelTranslater "]
101970[label="assignmentOperator\n = "]
101971[label="literal\n null "]
61972[label="expressionStatement\n GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater); "]
71973[label="methodInvocation\n GlobalObjectPool.put(deprelTranslatorPath,deprelTranslater) "]
81974[label="typeName\n GlobalObjectPool "]
81975[label="argumentList\n deprelTranslatorPath,deprelTranslater "]
91976[label="expressionName\n deprelTranslatorPath "]
91977[label="expressionName\n deprelTranslater "]
61978[label="returnStatement\n returnthis; "]
71979[label="primaryNoNewArray_lfno_primary\n this "]
31980[label="methodDeclaration\n @OverridepublicIDependencyParserenableDeprelTranslator(booleanenable){enableDeprelTranslater=enable;returnthis;} "]
41981[label="markerAnnotation\n @Override "]
51982[label="typeName\n Override "]
41983[label="methodModifier\n public "]
41984[label="methodHeader\n IDependencyParserenableDeprelTranslator(booleanenable) "]
51985[label="unannClassType_lfno_unannClassOrInterfaceType\n IDependencyParser "]
51986[label="methodDeclarator\n enableDeprelTranslator(booleanenable) "]
61987[label="formalParameter\n booleanenable "]
71988[label="unannPrimitiveType\n boolean "]
71989[label="variableDeclaratorId\n enable "]
41990[label="block\n {enableDeprelTranslater=enable;returnthis;} "]
51991[label="blockStatements\n enableDeprelTranslater=enable;returnthis; "]
61992[label="expressionStatement\n enableDeprelTranslater=enable; "]
71993[label="assignment\n enableDeprelTranslater=enable "]
81994[label="expressionName\n enableDeprelTranslater "]
81995[label="assignmentOperator\n = "]
81996[label="expressionName\n enable "]
61997[label="returnStatement\n returnthis; "]
71998[label="primaryNoNewArray_lfno_primary\n this "]
01999[label="compilationUnit\n packagecom.hankcs.hanlp.dependency.nnparser.action;publicclassAbstractInexactActionimplementsComparable<AbstractInexactAction>{intseed;publicAbstractInexactAction(){}AbstractInexactAction(intname,intrel){seed=rel<<6|name;}publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);}@Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;}publicintname(){return(seed&0x3f);}publicintrel(){return(seed>>6);}}<EOF> "]
12000[label="packageDeclaration\n packagecom.hankcs.hanlp.dependency.nnparser.action; "]
22001[label="packageName\n com.hankcs.hanlp.dependency.nnparser.action "]
32002[label="packageName\n com.hankcs.hanlp.dependency.nnparser "]
42003[label="packageName\n com.hankcs.hanlp.dependency "]
52004[label="packageName\n com.hankcs.hanlp "]
62005[label="packageName\n com.hankcs "]
72006[label="packageName\n com "]
12007[label="normalClassDeclaration\n publicclassAbstractInexactActionimplementsComparable<AbstractInexactAction>{intseed;publicAbstractInexactAction(){}AbstractInexactAction(intname,intrel){seed=rel<<6|name;}publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);}@Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;}publicintname(){return(seed&0x3f);}publicintrel(){return(seed>>6);}} "]
22008[label="classModifier\n public "]
22009[label="superinterfaces\n implementsComparable<AbstractInexactAction> "]
32010[label="classType\n Comparable<AbstractInexactAction> "]
42011[label="typeArguments\n <AbstractInexactAction> "]
52012[label="classType_lfno_classOrInterfaceType\n AbstractInexactAction "]
22013[label="classBody\n {intseed;publicAbstractInexactAction(){}AbstractInexactAction(intname,intrel){seed=rel<<6|name;}publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);}@Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;}publicintname(){return(seed&0x3f);}publicintrel(){return(seed>>6);}} "]
32014[label="fieldDeclaration\n intseed; "]
42015[label="integralType\n int "]
42016[label="variableDeclaratorId\n seed "]
32017[label="constructorDeclaration\n publicAbstractInexactAction(){} "]
42018[label="constructorModifier\n public "]
42019[label="constructorDeclarator\n AbstractInexactAction() "]
52020[label="simpleTypeName\n AbstractInexactAction "]
42021[label="constructorBody\n {} "]
32022[label="constructorDeclaration\n AbstractInexactAction(intname,intrel){seed=rel<<6|name;} "]
42023[label="constructorDeclarator\n AbstractInexactAction(intname,intrel) "]
52024[label="simpleTypeName\n AbstractInexactAction "]
52025[label="formalParameterList\n intname,intrel "]
62026[label="formalParameter\n intname "]
72027[label="integralType\n int "]
72028[label="variableDeclaratorId\n name "]
62029[label="formalParameter\n intrel "]
72030[label="integralType\n int "]
72031[label="variableDeclaratorId\n rel "]
42032[label="constructorBody\n {seed=rel<<6|name;} "]
52033[label="expressionStatement\n seed=rel<<6|name; "]
62034[label="assignment\n seed=rel<<6|name "]
72035[label="expressionName\n seed "]
72036[label="assignmentOperator\n = "]
72037[label="inclusiveOrExpression\n rel<<6|name "]
82038[label="shiftExpression\n rel<<6 "]
92039[label="expressionName\n rel "]
92040[label="literal\n 6 "]
82041[label="expressionName\n name "]
32042[label="methodDeclaration\n publicintcompareTo(AbstractInexactActiono){returnnewInteger(seed).compareTo(o.seed);} "]
42043[label="methodModifier\n public "]
42044[label="methodHeader\n intcompareTo(AbstractInexactActiono) "]
52045[label="integralType\n int "]
52046[label="methodDeclarator\n compareTo(AbstractInexactActiono) "]
62047[label="formalParameter\n AbstractInexactActiono "]
72048[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractInexactAction "]
72049[label="variableDeclaratorId\n o "]
42050[label="block\n {returnnewInteger(seed).compareTo(o.seed);} "]
52051[label="returnStatement\n returnnewInteger(seed).compareTo(o.seed); "]
62052[label="primary\n newInteger(seed).compareTo(o.seed) "]
72053[label="classInstanceCreationExpression_lfno_primary\n newInteger(seed) "]
82054[label="expressionName\n seed "]
72055[label="methodInvocation_lf_primary\n .compareTo(o.seed) "]
82056[label="expressionName\n o.seed "]
92057[label="ambiguousName\n o "]
32058[label="methodDeclaration\n @Overridepublicbooleanequals(Objectobj){if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;} "]
42059[label="markerAnnotation\n @Override "]
52060[label="typeName\n Override "]
42061[label="methodModifier\n public "]
42062[label="methodHeader\n booleanequals(Objectobj) "]
52063[label="unannPrimitiveType\n boolean "]
52064[label="methodDeclarator\n equals(Objectobj) "]
62065[label="formalParameter\n Objectobj "]
72066[label="unannClassType_lfno_unannClassOrInterfaceType\n Object "]
72067[label="variableDeclaratorId\n obj "]
42068[label="block\n {if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed;} "]
52069[label="blockStatements\n if(!(objinstanceofAbstractInexactAction))returnfalse;AbstractInexactActiono=(AbstractInexactAction)obj;returnseed==o.seed; "]
62070[label="ifThenStatement\n if(!(objinstanceofAbstractInexactAction))returnfalse; "]
72071[label="unaryExpressionNotPlusMinus\n !(objinstanceofAbstractInexactAction) "]
82072[label="primaryNoNewArray_lfno_primary\n (objinstanceofAbstractInexactAction) "]
92073[label="relationalExpression\n objinstanceofAbstractInexactAction "]
102074[label="expressionName\n obj "]
102075[label="classType_lfno_classOrInterfaceType\n AbstractInexactAction "]
72076[label="returnStatement\n returnfalse; "]
82077[label="literal\n false "]
62078[label="localVariableDeclarationStatement\n AbstractInexactActiono=(AbstractInexactAction)obj; "]
72079[label="localVariableDeclaration\n AbstractInexactActiono=(AbstractInexactAction)obj "]
82080[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractInexactAction "]
82081[label="variableDeclarator\n o=(AbstractInexactAction)obj "]
92082[label="variableDeclaratorId\n o "]
92083[label="castExpression\n (AbstractInexactAction)obj "]
102084[label="classType_lfno_classOrInterfaceType\n AbstractInexactAction "]
102085[label="expressionName\n obj "]
62086[label="returnStatement\n returnseed==o.seed; "]
72087[label="equalityExpression\n seed==o.seed "]
82088[label="expressionName\n seed "]
82089[label="expressionName\n o.seed "]
92090[label="ambiguousName\n o "]
32091[label="methodDeclaration\n publicintname(){return(seed&0x3f);} "]
42092[label="methodModifier\n public "]
42093[label="methodHeader\n intname() "]
52094[label="integralType\n int "]
52095[label="methodDeclarator\n name() "]
42096[label="block\n {return(seed&0x3f);} "]
52097[label="returnStatement\n return(seed&0x3f); "]
62098[label="primaryNoNewArray_lfno_primary\n (seed&0x3f) "]
72099[label="andExpression\n seed&0x3f "]
82100[label="expressionName\n seed "]
82101[label="literal\n 0x3f "]
32102[label="methodDeclaration\n publicintrel(){return(seed>>6);} "]
42103[label="methodModifier\n public "]
42104[label="methodHeader\n intrel() "]
52105[label="integralType\n int "]
52106[label="methodDeclarator\n rel() "]
42107[label="block\n {return(seed>>6);} "]
52108[label="returnStatement\n return(seed>>6); "]
62109[label="primaryNoNewArray_lfno_primary\n (seed>>6) "]
72110[label="shiftExpression\n seed>>6 "]
82111[label="expressionName\n seed "]
82112[label="literal\n 6 "]
02113[label="compilationUnit\n packagecom.hankcs.hanlp.classification.models;importcom.hankcs.hanlp.collection.trie.bintrie.BinTrie;importcom.hankcs.hanlp.classification.tokenizers.ITokenizer;importjava.io.*;publicclassAbstractModelimplementsSerializable{publicString[]catalog;publicITokenizertokenizer;publicBinTrie<Integer>wordIdTrie;}<EOF> "]
12114[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.models; "]
22115[label="packageName\n com.hankcs.hanlp.classification.models "]
32116[label="packageName\n com.hankcs.hanlp.classification "]
42117[label="packageName\n com.hankcs.hanlp "]
52118[label="packageName\n com.hankcs "]
62119[label="packageName\n com "]
12120[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.collection.trie.bintrie.BinTrie; "]
22121[label="typeName\n com.hankcs.hanlp.collection.trie.bintrie.BinTrie "]
32122[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie.bintrie "]
42123[label="packageOrTypeName\n com.hankcs.hanlp.collection.trie "]
52124[label="packageOrTypeName\n com.hankcs.hanlp.collection "]
62125[label="packageOrTypeName\n com.hankcs.hanlp "]
72126[label="packageOrTypeName\n com.hankcs "]
82127[label="packageOrTypeName\n com "]
12128[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.tokenizers.ITokenizer; "]
22129[label="typeName\n com.hankcs.hanlp.classification.tokenizers.ITokenizer "]
32130[label="packageOrTypeName\n com.hankcs.hanlp.classification.tokenizers "]
42131[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
52132[label="packageOrTypeName\n com.hankcs.hanlp "]
62133[label="packageOrTypeName\n com.hankcs "]
72134[label="packageOrTypeName\n com "]
12135[label="typeImportOnDemandDeclaration\n importjava.io.*; "]
22136[label="packageOrTypeName\n java.io "]
32137[label="packageOrTypeName\n java "]
12138[label="normalClassDeclaration\n publicclassAbstractModelimplementsSerializable{publicString[]catalog;publicITokenizertokenizer;publicBinTrie<Integer>wordIdTrie;} "]
22139[label="classModifier\n public "]
22140[label="superinterfaces\n implementsSerializable "]
32141[label="classType\n Serializable "]
22142[label="classBody\n {publicString[]catalog;publicITokenizertokenizer;publicBinTrie<Integer>wordIdTrie;} "]
32143[label="fieldDeclaration\n publicString[]catalog; "]
42144[label="fieldModifier\n public "]
42145[label="unannArrayType\n String[] "]
52146[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
52147[label="dims\n [] "]
42148[label="variableDeclaratorId\n catalog "]
32149[label="fieldDeclaration\n publicITokenizertokenizer; "]
42150[label="fieldModifier\n public "]
42151[label="unannClassType_lfno_unannClassOrInterfaceType\n ITokenizer "]
42152[label="variableDeclaratorId\n tokenizer "]
32153[label="fieldDeclaration\n publicBinTrie<Integer>wordIdTrie; "]
42154[label="fieldModifier\n public "]
42155[label="unannClassType_lfno_unannClassOrInterfaceType\n BinTrie<Integer> "]
52156[label="typeArguments\n <Integer> "]
62157[label="classType_lfno_classOrInterfaceType\n Integer "]
42158[label="variableDeclaratorId\n wordIdTrie "]
-10->01
-10->02
-10->03
-10->04
-10->05
-10->06
-10->07
07->18
18->29
29->310
310->411
411->512
512->613
613->714
07->115
115->216
115->217
217->318
115->219
219->320
320->421
421->522
115->223
223->324
324->425
324->426
426->527
324->428
223->329
329->430
430->531
329->432
329->433
433->534
433->535
329->436
436->537
537->638
-10->039
039->140
140->241
241->342
342->443
443->544
544->645
645->746
039->147
147->248
147->249
249->350
147->251
251->352
352->453
453->554
453->555
352->456
251->357
357->458
357->459
251->360
360->461
360->462
462->563
462->564
564->665
665->766
665->767
564->668
360->469
469->570
570->671
671->772
772->873
671->774
671->775
251->376
376->477
376->478
478->579
478->580
376->481
481->582
582->683
683->784
683->785
785->886
785->887
251->388
388->489
388->490
490->591
388->492
251->393
393->494
393->495
495->596
495->597
597->698
698->799
799->8100
799->8101
698->7102
393->4103
4103->5104
5104->6105
6105->7106
7106->8107
8107->9108
7106->8109
7106->8110
5104->6111
6111->7112
-10->0113
0113->1114
1114->2115
2115->3116
3116->4117
4117->5118
5118->6119
0113->1120
1120->2121
2121->3122
3122->4123
4123->5124
5124->6125
6125->7126
0113->1127
1127->2128
2128->3129
3129->4130
4130->5131
5131->6132
6132->7133
0113->1134
1134->2135
2135->3136
3136->4137
4137->5138
5138->6139
6139->7140
0113->1141
1141->2142
2142->3143
3143->4144
4144->5145
5145->6146
6146->7147
0113->1148
1148->2149
2149->3150
3150->4151
4151->5152
5152->6153
6153->7154
0113->1155
1155->2156
2156->3157
3157->4158
4158->5159
5159->6160
6160->7161
0113->1162
1162->2163
2163->3164
3164->4165
0113->1166
1166->2167
2167->3168
3168->4169
0113->1170
1170->2171
2171->3172
3172->4173
0113->1174
1174->2175
2175->3176
3176->4177
4177->5178
5178->6179
6179->7180
0113->1181
1181->2182
1181->2183
1181->2184
2184->3185
1181->2186
2186->3187
3187->4188
4188->5189
3187->4190
3187->4191
4191->5192
4191->5193
5193->6194
6194->7195
6194->7196
3187->4197
4197->5198
5198->6199
2186->3200
3200->4201
3200->4202
4202->5203
4202->5204
2186->3205
3205->4206
4206->5207
3205->4208
3205->4209
4209->5210
4209->5211
5211->6212
6212->7213
6212->7214
4209->5215
5215->6216
6216->7217
6216->7218
3205->4219
4219->5220
5220->6221
6221->7222
7222->8223
8223->9224
9224->10225
10225->11226
10225->11227
7222->8228
8228->9229
8228->9230
9230->10231
9230->10232
5220->6233
6233->7234
7234->8235
7234->8236
2186->3237
3237->4238
4238->5239
3237->4240
3237->4241
4241->5242
4241->5243
5243->6244
6244->7245
6244->7246
4241->5247
5247->6248
6248->7249
6248->7250
3237->4251
4251->5252
5252->6253
6253->7254
7254->8255
8255->9256
9256->10257
10257->11258
10257->11259
7254->8260
8260->9261
8260->9262
9262->10263
9262->10264
5252->6265
6265->7266
7266->8267
7266->8268
2186->3269
3269->4270
4270->5271
3269->4272
3269->4273
4273->5274
4273->5275
5275->6276
6276->7277
7277->8278
7277->8279
6276->7280
7280->8281
7280->8282
4273->5283
5283->6284
3269->4285
4285->5286
5286->6287
6287->7288
7288->8289
7288->8290
8290->9291
8290->9292
5286->6293
6293->7294
7294->8295
7294->8296
8296->9297
8296->9298
5286->6299
6299->7300
7300->8301
7300->8302
2186->3303
3303->4304
4304->5305
3303->4306
3303->4307
4307->5308
4307->5309
5309->6310
6310->7311
7311->8312
8312->9313
9313->10314
9313->10315
10315->11316
10315->11317
6310->7318
4307->5319
5319->6320
3303->4321
4321->5322
5322->6323
6323->7324
7324->8325
7324->8326
8326->9327
8326->9328
5322->6329
6329->7330
7330->8331
7330->8332
5322->6333
6333->7334
7334->8335
7334->8336
8336->9337
8336->9338
9338->10339
5322->6340
6340->7341
7341->8342
7341->8343
8343->9344
8343->9345
5322->6346
6346->7347
7347->8348
7347->8349
8349->9350
9350->10351
10351->11352
10351->11353
11353->12354
11353->12355
6346->7356
6346->7357
7357->8358
6346->7359
7359->8360
8360->9361
9361->10362
10362->11363
10362->11364
11364->12365
11364->12366
12366->13367
8360->9368
9368->10369
10369->11370
10369->11371
11371->12372
11371->12373
8360->9374
9374->10375
9374->10376
9374->10377
10377->11378
9374->10379
10379->11380
11380->12381
12381->13382
12381->13383
13383->14384
13383->14385
8360->9386
9386->10387
10387->11388
8360->9389
9389->10390
10390->11391
10390->11392
11392->12393
11392->12394
12394->13395
12394->13396
13396->14397
13396->14398
5322->6399
6399->7400
7400->8401
7400->8402
5322->6403
6403->7404
7404->8405
7404->8406
2186->3407
3407->4408
4408->5409
3407->4410
3407->4411
4411->5412
4411->5413
5413->6414
6414->7415
6414->7416
4411->5417
5417->6418
3407->4419
4419->5420
5420->6421
6421->7422
6421->7423
7423->8424
7423->8425
2186->3426
3426->4427
4427->5428
3426->4429
3426->4430
4430->5431
5431->6432
6432->7433
7433->8434
7433->8435
4430->5436
5436->6437
6437->7438
6437->7439
3426->4440
4440->5441
5441->6442
6442->7443
7443->8444
7443->8445
8445->9446
8445->9447
9447->10448
5441->6449
6449->7450
7450->8451
7450->8452
6449->7453
7453->8454
8454->9455
9455->10456
5441->6457
6457->7458
7458->8459
7458->8460
6457->7461
7461->8462
8462->9463
9463->10464
5441->6465
6465->7466
7466->8467
8467->9468
8467->9469
7466->8470
8470->9471
8470->9472
9472->10473
9472->10474
5441->6475
6475->7476
7476->8477
8477->9478
9478->10479
10479->11480
10479->11481
7476->8482
8482->9483
8482->9484
9484->10485
10485->11486
11486->12487
11486->12488
5441->6489
6489->7490
7490->8491
7490->8492
8492->9493
8492->9494
6489->7495
7495->8496
7495->8497
8497->9498
6489->7499
7499->8500
6489->7501
7501->8502
8502->9503
9503->10504
9503->10505
10505->11506
11506->12507
12507->13508
11506->12509
10505->11510
11510->12511
11510->12512
5441->6513
6513->7514
2186->3515
3515->4516
4516->5517
3515->4518
3515->4519
4519->5520
4519->5521
5521->6522
6522->7523
6522->7524
4519->5525
5525->6526
6526->7527
6526->7528
3515->4529
4529->5530
5530->6531
6531->7532
7532->8533
7532->8534
8534->9535
8534->9536
9536->10537
5530->6538
6538->7539
7539->8540
7539->8541
6538->7542
7542->8543
8543->9544
9544->10545
5530->6546
6546->7547
7547->8548
7547->8549
6546->7550
7550->8551
8551->9552
9552->10553
5530->6554
6554->7555
7555->8556
8556->9557
8556->9558
7555->8559
8559->9560
8559->9561
9561->10562
9561->10563
5530->6564
6564->7565
7565->8566
7565->8567
8567->9568
8567->9569
9569->10570
5530->6571
6571->7572
7572->8573
7572->8574
8574->9575
8574->9576
9576->10577
5530->6578
6578->7579
7579->8580
7579->8581
8581->9582
8581->9583
6578->7584
7584->8585
7584->8586
8586->9587
6578->7588
7588->8589
6578->7590
7590->8591
8591->9592
9592->10593
10593->11594
10593->11595
9592->10596
8591->9597
9597->10598
10598->11599
11599->12600
12600->13601
12600->13602
12600->13603
13603->14604
13603->14605
10598->11606
11606->12607
12607->13608
12607->13609
12607->13610
5530->6611
6611->7612
-10->0613
0613->1614
1614->2615
2615->3616
3616->4617
4617->5618
5618->6619
0613->1620
1620->2621
2621->3622
3622->4623
0613->1624
1624->2625
2625->3626
3626->4627
0613->1628
1628->2629
1628->2630
1628->2631
2631->3632
3632->4633
3632->4634
3632->4635
3632->4636
4636->5637
4636->5638
2631->3639
3639->4640
3639->4641
3639->4642
2631->3643
3643->4644
3643->4645
3643->4646
3643->4647
2631->3648
3648->4649
3648->4650
4650->5651
4650->5652
5652->6653
5652->6654
3648->4655
4655->5656
5656->6657
6657->7658
6657->7659
6657->7660
7660->8661
2631->3662
3662->4663
3662->4664
4664->5665
5665->6666
5665->6667
4664->5668
5668->6669
6669->7670
7670->8671
7670->8672
6669->7673
7673->8674
7673->8675
3662->4676
4676->5677
5677->6678
6678->7679
7679->8680
8680->9681
7679->8682
8682->9683
8682->9684
5677->6685
6685->7686
7686->8687
8687->9688
8687->9689
7686->8690
8690->9691
8690->9692
9692->10693
9692->10694
10694->11695
5677->6696
6696->7697
7697->8698
7697->8699
8699->9700
8699->9701
6696->7702
7702->8703
7702->8704
6696->7705
7705->8706
6696->7707
7707->8708
8708->9709
9709->10710
10710->11711
10710->11712
11712->12713
11712->12714
12714->13715
8708->9716
9716->10717
10717->11718
10717->11719
9716->10720
10720->11721
8708->9722
9722->10723
10723->11724
11724->12725
11724->12726
10723->11727
10723->11728
5677->6729
6729->7730
2631->3731
3731->4732
3731->4733
4733->5734
4733->5735
3731->4736
4736->5737
5737->6738
6738->7739
7739->8740
7739->8741
8741->9742
8741->9743
9743->10744
5737->6745
6745->7746
7746->8747
8747->9748
9748->10749
10749->11750
10749->11751
9748->10752
10752->11753
11753->12754
10752->11755
8747->9756
9756->10757
9756->10758
7746->8759
7746->8760
2631->3761
3761->4762
3761->4763
3761->4764
4764->5765
4764->5766
3761->4767
2631->3768
3768->4769
3768->4770
3768->4771
4771->5772
4771->5773
4771->5774
5774->6775
3768->4776
4776->5777
5777->6778
6778->7779
7779->8780
5777->6781
6781->7782
7782->8783
7782->8784
7782->8785
8785->9786
8785->9787
9787->10788
5777->6789
6789->7790
7790->8791
7790->8792
7790->8793
8793->9794
8793->9795
9795->10796
5777->6797
6797->7798
7798->8799
8799->9800
9800->10801
10801->11802
10801->11803
10801->11804
11804->12805
12805->13806
8799->9807
9807->10808
10808->11809
10808->11810
11810->12811
11810->12812
8799->9813
9813->10814
10814->11815
11815->12816
12816->13817
12816->13818
12816->13819
13819->14820
10814->11821
9813->10822
10822->11823
11823->12824
12824->13825
13825->14826
14826->15827
14826->15828
13825->14829
14829->15830
14829->15831
15831->16832
15831->16833
16833->17834
11823->12835
12835->13836
13836->14837
14837->15838
14837->15839
13836->14840
14840->15841
14840->15842
15842->16843
15842->16844
16844->17845
11823->12846
12846->13847
13847->14848
14848->15849
14848->15850
15850->16851
15850->16852
13847->14853
14853->15854
14853->15855
13847->14856
14856->15857
13847->14858
14858->15859
15859->16860
16860->17861
16860->17862
16860->17863
17863->18864
16860->17865
17865->18866
18866->19867
19867->20868
19867->20869
18866->19870
15859->16871
16871->17872
17872->18873
17872->18874
18874->19875
18874->19876
15859->16877
16877->17878
17878->18879
17878->18880
18880->19881
18880->19882
16877->17883
17883->18884
17883->18885
16877->17886
17886->18887
16877->17888
17888->18889
18889->19890
19890->20891
19890->20892
19890->20893
20893->21894
21894->22895
22895->23896
21894->22897
20893->21898
21898->22899
21898->22900
22900->23901
22900->23902
15859->16903
16903->17904
17904->18905
17904->18906
18906->19907
18906->19908
16903->17909
17909->18910
17909->18911
16903->17912
17912->18913
16903->17914
17914->18915
18915->19916
19916->20917
19916->20918
20918->21919
20918->21920
18915->19921
19921->20922
20922->21923
21923->22924
22924->23925
22924->23926
23926->24927
23926->24928
24928->25929
24928->25930
21923->22931
22931->23932
22931->23933
21923->22934
22934->23935
21923->22936
22936->23937
23937->24938
24938->25939
25939->26940
26940->27941
26940->27942
25939->26943
25939->26944
26944->27945
26944->27946
27946->28947
27946->28948
23937->24949
24949->25950
25950->26951
26951->27952
26951->27953
25950->26954
25950->26955
26955->27956
26955->27957
27957->28958
27957->28959
20922->21960
21960->22961
22961->23962
23962->24963
23962->24964
22961->23965
22961->23966
20922->21967
21967->22968
22968->23969
23969->24970
23969->24971
22968->23972
22968->23973
23973->24974
23973->24975
20922->21976
11823->12977
12977->13978
13978->14979
14979->15980
13978->14981
11823->12982
12982->13983
13983->14984
13983->14985
14985->15986
14985->15987
12982->13988
13988->14989
13988->14990
12982->13991
13991->14992
12982->13993
13993->14994
14994->15995
15995->16996
14994->15997
15997->16998
15997->16999
16999->171000
16999->171001
15997->161002
161002->171003
161002->171004
6797->71005
71005->81006
81006->91007
91007->101008
101008->111009
2631->31010
31010->41011
31010->41012
31010->41013
41013->51014
51014->61015
61015->71016
61015->71017
51014->61018
41013->51019
51019->61020
61020->71021
61020->71022
51019->61023
41013->51024
51024->61025
51024->61026
61026->71027
61026->71028
71028->81029
81029->91030
91030->101031
91030->101032
81029->91033
71028->81034
81034->91035
91035->101036
91035->101037
81034->91038
51024->61039
61039->71040
71040->81041
81041->91042
91042->101043
101043->111044
91042->101045
91042->101046
71040->81047
81047->91048
91048->101049
101049->111050
91048->101051
91048->101052
-10->01053
01053->11054
11054->21055
21055->31056
31056->41057
41057->51058
51058->61059
01053->11060
11060->21061
21061->31062
31062->41063
41063->51064
51064->61065
61065->71066
01053->11067
11067->21068
21068->31069
31069->41070
41070->51071
51071->61072
61072->71073
01053->11074
11074->21075
21075->31076
31076->41077
41077->51078
51078->61079
61079->71080
01053->11081
11081->21082
21082->31083
31083->41084
41084->51085
51085->61086
61086->71087
01053->11088
11088->21089
21089->31090
31090->41091
41091->51092
51092->61093
61093->71094
01053->11095
11095->21096
21096->31097
31097->41098
41098->51099
51099->61100
61100->71101
01053->11102
11102->21103
21103->31104
31104->41105
01053->11106
11106->21107
21107->31108
31108->41109
01053->11110
11110->21111
21111->31112
31112->41113
01053->11114
11114->21115
21115->31116
31116->41117
41117->51118
51118->61119
61119->71120
01053->11121
11121->21122
11121->21123
11121->21124
21124->31125
11121->21126
21126->31127
31127->41128
31127->41129
31127->41130
21126->31131
31131->41132
31131->41133
31131->41134
21126->31135
31135->41136
31135->41137
31135->41138
21126->31139
31139->41140
31139->41141
31139->41142
21126->31143
31143->41144
31143->41145
41145->51146
41145->51147
51147->61148
51147->61149
31143->41150
41150->51151
51151->61152
61152->71153
71153->81154
71153->81155
71153->81156
81156->91157
91157->101158
51151->61159
61159->71160
71160->81161
71160->81162
71160->81163
81163->91164
51151->61165
61165->71166
71166->81167
71166->81168
71166->81169
81169->91170
91170->101171
51151->61172
61172->71173
71173->81174
71173->81175
71173->81176
21126->31177
31177->41178
31177->41179
41179->51180
31177->41181
41181->51182
51182->61183
61183->71184
71184->81185
71184->81186
71184->81187
51182->61188
61188->71189
71189->81190
71189->81191
71189->81192
51182->61193
61193->71194
71194->81195
71194->81196
71194->81197
21126->31198
31198->41199
31198->41200
41200->51201
41200->51202
51202->61203
61203->71204
61203->71205
31198->41206
41206->51207
51207->61208
61208->71209
71209->81210
81210->91211
71209->81212
71209->81213
51207->61214
61214->71215
21126->31216
31216->41217
31216->41218
41218->51219
41218->51220
51220->61221
61221->71222
71222->81223
71222->81224
61221->71225
71225->81226
71225->81227
31216->41228
41228->51229
51229->61230
61230->71231
71231->81232
81232->91233
81232->91234
71231->81235
81235->91236
81235->91237
91237->101238
91237->101239
51229->61240
61240->71241
71241->81242
71241->81243
81243->91244
91244->101245
101245->111246
91244->101247
101247->111248
91244->101249
91244->101250
71241->81251
81251->91252
91252->101253
91252->101254
91252->101255
91252->101256
21126->31257
31257->41258
31257->41259
41259->51260
41259->51261
31257->41262
41262->51263
51263->61264
21126->31265
31265->41266
31265->41267
41267->51268
41267->51269
31265->41270
41270->51271
51271->61272
21126->31273
31273->41274
31273->41275
41275->51276
41275->51277
31273->41278
41278->51279
51279->61280
21126->31281
31281->41282
41282->51283
31281->41284
31281->41285
41285->51286
41285->51287
51287->61288
61288->71289
71289->81290
71289->81291
61288->71292
71292->81293
71292->81294
41285->51295
51295->61296
61296->71297
61296->71298
31281->41299
41299->51300
51300->61301
61301->71302
61301->71303
71303->81304
71303->81305
71303->81306
21126->31307
31307->41308
41308->51309
31307->41310
31307->41311
41311->51312
41311->51313
51313->61314
61314->71315
61314->71316
41311->51317
51317->61318
61318->71319
61318->71320
31307->41321
41321->51322
51322->61323
61323->71324
61323->71325
71325->81326
71325->81327
21126->31328
31328->41329
41329->51330
31328->41331
31328->41332
41332->51333
41332->51334
31328->41335
41335->51336
51336->61337
21126->31338
31338->41339
41339->51340
31338->41341
31338->41342
41342->51343
41342->51344
51344->61345
61345->71346
71346->81347
81347->91348
81347->91349
71346->81350
81350->91351
81350->91352
61345->71353
71353->81354
71353->81355
41342->51356
51356->61357
61357->71358
61357->71359
31338->41360
41360->51361
51361->61362
61362->71363
71363->81364
71363->81365
61362->71366
71366->81367
81367->91368
51361->61369
61369->71370
71370->81371
71370->81372
81372->91373
81372->91374
91374->101375
51361->61376
61376->71377
71377->81378
81378->91379
61376->71380
71380->81381
81381->91382
91382->101383
91382->101384
101384->111385
101384->111386
111386->121387
51361->61388
61388->71389
71389->81390
81390->91391
61388->71392
71392->81393
81393->91394
91394->101395
91394->101396
101396->111397
101396->111398
111398->121399
51361->61400
61400->71401
71401->81402
81402->91403
81402->91404
71401->81405
81405->91406
81405->91407
91407->101408
61400->71409
71409->81410
81410->91411
51361->61412
61412->71413
71413->81414
81414->91415
81414->91416
71413->81417
81417->91418
81417->91419
91419->101420
51361->61421
61421->71422
71422->81423
71422->81424
61421->71425
71425->81426
51361->61427
61427->71428
71428->81429
71428->81430
81430->91431
81430->91432
91432->101433
91432->101434
91432->101435
81430->91436
81430->91437
51361->61438
61438->71439
61438->71440
61438->71441
61438->71442
71442->81443
81443->91444
91444->101445
101445->111446
91444->101447
81443->91448
91448->101449
101449->111450
111450->121451
111450->121452
101449->111453
111453->121454
111453->121455
121455->131456
81443->91457
91457->101458
101458->111459
101458->111460
91457->101461
81443->91462
91462->101463
101463->111464
101463->111465
111465->121466
111465->121467
121467->131468
81443->91469
91469->101470
101470->111471
101470->111472
111472->121473
111472->121474
81443->91475
91475->101476
101476->111477
101476->111478
111478->121479
111478->121480
81443->91481
91481->101482
101482->111483
101482->111484
91481->101485
101485->111486
111486->121487
121487->131488
131488->141489
131488->141490
131488->141491
111486->121492
121492->131493
131493->141494
131493->141495
131493->141496
141496->151497
141496->151498
151498->161499
161499->171500
171500->181501
161499->171502
91481->101503
101503->111504
111504->121505
121505->131506
131506->141507
131506->141508
131506->141509
141509->151510
141509->151511
151511->161512
161512->171513
171513->181514
161512->171515
171515->181516
181516->191517
181516->191518
111504->121519
121519->131520
131520->141521
131520->141522
131520->141523
141523->151524
81443->91525
91525->101526
101526->111527
101526->111528
111528->121529
111528->121530
121530->131531
121530->131532
131532->141533
131532->141534
141534->151535
151535->161536
161536->171537
161536->171538
141534->151539
81443->91540
91540->101541
101541->111542
101541->111543
111543->121544
111543->121545
91540->101546
101546->111547
101546->111548
91540->101549
101549->111550
91540->101551
101551->111552
111552->121553
121553->131554
131554->141555
131554->141556
141556->151557
151557->161558
141556->151559
151559->161560
151559->161561
161561->171562
171562->181563
171562->181564
161561->171565
111552->121566
121566->131567
131567->141568
141568->151569
141568->151570
131567->141571
121566->131572
131572->141573
141573->151574
151574->161575
151574->161576
161576->171577
161576->171578
161576->171579
161576->171580
171580->181581
171580->181582
181582->191583
191583->201584
201584->211585
201584->211586
191583->201587
181582->191588
191588->201589
191588->201590
81443->91591
91591->101592
101592->111593
101592->111594
111594->121595
111594->121596
121596->131597
121596->131598
51361->61599
61599->71600
71600->81601
71600->81602
81602->91603
81602->91604
91604->101605
101605->111606
91604->101607
81602->91608
91608->101609
51361->61610
61610->71611
21126->31612
31612->41613
41613->51614
31612->41615
31612->41616
41616->51617
41616->51618
51618->61619
61619->71620
71620->81621
71620->81622
61619->71623
71623->81624
71623->81625
41616->51626
51626->61627
61627->71628
61627->71629
31612->41630
41630->51631
51631->61632
21126->31633
31633->41634
41634->51635
31633->41636
31633->41637
41637->51638
41637->51639
51639->61640
61640->71641
71641->81642
81642->91643
91643->101644
91643->101645
101645->111646
101645->111647
61640->71648
31633->41649
41649->51650
51650->61651
61651->71652
71652->81653
71652->81654
81654->91655
91655->101656
101656->111657
101656->111658
111658->121659
111658->121660
61651->71661
61651->71662
71662->81663
61651->71664
71664->81665
81665->91666
81665->91667
81665->91668
91668->101669
81665->91670
91670->101671
101671->111672
111672->121673
111672->121674
121674->131675
131675->141676
121674->131677
51650->61678
61678->71679
-10->01680
01680->11681
11681->21682
21682->31683
31683->41684
41684->51685
01680->11686
11686->21687
21687->31688
31688->41689
41689->51690
01680->11691
11691->21692
21692->31693
31693->41694
41694->51695
51695->61696
61696->71697
71697->81698
01680->11699
11699->21700
21700->31701
31701->41702
41702->51703
51703->61704
61704->71705
71705->81706
01680->11707
11707->21708
21708->31709
31709->41710
41710->51711
51711->61712
61712->71713
01680->11714
11714->21715
21715->31716
31716->41717
41717->51718
51718->61719
01680->11720
11720->21721
21721->31722
31722->41723
41723->51724
51724->61725
01680->11726
11726->21727
21727->31728
31728->41729
41729->51730
51730->61731
01680->11732
11732->21733
21733->31734
31734->41735
01680->11736
11736->21737
21737->31738
31738->41739
01680->11740
11740->21741
11740->21742
11740->21743
21743->31744
11740->21745
21745->31746
31746->41747
31746->41748
31746->41749
41749->51750
41749->51751
51751->61752
61752->71753
51751->61754
61754->71755
21745->31756
31756->41757
31756->41758
41758->51759
51759->61760
61760->71761
61760->71762
31756->41763
21745->31764
31764->41765
31764->41766
31764->41767
21745->31768
31768->41769
41769->51770
31768->41771
31768->41772
41772->51773
41772->51774
51774->61775
61775->71776
61775->71777
31768->41778
41778->51779
51779->61780
61780->71781
71781->81782
71781->81783
51779->61784
61784->71785
71785->81786
71785->81787
81787->91788
81787->91789
91789->101790
91789->101791
101791->111792
101791->111793
111793->121794
51779->61795
61795->71796
71796->81797
71796->81798
81798->91799
81798->91800
61795->71801
71801->81802
81802->91803
81802->91804
81802->91805
81802->91806
91806->101807
101807->111808
111808->121809
121809->131810
121809->131811
131811->141812
131811->141813
141813->151814
141813->151815
151815->161816
101807->111817
111817->121818
121818->131819
131819->141820
121818->131821
121818->131822
51779->61823
61823->71824
21745->31825
31825->41826
41826->51827
31825->41828
31825->41829
41829->51830
41829->51831
31825->41832
41832->51833
51833->61834
21745->31835
31835->41836
41836->51837
31835->41838
31835->41839
41839->51840
41839->51841
51841->61842
61842->71843
61842->71844
31835->41845
41845->51846
51846->61847
61847->71848
71848->81849
81849->91850
71848->81851
71848->81852
51846->61853
61853->71854
21745->31855
31855->41856
41856->51857
31855->41858
31855->41859
41859->51860
51860->61861
61861->71862
71862->81863
71862->81864
41859->51865
31855->41866
41866->51867
51867->61868
21745->31869
31869->41870
41870->51871
31869->41872
31869->41873
41873->51874
41873->51875
51875->61876
61876->71877
71877->81878
81878->91879
91879->101880
91879->101881
61876->71882
31869->41883
41883->51884
51884->61885
61885->71886
71886->81887
81887->91888
71886->81889
71886->81890
51884->61891
61891->71892
21745->31893
31893->41894
31893->41895
41895->51896
41895->51897
51897->61898
61898->71899
61898->71900
31893->41901
41901->51902
51902->61903
61903->71904
71904->81905
71904->81906
71904->81907
81907->91908
81907->91909
51902->61910
61910->71911
71911->81912
71911->81913
61910->71914
71914->81915
51902->61916
61916->71917
71917->81918
81918->91919
81918->91920
71917->81921
81921->91922
81921->91923
91923->101924
51902->61925
61925->71926
71926->81927
71926->81928
71926->81929
81929->91930
91930->101931
101931->111932
101931->111933
51902->61934
61934->71935
71935->81936
61934->71937
71937->81938
81938->91939
91939->101940
101940->111941
111941->121942
111941->121943
101940->111944
111944->121945
111944->121946
121946->131947
131947->141948
121946->131949
131949->141950
81938->91951
91951->101952
101952->111953
101952->111954
111954->121955
121955->131956
121955->131957
111954->121958
121958->131959
121958->131960
51902->61961
61961->71962
71962->81963
81963->91964
71962->81965
61961->71966
71966->81967
81967->91968
91968->101969
91968->101970
91968->101971
51902->61972
61972->71973
71973->81974
71973->81975
81975->91976
81975->91977
51902->61978
61978->71979
21745->31980
31980->41981
41981->51982
31980->41983
31980->41984
41984->51985
41984->51986
51986->61987
61987->71988
61987->71989
31980->41990
41990->51991
51991->61992
61992->71993
71993->81994
71993->81995
71993->81996
51991->61997
61997->71998
-10->01999
01999->12000
12000->22001
22001->32002
32002->42003
42003->52004
52004->62005
62005->72006
01999->12007
12007->22008
12007->22009
22009->32010
32010->42011
42011->52012
12007->22013
22013->32014
32014->42015
32014->42016
22013->32017
32017->42018
32017->42019
42019->52020
32017->42021
22013->32022
32022->42023
42023->52024
42023->52025
52025->62026
62026->72027
62026->72028
52025->62029
62029->72030
62029->72031
32022->42032
42032->52033
52033->62034
62034->72035
62034->72036
62034->72037
72037->82038
82038->92039
82038->92040
72037->82041
22013->32042
32042->42043
32042->42044
42044->52045
42044->52046
52046->62047
62047->72048
62047->72049
32042->42050
42050->52051
52051->62052
62052->72053
72053->82054
62052->72055
72055->82056
82056->92057
22013->32058
32058->42059
42059->52060
32058->42061
32058->42062
42062->52063
42062->52064
52064->62065
62065->72066
62065->72067
32058->42068
42068->52069
52069->62070
62070->72071
72071->82072
82072->92073
92073->102074
92073->102075
62070->72076
72076->82077
52069->62078
62078->72079
72079->82080
72079->82081
82081->92082
82081->92083
92083->102084
92083->102085
52069->62086
62086->72087
72087->82088
72087->82089
82089->92090
22013->32091
32091->42092
32091->42093
42093->52094
42093->52095
32091->42096
42096->52097
52097->62098
62098->72099
72099->82100
72099->82101
22013->32102
32102->42103
32102->42104
42104->52105
42104->52106
32102->42107
42107->52108
52108->62109
62109->72110
72110->82111
72110->82112
-10->02113
02113->12114
12114->22115
22115->32116
32116->42117
42117->52118
52118->62119
02113->12120
12120->22121
22121->32122
32122->42123
42123->52124
52124->62125
62125->72126
72126->82127
02113->12128
12128->22129
22129->32130
32130->42131
42131->52132
52132->62133
62133->72134
02113->12135
12135->22136
22136->32137
02113->12138
12138->22139
12138->22140
22140->32141
12138->22142
22142->32143
32143->42144
32143->42145
42145->52146
42145->52147
32143->42148
22142->32149
32149->42150
32149->42151
32149->42152
22142->32153
32153->42154
32153->42155
42155->52156
52156->62157
32153->42158
}

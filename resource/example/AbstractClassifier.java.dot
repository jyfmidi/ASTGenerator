digraph G {
00[label="compilationUnit\n Bud1%@@@@E%DSDB@@@ "]
01[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.bintrie;publicclass_EmptyValueArray<V>extends_ValueArray<V>{public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}}<EOF> "]
12[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.bintrie; "]
23[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie "]
34[label="packageName\n com.hankcs.hanlp.collection.trie "]
45[label="packageName\n com.hankcs.hanlp.collection "]
56[label="packageName\n com.hankcs.hanlp "]
67[label="packageName\n com.hankcs "]
78[label="packageName\n com "]
19[label="normalClassDeclaration\n publicclass_EmptyValueArray<V>extends_ValueArray<V>{public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}} "]
210[label="classModifier\n public "]
211[label="typeParameters\n <V> "]
312[label="typeParameter\n V "]
213[label="superclass\n extends_ValueArray<V> "]
314[label="classType\n _ValueArray<V> "]
415[label="typeArguments\n <V> "]
516[label="classType_lfno_classOrInterfaceType\n V "]
217[label="classBody\n {public_EmptyValueArray(){}@OverridepublicVnextValue(){returnnull;}} "]
318[label="constructorDeclaration\n public_EmptyValueArray(){} "]
419[label="constructorModifier\n public "]
420[label="constructorDeclarator\n _EmptyValueArray() "]
521[label="simpleTypeName\n _EmptyValueArray "]
422[label="constructorBody\n {} "]
323[label="methodDeclaration\n @OverridepublicVnextValue(){returnnull;} "]
424[label="markerAnnotation\n @Override "]
525[label="typeName\n Override "]
426[label="methodModifier\n public "]
427[label="methodHeader\n VnextValue() "]
528[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
529[label="methodDeclarator\n nextValue() "]
430[label="block\n {returnnull;} "]
531[label="returnStatement\n returnnull; "]
632[label="literal\n null "]
033[label="compilationUnit\n packagecom.hankcs.hanlp.collection.trie.bintrie;publicclass_ValueArray<V>{V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}}<EOF> "]
134[label="packageDeclaration\n packagecom.hankcs.hanlp.collection.trie.bintrie; "]
235[label="packageName\n com.hankcs.hanlp.collection.trie.bintrie "]
336[label="packageName\n com.hankcs.hanlp.collection.trie "]
437[label="packageName\n com.hankcs.hanlp.collection "]
538[label="packageName\n com.hankcs.hanlp "]
639[label="packageName\n com.hankcs "]
740[label="packageName\n com "]
141[label="normalClassDeclaration\n publicclass_ValueArray<V>{V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}} "]
242[label="classModifier\n public "]
243[label="typeParameters\n <V> "]
344[label="typeParameter\n V "]
245[label="classBody\n {V[]value;intoffset;public_ValueArray(V[]value){this.value=value;}publicVnextValue(){returnvalue[offset++];}protected_ValueArray(){}public_ValueArraysetValue(V[]value){this.value=value;returnthis;}} "]
346[label="fieldDeclaration\n V[]value; "]
447[label="unannArrayType\n V[] "]
548[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
549[label="dims\n [] "]
450[label="variableDeclaratorId\n value "]
351[label="fieldDeclaration\n intoffset; "]
452[label="integralType\n int "]
453[label="variableDeclaratorId\n offset "]
354[label="constructorDeclaration\n public_ValueArray(V[]value){this.value=value;} "]
455[label="constructorModifier\n public "]
456[label="constructorDeclarator\n _ValueArray(V[]value) "]
557[label="simpleTypeName\n _ValueArray "]
558[label="formalParameter\n V[]value "]
659[label="unannArrayType\n V[] "]
760[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
761[label="dims\n [] "]
662[label="variableDeclaratorId\n value "]
463[label="constructorBody\n {this.value=value;} "]
564[label="expressionStatement\n this.value=value; "]
665[label="assignment\n this.value=value "]
766[label="fieldAccess\n this.value "]
867[label="primaryNoNewArray_lfno_primary\n this "]
768[label="assignmentOperator\n = "]
769[label="expressionName\n value "]
370[label="methodDeclaration\n publicVnextValue(){returnvalue[offset++];} "]
471[label="methodModifier\n public "]
472[label="methodHeader\n VnextValue() "]
573[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
574[label="methodDeclarator\n nextValue() "]
475[label="block\n {returnvalue[offset++];} "]
576[label="returnStatement\n returnvalue[offset++]; "]
677[label="arrayAccess_lfno_primary\n value[offset++] "]
778[label="expressionName\n value "]
779[label="postfixExpression\n offset++ "]
880[label="expressionName\n offset "]
881[label="postIncrementExpression_lf_postfixExpression\n ++ "]
382[label="constructorDeclaration\n protected_ValueArray(){} "]
483[label="constructorModifier\n protected "]
484[label="constructorDeclarator\n _ValueArray() "]
585[label="simpleTypeName\n _ValueArray "]
486[label="constructorBody\n {} "]
387[label="methodDeclaration\n public_ValueArraysetValue(V[]value){this.value=value;returnthis;} "]
488[label="methodModifier\n public "]
489[label="methodHeader\n _ValueArraysetValue(V[]value) "]
590[label="unannClassType_lfno_unannClassOrInterfaceType\n _ValueArray "]
591[label="methodDeclarator\n setValue(V[]value) "]
692[label="formalParameter\n V[]value "]
793[label="unannArrayType\n V[] "]
894[label="unannClassType_lfno_unannClassOrInterfaceType\n V "]
895[label="dims\n [] "]
796[label="variableDeclaratorId\n value "]
497[label="block\n {this.value=value;returnthis;} "]
598[label="blockStatements\n this.value=value;returnthis; "]
699[label="expressionStatement\n this.value=value; "]
7100[label="assignment\n this.value=value "]
8101[label="fieldAccess\n this.value "]
9102[label="primaryNoNewArray_lfno_primary\n this "]
8103[label="assignmentOperator\n = "]
8104[label="expressionName\n value "]
6105[label="returnStatement\n returnthis; "]
7106[label="primaryNoNewArray_lfno_primary\n this "]
0107[label="compilationUnit\n packagecom.hankcs.hanlp.classification.classifiers;importcom.hankcs.hanlp.classification.corpus.Document;importcom.hankcs.hanlp.classification.corpus.IDataSet;importcom.hankcs.hanlp.classification.corpus.MemoryDataSet;importcom.hankcs.hanlp.classification.models.AbstractModel;importcom.hankcs.hanlp.classification.utilities.CollectionUtility;importcom.hankcs.hanlp.classification.utilities.MathUtility;importjava.io.IOException;importjava.util.Map;importjava.util.TreeMap;importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger;publicabstractclassAbstractClassifierimplementsIClassifier{@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}}<EOF> "]
1108[label="packageDeclaration\n packagecom.hankcs.hanlp.classification.classifiers; "]
2109[label="packageName\n com.hankcs.hanlp.classification.classifiers "]
3110[label="packageName\n com.hankcs.hanlp.classification "]
4111[label="packageName\n com.hankcs.hanlp "]
5112[label="packageName\n com.hankcs "]
6113[label="packageName\n com "]
1114[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.Document; "]
2115[label="typeName\n com.hankcs.hanlp.classification.corpus.Document "]
3116[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4117[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5118[label="packageOrTypeName\n com.hankcs.hanlp "]
6119[label="packageOrTypeName\n com.hankcs "]
7120[label="packageOrTypeName\n com "]
1121[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.IDataSet; "]
2122[label="typeName\n com.hankcs.hanlp.classification.corpus.IDataSet "]
3123[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4124[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5125[label="packageOrTypeName\n com.hankcs.hanlp "]
6126[label="packageOrTypeName\n com.hankcs "]
7127[label="packageOrTypeName\n com "]
1128[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.corpus.MemoryDataSet; "]
2129[label="typeName\n com.hankcs.hanlp.classification.corpus.MemoryDataSet "]
3130[label="packageOrTypeName\n com.hankcs.hanlp.classification.corpus "]
4131[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5132[label="packageOrTypeName\n com.hankcs.hanlp "]
6133[label="packageOrTypeName\n com.hankcs "]
7134[label="packageOrTypeName\n com "]
1135[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.models.AbstractModel; "]
2136[label="typeName\n com.hankcs.hanlp.classification.models.AbstractModel "]
3137[label="packageOrTypeName\n com.hankcs.hanlp.classification.models "]
4138[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5139[label="packageOrTypeName\n com.hankcs.hanlp "]
6140[label="packageOrTypeName\n com.hankcs "]
7141[label="packageOrTypeName\n com "]
1142[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.CollectionUtility; "]
2143[label="typeName\n com.hankcs.hanlp.classification.utilities.CollectionUtility "]
3144[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4145[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5146[label="packageOrTypeName\n com.hankcs.hanlp "]
6147[label="packageOrTypeName\n com.hankcs "]
7148[label="packageOrTypeName\n com "]
1149[label="singleTypeImportDeclaration\n importcom.hankcs.hanlp.classification.utilities.MathUtility; "]
2150[label="typeName\n com.hankcs.hanlp.classification.utilities.MathUtility "]
3151[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4152[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5153[label="packageOrTypeName\n com.hankcs.hanlp "]
6154[label="packageOrTypeName\n com.hankcs "]
7155[label="packageOrTypeName\n com "]
1156[label="singleTypeImportDeclaration\n importjava.io.IOException; "]
2157[label="typeName\n java.io.IOException "]
3158[label="packageOrTypeName\n java.io "]
4159[label="packageOrTypeName\n java "]
1160[label="singleTypeImportDeclaration\n importjava.util.Map; "]
2161[label="typeName\n java.util.Map "]
3162[label="packageOrTypeName\n java.util "]
4163[label="packageOrTypeName\n java "]
1164[label="singleTypeImportDeclaration\n importjava.util.TreeMap; "]
2165[label="typeName\n java.util.TreeMap "]
3166[label="packageOrTypeName\n java.util "]
4167[label="packageOrTypeName\n java "]
1168[label="singleStaticImportDeclaration\n importstaticcom.hankcs.hanlp.classification.utilities.Predefine.logger; "]
2169[label="typeName\n com.hankcs.hanlp.classification.utilities.Predefine "]
3170[label="packageOrTypeName\n com.hankcs.hanlp.classification.utilities "]
4171[label="packageOrTypeName\n com.hankcs.hanlp.classification "]
5172[label="packageOrTypeName\n com.hankcs.hanlp "]
6173[label="packageOrTypeName\n com.hankcs "]
7174[label="packageOrTypeName\n com "]
1175[label="normalClassDeclaration\n publicabstractclassAbstractClassifierimplementsIClassifier{@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}} "]
2176[label="classModifier\n public "]
2177[label="classModifier\n abstract "]
2178[label="superinterfaces\n implementsIClassifier "]
3179[label="classType\n IClassifier "]
2180[label="classBody\n {@OverridepublicIClassifierenableProbability(booleanenable){returnthis;}booleanconfigProbabilityEnabled=true;@OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);}@OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);}@Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);}@Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);}@Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");}@OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;}@Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;}} "]
3181[label="methodDeclaration\n @OverridepublicIClassifierenableProbability(booleanenable){returnthis;} "]
4182[label="markerAnnotation\n @Override "]
5183[label="typeName\n Override "]
4184[label="methodModifier\n public "]
4185[label="methodHeader\n IClassifierenableProbability(booleanenable) "]
5186[label="unannClassType_lfno_unannClassOrInterfaceType\n IClassifier "]
5187[label="methodDeclarator\n enableProbability(booleanenable) "]
6188[label="formalParameter\n booleanenable "]
7189[label="unannPrimitiveType\n boolean "]
7190[label="variableDeclaratorId\n enable "]
4191[label="block\n {returnthis;} "]
5192[label="returnStatement\n returnthis; "]
6193[label="primaryNoNewArray_lfno_primary\n this "]
3194[label="fieldDeclaration\n booleanconfigProbabilityEnabled=true; "]
4195[label="unannPrimitiveType\n boolean "]
4196[label="variableDeclarator\n configProbabilityEnabled=true "]
5197[label="variableDeclaratorId\n configProbabilityEnabled "]
5198[label="literal\n true "]
3199[label="methodDeclaration\n @OverridepublicStringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);} "]
4200[label="markerAnnotation\n @Override "]
5201[label="typeName\n Override "]
4202[label="methodModifier\n public "]
4203[label="methodHeader\n Stringclassify(Stringtext)throwsIllegalArgumentException,IllegalStateException "]
5204[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
5205[label="methodDeclarator\n classify(Stringtext) "]
6206[label="formalParameter\n Stringtext "]
7207[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
7208[label="variableDeclaratorId\n text "]
5209[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6210[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7211[label="classType\n IllegalArgumentException "]
7212[label="classType\n IllegalStateException "]
4213[label="block\n {Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap);} "]
5214[label="blockStatements\n Map<String,Double>scoreMap=predict(text);returnCollectionUtility.max(scoreMap); "]
6215[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=predict(text); "]
7216[label="localVariableDeclaration\n Map<String,Double>scoreMap=predict(text) "]
8217[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9218[label="typeArguments\n <String,Double> "]
10219[label="typeArgumentList\n String,Double "]
11220[label="classType_lfno_classOrInterfaceType\n String "]
11221[label="classType_lfno_classOrInterfaceType\n Double "]
8222[label="variableDeclarator\n scoreMap=predict(text) "]
9223[label="variableDeclaratorId\n scoreMap "]
9224[label="methodInvocation_lfno_primary\n predict(text) "]
10225[label="methodName\n predict "]
10226[label="expressionName\n text "]
6227[label="returnStatement\n returnCollectionUtility.max(scoreMap); "]
7228[label="methodInvocation_lfno_primary\n CollectionUtility.max(scoreMap) "]
8229[label="typeName\n CollectionUtility "]
8230[label="expressionName\n scoreMap "]
3231[label="methodDeclaration\n @OverridepublicStringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException{Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);} "]
4232[label="markerAnnotation\n @Override "]
5233[label="typeName\n Override "]
4234[label="methodModifier\n public "]
4235[label="methodHeader\n Stringclassify(Documentdocument)throwsIllegalArgumentException,IllegalStateException "]
5236[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
5237[label="methodDeclarator\n classify(Documentdocument) "]
6238[label="formalParameter\n Documentdocument "]
7239[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7240[label="variableDeclaratorId\n document "]
5241[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6242[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7243[label="classType\n IllegalArgumentException "]
7244[label="classType\n IllegalStateException "]
4245[label="block\n {Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap);} "]
5246[label="blockStatements\n Map<String,Double>scoreMap=predict(document);returnCollectionUtility.max(scoreMap); "]
6247[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=predict(document); "]
7248[label="localVariableDeclaration\n Map<String,Double>scoreMap=predict(document) "]
8249[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9250[label="typeArguments\n <String,Double> "]
10251[label="typeArgumentList\n String,Double "]
11252[label="classType_lfno_classOrInterfaceType\n String "]
11253[label="classType_lfno_classOrInterfaceType\n Double "]
8254[label="variableDeclarator\n scoreMap=predict(document) "]
9255[label="variableDeclaratorId\n scoreMap "]
9256[label="methodInvocation_lfno_primary\n predict(document) "]
10257[label="methodName\n predict "]
10258[label="expressionName\n document "]
6259[label="returnStatement\n returnCollectionUtility.max(scoreMap); "]
7260[label="methodInvocation_lfno_primary\n CollectionUtility.max(scoreMap) "]
8261[label="typeName\n CollectionUtility "]
8262[label="expressionName\n scoreMap "]
3263[label="methodDeclaration\n @Overridepublicvoidtrain(StringfolderPath,StringcharsetName)throwsIOException{IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);} "]
4264[label="markerAnnotation\n @Override "]
5265[label="typeName\n Override "]
4266[label="methodModifier\n public "]
4267[label="methodHeader\n voidtrain(StringfolderPath,StringcharsetName)throwsIOException "]
5268[label="result\n void "]
5269[label="methodDeclarator\n train(StringfolderPath,StringcharsetName) "]
6270[label="formalParameterList\n StringfolderPath,StringcharsetName "]
7271[label="formalParameter\n StringfolderPath "]
8272[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8273[label="variableDeclaratorId\n folderPath "]
7274[label="formalParameter\n StringcharsetName "]
8275[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8276[label="variableDeclaratorId\n charsetName "]
5277[label="throws_\n throwsIOException "]
6278[label="classType\n IOException "]
4279[label="block\n {IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet);} "]
5280[label="blockStatements\n IDataSetdataSet=newMemoryDataSet();dataSet.load(folderPath,charsetName);train(dataSet); "]
6281[label="localVariableDeclarationStatement\n IDataSetdataSet=newMemoryDataSet(); "]
7282[label="localVariableDeclaration\n IDataSetdataSet=newMemoryDataSet() "]
8283[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
8284[label="variableDeclarator\n dataSet=newMemoryDataSet() "]
9285[label="variableDeclaratorId\n dataSet "]
9286[label="classInstanceCreationExpression_lfno_primary\n newMemoryDataSet() "]
6287[label="expressionStatement\n dataSet.load(folderPath,charsetName); "]
7288[label="methodInvocation\n dataSet.load(folderPath,charsetName) "]
8289[label="typeName\n dataSet "]
8290[label="argumentList\n folderPath,charsetName "]
9291[label="expressionName\n folderPath "]
9292[label="expressionName\n charsetName "]
6293[label="expressionStatement\n train(dataSet); "]
7294[label="methodInvocation\n train(dataSet) "]
8295[label="methodName\n train "]
8296[label="expressionName\n dataSet "]
3297[label="methodDeclaration\n @Overridepublicvoidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException{IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);} "]
4298[label="markerAnnotation\n @Override "]
5299[label="typeName\n Override "]
4300[label="methodModifier\n public "]
4301[label="methodHeader\n voidtrain(Map<String,String[]>trainingDataSet)throwsIllegalArgumentException "]
5302[label="result\n void "]
5303[label="methodDeclarator\n train(Map<String,String[]>trainingDataSet) "]
6304[label="formalParameter\n Map<String,String[]>trainingDataSet "]
7305[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,String[]> "]
8306[label="typeArguments\n <String,String[]> "]
9307[label="typeArgumentList\n String,String[] "]
10308[label="classType_lfno_classOrInterfaceType\n String "]
10309[label="arrayType\n String[] "]
11310[label="classType_lfno_classOrInterfaceType\n String "]
11311[label="dims\n [] "]
7312[label="variableDeclaratorId\n trainingDataSet "]
5313[label="throws_\n throwsIllegalArgumentException "]
6314[label="classType\n IllegalArgumentException "]
4315[label="block\n {IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet);} "]
5316[label="blockStatements\n IDataSetdataSet=newMemoryDataSet();logger.start(\"正在构造训练数据集...\");inttotal=trainingDataSet.size();intcur=0;for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));}logger.finish(\" 加载完毕\n\");train(dataSet); "]
6317[label="localVariableDeclarationStatement\n IDataSetdataSet=newMemoryDataSet(); "]
7318[label="localVariableDeclaration\n IDataSetdataSet=newMemoryDataSet() "]
8319[label="unannClassType_lfno_unannClassOrInterfaceType\n IDataSet "]
8320[label="variableDeclarator\n dataSet=newMemoryDataSet() "]
9321[label="variableDeclaratorId\n dataSet "]
9322[label="classInstanceCreationExpression_lfno_primary\n newMemoryDataSet() "]
6323[label="expressionStatement\n logger.start(\"正在构造训练数据集...\"); "]
7324[label="methodInvocation\n logger.start(\"正在构造训练数据集...\") "]
8325[label="typeName\n logger "]
8326[label="literal\n \"正在构造训练数据集...\" "]
6327[label="localVariableDeclarationStatement\n inttotal=trainingDataSet.size(); "]
7328[label="localVariableDeclaration\n inttotal=trainingDataSet.size() "]
8329[label="integralType\n int "]
8330[label="variableDeclarator\n total=trainingDataSet.size() "]
9331[label="variableDeclaratorId\n total "]
9332[label="methodInvocation_lfno_primary\n trainingDataSet.size() "]
10333[label="typeName\n trainingDataSet "]
6334[label="localVariableDeclarationStatement\n intcur=0; "]
7335[label="localVariableDeclaration\n intcur=0 "]
8336[label="integralType\n int "]
8337[label="variableDeclarator\n cur=0 "]
9338[label="variableDeclaratorId\n cur "]
9339[label="literal\n 0 "]
6340[label="enhancedForStatement\n for(Map.Entry<String,String[]>entry:trainingDataSet.entrySet()){Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));} "]
7341[label="unannClassOrInterfaceType\n Map.Entry<String,String[]> "]
8342[label="unannClassType_lfno_unannClassOrInterfaceType\n Map "]
8343[label="unannClassType_lf_unannClassOrInterfaceType\n .Entry<String,String[]> "]
9344[label="typeArguments\n <String,String[]> "]
10345[label="typeArgumentList\n String,String[] "]
11346[label="classType_lfno_classOrInterfaceType\n String "]
11347[label="arrayType\n String[] "]
12348[label="classType_lfno_classOrInterfaceType\n String "]
12349[label="dims\n [] "]
7350[label="variableDeclaratorId\n entry "]
7351[label="methodInvocation_lfno_primary\n trainingDataSet.entrySet() "]
8352[label="typeName\n trainingDataSet "]
7353[label="block\n {Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total));} "]
8354[label="blockStatements\n Stringcategory=entry.getKey();logger.out(\"[%s]...\",category);for(Stringdoc:entry.getValue()){dataSet.add(category,doc);}++cur;logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)); "]
9355[label="localVariableDeclarationStatement\n Stringcategory=entry.getKey(); "]
10356[label="localVariableDeclaration\n Stringcategory=entry.getKey() "]
11357[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
11358[label="variableDeclarator\n category=entry.getKey() "]
12359[label="variableDeclaratorId\n category "]
12360[label="methodInvocation_lfno_primary\n entry.getKey() "]
13361[label="typeName\n entry "]
9362[label="expressionStatement\n logger.out(\"[%s]...\",category); "]
10363[label="methodInvocation\n logger.out(\"[%s]...\",category) "]
11364[label="typeName\n logger "]
11365[label="argumentList\n \"[%s]...\",category "]
12366[label="literal\n \"[%s]...\" "]
12367[label="expressionName\n category "]
9368[label="enhancedForStatement\n for(Stringdoc:entry.getValue()){dataSet.add(category,doc);} "]
10369[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
10370[label="variableDeclaratorId\n doc "]
10371[label="methodInvocation_lfno_primary\n entry.getValue() "]
11372[label="typeName\n entry "]
10373[label="block\n {dataSet.add(category,doc);} "]
11374[label="expressionStatement\n dataSet.add(category,doc); "]
12375[label="methodInvocation\n dataSet.add(category,doc) "]
13376[label="typeName\n dataSet "]
13377[label="argumentList\n category,doc "]
14378[label="expressionName\n category "]
14379[label="expressionName\n doc "]
9380[label="expressionStatement\n ++cur; "]
10381[label="preIncrementExpression\n ++cur "]
11382[label="expressionName\n cur "]
9383[label="expressionStatement\n logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)); "]
10384[label="methodInvocation\n logger.out(\"%.2f%%...\",MathUtility.percentage(cur,total)) "]
11385[label="typeName\n logger "]
11386[label="argumentList\n \"%.2f%%...\",MathUtility.percentage(cur,total) "]
12387[label="literal\n \"%.2f%%...\" "]
12388[label="methodInvocation_lfno_primary\n MathUtility.percentage(cur,total) "]
13389[label="typeName\n MathUtility "]
13390[label="argumentList\n cur,total "]
14391[label="expressionName\n cur "]
14392[label="expressionName\n total "]
6393[label="expressionStatement\n logger.finish(\" 加载完毕\n\"); "]
7394[label="methodInvocation\n logger.finish(\" 加载完毕\n\") "]
8395[label="typeName\n logger "]
8396[label="literal\n \" 加载完毕\n\" "]
6397[label="expressionStatement\n train(dataSet); "]
7398[label="methodInvocation\n train(dataSet) "]
8399[label="methodName\n train "]
8400[label="expressionName\n dataSet "]
3401[label="methodDeclaration\n @Overridepublicvoidtrain(StringfolderPath)throwsIOException{train(folderPath,\"UTF-8\");} "]
4402[label="markerAnnotation\n @Override "]
5403[label="typeName\n Override "]
4404[label="methodModifier\n public "]
4405[label="methodHeader\n voidtrain(StringfolderPath)throwsIOException "]
5406[label="result\n void "]
5407[label="methodDeclarator\n train(StringfolderPath) "]
6408[label="formalParameter\n StringfolderPath "]
7409[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
7410[label="variableDeclaratorId\n folderPath "]
5411[label="throws_\n throwsIOException "]
6412[label="classType\n IOException "]
4413[label="block\n {train(folderPath,\"UTF-8\");} "]
5414[label="expressionStatement\n train(folderPath,\"UTF-8\"); "]
6415[label="methodInvocation\n train(folderPath,\"UTF-8\") "]
7416[label="methodName\n train "]
7417[label="argumentList\n folderPath,\"UTF-8\" "]
8418[label="expressionName\n folderPath "]
8419[label="literal\n \"UTF-8\" "]
3420[label="methodDeclaration\n @OverridepublicMap<String,Double>predict(Documentdocument){AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;} "]
4421[label="markerAnnotation\n @Override "]
5422[label="typeName\n Override "]
4423[label="methodModifier\n public "]
4424[label="methodHeader\n Map<String,Double>predict(Documentdocument) "]
5425[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
6426[label="typeArguments\n <String,Double> "]
7427[label="typeArgumentList\n String,Double "]
8428[label="classType_lfno_classOrInterfaceType\n String "]
8429[label="classType_lfno_classOrInterfaceType\n Double "]
5430[label="methodDeclarator\n predict(Documentdocument) "]
6431[label="formalParameter\n Documentdocument "]
7432[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7433[label="variableDeclaratorId\n document "]
4434[label="block\n {AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap;} "]
5435[label="blockStatements\n AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);Map<String,Double>scoreMap=newTreeMap<String,Double>();for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);}returnscoreMap; "]
6436[label="localVariableDeclarationStatement\n AbstractModelmodel=getModel(); "]
7437[label="localVariableDeclaration\n AbstractModelmodel=getModel() "]
8438[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractModel "]
8439[label="variableDeclarator\n model=getModel() "]
9440[label="variableDeclaratorId\n model "]
9441[label="methodInvocation_lfno_primary\n getModel() "]
10442[label="methodName\n getModel "]
6443[label="ifThenStatement\n if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
7444[label="equalityExpression\n model==null "]
8445[label="expressionName\n model "]
8446[label="literal\n null "]
7447[label="block\n {thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
8448[label="throwStatement\n thrownewIllegalStateException(\"未训练模型！无法执行预测！\"); "]
9449[label="classInstanceCreationExpression_lfno_primary\n newIllegalStateException(\"未训练模型！无法执行预测！\") "]
10450[label="literal\n \"未训练模型！无法执行预测！\" "]
6451[label="ifThenStatement\n if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");} "]
7452[label="equalityExpression\n document==null "]
8453[label="expressionName\n document "]
8454[label="literal\n null "]
7455[label="block\n {thrownewIllegalArgumentException(\"参数 text == null\");} "]
8456[label="throwStatement\n thrownewIllegalArgumentException(\"参数 text == null\"); "]
9457[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"参数 text == null\") "]
10458[label="literal\n \"参数 text == null\" "]
6459[label="localVariableDeclarationStatement\n double[]probs=categorize(document); "]
7460[label="localVariableDeclaration\n double[]probs=categorize(document) "]
8461[label="unannArrayType\n double[] "]
9462[label="floatingPointType\n double "]
9463[label="dims\n [] "]
8464[label="variableDeclarator\n probs=categorize(document) "]
9465[label="variableDeclaratorId\n probs "]
9466[label="methodInvocation_lfno_primary\n categorize(document) "]
10467[label="methodName\n categorize "]
10468[label="expressionName\n document "]
6469[label="localVariableDeclarationStatement\n Map<String,Double>scoreMap=newTreeMap<String,Double>(); "]
7470[label="localVariableDeclaration\n Map<String,Double>scoreMap=newTreeMap<String,Double>() "]
8471[label="unannClassType_lfno_unannClassOrInterfaceType\n Map<String,Double> "]
9472[label="typeArguments\n <String,Double> "]
10473[label="typeArgumentList\n String,Double "]
11474[label="classType_lfno_classOrInterfaceType\n String "]
11475[label="classType_lfno_classOrInterfaceType\n Double "]
8476[label="variableDeclarator\n scoreMap=newTreeMap<String,Double>() "]
9477[label="variableDeclaratorId\n scoreMap "]
9478[label="classInstanceCreationExpression_lfno_primary\n newTreeMap<String,Double>() "]
10479[label="typeArguments\n <String,Double> "]
11480[label="typeArgumentList\n String,Double "]
12481[label="classType_lfno_classOrInterfaceType\n String "]
12482[label="classType_lfno_classOrInterfaceType\n Double "]
6483[label="basicForStatement\n for(inti=0;i<probs.length;i++){scoreMap.put(model.catalog[i],probs[i]);} "]
7484[label="localVariableDeclaration\n inti=0 "]
8485[label="integralType\n int "]
8486[label="variableDeclarator\n i=0 "]
9487[label="variableDeclaratorId\n i "]
9488[label="literal\n 0 "]
7489[label="relationalExpression\n i<probs.length "]
8490[label="expressionName\n i "]
8491[label="expressionName\n probs.length "]
9492[label="ambiguousName\n probs "]
7493[label="postIncrementExpression\n i++ "]
8494[label="expressionName\n i "]
7495[label="block\n {scoreMap.put(model.catalog[i],probs[i]);} "]
8496[label="expressionStatement\n scoreMap.put(model.catalog[i],probs[i]); "]
9497[label="methodInvocation\n scoreMap.put(model.catalog[i],probs[i]) "]
10498[label="typeName\n scoreMap "]
10499[label="argumentList\n model.catalog[i],probs[i] "]
11500[label="arrayAccess_lfno_primary\n model.catalog[i] "]
12501[label="expressionName\n model.catalog "]
13502[label="ambiguousName\n model "]
12503[label="expressionName\n i "]
11504[label="arrayAccess_lfno_primary\n probs[i] "]
12505[label="expressionName\n probs "]
12506[label="expressionName\n i "]
6507[label="returnStatement\n returnscoreMap; "]
7508[label="expressionName\n scoreMap "]
3509[label="methodDeclaration\n @Overridepublicintlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException{AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;} "]
4510[label="markerAnnotation\n @Override "]
5511[label="typeName\n Override "]
4512[label="methodModifier\n public "]
4513[label="methodHeader\n intlabel(Documentdocument)throwsIllegalArgumentException,IllegalStateException "]
5514[label="integralType\n int "]
5515[label="methodDeclarator\n label(Documentdocument) "]
6516[label="formalParameter\n Documentdocument "]
7517[label="unannClassType_lfno_unannClassOrInterfaceType\n Document "]
7518[label="variableDeclaratorId\n document "]
5519[label="throws_\n throwsIllegalArgumentException,IllegalStateException "]
6520[label="exceptionTypeList\n IllegalArgumentException,IllegalStateException "]
7521[label="classType\n IllegalArgumentException "]
7522[label="classType\n IllegalStateException "]
4523[label="block\n {AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest;} "]
5524[label="blockStatements\n AbstractModelmodel=getModel();if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");}if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");}double[]probs=categorize(document);doublemax=Double.NEGATIVE_INFINITY;intbest=-1;for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}}returnbest; "]
6525[label="localVariableDeclarationStatement\n AbstractModelmodel=getModel(); "]
7526[label="localVariableDeclaration\n AbstractModelmodel=getModel() "]
8527[label="unannClassType_lfno_unannClassOrInterfaceType\n AbstractModel "]
8528[label="variableDeclarator\n model=getModel() "]
9529[label="variableDeclaratorId\n model "]
9530[label="methodInvocation_lfno_primary\n getModel() "]
10531[label="methodName\n getModel "]
6532[label="ifThenStatement\n if(model==null){thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
7533[label="equalityExpression\n model==null "]
8534[label="expressionName\n model "]
8535[label="literal\n null "]
7536[label="block\n {thrownewIllegalStateException(\"未训练模型！无法执行预测！\");} "]
8537[label="throwStatement\n thrownewIllegalStateException(\"未训练模型！无法执行预测！\"); "]
9538[label="classInstanceCreationExpression_lfno_primary\n newIllegalStateException(\"未训练模型！无法执行预测！\") "]
10539[label="literal\n \"未训练模型！无法执行预测！\" "]
6540[label="ifThenStatement\n if(document==null){thrownewIllegalArgumentException(\"参数 text == null\");} "]
7541[label="equalityExpression\n document==null "]
8542[label="expressionName\n document "]
8543[label="literal\n null "]
7544[label="block\n {thrownewIllegalArgumentException(\"参数 text == null\");} "]
8545[label="throwStatement\n thrownewIllegalArgumentException(\"参数 text == null\"); "]
9546[label="classInstanceCreationExpression_lfno_primary\n newIllegalArgumentException(\"参数 text == null\") "]
10547[label="literal\n \"参数 text == null\" "]
6548[label="localVariableDeclarationStatement\n double[]probs=categorize(document); "]
7549[label="localVariableDeclaration\n double[]probs=categorize(document) "]
8550[label="unannArrayType\n double[] "]
9551[label="floatingPointType\n double "]
9552[label="dims\n [] "]
8553[label="variableDeclarator\n probs=categorize(document) "]
9554[label="variableDeclaratorId\n probs "]
9555[label="methodInvocation_lfno_primary\n categorize(document) "]
10556[label="methodName\n categorize "]
10557[label="expressionName\n document "]
6558[label="localVariableDeclarationStatement\n doublemax=Double.NEGATIVE_INFINITY; "]
7559[label="localVariableDeclaration\n doublemax=Double.NEGATIVE_INFINITY "]
8560[label="floatingPointType\n double "]
8561[label="variableDeclarator\n max=Double.NEGATIVE_INFINITY "]
9562[label="variableDeclaratorId\n max "]
9563[label="expressionName\n Double.NEGATIVE_INFINITY "]
10564[label="ambiguousName\n Double "]
6565[label="localVariableDeclarationStatement\n intbest=-1; "]
7566[label="localVariableDeclaration\n intbest=-1 "]
8567[label="integralType\n int "]
8568[label="variableDeclarator\n best=-1 "]
9569[label="variableDeclaratorId\n best "]
9570[label="unaryExpression\n -1 "]
10571[label="literal\n 1 "]
6572[label="basicForStatement\n for(inti=0;i<probs.length;i++){if(probs[i]>max){max=probs[i];best=i;}} "]
7573[label="localVariableDeclaration\n inti=0 "]
8574[label="integralType\n int "]
8575[label="variableDeclarator\n i=0 "]
9576[label="variableDeclaratorId\n i "]
9577[label="literal\n 0 "]
7578[label="relationalExpression\n i<probs.length "]
8579[label="expressionName\n i "]
8580[label="expressionName\n probs.length "]
9581[label="ambiguousName\n probs "]
7582[label="postIncrementExpression\n i++ "]
8583[label="expressionName\n i "]
7584[label="block\n {if(probs[i]>max){max=probs[i];best=i;}} "]
8585[label="ifThenStatement\n if(probs[i]>max){max=probs[i];best=i;} "]
9586[label="relationalExpression\n probs[i]>max "]
10587[label="arrayAccess_lfno_primary\n probs[i] "]
11588[label="expressionName\n probs "]
11589[label="expressionName\n i "]
10590[label="expressionName\n max "]
9591[label="block\n {max=probs[i];best=i;} "]
10592[label="blockStatements\n max=probs[i];best=i; "]
11593[label="expressionStatement\n max=probs[i]; "]
12594[label="assignment\n max=probs[i] "]
13595[label="expressionName\n max "]
13596[label="assignmentOperator\n = "]
13597[label="arrayAccess_lfno_primary\n probs[i] "]
14598[label="expressionName\n probs "]
14599[label="expressionName\n i "]
11600[label="expressionStatement\n best=i; "]
12601[label="assignment\n best=i "]
13602[label="expressionName\n best "]
13603[label="assignmentOperator\n = "]
13604[label="expressionName\n i "]
6605[label="returnStatement\n returnbest; "]
7606[label="expressionName\n best "]
-10->01
01->12
12->23
23->34
34->45
45->56
56->67
67->78
01->19
19->210
19->211
211->312
19->213
213->314
314->415
415->516
19->217
217->318
318->419
318->420
420->521
318->422
217->323
323->424
424->525
323->426
323->427
427->528
427->529
323->430
430->531
531->632
-10->033
033->134
134->235
235->336
336->437
437->538
538->639
639->740
033->141
141->242
141->243
243->344
141->245
245->346
346->447
447->548
447->549
346->450
245->351
351->452
351->453
245->354
354->455
354->456
456->557
456->558
558->659
659->760
659->761
558->662
354->463
463->564
564->665
665->766
766->867
665->768
665->769
245->370
370->471
370->472
472->573
472->574
370->475
475->576
576->677
677->778
677->779
779->880
779->881
245->382
382->483
382->484
484->585
382->486
245->387
387->488
387->489
489->590
489->591
591->692
692->793
793->894
793->895
692->796
387->497
497->598
598->699
699->7100
7100->8101
8101->9102
7100->8103
7100->8104
598->6105
6105->7106
-10->0107
0107->1108
1108->2109
2109->3110
3110->4111
4111->5112
5112->6113
0107->1114
1114->2115
2115->3116
3116->4117
4117->5118
5118->6119
6119->7120
0107->1121
1121->2122
2122->3123
3123->4124
4124->5125
5125->6126
6126->7127
0107->1128
1128->2129
2129->3130
3130->4131
4131->5132
5132->6133
6133->7134
0107->1135
1135->2136
2136->3137
3137->4138
4138->5139
5139->6140
6140->7141
0107->1142
1142->2143
2143->3144
3144->4145
4145->5146
5146->6147
6147->7148
0107->1149
1149->2150
2150->3151
3151->4152
4152->5153
5153->6154
6154->7155
0107->1156
1156->2157
2157->3158
3158->4159
0107->1160
1160->2161
2161->3162
3162->4163
0107->1164
1164->2165
2165->3166
3166->4167
0107->1168
1168->2169
2169->3170
3170->4171
4171->5172
5172->6173
6173->7174
0107->1175
1175->2176
1175->2177
1175->2178
2178->3179
1175->2180
2180->3181
3181->4182
4182->5183
3181->4184
3181->4185
4185->5186
4185->5187
5187->6188
6188->7189
6188->7190
3181->4191
4191->5192
5192->6193
2180->3194
3194->4195
3194->4196
4196->5197
4196->5198
2180->3199
3199->4200
4200->5201
3199->4202
3199->4203
4203->5204
4203->5205
5205->6206
6206->7207
6206->7208
4203->5209
5209->6210
6210->7211
6210->7212
3199->4213
4213->5214
5214->6215
6215->7216
7216->8217
8217->9218
9218->10219
10219->11220
10219->11221
7216->8222
8222->9223
8222->9224
9224->10225
9224->10226
5214->6227
6227->7228
7228->8229
7228->8230
2180->3231
3231->4232
4232->5233
3231->4234
3231->4235
4235->5236
4235->5237
5237->6238
6238->7239
6238->7240
4235->5241
5241->6242
6242->7243
6242->7244
3231->4245
4245->5246
5246->6247
6247->7248
7248->8249
8249->9250
9250->10251
10251->11252
10251->11253
7248->8254
8254->9255
8254->9256
9256->10257
9256->10258
5246->6259
6259->7260
7260->8261
7260->8262
2180->3263
3263->4264
4264->5265
3263->4266
3263->4267
4267->5268
4267->5269
5269->6270
6270->7271
7271->8272
7271->8273
6270->7274
7274->8275
7274->8276
4267->5277
5277->6278
3263->4279
4279->5280
5280->6281
6281->7282
7282->8283
7282->8284
8284->9285
8284->9286
5280->6287
6287->7288
7288->8289
7288->8290
8290->9291
8290->9292
5280->6293
6293->7294
7294->8295
7294->8296
2180->3297
3297->4298
4298->5299
3297->4300
3297->4301
4301->5302
4301->5303
5303->6304
6304->7305
7305->8306
8306->9307
9307->10308
9307->10309
10309->11310
10309->11311
6304->7312
4301->5313
5313->6314
3297->4315
4315->5316
5316->6317
6317->7318
7318->8319
7318->8320
8320->9321
8320->9322
5316->6323
6323->7324
7324->8325
7324->8326
5316->6327
6327->7328
7328->8329
7328->8330
8330->9331
8330->9332
9332->10333
5316->6334
6334->7335
7335->8336
7335->8337
8337->9338
8337->9339
5316->6340
6340->7341
7341->8342
7341->8343
8343->9344
9344->10345
10345->11346
10345->11347
11347->12348
11347->12349
6340->7350
6340->7351
7351->8352
6340->7353
7353->8354
8354->9355
9355->10356
10356->11357
10356->11358
11358->12359
11358->12360
12360->13361
8354->9362
9362->10363
10363->11364
10363->11365
11365->12366
11365->12367
8354->9368
9368->10369
9368->10370
9368->10371
10371->11372
9368->10373
10373->11374
11374->12375
12375->13376
12375->13377
13377->14378
13377->14379
8354->9380
9380->10381
10381->11382
8354->9383
9383->10384
10384->11385
10384->11386
11386->12387
11386->12388
12388->13389
12388->13390
13390->14391
13390->14392
5316->6393
6393->7394
7394->8395
7394->8396
5316->6397
6397->7398
7398->8399
7398->8400
2180->3401
3401->4402
4402->5403
3401->4404
3401->4405
4405->5406
4405->5407
5407->6408
6408->7409
6408->7410
4405->5411
5411->6412
3401->4413
4413->5414
5414->6415
6415->7416
6415->7417
7417->8418
7417->8419
2180->3420
3420->4421
4421->5422
3420->4423
3420->4424
4424->5425
5425->6426
6426->7427
7427->8428
7427->8429
4424->5430
5430->6431
6431->7432
6431->7433
3420->4434
4434->5435
5435->6436
6436->7437
7437->8438
7437->8439
8439->9440
8439->9441
9441->10442
5435->6443
6443->7444
7444->8445
7444->8446
6443->7447
7447->8448
8448->9449
9449->10450
5435->6451
6451->7452
7452->8453
7452->8454
6451->7455
7455->8456
8456->9457
9457->10458
5435->6459
6459->7460
7460->8461
8461->9462
8461->9463
7460->8464
8464->9465
8464->9466
9466->10467
9466->10468
5435->6469
6469->7470
7470->8471
8471->9472
9472->10473
10473->11474
10473->11475
7470->8476
8476->9477
8476->9478
9478->10479
10479->11480
11480->12481
11480->12482
5435->6483
6483->7484
7484->8485
7484->8486
8486->9487
8486->9488
6483->7489
7489->8490
7489->8491
8491->9492
6483->7493
7493->8494
6483->7495
7495->8496
8496->9497
9497->10498
9497->10499
10499->11500
11500->12501
12501->13502
11500->12503
10499->11504
11504->12505
11504->12506
5435->6507
6507->7508
2180->3509
3509->4510
4510->5511
3509->4512
3509->4513
4513->5514
4513->5515
5515->6516
6516->7517
6516->7518
4513->5519
5519->6520
6520->7521
6520->7522
3509->4523
4523->5524
5524->6525
6525->7526
7526->8527
7526->8528
8528->9529
8528->9530
9530->10531
5524->6532
6532->7533
7533->8534
7533->8535
6532->7536
7536->8537
8537->9538
9538->10539
5524->6540
6540->7541
7541->8542
7541->8543
6540->7544
7544->8545
8545->9546
9546->10547
5524->6548
6548->7549
7549->8550
8550->9551
8550->9552
7549->8553
8553->9554
8553->9555
9555->10556
9555->10557
5524->6558
6558->7559
7559->8560
7559->8561
8561->9562
8561->9563
9563->10564
5524->6565
6565->7566
7566->8567
7566->8568
8568->9569
8568->9570
9570->10571
5524->6572
6572->7573
7573->8574
7573->8575
8575->9576
8575->9577
6572->7578
7578->8579
7578->8580
8580->9581
6572->7582
7582->8583
6572->7584
7584->8585
8585->9586
9586->10587
10587->11588
10587->11589
9586->10590
8585->9591
9591->10592
10592->11593
11593->12594
12594->13595
12594->13596
12594->13597
13597->14598
13597->14599
10592->11600
11600->12601
12601->13602
12601->13603
12601->13604
5524->6605
6605->7606
}
